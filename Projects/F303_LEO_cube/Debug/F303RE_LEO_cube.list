
F303RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001128c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08011430  08011430  00021430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ca0  08011ca0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08011ca0  08011ca0  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011ca0  08011ca0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ca0  08011ca0  00021ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ca4  08011ca4  00021ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011ca8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d228  200001e8  08011e8c  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  2000d410  08011e8c  0003d410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c23a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000880e  00000000  00000000  0007c44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001880d  00000000  00000000  00084c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001bb8  00000000  00000000  0009d470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004310  00000000  00000000  0009f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000173c7  00000000  00000000  000a3338  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009c45  00000000  00000000  000ba6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006788  00000000  00000000  000c43c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011414 	.word	0x08011414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08011414 	.word	0x08011414

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b082      	sub	sp, #8
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	2105      	movs	r1, #5
 8000c00:	f001 fb7c 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c04:	2803      	cmp	r0, #3
 8000c06:	d802      	bhi.n	8000c0e <parseCounterCmd+0x16>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c08:	48be      	ldr	r0, [pc, #760]	; (8000f04 <parseCounterCmd+0x30c>)
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	9b00      	ldr	r3, [sp, #0]
	switch(cmdIn){
 8000c10:	4abd      	ldr	r2, [pc, #756]	; (8000f08 <parseCounterCmd+0x310>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f000 8100 	beq.w	8000e18 <parseCounterCmd+0x220>
 8000c18:	d828      	bhi.n	8000c6c <parseCounterCmd+0x74>
 8000c1a:	4abc      	ldr	r2, [pc, #752]	; (8000f0c <parseCounterCmd+0x314>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d071      	beq.n	8000d04 <parseCounterCmd+0x10c>
 8000c20:	f240 8082 	bls.w	8000d28 <parseCounterCmd+0x130>
 8000c24:	4aba      	ldr	r2, [pc, #744]	; (8000f10 <parseCounterCmd+0x318>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f000 810f 	beq.w	8000e4a <parseCounterCmd+0x252>
 8000c2c:	f240 813a 	bls.w	8000ea4 <parseCounterCmd+0x2ac>
 8000c30:	4ab8      	ldr	r2, [pc, #736]	; (8000f14 <parseCounterCmd+0x31c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d04e      	beq.n	8000cd4 <parseCounterCmd+0xdc>
 8000c36:	f502 227f 	add.w	r2, r2, #1044480	; 0xff000
 8000c3a:	f502 72fd 	add.w	r2, r2, #506	; 0x1fa
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d1e2      	bne.n	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000c42:	4668      	mov	r0, sp
 8000c44:	2105      	movs	r1, #5
 8000c46:	f001 fb59 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d92e      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000c4e:	9b00      	ldr	r3, [sp, #0]
		if(isCounterEtrGate(cmdIn)){
 8000c50:	4ab1      	ldr	r2, [pc, #708]	; (8000f18 <parseCounterCmd+0x320>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f000 8186 	beq.w	8000f64 <parseCounterCmd+0x36c>
 8000c58:	4ab0      	ldr	r2, [pc, #704]	; (8000f1c <parseCounterCmd+0x324>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f040 818b 	bne.w	8000f76 <parseCounterCmd+0x37e>
				counterSetEtrGate(500);
 8000c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c64:	f002 fa40 	bl	80030e8 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c68:	48a6      	ldr	r0, [pc, #664]	; (8000f04 <parseCounterCmd+0x30c>)
 8000c6a:	e7ce      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000c6c:	4aac      	ldr	r2, [pc, #688]	; (8000f20 <parseCounterCmd+0x328>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d044      	beq.n	8000cfc <parseCounterCmd+0x104>
 8000c72:	f240 808f 	bls.w	8000d94 <parseCounterCmd+0x19c>
 8000c76:	4aab      	ldr	r2, [pc, #684]	; (8000f24 <parseCounterCmd+0x32c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d00a      	beq.n	8000c92 <parseCounterCmd+0x9a>
 8000c7c:	f240 80f8 	bls.w	8000e70 <parseCounterCmd+0x278>
 8000c80:	4aa9      	ldr	r2, [pc, #676]	; (8000f28 <parseCounterCmd+0x330>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d015      	beq.n	8000cb2 <parseCounterCmd+0xba>
 8000c86:	f502 226f 	add.w	r2, r2, #978944	; 0xef000
 8000c8a:	f602 62ef 	addw	r2, r2, #3823	; 0xeef
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d1ba      	bne.n	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000c92:	4668      	mov	r0, sp
 8000c94:	2105      	movs	r1, #5
 8000c96:	f001 fb31 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c9a:	2803      	cmp	r0, #3
 8000c9c:	d906      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000c9e:	9b00      	ldr	r3, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000ca0:	4a98      	ldr	r2, [pc, #608]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d002      	beq.n	8000cac <parseCounterCmd+0xb4>
 8000ca6:	4aa1      	ldr	r2, [pc, #644]	; (8000f2c <parseCounterCmd+0x334>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d1ad      	bne.n	8000c08 <parseCounterCmd+0x10>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cac:	2096      	movs	r0, #150	; 0x96
}
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000cb2:	4668      	mov	r0, sp
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	f001 fb21 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cba:	2803      	cmp	r0, #3
 8000cbc:	d9f6      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000cbe:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000cc0:	4b90      	ldr	r3, [pc, #576]	; (8000f04 <parseCounterCmd+0x30c>)
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d0f2      	beq.n	8000cac <parseCounterCmd+0xb4>
 8000cc6:	4b99      	ldr	r3, [pc, #612]	; (8000f2c <parseCounterCmd+0x334>)
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	d0ef      	beq.n	8000cac <parseCounterCmd+0xb4>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8000ccc:	f002 fa24 	bl	8003118 <counterSetRefSampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cd0:	488c      	ldr	r0, [pc, #560]	; (8000f04 <parseCounterCmd+0x30c>)
 8000cd2:	e79a      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000cd4:	4668      	mov	r0, sp
 8000cd6:	2105      	movs	r1, #5
 8000cd8:	f001 fb10 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cdc:	2803      	cmp	r0, #3
 8000cde:	d9e5      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000ce0:	9b00      	ldr	r3, [sp, #0]
		if(isCounterMode(cmdIn)){
 8000ce2:	4a93      	ldr	r2, [pc, #588]	; (8000f30 <parseCounterCmd+0x338>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	f000 8108 	beq.w	8000efa <parseCounterCmd+0x302>
 8000cea:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <parseCounterCmd+0x33c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	f040 81be 	bne.w	800106e <parseCounterCmd+0x476>
				counterSetMode(IC);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f002 f99a 	bl	800302c <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cf8:	4882      	ldr	r0, [pc, #520]	; (8000f04 <parseCounterCmd+0x30c>)
 8000cfa:	e786      	b.n	8000c0a <parseCounterCmd+0x12>
		counterSendStart();
 8000cfc:	f002 f9b8 	bl	8003070 <counterSendStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d00:	4880      	ldr	r0, [pc, #512]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d02:	e782      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d04:	4668      	mov	r0, sp
 8000d06:	2105      	movs	r1, #5
 8000d08:	f001 faf8 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d0c:	2803      	cmp	r0, #3
 8000d0e:	d9cd      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000d10:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000d12:	4c7c      	ldr	r4, [pc, #496]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d14:	42a0      	cmp	r0, r4
 8000d16:	d0c9      	beq.n	8000cac <parseCounterCmd+0xb4>
 8000d18:	4b84      	ldr	r3, [pc, #528]	; (8000f2c <parseCounterCmd+0x334>)
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d0c6      	beq.n	8000cac <parseCounterCmd+0xb4>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 8000d1e:	b280      	uxth	r0, r0
 8000d20:	f002 fa30 	bl	8003184 <counterSetIc2SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d24:	4620      	mov	r0, r4
 8000d26:	e770      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d28:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d077      	beq.n	8000e20 <parseCounterCmd+0x228>
 8000d30:	4a81      	ldr	r2, [pc, #516]	; (8000f38 <parseCounterCmd+0x340>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d019      	beq.n	8000d6a <parseCounterCmd+0x172>
 8000d36:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f47f af64 	bne.w	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d40:	4668      	mov	r0, sp
 8000d42:	2105      	movs	r1, #5
 8000d44:	f001 fada 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d48:	2803      	cmp	r0, #3
 8000d4a:	d9af      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000d4c:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc1(cmdIn)){
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <parseCounterCmd+0x344>)
 8000d50:	4413      	add	r3, r2
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	f240 80b7 	bls.w	8000ec6 <parseCounterCmd+0x2ce>
 8000d58:	4b79      	ldr	r3, [pc, #484]	; (8000f40 <parseCounterCmd+0x348>)
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	f040 817e 	bne.w	800105c <parseCounterCmd+0x464>
				counterSetIc1Prescaler(4);
 8000d60:	2004      	movs	r0, #4
 8000d62:	f002 fa2d 	bl	80031c0 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d66:	4867      	ldr	r0, [pc, #412]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d68:	e74f      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d6a:	4668      	mov	r0, sp
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	f001 fac5 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d72:	2803      	cmp	r0, #3
 8000d74:	d99a      	bls.n	8000cac <parseCounterCmd+0xb4>
 8000d76:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc2(cmdIn)){
 8000d78:	4b70      	ldr	r3, [pc, #448]	; (8000f3c <parseCounterCmd+0x344>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f240 80ab 	bls.w	8000ed8 <parseCounterCmd+0x2e0>
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <parseCounterCmd+0x348>)
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8160 	bne.w	800104a <parseCounterCmd+0x452>
				counterSetIc2Prescaler(4);
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f002 fa2a 	bl	80031e4 <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d90:	485c      	ldr	r0, [pc, #368]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d92:	e73a      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d94:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8000d98:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d037      	beq.n	8000e10 <parseCounterCmd+0x218>
 8000da0:	f102 727f 	add.w	r2, r2, #66846720	; 0x3fc0000
 8000da4:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000da8:	f502 72f9 	add.w	r2, r2, #498	; 0x1f2
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d01b      	beq.n	8000de8 <parseCounterCmd+0x1f0>
 8000db0:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8000db4:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8000db8:	3af1      	subs	r2, #241	; 0xf1
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f47f af24 	bne.w	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000dc0:	4668      	mov	r0, sp
 8000dc2:	2105      	movs	r1, #5
 8000dc4:	f001 fa9a 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dc8:	2803      	cmp	r0, #3
 8000dca:	f67f af6f 	bls.w	8000cac <parseCounterCmd+0xb4>
 8000dce:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <parseCounterCmd+0x30c>)
 8000dd2:	4298      	cmp	r0, r3
 8000dd4:	f43f af6a 	beq.w	8000cac <parseCounterCmd+0xb4>
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <parseCounterCmd+0x334>)
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	f43f af66 	beq.w	8000cac <parseCounterCmd+0xb4>
			counterSetTiTimeout((uint32_t)cmdIn);
 8000de0:	f002 fa82 	bl	80032e8 <counterSetTiTimeout>
	cmdIn = (error > 0) ? error : CMD_END;
 8000de4:	4847      	ldr	r0, [pc, #284]	; (8000f04 <parseCounterCmd+0x30c>)
 8000de6:	e710      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000de8:	4668      	mov	r0, sp
 8000dea:	2105      	movs	r1, #5
 8000dec:	f001 fa86 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000df0:	2803      	cmp	r0, #3
 8000df2:	f67f af5b 	bls.w	8000cac <parseCounterCmd+0xb4>
 8000df6:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcTiEvent(cmdIn)){
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <parseCounterCmd+0x34c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d079      	beq.n	8000ef2 <parseCounterCmd+0x2fa>
 8000dfe:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000e02:	4293      	cmp	r3, r2
 8000e04:	f040 8100 	bne.w	8001008 <parseCounterCmd+0x410>
				counterSetIcTi2_RisingFalling();
 8000e08:	f002 fa40 	bl	800328c <counterSetIcTi2_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e0c:	483d      	ldr	r0, [pc, #244]	; (8000f04 <parseCounterCmd+0x30c>)
 8000e0e:	e6fc      	b.n	8000c0a <parseCounterCmd+0x12>
		counterSendStop();
 8000e10:	f002 f946 	bl	80030a0 <counterSendStop>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e14:	483b      	ldr	r0, [pc, #236]	; (8000f04 <parseCounterCmd+0x30c>)
 8000e16:	e6f8      	b.n	8000c0a <parseCounterCmd+0x12>
		counterDeinit();
 8000e18:	f002 f954 	bl	80030c4 <counterDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e1c:	4839      	ldr	r0, [pc, #228]	; (8000f04 <parseCounterCmd+0x30c>)
 8000e1e:	e6f4      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e20:	4668      	mov	r0, sp
 8000e22:	2105      	movs	r1, #5
 8000e24:	f001 fa6a 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e28:	2803      	cmp	r0, #3
 8000e2a:	f67f af3f 	bls.w	8000cac <parseCounterCmd+0xb4>
 8000e2e:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e30:	4c34      	ldr	r4, [pc, #208]	; (8000f04 <parseCounterCmd+0x30c>)
 8000e32:	42a0      	cmp	r0, r4
 8000e34:	f43f af3a 	beq.w	8000cac <parseCounterCmd+0xb4>
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <parseCounterCmd+0x334>)
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	f43f af36 	beq.w	8000cac <parseCounterCmd+0xb4>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 8000e40:	b280      	uxth	r0, r0
 8000e42:	f002 f981 	bl	8003148 <counterSetIc1SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e46:	4620      	mov	r0, r4
 8000e48:	e6df      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	f001 fa55 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e52:	2803      	cmp	r0, #3
 8000e54:	f67f af2a 	bls.w	8000cac <parseCounterCmd+0xb4>
 8000e58:	9b00      	ldr	r3, [sp, #0]
		if(isCounterTiMode(cmdIn)){
 8000e5a:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <parseCounterCmd+0x350>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d044      	beq.n	8000eea <parseCounterCmd+0x2f2>
 8000e60:	4a3a      	ldr	r2, [pc, #232]	; (8000f4c <parseCounterCmd+0x354>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	f47f af22 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetTiMode_Independent();
 8000e68:	f002 fa2e 	bl	80032c8 <counterSetTiMode_Independent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e6c:	4825      	ldr	r0, [pc, #148]	; (8000f04 <parseCounterCmd+0x30c>)
 8000e6e:	e6cc      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000e70:	f102 427a 	add.w	r2, r2, #4194304000	; 0xfa000000
 8000e74:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f47f aec5 	bne.w	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e7e:	4668      	mov	r0, sp
 8000e80:	2105      	movs	r1, #5
 8000e82:	f001 fa3b 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e86:	2803      	cmp	r0, #3
 8000e88:	f67f af10 	bls.w	8000cac <parseCounterCmd+0xb4>
 8000e8c:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcDutyCycle(cmdIn)){
 8000e8e:	4a30      	ldr	r2, [pc, #192]	; (8000f50 <parseCounterCmd+0x358>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d06c      	beq.n	8000f6e <parseCounterCmd+0x376>
 8000e94:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <parseCounterCmd+0x35c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	f040 8092 	bne.w	8000fc0 <parseCounterCmd+0x3c8>
				counterIc2DutyCycleInit();
 8000e9c:	f002 f9c6 	bl	800322c <counterIc2DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ea2:	e6b2      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <parseCounterCmd+0x360>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f47f aeae 	bne.w	8000c08 <parseCounterCmd+0x10>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <parseCounterCmd+0x364>)
 8000eae:	4669      	mov	r1, sp
 8000eb0:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_CNT_CONFIG;
 8000eb2:	2405      	movs	r4, #5
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_CNT_CONFIG;
 8000eba:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000ebe:	f008 f84b 	bl	8008f58 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ec4:	e6a1      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC1_1x){
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <parseCounterCmd+0x368>)
 8000ec8:	429a      	cmp	r2, r3
				counterSetIc1Prescaler(1);
 8000eca:	bf0c      	ite	eq
 8000ecc:	2001      	moveq	r0, #1
				counterSetIc1Prescaler(2);
 8000ece:	2002      	movne	r0, #2
 8000ed0:	f002 f976 	bl	80031c0 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ed6:	e698      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC2_1x){
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <parseCounterCmd+0x368>)
 8000eda:	429a      	cmp	r2, r3
				counterSetIc2Prescaler(1);
 8000edc:	bf0c      	ite	eq
 8000ede:	2001      	moveq	r0, #1
				counterSetIc2Prescaler(2);
 8000ee0:	2002      	movne	r0, #2
 8000ee2:	f002 f97f 	bl	80031e4 <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ee8:	e68f      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiMode_Dependent();
 8000eea:	f002 f9f5 	bl	80032d8 <counterSetTiMode_Dependent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ef0:	e68b      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_RisingFalling();
 8000ef2:	f002 f9b1 	bl	8003258 <counterSetIcTi1_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <parseCounterCmd+0x30c>)
 8000ef8:	e687      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetMode(ETR);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f002 f896 	bl	800302c <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f00:	4800      	ldr	r0, [pc, #0]	; (8000f04 <parseCounterCmd+0x30c>)
 8000f02:	e682      	b.n	8000c0a <parseCounterCmd+0x12>
 8000f04:	5f444e45 	.word	0x5f444e45
 8000f08:	4e494544 	.word	0x4e494544
 8000f0c:	32465542 	.word	0x32465542
 8000f10:	444d4954 	.word	0x444d4954
 8000f14:	45444f4d 	.word	0x45444f4d
 8000f18:	6d303031 	.word	0x6d303031
 8000f1c:	6d303035 	.word	0x6d303035
 8000f20:	54525453 	.word	0x54525453
 8000f24:	5f435350 	.word	0x5f435350
 8000f28:	5f435352 	.word	0x5f435352
 8000f2c:	5f525245 	.word	0x5f525245
 8000f30:	5f525445 	.word	0x5f525445
 8000f34:	5f5f4349 	.word	0x5f5f4349
 8000f38:	32455250 	.word	0x32455250
 8000f3c:	a0a087cf 	.word	0xa0a087cf
 8000f40:	5f5f7834 	.word	0x5f5f7834
 8000f44:	5f314652 	.word	0x5f314652
 8000f48:	44514553 	.word	0x44514553
 8000f4c:	49514553 	.word	0x49514553
 8000f50:	31494344 	.word	0x31494344
 8000f54:	32494344 	.word	0x32494344
 8000f58:	3f474643 	.word	0x3f474643
 8000f5c:	200047cc 	.word	0x200047cc
 8000f60:	5f5f7831 	.word	0x5f5f7831
				counterSetEtrGate(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f002 f8bf 	bl	80030e8 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f6a:	4858      	ldr	r0, [pc, #352]	; (80010cc <parseCounterCmd+0x4d4>)
 8000f6c:	e64d      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc1DutyCycleInit();
 8000f6e:	f002 f94b 	bl	8003208 <counterIc1DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f72:	4856      	ldr	r0, [pc, #344]	; (80010cc <parseCounterCmd+0x4d4>)
 8000f74:	e649      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterEtrGate(cmdIn)){
 8000f76:	f102 4272 	add.w	r2, r2, #4060086272	; 0xf2000000
 8000f7a:	f502 123d 	add.w	r2, r2, #3096576	; 0x2f4000
 8000f7e:	f502 723f 	add.w	r2, r2, #764	; 0x2fc
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d010      	beq.n	8000fa8 <parseCounterCmd+0x3b0>
 8000f86:	3204      	adds	r2, #4
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d013      	beq.n	8000fb4 <parseCounterCmd+0x3bc>
 8000f8c:	f502 129d 	add.w	r2, r2, #1286144	; 0x13a000
 8000f90:	f502 52e7 	add.w	r2, r2, #7392	; 0x1ce0
 8000f94:	321c      	adds	r2, #28
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f47f ae88 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetEtrGate(10000);
 8000f9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fa0:	f002 f8a2 	bl	80030e8 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fa4:	4849      	ldr	r0, [pc, #292]	; (80010cc <parseCounterCmd+0x4d4>)
 8000fa6:	e630      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(1000);
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f002 f89c 	bl	80030e8 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fb0:	4846      	ldr	r0, [pc, #280]	; (80010cc <parseCounterCmd+0x4d4>)
 8000fb2:	e62a      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(5000);
 8000fb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fb8:	f002 f896 	bl	80030e8 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fbc:	4843      	ldr	r0, [pc, #268]	; (80010cc <parseCounterCmd+0x4d4>)
 8000fbe:	e624      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcDutyCycle(cmdIn)){
 8000fc0:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8000fc4:	f502 027b 	add.w	r2, r2, #16449536	; 0xfb0000
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d011      	beq.n	8000ff0 <parseCounterCmd+0x3f8>
 8000fcc:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d011      	beq.n	8000ff8 <parseCounterCmd+0x400>
 8000fd4:	f102 5234 	add.w	r2, r2, #754974720	; 0x2d000000
 8000fd8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00f      	beq.n	8001000 <parseCounterCmd+0x408>
 8000fe0:	f502 1298 	add.w	r2, r2, #1245184	; 0x130000
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	f47f ae61 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterIcDutyCycleDisable();
 8000fea:	f002 f933 	bl	8003254 <counterIcDutyCycleDisable>
 8000fee:	e60b      	b.n	8000c08 <parseCounterCmd+0x10>
				counterIc1DutyCycleDeinit();
 8000ff0:	f002 f912 	bl	8003218 <counterIc1DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ff4:	4835      	ldr	r0, [pc, #212]	; (80010cc <parseCounterCmd+0x4d4>)
 8000ff6:	e608      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc2DutyCycleDeinit();
 8000ff8:	f002 f920 	bl	800323c <counterIc2DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ffc:	4833      	ldr	r0, [pc, #204]	; (80010cc <parseCounterCmd+0x4d4>)
 8000ffe:	e604      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIcDutyCycleEnable();
 8001000:	f002 f926 	bl	8003250 <counterIcDutyCycleEnable>
	cmdIn = (error > 0) ? error : CMD_END;
 8001004:	4831      	ldr	r0, [pc, #196]	; (80010cc <parseCounterCmd+0x4d4>)
 8001006:	e600      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8001008:	f5a2 4277 	sub.w	r2, r2, #63232	; 0xf700
 800100c:	4293      	cmp	r3, r2
 800100e:	d010      	beq.n	8001032 <parseCounterCmd+0x43a>
 8001010:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001014:	4293      	cmp	r3, r2
 8001016:	d010      	beq.n	800103a <parseCounterCmd+0x442>
 8001018:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800101c:	3a0c      	subs	r2, #12
 800101e:	4293      	cmp	r3, r2
 8001020:	d00f      	beq.n	8001042 <parseCounterCmd+0x44a>
 8001022:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001026:	4293      	cmp	r3, r2
 8001028:	d12e      	bne.n	8001088 <parseCounterCmd+0x490>
				counterSetIcTi2_Falling();
 800102a:	f002 f941 	bl	80032b0 <counterSetIcTi2_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 800102e:	4827      	ldr	r0, [pc, #156]	; (80010cc <parseCounterCmd+0x4d4>)
 8001030:	e5eb      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Rising();
 8001032:	f002 f91b 	bl	800326c <counterSetIcTi1_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <parseCounterCmd+0x4d4>)
 8001038:	e5e7      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi2_Rising();
 800103a:	f002 f931 	bl	80032a0 <counterSetIcTi2_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <parseCounterCmd+0x4d4>)
 8001040:	e5e3      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Falling();
 8001042:	f002 f91b 	bl	800327c <counterSetIcTi1_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8001046:	4821      	ldr	r0, [pc, #132]	; (80010cc <parseCounterCmd+0x4d4>)
 8001048:	e5df      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc2(cmdIn)){
 800104a:	3304      	adds	r3, #4
 800104c:	429a      	cmp	r2, r3
 800104e:	f47f ae2d 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetIc2Prescaler(8);
 8001052:	2008      	movs	r0, #8
 8001054:	f002 f8c6 	bl	80031e4 <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001058:	481c      	ldr	r0, [pc, #112]	; (80010cc <parseCounterCmd+0x4d4>)
 800105a:	e5d6      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc1(cmdIn)){
 800105c:	3304      	adds	r3, #4
 800105e:	429a      	cmp	r2, r3
 8001060:	f47f ae24 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetIc1Prescaler(8);
 8001064:	2008      	movs	r0, #8
 8001066:	f002 f8ab 	bl	80031c0 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <parseCounterCmd+0x4d4>)
 800106c:	e5cd      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 800106e:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8001072:	f502 0267 	add.w	r2, r2, #15138816	; 0xe70000
 8001076:	f202 2209 	addw	r2, r2, #521	; 0x209
 800107a:	4293      	cmp	r3, r2
 800107c:	d119      	bne.n	80010b2 <parseCounterCmd+0x4ba>
				counterSetMode(REF);
 800107e:	2003      	movs	r0, #3
 8001080:	f001 ffd4 	bl	800302c <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <parseCounterCmd+0x4d4>)
 8001086:	e5c0      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8001088:	f102 4263 	add.w	r2, r2, #3808428032	; 0xe3000000
 800108c:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
 8001090:	f202 220d 	addw	r2, r2, #525	; 0x20d
 8001094:	4293      	cmp	r3, r2
 8001096:	d008      	beq.n	80010aa <parseCounterCmd+0x4b2>
 8001098:	f5a2 027f 	sub.w	r2, r2, #16711680	; 0xff0000
 800109c:	4293      	cmp	r3, r2
 800109e:	f47f ae05 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetTiSequence_BA();
 80010a2:	f002 f90f 	bl	80032c4 <counterSetTiSequence_BA>
	cmdIn = (error > 0) ? error : CMD_END;
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <parseCounterCmd+0x4d4>)
 80010a8:	e5af      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiSequence_AB();
 80010aa:	f002 f909 	bl	80032c0 <counterSetTiSequence_AB>
	cmdIn = (error > 0) ? error : CMD_END;
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <parseCounterCmd+0x4d4>)
 80010b0:	e5ab      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 80010b2:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 80010b6:	f202 4202 	addw	r2, r2, #1026	; 0x402
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f47f adf6 	bne.w	8000cac <parseCounterCmd+0xb4>
				counterSetMode(TI);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f001 ffb3 	bl	800302c <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 80010c6:	4801      	ldr	r0, [pc, #4]	; (80010cc <parseCounterCmd+0x4d4>)
 80010c8:	e59f      	b.n	8000c0a <parseCounterCmd+0x12>
 80010ca:	bf00      	nop
 80010cc:	5f444e45 	.word	0x5f444e45

080010d0 <parseScopeCmd>:
command parseScopeCmd(void){
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b082      	sub	sp, #8
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80010d4:	4668      	mov	r0, sp
 80010d6:	2105      	movs	r1, #5
 80010d8:	f001 f910 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80010dc:	2803      	cmp	r0, #3
 80010de:	d806      	bhi.n	80010ee <parseScopeCmd+0x1e>
		cmdIn=CMD_END;
 80010e0:	4bc1      	ldr	r3, [pc, #772]	; (80013e8 <parseScopeCmd+0x318>)
		return BUILD_CMD(cmdNext);
	}else if(bytesRead == 0){
 80010e2:	2800      	cmp	r0, #0
		cmdIn=CMD_END;
 80010e4:	bf14      	ite	ne
 80010e6:	2032      	movne	r0, #50	; 0x32
 80010e8:	4618      	moveq	r0, r3
}
 80010ea:	b002      	add	sp, #8
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	9800      	ldr	r0, [sp, #0]
	switch(cmdIn){
 80010f0:	4bbe      	ldr	r3, [pc, #760]	; (80013ec <parseScopeCmd+0x31c>)
 80010f2:	4298      	cmp	r0, r3
 80010f4:	f000 80cf 	beq.w	8001296 <parseScopeCmd+0x1c6>
 80010f8:	d82c      	bhi.n	8001154 <parseScopeCmd+0x84>
 80010fa:	f1a3 733f 	sub.w	r3, r3, #50069504	; 0x2fc0000
 80010fe:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8001102:	4298      	cmp	r0, r3
 8001104:	d04d      	beq.n	80011a2 <parseScopeCmd+0xd2>
 8001106:	f240 809b 	bls.w	8001240 <parseScopeCmd+0x170>
 800110a:	4bb9      	ldr	r3, [pc, #740]	; (80013f0 <parseScopeCmd+0x320>)
 800110c:	4298      	cmp	r0, r3
 800110e:	f000 80f4 	beq.w	80012fa <parseScopeCmd+0x22a>
 8001112:	f240 813a 	bls.w	800138a <parseScopeCmd+0x2ba>
 8001116:	4bb7      	ldr	r3, [pc, #732]	; (80013f4 <parseScopeCmd+0x324>)
 8001118:	4298      	cmp	r0, r3
 800111a:	d038      	beq.n	800118e <parseScopeCmd+0xbe>
 800111c:	f503 239e 	add.w	r3, r3, #323584	; 0x4f000
 8001120:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001124:	4298      	cmp	r0, r3
 8001126:	f040 8095 	bne.w	8001254 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800112a:	4668      	mov	r0, sp
 800112c:	2105      	movs	r1, #5
 800112e:	f001 f8e5 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001132:	2803      	cmp	r0, #3
 8001134:	d932      	bls.n	800119c <parseScopeCmd+0xcc>
 8001136:	9a00      	ldr	r2, [sp, #0]
		if(isScopeNumOfSamples(cmdIn)){
 8001138:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <parseScopeCmd+0x328>)
 800113a:	4413      	add	r3, r2
 800113c:	2b01      	cmp	r3, #1
 800113e:	f240 8195 	bls.w	800146c <parseScopeCmd+0x39c>
 8001142:	4bae      	ldr	r3, [pc, #696]	; (80013fc <parseScopeCmd+0x32c>)
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8222 	bne.w	800158e <parseScopeCmd+0x4be>
				error=scopeSetNumOfSamples(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114e:	f003 fc8f 	bl	8004a70 <scopeSetNumOfSamples>
 8001152:	e0d4      	b.n	80012fe <parseScopeCmd+0x22e>
	switch(cmdIn){
 8001154:	4baa      	ldr	r3, [pc, #680]	; (8001400 <parseScopeCmd+0x330>)
 8001156:	4298      	cmp	r0, r3
 8001158:	d036      	beq.n	80011c8 <parseScopeCmd+0xf8>
 800115a:	d865      	bhi.n	8001228 <parseScopeCmd+0x158>
 800115c:	f1a3 639d 	sub.w	r3, r3, #82313216	; 0x4e80000
 8001160:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
 8001164:	f2a3 43fa 	subw	r3, r3, #1274	; 0x4fa
 8001168:	4298      	cmp	r0, r3
 800116a:	f000 80b1 	beq.w	80012d0 <parseScopeCmd+0x200>
 800116e:	f240 8114 	bls.w	800139a <parseScopeCmd+0x2ca>
 8001172:	4ba4      	ldr	r3, [pc, #656]	; (8001404 <parseScopeCmd+0x334>)
 8001174:	4298      	cmp	r0, r3
 8001176:	d03c      	beq.n	80011f2 <parseScopeCmd+0x122>
 8001178:	f103 7303 	add.w	r3, r3, #34340864	; 0x20c0000
 800117c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001180:	3310      	adds	r3, #16
 8001182:	4298      	cmp	r0, r3
 8001184:	d166      	bne.n	8001254 <parseScopeCmd+0x184>
		scopeStop();
 8001186:	f003 fe13 	bl	8004db0 <scopeStop>
		cmdIn=CMD_END;
 800118a:	4897      	ldr	r0, [pc, #604]	; (80013e8 <parseScopeCmd+0x318>)
 800118c:	e7ad      	b.n	80010ea <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800118e:	4668      	mov	r0, sp
 8001190:	2105      	movs	r1, #5
 8001192:	f001 f8b3 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001196:	2803      	cmp	r0, #3
 8001198:	f200 80d6 	bhi.w	8001348 <parseScopeCmd+0x278>
 800119c:	2036      	movs	r0, #54	; 0x36
}
 800119e:	b002      	add	sp, #8
 80011a0:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011a2:	4668      	mov	r0, sp
 80011a4:	2105      	movs	r1, #5
 80011a6:	f001 f8a9 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011aa:	2803      	cmp	r0, #3
 80011ac:	d9f6      	bls.n	800119c <parseScopeCmd+0xcc>
 80011ae:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigEdge(cmdIn)){
 80011b0:	4a95      	ldr	r2, [pc, #596]	; (8001408 <parseScopeCmd+0x338>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f000 816b 	beq.w	800148e <parseScopeCmd+0x3be>
 80011b8:	4a94      	ldr	r2, [pc, #592]	; (800140c <parseScopeCmd+0x33c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d1ee      	bne.n	800119c <parseScopeCmd+0xcc>
				scopeSetTriggerEdge(EDGE_FALLING);
 80011be:	2001      	movs	r0, #1
 80011c0:	f003 fb8c 	bl	80048dc <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 80011c4:	4888      	ldr	r0, [pc, #544]	; (80013e8 <parseScopeCmd+0x318>)
 80011c6:	e790      	b.n	80010ea <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011c8:	4668      	mov	r0, sp
 80011ca:	2105      	movs	r1, #5
 80011cc:	f001 f896 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011d0:	2803      	cmp	r0, #3
 80011d2:	f200 80c7 	bhi.w	8001364 <parseScopeCmd+0x294>
 80011d6:	4a84      	ldr	r2, [pc, #528]	; (80013e8 <parseScopeCmd+0x318>)
 80011d8:	4b8d      	ldr	r3, [pc, #564]	; (8001410 <parseScopeCmd+0x340>)
 80011da:	2800      	cmp	r0, #0
 80011dc:	bf0c      	ite	eq
 80011de:	4610      	moveq	r0, r2
 80011e0:	4618      	movne	r0, r3
		if(isScopeFreq(cmdIn)){
 80011e2:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <parseScopeCmd+0x344>)
 80011e4:	4298      	cmp	r0, r3
 80011e6:	d1d9      	bne.n	800119c <parseScopeCmd+0xcc>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f003 fbea 	bl	80049c4 <scopeSetSamplingFreq>
 80011f0:	e085      	b.n	80012fe <parseScopeCmd+0x22e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011f2:	4668      	mov	r0, sp
 80011f4:	2105      	movs	r1, #5
 80011f6:	f001 f881 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011fa:	2803      	cmp	r0, #3
 80011fc:	d9ce      	bls.n	800119c <parseScopeCmd+0xcc>
 80011fe:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 8001200:	4b85      	ldr	r3, [pc, #532]	; (8001418 <parseScopeCmd+0x348>)
 8001202:	4413      	add	r3, r2
 8001204:	2b03      	cmp	r3, #3
 8001206:	d8c9      	bhi.n	800119c <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <parseScopeCmd+0x34c>)
 800120a:	429a      	cmp	r2, r3
 800120c:	f000 8152 	beq.w	80014b4 <parseScopeCmd+0x3e4>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001210:	4b83      	ldr	r3, [pc, #524]	; (8001420 <parseScopeCmd+0x350>)
 8001212:	429a      	cmp	r2, r3
 8001214:	f000 8156 	beq.w	80014c4 <parseScopeCmd+0x3f4>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001218:	4b82      	ldr	r3, [pc, #520]	; (8001424 <parseScopeCmd+0x354>)
 800121a:	429a      	cmp	r2, r3
 800121c:	f040 80e0 	bne.w	80013e0 <parseScopeCmd+0x310>
				error=scopeSetNumOfChannels(3);
 8001220:	2003      	movs	r0, #3
 8001222:	f003 fc4d 	bl	8004ac0 <scopeSetNumOfChannels>
 8001226:	e06a      	b.n	80012fe <parseScopeCmd+0x22e>
	switch(cmdIn){
 8001228:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <parseScopeCmd+0x358>)
 800122a:	4298      	cmp	r0, r3
 800122c:	d06d      	beq.n	800130a <parseScopeCmd+0x23a>
 800122e:	d970      	bls.n	8001312 <parseScopeCmd+0x242>
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <parseScopeCmd+0x35c>)
 8001232:	4298      	cmp	r0, r3
 8001234:	f040 8130 	bne.w	8001498 <parseScopeCmd+0x3c8>
		scopeRestart();
 8001238:	f003 fd96 	bl	8004d68 <scopeRestart>
		cmdIn=CMD_END;
 800123c:	486a      	ldr	r0, [pc, #424]	; (80013e8 <parseScopeCmd+0x318>)
 800123e:	e754      	b.n	80010ea <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001240:	4b7b      	ldr	r3, [pc, #492]	; (8001430 <parseScopeCmd+0x360>)
 8001242:	4298      	cmp	r0, r3
 8001244:	d019      	beq.n	800127a <parseScopeCmd+0x1aa>
 8001246:	4b7b      	ldr	r3, [pc, #492]	; (8001434 <parseScopeCmd+0x364>)
 8001248:	4298      	cmp	r0, r3
 800124a:	d005      	beq.n	8001258 <parseScopeCmd+0x188>
 800124c:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <parseScopeCmd+0x368>)
 800124e:	4298      	cmp	r0, r3
 8001250:	f000 8096 	beq.w	8001380 <parseScopeCmd+0x2b0>
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	e748      	b.n	80010ea <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001258:	4668      	mov	r0, sp
 800125a:	2105      	movs	r1, #5
 800125c:	f001 f84e 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001260:	2803      	cmp	r0, #3
 8001262:	d99b      	bls.n	800119c <parseScopeCmd+0xcc>
 8001264:	9b00      	ldr	r3, [sp, #0]
		if(isScopeDataDepth(cmdIn)){
 8001266:	4a75      	ldr	r2, [pc, #468]	; (800143c <parseScopeCmd+0x36c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f000 8107 	beq.w	800147c <parseScopeCmd+0x3ac>
 800126e:	4a74      	ldr	r2, [pc, #464]	; (8001440 <parseScopeCmd+0x370>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f040 812b 	bne.w	80014cc <parseScopeCmd+0x3fc>
 8001276:	2037      	movs	r0, #55	; 0x37
 8001278:	e737      	b.n	80010ea <parseScopeCmd+0x1a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800127a:	4b72      	ldr	r3, [pc, #456]	; (8001444 <parseScopeCmd+0x374>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	4669      	mov	r1, sp
		passMsg = MSG_SCOPE_INPUTS;
 8001280:	2410      	movs	r4, #16
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001282:	2300      	movs	r3, #0
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SCOPE_INPUTS;
 8001288:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800128c:	f007 fe64 	bl	8008f58 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001290:	4855      	ldr	r0, [pc, #340]	; (80013e8 <parseScopeCmd+0x318>)
}
 8001292:	b002      	add	sp, #8
 8001294:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001296:	4668      	mov	r0, sp
 8001298:	2105      	movs	r1, #5
 800129a:	f001 f82f 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 800129e:	2803      	cmp	r0, #3
 80012a0:	f67f af7c 	bls.w	800119c <parseScopeCmd+0xcc>
 80012a4:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 80012a6:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <parseScopeCmd+0x348>)
 80012a8:	4413      	add	r3, r2
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	f63f af76 	bhi.w	800119c <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <parseScopeCmd+0x34c>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	f000 80fa 	beq.w	80014ac <parseScopeCmd+0x3dc>
			}else if(cmdIn == CMD_CHANNELS_2){
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <parseScopeCmd+0x350>)
 80012ba:	429a      	cmp	r2, r3
 80012bc:	f000 80fe 	beq.w	80014bc <parseScopeCmd+0x3ec>
			}else if(cmdIn == CMD_CHANNELS_3){
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <parseScopeCmd+0x354>)
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f040 8088 	bne.w	80013d8 <parseScopeCmd+0x308>
				error=scopeSetTrigChannel(3);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f003 fc6d 	bl	8004ba8 <scopeSetTrigChannel>
 80012ce:	e016      	b.n	80012fe <parseScopeCmd+0x22e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80012d0:	4668      	mov	r0, sp
 80012d2:	2105      	movs	r1, #5
 80012d4:	f001 f812 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80012d8:	2803      	cmp	r0, #3
 80012da:	f67f af5f 	bls.w	800119c <parseScopeCmd+0xcc>
 80012de:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012e0:	4c41      	ldr	r4, [pc, #260]	; (80013e8 <parseScopeCmd+0x318>)
 80012e2:	42a0      	cmp	r0, r4
 80012e4:	f43f af5a 	beq.w	800119c <parseScopeCmd+0xcc>
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <parseScopeCmd+0x340>)
 80012ea:	4298      	cmp	r0, r3
 80012ec:	f43f af56 	beq.w	800119c <parseScopeCmd+0xcc>
			scopeSetTrigLevel((uint16_t)cmdIn);
 80012f0:	b280      	uxth	r0, r0
 80012f2:	f003 fb95 	bl	8004a20 <scopeSetTrigLevel>
		cmdIn=CMD_END;
 80012f6:	4620      	mov	r0, r4
 80012f8:	e6f7      	b.n	80010ea <parseScopeCmd+0x1a>
		error=scopeSetADCInputChannelVref();
 80012fa:	f003 fcf3 	bl	8004ce4 <scopeSetADCInputChannelVref>
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <parseScopeCmd+0x318>)
 8001300:	2800      	cmp	r0, #0
 8001302:	bf08      	it	eq
 8001304:	4618      	moveq	r0, r3
}
 8001306:	b002      	add	sp, #8
 8001308:	bd10      	pop	{r4, pc}
		scopeStart();
 800130a:	f003 fd3f 	bl	8004d8c <scopeStart>
		cmdIn=CMD_END;
 800130e:	4836      	ldr	r0, [pc, #216]	; (80013e8 <parseScopeCmd+0x318>)
 8001310:	e6eb      	b.n	80010ea <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001312:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8001316:	f2a3 2303 	subw	r3, r3, #515	; 0x203
 800131a:	4298      	cmp	r0, r3
 800131c:	d19a      	bne.n	8001254 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800131e:	4668      	mov	r0, sp
 8001320:	2105      	movs	r1, #5
 8001322:	f000 ffeb 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001326:	2803      	cmp	r0, #3
 8001328:	f67f af38 	bls.w	800119c <parseScopeCmd+0xcc>
 800132c:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <parseScopeCmd+0x318>)
 8001330:	4298      	cmp	r0, r3
 8001332:	f43f af33 	beq.w	800119c <parseScopeCmd+0xcc>
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <parseScopeCmd+0x340>)
 8001338:	4298      	cmp	r0, r3
 800133a:	f43f af2f 	beq.w	800119c <parseScopeCmd+0xcc>
			scopeSetPretrigger((uint16_t)cmdIn);
 800133e:	b280      	uxth	r0, r0
 8001340:	f003 fb82 	bl	8004a48 <scopeSetPretrigger>
		cmdIn=CMD_END;
 8001344:	4828      	ldr	r0, [pc, #160]	; (80013e8 <parseScopeCmd+0x318>)
 8001346:	e6d0      	b.n	80010ea <parseScopeCmd+0x1a>
 8001348:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigMode(cmdIn)){
 800134a:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <parseScopeCmd+0x378>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f000 8099 	beq.w	8001484 <parseScopeCmd+0x3b4>
 8001352:	4a3e      	ldr	r2, [pc, #248]	; (800144c <parseScopeCmd+0x37c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	f040 80c9 	bne.w	80014ec <parseScopeCmd+0x41c>
				scopeSetTriggerMode(TRIG_AUTO);
 800135a:	2001      	movs	r0, #1
 800135c:	f003 faaa 	bl	80048b4 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001360:	4821      	ldr	r0, [pc, #132]	; (80013e8 <parseScopeCmd+0x318>)
 8001362:	e6c2      	b.n	80010ea <parseScopeCmd+0x1a>
 8001364:	9800      	ldr	r0, [sp, #0]
		if(isScopeFreq(cmdIn)){
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <parseScopeCmd+0x380>)
 8001368:	4403      	add	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d974      	bls.n	8001458 <parseScopeCmd+0x388>
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <parseScopeCmd+0x384>)
 8001370:	4298      	cmp	r0, r3
 8001372:	f040 80c4 	bne.w	80014fe <parseScopeCmd+0x42e>
				error=scopeSetSamplingFreq(5000);
 8001376:	f241 3088 	movw	r0, #5000	; 0x1388
 800137a:	f003 fb23 	bl	80049c4 <scopeSetSamplingFreq>
 800137e:	e7be      	b.n	80012fe <parseScopeCmd+0x22e>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <parseScopeCmd+0x374>)
 8001382:	4669      	mov	r1, sp
 8001384:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SCOPE_CONFIG;
 8001386:	240f      	movs	r4, #15
 8001388:	e77b      	b.n	8001282 <parseScopeCmd+0x1b2>
	switch(cmdIn){
 800138a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 800138e:	4298      	cmp	r0, r3
 8001390:	f47f af60 	bne.w	8001254 <parseScopeCmd+0x184>
		error=scopeSetADCInputChannelDefault();
 8001394:	f003 fc6a 	bl	8004c6c <scopeSetADCInputChannelDefault>
 8001398:	e7b1      	b.n	80012fe <parseScopeCmd+0x22e>
	switch(cmdIn){
 800139a:	f1a3 6382 	sub.w	r3, r3, #68157440	; 0x4100000
 800139e:	f5a3 3339 	sub.w	r3, r3, #189440	; 0x2e400
 80013a2:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 80013a6:	4298      	cmp	r0, r3
 80013a8:	f47f af54 	bne.w	8001254 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80013ac:	4668      	mov	r0, sp
 80013ae:	2105      	movs	r1, #5
 80013b0:	f000 ffa4 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80013b4:	2803      	cmp	r0, #3
 80013b6:	f67f aef1 	bls.w	800119c <parseScopeCmd+0xcc>
 80013ba:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <parseScopeCmd+0x318>)
 80013be:	4298      	cmp	r0, r3
 80013c0:	f43f aeec 	beq.w	800119c <parseScopeCmd+0xcc>
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <parseScopeCmd+0x340>)
 80013c6:	4298      	cmp	r0, r3
 80013c8:	f43f aee8 	beq.w	800119c <parseScopeCmd+0xcc>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 80013cc:	b2c1      	uxtb	r1, r0
 80013ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80013d2:	f003 fc17 	bl	8004c04 <scopeSetADCInputChannel>
 80013d6:	e792      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetTrigChannel(4);
 80013d8:	2004      	movs	r0, #4
 80013da:	f003 fbe5 	bl	8004ba8 <scopeSetTrigChannel>
 80013de:	e78e      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(4);
 80013e0:	2004      	movs	r0, #4
 80013e2:	f003 fb6d 	bl	8004ac0 <scopeSetNumOfChannels>
 80013e6:	e78a      	b.n	80012fe <parseScopeCmd+0x22e>
 80013e8:	5f444e45 	.word	0x5f444e45
 80013ec:	48435254 	.word	0x48435254
 80013f0:	46455241 	.word	0x46455241
 80013f4:	47495254 	.word	0x47495254
 80013f8:	a0cfcfcf 	.word	0xa0cfcfcf
 80013fc:	5f303035 	.word	0x5f303035
 8001400:	51455246 	.word	0x51455246
 8001404:	4e414843 	.word	0x4e414843
 8001408:	45534952 	.word	0x45534952
 800140c:	4c4c4146 	.word	0x4c4c4146
 8001410:	5f525245 	.word	0x5f525245
 8001414:	5f58414d 	.word	0x5f58414d
 8001418:	a0b7bccf 	.word	0xa0b7bccf
 800141c:	5f484331 	.word	0x5f484331
 8001420:	5f484332 	.word	0x5f484332
 8001424:	5f484333 	.word	0x5f484333
 8001428:	54525453 	.word	0x54525453
 800142c:	5458454e 	.word	0x5458454e
 8001430:	3f504e49 	.word	0x3f504e49
 8001434:	41544144 	.word	0x41544144
 8001438:	3f474643 	.word	0x3f474643
 800143c:	5f423231 	.word	0x5f423231
 8001440:	5f423031 	.word	0x5f423031
 8001444:	200047cc 	.word	0x200047cc
 8001448:	4d524f4e 	.word	0x4d524f4e
 800144c:	4f545541 	.word	0x4f545541
 8001450:	a0a0b4cf 	.word	0xa0a0b4cf
 8001454:	5f5f4b35 	.word	0x5f5f4b35
			if(cmdIn == CMD_FREQ_1K){
 8001458:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <parseScopeCmd+0x588>)
 800145a:	4298      	cmp	r0, r3
				error=scopeSetSamplingFreq(1000);
 800145c:	bf0c      	ite	eq
 800145e:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
				error=scopeSetSamplingFreq(2000);
 8001462:	f44f 60fa 	movne.w	r0, #2000	; 0x7d0
 8001466:	f003 faad 	bl	80049c4 <scopeSetSamplingFreq>
 800146a:	e748      	b.n	80012fe <parseScopeCmd+0x22e>
			if(cmdIn == CMD_SAMPLES_100){
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <parseScopeCmd+0x58c>)
 800146e:	429a      	cmp	r2, r3
				error=scopeSetNumOfSamples(100);
 8001470:	bf0c      	ite	eq
 8001472:	2064      	moveq	r0, #100	; 0x64
				error=scopeSetNumOfSamples(200);
 8001474:	20c8      	movne	r0, #200	; 0xc8
 8001476:	f003 fafb 	bl	8004a70 <scopeSetNumOfSamples>
 800147a:	e740      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetDataDepth(12);
 800147c:	200c      	movs	r0, #12
 800147e:	f003 fa4f 	bl	8004920 <scopeSetDataDepth>
 8001482:	e73c      	b.n	80012fe <parseScopeCmd+0x22e>
				scopeSetTriggerMode(TRIG_NORMAL);
 8001484:	2000      	movs	r0, #0
 8001486:	f003 fa15 	bl	80048b4 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800148a:	4875      	ldr	r0, [pc, #468]	; (8001660 <parseScopeCmd+0x590>)
 800148c:	e62d      	b.n	80010ea <parseScopeCmd+0x1a>
				scopeSetTriggerEdge(EDGE_RISING);
 800148e:	2000      	movs	r0, #0
 8001490:	f003 fa24 	bl	80048dc <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001494:	4872      	ldr	r0, [pc, #456]	; (8001660 <parseScopeCmd+0x590>)
 8001496:	e628      	b.n	80010ea <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001498:	f103 632e 	add.w	r3, r3, #182452224	; 0xae00000
 800149c:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 80014a0:	f603 03f7 	addw	r3, r3, #2295	; 0x8f7
 80014a4:	4298      	cmp	r0, r3
 80014a6:	f43f ae20 	beq.w	80010ea <parseScopeCmd+0x1a>
 80014aa:	e6d3      	b.n	8001254 <parseScopeCmd+0x184>
				error=scopeSetTrigChannel(1);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f003 fb7b 	bl	8004ba8 <scopeSetTrigChannel>
 80014b2:	e724      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f003 fb03 	bl	8004ac0 <scopeSetNumOfChannels>
 80014ba:	e720      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetTrigChannel(2);
 80014bc:	2002      	movs	r0, #2
 80014be:	f003 fb73 	bl	8004ba8 <scopeSetTrigChannel>
 80014c2:	e71c      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(2);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f003 fafb 	bl	8004ac0 <scopeSetNumOfChannels>
 80014ca:	e718      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeDataDepth(cmdIn)){
 80014cc:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 80014d0:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 80014d4:	3207      	adds	r2, #7
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <parseScopeCmd+0x414>
 80014da:	3a02      	subs	r2, #2
 80014dc:	4293      	cmp	r3, r2
 80014de:	f43f aeca 	beq.w	8001276 <parseScopeCmd+0x1a6>
 80014e2:	e65b      	b.n	800119c <parseScopeCmd+0xcc>
				error=scopeSetDataDepth(8);
 80014e4:	2008      	movs	r0, #8
 80014e6:	f003 fa1b 	bl	8004920 <scopeSetDataDepth>
 80014ea:	e708      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeTrigMode(cmdIn)){
 80014ec:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <parseScopeCmd+0x594>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	f040 8091 	bne.w	8001616 <parseScopeCmd+0x546>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f003 f9dd 	bl	80048b4 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 80014fa:	4859      	ldr	r0, [pc, #356]	; (8001660 <parseScopeCmd+0x590>)
 80014fc:	e5f5      	b.n	80010ea <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 80014fe:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 8001502:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 8001506:	3b04      	subs	r3, #4
 8001508:	4298      	cmp	r0, r3
 800150a:	d010      	beq.n	800152e <parseScopeCmd+0x45e>
 800150c:	3301      	adds	r3, #1
 800150e:	4298      	cmp	r0, r3
 8001510:	d012      	beq.n	8001538 <parseScopeCmd+0x468>
 8001512:	3303      	adds	r3, #3
 8001514:	4298      	cmp	r0, r3
 8001516:	d014      	beq.n	8001542 <parseScopeCmd+0x472>
 8001518:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 800151c:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 8001520:	3b04      	subs	r3, #4
 8001522:	4298      	cmp	r0, r3
 8001524:	d112      	bne.n	800154c <parseScopeCmd+0x47c>
				error=scopeSetSamplingFreq(100000);
 8001526:	4850      	ldr	r0, [pc, #320]	; (8001668 <parseScopeCmd+0x598>)
 8001528:	f003 fa4c 	bl	80049c4 <scopeSetSamplingFreq>
 800152c:	e6e7      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(10000);
 800152e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001532:	f003 fa47 	bl	80049c4 <scopeSetSamplingFreq>
 8001536:	e6e2      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(20000);
 8001538:	f644 6020 	movw	r0, #20000	; 0x4e20
 800153c:	f003 fa42 	bl	80049c4 <scopeSetSamplingFreq>
 8001540:	e6dd      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(50000);
 8001542:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001546:	f003 fa3d 	bl	80049c4 <scopeSetSamplingFreq>
 800154a:	e6d8      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeFreq(cmdIn)){
 800154c:	3301      	adds	r3, #1
 800154e:	4298      	cmp	r0, r3
 8001550:	d00e      	beq.n	8001570 <parseScopeCmd+0x4a0>
 8001552:	3303      	adds	r3, #3
 8001554:	4298      	cmp	r0, r3
 8001556:	d00f      	beq.n	8001578 <parseScopeCmd+0x4a8>
 8001558:	f103 53a1 	add.w	r3, r3, #337641472	; 0x14200000
 800155c:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
 8001560:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 8001564:	4298      	cmp	r0, r3
 8001566:	d10b      	bne.n	8001580 <parseScopeCmd+0x4b0>
				error=scopeSetSamplingFreq(1000000);
 8001568:	4840      	ldr	r0, [pc, #256]	; (800166c <parseScopeCmd+0x59c>)
 800156a:	f003 fa2b 	bl	80049c4 <scopeSetSamplingFreq>
 800156e:	e6c6      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(200000);
 8001570:	483f      	ldr	r0, [pc, #252]	; (8001670 <parseScopeCmd+0x5a0>)
 8001572:	f003 fa27 	bl	80049c4 <scopeSetSamplingFreq>
 8001576:	e6c2      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(500000);
 8001578:	483e      	ldr	r0, [pc, #248]	; (8001674 <parseScopeCmd+0x5a4>)
 800157a:	f003 fa23 	bl	80049c4 <scopeSetSamplingFreq>
 800157e:	e6be      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeFreq(cmdIn)){
 8001580:	3301      	adds	r3, #1
 8001582:	4298      	cmp	r0, r3
 8001584:	d155      	bne.n	8001632 <parseScopeCmd+0x562>
				error=scopeSetSamplingFreq(2000000);
 8001586:	483c      	ldr	r0, [pc, #240]	; (8001678 <parseScopeCmd+0x5a8>)
 8001588:	f003 fa1c 	bl	80049c4 <scopeSetSamplingFreq>
 800158c:	e6b7      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeNumOfSamples(cmdIn)){
 800158e:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 8001592:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 8001596:	331c      	adds	r3, #28
 8001598:	429a      	cmp	r2, r3
 800159a:	d011      	beq.n	80015c0 <parseScopeCmd+0x4f0>
 800159c:	3301      	adds	r3, #1
 800159e:	429a      	cmp	r2, r3
 80015a0:	d013      	beq.n	80015ca <parseScopeCmd+0x4fa>
 80015a2:	3303      	adds	r3, #3
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d015      	beq.n	80015d4 <parseScopeCmd+0x504>
 80015a8:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 80015ac:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 80015b0:	3b04      	subs	r3, #4
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d113      	bne.n	80015de <parseScopeCmd+0x50e>
				error=scopeSetNumOfSamples(10000);
 80015b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80015ba:	f003 fa59 	bl	8004a70 <scopeSetNumOfSamples>
 80015be:	e69e      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(1000);
 80015c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c4:	f003 fa54 	bl	8004a70 <scopeSetNumOfSamples>
 80015c8:	e699      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(2000);
 80015ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ce:	f003 fa4f 	bl	8004a70 <scopeSetNumOfSamples>
 80015d2:	e694      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(5000);
 80015d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80015d8:	f003 fa4a 	bl	8004a70 <scopeSetNumOfSamples>
 80015dc:	e68f      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeNumOfSamples(cmdIn)){
 80015de:	3301      	adds	r3, #1
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d00e      	beq.n	8001602 <parseScopeCmd+0x532>
 80015e4:	3303      	adds	r3, #3
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d010      	beq.n	800160c <parseScopeCmd+0x53c>
 80015ea:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80015ee:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80015f2:	3b04      	subs	r3, #4
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f47f add1 	bne.w	800119c <parseScopeCmd+0xcc>
				error=scopeSetNumOfSamples(100000);
 80015fa:	481b      	ldr	r0, [pc, #108]	; (8001668 <parseScopeCmd+0x598>)
 80015fc:	f003 fa38 	bl	8004a70 <scopeSetNumOfSamples>
 8001600:	e67d      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(20000);
 8001602:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001606:	f003 fa33 	bl	8004a70 <scopeSetNumOfSamples>
 800160a:	e678      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(50000);
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f003 fa2e 	bl	8004a70 <scopeSetNumOfSamples>
 8001614:	e673      	b.n	80012fe <parseScopeCmd+0x22e>
		if(isScopeTrigMode(cmdIn)){
 8001616:	f102 4268 	add.w	r2, r2, #3892314112	; 0xe8000000
 800161a:	f502 224e 	add.w	r2, r2, #843776	; 0xce000
 800161e:	f602 220d 	addw	r2, r2, #2573	; 0xa0d
 8001622:	4293      	cmp	r3, r2
 8001624:	f47f adba 	bne.w	800119c <parseScopeCmd+0xcc>
				scopeSetTriggerMode(TRIG_SINGLE);
 8001628:	2003      	movs	r0, #3
 800162a:	f003 f943 	bl	80048b4 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <parseScopeCmd+0x590>)
 8001630:	e55b      	b.n	80010ea <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 8001632:	3303      	adds	r3, #3
 8001634:	4298      	cmp	r0, r3
 8001636:	d00b      	beq.n	8001650 <parseScopeCmd+0x580>
 8001638:	f5a3 1390 	sub.w	r3, r3, #1179648	; 0x120000
 800163c:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8001640:	3b04      	subs	r3, #4
 8001642:	4298      	cmp	r0, r3
 8001644:	f47f adcd 	bne.w	80011e2 <parseScopeCmd+0x112>
				error=scopeSetSamplingFreq(10000000);
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <parseScopeCmd+0x5ac>)
 800164a:	f003 f9bb 	bl	80049c4 <scopeSetSamplingFreq>
 800164e:	e656      	b.n	80012fe <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(5000000);
 8001650:	480b      	ldr	r0, [pc, #44]	; (8001680 <parseScopeCmd+0x5b0>)
 8001652:	f003 f9b7 	bl	80049c4 <scopeSetSamplingFreq>
 8001656:	e652      	b.n	80012fe <parseScopeCmd+0x22e>
 8001658:	5f5f4b31 	.word	0x5f5f4b31
 800165c:	5f303031 	.word	0x5f303031
 8001660:	5f444e45 	.word	0x5f444e45
 8001664:	5f415f46 	.word	0x5f415f46
 8001668:	000186a0 	.word	0x000186a0
 800166c:	000f4240 	.word	0x000f4240
 8001670:	00030d40 	.word	0x00030d40
 8001674:	0007a120 	.word	0x0007a120
 8001678:	001e8480 	.word	0x001e8480
 800167c:	00989680 	.word	0x00989680
 8001680:	004c4b40 	.word	0x004c4b40

08001684 <parseSyncPwmCmd>:
command parseSyncPwmCmd(void){
 8001684:	b510      	push	{r4, lr}
 8001686:	b082      	sub	sp, #8
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001688:	4668      	mov	r0, sp
 800168a:	2105      	movs	r1, #5
 800168c:	f000 fe36 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001690:	2803      	cmp	r0, #3
 8001692:	d806      	bhi.n	80016a2 <parseSyncPwmCmd+0x1e>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001694:	4b69      	ldr	r3, [pc, #420]	; (800183c <parseSyncPwmCmd+0x1b8>)
	}else if(bytesRead == 0){
 8001696:	2800      	cmp	r0, #0
	cmdIn = (error > 0) ? error : CMD_END;	
 8001698:	bf14      	ite	ne
 800169a:	2097      	movne	r0, #151	; 0x97
 800169c:	4618      	moveq	r0, r3
}
 800169e:	b002      	add	sp, #8
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	9800      	ldr	r0, [sp, #0]
	switch(cmdIn){
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <parseSyncPwmCmd+0x1bc>)
 80016a6:	4298      	cmp	r0, r3
 80016a8:	d067      	beq.n	800177a <parseSyncPwmCmd+0xf6>
 80016aa:	d922      	bls.n	80016f2 <parseSyncPwmCmd+0x6e>
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <parseSyncPwmCmd+0x1c0>)
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d00d      	beq.n	80016ce <parseSyncPwmCmd+0x4a>
 80016b2:	d96b      	bls.n	800178c <parseSyncPwmCmd+0x108>
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <parseSyncPwmCmd+0x1c4>)
 80016b6:	4298      	cmp	r0, r3
 80016b8:	f040 80a4 	bne.w	8001804 <parseSyncPwmCmd+0x180>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016bc:	4668      	mov	r0, sp
 80016be:	2105      	movs	r1, #5
 80016c0:	f000 fe1c 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016c4:	2803      	cmp	r0, #3
 80016c6:	d87c      	bhi.n	80017c2 <parseSyncPwmCmd+0x13e>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016c8:	2097      	movs	r0, #151	; 0x97
}
 80016ca:	b002      	add	sp, #8
 80016cc:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016ce:	4668      	mov	r0, sp
 80016d0:	2105      	movs	r1, #5
 80016d2:	f000 fe13 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016d6:	2803      	cmp	r0, #3
 80016d8:	d9f6      	bls.n	80016c8 <parseSyncPwmCmd+0x44>
 80016da:	9b00      	ldr	r3, [sp, #0]
		if(isSyncPwmStepMode(cmdIn)){
 80016dc:	4a5b      	ldr	r2, [pc, #364]	; (800184c <parseSyncPwmCmd+0x1c8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	f000 8088 	beq.w	80017f4 <parseSyncPwmCmd+0x170>
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <parseSyncPwmCmd+0x1cc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d1ee      	bne.n	80016c8 <parseSyncPwmCmd+0x44>
				syncPwmResetStepMode();
 80016ea:	f003 fc27 	bl	8004f3c <syncPwmResetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016ee:	4853      	ldr	r0, [pc, #332]	; (800183c <parseSyncPwmCmd+0x1b8>)
 80016f0:	e7d5      	b.n	800169e <parseSyncPwmCmd+0x1a>
	switch(cmdIn){
 80016f2:	f103 4373 	add.w	r3, r3, #4076863488	; 0xf3000000
 80016f6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80016fa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80016fe:	4298      	cmp	r0, r3
 8001700:	d027      	beq.n	8001752 <parseSyncPwmCmd+0xce>
 8001702:	f103 633f 	add.w	r3, r3, #200278016	; 0xbf00000
 8001706:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800170a:	4298      	cmp	r0, r3
 800170c:	d010      	beq.n	8001730 <parseSyncPwmCmd+0xac>
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <parseSyncPwmCmd+0x1d0>)
 8001710:	4298      	cmp	r0, r3
 8001712:	d1d9      	bne.n	80016c8 <parseSyncPwmCmd+0x44>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001714:	4b50      	ldr	r3, [pc, #320]	; (8001858 <parseSyncPwmCmd+0x1d4>)
 8001716:	4669      	mov	r1, sp
 8001718:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SYNCPWM_CONFIG;
 800171a:	2429      	movs	r4, #41	; 0x29
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SYNCPWM_CONFIG;
 8001722:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001726:	f007 fc17 	bl	8008f58 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;	
 800172a:	4844      	ldr	r0, [pc, #272]	; (800183c <parseSyncPwmCmd+0x1b8>)
}
 800172c:	b002      	add	sp, #8
 800172e:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001730:	4668      	mov	r0, sp
 8001732:	2105      	movs	r1, #5
 8001734:	f000 fde2 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001738:	2803      	cmp	r0, #3
 800173a:	d9c5      	bls.n	80016c8 <parseSyncPwmCmd+0x44>
 800173c:	9b00      	ldr	r3, [sp, #0]
		if(isSyncPwm(cmdIn)){
 800173e:	4a47      	ldr	r2, [pc, #284]	; (800185c <parseSyncPwmCmd+0x1d8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05b      	beq.n	80017fc <parseSyncPwmCmd+0x178>
 8001744:	4a46      	ldr	r2, [pc, #280]	; (8001860 <parseSyncPwmCmd+0x1dc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d166      	bne.n	8001818 <parseSyncPwmCmd+0x194>
				syncPwmSendDeinit();
 800174a:	f003 fbb1 	bl	8004eb0 <syncPwmSendDeinit>
	cmdIn = (error > 0) ? error : CMD_END;	
 800174e:	483b      	ldr	r0, [pc, #236]	; (800183c <parseSyncPwmCmd+0x1b8>)
 8001750:	e7a5      	b.n	800169e <parseSyncPwmCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001752:	4668      	mov	r0, sp
 8001754:	2105      	movs	r1, #5
 8001756:	f000 fdd1 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 800175a:	2803      	cmp	r0, #3
 800175c:	d9b4      	bls.n	80016c8 <parseSyncPwmCmd+0x44>
 800175e:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001760:	4c36      	ldr	r4, [pc, #216]	; (800183c <parseSyncPwmCmd+0x1b8>)
 8001762:	42a0      	cmp	r0, r4
 8001764:	d0b0      	beq.n	80016c8 <parseSyncPwmCmd+0x44>
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <parseSyncPwmCmd+0x1e0>)
 8001768:	4298      	cmp	r0, r3
 800176a:	d0ad      	beq.n	80016c8 <parseSyncPwmCmd+0x44>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 800176c:	b2c1      	uxtb	r1, r0
 800176e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001772:	f003 fbdf 	bl	8004f34 <syncPwmSetChannelState>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001776:	4620      	mov	r0, r4
 8001778:	e791      	b.n	800169e <parseSyncPwmCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800177a:	4668      	mov	r0, sp
 800177c:	2105      	movs	r1, #5
 800177e:	f000 fdbd 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001782:	2803      	cmp	r0, #3
 8001784:	d82a      	bhi.n	80017dc <parseSyncPwmCmd+0x158>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001786:	482d      	ldr	r0, [pc, #180]	; (800183c <parseSyncPwmCmd+0x1b8>)
}
 8001788:	b002      	add	sp, #8
 800178a:	bd10      	pop	{r4, pc}
	switch(cmdIn){
 800178c:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8001790:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8001794:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 8001798:	4298      	cmp	r0, r3
 800179a:	d195      	bne.n	80016c8 <parseSyncPwmCmd+0x44>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800179c:	4668      	mov	r0, sp
 800179e:	2105      	movs	r1, #5
 80017a0:	f000 fdac 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80017a4:	2803      	cmp	r0, #3
 80017a6:	d9ee      	bls.n	8001786 <parseSyncPwmCmd+0x102>
 80017a8:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017aa:	4c24      	ldr	r4, [pc, #144]	; (800183c <parseSyncPwmCmd+0x1b8>)
 80017ac:	42a0      	cmp	r0, r4
 80017ae:	d0ea      	beq.n	8001786 <parseSyncPwmCmd+0x102>
 80017b0:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <parseSyncPwmCmd+0x1e0>)
 80017b2:	4298      	cmp	r0, r3
 80017b4:	d0e7      	beq.n	8001786 <parseSyncPwmCmd+0x102>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 80017b6:	b281      	uxth	r1, r0
 80017b8:	0c00      	lsrs	r0, r0, #16
 80017ba:	f003 fbb5 	bl	8004f28 <syncPwmChannelConfig>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017be:	4620      	mov	r0, r4
 80017c0:	e76d      	b.n	800169e <parseSyncPwmCmd+0x1a>
 80017c2:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017c4:	4c1d      	ldr	r4, [pc, #116]	; (800183c <parseSyncPwmCmd+0x1b8>)
 80017c6:	42a0      	cmp	r0, r4
 80017c8:	f43f af7e 	beq.w	80016c8 <parseSyncPwmCmd+0x44>
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <parseSyncPwmCmd+0x1e0>)
 80017ce:	4298      	cmp	r0, r3
 80017d0:	f43f af7a 	beq.w	80016c8 <parseSyncPwmCmd+0x44>
			syncPwmFreqReconfig((uint32_t)(cmdIn));
 80017d4:	f003 fbac 	bl	8004f30 <syncPwmFreqReconfig>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017d8:	4620      	mov	r0, r4
 80017da:	e760      	b.n	800169e <parseSyncPwmCmd+0x1a>
 80017dc:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017de:	4c17      	ldr	r4, [pc, #92]	; (800183c <parseSyncPwmCmd+0x1b8>)
 80017e0:	42a0      	cmp	r0, r4
 80017e2:	d0d0      	beq.n	8001786 <parseSyncPwmCmd+0x102>
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <parseSyncPwmCmd+0x1e0>)
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d0cd      	beq.n	8001786 <parseSyncPwmCmd+0x102>
			syncPwmChannelNumber((uint8_t)cmdIn);
 80017ea:	b2c0      	uxtb	r0, r0
 80017ec:	f003 fb96 	bl	8004f1c <syncPwmChannelNumber>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017f0:	4620      	mov	r0, r4
 80017f2:	e754      	b.n	800169e <parseSyncPwmCmd+0x1a>
				syncPwmSetStepMode();
 80017f4:	f003 fba0 	bl	8004f38 <syncPwmSetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <parseSyncPwmCmd+0x1b8>)
 80017fa:	e750      	b.n	800169e <parseSyncPwmCmd+0x1a>
				syncPwmSendInit();
 80017fc:	f003 fb46 	bl	8004e8c <syncPwmSendInit>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001800:	480e      	ldr	r0, [pc, #56]	; (800183c <parseSyncPwmCmd+0x1b8>)
 8001802:	e74c      	b.n	800169e <parseSyncPwmCmd+0x1a>
	switch(cmdIn){
 8001804:	f103 635f 	add.w	r3, r3, #233832448	; 0xdf00000
 8001808:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 800180c:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8001810:	4298      	cmp	r0, r3
 8001812:	f43f af44 	beq.w	800169e <parseSyncPwmCmd+0x1a>
 8001816:	e757      	b.n	80016c8 <parseSyncPwmCmd+0x44>
		if(isSyncPwm(cmdIn)){
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <parseSyncPwmCmd+0x1e4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d103      	bne.n	8001826 <parseSyncPwmCmd+0x1a2>
				syncPwmSendStart();
 800181e:	f003 fb59 	bl	8004ed4 <syncPwmSendStart>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <parseSyncPwmCmd+0x1b8>)
 8001824:	e73b      	b.n	800169e <parseSyncPwmCmd+0x1a>
		if(isSyncPwm(cmdIn)){
 8001826:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 800182a:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 800182e:	4293      	cmp	r3, r2
 8001830:	f47f af4a 	bne.w	80016c8 <parseSyncPwmCmd+0x44>
				syncPwmSendStop();
 8001834:	f003 fb60 	bl	8004ef8 <syncPwmSendStop>
 8001838:	e7a5      	b.n	8001786 <parseSyncPwmCmd+0x102>
 800183a:	bf00      	nop
 800183c:	5f444e45 	.word	0x5f444e45
 8001840:	4d554e43 	.word	0x4d554e43
 8001844:	50455453 	.word	0x50455453
 8001848:	51524653 	.word	0x51524653
 800184c:	45455453 	.word	0x45455453
 8001850:	44455453 	.word	0x44455453
 8001854:	3f474643 	.word	0x3f474643
 8001858:	200047cc 	.word	0x200047cc
 800185c:	54494e49 	.word	0x54494e49
 8001860:	494e4944 	.word	0x494e4944
 8001864:	5f525245 	.word	0x5f525245
 8001868:	54525453 	.word	0x54525453

0800186c <parseLogAnlysCmd>:
command parseLogAnlysCmd(void){
 800186c:	b530      	push	{r4, r5, lr}
 800186e:	b083      	sub	sp, #12
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001870:	4668      	mov	r0, sp
 8001872:	2105      	movs	r1, #5
 8001874:	f000 fd42 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001878:	2803      	cmp	r0, #3
 800187a:	d855      	bhi.n	8001928 <parseLogAnlysCmd+0xbc>
		return CMD_END;
 800187c:	4dae      	ldr	r5, [pc, #696]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 800187e:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 8001880:	2800      	cmp	r0, #0
 8001882:	bf08      	it	eq
 8001884:	461d      	moveq	r5, r3
 8001886:	4cae      	ldr	r4, [pc, #696]	; (8001b40 <parseLogAnlysCmd+0x2d4>)
	while(logAnlys.state == LOGA_DATA_SENDING);
 8001888:	7ca3      	ldrb	r3, [r4, #18]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d0fc      	beq.n	8001888 <parseLogAnlysCmd+0x1c>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 800188e:	7ca3      	ldrb	r3, [r4, #18]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d04b      	beq.n	800192c <parseLogAnlysCmd+0xc0>
	switch (cmdIn)
 8001894:	4bab      	ldr	r3, [pc, #684]	; (8001b44 <parseLogAnlysCmd+0x2d8>)
 8001896:	429d      	cmp	r5, r3
 8001898:	f000 8104 	beq.w	8001aa4 <parseLogAnlysCmd+0x238>
 800189c:	d827      	bhi.n	80018ee <parseLogAnlysCmd+0x82>
 800189e:	f103 4376 	add.w	r3, r3, #4127195136	; 0xf6000000
 80018a2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80018a6:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80018aa:	429d      	cmp	r5, r3
 80018ac:	f000 80ef 	beq.w	8001a8e <parseLogAnlysCmd+0x222>
 80018b0:	d94a      	bls.n	8001948 <parseLogAnlysCmd+0xdc>
 80018b2:	4ba5      	ldr	r3, [pc, #660]	; (8001b48 <parseLogAnlysCmd+0x2dc>)
 80018b4:	429d      	cmp	r5, r3
 80018b6:	f000 80a1 	beq.w	80019fc <parseLogAnlysCmd+0x190>
 80018ba:	f103 63de 	add.w	r3, r3, #116391936	; 0x6f00000
 80018be:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 80018c2:	f203 5301 	addw	r3, r3, #1281	; 0x501
 80018c6:	429d      	cmp	r5, r3
 80018c8:	d126      	bne.n	8001918 <parseLogAnlysCmd+0xac>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80018ca:	4668      	mov	r0, sp
 80018cc:	2105      	movs	r1, #5
 80018ce:	f000 fd15 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80018d2:	2803      	cmp	r0, #3
 80018d4:	f200 80ed 	bhi.w	8001ab2 <parseLogAnlysCmd+0x246>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018d8:	7ca3      	ldrb	r3, [r4, #18]
	}else if(bytesRead == 0){
 80018da:	2800      	cmp	r0, #0
 80018dc:	f000 80de 	beq.w	8001a9c <parseLogAnlysCmd+0x230>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d12b      	bne.n	800193c <parseLogAnlysCmd+0xd0>
		logAnlysStart();
 80018e4:	f002 fb9c 	bl	8004020 <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 80018e8:	4894      	ldr	r0, [pc, #592]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
}
 80018ea:	b003      	add	sp, #12
 80018ec:	bd30      	pop	{r4, r5, pc}
	switch (cmdIn)
 80018ee:	4b97      	ldr	r3, [pc, #604]	; (8001b4c <parseLogAnlysCmd+0x2e0>)
 80018f0:	429d      	cmp	r5, r3
 80018f2:	f000 8094 	beq.w	8001a1e <parseLogAnlysCmd+0x1b2>
 80018f6:	d967      	bls.n	80019c8 <parseLogAnlysCmd+0x15c>
 80018f8:	4b95      	ldr	r3, [pc, #596]	; (8001b50 <parseLogAnlysCmd+0x2e4>)
 80018fa:	429d      	cmp	r5, r3
 80018fc:	d058      	beq.n	80019b0 <parseLogAnlysCmd+0x144>
 80018fe:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8001902:	33fd      	adds	r3, #253	; 0xfd
 8001904:	429d      	cmp	r5, r3
 8001906:	f000 80ae 	beq.w	8001a66 <parseLogAnlysCmd+0x1fa>
 800190a:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 800190e:	f46f 7283 	mvn.w	r2, #262	; 0x106
 8001912:	4413      	add	r3, r2
 8001914:	429d      	cmp	r5, r3
 8001916:	d051      	beq.n	80019bc <parseLogAnlysCmd+0x150>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001918:	7ca3      	ldrb	r3, [r4, #18]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d101      	bne.n	8001922 <parseLogAnlysCmd+0xb6>
		logAnlysStart();
 800191e:	f002 fb7f 	bl	8004020 <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8001922:	2098      	movs	r0, #152	; 0x98
}
 8001924:	b003      	add	sp, #12
 8001926:	bd30      	pop	{r4, r5, pc}
 8001928:	9d00      	ldr	r5, [sp, #0]
 800192a:	e7ac      	b.n	8001886 <parseLogAnlysCmd+0x1a>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <parseLogAnlysCmd+0x2e8>)
 800192e:	429d      	cmp	r5, r3
 8001930:	d107      	bne.n	8001942 <parseLogAnlysCmd+0xd6>
		logAnlysSendStop();
 8001932:	f002 fb51 	bl	8003fd8 <logAnlysSendStop>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001936:	7ca3      	ldrb	r3, [r4, #18]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d036      	beq.n	80019aa <parseLogAnlysCmd+0x13e>
	cmdIn = (error > 0) ? error : CMD_END;
 800193c:	487f      	ldr	r0, [pc, #508]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
}
 800193e:	b003      	add	sp, #12
 8001940:	bd30      	pop	{r4, r5, pc}
		logAnlysStop(); 
 8001942:	f002 fb89 	bl	8004058 <logAnlysStop>
 8001946:	e7a5      	b.n	8001894 <parseLogAnlysCmd+0x28>
	switch (cmdIn)
 8001948:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 800194c:	f46f 6141 	mvn.w	r1, #3088	; 0xc10
 8001950:	440b      	add	r3, r1
 8001952:	429d      	cmp	r5, r3
 8001954:	d077      	beq.n	8001a46 <parseLogAnlysCmd+0x1da>
 8001956:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800195a:	f603 4311 	addw	r3, r3, #3089	; 0xc11
 800195e:	429d      	cmp	r5, r3
 8001960:	d1da      	bne.n	8001918 <parseLogAnlysCmd+0xac>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001962:	4668      	mov	r0, sp
 8001964:	2105      	movs	r1, #5
 8001966:	f000 fcc9 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 800196a:	2803      	cmp	r0, #3
 800196c:	d9d4      	bls.n	8001918 <parseLogAnlysCmd+0xac>
 800196e:	9d00      	ldr	r5, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001970:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 8001972:	429d      	cmp	r5, r3
 8001974:	d0d0      	beq.n	8001918 <parseLogAnlysCmd+0xac>
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 8001978:	429d      	cmp	r5, r3
 800197a:	d0cd      	beq.n	8001918 <parseLogAnlysCmd+0xac>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 800197c:	4628      	mov	r0, r5
 800197e:	f002 fbad 	bl	80040dc <logAnlysSetTriggerChannel>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001982:	7ca3      	ldrb	r3, [r4, #18]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d0ad      	beq.n	80018e4 <parseLogAnlysCmd+0x78>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <parseLogAnlysCmd+0x2ec>)
 800198a:	429d      	cmp	r5, r3
 800198c:	d0aa      	beq.n	80018e4 <parseLogAnlysCmd+0x78>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 800198e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001992:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001996:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800199a:	f025 6200 	bic.w	r2, r5, #134217728	; 0x8000000
 800199e:	429a      	cmp	r2, r3
 80019a0:	d003      	beq.n	80019aa <parseLogAnlysCmd+0x13e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 80019a2:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 80019a6:	429d      	cmp	r5, r3
 80019a8:	d1c8      	bne.n	800193c <parseLogAnlysCmd+0xd0>
		logAnlysStart();
 80019aa:	f002 fb39 	bl	8004020 <logAnlysStart>
 80019ae:	e7c5      	b.n	800193c <parseLogAnlysCmd+0xd0>
		logAnlysSendStart();
 80019b0:	f002 fb00 	bl	8003fb4 <logAnlysSendStart>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019b4:	7ca3      	ldrb	r3, [r4, #18]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d1c0      	bne.n	800193c <parseLogAnlysCmd+0xd0>
 80019ba:	e7f6      	b.n	80019aa <parseLogAnlysCmd+0x13e>
		logAnlysSendInit();
 80019bc:	f002 fad6 	bl	8003f6c <logAnlysSendInit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019c0:	7ca3      	ldrb	r3, [r4, #18]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d1ba      	bne.n	800193c <parseLogAnlysCmd+0xd0>
 80019c6:	e7f0      	b.n	80019aa <parseLogAnlysCmd+0x13e>
	switch (cmdIn)
 80019c8:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 80019cc:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80019d0:	f603 3303 	addw	r3, r3, #2819	; 0xb03
 80019d4:	429d      	cmp	r5, r3
 80019d6:	f040 808f 	bne.w	8001af8 <parseLogAnlysCmd+0x28c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019da:	4668      	mov	r0, sp
 80019dc:	2105      	movs	r1, #5
 80019de:	f000 fc8d 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019e2:	2803      	cmp	r0, #3
 80019e4:	d998      	bls.n	8001918 <parseLogAnlysCmd+0xac>
 80019e6:	9d00      	ldr	r5, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80019e8:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 80019ea:	429d      	cmp	r5, r3
 80019ec:	d094      	beq.n	8001918 <parseLogAnlysCmd+0xac>
 80019ee:	4b52      	ldr	r3, [pc, #328]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 80019f0:	429d      	cmp	r5, r3
 80019f2:	d091      	beq.n	8001918 <parseLogAnlysCmd+0xac>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80019f4:	b2a8      	uxth	r0, r5
 80019f6:	f002 fb51 	bl	800409c <logAnlysSetSamplesNum>
 80019fa:	e7c2      	b.n	8001982 <parseLogAnlysCmd+0x116>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019fc:	4668      	mov	r0, sp
 80019fe:	2105      	movs	r1, #5
 8001a00:	f000 fc7c 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a04:	2803      	cmp	r0, #3
 8001a06:	d987      	bls.n	8001918 <parseLogAnlysCmd+0xac>
 8001a08:	9d00      	ldr	r5, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 8001a0c:	429d      	cmp	r5, r3
 8001a0e:	d083      	beq.n	8001918 <parseLogAnlysCmd+0xac>
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 8001a12:	429d      	cmp	r5, r3
 8001a14:	d080      	beq.n	8001918 <parseLogAnlysCmd+0xac>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 8001a16:	4628      	mov	r0, r5
 8001a18:	f002 fb28 	bl	800406c <logAnlysSetSamplingFreq>
 8001a1c:	e7b1      	b.n	8001982 <parseLogAnlysCmd+0x116>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a1e:	4668      	mov	r0, sp
 8001a20:	2105      	movs	r1, #5
 8001a22:	f000 fc6b 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a26:	2803      	cmp	r0, #3
 8001a28:	f67f af76 	bls.w	8001918 <parseLogAnlysCmd+0xac>
 8001a2c:	9d00      	ldr	r5, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 8001a30:	429d      	cmp	r5, r3
 8001a32:	f43f af71 	beq.w	8001918 <parseLogAnlysCmd+0xac>
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 8001a38:	429d      	cmp	r5, r3
 8001a3a:	f43f af6d 	beq.w	8001918 <parseLogAnlysCmd+0xac>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f002 fb18 	bl	8004074 <logAnlysSetPretrigger>
 8001a44:	e79d      	b.n	8001982 <parseLogAnlysCmd+0x116>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a46:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <parseLogAnlysCmd+0x2f0>)
 8001a48:	4669      	mov	r1, sp
 8001a4a:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_LOGAN_CONFIG;
 8001a4c:	2518      	movs	r5, #24
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_LOGAN_CONFIG;
 8001a54:	f8ad 5000 	strh.w	r5, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a58:	f007 fa7e 	bl	8008f58 <xQueueGenericSend>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a5c:	7ca3      	ldrb	r3, [r4, #18]
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	f47f af6c 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001a64:	e7a1      	b.n	80019aa <parseLogAnlysCmd+0x13e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a66:	4668      	mov	r0, sp
 8001a68:	2105      	movs	r1, #5
 8001a6a:	f000 fc47 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a6e:	2803      	cmp	r0, #3
 8001a70:	f67f af52 	bls.w	8001918 <parseLogAnlysCmd+0xac>
 8001a74:	9d00      	ldr	r5, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <parseLogAnlysCmd+0x2d0>)
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	f43f af4d 	beq.w	8001918 <parseLogAnlysCmd+0xac>
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <parseLogAnlysCmd+0x2cc>)
 8001a80:	429d      	cmp	r5, r3
 8001a82:	f43f af49 	beq.w	8001918 <parseLogAnlysCmd+0xac>
			logAnlysSetPosttrigger((uint32_t)cmdIn);
 8001a86:	4628      	mov	r0, r5
 8001a88:	f002 faf2 	bl	8004070 <logAnlysSetPosttrigger>
 8001a8c:	e779      	b.n	8001982 <parseLogAnlysCmd+0x116>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a8e:	4668      	mov	r0, sp
 8001a90:	2105      	movs	r1, #5
 8001a92:	f000 fc33 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a96:	2803      	cmp	r0, #3
 8001a98:	d819      	bhi.n	8001ace <parseLogAnlysCmd+0x262>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a9a:	7ca3      	ldrb	r3, [r4, #18]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	f47f af4d 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001aa2:	e71f      	b.n	80018e4 <parseLogAnlysCmd+0x78>
		logAnlysSendDeinit();
 8001aa4:	f002 fa74 	bl	8003f90 <logAnlysSendDeinit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001aa8:	7ca3      	ldrb	r3, [r4, #18]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	f47f af46 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001ab0:	e77b      	b.n	80019aa <parseLogAnlysCmd+0x13e>
 8001ab2:	9d00      	ldr	r5, [sp, #0]
		if(isLogAnlysTriggerMode(cmdIn)){
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <parseLogAnlysCmd+0x2f4>)
 8001ab6:	429d      	cmp	r5, r3
 8001ab8:	d01b      	beq.n	8001af2 <parseLogAnlysCmd+0x286>
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <parseLogAnlysCmd+0x2f8>)
 8001abc:	429d      	cmp	r5, r3
 8001abe:	d12a      	bne.n	8001b16 <parseLogAnlysCmd+0x2aa>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ac4:	7ca3      	ldrb	r3, [r4, #18]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	f47f af38 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001acc:	e70a      	b.n	80018e4 <parseLogAnlysCmd+0x78>
 8001ace:	9b00      	ldr	r3, [sp, #0]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <parseLogAnlysCmd+0x2fc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <parseLogAnlysCmd+0x29c>
 8001ad6:	f102 62df 	add.w	r2, r2, #116916224	; 0x6f80000
 8001ada:	f502 4277 	add.w	r2, r2, #63232	; 0xf700
 8001ade:	32f4      	adds	r2, #244	; 0xf4
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d1da      	bne.n	8001a9a <parseLogAnlysCmd+0x22e>
				logAnlysSetTriggerFalling();
 8001ae4:	f002 faf4 	bl	80040d0 <logAnlysSetTriggerFalling>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ae8:	7ca3      	ldrb	r3, [r4, #18]
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	f47f af26 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001af0:	e6f8      	b.n	80018e4 <parseLogAnlysCmd+0x78>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 8001af2:	2300      	movs	r3, #0
 8001af4:	7523      	strb	r3, [r4, #20]
 8001af6:	e7d0      	b.n	8001a9a <parseLogAnlysCmd+0x22e>
	switch (cmdIn)
 8001af8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001afc:	f5a3 4379 	sub.w	r3, r3, #63744	; 0xf900
 8001b00:	429d      	cmp	r5, r3
 8001b02:	f47f af09 	bne.w	8001918 <parseLogAnlysCmd+0xac>
 8001b06:	e714      	b.n	8001932 <parseLogAnlysCmd+0xc6>
				logAnlysSetTriggerRising();
 8001b08:	f002 fadc 	bl	80040c4 <logAnlysSetTriggerRising>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b0c:	7ca3      	ldrb	r3, [r4, #18]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	f47f af14 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001b14:	e6e6      	b.n	80018e4 <parseLogAnlysCmd+0x78>
		if(isLogAnlysTriggerMode(cmdIn)){
 8001b16:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001b1a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001b1e:	f2a3 53fb 	subw	r3, r3, #1531	; 0x5fb
 8001b22:	429d      	cmp	r5, r3
 8001b24:	f47f af2d 	bne.w	8001982 <parseLogAnlysCmd+0x116>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8001b28:	2302      	movs	r3, #2
 8001b2a:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b2c:	7ca3      	ldrb	r3, [r4, #18]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	f47f af04 	bne.w	800193c <parseLogAnlysCmd+0xd0>
 8001b34:	e6d6      	b.n	80018e4 <parseLogAnlysCmd+0x78>
 8001b36:	bf00      	nop
 8001b38:	5f525245 	.word	0x5f525245
 8001b3c:	5f444e45 	.word	0x5f444e45
 8001b40:	20005418 	.word	0x20005418
 8001b44:	4e494544 	.word	0x4e494544
 8001b48:	46504d53 	.word	0x46504d53
 8001b4c:	54455250 	.word	0x54455250
 8001b50:	54525453 	.word	0x54525453
 8001b54:	504f5453 	.word	0x504f5453
 8001b58:	54534f50 	.word	0x54534f50
 8001b5c:	200047cc 	.word	0x200047cc
 8001b60:	4f545541 	.word	0x4f545541
 8001b64:	4d524f4e 	.word	0x4d524f4e
 8001b68:	45534952 	.word	0x45534952

08001b6c <parseGeneratorCmd>:
command parseGeneratorCmd(void){
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	b083      	sub	sp, #12
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001b70:	4668      	mov	r0, sp
 8001b72:	2105      	movs	r1, #5
 8001b74:	f000 fbc2 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001b78:	2803      	cmp	r0, #3
 8001b7a:	d806      	bhi.n	8001b8a <parseGeneratorCmd+0x1e>
		cmdIn=CMD_END;
 8001b7c:	4bbe      	ldr	r3, [pc, #760]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2064      	movne	r0, #100	; 0x64
 8001b84:	4618      	moveq	r0, r3
}
 8001b86:	b003      	add	sp, #12
 8001b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8a:	9b00      	ldr	r3, [sp, #0]
	switch(cmdIn){
 8001b8c:	4abb      	ldr	r2, [pc, #748]	; (8001e7c <parseGeneratorCmd+0x310>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f000 80d3 	beq.w	8001d3a <parseGeneratorCmd+0x1ce>
 8001b94:	d81d      	bhi.n	8001bd2 <parseGeneratorCmd+0x66>
 8001b96:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
 8001b9a:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
 8001b9e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f000 80c5 	beq.w	8001d32 <parseGeneratorCmd+0x1c6>
 8001ba8:	d840      	bhi.n	8001c2c <parseGeneratorCmd+0xc0>
 8001baa:	4ab5      	ldr	r2, [pc, #724]	; (8001e80 <parseGeneratorCmd+0x314>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	f000 80dc 	beq.w	8001d6a <parseGeneratorCmd+0x1fe>
 8001bb2:	f240 8181 	bls.w	8001eb8 <parseGeneratorCmd+0x34c>
 8001bb6:	4ab3      	ldr	r2, [pc, #716]	; (8001e84 <parseGeneratorCmd+0x318>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d071      	beq.n	8001ca0 <parseGeneratorCmd+0x134>
 8001bbc:	f502 3281 	add.w	r2, r2, #66048	; 0x10200
 8001bc0:	32f3      	adds	r2, #243	; 0xf3
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	f040 81cd 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001bc8:	4baf      	ldr	r3, [pc, #700]	; (8001e88 <parseGeneratorCmd+0x31c>)
 8001bca:	4669      	mov	r1, sp
 8001bcc:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_GEN_CONFIG;
 8001bce:	241f      	movs	r4, #31
 8001bd0:	e06a      	b.n	8001ca8 <parseGeneratorCmd+0x13c>
	switch(cmdIn){
 8001bd2:	4aae      	ldr	r2, [pc, #696]	; (8001e8c <parseGeneratorCmd+0x320>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d049      	beq.n	8001c6c <parseGeneratorCmd+0x100>
 8001bd8:	d86f      	bhi.n	8001cba <parseGeneratorCmd+0x14e>
 8001bda:	f102 427d 	add.w	r2, r2, #4244635648	; 0xfd000000
 8001bde:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8001be2:	f602 42fc 	addw	r2, r2, #3324	; 0xcfc
 8001be6:	4293      	cmp	r3, r2
 8001be8:	f000 809f 	beq.w	8001d2a <parseGeneratorCmd+0x1be>
 8001bec:	f240 80e7 	bls.w	8001dbe <parseGeneratorCmd+0x252>
 8001bf0:	4aa7      	ldr	r2, [pc, #668]	; (8001e90 <parseGeneratorCmd+0x324>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d051      	beq.n	8001c9a <parseGeneratorCmd+0x12e>
 8001bf6:	f502 22ff 	add.w	r2, r2, #522240	; 0x7f800
 8001bfa:	f202 32f3 	addw	r2, r2, #1011	; 0x3f3
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f040 81af 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c04:	4668      	mov	r0, sp
 8001c06:	2105      	movs	r1, #5
 8001c08:	f000 fb78 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c0c:	2803      	cmp	r0, #3
 8001c0e:	d92a      	bls.n	8001c66 <parseGeneratorCmd+0xfa>
 8001c10:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001c12:	4c99      	ldr	r4, [pc, #612]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d026      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
 8001c18:	4b9e      	ldr	r3, [pc, #632]	; (8001e94 <parseGeneratorCmd+0x328>)
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d023      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
			genSetPwmFrequencyPSC(((cmdIn)&0x00ffff00)>>8,(uint8_t)(cmdIn));
 8001c1e:	b2c1      	uxtb	r1, r0
 8001c20:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8001c24:	f001 ff08 	bl	8003a38 <genSetPwmFrequencyPSC>
		cmdIn=CMD_END;
 8001c28:	4620      	mov	r0, r4
 8001c2a:	e7ac      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	switch(cmdIn){
 8001c2c:	4a9a      	ldr	r2, [pc, #616]	; (8001e98 <parseGeneratorCmd+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	f000 8087 	beq.w	8001d42 <parseGeneratorCmd+0x1d6>
 8001c34:	f240 80eb 	bls.w	8001e0e <parseGeneratorCmd+0x2a2>
 8001c38:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <parseGeneratorCmd+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00c      	beq.n	8001c58 <parseGeneratorCmd+0xec>
 8001c3e:	f102 7285 	add.w	r2, r2, #17432576	; 0x10a0000
 8001c42:	f502 3287 	add.w	r2, r2, #69120	; 0x10e00
 8001c46:	f202 12f5 	addw	r2, r2, #501	; 0x1f5
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	f040 8189 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
		genUnsetOutputBuffer();
 8001c50:	f002 f816 	bl	8003c80 <genUnsetOutputBuffer>
		cmdIn=CMD_END;
 8001c54:	4888      	ldr	r0, [pc, #544]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001c56:	e796      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c58:	4668      	mov	r0, sp
 8001c5a:	2105      	movs	r1, #5
 8001c5c:	f000 fb4e 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c60:	2803      	cmp	r0, #3
 8001c62:	f200 809e 	bhi.w	8001da2 <parseGeneratorCmd+0x236>
		cmdIn=CMD_END;
 8001c66:	4884      	ldr	r0, [pc, #528]	; (8001e78 <parseGeneratorCmd+0x30c>)
}
 8001c68:	b003      	add	sp, #12
 8001c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c6c:	4668      	mov	r0, sp
 8001c6e:	2105      	movs	r1, #5
 8001c70:	f000 fb44 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c74:	2803      	cmp	r0, #3
 8001c76:	d9f6      	bls.n	8001c66 <parseGeneratorCmd+0xfa>
 8001c78:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001c7c:	4298      	cmp	r0, r3
 8001c7e:	d0f2      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <parseGeneratorCmd+0x328>)
 8001c82:	4298      	cmp	r0, r3
 8001c84:	d0ef      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001c86:	b2c1      	uxtb	r1, r0
 8001c88:	0a00      	lsrs	r0, r0, #8
 8001c8a:	f001 ff21 	bl	8003ad0 <genSetFrequency>
 8001c8e:	4604      	mov	r4, r0
	if(error>0){
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d0e8      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
 8001c94:	4620      	mov	r0, r4
}
 8001c96:	b003      	add	sp, #12
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		genStop();
 8001c9a:	f002 f8cb 	bl	8003e34 <genStop>
 8001c9e:	e7e2      	b.n	8001c66 <parseGeneratorCmd+0xfa>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <parseGeneratorCmd+0x31c>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	4669      	mov	r1, sp
		passMsg = MSG_GEN_PWM_CONFIG;
 8001ca6:	2420      	movs	r4, #32
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_GEN_PWM_CONFIG;
 8001cae:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001cb2:	f007 f951 	bl	8008f58 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001cb6:	4870      	ldr	r0, [pc, #448]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001cb8:	e7d6      	b.n	8001c68 <parseGeneratorCmd+0xfc>
	switch(cmdIn){
 8001cba:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <parseGeneratorCmd+0x334>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01a      	beq.n	8001cf6 <parseGeneratorCmd+0x18a>
 8001cc0:	f200 8144 	bhi.w	8001f4c <parseGeneratorCmd+0x3e0>
 8001cc4:	f102 4275 	add.w	r2, r2, #4110417920	; 0xf5000000
 8001cc8:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8001ccc:	f202 220e 	addw	r2, r2, #526	; 0x20e
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00c      	beq.n	8001cee <parseGeneratorCmd+0x182>
 8001cd4:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
 8001cd8:	f202 1201 	addw	r2, r2, #257	; 0x101
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	f040 8140 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
		genStart();
 8001ce2:	f002 f895 	bl	8003e10 <genStart>
		genStatusOK();
 8001ce6:	f001 ff35 	bl	8003b54 <genStatusOK>
		cmdIn=CMD_END;
 8001cea:	4863      	ldr	r0, [pc, #396]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001cec:	e74b      	b.n	8001b86 <parseGeneratorCmd+0x1a>
		genReset();
 8001cee:	f002 f8b3 	bl	8003e58 <genReset>
		cmdIn=CMD_END;
 8001cf2:	4861      	ldr	r0, [pc, #388]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001cf4:	e747      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001cf6:	4668      	mov	r0, sp
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	f000 faff 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001cfe:	2803      	cmp	r0, #3
 8001d00:	d84b      	bhi.n	8001d9a <parseGeneratorCmd+0x22e>
	}else if(bytesRead == 0){
 8001d02:	2800      	cmp	r0, #0
 8001d04:	f645 7244 	movw	r2, #24388	; 0x5f44
 8001d08:	f644 6345 	movw	r3, #20037	; 0x4e45
 8001d0c:	f645 7152 	movw	r1, #24402	; 0x5f52
 8001d10:	f245 2045 	movw	r0, #21061	; 0x5245
 8001d14:	bf04      	itt	eq
 8001d16:	4611      	moveq	r1, r2
 8001d18:	4618      	moveq	r0, r3
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001d1a:	f001 ffb3 	bl	8003c84 <genSetDAC>
 8001d1e:	4604      	mov	r4, r0
		genStatusOK();
 8001d20:	f001 ff18 	bl	8003b54 <genStatusOK>
	if(error>0){
 8001d24:	2c00      	cmp	r4, #0
 8001d26:	d1b5      	bne.n	8001c94 <parseGeneratorCmd+0x128>
 8001d28:	e79d      	b.n	8001c66 <parseGeneratorCmd+0xfa>
		genSetOutputBuffer();
 8001d2a:	f001 ffa7 	bl	8003c7c <genSetOutputBuffer>
		cmdIn=CMD_END;
 8001d2e:	4852      	ldr	r0, [pc, #328]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001d30:	e729      	b.n	8001b86 <parseGeneratorCmd+0x1a>
		genSendRealSamplingFreq();
 8001d32:	f001 feeb 	bl	8003b0c <genSendRealSamplingFreq>
		cmdIn=CMD_END;
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001d38:	e725      	b.n	8001b86 <parseGeneratorCmd+0x1a>
		generator_deinit();
 8001d3a:	f001 fe6f 	bl	8003a1c <generator_deinit>
		cmdIn=CMD_END;
 8001d3e:	484e      	ldr	r0, [pc, #312]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001d40:	e721      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d42:	4668      	mov	r0, sp
 8001d44:	2105      	movs	r1, #5
 8001d46:	f000 fad9 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d4a:	2803      	cmp	r0, #3
 8001d4c:	d98b      	bls.n	8001c66 <parseGeneratorCmd+0xfa>
 8001d4e:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d50:	4c49      	ldr	r4, [pc, #292]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001d52:	42a0      	cmp	r0, r4
 8001d54:	d087      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
 8001d56:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <parseGeneratorCmd+0x328>)
 8001d58:	4298      	cmp	r0, r3
 8001d5a:	d084      	beq.n	8001c66 <parseGeneratorCmd+0xfa>
			genSetPwmFrequencyARR(((cmdIn)&0x00ffff00)>>8,(uint8_t)(cmdIn));
 8001d5c:	b2c1      	uxtb	r1, r0
 8001d5e:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8001d62:	f001 fe6d 	bl	8003a40 <genSetPwmFrequencyARR>
		cmdIn=CMD_END;
 8001d66:	4620      	mov	r0, r4
 8001d68:	e70d      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d6a:	4668      	mov	r0, sp
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	f000 fac5 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d72:	2803      	cmp	r0, #3
 8001d74:	f67f af77 	bls.w	8001c66 <parseGeneratorCmd+0xfa>
 8001d78:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	f43f af72 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <parseGeneratorCmd+0x328>)
 8001d84:	4298      	cmp	r0, r3
 8001d86:	f43f af6e 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
			error=genSetLength(cmdIn,2);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	f001 fefc 	bl	8003b88 <genSetLength>
 8001d90:	4604      	mov	r4, r0
	if(error>0){
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	f47f af7e 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001d98:	e765      	b.n	8001c66 <parseGeneratorCmd+0xfa>
 8001d9a:	9900      	ldr	r1, [sp, #0]
 8001d9c:	b288      	uxth	r0, r1
 8001d9e:	0c09      	lsrs	r1, r1, #16
 8001da0:	e7bb      	b.n	8001d1a <parseGeneratorCmd+0x1ae>
 8001da2:	9b00      	ldr	r3, [sp, #0]
		if(isGeneratorMode(cmdIn)){
 8001da4:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <parseGeneratorCmd+0x338>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f000 80c4 	beq.w	8001f34 <parseGeneratorCmd+0x3c8>
 8001dac:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <parseGeneratorCmd+0x334>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f47f af59 	bne.w	8001c66 <parseGeneratorCmd+0xfa>
				genSetMode(GEN_DAC);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f001 fe0d 	bl	80039d4 <genSetMode>
		cmdIn=CMD_END;
 8001dba:	482f      	ldr	r0, [pc, #188]	; (8001e78 <parseGeneratorCmd+0x30c>)
 8001dbc:	e6e3      	b.n	8001b86 <parseGeneratorCmd+0x1a>
	switch(cmdIn){
 8001dbe:	f5a2 2261 	sub.w	r2, r2, #921600	; 0xe1000
 8001dc2:	f2a2 62ff 	subw	r2, r2, #1791	; 0x6ff
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 80cb 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001dcc:	4668      	mov	r0, sp
 8001dce:	2105      	movs	r1, #5
 8001dd0:	f000 fa94 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001dd4:	2803      	cmp	r0, #3
 8001dd6:	f67f af46 	bls.w	8001c66 <parseGeneratorCmd+0xfa>
 8001dda:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <parseGeneratorCmd+0x33c>)
 8001dde:	4413      	add	r3, r2
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	f63f af40 	bhi.w	8001c66 <parseGeneratorCmd+0xfa>
			if(cmdIn == CMD_CHANNELS_1){
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <parseGeneratorCmd+0x340>)
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f000 80a7 	beq.w	8001f3c <parseGeneratorCmd+0x3d0>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <parseGeneratorCmd+0x344>)
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f000 80b8 	beq.w	8001f66 <parseGeneratorCmd+0x3fa>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <parseGeneratorCmd+0x348>)
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8093 	bne.w	8001f24 <parseGeneratorCmd+0x3b8>
				error=genSetNumOfChannels(3);
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f001 fef4 	bl	8003bec <genSetNumOfChannels>
 8001e04:	4604      	mov	r4, r0
	if(error>0){
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	f47f af44 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001e0c:	e72b      	b.n	8001c66 <parseGeneratorCmd+0xfa>
	switch(cmdIn){
 8001e0e:	f5a2 3243 	sub.w	r2, r2, #199680	; 0x30c00
 8001e12:	f2a2 3202 	subw	r2, r2, #770	; 0x302
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f040 80a3 	bne.w	8001f62 <parseGeneratorCmd+0x3f6>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	4668      	mov	r0, sp
 8001e20:	f000 fa6c 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001e24:	2803      	cmp	r0, #3
 8001e26:	d863      	bhi.n	8001ef0 <parseGeneratorCmd+0x384>
	}else if(bytesRead == 0){
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	f244 534e 	movw	r3, #17742	; 0x454e
 8001e2e:	f244 5752 	movw	r7, #17746	; 0x4552
 8001e32:	bf13      	iteet	ne
 8001e34:	2652      	movne	r6, #82	; 0x52
 8001e36:	461f      	moveq	r7, r3
 8001e38:	2644      	moveq	r6, #68	; 0x44
 8001e3a:	25a4      	movne	r5, #164	; 0xa4
 8001e3c:	bf08      	it	eq
 8001e3e:	2588      	moveq	r5, #136	; 0x88
 8001e40:	235f      	movs	r3, #95	; 0x5f
		chan=cmdIn>>24;
 8001e42:	f88d 3000 	strb.w	r3, [sp]
 8001e46:	f241 3488 	movw	r4, #5000	; 0x1388
 8001e4a:	e004      	b.n	8001e56 <parseGeneratorCmd+0x2ea>
 8001e4c:	3c01      	subs	r4, #1
 8001e4e:	b2a4      	uxth	r4, r4
			osDelay(1);
 8001e50:	f006 ffe8 	bl	8008e24 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001e54:	b12c      	cbz	r4, 8001e62 <parseGeneratorCmd+0x2f6>
 8001e56:	f000 faeb 	bl	8002430 <getBytesAvailable>
 8001e5a:	42a8      	cmp	r0, r5
			osDelay(1);
 8001e5c:	f04f 0001 	mov.w	r0, #1
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001e60:	ddf4      	ble.n	8001e4c <parseGeneratorCmd+0x2e0>
		if(getBytesAvailable()<length*2+1){
 8001e62:	f000 fae5 	bl	8002430 <getBytesAvailable>
 8001e66:	42a8      	cmp	r0, r5
 8001e68:	dc4b      	bgt.n	8001f02 <parseGeneratorCmd+0x396>
			while(commBufferReadByte(&chan)==0);
 8001e6a:	4668      	mov	r0, sp
 8001e6c:	f000 fa24 	bl	80022b8 <commBufferReadByte>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d0fa      	beq.n	8001e6a <parseGeneratorCmd+0x2fe>
 8001e74:	2068      	movs	r0, #104	; 0x68
 8001e76:	e686      	b.n	8001b86 <parseGeneratorCmd+0x1a>
 8001e78:	5f444e45 	.word	0x5f444e45
 8001e7c:	49445047 	.word	0x49445047
 8001e80:	3248434c 	.word	0x3248434c
 8001e84:	3f464350 	.word	0x3f464350
 8001e88:	200047cc 	.word	0x200047cc
 8001e8c:	51455246 	.word	0x51455246
 8001e90:	504f5453 	.word	0x504f5453
 8001e94:	5f525245 	.word	0x5f525245
 8001e98:	41575046 	.word	0x41575046
 8001e9c:	45444f4d 	.word	0x45444f4d
 8001ea0:	5f434144 	.word	0x5f434144
 8001ea4:	5f4d5750 	.word	0x5f4d5750
 8001ea8:	a0b7bccf 	.word	0xa0b7bccf
 8001eac:	5f484331 	.word	0x5f484331
 8001eb0:	5f484332 	.word	0x5f484332
 8001eb4:	5f484333 	.word	0x5f484333
	switch(cmdIn){
 8001eb8:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d150      	bne.n	8001f62 <parseGeneratorCmd+0x3f6>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001ec0:	4668      	mov	r0, sp
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	f000 fa1a 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001ec8:	2803      	cmp	r0, #3
 8001eca:	f67f aecc 	bls.w	8001c66 <parseGeneratorCmd+0xfa>
 8001ece:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <parseGeneratorCmd+0x414>)
 8001ed2:	4298      	cmp	r0, r3
 8001ed4:	f43f aec7 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <parseGeneratorCmd+0x418>)
 8001eda:	4298      	cmp	r0, r3
 8001edc:	f43f aec3 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
			error=genSetLength(cmdIn,1);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	f001 fe51 	bl	8003b88 <genSetLength>
 8001ee6:	4604      	mov	r4, r0
	if(error>0){
 8001ee8:	2c00      	cmp	r4, #0
 8001eea:	f47f aed3 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001eee:	e6ba      	b.n	8001c66 <parseGeneratorCmd+0xfa>
 8001ef0:	9b00      	ldr	r3, [sp, #0]
 8001ef2:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8001ef6:	ba5f      	rev16	r7, r3
 8001ef8:	004d      	lsls	r5, r1, #1
 8001efa:	460e      	mov	r6, r1
 8001efc:	b2bf      	uxth	r7, r7
 8001efe:	0e1b      	lsrs	r3, r3, #24
 8001f00:	e79f      	b.n	8001e42 <parseGeneratorCmd+0x2d6>
			error=genSetData(index,length*2,chan);
 8001f02:	0071      	lsls	r1, r6, #1
 8001f04:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001f08:	4638      	mov	r0, r7
 8001f0a:	f89d 2000 	ldrb.w	r2, [sp]
 8001f0e:	f001 fd9b 	bl	8003a48 <genSetData>
			if (error){
 8001f12:	4604      	mov	r4, r0
 8001f14:	b378      	cbz	r0, 8001f76 <parseGeneratorCmd+0x40a>
				while(commBufferReadByte(&chan)==0);
 8001f16:	4668      	mov	r0, sp
 8001f18:	f000 f9ce 	bl	80022b8 <commBufferReadByte>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d0fa      	beq.n	8001f16 <parseGeneratorCmd+0x3aa>
 8001f20:	4620      	mov	r0, r4
 8001f22:	e6b8      	b.n	8001c96 <parseGeneratorCmd+0x12a>
				error=genSetNumOfChannels(4);
 8001f24:	2004      	movs	r0, #4
 8001f26:	f001 fe61 	bl	8003bec <genSetNumOfChannels>
 8001f2a:	4604      	mov	r4, r0
	if(error>0){
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	f47f aeb1 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001f32:	e698      	b.n	8001c66 <parseGeneratorCmd+0xfa>
				genSetMode(GEN_PWM);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f001 fd4d 	bl	80039d4 <genSetMode>
 8001f3a:	e694      	b.n	8001c66 <parseGeneratorCmd+0xfa>
				error=genSetNumOfChannels(1);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f001 fe55 	bl	8003bec <genSetNumOfChannels>
 8001f42:	4604      	mov	r4, r0
	if(error>0){
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	f47f aea5 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001f4a:	e68c      	b.n	8001c66 <parseGeneratorCmd+0xfa>
	switch(cmdIn){
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <parseGeneratorCmd+0x414>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f43f ae89 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
 8001f54:	f502 221f 	add.w	r2, r2, #651264	; 0x9f000
 8001f58:	f202 7202 	addw	r2, r2, #1794	; 0x702
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f43f ae82 	beq.w	8001c66 <parseGeneratorCmd+0xfa>
 8001f62:	2064      	movs	r0, #100	; 0x64
 8001f64:	e60f      	b.n	8001b86 <parseGeneratorCmd+0x1a>
				error=genSetNumOfChannels(2);
 8001f66:	2002      	movs	r0, #2
 8001f68:	f001 fe40 	bl	8003bec <genSetNumOfChannels>
 8001f6c:	4604      	mov	r4, r0
	if(error>0){
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	f47f ae90 	bne.w	8001c94 <parseGeneratorCmd+0x128>
 8001f74:	e677      	b.n	8001c66 <parseGeneratorCmd+0xfa>
				genDataOKSendNext();
 8001f76:	f001 fddb 	bl	8003b30 <genDataOKSendNext>
		cmdIn=CMD_END;
 8001f7a:	4801      	ldr	r0, [pc, #4]	; (8001f80 <parseGeneratorCmd+0x414>)
 8001f7c:	e603      	b.n	8001b86 <parseGeneratorCmd+0x1a>
 8001f7e:	bf00      	nop
 8001f80:	5f444e45 	.word	0x5f444e45
 8001f84:	5f525245 	.word	0x5f525245

08001f88 <CmdParserTask>:
void CmdParserTask(void const *argument){
 8001f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8c:	b085      	sub	sp, #20
	uint16_t message = 0xFFFF;
 8001f8e:	f10d 0910 	add.w	r9, sp, #16
 8001f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001f96:	2200      	movs	r2, #0
 8001f98:	2102      	movs	r1, #2
 8001f9a:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8001f9c:	f829 3d0a 	strh.w	r3, [r9, #-10]!
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001fa0:	f006 ff96 	bl	8008ed0 <xQueueGenericCreate>
 8001fa4:	f8df a308 	ldr.w	sl, [pc, #776]	; 80022b0 <CmdParserTask+0x328>
				switch (BUILD_CMD(cmdIn)){
 8001fa8:	f8df b308 	ldr.w	fp, [pc, #776]	; 80022b4 <CmdParserTask+0x32c>
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001fac:	f8ca 0000 	str.w	r0, [sl]
 8001fb0:	e001      	b.n	8001fb6 <CmdParserTask+0x2e>
 8001fb2:	f8da 0000 	ldr.w	r0, [sl]
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	f007 fa73 	bl	80094a8 <xQueueGenericReceive>
		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8001fc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc8:	d1f3      	bne.n	8001fb2 <CmdParserTask+0x2a>
 8001fca:	46a0      	mov	r8, r4
 8001fcc:	462c      	mov	r4, r5
 8001fce:	4635      	mov	r5, r6
 8001fd0:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8001fd4:	e003      	b.n	8001fde <CmdParserTask+0x56>
 8001fd6:	46a0      	mov	r8, r4
 8001fd8:	462c      	mov	r4, r5
 8001fda:	4635      	mov	r5, r6
 8001fdc:	461e      	mov	r6, r3
				byteRead = commBufferReadByte(&chr);
 8001fde:	f10d 0005 	add.w	r0, sp, #5
 8001fe2:	f000 f969 	bl	80022b8 <commBufferReadByte>
			}while(byteRead==0 && chr != ':' && chr != ';');
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d1e3      	bne.n	8001fb2 <CmdParserTask+0x2a>
 8001fea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001fee:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 8001ff2:	2a01      	cmp	r2, #1
 8001ff4:	d8ef      	bhi.n	8001fd6 <CmdParserTask+0x4e>
				switch (BUILD_CMD(cmdIn)){
 8001ff6:	042b      	lsls	r3, r5, #16
 8001ff8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8001ffc:	ea43 0808 	orr.w	r8, r3, r8
 8002000:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
 8002004:	45d8      	cmp	r8, fp
 8002006:	4607      	mov	r7, r0
 8002008:	f000 80be 	beq.w	8002188 <CmdParserTask+0x200>
 800200c:	dc17      	bgt.n	800203e <CmdParserTask+0xb6>
 800200e:	4b9a      	ldr	r3, [pc, #616]	; (8002278 <CmdParserTask+0x2f0>)
 8002010:	4598      	cmp	r8, r3
 8002012:	f000 80f9 	beq.w	8002208 <CmdParserTask+0x280>
 8002016:	dc3e      	bgt.n	8002096 <CmdParserTask+0x10e>
 8002018:	4b98      	ldr	r3, [pc, #608]	; (800227c <CmdParserTask+0x2f4>)
 800201a:	4598      	cmp	r8, r3
 800201c:	f000 80f7 	beq.w	800220e <CmdParserTask+0x286>
 8002020:	4b97      	ldr	r3, [pc, #604]	; (8002280 <CmdParserTask+0x2f8>)
 8002022:	4598      	cmp	r8, r3
 8002024:	f040 80d0 	bne.w	80021c8 <CmdParserTask+0x240>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002028:	463b      	mov	r3, r7
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800202a:	4896      	ldr	r0, [pc, #600]	; (8002284 <CmdParserTask+0x2fc>)
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	a902      	add	r1, sp, #8
 8002032:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SYSTEM_VERSION;
 8002034:	f8ad 7008 	strh.w	r7, [sp, #8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002038:	f006 ff8e 	bl	8008f58 <xQueueGenericSend>
					break;
 800203c:	e7b9      	b.n	8001fb2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 800203e:	4b92      	ldr	r3, [pc, #584]	; (8002288 <CmdParserTask+0x300>)
 8002040:	4598      	cmp	r8, r3
 8002042:	f000 80a9 	beq.w	8002198 <CmdParserTask+0x210>
 8002046:	dc6c      	bgt.n	8002122 <CmdParserTask+0x19a>
 8002048:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 800204c:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 8002050:	4598      	cmp	r8, r3
 8002052:	f000 8091 	beq.w	8002178 <CmdParserTask+0x1f0>
 8002056:	f103 733f 	add.w	r3, r3, #50069504	; 0x2fc0000
 800205a:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 800205e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002062:	4598      	cmp	r8, r3
 8002064:	f040 80b0 	bne.w	80021c8 <CmdParserTask+0x240>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002068:	2105      	movs	r1, #5
 800206a:	a802      	add	r0, sp, #8
 800206c:	f000 f946 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 8002070:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002072:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 8002074:	f200 80ed 	bhi.w	8002252 <CmdParserTask+0x2ca>
 8002078:	4a82      	ldr	r2, [pc, #520]	; (8002284 <CmdParserTask+0x2fc>)
 800207a:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 80d2 	bne.w	8002226 <CmdParserTask+0x29e>
 * @retval None
 */
void printErrResponse(command cmd){
	uint8_t err[5];
	if(cmd == CMD_END){
		uint16_t passMsg = MSG_ACK;
 8002082:	2731      	movs	r7, #49	; 0x31
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002084:	2300      	movs	r3, #0
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	a902      	add	r1, sp, #8
		uint16_t passMsg = MSG_ACK;
 800208c:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002090:	f006 ff62 	bl	8008f58 <xQueueGenericSend>
 8002094:	e78d      	b.n	8001fb2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <CmdParserTask+0x304>)
 8002098:	4598      	cmp	r8, r3
 800209a:	f000 80aa 	beq.w	80021f2 <CmdParserTask+0x26a>
 800209e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80020a2:	f203 63f9 	addw	r3, r3, #1785	; 0x6f9
 80020a6:	4598      	cmp	r8, r3
 80020a8:	f040 808e 	bne.w	80021c8 <CmdParserTask+0x240>
					tempCmd = parseLogAnlysCmd();
 80020ac:	f7ff fbde 	bl	800186c <parseLogAnlysCmd>
	if(cmd == CMD_END){
 80020b0:	4b77      	ldr	r3, [pc, #476]	; (8002290 <CmdParserTask+0x308>)
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d065      	beq.n	8002182 <CmdParserTask+0x1fa>
	}else{
		err[0]=ERROR_PREFIX;
		err[1]=(cmd/100)%10+48;
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <CmdParserTask+0x30c>)
 80020b8:	4977      	ldr	r1, [pc, #476]	; (8002298 <CmdParserTask+0x310>)
		err[2]=(cmd/10)%10+48;
		err[3]=cmd%10+48;
		err[4]=0;
 80020ba:	f88d 700c 	strb.w	r7, [sp, #12]
		err[1]=(cmd/100)%10+48;
 80020be:	fba1 3100 	umull	r3, r1, r1, r0
		err[2]=(cmd/10)%10+48;
 80020c2:	fba2 c300 	umull	ip, r3, r2, r0
		err[1]=(cmd/100)%10+48;
 80020c6:	0949      	lsrs	r1, r1, #5
		err[2]=(cmd/10)%10+48;
 80020c8:	08db      	lsrs	r3, r3, #3
		err[1]=(cmd/100)%10+48;
 80020ca:	fba2 ec01 	umull	lr, ip, r2, r1
		err[2]=(cmd/10)%10+48;
 80020ce:	fba2 e203 	umull	lr, r2, r2, r3
		err[1]=(cmd/100)%10+48;
 80020d2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
		err[2]=(cmd/10)%10+48;
 80020d6:	08d2      	lsrs	r2, r2, #3
 80020d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
		err[1]=(cmd/100)%10+48;
 80020dc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
		err[3]=cmd%10+48;
 80020e0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
		err[1]=(cmd/100)%10+48;
 80020e4:	eba1 0c4c 	sub.w	ip, r1, ip, lsl #1
		err[2]=(cmd/10)%10+48;
 80020e8:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
		err[3]=cmd%10+48;
 80020ec:	eba0 024e 	sub.w	r2, r0, lr, lsl #1
		err[2]=(cmd/10)%10+48;
 80020f0:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80020f4:	f88d 000a 	strb.w	r0, [sp, #10]
		err[1]=(cmd/100)%10+48;
 80020f8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020fc:	4861      	ldr	r0, [pc, #388]	; (8002284 <CmdParserTask+0x2fc>)
		err[1]=(cmd/100)%10+48;
 80020fe:	f88d c009 	strb.w	ip, [sp, #9]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002102:	463b      	mov	r3, r7
		err[0]=ERROR_PREFIX;
 8002104:	f04f 0e45 	mov.w	lr, #69	; 0x45
		err[3]=cmd%10+48;
 8002108:	f102 0730 	add.w	r7, r2, #48	; 0x30
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800210c:	6800      	ldr	r0, [r0, #0]
		err[3]=cmd%10+48;
 800210e:	f88d 700b 	strb.w	r7, [sp, #11]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002112:	f04f 32ff 	mov.w	r2, #4294967295
 8002116:	a902      	add	r1, sp, #8
		err[0]=ERROR_PREFIX;
 8002118:	f88d e008 	strb.w	lr, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800211c:	f006 ff1c 	bl	8008f58 <xQueueGenericSend>
 8002120:	e747      	b.n	8001fb2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 8002122:	4b5e      	ldr	r3, [pc, #376]	; (800229c <CmdParserTask+0x314>)
 8002124:	4598      	cmp	r8, r3
 8002126:	d067      	beq.n	80021f8 <CmdParserTask+0x270>
 8002128:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800212c:	33fc      	adds	r3, #252	; 0xfc
 800212e:	4598      	cmp	r8, r3
 8002130:	d14a      	bne.n	80021c8 <CmdParserTask+0x240>
					tempCmd = parseCounterCmd();
 8002132:	f7fe fd61 	bl	8000bf8 <parseCounterCmd>
	if(cmd == CMD_END){
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <CmdParserTask+0x308>)
 8002138:	4298      	cmp	r0, r3
 800213a:	d022      	beq.n	8002182 <CmdParserTask+0x1fa>
		err[1]=(cmd/100)%10+48;
 800213c:	4a56      	ldr	r2, [pc, #344]	; (8002298 <CmdParserTask+0x310>)
 800213e:	4b55      	ldr	r3, [pc, #340]	; (8002294 <CmdParserTask+0x30c>)
		err[4]=0;
 8002140:	f88d 700c 	strb.w	r7, [sp, #12]
		err[1]=(cmd/100)%10+48;
 8002144:	fba2 1200 	umull	r1, r2, r2, r0
 8002148:	0952      	lsrs	r2, r2, #5
		err[2]=(cmd/10)%10+48;
 800214a:	fba3 c100 	umull	ip, r1, r3, r0
 800214e:	08c9      	lsrs	r1, r1, #3
		err[1]=(cmd/100)%10+48;
 8002150:	fba3 ec02 	umull	lr, ip, r3, r2
 8002154:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
		err[2]=(cmd/10)%10+48;
 8002158:	fba3 e301 	umull	lr, r3, r3, r1
 800215c:	08db      	lsrs	r3, r3, #3
		err[1]=(cmd/100)%10+48;
 800215e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
		err[2]=(cmd/10)%10+48;
 8002162:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		err[1]=(cmd/100)%10+48;
 8002166:	eba2 0c4c 	sub.w	ip, r2, ip, lsl #1
		err[3]=cmd%10+48;
 800216a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800216e:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
		err[2]=(cmd/10)%10+48;
 8002172:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 8002176:	e7bb      	b.n	80020f0 <CmdParserTask+0x168>
					tempCmd = parseSyncPwmCmd();
 8002178:	f7ff fa84 	bl	8001684 <parseSyncPwmCmd>
	if(cmd == CMD_END){
 800217c:	4b44      	ldr	r3, [pc, #272]	; (8002290 <CmdParserTask+0x308>)
 800217e:	4298      	cmp	r0, r3
 8002180:	d1dc      	bne.n	800213c <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002182:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 8002184:	2731      	movs	r7, #49	; 0x31
 8002186:	e750      	b.n	800202a <CmdParserTask+0xa2>
					tempCmd = parseScopeCmd();
 8002188:	f7fe ffa2 	bl	80010d0 <parseScopeCmd>
	if(cmd == CMD_END){
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <CmdParserTask+0x308>)
 800218e:	4298      	cmp	r0, r3
 8002190:	d1d4      	bne.n	800213c <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002192:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 8002194:	2731      	movs	r7, #49	; 0x31
 8002196:	e748      	b.n	800202a <CmdParserTask+0xa2>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002198:	2105      	movs	r1, #5
 800219a:	a802      	add	r0, sp, #8
 800219c:	f000 f8ae 	bl	80022fc <commBufferReadNBytes>
	if(bytesRead >= 4){
 80021a0:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80021a2:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 80021a4:	d843      	bhi.n	800222e <CmdParserTask+0x2a6>
 80021a6:	4a37      	ldr	r2, [pc, #220]	; (8002284 <CmdParserTask+0x2fc>)
 80021a8:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f43f af69 	beq.w	8002082 <CmdParserTask+0xfa>
		err[4]=0;
 80021b0:	2200      	movs	r2, #0
		err[0]=ERROR_PREFIX;
 80021b2:	4f3b      	ldr	r7, [pc, #236]	; (80022a0 <CmdParserTask+0x318>)
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021b4:	4613      	mov	r3, r2
		err[4]=0;
 80021b6:	f88d 200c 	strb.w	r2, [sp, #12]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021ba:	a902      	add	r1, sp, #8
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
		err[0]=ERROR_PREFIX;
 80021c0:	9702      	str	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021c2:	f006 fec9 	bl	8008f58 <xQueueGenericSend>
 80021c6:	e6f4      	b.n	8001fb2 <CmdParserTask+0x2a>
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 80021c8:	482e      	ldr	r0, [pc, #184]	; (8002284 <CmdParserTask+0x2fc>)
 80021ca:	4936      	ldr	r1, [pc, #216]	; (80022a4 <CmdParserTask+0x31c>)
 80021cc:	6800      	ldr	r0, [r0, #0]
 80021ce:	2300      	movs	r3, #0
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	f006 fec0 	bl	8008f58 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80021d8:	e004      	b.n	80021e4 <CmdParserTask+0x25c>
 80021da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80021de:	2b3b      	cmp	r3, #59	; 0x3b
 80021e0:	f43f aee7 	beq.w	8001fb2 <CmdParserTask+0x2a>
 80021e4:	f10d 0005 	add.w	r0, sp, #5
 80021e8:	f000 f866 	bl	80022b8 <commBufferReadByte>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d0f4      	beq.n	80021da <CmdParserTask+0x252>
 80021f0:	e6df      	b.n	8001fb2 <CmdParserTask+0x2a>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021f2:	463b      	mov	r3, r7
					passMsg = MSG_SHIELD_AVAIL;
 80021f4:	2704      	movs	r7, #4
 80021f6:	e718      	b.n	800202a <CmdParserTask+0xa2>
					tempCmd = parseGeneratorCmd();
 80021f8:	f7ff fcb8 	bl	8001b6c <parseGeneratorCmd>
	if(cmd == CMD_END){
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <CmdParserTask+0x308>)
 80021fe:	4298      	cmp	r0, r3
 8002200:	d19c      	bne.n	800213c <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002202:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 8002204:	2731      	movs	r7, #49	; 0x31
 8002206:	e710      	b.n	800202a <CmdParserTask+0xa2>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002208:	463b      	mov	r3, r7
					passMsg = MSG_SYSTEM_VERSION;
 800220a:	2701      	movs	r7, #1
 800220c:	e70d      	b.n	800202a <CmdParserTask+0xa2>
					resetDevice();
 800220e:	f009 fa91 	bl	800b734 <resetDevice>
					break;
 8002212:	e6ce      	b.n	8001fb2 <CmdParserTask+0x2a>
	switch(cmdIn){
 8002214:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8002218:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 800221c:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002220:	4293      	cmp	r3, r2
 8002222:	f43f af2e 	beq.w	8002082 <CmdParserTask+0xfa>
		err[4]=0;
 8002226:	2200      	movs	r2, #0
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002228:	4613      	mov	r3, r2
		err[0]=ERROR_PREFIX;
 800222a:	4f1f      	ldr	r7, [pc, #124]	; (80022a8 <CmdParserTask+0x320>)
 800222c:	e7c3      	b.n	80021b6 <CmdParserTask+0x22e>
 800222e:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <CmdParserTask+0x324>)
 8002232:	4914      	ldr	r1, [pc, #80]	; (8002284 <CmdParserTask+0x2fc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	6808      	ldr	r0, [r1, #0]
 8002238:	d114      	bne.n	8002264 <CmdParserTask+0x2dc>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800223a:	463b      	mov	r3, r7
		passMsg = MSG_SYSTEM_CONFIG;
 800223c:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	a902      	add	r1, sp, #8
		passMsg = MSG_SYSTEM_CONFIG;
 8002244:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002248:	f006 fe86 	bl	8008f58 <xQueueGenericSend>
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <CmdParserTask+0x2fc>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	e717      	b.n	8002082 <CmdParserTask+0xfa>
 8002252:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <CmdParserTask+0x324>)
 8002256:	490b      	ldr	r1, [pc, #44]	; (8002284 <CmdParserTask+0x2fc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	6808      	ldr	r0, [r1, #0]
 800225c:	d1da      	bne.n	8002214 <CmdParserTask+0x28c>
		passMsg = MSG_SYSTEM_CONFIG;
 800225e:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002260:	2300      	movs	r3, #0
 8002262:	e7ec      	b.n	800223e <CmdParserTask+0x2b6>
	switch(cmdIn){
 8002264:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8002268:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 800226c:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002270:	4293      	cmp	r3, r2
 8002272:	f43f af06 	beq.w	8002082 <CmdParserTask+0xfa>
 8002276:	e79b      	b.n	80021b0 <CmdParserTask+0x228>
 8002278:	3f524556 	.word	0x3f524556
 800227c:	21534552 	.word	0x21534552
 8002280:	3f4e4449 	.word	0x3f4e4449
 8002284:	200047cc 	.word	0x200047cc
 8002288:	54535953 	.word	0x54535953
 800228c:	3f5f4853 	.word	0x3f5f4853
 8002290:	5f444e45 	.word	0x5f444e45
 8002294:	cccccccd 	.word	0xcccccccd
 8002298:	51eb851f 	.word	0x51eb851f
 800229c:	5f4e4547 	.word	0x5f4e4547
 80022a0:	31303045 	.word	0x31303045
 80022a4:	08011520 	.word	0x08011520
 80022a8:	32303045 	.word	0x32303045
 80022ac:	3f474643 	.word	0x3f474643
 80022b0:	200047c8 	.word	0x200047c8
 80022b4:	5043534f 	.word	0x5043534f

080022b8 <commBufferReadByte>:
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
	if(comm.state == BUFF_EMPTY){
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <commBufferReadByte+0x40>)
 80022ba:	7a9a      	ldrb	r2, [r3, #10]
 80022bc:	b172      	cbz	r2, 80022dc <commBufferReadByte+0x24>
uint8_t commBufferReadByte(uint8_t *ret){
 80022be:	b430      	push	{r4, r5}
		return 1;
	}else{
		*ret = *(comm.memory + comm.readPointer);
 80022c0:	891c      	ldrh	r4, [r3, #8]
 80022c2:	681d      	ldr	r5, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022c4:	1c61      	adds	r1, r4, #1
 80022c6:	b2c9      	uxtb	r1, r1
		*ret = *(comm.memory + comm.readPointer);
 80022c8:	5d2c      	ldrb	r4, [r5, r4]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022ca:	8119      	strh	r1, [r3, #8]
		if(comm.state == BUFF_FULL){
 80022cc:	2a02      	cmp	r2, #2
		*ret = *(comm.memory + comm.readPointer);
 80022ce:	7004      	strb	r4, [r0, #0]
		if(comm.state == BUFF_FULL){
 80022d0:	d006      	beq.n	80022e0 <commBufferReadByte+0x28>
			comm.state = BUFF_DATA;
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d009      	beq.n	80022ea <commBufferReadByte+0x32>
			comm.state = BUFF_EMPTY;
		}
		return 0;
 80022d6:	2000      	movs	r0, #0
	}
}
 80022d8:	bc30      	pop	{r4, r5}
 80022da:	4770      	bx	lr
		return 1;
 80022dc:	2001      	movs	r0, #1
}
 80022de:	4770      	bx	lr
			comm.state = BUFF_DATA;
 80022e0:	2201      	movs	r2, #1
		return 0;
 80022e2:	2000      	movs	r0, #0
			comm.state = BUFF_DATA;
 80022e4:	729a      	strb	r2, [r3, #10]
}
 80022e6:	bc30      	pop	{r4, r5}
 80022e8:	4770      	bx	lr
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022ea:	88da      	ldrh	r2, [r3, #6]
 80022ec:	428a      	cmp	r2, r1
			comm.state = BUFF_EMPTY;
 80022ee:	f04f 0000 	mov.w	r0, #0
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022f2:	d1f1      	bne.n	80022d8 <commBufferReadByte+0x20>
			comm.state = BUFF_EMPTY;
 80022f4:	7298      	strb	r0, [r3, #10]
 80022f6:	e7ef      	b.n	80022d8 <commBufferReadByte+0x20>
 80022f8:	20000204 	.word	0x20000204

080022fc <commBufferReadNBytes>:
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
	for(uint16_t i = 0; i < count; i++){
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d03a      	beq.n	8002376 <commBufferReadNBytes+0x7a>
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(comm.state == BUFF_EMPTY){
 8002302:	4e21      	ldr	r6, [pc, #132]	; (8002388 <commBufferReadNBytes+0x8c>)
 8002304:	7ab2      	ldrb	r2, [r6, #10]
 8002306:	b1e2      	cbz	r2, 8002342 <commBufferReadNBytes+0x46>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002308:	f04f 0c00 	mov.w	ip, #0
		*ret = *(comm.memory + comm.readPointer);
 800230c:	6837      	ldr	r7, [r6, #0]
 800230e:	8933      	ldrh	r3, [r6, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002310:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8002314:	1e44      	subs	r4, r0, #1
	for(uint16_t i = 0; i < count; i++){
 8002316:	4660      	mov	r0, ip
		*ret = *(comm.memory + comm.readPointer);
 8002318:	5cfd      	ldrb	r5, [r7, r3]
 800231a:	f804 5f01 	strb.w	r5, [r4, #1]!
 800231e:	3001      	adds	r0, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002320:	3301      	adds	r3, #1
		if(comm.state == BUFF_FULL){
 8002322:	2a02      	cmp	r2, #2
 8002324:	b280      	uxth	r0, r0
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002326:	b2db      	uxtb	r3, r3
		if(comm.state == BUFF_FULL){
 8002328:	d00d      	beq.n	8002346 <commBufferReadNBytes+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800232a:	2a01      	cmp	r2, #1
 800232c:	d011      	beq.n	8002352 <commBufferReadNBytes+0x56>
	for(uint16_t i = 0; i < count; i++){
 800232e:	4281      	cmp	r1, r0
 8002330:	d913      	bls.n	800235a <commBufferReadNBytes+0x5e>
	if(comm.state == BUFF_EMPTY){
 8002332:	2a00      	cmp	r2, #0
 8002334:	d1f0      	bne.n	8002318 <commBufferReadNBytes+0x1c>
 8002336:	8133      	strh	r3, [r6, #8]
 8002338:	f1bc 0f00 	cmp.w	ip, #0
 800233c:	d11d      	bne.n	800237a <commBufferReadNBytes+0x7e>
 800233e:	b2c0      	uxtb	r0, r0
		if(commBufferReadByte(mem++) == 1){
			return i;
		}
	}
	return count;
}
 8002340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(comm.state == BUFF_EMPTY){
 8002342:	4610      	mov	r0, r2
}
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint16_t i = 0; i < count; i++){
 8002346:	4281      	cmp	r1, r0
 8002348:	d919      	bls.n	800237e <commBufferReadNBytes+0x82>
 800234a:	f04f 0c01 	mov.w	ip, #1
	if(comm.state == BUFF_EMPTY){
 800234e:	4662      	mov	r2, ip
 8002350:	e7e2      	b.n	8002318 <commBufferReadNBytes+0x1c>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002352:	4573      	cmp	r3, lr
 8002354:	d008      	beq.n	8002368 <commBufferReadNBytes+0x6c>
	for(uint16_t i = 0; i < count; i++){
 8002356:	4281      	cmp	r1, r0
 8002358:	d8de      	bhi.n	8002318 <commBufferReadNBytes+0x1c>
 800235a:	8133      	strh	r3, [r6, #8]
 800235c:	f1bc 0f00 	cmp.w	ip, #0
 8002360:	d000      	beq.n	8002364 <commBufferReadNBytes+0x68>
 8002362:	72b2      	strb	r2, [r6, #10]
	return count;
 8002364:	b2c8      	uxtb	r0, r1
}
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}
			comm.state = BUFF_EMPTY;
 8002368:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < count; i++){
 800236a:	4281      	cmp	r1, r0
 800236c:	8133      	strh	r3, [r6, #8]
			comm.state = BUFF_EMPTY;
 800236e:	72b2      	strb	r2, [r6, #10]
	for(uint16_t i = 0; i < count; i++){
 8002370:	d9f8      	bls.n	8002364 <commBufferReadNBytes+0x68>
 8002372:	b2c0      	uxtb	r0, r0
 8002374:	e7e4      	b.n	8002340 <commBufferReadNBytes+0x44>
	return count;
 8002376:	b2c8      	uxtb	r0, r1
}
 8002378:	4770      	bx	lr
 800237a:	72b2      	strb	r2, [r6, #10]
 800237c:	e7df      	b.n	800233e <commBufferReadNBytes+0x42>
 800237e:	2201      	movs	r2, #1
 8002380:	8133      	strh	r3, [r6, #8]
 8002382:	72b2      	strb	r2, [r6, #10]
 8002384:	e7ee      	b.n	8002364 <commBufferReadNBytes+0x68>
 8002386:	bf00      	nop
 8002388:	20000204 	.word	0x20000204

0800238c <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 800238c:	b530      	push	{r4, r5, lr}
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <commInputByte+0x9c>)
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
	if (chr==';'){
 8002390:	283b      	cmp	r0, #59	; 0x3b
uint8_t commInputByte(uint8_t chr){
 8002392:	b083      	sub	sp, #12
 8002394:	7a93      	ldrb	r3, [r2, #10]
	if (chr==';'){
 8002396:	d012      	beq.n	80023be <commInputByte+0x32>
	if(comm.state == BUFF_FULL){
 8002398:	2b02      	cmp	r3, #2
 800239a:	d00c      	beq.n	80023b6 <commInputByte+0x2a>
		*(comm.memory + comm.writePointer) = chr;
 800239c:	88d4      	ldrh	r4, [r2, #6]
 800239e:	6815      	ldr	r5, [r2, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80023a0:	1c61      	adds	r1, r4, #1
 80023a2:	b2c9      	uxtb	r1, r1
		*(comm.memory + comm.writePointer) = chr;
 80023a4:	5528      	strb	r0, [r5, r4]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80023a6:	80d1      	strh	r1, [r2, #6]
		if(comm.state == BUFF_EMPTY){
 80023a8:	b31b      	cbz	r3, 80023f2 <commInputByte+0x66>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d027      	beq.n	80023fe <commInputByte+0x72>
		return 0;
 80023ae:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
		return result;
	}else{
		return commBufferStoreByte(chr);
	}
}
 80023b0:	4620      	mov	r0, r4
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}
		return 1;
 80023b6:	2401      	movs	r4, #1
}
 80023b8:	4620      	mov	r0, r4
 80023ba:	b003      	add	sp, #12
 80023bc:	bd30      	pop	{r4, r5, pc}
	if(comm.state == BUFF_FULL){
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d028      	beq.n	8002414 <commInputByte+0x88>
		*(comm.memory + comm.writePointer) = chr;
 80023c2:	88d4      	ldrh	r4, [r2, #6]
 80023c4:	6815      	ldr	r5, [r2, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80023c6:	1c61      	adds	r1, r4, #1
 80023c8:	b2c9      	uxtb	r1, r1
		*(comm.memory + comm.writePointer) = chr;
 80023ca:	5528      	strb	r0, [r5, r4]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80023cc:	80d1      	strh	r1, [r2, #6]
		if(comm.state == BUFF_EMPTY){
 80023ce:	b1eb      	cbz	r3, 800240c <commInputByte+0x80>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d021      	beq.n	8002418 <commInputByte+0x8c>
		return 0;
 80023d4:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <commInputByte+0xa0>)
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 80023d8:	232e      	movs	r3, #46	; 0x2e
 80023da:	f8ad 3002 	strh.w	r3, [sp, #2]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80023de:	6810      	ldr	r0, [r2, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	aa01      	add	r2, sp, #4
 80023e4:	f10d 0102 	add.w	r1, sp, #2
 80023e8:	f006 ffc8 	bl	800937c <xQueueGenericSendFromISR>
}
 80023ec:	4620      	mov	r0, r4
 80023ee:	b003      	add	sp, #12
 80023f0:	bd30      	pop	{r4, r5, pc}
		return 0;
 80023f2:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 80023f4:	2101      	movs	r1, #1
}
 80023f6:	4620      	mov	r0, r4
			comm.state = BUFF_DATA;
 80023f8:	7291      	strb	r1, [r2, #10]
}
 80023fa:	b003      	add	sp, #12
 80023fc:	bd30      	pop	{r4, r5, pc}
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023fe:	8913      	ldrh	r3, [r2, #8]
 8002400:	428b      	cmp	r3, r1
 8002402:	d1d4      	bne.n	80023ae <commInputByte+0x22>
			comm.state = BUFF_FULL;
 8002404:	2302      	movs	r3, #2
 8002406:	7293      	strb	r3, [r2, #10]
		return 0;
 8002408:	2400      	movs	r4, #0
 800240a:	e7d5      	b.n	80023b8 <commInputByte+0x2c>
			comm.state = BUFF_DATA;
 800240c:	2101      	movs	r1, #1
		return 0;
 800240e:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 8002410:	7291      	strb	r1, [r2, #10]
 8002412:	e7e0      	b.n	80023d6 <commInputByte+0x4a>
		return 1;
 8002414:	2401      	movs	r4, #1
 8002416:	e7de      	b.n	80023d6 <commInputByte+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002418:	8913      	ldrh	r3, [r2, #8]
 800241a:	428b      	cmp	r3, r1
 800241c:	d1da      	bne.n	80023d4 <commInputByte+0x48>
			comm.state = BUFF_FULL;
 800241e:	2302      	movs	r3, #2
 8002420:	7293      	strb	r3, [r2, #10]
		return 0;
 8002422:	2400      	movs	r4, #0
 8002424:	e7d7      	b.n	80023d6 <commInputByte+0x4a>
 8002426:	bf00      	nop
 8002428:	20000204 	.word	0x20000204
 800242c:	200047c8 	.word	0x200047c8

08002430 <getBytesAvailable>:

uint16_t getBytesAvailable(){
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <getBytesAvailable+0x28>)
 8002432:	7a98      	ldrb	r0, [r3, #10]
 8002434:	2802      	cmp	r0, #2
 8002436:	d00c      	beq.n	8002452 <getBytesAvailable+0x22>
		return COMM_BUFFER_SIZE;
	}else if(comm.state==BUFF_EMPTY){
 8002438:	b168      	cbz	r0, 8002456 <getBytesAvailable+0x26>
		return 0;
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 800243a:	88d8      	ldrh	r0, [r3, #6]
 800243c:	891b      	ldrh	r3, [r3, #8]
 800243e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002442:	1ac0      	subs	r0, r0, r3
 8002444:	4243      	negs	r3, r0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	b2c0      	uxtb	r0, r0
 800244a:	bf58      	it	pl
 800244c:	4258      	negpl	r0, r3
 800244e:	b280      	uxth	r0, r0
		return result;
 8002450:	4770      	bx	lr
		return COMM_BUFFER_SIZE;
 8002452:	f44f 7080 	mov.w	r0, #256	; 0x100
	}
}
 8002456:	4770      	bx	lr
 8002458:	20000204 	.word	0x20000204

0800245c <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 800245c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	commsSendString("OSCP");
 800245e:	4821      	ldr	r0, [pc, #132]	; (80024e4 <sendScopeConf+0x88>)
			break;
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
			break;
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 8002460:	4e21      	ldr	r6, [pc, #132]	; (80024e8 <sendScopeConf+0x8c>)
			break;
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 8002462:	4d22      	ldr	r5, [pc, #136]	; (80024ec <sendScopeConf+0x90>)
			commsSendString(SCOPE_CH2_PIN_STR);
 8002464:	4c22      	ldr	r4, [pc, #136]	; (80024f0 <sendScopeConf+0x94>)
void sendScopeConf(){
 8002466:	b082      	sub	sp, #8
	commsSendString("OSCP");
 8002468:	f009 f992 	bl	800b790 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 800246c:	4821      	ldr	r0, [pc, #132]	; (80024f4 <sendScopeConf+0x98>)
 800246e:	f009 f96b 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 8002472:	f247 5030 	movw	r0, #30000	; 0x7530
 8002476:	f009 f967 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 800247a:	2004      	movs	r0, #4
 800247c:	f009 f964 	bl	800b748 <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002480:	2300      	movs	r3, #0
 8002482:	f88d 3007 	strb.w	r3, [sp, #7]
 8002486:	e00e      	b.n	80024a6 <sendScopeConf+0x4a>
		switch(i){
 8002488:	2b03      	cmp	r3, #3
			commsSendString(SCOPE_CH1_PIN_STR);
 800248a:	481b      	ldr	r0, [pc, #108]	; (80024f8 <sendScopeConf+0x9c>)
		switch(i){
 800248c:	d015      	beq.n	80024ba <sendScopeConf+0x5e>
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00f      	beq.n	80024b2 <sendScopeConf+0x56>
			commsSendString(SCOPE_CH4_PIN_STR);
 8002492:	f009 f97d 	bl	800b790 <commsSendString>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002496:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800249a:	3301      	adds	r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80024a4:	d80b      	bhi.n	80024be <sendScopeConf+0x62>
		switch(i){
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d1ee      	bne.n	8002488 <sendScopeConf+0x2c>
			commsSendString(SCOPE_CH3_PIN_STR);
 80024aa:	4630      	mov	r0, r6
 80024ac:	f009 f970 	bl	800b790 <commsSendString>
			break;
 80024b0:	e7f1      	b.n	8002496 <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH2_PIN_STR);
 80024b2:	4620      	mov	r0, r4
 80024b4:	f009 f96c 	bl	800b790 <commsSendString>
			break;
 80024b8:	e7ed      	b.n	8002496 <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH4_PIN_STR);
 80024ba:	4628      	mov	r0, r5
 80024bc:	e7e9      	b.n	8002492 <sendScopeConf+0x36>
			break;
		}
	}
	commsSendUint32(SCOPE_VREF);
 80024be:	f640 40e4 	movw	r0, #3300	; 0xce4
 80024c2:	f009 f941 	bl	800b748 <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <sendScopeConf+0xa0>)
 80024c8:	8818      	ldrh	r0, [r3, #0]
 80024ca:	f009 f93d 	bl	800b748 <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 80024ce:	f10d 0007 	add.w	r0, sp, #7
 80024d2:	f002 fc43 	bl	8004d5c <scopeGetRanges>
 80024d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80024da:	f009 f94f 	bl	800b77c <commsSendBuff>
}
 80024de:	b002      	add	sp, #8
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
 80024e2:	bf00      	nop
 80024e4:	080116f4 	.word	0x080116f4
 80024e8:	0801170c 	.word	0x0801170c
 80024ec:	08011714 	.word	0x08011714
 80024f0:	08011704 	.word	0x08011704
 80024f4:	003d0900 	.word	0x003d0900
 80024f8:	080116fc 	.word	0x080116fc
 80024fc:	1ffff7ba 	.word	0x1ffff7ba

08002500 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8002500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	commsSendString("INP_");
 8002504:	482b      	ldr	r0, [pc, #172]	; (80025b4 <sendScopeInputs+0xb4>)
 8002506:	4f2c      	ldr	r7, [pc, #176]	; (80025b8 <sendScopeInputs+0xb8>)
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
		commsSendString("/");
 8002508:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80025c4 <sendScopeInputs+0xc4>
				break;
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
				break;
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 800250c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80025cc <sendScopeInputs+0xcc>
				break;
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002510:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80025d0 <sendScopeInputs+0xd0>
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8002514:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80025d4 <sendScopeInputs+0xd4>
	commsSendString("INP_");
 8002518:	f009 f93a 	bl	800b790 <commsSendString>
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 800251c:	2002      	movs	r0, #2
 800251e:	f009 f911 	bl	800b744 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 8002522:	2004      	movs	r0, #4
 8002524:	f009 f90e 	bl	800b744 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 8002528:	2002      	movs	r0, #2
 800252a:	f009 f90b 	bl	800b744 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 800252e:	2001      	movs	r0, #1
 8002530:	f009 f908 	bl	800b744 <commsSend>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002534:	2500      	movs	r5, #0
		commsSendString("/");
 8002536:	4658      	mov	r0, fp
 8002538:	f009 f92a 	bl	800b790 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 800253c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002540:	b316      	cbz	r6, 8002588 <sendScopeInputs+0x88>
 8002542:	2400      	movs	r4, #0
 8002544:	1c63      	adds	r3, r4, #1
			switch(i){
 8002546:	2d02      	cmp	r5, #2
 8002548:	4622      	mov	r2, r4
 800254a:	b2dc      	uxtb	r4, r3
 800254c:	d016      	beq.n	800257c <sendScopeInputs+0x7c>
 800254e:	2d03      	cmp	r5, #3
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <sendScopeInputs+0xbc>)
			switch(i){
 8002552:	d025      	beq.n	80025a0 <sendScopeInputs+0xa0>
 8002554:	2d01      	cmp	r5, #1
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002556:	bf14      	ite	ne
 8002558:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 800255c:	f858 0022 	ldreq.w	r0, [r8, r2, lsl #2]
 8002560:	f009 f916 	bl	800b790 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002564:	42a6      	cmp	r6, r4
 8002566:	d90f      	bls.n	8002588 <sendScopeInputs+0x88>
			if(j>0){
 8002568:	2c00      	cmp	r4, #0
 800256a:	d0eb      	beq.n	8002544 <sendScopeInputs+0x44>
				commsSendString(":");
 800256c:	4814      	ldr	r0, [pc, #80]	; (80025c0 <sendScopeInputs+0xc0>)
 800256e:	f009 f90f 	bl	800b790 <commsSendString>
 8002572:	1c63      	adds	r3, r4, #1
			switch(i){
 8002574:	2d02      	cmp	r5, #2
 8002576:	4622      	mov	r2, r4
 8002578:	b2dc      	uxtb	r4, r3
 800257a:	d1e8      	bne.n	800254e <sendScopeInputs+0x4e>
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 800257c:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 8002580:	f009 f906 	bl	800b790 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002584:	42a6      	cmp	r6, r4
 8002586:	d8ef      	bhi.n	8002568 <sendScopeInputs+0x68>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002588:	3501      	adds	r5, #1
 800258a:	b2ed      	uxtb	r5, r5
 800258c:	2d04      	cmp	r5, #4
 800258e:	d1d2      	bne.n	8002536 <sendScopeInputs+0x36>
				break;
			}
		}
	}
	commsSendString("/");
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <sendScopeInputs+0xc4>)
 8002592:	f009 f8fd 	bl	800b790 <commsSendString>
	commsSendString(";");
 8002596:	480c      	ldr	r0, [pc, #48]	; (80025c8 <sendScopeInputs+0xc8>)
}
 8002598:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	commsSendString(";");
 800259c:	f009 b8f8 	b.w	800b790 <commsSendString>
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 80025a0:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 80025a4:	f009 f8f4 	bl	800b790 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d9f1      	bls.n	8002590 <sendScopeInputs+0x90>
			if(j>0){
 80025ac:	2c00      	cmp	r4, #0
 80025ae:	d0c9      	beq.n	8002544 <sendScopeInputs+0x44>
 80025b0:	e7dc      	b.n	800256c <sendScopeInputs+0x6c>
 80025b2:	bf00      	nop
 80025b4:	0801171c 	.word	0x0801171c
 80025b8:	08011640 	.word	0x08011640
 80025bc:	08011528 	.word	0x08011528
 80025c0:	08011728 	.word	0x08011728
 80025c4:	08011724 	.word	0x08011724
 80025c8:	0801172c 	.word	0x0801172c
 80025cc:	08011574 	.word	0x08011574
 80025d0:	08011584 	.word	0x08011584
 80025d4:	0801154c 	.word	0x0801154c

080025d8 <sendLogAnlysConf>:
}
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 80025d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	commsSendString("LOGA");
 80025dc:	4823      	ldr	r0, [pc, #140]	; (800266c <sendLogAnlysConf+0x94>)
			break;
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
			break;
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 80025de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002698 <sendLogAnlysConf+0xc0>
			commsSendString(LOG_ANLYS_PIN_CH6);
 80025e2:	4f23      	ldr	r7, [pc, #140]	; (8002670 <sendLogAnlysConf+0x98>)
			commsSendString(LOG_ANLYS_PIN_CH5);
 80025e4:	4e23      	ldr	r6, [pc, #140]	; (8002674 <sendLogAnlysConf+0x9c>)
	commsSendString("LOGA");
 80025e6:	f009 f8d3 	bl	800b790 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 80025ea:	4823      	ldr	r0, [pc, #140]	; (8002678 <sendLogAnlysConf+0xa0>)
 80025ec:	f009 f8ac 	bl	800b748 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 80025f0:	4822      	ldr	r0, [pc, #136]	; (800267c <sendLogAnlysConf+0xa4>)
 80025f2:	f009 f8a9 	bl	800b748 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 80025f6:	4822      	ldr	r0, [pc, #136]	; (8002680 <sendLogAnlysConf+0xa8>)
 80025f8:	f009 f8a6 	bl	800b748 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 80025fc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002600:	f009 f8a2 	bl	800b748 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 8002604:	2008      	movs	r0, #8
 8002606:	f009 f89f 	bl	800b748 <commsSendUint32>
 800260a:	2400      	movs	r4, #0
 800260c:	b2e5      	uxtb	r5, r4
		switch(i){
 800260e:	1e6b      	subs	r3, r5, #1
 8002610:	2b06      	cmp	r3, #6
 8002612:	d805      	bhi.n	8002620 <sendLogAnlysConf+0x48>
 8002614:	e8df f003 	tbb	[pc, r3]
 8002618:	13171b1f 	.word	0x13171b1f
 800261c:	0b0f      	.short	0x0b0f
 800261e:	23          	.byte	0x23
 800261f:	00          	.byte	0x00
			commsSendString(LOG_ANLYS_PIN_CH1);
 8002620:	4818      	ldr	r0, [pc, #96]	; (8002684 <sendLogAnlysConf+0xac>)
 8002622:	f009 f8b5 	bl	800b790 <commsSendString>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8002626:	2d07      	cmp	r5, #7
 8002628:	d01e      	beq.n	8002668 <sendLogAnlysConf+0x90>
 800262a:	3401      	adds	r4, #1
 800262c:	e7ee      	b.n	800260c <sendLogAnlysConf+0x34>
			commsSendString(LOG_ANLYS_PIN_CH7);
 800262e:	4640      	mov	r0, r8
 8002630:	f009 f8ae 	bl	800b790 <commsSendString>
			break;
 8002634:	e7f9      	b.n	800262a <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH6);
 8002636:	4638      	mov	r0, r7
 8002638:	f009 f8aa 	bl	800b790 <commsSendString>
			break;
 800263c:	e7f5      	b.n	800262a <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH5);
 800263e:	4630      	mov	r0, r6
 8002640:	f009 f8a6 	bl	800b790 <commsSendString>
			break;
 8002644:	e7f1      	b.n	800262a <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH4);
 8002646:	4810      	ldr	r0, [pc, #64]	; (8002688 <sendLogAnlysConf+0xb0>)
 8002648:	f009 f8a2 	bl	800b790 <commsSendString>
			break;
 800264c:	e7ed      	b.n	800262a <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH3);
 800264e:	480f      	ldr	r0, [pc, #60]	; (800268c <sendLogAnlysConf+0xb4>)
 8002650:	f009 f89e 	bl	800b790 <commsSendString>
			break;
 8002654:	e7e9      	b.n	800262a <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH2);
 8002656:	480e      	ldr	r0, [pc, #56]	; (8002690 <sendLogAnlysConf+0xb8>)
 8002658:	f009 f89a 	bl	800b790 <commsSendString>
			break;
 800265c:	e7e5      	b.n	800262a <sendLogAnlysConf+0x52>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <sendLogAnlysConf+0xbc>)
			break;
		}
	}	
}
 8002660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			commsSendString(LOG_ANLYS_PIN_CH8);
 8002664:	f009 b894 	b.w	800b790 <commsSendString>
}
 8002668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800266c:	080116ac 	.word	0x080116ac
 8002670:	080116dc 	.word	0x080116dc
 8002674:	080116d4 	.word	0x080116d4
 8002678:	044aa200 	.word	0x044aa200
 800267c:	08954400 	.word	0x08954400
 8002680:	02255100 	.word	0x02255100
 8002684:	080116b4 	.word	0x080116b4
 8002688:	080116cc 	.word	0x080116cc
 800268c:	080116c4 	.word	0x080116c4
 8002690:	080116bc 	.word	0x080116bc
 8002694:	080116ec 	.word	0x080116ec
 8002698:	080116e4 	.word	0x080116e4

0800269c <CommTask>:
void CommTask(void const *argument){
 800269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a0:	b08f      	sub	sp, #60	; 0x3c
	uint16_t message = 0xFFFF;
 80026a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80026a6:	2200      	movs	r2, #0
 80026a8:	2102      	movs	r1, #2
 80026aa:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 80026ac:	f8ad 3018 	strh.w	r3, [sp, #24]
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80026b0:	f006 fc0e 	bl	8008ed0 <xQueueGenericCreate>
 80026b4:	4fc9      	ldr	r7, [pc, #804]	; (80029dc <CommTask+0x340>)
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80026b6:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002a08 <CommTask+0x36c>
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80026ba:	6038      	str	r0, [r7, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80026bc:	2004      	movs	r0, #4
 80026be:	f006 fe09 	bl	80092d4 <xQueueCreateMutex>
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80026c2:	f04f 31ff 	mov.w	r1, #4294967295
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80026c6:	f8cb 0000 	str.w	r0, [fp]
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80026ca:	f007 f875 	bl	80097b8 <xQueueTakeMutexRecursive>
	MX_USART2_UART_Init();
 80026ce:	f00b ffbf 	bl	800e650 <MX_USART2_UART_Init>
	comm.memory = commBuffMem;
 80026d2:	4bc3      	ldr	r3, [pc, #780]	; (80029e0 <CommTask+0x344>)
 80026d4:	4ac3      	ldr	r2, [pc, #780]	; (80029e4 <CommTask+0x348>)
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80026d6:	4cc4      	ldr	r4, [pc, #784]	; (80029e8 <CommTask+0x34c>)
	comm.memory = commBuffMem;
 80026d8:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
	comm.readPointer = 0;
 80026de:	2200      	movs	r2, #0
	comm.bufferSize = COMM_BUFFER_SIZE;
 80026e0:	6059      	str	r1, [r3, #4]
	xSemaphoreGiveRecursive(commsMutex);
 80026e2:	f8db 0000 	ldr.w	r0, [fp]
	comm.readPointer = 0;
 80026e6:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 80026e8:	729a      	strb	r2, [r3, #10]
	xSemaphoreGiveRecursive(commsMutex);
 80026ea:	f006 fe27 	bl	800933c <xQueueGiveMutexRecursive>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80026ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f2:	ad0a      	add	r5, sp, #40	; 0x28
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 80026f4:	3414      	adds	r4, #20
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80026f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 80026fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026fe:	ab07      	add	r3, sp, #28
 8002700:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8002a0c <CommTask+0x370>
 8002704:	f8df a308 	ldr.w	sl, [pc, #776]	; 8002a10 <CommTask+0x374>
 8002708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800270c:	e041      	b.n	8002792 <CommTask+0xf6>
		}else if(message==MSG_SCOPE_DATA_READY){
 800270e:	2b15      	cmp	r3, #21
 8002710:	d07d      	beq.n	800280e <CommTask+0x172>
		}else if(message==MSG_GEN_SEND_FREQ){
 8002712:	2b26      	cmp	r3, #38	; 0x26
 8002714:	f000 813d 	beq.w	8002992 <CommTask+0x2f6>
		}else if(message==MSG_CNT_SEND_DATA){
 8002718:	2b0e      	cmp	r3, #14
 800271a:	d052      	beq.n	80027c2 <CommTask+0x126>
		}else if(message==MSG_LOGAN_SEND_DATA){
 800271c:	2b1e      	cmp	r3, #30
 800271e:	f000 8179 	beq.w	8002a14 <CommTask+0x378>
		}else if(message==MSG_SYSTEM_CONFIG){
 8002722:	2b02      	cmp	r3, #2
 8002724:	f000 81a7 	beq.w	8002a76 <CommTask+0x3da>
		}else if(message==MSG_COMMS_CONFIG){
 8002728:	2b03      	cmp	r3, #3
 800272a:	f000 81be 	beq.w	8002aaa <CommTask+0x40e>
		}else if(message==MSG_SCOPE_CONFIG){
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f000 81ee 	beq.w	8002b10 <CommTask+0x474>
		}else if(message==MSG_CNT_CONFIG){
 8002734:	2b05      	cmp	r3, #5
 8002736:	f000 81fe 	beq.w	8002b36 <CommTask+0x49a>
		}else if(message==MSG_SCOPE_INPUTS){
 800273a:	2b10      	cmp	r3, #16
 800273c:	f000 821d 	beq.w	8002b7a <CommTask+0x4de>
		}else if(message==MSG_SHIELD_AVAIL){
 8002740:	2b04      	cmp	r3, #4
 8002742:	d022      	beq.n	800278a <CommTask+0xee>
		}else if(message==MSG_GEN_CONFIG){
 8002744:	2b1f      	cmp	r3, #31
 8002746:	f000 822d 	beq.w	8002ba4 <CommTask+0x508>
		}else if(message==MSG_GEN_PWM_CONFIG){
 800274a:	2b20      	cmp	r3, #32
 800274c:	f000 8264 	beq.w	8002c18 <CommTask+0x57c>
		}else if(message==MSG_SYNCPWM_CONFIG){
 8002750:	2b29      	cmp	r3, #41	; 0x29
 8002752:	f000 827d 	beq.w	8002c50 <CommTask+0x5b4>
		}else if(message==MSG_LOGAN_CONFIG){
 8002756:	2b18      	cmp	r3, #24
 8002758:	f000 8293 	beq.w	8002c82 <CommTask+0x5e6>
		}else if(message==MSG_GEN_NEXT){
 800275c:	2b27      	cmp	r3, #39	; 0x27
 800275e:	f000 8293 	beq.w	8002c88 <CommTask+0x5ec>
		}else if(message==MSG_GEN_OK){
 8002762:	2b28      	cmp	r3, #40	; 0x28
 8002764:	f000 8294 	beq.w	8002c90 <CommTask+0x5f4>
		}else if (message==MSG_SYSTEM_VERSION){
 8002768:	2b01      	cmp	r3, #1
 800276a:	f000 8295 	beq.w	8002c98 <CommTask+0x5fc>
		}else if (message==MSG_COMMS_FLUSH){
 800276e:	2b2f      	cmp	r3, #47	; 0x2f
 8002770:	d00b      	beq.n	800278a <CommTask+0xee>
		}else if (message==MSG_ACK){
 8002772:	2b31      	cmp	r3, #49	; 0x31
 8002774:	f000 82c4 	beq.w	8002d00 <CommTask+0x664>
		}else if (message==MSG_SCOPE_TRIGGER){
 8002778:	2b16      	cmp	r3, #22
 800277a:	f000 82c5 	beq.w	8002d08 <CommTask+0x66c>
		}else if (message==MSG_SCOPE_SMPL_STARTED){
 800277e:	2b17      	cmp	r3, #23
			commsSendString(STR_SCOPE_SMPL);
 8002780:	bf0c      	ite	eq
 8002782:	489a      	ldreq	r0, [pc, #616]	; (80029ec <CommTask+0x350>)
			commsSendString(STR_UNKNOWN_MSG);
 8002784:	489a      	ldrne	r0, [pc, #616]	; (80029f0 <CommTask+0x354>)
 8002786:	f009 f803 	bl	800b790 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);		
 800278a:	f8db 0000 	ldr.w	r0, [fp]
 800278e:	f006 fdd5 	bl	800933c <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002792:	2300      	movs	r3, #0
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	a906      	add	r1, sp, #24
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f006 fe84 	bl	80094a8 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	f8db 0000 	ldr.w	r0, [fp]
 80027a8:	f007 f806 	bl	80097b8 <xQueueTakeMutexRecursive>
		if(message==MSG_DEVICE_IDN){
 80027ac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ac      	bne.n	800270e <CommTask+0x72>
			commsSendString(STR_ACK);
 80027b4:	488f      	ldr	r0, [pc, #572]	; (80029f4 <CommTask+0x358>)
 80027b6:	f008 ffeb 	bl	800b790 <commsSendString>
			commsSendString(IDN_STRING);
 80027ba:	488f      	ldr	r0, [pc, #572]	; (80029f8 <CommTask+0x35c>)
 80027bc:	f008 ffe8 	bl	800b790 <commsSendString>
 80027c0:	e7e3      	b.n	800278a <CommTask+0xee>
			if(counter.state==COUNTER_ETR){
 80027c2:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	f000 8181 	beq.w	8002ace <CommTask+0x432>
			}else if(counter.state==COUNTER_REF){
 80027cc:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	f000 8144 	beq.w	8002a5e <CommTask+0x3c2>
			}else if(counter.state==COUNTER_IC){
 80027d6:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
 80027da:	2b02      	cmp	r3, #2
 80027dc:	f000 817f 	beq.w	8002ade <CommTask+0x442>
			}else if(counter.state==COUNTER_TI){						
 80027e0:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d1d0      	bne.n	800278a <CommTask+0xee>
				switch(counter.tiState){
 80027e8:	f898 33be 	ldrb.w	r3, [r8, #958]	; 0x3be
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f000 822a 	beq.w	8002c48 <CommTask+0x5ac>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d106      	bne.n	8002806 <CommTask+0x16a>
					commsSendString(STR_CNT_TI_DATA);
 80027f8:	4880      	ldr	r0, [pc, #512]	; (80029fc <CommTask+0x360>)
 80027fa:	f008 ffc9 	bl	800b790 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 80027fe:	ed98 0be0 	vldr	d0, [r8, #896]	; 0x380
 8002802:	f008 ffdf 	bl	800b7c4 <commsSendDouble>
				counter.tiState = CLEAR;
 8002806:	2300      	movs	r3, #0
 8002808:	f888 33be 	strb.w	r3, [r8, #958]	; 0x3be
 800280c:	e7bd      	b.n	800278a <CommTask+0xee>
			if(getScopeState() == SCOPE_DATA_SENDING){
 800280e:	f002 f84b 	bl	80048a8 <getScopeState>
 8002812:	2804      	cmp	r0, #4
 8002814:	d1b9      	bne.n	800278a <CommTask+0xee>
				oneChanMemSize=getOneChanMemSize();
 8002816:	f002 f829 	bl	800486c <getOneChanMemSize>
 800281a:	4605      	mov	r5, r0
				dataLength = getSamples();
 800281c:	f002 f832 	bl	8004884 <getSamples>
 8002820:	9000      	str	r0, [sp, #0]
				adcRes = getADCRes();
 8002822:	f002 f835 	bl	8004890 <getADCRes>
 8002826:	4604      	mov	r4, r0
				channels=GetNumOfChannels();
 8002828:	f002 f812 	bl	8004850 <GetNumOfChannels>
 800282c:	9002      	str	r0, [sp, #8]
				j=scopeGetRealSmplFreq();
 800282e:	f002 f9e3 	bl	8004bf8 <scopeGetRealSmplFreq>
				if(adcRes>8){
 8002832:	2c08      	cmp	r4, #8
				header[4]=(uint8_t)(j>>24);
 8002834:	ea4f 6210 	mov.w	r2, r0, lsr #24
				header[5]=(uint8_t)(j>>16);
 8002838:	ea4f 4310 	mov.w	r3, r0, lsr #16
				header[7]=(uint8_t)(j);
 800283c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
				header[6]=(uint8_t)(j>>8);
 8002840:	ea4f 2010 	mov.w	r0, r0, lsr #8
				header[4]=(uint8_t)(j>>24);
 8002844:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
				header[5]=(uint8_t)(j>>16);
 8002848:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
				header[6]=(uint8_t)(j>>8);
 800284c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
				if(adcRes>8){
 8002850:	f240 81ce 	bls.w	8002bf0 <CommTask+0x554>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002854:	f002 f810 	bl	8004878 <getTriggerIndex>
 8002858:	4606      	mov	r6, r0
 800285a:	f002 f813 	bl	8004884 <getSamples>
 800285e:	4681      	mov	r9, r0
 8002860:	f002 f81c 	bl	800489c <getPretrigger>
 8002864:	fb09 f000 	mul.w	r0, r9, r0
 8002868:	eba6 4610 	sub.w	r6, r6, r0, lsr #16
					dataLength*=2;
 800286c:	9a00      	ldr	r2, [sp, #0]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 800286e:	eb05 0346 	add.w	r3, r5, r6, lsl #1
					dataLength*=2;
 8002872:	0052      	lsls	r2, r2, #1
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002874:	fbb3 f6f5 	udiv	r6, r3, r5
 8002878:	fb05 3316 	mls	r3, r5, r6, r3
					dataLength*=2;
 800287c:	9200      	str	r2, [sp, #0]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 800287e:	9303      	str	r3, [sp, #12]
 8002880:	4611      	mov	r1, r2
				header[15]=channels;
 8002882:	9802      	ldr	r0, [sp, #8]
 8002884:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
				if(j+dataLength>oneChanMemSize){
 8002888:	9803      	ldr	r0, [sp, #12]
				header[8]=(uint8_t)adcRes;	
 800288a:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
				header[9]=(uint8_t)(dataLength >> 16);
 800288e:	0c0b      	lsrs	r3, r1, #16
 8002890:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
				if(j+dataLength>oneChanMemSize){
 8002894:	180b      	adds	r3, r1, r0
				header[10]=(uint8_t)(dataLength >> 8);
 8002896:	0a0a      	lsrs	r2, r1, #8
				if(j+dataLength>oneChanMemSize){
 8002898:	42ab      	cmp	r3, r5
				header[11]=(uint8_t)dataLength;
 800289a:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
				header[10]=(uint8_t)(dataLength >> 8);
 800289e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
				if(j+dataLength>oneChanMemSize){
 80028a2:	f240 817c 	bls.w	8002b9e <CommTask+0x502>
					dataLenFirst=oneChanMemSize-j;
 80028a6:	1a2d      	subs	r5, r5, r0
					dataLenSecond=dataLength-dataLenFirst;
 80028a8:	1b4b      	subs	r3, r1, r5
					dataLenFirst=oneChanMemSize-j;
 80028aa:	e9cd 5300 	strd	r5, r3, [sp]
				for(i=0;i<channels;i++){
 80028ae:	9b02      	ldr	r3, [sp, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d05e      	beq.n	8002972 <CommTask+0x2d6>
						commsSendBuff(pointer + j, dataLenFirst);
 80028b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80028b8:	9305      	str	r3, [sp, #20]
				for(i=0;i<channels;i++){
 80028ba:	2400      	movs	r4, #0
 80028bc:	e00b      	b.n	80028d6 <CommTask+0x23a>
					}else if(dataLenFirst>0){
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 812d 	bne.w	8002b1e <CommTask+0x482>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 80028c4:	9b01      	ldr	r3, [sp, #4]
 80028c6:	2bc8      	cmp	r3, #200	; 0xc8
 80028c8:	d834      	bhi.n	8002934 <CommTask+0x298>
					}else if(dataLenSecond>0){
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 812d 	bne.w	8002b2a <CommTask+0x48e>
				for(i=0;i<channels;i++){
 80028d0:	9b02      	ldr	r3, [sp, #8]
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	d04d      	beq.n	8002972 <CommTask+0x2d6>
					pointer = (uint8_t*)getDataPointer(i);
 80028d6:	4620      	mov	r0, r4
 80028d8:	f001 ffc0 	bl	800485c <getDataPointer>
					header[14]=(i+1);
 80028dc:	3401      	adds	r4, #1
					pointer = (uint8_t*)getDataPointer(i);
 80028de:	4605      	mov	r5, r0
					header[14]=(i+1);
 80028e0:	b2e4      	uxtb	r4, r4
					commsSendBuff(header,16);
 80028e2:	2110      	movs	r1, #16
 80028e4:	a80a      	add	r0, sp, #40	; 0x28
					header[14]=(i+1);
 80028e6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
					commsSendBuff(header,16);
 80028ea:	f008 ff47 	bl	800b77c <commsSendBuff>
					if(dataLenFirst>COMMS_BULK_SIZE ){
 80028ee:	9b00      	ldr	r3, [sp, #0]
 80028f0:	2bc8      	cmp	r3, #200	; 0xc8
 80028f2:	d9e4      	bls.n	80028be <CommTask+0x222>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 80028f4:	9404      	str	r4, [sp, #16]
 80028f6:	9c03      	ldr	r4, [sp, #12]
 80028f8:	461e      	mov	r6, r3
						k=0;
 80028fa:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 80028fe:	23c8      	movs	r3, #200	; 0xc8
 8002900:	fb13 4009 	smlabb	r0, r3, r9, r4
 8002904:	4428      	add	r0, r5
 8002906:	21c8      	movs	r1, #200	; 0xc8
							tmpToSend-=COMMS_BULK_SIZE;
 8002908:	3ec8      	subs	r6, #200	; 0xc8
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 800290a:	f008 ff37 	bl	800b77c <commsSendBuff>
							k++;
 800290e:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002912:	2ec8      	cmp	r6, #200	; 0xc8
							k++;
 8002914:	fa5f f989 	uxtb.w	r9, r9
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002918:	f04f 00c8 	mov.w	r0, #200	; 0xc8
						while(tmpToSend>COMMS_BULK_SIZE){
 800291c:	d8ef      	bhi.n	80028fe <CommTask+0x262>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 800291e:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8002922:	fb10 3009 	smlabb	r0, r0, r9, r3
 8002926:	4428      	add	r0, r5
 8002928:	b2b1      	uxth	r1, r6
 800292a:	f008 ff27 	bl	800b77c <commsSendBuff>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 800292e:	9b01      	ldr	r3, [sp, #4]
 8002930:	2bc8      	cmp	r3, #200	; 0xc8
 8002932:	d9ca      	bls.n	80028ca <CommTask+0x22e>
 8002934:	461e      	mov	r6, r3
						k=0;
 8002936:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 800293a:	eb09 0089 	add.w	r0, r9, r9, lsl #2
 800293e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002942:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002946:	21c8      	movs	r1, #200	; 0xc8
							tmpToSend-=COMMS_BULK_SIZE;
 8002948:	3ec8      	subs	r6, #200	; 0xc8
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 800294a:	f008 ff17 	bl	800b77c <commsSendBuff>
							k++;
 800294e:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002952:	2ec8      	cmp	r6, #200	; 0xc8
							k++;
 8002954:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 8002958:	d8ef      	bhi.n	800293a <CommTask+0x29e>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 800295a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800295e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002962:	eb05 00c9 	add.w	r0, r5, r9, lsl #3
 8002966:	b2b1      	uxth	r1, r6
 8002968:	f008 ff08 	bl	800b77c <commsSendBuff>
				for(i=0;i<channels;i++){
 800296c:	9b02      	ldr	r3, [sp, #8]
 800296e:	42a3      	cmp	r3, r4
 8002970:	d1b1      	bne.n	80028d6 <CommTask+0x23a>
				commsSendString(STR_SCOPE_OK);
 8002972:	4823      	ldr	r0, [pc, #140]	; (8002a00 <CommTask+0x364>)
 8002974:	f008 ff0c 	bl	800b790 <commsSendString>
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002978:	4822      	ldr	r0, [pc, #136]	; (8002a04 <CommTask+0x368>)
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 800297a:	2414      	movs	r4, #20
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800297c:	2300      	movs	r3, #0
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	f10d 011a 	add.w	r1, sp, #26
 8002986:	6800      	ldr	r0, [r0, #0]
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002988:	f8ad 401a 	strh.w	r4, [sp, #26]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800298c:	f006 fae4 	bl	8008f58 <xQueueGenericSend>
 8002990:	e6fb      	b.n	800278a <CommTask+0xee>
				header_gen[4]=i+1+48;
 8002992:	2331      	movs	r3, #49	; 0x31
				j=genGetRealSmplFreq(i+1);
 8002994:	2001      	movs	r0, #1
				header_gen[4]=i+1+48;
 8002996:	f88d 3020 	strb.w	r3, [sp, #32]
				j=genGetRealSmplFreq(i+1);
 800299a:	f001 f8ed 	bl	8003b78 <genGetRealSmplFreq>
				commsSendBuff(header_gen,12);
 800299e:	210c      	movs	r1, #12
				header_gen[9]=(uint8_t)(j>>16);
 80029a0:	0c02      	lsrs	r2, r0, #16
				header_gen[10]=(uint8_t)(j>>8);
 80029a2:	0a03      	lsrs	r3, r0, #8
				header_gen[11]=(uint8_t)(j);
 80029a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				commsSendBuff(header_gen,12);
 80029a8:	a807      	add	r0, sp, #28
				header_gen[9]=(uint8_t)(j>>16);
 80029aa:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
				header_gen[10]=(uint8_t)(j>>8);
 80029ae:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				commsSendBuff(header_gen,12);
 80029b2:	f008 fee3 	bl	800b77c <commsSendBuff>
				header_gen[4]=i+1+48;
 80029b6:	2332      	movs	r3, #50	; 0x32
				j=genGetRealSmplFreq(i+1);
 80029b8:	2002      	movs	r0, #2
				header_gen[4]=i+1+48;
 80029ba:	f88d 3020 	strb.w	r3, [sp, #32]
				j=genGetRealSmplFreq(i+1);
 80029be:	f001 f8db 	bl	8003b78 <genGetRealSmplFreq>
				commsSendBuff(header_gen,12);
 80029c2:	210c      	movs	r1, #12
				header_gen[9]=(uint8_t)(j>>16);
 80029c4:	0c02      	lsrs	r2, r0, #16
				header_gen[10]=(uint8_t)(j>>8);
 80029c6:	0a03      	lsrs	r3, r0, #8
				header_gen[11]=(uint8_t)(j);
 80029c8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				commsSendBuff(header_gen,12);
 80029cc:	a807      	add	r0, sp, #28
				header_gen[9]=(uint8_t)(j>>16);
 80029ce:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
				header_gen[10]=(uint8_t)(j>>8);
 80029d2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				commsSendBuff(header_gen,12);
 80029d6:	f008 fed1 	bl	800b77c <commsSendBuff>
 80029da:	e6d6      	b.n	800278a <CommTask+0xee>
 80029dc:	200047cc 	.word	0x200047cc
 80029e0:	20000204 	.word	0x20000204
 80029e4:	20000210 	.word	0x20000210
 80029e8:	08011430 	.word	0x08011430
 80029ec:	08011630 	.word	0x08011630
 80029f0:	08011638 	.word	0x08011638
 80029f4:	08011594 	.word	0x08011594
 80029f8:	0801159c 	.word	0x0801159c
 80029fc:	080115f8 	.word	0x080115f8
 8002a00:	080115b0 	.word	0x080115b0
 8002a04:	20005438 	.word	0x20005438
 8002a08:	20000310 	.word	0x20000310
 8002a0c:	20004848 	.word	0x20004848
 8002a10:	20005418 	.word	0x20005418
			logAnlys.state = LOGA_DATA_SENDING;
 8002a14:	2302      	movs	r3, #2
 8002a16:	f88a 3012 	strb.w	r3, [sl, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8002a1a:	f89a 3017 	ldrb.w	r3, [sl, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d038      	beq.n	8002a94 <CommTask+0x3f8>
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 8002a22:	48bb      	ldr	r0, [pc, #748]	; (8002d10 <CommTask+0x674>)
 8002a24:	f008 feb4 	bl	800b790 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 8002a28:	f8ba 0010 	ldrh.w	r0, [sl, #16]
 8002a2c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8002a30:	0040      	lsls	r0, r0, #1
 8002a32:	f008 fe89 	bl	800b748 <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 8002a36:	48b7      	ldr	r0, [pc, #732]	; (8002d14 <CommTask+0x678>)
 8002a38:	f008 feaa 	bl	800b790 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 8002a3c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002a40:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8002a44:	48b4      	ldr	r0, [pc, #720]	; (8002d18 <CommTask+0x67c>)
 8002a46:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8002a4a:	0052      	lsls	r2, r2, #1
 8002a4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a50:	b292      	uxth	r2, r2
 8002a52:	f005 ff69 	bl	8008928 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	f88a 3012 	strb.w	r3, [sl, #18]
 8002a5c:	e695      	b.n	800278a <CommTask+0xee>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002a5e:	f898 33ba 	ldrb.w	r3, [r8, #954]	; 0x3ba
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d157      	bne.n	8002b16 <CommTask+0x47a>
					commsSendString(STR_CNT_REF_DATA);
 8002a66:	48ad      	ldr	r0, [pc, #692]	; (8002d1c <CommTask+0x680>)
 8002a68:	f008 fe92 	bl	800b790 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002a6c:	ed98 0bec 	vldr	d0, [r8, #944]	; 0x3b0
 8002a70:	f008 fea8 	bl	800b7c4 <commsSendDouble>
 8002a74:	e689      	b.n	800278a <CommTask+0xee>
	commsSendString("SYST");
 8002a76:	48aa      	ldr	r0, [pc, #680]	; (8002d20 <CommTask+0x684>)
 8002a78:	f008 fe8a 	bl	800b790 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 8002a7c:	f004 fa98 	bl	8006fb0 <HAL_RCC_GetHCLKFreq>
 8002a80:	f008 fe62 	bl	800b748 <commsSendUint32>
	commsSendUint32(HAL_RCC_GetPCLK2Freq()); //PCLK
 8002a84:	f004 fab2 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
 8002a88:	f008 fe5e 	bl	800b748 <commsSendUint32>
	commsSendString(MCU);
 8002a8c:	48a5      	ldr	r0, [pc, #660]	; (8002d24 <CommTask+0x688>)
 8002a8e:	f008 fe7f 	bl	800b790 <commsSendString>
 8002a92:	e67a      	b.n	800278a <CommTask+0xee>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 8002a94:	48a4      	ldr	r0, [pc, #656]	; (8002d28 <CommTask+0x68c>)
 8002a96:	f008 fe7b 	bl	800b790 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 8002a9a:	f8da 0000 	ldr.w	r0, [sl]
 8002a9e:	f008 fe53 	bl	800b748 <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f88a 3017 	strb.w	r3, [sl, #23]
 8002aa8:	e7bb      	b.n	8002a22 <CommTask+0x386>
	commsSendString("COMM");
 8002aaa:	48a0      	ldr	r0, [pc, #640]	; (8002d2c <CommTask+0x690>)
 8002aac:	f008 fe70 	bl	800b790 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8002ab0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ab4:	f008 fe48 	bl	800b748 <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8002ab8:	f44f 20e1 	mov.w	r0, #460800	; 0x70800
 8002abc:	f008 fe44 	bl	800b748 <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 8002ac0:	489b      	ldr	r0, [pc, #620]	; (8002d30 <CommTask+0x694>)
 8002ac2:	f008 fe65 	bl	800b790 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002ac6:	489b      	ldr	r0, [pc, #620]	; (8002d34 <CommTask+0x698>)
 8002ac8:	f008 fe62 	bl	800b790 <commsSendString>
 8002acc:	e65d      	b.n	800278a <CommTask+0xee>
				commsSendString(STR_CNT_ETR_DATA);
 8002ace:	489a      	ldr	r0, [pc, #616]	; (8002d38 <CommTask+0x69c>)
 8002ad0:	f008 fe5e 	bl	800b790 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002ad4:	ed98 0bec 	vldr	d0, [r8, #944]	; 0x3b0
 8002ad8:	f008 fe74 	bl	800b7c4 <commsSendDouble>
 8002adc:	e655      	b.n	800278a <CommTask+0xee>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002ade:	f898 33bd 	ldrb.w	r3, [r8, #957]	; 0x3bd
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d14c      	bne.n	8002b80 <CommTask+0x4e4>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002ae6:	f898 33bb 	ldrb.w	r3, [r8, #955]	; 0x3bb
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a1 	beq.w	8002c32 <CommTask+0x596>
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8002af0:	f898 33bc 	ldrb.w	r3, [r8, #956]	; 0x3bc
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f ae48 	bne.w	800278a <CommTask+0xee>
						commsSendString(STR_CNT_IC2_DATA);	
 8002afa:	4890      	ldr	r0, [pc, #576]	; (8002d3c <CommTask+0x6a0>)
 8002afc:	f008 fe48 	bl	800b790 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8002b00:	ed98 0be2 	vldr	d0, [r8, #904]	; 0x388
 8002b04:	f008 fe5e 	bl	800b7c4 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f888 33bc 	strb.w	r3, [r8, #956]	; 0x3bc
 8002b0e:	e63c      	b.n	800278a <CommTask+0xee>
			sendScopeConf();
 8002b10:	f7ff fca4 	bl	800245c <sendScopeConf>
 8002b14:	e639      	b.n	800278a <CommTask+0xee>
					commsSendString(STR_CNT_REF_WARN);
 8002b16:	488a      	ldr	r0, [pc, #552]	; (8002d40 <CommTask+0x6a4>)
 8002b18:	f008 fe3a 	bl	800b790 <commsSendString>
 8002b1c:	e635      	b.n	800278a <CommTask+0xee>
						commsSendBuff(pointer + j, dataLenFirst);
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	9905      	ldr	r1, [sp, #20]
 8002b22:	18e8      	adds	r0, r5, r3
 8002b24:	f008 fe2a 	bl	800b77c <commsSendBuff>
 8002b28:	e6cc      	b.n	80028c4 <CommTask+0x228>
						commsSendBuff(pointer, dataLenSecond);
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002b30:	f008 fe24 	bl	800b77c <commsSendBuff>
 8002b34:	e6cc      	b.n	80028d0 <CommTask+0x234>
	commsSendString("CNT_");
 8002b36:	4883      	ldr	r0, [pc, #524]	; (8002d44 <CommTask+0x6a8>)
 8002b38:	f008 fe2a 	bl	800b790 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 8002b3c:	4882      	ldr	r0, [pc, #520]	; (8002d48 <CommTask+0x6ac>)
 8002b3e:	f008 fe03 	bl	800b748 <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 8002b42:	4882      	ldr	r0, [pc, #520]	; (8002d4c <CommTask+0x6b0>)
 8002b44:	f008 fe00 	bl	800b748 <commsSendUint32>
	commsSendString(COUNTER_MODES);
 8002b48:	4881      	ldr	r0, [pc, #516]	; (8002d50 <CommTask+0x6b4>)
 8002b4a:	f008 fe21 	bl	800b790 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8002b4e:	4881      	ldr	r0, [pc, #516]	; (8002d54 <CommTask+0x6b8>)
 8002b50:	f008 fe1e 	bl	800b790 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002b54:	487f      	ldr	r0, [pc, #508]	; (8002d54 <CommTask+0x6b8>)
 8002b56:	f008 fe1b 	bl	800b790 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002b5a:	487f      	ldr	r0, [pc, #508]	; (8002d58 <CommTask+0x6bc>)
 8002b5c:	f008 fe18 	bl	800b790 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8002b60:	487e      	ldr	r0, [pc, #504]	; (8002d5c <CommTask+0x6c0>)
 8002b62:	f008 fe15 	bl	800b790 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8002b66:	487b      	ldr	r0, [pc, #492]	; (8002d54 <CommTask+0x6b8>)
 8002b68:	f008 fe12 	bl	800b790 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002b6c:	4879      	ldr	r0, [pc, #484]	; (8002d54 <CommTask+0x6b8>)
 8002b6e:	f008 fe0f 	bl	800b790 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002b72:	4879      	ldr	r0, [pc, #484]	; (8002d58 <CommTask+0x6bc>)
 8002b74:	f008 fe0c 	bl	800b790 <commsSendString>
 8002b78:	e607      	b.n	800278a <CommTask+0xee>
			sendScopeInputs();
 8002b7a:	f7ff fcc1 	bl	8002500 <sendScopeInputs>
 8002b7e:	e604      	b.n	800278a <CommTask+0xee>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8002b80:	4877      	ldr	r0, [pc, #476]	; (8002d60 <CommTask+0x6c4>)
 8002b82:	f008 fe05 	bl	800b790 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002b86:	ed98 0be0 	vldr	d0, [r8, #896]	; 0x380
 8002b8a:	f008 fe1b 	bl	800b7c4 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 8002b8e:	4875      	ldr	r0, [pc, #468]	; (8002d64 <CommTask+0x6c8>)
 8002b90:	f008 fdfe 	bl	800b790 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 8002b94:	ed98 0be2 	vldr	d0, [r8, #904]	; 0x388
 8002b98:	f008 fe14 	bl	800b7c4 <commsSendDouble>
 8002b9c:	e5f5      	b.n	800278a <CommTask+0xee>
					dataLenSecond=0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	e684      	b.n	80028ae <CommTask+0x212>
	commsSendString("GEN_");
 8002ba4:	4870      	ldr	r0, [pc, #448]	; (8002d68 <CommTask+0x6cc>)
 8002ba6:	f008 fdf3 	bl	800b790 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8002baa:	4870      	ldr	r0, [pc, #448]	; (8002d6c <CommTask+0x6d0>)
 8002bac:	f008 fdcc 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 8002bb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bb4:	f008 fdc8 	bl	800b748 <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 8002bb8:	200c      	movs	r0, #12
 8002bba:	f008 fdc5 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f008 fdc2 	bl	800b748 <commsSendUint32>
			commsSendString(GEN_CH1_PIN_STR);
 8002bc4:	486a      	ldr	r0, [pc, #424]	; (8002d70 <CommTask+0x6d4>)
 8002bc6:	f008 fde3 	bl	800b790 <commsSendString>
			commsSendString(GEN_CH2_PIN_STR);
 8002bca:	486a      	ldr	r0, [pc, #424]	; (8002d74 <CommTask+0x6d8>)
 8002bcc:	f008 fde0 	bl	800b790 <commsSendString>
	commsSendUint32(0);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f008 fdb9 	bl	800b748 <commsSendUint32>
	commsSendUint32(GEN_VREF);
 8002bd6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002bda:	f008 fdb5 	bl	800b748 <commsSendUint32>
	commsSendUint32(GEN_VDDA);
 8002bde:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002be2:	f008 fdb1 	bl	800b748 <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 8002be6:	f240 40ba 	movw	r0, #1210	; 0x4ba
 8002bea:	f008 fdad 	bl	800b748 <commsSendUint32>
 8002bee:	e5cc      	b.n	800278a <CommTask+0xee>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002bf0:	f001 fe42 	bl	8004878 <getTriggerIndex>
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	f001 fe45 	bl	8004884 <getSamples>
 8002bfa:	4681      	mov	r9, r0
 8002bfc:	f001 fe4e 	bl	800489c <getPretrigger>
 8002c00:	442e      	add	r6, r5
 8002c02:	fb09 f300 	mul.w	r3, r9, r0
 8002c06:	eba6 4313 	sub.w	r3, r6, r3, lsr #16
 8002c0a:	fbb3 f6f5 	udiv	r6, r3, r5
 8002c0e:	fb05 3316 	mls	r3, r5, r6, r3
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	9900      	ldr	r1, [sp, #0]
 8002c16:	e634      	b.n	8002882 <CommTask+0x1e6>
	commsSendString("GENP");		
 8002c18:	4857      	ldr	r0, [pc, #348]	; (8002d78 <CommTask+0x6dc>)
 8002c1a:	f008 fdb9 	bl	800b790 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f008 fd92 	bl	800b748 <commsSendUint32>
			commsSendString(GEN_PWM_CH1_PIN);
 8002c24:	4855      	ldr	r0, [pc, #340]	; (8002d7c <CommTask+0x6e0>)
 8002c26:	f008 fdb3 	bl	800b790 <commsSendString>
			commsSendString(GEN_PWM_CH2_PIN);
 8002c2a:	4855      	ldr	r0, [pc, #340]	; (8002d80 <CommTask+0x6e4>)
 8002c2c:	f008 fdb0 	bl	800b790 <commsSendString>
 8002c30:	e5ab      	b.n	800278a <CommTask+0xee>
						commsSendString(STR_CNT_IC1_DATA);
 8002c32:	4854      	ldr	r0, [pc, #336]	; (8002d84 <CommTask+0x6e8>)
 8002c34:	f008 fdac 	bl	800b790 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002c38:	ed98 0be0 	vldr	d0, [r8, #896]	; 0x380
 8002c3c:	f008 fdc2 	bl	800b7c4 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f888 33bb 	strb.w	r3, [r8, #955]	; 0x3bb
 8002c46:	e753      	b.n	8002af0 <CommTask+0x454>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8002c48:	484f      	ldr	r0, [pc, #316]	; (8002d88 <CommTask+0x6ec>)
 8002c4a:	f008 fda1 	bl	800b790 <commsSendString>
					break;
 8002c4e:	e5da      	b.n	8002806 <CommTask+0x16a>
	commsSendString("SYNP");		
 8002c50:	484e      	ldr	r0, [pc, #312]	; (8002d8c <CommTask+0x6f0>)
 8002c52:	f008 fd9d 	bl	800b790 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8002c56:	483d      	ldr	r0, [pc, #244]	; (8002d4c <CommTask+0x6b0>)
 8002c58:	f008 fd76 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 8002c5c:	484c      	ldr	r0, [pc, #304]	; (8002d90 <CommTask+0x6f4>)
 8002c5e:	f008 fd73 	bl	800b748 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8002c62:	2004      	movs	r0, #4
 8002c64:	f008 fd70 	bl	800b748 <commsSendUint32>
			commsSendString(SYNC_PWM_CH1_PIN);
 8002c68:	484a      	ldr	r0, [pc, #296]	; (8002d94 <CommTask+0x6f8>)
 8002c6a:	f008 fd91 	bl	800b790 <commsSendString>
			commsSendString(SYNC_PWM_CH2_PIN);
 8002c6e:	484a      	ldr	r0, [pc, #296]	; (8002d98 <CommTask+0x6fc>)
 8002c70:	f008 fd8e 	bl	800b790 <commsSendString>
			commsSendString(SYNC_PWM_CH3_PIN);
 8002c74:	4849      	ldr	r0, [pc, #292]	; (8002d9c <CommTask+0x700>)
 8002c76:	f008 fd8b 	bl	800b790 <commsSendString>
			commsSendString(SYNC_PWM_CH4_PIN);
 8002c7a:	4849      	ldr	r0, [pc, #292]	; (8002da0 <CommTask+0x704>)
 8002c7c:	f008 fd88 	bl	800b790 <commsSendString>
 8002c80:	e583      	b.n	800278a <CommTask+0xee>
			sendLogAnlysConf();
 8002c82:	f7ff fca9 	bl	80025d8 <sendLogAnlysConf>
 8002c86:	e580      	b.n	800278a <CommTask+0xee>
			commsSendString(STR_GEN_NEXT);
 8002c88:	4846      	ldr	r0, [pc, #280]	; (8002da4 <CommTask+0x708>)
 8002c8a:	f008 fd81 	bl	800b790 <commsSendString>
 8002c8e:	e57c      	b.n	800278a <CommTask+0xee>
			commsSendString(STR_GEN_OK);
 8002c90:	4845      	ldr	r0, [pc, #276]	; (8002da8 <CommTask+0x70c>)
 8002c92:	f008 fd7d 	bl	800b790 <commsSendString>
 8002c96:	e578      	b.n	800278a <CommTask+0xee>
	commsSendString("VER_");
 8002c98:	4844      	ldr	r0, [pc, #272]	; (8002dac <CommTask+0x710>)
 8002c9a:	f008 fd79 	bl	800b790 <commsSendString>
	commsSendString("Instrulab FW"); 	//12
 8002c9e:	4844      	ldr	r0, [pc, #272]	; (8002db0 <CommTask+0x714>)
 8002ca0:	f008 fd76 	bl	800b790 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8002ca4:	4843      	ldr	r0, [pc, #268]	; (8002db4 <CommTask+0x718>)
 8002ca6:	f008 fd73 	bl	800b790 <commsSendString>
	commsSendString(BUILD);						//4
 8002caa:	4843      	ldr	r0, [pc, #268]	; (8002db8 <CommTask+0x71c>)
 8002cac:	f008 fd70 	bl	800b790 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002cb0:	4842      	ldr	r0, [pc, #264]	; (8002dbc <CommTask+0x720>)
 8002cb2:	f008 fd6d 	bl	800b790 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8002cb6:	4842      	ldr	r0, [pc, #264]	; (8002dc0 <CommTask+0x724>)
 8002cb8:	f008 fd6a 	bl	800b790 <commsSendString>
	commsSendString("ST HAL");				//6
 8002cbc:	4841      	ldr	r0, [pc, #260]	; (8002dc4 <CommTask+0x728>)
 8002cbe:	f008 fd67 	bl	800b790 <commsSendString>
	commsSend('V');
 8002cc2:	2056      	movs	r0, #86	; 0x56
 8002cc4:	f008 fd3e 	bl	800b744 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8002cc8:	f002 f968 	bl	8004f9c <HAL_GetHalVersion>
 8002ccc:	0e00      	lsrs	r0, r0, #24
 8002cce:	3030      	adds	r0, #48	; 0x30
 8002cd0:	b2c0      	uxtb	r0, r0
 8002cd2:	f008 fd37 	bl	800b744 <commsSend>
	commsSend('.');
 8002cd6:	202e      	movs	r0, #46	; 0x2e
 8002cd8:	f008 fd34 	bl	800b744 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8002cdc:	f002 f95e 	bl	8004f9c <HAL_GetHalVersion>
 8002ce0:	0c00      	lsrs	r0, r0, #16
 8002ce2:	3030      	adds	r0, #48	; 0x30
 8002ce4:	b2c0      	uxtb	r0, r0
 8002ce6:	f008 fd2d 	bl	800b744 <commsSend>
	commsSend('.');
 8002cea:	202e      	movs	r0, #46	; 0x2e
 8002cec:	f008 fd2a 	bl	800b744 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002cf0:	f002 f954 	bl	8004f9c <HAL_GetHalVersion>
 8002cf4:	0a00      	lsrs	r0, r0, #8
 8002cf6:	3030      	adds	r0, #48	; 0x30
 8002cf8:	b2c0      	uxtb	r0, r0
 8002cfa:	f008 fd23 	bl	800b744 <commsSend>
 8002cfe:	e544      	b.n	800278a <CommTask+0xee>
			commsSendString(STR_ACK);
 8002d00:	4831      	ldr	r0, [pc, #196]	; (8002dc8 <CommTask+0x72c>)
 8002d02:	f008 fd45 	bl	800b790 <commsSendString>
 8002d06:	e540      	b.n	800278a <CommTask+0xee>
			commsSendString(STR_SCOPE_TRIG);
 8002d08:	4830      	ldr	r0, [pc, #192]	; (8002dcc <CommTask+0x730>)
 8002d0a:	f008 fd41 	bl	800b790 <commsSendString>
 8002d0e:	e53c      	b.n	800278a <CommTask+0xee>
 8002d10:	08011608 	.word	0x08011608
 8002d14:	08011610 	.word	0x08011610
 8002d18:	2000d39c 	.word	0x2000d39c
 8002d1c:	080115c0 	.word	0x080115c0
 8002d20:	08011758 	.word	0x08011758
 8002d24:	08011760 	.word	0x08011760
 8002d28:	08011600 	.word	0x08011600
 8002d2c:	08011644 	.word	0x08011644
 8002d30:	0801164c 	.word	0x0801164c
 8002d34:	08011654 	.word	0x08011654
 8002d38:	080115b8 	.word	0x080115b8
 8002d3c:	080115d8 	.word	0x080115d8
 8002d40:	080115c8 	.word	0x080115c8
 8002d44:	0801165c 	.word	0x0801165c
 8002d48:	08954400 	.word	0x08954400
 8002d4c:	044aa200 	.word	0x044aa200
 8002d50:	08011664 	.word	0x08011664
 8002d54:	08011670 	.word	0x08011670
 8002d58:	08011674 	.word	0x08011674
 8002d5c:	08011678 	.word	0x08011678
 8002d60:	080115e0 	.word	0x080115e0
 8002d64:	080115e8 	.word	0x080115e8
 8002d68:	0801167c 	.word	0x0801167c
 8002d6c:	001e8480 	.word	0x001e8480
 8002d70:	08011684 	.word	0x08011684
 8002d74:	0801168c 	.word	0x0801168c
 8002d78:	08011694 	.word	0x08011694
 8002d7c:	0801169c 	.word	0x0801169c
 8002d80:	080116a4 	.word	0x080116a4
 8002d84:	080115d0 	.word	0x080115d0
 8002d88:	080115f0 	.word	0x080115f0
 8002d8c:	08011730 	.word	0x08011730
 8002d90:	000186a0 	.word	0x000186a0
 8002d94:	08011738 	.word	0x08011738
 8002d98:	08011740 	.word	0x08011740
 8002d9c:	08011748 	.word	0x08011748
 8002da0:	08011750 	.word	0x08011750
 8002da4:	08011618 	.word	0x08011618
 8002da8:	08011620 	.word	0x08011620
 8002dac:	0801176c 	.word	0x0801176c
 8002db0:	08011774 	.word	0x08011774
 8002db4:	08011784 	.word	0x08011784
 8002db8:	0801178c 	.word	0x0801178c
 8002dbc:	08011794 	.word	0x08011794
 8002dc0:	080117a0 	.word	0x080117a0
 8002dc4:	080117a8 	.word	0x080117a8
 8002dc8:	08011594 	.word	0x08011594
 8002dcc:	08011628 	.word	0x08011628

08002dd0 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8002dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2102      	movs	r1, #2
 8002ddc:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8002dde:	f8ad 3006 	strh.w	r3, [sp, #6]
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002de2:	f006 f875 	bl	8008ed0 <xQueueGenericCreate>
 8002de6:	4e8e      	ldr	r6, [pc, #568]	; (8003020 <CounterTask+0x250>)
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002de8:	4c8e      	ldr	r4, [pc, #568]	; (8003024 <CounterTask+0x254>)
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002dea:	6030      	str	r0, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002dec:	2004      	movs	r0, #4
 8002dee:	f006 fa71 	bl	80092d4 <xQueueCreateMutex>

	if(counterMessageQueue == 0){
 8002df2:	6833      	ldr	r3, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002df4:	6020      	str	r0, [r4, #0]
	if(counterMessageQueue == 0){
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8110 	beq.w	800301c <CounterTask+0x24c>
 8002dfc:	4d8a      	ldr	r5, [pc, #552]	; (8003028 <CounterTask+0x258>)
	case 500: 													/* ----	gate time 00.50 second */
		counter.counterEtr.psc = 5999;
		counter.counterEtr.arr = 5999;
		break;
	case 1000: 													/* ----	gate time 01.00 second */
		counter.counterEtr.psc = 7199;
 8002dfe:	f641 471f 	movw	r7, #7199	; 0x1c1f
 8002e02:	e015      	b.n	8002e30 <CounterTask+0x60>
		}else if(message==MSG_CNT_SET_RECIPROCAL_MODE){
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	d03e      	beq.n	8002e86 <CounterTask+0xb6>
		}else if(message==MSG_CNT_SET_REFERENCE_MODE){
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d056      	beq.n	8002eba <CounterTask+0xea>
		}else if(message==MSG_CNT_SET_INTERVAL_MODE){
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d06e      	beq.n	8002eee <CounterTask+0x11e>
		}else if(message==MSG_CNT_START){
 8002e10:	2b0a      	cmp	r3, #10
 8002e12:	f000 8086 	beq.w	8002f22 <CounterTask+0x152>
		}else if(message==MSG_CNT_STOP){
 8002e16:	2b0b      	cmp	r3, #11
 8002e18:	f000 8096 	beq.w	8002f48 <CounterTask+0x178>
		}else if(message==MSG_CNT_DEINIT){
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	f000 80a6 	beq.w	8002f6e <CounterTask+0x19e>
		}else if(message==MSG_CNT_SET_GATE_TIME){
 8002e22:	2b0d      	cmp	r3, #13
 8002e24:	f000 80b9 	beq.w	8002f9a <CounterTask+0x1ca>
		xSemaphoreGiveRecursive(counterMutex);
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	f006 fa87 	bl	800933c <xQueueGiveMutexRecursive>
 8002e2e:	6833      	ldr	r3, [r6, #0]
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8002e30:	4618      	mov	r0, r3
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	2300      	movs	r3, #0
 8002e38:	f10d 0106 	add.w	r1, sp, #6
 8002e3c:	f006 fb34 	bl	80094a8 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	f006 fcb7 	bl	80097b8 <xQueueTakeMutexRecursive>
		if(message==MSG_CNT_SET_DIRECT_MODE){
 8002e4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d1d8      	bne.n	8002e04 <CounterTask+0x34>
	switch(counter.state){
 8002e52:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002e56:	3b01      	subs	r3, #1
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d805      	bhi.n	8002e68 <CounterTask+0x98>
 8002e5c:	e8df f003 	tbb	[pc, r3]
 8002e60:	0d020a10 	.word	0x0d020a10
		TIM_ti_deinit();
 8002e64:	f00a fca6 	bl	800d7b4 <TIM_ti_deinit>
	counter.state = COUNTER_ETR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_etr_init();
 8002e6e:	f00a fa8b 	bl	800d388 <TIM_counter_etr_init>
 8002e72:	e7d9      	b.n	8002e28 <CounterTask+0x58>
		TIM_ic_deinit();
 8002e74:	f00a fc90 	bl	800d798 <TIM_ic_deinit>
 8002e78:	e7f6      	b.n	8002e68 <CounterTask+0x98>
		TIM_ref_deinit();
 8002e7a:	f00a fc7f 	bl	800d77c <TIM_ref_deinit>
 8002e7e:	e7f3      	b.n	8002e68 <CounterTask+0x98>
		TIM_etr_deinit();
 8002e80:	f00a fc6e 	bl	800d760 <TIM_etr_deinit>
 8002e84:	e7f0      	b.n	8002e68 <CounterTask+0x98>
	switch(counter.state){
 8002e86:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d805      	bhi.n	8002e9c <CounterTask+0xcc>
 8002e90:	e8df f003 	tbb	[pc, r3]
 8002e94:	0d02100a 	.word	0x0d02100a
		TIM_ti_deinit();
 8002e98:	f00a fc8c 	bl	800d7b4 <TIM_ti_deinit>
	counter.state = COUNTER_IC;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ic_init();
 8002ea2:	f00a fb45 	bl	800d530 <TIM_counter_ic_init>
 8002ea6:	e7bf      	b.n	8002e28 <CounterTask+0x58>
		TIM_etr_deinit();
 8002ea8:	f00a fc5a 	bl	800d760 <TIM_etr_deinit>
 8002eac:	e7f6      	b.n	8002e9c <CounterTask+0xcc>
		TIM_ref_deinit();
 8002eae:	f00a fc65 	bl	800d77c <TIM_ref_deinit>
 8002eb2:	e7f3      	b.n	8002e9c <CounterTask+0xcc>
		TIM_ic_deinit();
 8002eb4:	f00a fc70 	bl	800d798 <TIM_ic_deinit>
 8002eb8:	e7f0      	b.n	8002e9c <CounterTask+0xcc>
	switch(counter.state){
 8002eba:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d805      	bhi.n	8002ed0 <CounterTask+0x100>
 8002ec4:	e8df f003 	tbb	[pc, r3]
 8002ec8:	10020a0d 	.word	0x10020a0d
		TIM_ti_deinit();
 8002ecc:	f00a fc72 	bl	800d7b4 <TIM_ti_deinit>
	counter.state = COUNTER_REF;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ref_init();
 8002ed6:	f00a fabd 	bl	800d454 <TIM_counter_ref_init>
 8002eda:	e7a5      	b.n	8002e28 <CounterTask+0x58>
		TIM_ic_deinit();
 8002edc:	f00a fc5c 	bl	800d798 <TIM_ic_deinit>
 8002ee0:	e7f6      	b.n	8002ed0 <CounterTask+0x100>
		TIM_etr_deinit();
 8002ee2:	f00a fc3d 	bl	800d760 <TIM_etr_deinit>
 8002ee6:	e7f3      	b.n	8002ed0 <CounterTask+0x100>
		TIM_ref_deinit();
 8002ee8:	f00a fc48 	bl	800d77c <TIM_ref_deinit>
 8002eec:	e7f0      	b.n	8002ed0 <CounterTask+0x100>
	switch(counter.state){
 8002eee:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d805      	bhi.n	8002f04 <CounterTask+0x134>
 8002ef8:	e8df f003 	tbb	[pc, r3]
 8002efc:	10020a0d 	.word	0x10020a0d
		TIM_ti_deinit();
 8002f00:	f00a fc58 	bl	800d7b4 <TIM_ti_deinit>
	counter.state = COUNTER_TI;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ti_init();
 8002f0a:	f00a fb7d 	bl	800d608 <TIM_counter_ti_init>
 8002f0e:	e78b      	b.n	8002e28 <CounterTask+0x58>
		TIM_ic_deinit();
 8002f10:	f00a fc42 	bl	800d798 <TIM_ic_deinit>
 8002f14:	e7f6      	b.n	8002f04 <CounterTask+0x134>
		TIM_etr_deinit();
 8002f16:	f00a fc23 	bl	800d760 <TIM_etr_deinit>
 8002f1a:	e7f3      	b.n	8002f04 <CounterTask+0x134>
		TIM_ref_deinit();
 8002f1c:	f00a fc2e 	bl	800d77c <TIM_ref_deinit>
 8002f20:	e7f0      	b.n	8002f04 <CounterTask+0x134>
	switch(counter.state){
 8002f22:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002f26:	3b01      	subs	r3, #1
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	f63f af7d 	bhi.w	8002e28 <CounterTask+0x58>
 8002f2e:	e8df f003 	tbb	[pc, r3]
 8002f32:	0802      	.short	0x0802
 8002f34:	0205      	.short	0x0205
		TIM_ETR_Start();
 8002f36:	f00a fc65 	bl	800d804 <TIM_ETR_Start>
 8002f3a:	e775      	b.n	8002e28 <CounterTask+0x58>
		TIM_TI_Start();
 8002f3c:	f00a fd08 	bl	800d950 <TIM_TI_Start>
 8002f40:	e772      	b.n	8002e28 <CounterTask+0x58>
		TIM_IC_Start();
 8002f42:	f00a fca3 	bl	800d88c <TIM_IC_Start>
 8002f46:	e76f      	b.n	8002e28 <CounterTask+0x58>
	switch(counter.state){
 8002f48:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f63f af6a 	bhi.w	8002e28 <CounterTask+0x58>
 8002f54:	e8df f003 	tbb	[pc, r3]
 8002f58:	02050802 	.word	0x02050802
		TIM_ETR_Stop();
 8002f5c:	f00a fc7e 	bl	800d85c <TIM_ETR_Stop>
 8002f60:	e762      	b.n	8002e28 <CounterTask+0x58>
		TIM_TI_Stop();
 8002f62:	f00a fdd5 	bl	800db10 <TIM_TI_Stop>
 8002f66:	e75f      	b.n	8002e28 <CounterTask+0x58>
		TIM_IC_Stop();
 8002f68:	f00a fcc8 	bl	800d8fc <TIM_IC_Stop>
 8002f6c:	e75c      	b.n	8002e28 <CounterTask+0x58>
	switch(counter.state){
 8002f6e:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002f72:	3b01      	subs	r3, #1
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	f63f af57 	bhi.w	8002e28 <CounterTask+0x58>
 8002f7a:	e8df f003 	tbb	[pc, r3]
 8002f7e:	0508      	.short	0x0508
 8002f80:	0b02      	.short	0x0b02
		TIM_ti_deinit();
 8002f82:	f00a fc17 	bl	800d7b4 <TIM_ti_deinit>
 8002f86:	e74f      	b.n	8002e28 <CounterTask+0x58>
		TIM_ic_deinit();
 8002f88:	f00a fc06 	bl	800d798 <TIM_ic_deinit>
 8002f8c:	e74c      	b.n	8002e28 <CounterTask+0x58>
		TIM_etr_deinit();
 8002f8e:	f00a fbe7 	bl	800d760 <TIM_etr_deinit>
 8002f92:	e749      	b.n	8002e28 <CounterTask+0x58>
		TIM_ref_deinit();
 8002f94:	f00a fbf2 	bl	800d77c <TIM_ref_deinit>
 8002f98:	e746      	b.n	8002e28 <CounterTask+0x58>
			counterGateConfig(counter.counterEtr.gateTime);
 8002f9a:	f8b5 33ac 	ldrh.w	r3, [r5, #940]	; 0x3ac
 8002f9e:	b29b      	uxth	r3, r3
	switch(gateTime){
 8002fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa4:	d033      	beq.n	800300e <CounterTask+0x23e>
 8002fa6:	d811      	bhi.n	8002fcc <CounterTask+0x1fc>
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d020      	beq.n	8002fee <CounterTask+0x21e>
 8002fac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fb0:	d105      	bne.n	8002fbe <CounterTask+0x1ee>
		counter.counterEtr.psc = 5999;
 8002fb2:	f241 736f 	movw	r3, #5999	; 0x176f
 8002fb6:	f8a5 339a 	strh.w	r3, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 5999;
 8002fba:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
		break;
	default:
		break;
	}

	TIM_ARR_PSC_Config(counter.counterEtr.arr, counter.counterEtr.psc);
 8002fbe:	f8b5 0398 	ldrh.w	r0, [r5, #920]	; 0x398
 8002fc2:	f8b5 139a 	ldrh.w	r1, [r5, #922]	; 0x39a
 8002fc6:	f00b f829 	bl	800e01c <TIM_ARR_PSC_Config>
 8002fca:	e72d      	b.n	8002e28 <CounterTask+0x58>
	switch(gateTime){
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <CounterTask+0x22c>
 8002fd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d1f0      	bne.n	8002fbe <CounterTask+0x1ee>
		counter.counterEtr.psc = 35999;
 8002fdc:	f648 429f 	movw	r2, #35999	; 0x8c9f
		counter.counterEtr.arr = 19999;
 8002fe0:	f644 631f 	movw	r3, #19999	; 0x4e1f
		counter.counterEtr.psc = 35999;
 8002fe4:	f8a5 239a 	strh.w	r2, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 19999;
 8002fe8:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 8002fec:	e7e7      	b.n	8002fbe <CounterTask+0x1ee>
		counter.counterEtr.arr = 999;
 8002fee:	f240 33e7 	movw	r3, #999	; 0x3e7
		counter.counterEtr.psc = 7199;
 8002ff2:	f8a5 739a 	strh.w	r7, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 999;
 8002ff6:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 8002ffa:	e7e0      	b.n	8002fbe <CounterTask+0x1ee>
		counter.counterEtr.psc = 59999;
 8002ffc:	f64e 225f 	movw	r2, #59999	; 0xea5f
		counter.counterEtr.arr = 5999;
 8003000:	f241 736f 	movw	r3, #5999	; 0x176f
		counter.counterEtr.psc = 59999;
 8003004:	f8a5 239a 	strh.w	r2, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 5999;
 8003008:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 800300c:	e7d7      	b.n	8002fbe <CounterTask+0x1ee>
		counter.counterEtr.arr = 9999;
 800300e:	f242 730f 	movw	r3, #9999	; 0x270f
		counter.counterEtr.psc = 7199;
 8003012:	f8a5 739a 	strh.w	r7, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 9999;
 8003016:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 800301a:	e7d0      	b.n	8002fbe <CounterTask+0x1ee>
 800301c:	e7fe      	b.n	800301c <CounterTask+0x24c>
 800301e:	bf00      	nop
 8003020:	20004844 	.word	0x20004844
 8003024:	20004c10 	.word	0x20004c10
 8003028:	20004848 	.word	0x20004848

0800302c <counterSetMode>:
void counterSetMode(uint8_t mode){
 800302c:	b500      	push	{lr}
 800302e:	b083      	sub	sp, #12
	switch(mode){
 8003030:	2803      	cmp	r0, #3
 8003032:	d80e      	bhi.n	8003052 <counterSetMode+0x26>
 8003034:	e8df f000 	tbb	[pc, r0]
 8003038:	02101316 	.word	0x02101316
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 800303c:	a902      	add	r1, sp, #8
 800303e:	2308      	movs	r3, #8
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003040:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <counterSetMode+0x40>)
 8003046:	f04f 32ff 	mov.w	r2, #4294967295
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	f005 ff83 	bl	8008f58 <xQueueGenericSend>
}
 8003052:	b003      	add	sp, #12
 8003054:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003058:	a902      	add	r1, sp, #8
 800305a:	2309      	movs	r3, #9
 800305c:	e7f0      	b.n	8003040 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 800305e:	a902      	add	r1, sp, #8
 8003060:	2307      	movs	r3, #7
 8003062:	e7ed      	b.n	8003040 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 8003064:	a902      	add	r1, sp, #8
 8003066:	2306      	movs	r3, #6
 8003068:	e7ea      	b.n	8003040 <counterSetMode+0x14>
 800306a:	bf00      	nop
 800306c:	20004844 	.word	0x20004844

08003070 <counterSendStart>:
void counterSendStart(void){	
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_START;
 8003074:	a902      	add	r1, sp, #8
 8003076:	230a      	movs	r3, #10
 8003078:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <counterSendStart+0x28>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800307e:	4d07      	ldr	r5, [pc, #28]	; (800309c <counterSendStart+0x2c>)
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003080:	6818      	ldr	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003082:	2400      	movs	r4, #0
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003084:	4623      	mov	r3, r4
 8003086:	f04f 32ff 	mov.w	r2, #4294967295
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800308a:	f885 43b9 	strb.w	r4, [r5, #953]	; 0x3b9
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800308e:	f005 ff63 	bl	8008f58 <xQueueGenericSend>
}
 8003092:	b003      	add	sp, #12
 8003094:	bd30      	pop	{r4, r5, pc}
 8003096:	bf00      	nop
 8003098:	20004844 	.word	0x20004844
 800309c:	20004848 	.word	0x20004848

080030a0 <counterSendStop>:
void counterSendStop(void){	
 80030a0:	b500      	push	{lr}
 80030a2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_STOP;
 80030a4:	a902      	add	r1, sp, #8
 80030a6:	230b      	movs	r3, #11
 80030a8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <counterSendStop+0x20>)
 80030ae:	f04f 32ff 	mov.w	r2, #4294967295
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	f005 ff4f 	bl	8008f58 <xQueueGenericSend>
}
 80030ba:	b003      	add	sp, #12
 80030bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80030c0:	20004844 	.word	0x20004844

080030c4 <counterDeinit>:
void counterDeinit(void){
 80030c4:	b500      	push	{lr}
 80030c6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_DEINIT;
 80030c8:	a902      	add	r1, sp, #8
 80030ca:	230c      	movs	r3, #12
 80030cc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <counterDeinit+0x20>)
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	f005 ff3d 	bl	8008f58 <xQueueGenericSend>
}
 80030de:	b003      	add	sp, #12
 80030e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e4:	20004844 	.word	0x20004844

080030e8 <counterSetEtrGate>:
void counterSetEtrGate(uint16_t gateTime){
 80030e8:	b510      	push	{r4, lr}
 80030ea:	b082      	sub	sp, #8
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 80030ec:	a902      	add	r1, sp, #8
 80030ee:	230d      	movs	r3, #13
 80030f0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80030f4:	4c06      	ldr	r4, [pc, #24]	; (8003110 <counterSetEtrGate+0x28>)
	counter.counterEtr.gateTime = gateTime;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <counterSetEtrGate+0x2c>)
void counterSetEtrGate(uint16_t gateTime){
 80030f8:	4602      	mov	r2, r0
	counter.counterEtr.gateTime = gateTime;
 80030fa:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	2300      	movs	r3, #0
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	f005 ff27 	bl	8008f58 <xQueueGenericSend>
}
 800310a:	b002      	add	sp, #8
 800310c:	bd10      	pop	{r4, pc}
 800310e:	bf00      	nop
 8003110:	20004844 	.word	0x20004844
 8003114:	20004848 	.word	0x20004848

08003118 <counterSetRefSampleCount>:
void counterSetRefSampleCount(uint32_t sampleCount){
 8003118:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800311a:	4d09      	ldr	r5, [pc, #36]	; (8003140 <counterSetRefSampleCount+0x28>)
void counterSetRefSampleCount(uint32_t sampleCount){
 800311c:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800311e:	f04f 31ff 	mov.w	r1, #4294967295
 8003122:	6828      	ldr	r0, [r5, #0]
 8003124:	f006 fb48 	bl	80097b8 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <counterSetRefSampleCount+0x2c>)
	xSemaphoreGiveRecursive(counterMutex);
 800312a:	6828      	ldr	r0, [r5, #0]
	counter.counterEtr.refBuffer = sampleCount;
 800312c:	f8c3 43a8 	str.w	r4, [r3, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003130:	f006 f904 	bl	800933c <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 8003134:	4620      	mov	r0, r4
}
 8003136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TIM_REF_Reconfig_cnt(sampleCount);
 800313a:	f00a bf97 	b.w	800e06c <TIM_REF_Reconfig_cnt>
 800313e:	bf00      	nop
 8003140:	20004c10 	.word	0x20004c10
 8003144:	20004848 	.word	0x20004848

08003148 <counterSetIc1SampleCount>:
void counterSetIc1SampleCount(uint16_t buffer){
 8003148:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800314a:	4d0b      	ldr	r5, [pc, #44]	; (8003178 <counterSetIc1SampleCount+0x30>)
void counterSetIc1SampleCount(uint16_t buffer){
 800314c:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800314e:	f04f 31ff 	mov.w	r1, #4294967295
 8003152:	6828      	ldr	r0, [r5, #0]
 8003154:	f006 fb30 	bl	80097b8 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003158:	3401      	adds	r4, #1
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <counterSetIc1SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch1);	
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <counterSetIc1SampleCount+0x38>)
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 800315e:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003160:	2200      	movs	r2, #0
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003162:	80dc      	strh	r4, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003164:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
	DMA_Restart(&hdma_tim2_ch1);	
 8003168:	f00a ffe4 	bl	800e134 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 800316c:	6828      	ldr	r0, [r5, #0]
}
 800316e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 8003172:	f006 b8e3 	b.w	800933c <xQueueGiveMutexRecursive>
 8003176:	bf00      	nop
 8003178:	20004c10 	.word	0x20004c10
 800317c:	20004848 	.word	0x20004848
 8003180:	2000d0f8 	.word	0x2000d0f8

08003184 <counterSetIc2SampleCount>:
void counterSetIc2SampleCount(uint16_t buffer){
 8003184:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003186:	4d0b      	ldr	r5, [pc, #44]	; (80031b4 <counterSetIc2SampleCount+0x30>)
void counterSetIc2SampleCount(uint16_t buffer){
 8003188:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800318a:	f04f 31ff 	mov.w	r1, #4294967295
 800318e:	6828      	ldr	r0, [r5, #0]
 8003190:	f006 fb12 	bl	80097b8 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003194:	3401      	adds	r4, #1
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <counterSetIc2SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <counterSetIc2SampleCount+0x38>)
	counter.counterIc.ic2BufferSize = buffer + 1;	
 800319a:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800319c:	2200      	movs	r2, #0
	counter.counterIc.ic2BufferSize = buffer + 1;	
 800319e:	811c      	strh	r4, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80031a0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80031a4:	f00a ffc6 	bl	800e134 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 80031a8:	6828      	ldr	r0, [r5, #0]
}
 80031aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 80031ae:	f006 b8c5 	b.w	800933c <xQueueGiveMutexRecursive>
 80031b2:	bf00      	nop
 80031b4:	20004c10 	.word	0x20004c10
 80031b8:	20004848 	.word	0x20004848
 80031bc:	2000d1c4 	.word	0x2000d1c4

080031c0 <counterSetIc1Prescaler>:
void counterSetIc1Prescaler(uint16_t presc){
 80031c0:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <counterSetIc1Prescaler+0x1c>)
	TIM_IC1_PSC_Config(presc);
 80031c4:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
	TIM_IC1_PSC_Config(presc);
 80031cc:	f00a fe7a 	bl	800dec4 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 80031d0:	4803      	ldr	r0, [pc, #12]	; (80031e0 <counterSetIc1Prescaler+0x20>)
}
 80031d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 80031d6:	f00a bfad 	b.w	800e134 <DMA_Restart>
 80031da:	bf00      	nop
 80031dc:	20004848 	.word	0x20004848
 80031e0:	2000d0f8 	.word	0x2000d0f8

080031e4 <counterSetIc2Prescaler>:
void counterSetIc2Prescaler(uint16_t presc){		
 80031e4:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <counterSetIc2Prescaler+0x1c>)
	TIM_IC2_PSC_Config(presc);	
 80031e8:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
	TIM_IC2_PSC_Config(presc);	
 80031f0:	f00a fe86 	bl	800df00 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80031f4:	4803      	ldr	r0, [pc, #12]	; (8003204 <counterSetIc2Prescaler+0x20>)
}
 80031f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80031fa:	f00a bf9b 	b.w	800e134 <DMA_Restart>
 80031fe:	bf00      	nop
 8003200:	20004848 	.word	0x20004848
 8003204:	2000d1c4 	.word	0x2000d1c4

08003208 <counterIc1DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <counterIc1DutyCycleInit+0xc>)
 800320a:	2201      	movs	r2, #1
 800320c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
	TIM_IC_DutyCycle_Init();	
 8003210:	f00a bcca 	b.w	800dba8 <TIM_IC_DutyCycle_Init>
 8003214:	20004848 	.word	0x20004848

08003218 <counterIc1DutyCycleDeinit>:
void counterIc1DutyCycleDeinit(void){	
 8003218:	b508      	push	{r3, lr}
	TIM_IC_DutyCycle_Deinit();		
 800321a:	f00a fd39 	bl	800dc90 <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 800321e:	4b02      	ldr	r3, [pc, #8]	; (8003228 <counterIc1DutyCycleDeinit+0x10>)
 8003220:	2200      	movs	r2, #0
 8003222:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
}
 8003226:	bd08      	pop	{r3, pc}
 8003228:	20004848 	.word	0x20004848

0800322c <counterIc2DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <counterIc2DutyCycleInit+0xc>)
 800322e:	2202      	movs	r2, #2
 8003230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
	TIM_IC_DutyCycle_Init();	
 8003234:	f00a bcb8 	b.w	800dba8 <TIM_IC_DutyCycle_Init>
 8003238:	20004848 	.word	0x20004848

0800323c <counterIc2DutyCycleDeinit>:
 800323c:	b508      	push	{r3, lr}
 800323e:	f00a fd27 	bl	800dc90 <TIM_IC_DutyCycle_Deinit>
 8003242:	4b02      	ldr	r3, [pc, #8]	; (800324c <counterIc2DutyCycleDeinit+0x10>)
 8003244:	2200      	movs	r2, #0
 8003246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800324a:	bd08      	pop	{r3, pc}
 800324c:	20004848 	.word	0x20004848

08003250 <counterIcDutyCycleEnable>:
	TIM_IC_DutyCycle_Start();
 8003250:	f00a bd72 	b.w	800dd38 <TIM_IC_DutyCycle_Start>

08003254 <counterIcDutyCycleDisable>:
	TIM_IC_DutyCycle_Stop();
 8003254:	f00a bdaa 	b.w	800ddac <TIM_IC_DutyCycle_Stop>

08003258 <counterSetIcTi1_RisingFalling>:
void counterSetIcTi1_RisingFalling(void){	
 8003258:	b508      	push	{r3, lr}
	TIM_IC1_RisingFalling();	
 800325a:	f00a fe6f 	bl	800df3c <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 800325e:	4802      	ldr	r0, [pc, #8]	; (8003268 <counterSetIcTi1_RisingFalling+0x10>)
}	
 8003260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 8003264:	f00a bf66 	b.w	800e134 <DMA_Restart>
 8003268:	2000d0f8 	.word	0x2000d0f8

0800326c <counterSetIcTi1_Rising>:
	counter.eventChan1 = EVENT_RISING;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <counterSetIcTi1_Rising+0xc>)
 800326e:	2200      	movs	r2, #0
 8003270:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
	TIM_IC1_RisingOnly();	
 8003274:	f00a be6a 	b.w	800df4c <TIM_IC1_RisingOnly>
 8003278:	20004848 	.word	0x20004848

0800327c <counterSetIcTi1_Falling>:
	counter.eventChan1 = EVENT_FALLING;
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <counterSetIcTi1_Falling+0xc>)
 800327e:	2201      	movs	r2, #1
 8003280:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
	TIM_IC1_FallingOnly();	
 8003284:	f00a be6a 	b.w	800df5c <TIM_IC1_FallingOnly>
 8003288:	20004848 	.word	0x20004848

0800328c <counterSetIcTi2_RisingFalling>:
void counterSetIcTi2_RisingFalling(void){
 800328c:	b508      	push	{r3, lr}
	TIM_IC2_RisingFalling();
 800328e:	f00a fe71 	bl	800df74 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003292:	4802      	ldr	r0, [pc, #8]	; (800329c <counterSetIcTi2_RisingFalling+0x10>)
}	
 8003294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003298:	f00a bf4c 	b.w	800e134 <DMA_Restart>
 800329c:	2000d1c4 	.word	0x2000d1c4

080032a0 <counterSetIcTi2_Rising>:
	counter.eventChan2 = EVENT_RISING;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <counterSetIcTi2_Rising+0xc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
	TIM_IC2_RisingOnly();	
 80032a8:	f00a be6c 	b.w	800df84 <TIM_IC2_RisingOnly>
 80032ac:	20004848 	.word	0x20004848

080032b0 <counterSetIcTi2_Falling>:
	counter.eventChan2 = EVENT_FALLING;
 80032b0:	4b02      	ldr	r3, [pc, #8]	; (80032bc <counterSetIcTi2_Falling+0xc>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
	TIM_IC2_FallingOnly();	
 80032b8:	f00a be6c 	b.w	800df94 <TIM_IC2_FallingOnly>
 80032bc:	20004848 	.word	0x20004848

080032c0 <counterSetTiSequence_AB>:
	TIM_TI_Sequence_AB();
 80032c0:	f00a be74 	b.w	800dfac <TIM_TI_Sequence_AB>

080032c4 <counterSetTiSequence_BA>:
	TIM_TI_Sequence_BA();
 80032c4:	f00a be8e 	b.w	800dfe4 <TIM_TI_Sequence_BA>

080032c8 <counterSetTiMode_Independent>:
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <counterSetTiMode_Independent+0xc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20004848 	.word	0x20004848

080032d8 <counterSetTiMode_Dependent>:
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 80032d8:	4b02      	ldr	r3, [pc, #8]	; (80032e4 <counterSetTiMode_Dependent+0xc>)
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
} 
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20004848 	.word	0x20004848

080032e8 <counterSetTiTimeout>:
	counter.counterIc.tiTimeout = timeout;				
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <counterSetTiTimeout+0x8>)
 80032ea:	f8c3 0394 	str.w	r0, [r3, #916]	; 0x394
}
 80032ee:	4770      	bx	lr
 80032f0:	20004848 	.word	0x20004848

080032f4 <COUNTER_ETR_DMA_CpltCallback>:
{			
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.state == COUNTER_ETR){
 80032f8:	4c54      	ldr	r4, [pc, #336]	; (800344c <COUNTER_ETR_DMA_CpltCallback+0x158>)
 80032fa:	f894 53b8 	ldrb.w	r5, [r4, #952]	; 0x3b8
{			
 80032fe:	b083      	sub	sp, #12
	if(counter.state == COUNTER_ETR){
 8003300:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003302:	230e      	movs	r3, #14
	if(counter.state == COUNTER_ETR){
 8003304:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003306:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.state == COUNTER_ETR){
 800330a:	d017      	beq.n	800333c <COUNTER_ETR_DMA_CpltCallback+0x48>
	}else if(counter.state == COUNTER_REF){		
 800330c:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003310:	2b04      	cmp	r3, #4
 8003312:	d002      	beq.n	800331a <COUNTER_ETR_DMA_CpltCallback+0x26>
}
 8003314:	b003      	add	sp, #12
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 800331a:	f894 33b9 	ldrb.w	r3, [r4, #953]	; 0x3b9
 800331e:	2b00      	cmp	r3, #0
 8003320:	d160      	bne.n	80033e4 <COUNTER_ETR_DMA_CpltCallback+0xf0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 8003322:	f894 33b9 	ldrb.w	r3, [r4, #953]	; 0x3b9
 8003326:	b11b      	cbz	r3, 8003330 <COUNTER_ETR_DMA_CpltCallback+0x3c>
 8003328:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d16e      	bne.n	800340e <COUNTER_ETR_DMA_CpltCallback+0x11a>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003330:	2301      	movs	r3, #1
 8003332:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
}
 8003336:	b003      	add	sp, #12
 8003338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 800333c:	f00a feba 	bl	800e0b4 <TIM_ETPS_GetPrescaler>
		float gateFreq = ((double)tim4clk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8003342:	f884 03a0 	strb.w	r0, [r4, #928]	; 0x3a0
		float gateFreq = ((double)tim4clk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	f8b4 b398 	ldrh.w	fp, [r4, #920]	; 0x398
 800334c:	f8b4 a39a 	ldrh.w	sl, [r4, #922]	; 0x39a
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8003350:	f8d4 73a4 	ldr.w	r7, [r4, #932]	; 0x3a4
 8003354:	f894 63a0 	ldrb.w	r6, [r4, #928]	; 0x3a0
		float gateFreq = ((double)tim4clk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8003358:	f7fd f88c 	bl	8000474 <__aeabi_ui2d>
 800335c:	fa1f fa8a 	uxth.w	sl, sl
 8003360:	4680      	mov	r8, r0
 8003362:	fa1f fb8b 	uxth.w	fp, fp
 8003366:	f10a 0001 	add.w	r0, sl, #1
 800336a:	fb0b 0000 	mla	r0, fp, r0, r0
 800336e:	4689      	mov	r9, r1
 8003370:	f7fd f890 	bl	8000494 <__aeabi_i2d>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4640      	mov	r0, r8
 800337a:	4649      	mov	r1, r9
 800337c:	f7fd fa1e 	bl	80007bc <__aeabi_ddiv>
 8003380:	f7fd fbea 	bl	8000b58 <__aeabi_d2f>
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8003384:	f7fd f898 	bl	80004b8 <__aeabi_f2d>
 8003388:	4680      	mov	r8, r0
 800338a:	4638      	mov	r0, r7
 800338c:	4689      	mov	r9, r1
 800338e:	f7fd f871 	bl	8000474 <__aeabi_ui2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4640      	mov	r0, r8
 8003398:	4649      	mov	r1, r9
 800339a:	f7fd f8e5 	bl	8000568 <__aeabi_dmul>
 800339e:	b2f6      	uxtb	r6, r6
 80033a0:	4680      	mov	r8, r0
 80033a2:	4630      	mov	r0, r6
 80033a4:	4689      	mov	r9, r1
 80033a6:	f7fd f875 	bl	8000494 <__aeabi_i2d>
 80033aa:	460b      	mov	r3, r1
 80033ac:	4602      	mov	r2, r0
 80033ae:	4649      	mov	r1, r9
 80033b0:	4640      	mov	r0, r8
 80033b2:	f7fd f8d9 	bl	8000568 <__aeabi_dmul>
 80033b6:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		TIM_ETRP_Config(counter.counterEtr.freq);	
 80033ba:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 80033be:	f00a fd13 	bl	800dde8 <TIM_ETRP_Config>
		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 80033c2:	f894 33b9 	ldrb.w	r3, [r4, #953]	; 0x3b9
 80033c6:	b923      	cbnz	r3, 80033d2 <COUNTER_ETR_DMA_CpltCallback+0xde>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80033c8:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
}
 80033cc:	b003      	add	sp, #12
 80033ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <COUNTER_ETR_DMA_CpltCallback+0x160>)
 80033d4:	2300      	movs	r3, #0
 80033d6:	6810      	ldr	r0, [r2, #0]
 80033d8:	f10d 0102 	add.w	r1, sp, #2
 80033dc:	aa01      	add	r2, sp, #4
 80033de:	f005 ffcd 	bl	800937c <xQueueGenericSendFromISR>
 80033e2:	e797      	b.n	8003314 <COUNTER_ETR_DMA_CpltCallback+0x20>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 80033e4:	f006 fca6 	bl	8009d34 <xTaskGetTickCount>
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <COUNTER_ETR_DMA_CpltCallback+0x164>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1ac0      	subs	r0, r0, r3
 80033ee:	2863      	cmp	r0, #99	; 0x63
 80033f0:	d897      	bhi.n	8003322 <COUNTER_ETR_DMA_CpltCallback+0x2e>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <COUNTER_ETR_DMA_CpltCallback+0x160>)
 80033f4:	2300      	movs	r3, #0
 80033f6:	6810      	ldr	r0, [r2, #0]
 80033f8:	f10d 0102 	add.w	r1, sp, #2
 80033fc:	aa01      	add	r2, sp, #4
 80033fe:	f005 ffbd 	bl	800937c <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 8003402:	f00a fe2b 	bl	800e05c <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 8003406:	2301      	movs	r3, #1
 8003408:	f884 33ba 	strb.w	r3, [r4, #954]	; 0x3ba
 800340c:	e782      	b.n	8003314 <COUNTER_ETR_DMA_CpltCallback+0x20>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 800340e:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 8003412:	f8d4 53a4 	ldr.w	r5, [r4, #932]	; 0x3a4
 8003416:	f7fd f82d 	bl	8000474 <__aeabi_ui2d>
 800341a:	4606      	mov	r6, r0
 800341c:	4628      	mov	r0, r5
 800341e:	460f      	mov	r7, r1
 8003420:	f7fd f828 	bl	8000474 <__aeabi_ui2d>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4630      	mov	r0, r6
 800342a:	4639      	mov	r1, r7
 800342c:	f7fd f9c6 	bl	80007bc <__aeabi_ddiv>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <COUNTER_ETR_DMA_CpltCallback+0x160>)
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8003432:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003436:	2300      	movs	r3, #0
 8003438:	6810      	ldr	r0, [r2, #0]
 800343a:	f10d 0102 	add.w	r1, sp, #2
 800343e:	aa01      	add	r2, sp, #4
 8003440:	f005 ff9c 	bl	800937c <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 8003444:	2300      	movs	r3, #0
 8003446:	f884 33ba 	strb.w	r3, [r4, #954]	; 0x3ba
 800344a:	e763      	b.n	8003314 <COUNTER_ETR_DMA_CpltCallback+0x20>
 800344c:	20004848 	.word	0x20004848
 8003450:	2000d1c0 	.word	0x2000d1c0
 8003454:	200047cc 	.word	0x200047cc
 8003458:	20004840 	.word	0x20004840

0800345c <counterIcProcess>:
{	
 800345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.bin != BIN0){
 8003460:	4c4e      	ldr	r4, [pc, #312]	; (800359c <counterIcProcess+0x140>)
{	
 8003462:	b083      	sub	sp, #12
	if(counter.bin != BIN0){
 8003464:	f894 33c2 	ldrb.w	r3, [r4, #962]	; 0x3c2
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003468:	220e      	movs	r2, #14
 800346a:	f8ad 2002 	strh.w	r2, [sp, #2]
	if(counter.bin != BIN0){
 800346e:	b983      	cbnz	r3, 8003492 <counterIcProcess+0x36>
 8003470:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	}else if(counter.bin != BIN1){
 8003474:	f894 33c2 	ldrb.w	r3, [r4, #962]	; 0x3c2
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <counterIcProcess+0x30>
		counter.bin = BIN1;
 800347c:	2301      	movs	r3, #1
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 800347e:	4848      	ldr	r0, [pc, #288]	; (80035a0 <counterIcProcess+0x144>)
		counter.bin = BIN1;
 8003480:	f884 33c2 	strb.w	r3, [r4, #962]	; 0x3c2
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8003484:	f00a fe4c 	bl	800e120 <DMA_TransferComplete>
 8003488:	2800      	cmp	r0, #0
 800348a:	d144      	bne.n	8003516 <counterIcProcess+0xba>
}
 800348c:	b003      	add	sp, #12
 800348e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.bin = BIN0;
 8003492:	2500      	movs	r5, #0
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8003494:	4843      	ldr	r0, [pc, #268]	; (80035a4 <counterIcProcess+0x148>)
		counter.bin = BIN0;
 8003496:	f884 53c2 	strb.w	r5, [r4, #962]	; 0x3c2
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 800349a:	f00a fe41 	bl	800e120 <DMA_TransferComplete>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d0f4      	beq.n	800348c <counterIcProcess+0x30>
			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 80034a2:	f00a fe19 	bl	800e0d8 <TIM_IC1PSC_GetPrescaler>
 80034a6:	f884 0390 	strb.w	r0, [r4, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 80034aa:	88e2      	ldrh	r2, [r4, #6]
			counter.counterIc.ic1freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <counterIcProcess+0x14c>)
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 80034ae:	3203      	adds	r2, #3
			counter.counterIc.ic1freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80034b0:	681b      	ldr	r3, [r3, #0]
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 80034b2:	f854 b022 	ldr.w	fp, [r4, r2, lsl #2]
 80034b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
			counter.counterIc.ic1freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80034ba:	88a2      	ldrh	r2, [r4, #4]
 80034bc:	f894 0390 	ldrb.w	r0, [r4, #912]	; 0x390
 80034c0:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 80034c4:	fb03 f000 	mul.w	r0, r3, r0
 80034c8:	fb00 0002 	mla	r0, r0, r2, r0
 80034cc:	f7fc ffd2 	bl	8000474 <__aeabi_ui2d>
 80034d0:	fa1f f888 	uxth.w	r8, r8
 80034d4:	4606      	mov	r6, r0
 80034d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80034da:	460f      	mov	r7, r1
 80034dc:	f7fc ffda 	bl	8000494 <__aeabi_i2d>
 80034e0:	4680      	mov	r8, r0
 80034e2:	ebab 000a 	sub.w	r0, fp, sl
 80034e6:	4689      	mov	r9, r1
 80034e8:	f7fc ffc4 	bl	8000474 <__aeabi_ui2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4640      	mov	r0, r8
 80034f2:	4649      	mov	r1, r9
 80034f4:	f7fd f962 	bl	80007bc <__aeabi_ddiv>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4630      	mov	r0, r6
 80034fe:	4639      	mov	r1, r7
 8003500:	f7fd f832 	bl	8000568 <__aeabi_dmul>
 8003504:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			DMA_Restart(&hdma_tim2_ch1);
 8003508:	4826      	ldr	r0, [pc, #152]	; (80035a4 <counterIcProcess+0x148>)
 800350a:	f00a fe13 	bl	800e134 <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800350e:	4a27      	ldr	r2, [pc, #156]	; (80035ac <counterIcProcess+0x150>)
			counter.icChannel1 = COUNTER_IRQ_IC;
 8003510:	f884 53bb 	strb.w	r5, [r4, #955]	; 0x3bb
 8003514:	e038      	b.n	8003588 <counterIcProcess+0x12c>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 8003516:	f00a fdf1 	bl	800e0fc <TIM_IC2PSC_GetPrescaler>
 800351a:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 800351e:	8922      	ldrh	r2, [r4, #8]
			counter.counterIc.ic2freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <counterIcProcess+0x14c>)
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8003522:	3271      	adds	r2, #113	; 0x71
			counter.counterIc.ic2freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8003524:	681b      	ldr	r3, [r3, #0]
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8003526:	f854 b022 	ldr.w	fp, [r4, r2, lsl #2]
 800352a:	f8d4 a1c8 	ldr.w	sl, [r4, #456]	; 0x1c8
			counter.counterIc.ic2freq = (double)(tim2clk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 800352e:	88a2      	ldrh	r2, [r4, #4]
 8003530:	f894 0391 	ldrb.w	r0, [r4, #913]	; 0x391
 8003534:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8003538:	fb03 f000 	mul.w	r0, r3, r0
 800353c:	fb00 0002 	mla	r0, r0, r2, r0
 8003540:	f7fc ff98 	bl	8000474 <__aeabi_ui2d>
 8003544:	fa1f f888 	uxth.w	r8, r8
 8003548:	4606      	mov	r6, r0
 800354a:	f108 30ff 	add.w	r0, r8, #4294967295
 800354e:	460f      	mov	r7, r1
 8003550:	f7fc ffa0 	bl	8000494 <__aeabi_i2d>
 8003554:	4680      	mov	r8, r0
 8003556:	ebab 000a 	sub.w	r0, fp, sl
 800355a:	4689      	mov	r9, r1
 800355c:	f7fc ff8a 	bl	8000474 <__aeabi_ui2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4640      	mov	r0, r8
 8003566:	4649      	mov	r1, r9
 8003568:	f7fd f928 	bl	80007bc <__aeabi_ddiv>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4630      	mov	r0, r6
 8003572:	4639      	mov	r1, r7
 8003574:	f7fc fff8 	bl	8000568 <__aeabi_dmul>
 8003578:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 800357c:	4808      	ldr	r0, [pc, #32]	; (80035a0 <counterIcProcess+0x144>)
 800357e:	f00a fdd9 	bl	800e134 <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <counterIcProcess+0x150>)
			counter.icChannel2 = COUNTER_IRQ_IC;
 8003584:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003588:	462b      	mov	r3, r5
 800358a:	6810      	ldr	r0, [r2, #0]
 800358c:	f10d 0102 	add.w	r1, sp, #2
 8003590:	aa01      	add	r2, sp, #4
 8003592:	f005 fef3 	bl	800937c <xQueueGenericSendFromISR>
}
 8003596:	b003      	add	sp, #12
 8003598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359c:	20004848 	.word	0x20004848
 80035a0:	2000d1c4 	.word	0x2000d1c4
 80035a4:	2000d0f8 	.word	0x2000d0f8
 80035a8:	2000d248 	.word	0x2000d248
 80035ac:	200047cc 	.word	0x200047cc

080035b0 <counterPeriodElapsedCallback>:
{
 80035b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80035b4:	4c79      	ldr	r4, [pc, #484]	; (800379c <counterPeriodElapsedCallback+0x1ec>)
 80035b6:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
{
 80035ba:	b083      	sub	sp, #12
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d141      	bne.n	8003644 <counterPeriodElapsedCallback+0x94>
 80035c0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		if(counter.state == COUNTER_IC){
 80035c4:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d036      	beq.n	800363a <counterPeriodElapsedCallback+0x8a>
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80035cc:	230e      	movs	r3, #14
 80035ce:	f8ad 3002 	strh.w	r3, [sp, #2]
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 80035d2:	f006 fbb5 	bl	8009d40 <xTaskGetTickCountFromISR>
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <counterPeriodElapsedCallback+0x1f0>)
 80035d8:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1ac0      	subs	r0, r0, r3
 80035e0:	4290      	cmp	r0, r2
 80035e2:	f200 808c 	bhi.w	80036fe <counterPeriodElapsedCallback+0x14e>
		if(counter.abba == BIN0){			
 80035e6:	f894 33c3 	ldrb.w	r3, [r4, #963]	; 0x3c3
 80035ea:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d16a      	bne.n	80036c8 <counterPeriodElapsedCallback+0x118>
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 80035f2:	486c      	ldr	r0, [pc, #432]	; (80037a4 <counterPeriodElapsedCallback+0x1f4>)
 80035f4:	f00a fd94 	bl	800e120 <DMA_TransferComplete>
 80035f8:	b308      	cbz	r0, 800363e <counterPeriodElapsedCallback+0x8e>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)tim2clk;
 80035fa:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 80035fe:	f7fc ff39 	bl	8000474 <__aeabi_ui2d>
 8003602:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <counterPeriodElapsedCallback+0x1f8>)
 8003604:	4680      	mov	r8, r0
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4689      	mov	r9, r1
 800360a:	f7fc ff33 	bl	8000474 <__aeabi_ui2d>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4640      	mov	r0, r8
 8003614:	4649      	mov	r1, r9
 8003616:	f7fd f8d1 	bl	80007bc <__aeabi_ddiv>
 800361a:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();		
 800361e:	f00a fa77 	bl	800db10 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003622:	4a62      	ldr	r2, [pc, #392]	; (80037ac <counterPeriodElapsedCallback+0x1fc>)
 8003624:	4633      	mov	r3, r6
				counter.tiState = SEND_TI_DATA;						
 8003626:	2502      	movs	r5, #2
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003628:	6810      	ldr	r0, [r2, #0]
				counter.tiState = SEND_TI_DATA;						
 800362a:	f884 53be 	strb.w	r5, [r4, #958]	; 0x3be
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800362e:	aa01      	add	r2, sp, #4
 8003630:	eb0d 0105 	add.w	r1, sp, r5
 8003634:	f005 fea2 	bl	800937c <xQueueGenericSendFromISR>
 8003638:	e001      	b.n	800363e <counterPeriodElapsedCallback+0x8e>
			counterIcProcess();
 800363a:	f7ff ff0f 	bl	800345c <counterIcProcess>
}
 800363e:	b003      	add	sp, #12
 8003640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003644:	f894 53bd 	ldrb.w	r5, [r4, #957]	; 0x3bd
 8003648:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800364a:	230e      	movs	r3, #14
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 800364c:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800364e:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003652:	d064      	beq.n	800371e <counterPeriodElapsedCallback+0x16e>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 8003654:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 8003658:	2b02      	cmp	r3, #2
 800365a:	d1f0      	bne.n	800363e <counterPeriodElapsedCallback+0x8e>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 800365c:	4851      	ldr	r0, [pc, #324]	; (80037a4 <counterPeriodElapsedCallback+0x1f4>)
 800365e:	f00a fd5f 	bl	800e120 <DMA_TransferComplete>
 8003662:	2800      	cmp	r0, #0
 8003664:	d0eb      	beq.n	800363e <counterPeriodElapsedCallback+0x8e>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 8003666:	6920      	ldr	r0, [r4, #16]
 8003668:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
 800366c:	f7fc ff02 	bl	8000474 <__aeabi_ui2d>
 8003670:	4606      	mov	r6, r0
 8003672:	4628      	mov	r0, r5
 8003674:	460f      	mov	r7, r1
 8003676:	f7fc fefd 	bl	8000474 <__aeabi_ui2d>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4630      	mov	r0, r6
 8003680:	4639      	mov	r1, r7
 8003682:	f7fd f89b 	bl	80007bc <__aeabi_ddiv>
 8003686:	2200      	movs	r2, #0
 8003688:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <counterPeriodElapsedCallback+0x200>)
 800368a:	f7fc ff6d 	bl	8000568 <__aeabi_dmul>
 800368e:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)tim2clk;
 8003692:	6920      	ldr	r0, [r4, #16]
 8003694:	f7fc feee 	bl	8000474 <__aeabi_ui2d>
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <counterPeriodElapsedCallback+0x1f8>)
 800369a:	4606      	mov	r6, r0
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	460f      	mov	r7, r1
 80036a0:	f7fc fee8 	bl	8000474 <__aeabi_ui2d>
 80036a4:	460b      	mov	r3, r1
 80036a6:	4602      	mov	r2, r0
 80036a8:	4639      	mov	r1, r7
 80036aa:	4630      	mov	r0, r6
 80036ac:	f7fd f886 	bl	80007bc <__aeabi_ddiv>
 80036b0:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 80036b4:	f00a fa54 	bl	800db60 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 80036b8:	f894 33c2 	ldrb.w	r3, [r4, #962]	; 0x3c2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d164      	bne.n	800378a <counterPeriodElapsedCallback+0x1da>
				counter.bin = BIN1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f884 33c2 	strb.w	r3, [r4, #962]	; 0x3c2
 80036c6:	e7ba      	b.n	800363e <counterPeriodElapsedCallback+0x8e>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 80036c8:	483a      	ldr	r0, [pc, #232]	; (80037b4 <counterPeriodElapsedCallback+0x204>)
 80036ca:	f00a fd29 	bl	800e120 <DMA_TransferComplete>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d0b5      	beq.n	800363e <counterPeriodElapsedCallback+0x8e>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)tim2clk;
 80036d2:	6920      	ldr	r0, [r4, #16]
 80036d4:	f7fc fece 	bl	8000474 <__aeabi_ui2d>
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <counterPeriodElapsedCallback+0x1f8>)
 80036da:	4606      	mov	r6, r0
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	460f      	mov	r7, r1
 80036e0:	f7fc fec8 	bl	8000474 <__aeabi_ui2d>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4630      	mov	r0, r6
 80036ea:	4639      	mov	r1, r7
 80036ec:	f7fd f866 	bl	80007bc <__aeabi_ddiv>
 80036f0:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();					
 80036f4:	f00a fa0c 	bl	800db10 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80036f8:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <counterPeriodElapsedCallback+0x1fc>)
 80036fa:	462b      	mov	r3, r5
 80036fc:	e793      	b.n	8003626 <counterPeriodElapsedCallback+0x76>
		TIM_TI_Stop();					
 80036fe:	f00a fa07 	bl	800db10 <TIM_TI_Stop>
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003702:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <counterPeriodElapsedCallback+0x1fc>)
 8003704:	462b      	mov	r3, r5
 8003706:	6810      	ldr	r0, [r2, #0]
		counter.tiState = TIMEOUT;	
 8003708:	2501      	movs	r5, #1
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800370a:	aa01      	add	r2, sp, #4
 800370c:	f10d 0102 	add.w	r1, sp, #2
		counter.tiState = TIMEOUT;	
 8003710:	f884 53be 	strb.w	r5, [r4, #958]	; 0x3be
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003714:	f005 fe32 	bl	800937c <xQueueGenericSendFromISR>
}
 8003718:	b003      	add	sp, #12
 800371a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 800371e:	4825      	ldr	r0, [pc, #148]	; (80037b4 <counterPeriodElapsedCallback+0x204>)
 8003720:	f00a fcfe 	bl	800e120 <DMA_TransferComplete>
 8003724:	2800      	cmp	r0, #0
 8003726:	d08a      	beq.n	800363e <counterPeriodElapsedCallback+0x8e>
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 8003728:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800372c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003730:	f7fc fea0 	bl	8000474 <__aeabi_ui2d>
 8003734:	4606      	mov	r6, r0
 8003736:	4640      	mov	r0, r8
 8003738:	460f      	mov	r7, r1
 800373a:	f7fc fe9b 	bl	8000474 <__aeabi_ui2d>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4630      	mov	r0, r6
 8003744:	4639      	mov	r1, r7
 8003746:	f7fd f839 	bl	80007bc <__aeabi_ddiv>
 800374a:	2200      	movs	r2, #0
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <counterPeriodElapsedCallback+0x200>)
 800374e:	f7fc ff0b 	bl	8000568 <__aeabi_dmul>
 8003752:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)tim2clk;
 8003756:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800375a:	f7fc fe8b 	bl	8000474 <__aeabi_ui2d>
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <counterPeriodElapsedCallback+0x1f8>)
 8003760:	4606      	mov	r6, r0
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	460f      	mov	r7, r1
 8003766:	f7fc fe85 	bl	8000474 <__aeabi_ui2d>
 800376a:	460b      	mov	r3, r1
 800376c:	4602      	mov	r2, r0
 800376e:	4639      	mov	r1, r7
 8003770:	4630      	mov	r0, r6
 8003772:	f7fd f823 	bl	80007bc <__aeabi_ddiv>
 8003776:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();		
 800377a:	f00a f9f1 	bl	800db60 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 800377e:	f894 33c2 	ldrb.w	r3, [r4, #962]	; 0x3c2
 8003782:	b913      	cbnz	r3, 800378a <counterPeriodElapsedCallback+0x1da>
				counter.bin = BIN1;
 8003784:	f884 53c2 	strb.w	r5, [r4, #962]	; 0x3c2
 8003788:	e759      	b.n	800363e <counterPeriodElapsedCallback+0x8e>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <counterPeriodElapsedCallback+0x1fc>)
 800378c:	2300      	movs	r3, #0
 800378e:	6810      	ldr	r0, [r2, #0]
 8003790:	f10d 0102 	add.w	r1, sp, #2
 8003794:	aa01      	add	r2, sp, #4
 8003796:	f005 fdf1 	bl	800937c <xQueueGenericSendFromISR>
}
 800379a:	e750      	b.n	800363e <counterPeriodElapsedCallback+0x8e>
 800379c:	20004848 	.word	0x20004848
 80037a0:	20004840 	.word	0x20004840
 80037a4:	2000d1c4 	.word	0x2000d1c4
 80037a8:	2000d248 	.word	0x2000d248
 80037ac:	200047cc 	.word	0x200047cc
 80037b0:	40590000 	.word	0x40590000
 80037b4:	2000d0f8 	.word	0x2000d0f8

080037b8 <counterEtrRefSetDefault>:
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
	if(counter.state==COUNTER_ETR){
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <counterEtrRefSetDefault+0x54>)
 80037ba:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 80037be:	2a01      	cmp	r2, #1
 80037c0:	d017      	beq.n	80037f2 <counterEtrRefSetDefault+0x3a>
		counter.counterEtr.psc = TIM4_PSC;	
		counter.counterEtr.arr = TIM4_ARR;
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
	}else{
		counter.counterEtr.psc = 59999;	
 80037c2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80037c6:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 80037ca:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 80037ce:	f8b3 139a 	ldrh.w	r1, [r3, #922]	; 0x39a
 80037d2:	f8b3 2398 	ldrh.w	r2, [r3, #920]	; 0x398
 80037d6:	3201      	adds	r2, #1
 80037d8:	fb02 2201 	mla	r2, r2, r1, r2
 80037dc:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
	counter.counterEtr.buffer = 0;
 80037e0:	2200      	movs	r2, #0
	counter.counterEtr.etrp = 1;
 80037e2:	2101      	movs	r1, #1
 80037e4:	f883 13a0 	strb.w	r1, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 80037e8:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 80037ec:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
}
 80037f0:	4770      	bx	lr
		counter.counterEtr.psc = TIM4_PSC;	
 80037f2:	f641 401f 	movw	r0, #7199	; 0x1c1f
		counter.counterEtr.arr = TIM4_ARR;
 80037f6:	f240 31e7 	movw	r1, #999	; 0x3e7
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 80037fa:	2264      	movs	r2, #100	; 0x64
		counter.counterEtr.psc = TIM4_PSC;	
 80037fc:	f8a3 039a 	strh.w	r0, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 8003800:	f8a3 1398 	strh.w	r1, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8003804:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 8003808:	e7ea      	b.n	80037e0 <counterEtrRefSetDefault+0x28>
 800380a:	bf00      	nop
 800380c:	20004848 	.word	0x20004848

08003810 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8003810:	b538      	push	{r3, r4, r5, lr}
	if(counter.state == COUNTER_IC){
 8003812:	4c15      	ldr	r4, [pc, #84]	; (8003868 <counterIcTiSetDefault+0x58>)
 8003814:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b02      	cmp	r3, #2
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
		counter.counterIc.ic2BufferSize = 2;
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 800381c:	f04f 0201 	mov.w	r2, #1
	if(counter.state == COUNTER_IC){
 8003820:	d01b      	beq.n	800385a <counterIcTiSetDefault+0x4a>
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
		counter.counterIc.ic2BufferSize = 1;
		counter.counterIc.tiTimeout = 10000;
		counter.eventChan1 = EVENT_RISING;
 8003822:	2300      	movs	r3, #0
		counter.counterIc.tiTimeout = 10000;
 8003824:	f242 7110 	movw	r1, #10000	; 0x2710
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 8003828:	80e2      	strh	r2, [r4, #6]
		counter.counterIc.ic2BufferSize = 1;
 800382a:	8122      	strh	r2, [r4, #8]
		counter.counterIc.tiTimeout = 10000;
 800382c:	f8c4 1394 	str.w	r1, [r4, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 8003830:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0
		counter.eventChan2 = EVENT_RISING;
 8003834:	f884 33c1 	strb.w	r3, [r4, #961]	; 0x3c1
	}
	counter.counterIc.ic1psc = 1;
 8003838:	2501      	movs	r5, #1
	counter.counterIc.ic2psc = 1;
	TIM_IC1_PSC_Config(1);
 800383a:	4628      	mov	r0, r5
	counter.counterIc.ic1psc = 1;
 800383c:	f884 5390 	strb.w	r5, [r4, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 8003840:	f884 5391 	strb.w	r5, [r4, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 8003844:	f00a fb3e 	bl	800dec4 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 8003848:	4628      	mov	r0, r5
 800384a:	f00a fb59 	bl	800df00 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 800384e:	2200      	movs	r2, #0
	counter.counterIc.arr = 0xFFFFFFFF;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
	counter.counterIc.psc = 0;		
 8003854:	80a2      	strh	r2, [r4, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 8003856:	6023      	str	r3, [r4, #0]
}
 8003858:	bd38      	pop	{r3, r4, r5, pc}
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 800385a:	80e3      	strh	r3, [r4, #6]
		counter.counterIc.ic2BufferSize = 2;
 800385c:	8123      	strh	r3, [r4, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 800385e:	f884 23bb 	strb.w	r2, [r4, #955]	; 0x3bb
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 8003862:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
 8003866:	e7e7      	b.n	8003838 <counterIcTiSetDefault+0x28>
 8003868:	20004848 	.word	0x20004848

0800386c <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8003870:	ad02      	add	r5, sp, #8
 8003872:	f64f 73ff 	movw	r3, #65535	; 0xffff
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8003876:	2200      	movs	r2, #0
 8003878:	2102      	movs	r1, #2
 800387a:	2005      	movs	r0, #5
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
	generator.bufferMemory=generatorBuffer;
 800387c:	4c52      	ldr	r4, [pc, #328]	; (80039c8 <GeneratorTask+0x15c>)
	uint16_t message = 0xFFFF;
 800387e:	f825 3d02 	strh.w	r3, [r5, #-2]!
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8003882:	f005 fb25 	bl	8008ed0 <xQueueGenericCreate>
 8003886:	4e51      	ldr	r6, [pc, #324]	; (80039cc <GeneratorTask+0x160>)
	generator.bufferMemory=generatorBuffer;
 8003888:	4a51      	ldr	r2, [pc, #324]	; (80039d0 <GeneratorTask+0x164>)
 800388a:	6022      	str	r2, [r4, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 800388c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
	}

	generator.numOfChannles=1;
 8003890:	2701      	movs	r7, #1
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003892:	6063      	str	r3, [r4, #4]
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
	generator.pChanMem[0]=generatorBuffer;
	generator.state=GENERATOR_IDLE;
 8003894:	f04f 0800 	mov.w	r8, #0
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003898:	60e3      	str	r3, [r4, #12]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 800389a:	60a3      	str	r3, [r4, #8]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 800389c:	6123      	str	r3, [r4, #16]
	generator.numOfChannles=1;
 800389e:	75a7      	strb	r7, [r4, #22]
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 80038a0:	6263      	str	r3, [r4, #36]	; 0x24
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 80038a2:	8423      	strh	r3, [r4, #32]
	generator.DAC_res=DAC_DATA_DEPTH;
 80038a4:	230c      	movs	r3, #12
	generator.pChanMem[0]=generatorBuffer;
 80038a6:	61a2      	str	r2, [r4, #24]
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80038a8:	6030      	str	r0, [r6, #0]
	generator.state=GENERATOR_IDLE;
 80038aa:	f884 8014 	strb.w	r8, [r4, #20]
	generator.DAC_res=DAC_DATA_DEPTH;
 80038ae:	8523      	strh	r3, [r4, #40]	; 0x28
 80038b0:	e00a      	b.n	80038c8 <GeneratorTask+0x5c>
		}else if(message==MSG_GEN_START){ //start
 80038b2:	2b23      	cmp	r3, #35	; 0x23
 80038b4:	d014      	beq.n	80038e0 <GeneratorTask+0x74>
		}else if(message==MSG_GEN_STOP){ //stop
 80038b6:	2b24      	cmp	r3, #36	; 0x24
 80038b8:	d058      	beq.n	800396c <GeneratorTask+0x100>
		}else if(message==MSG_GEN_PWM_MODE){ //set PWM mode
 80038ba:	2b22      	cmp	r3, #34	; 0x22
 80038bc:	d06a      	beq.n	8003994 <GeneratorTask+0x128>
		}else if(message==MSG_GEN_DAC_MODE){ //set DAC mode
 80038be:	2b21      	cmp	r3, #33	; 0x21
 80038c0:	d06d      	beq.n	800399e <GeneratorTask+0x132>
		}else if(message==MSG_GEN_DEINIT){ //deinit
 80038c2:	2b25      	cmp	r3, #37	; 0x25
 80038c4:	d05d      	beq.n	8003982 <GeneratorTask+0x116>
 80038c6:	6830      	ldr	r0, [r6, #0]
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 80038c8:	2300      	movs	r3, #0
 80038ca:	f04f 32ff 	mov.w	r2, #4294967295
 80038ce:	4629      	mov	r1, r5
 80038d0:	f005 fdea 	bl	80094a8 <xQueueGenericReceive>
		if(message==MSG_INVALIDATE){ //invalidate
 80038d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d1ea      	bne.n	80038b2 <GeneratorTask+0x46>
			if(generator.state==GENERATOR_IDLE){}
 80038dc:	7d23      	ldrb	r3, [r4, #20]
 80038de:	e7f2      	b.n	80038c6 <GeneratorTask+0x5a>
			if(generator.state==GENERATOR_IDLE){
 80038e0:	7d23      	ldrb	r3, [r4, #20]
 80038e2:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ed      	bne.n	80038c6 <GeneratorTask+0x5a>
				if(generator.modeState==GENERATOR_DAC){
 80038ea:	7d63      	ldrb	r3, [r4, #21]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d01b      	beq.n	8003928 <GeneratorTask+0xbc>
				}else if(generator.modeState==GENERATOR_PWM){
 80038f0:	7d63      	ldrb	r3, [r4, #21]
 80038f2:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 80038f6:	b10b      	cbz	r3, 80038fc <GeneratorTask+0x90>
				generator.state=GENERATOR_RUN;
 80038f8:	7527      	strb	r7, [r4, #20]
 80038fa:	e7e4      	b.n	80038c6 <GeneratorTask+0x5a>
 * @retval None
 */
void genPwmInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 80038fc:	6860      	ldr	r0, [r4, #4]
 80038fe:	464a      	mov	r2, r9
 8003900:	4649      	mov	r1, r9
 8003902:	f008 fea1 	bl	800c648 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003906:	7da3      	ldrb	r3, [r4, #22]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d159      	bne.n	80039c0 <GeneratorTask+0x154>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 800390c:	68a0      	ldr	r0, [r4, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	2101      	movs	r1, #1
 8003912:	f008 fe99 	bl	800c648 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003916:	7da3      	ldrb	r3, [r4, #22]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d84d      	bhi.n	80039b8 <GeneratorTask+0x14c>
					PWMGeneratingEnable();
 800391c:	f008 fff4 	bl	800c908 <PWMGeneratingEnable>
				generator.state=GENERATOR_RUN;
 8003920:	7527      	strb	r7, [r4, #20]
 8003922:	e7d0      	b.n	80038c6 <GeneratorTask+0x5a>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003924:	f04f 0901 	mov.w	r9, #1
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003928:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800392c:	fa5f fa89 	uxtb.w	sl, r9
 8003930:	6858      	ldr	r0, [r3, #4]
 8003932:	4651      	mov	r1, sl
 8003934:	2200      	movs	r2, #0
 8003936:	f008 fe87 	bl	800c648 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 800393a:	7da3      	ldrb	r3, [r4, #22]
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 800393c:	f109 0e06 	add.w	lr, r9, #6
 8003940:	f109 0c10 	add.w	ip, r9, #16
		if(generator.numOfChannles>i){
 8003944:	4553      	cmp	r3, sl
			DAC_DMA_Reconfig(i,NULL,0);
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	4611      	mov	r1, r2
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 800394c:	4650      	mov	r0, sl
 800394e:	bf86      	itte	hi
 8003950:	f854 102e 	ldrhi.w	r1, [r4, lr, lsl #2]
 8003954:	f834 201c 	ldrhhi.w	r2, [r4, ip, lsl #1]
			DAC_DMA_Reconfig(i,NULL,0);
 8003958:	4650      	movls	r0, sl
 800395a:	f007 ffff 	bl	800b95c <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 800395e:	f1b9 0f00 	cmp.w	r9, #0
 8003962:	d0df      	beq.n	8003924 <GeneratorTask+0xb8>
					GeneratingEnable();
 8003964:	f008 f81e 	bl	800b9a4 <GeneratingEnable>
				generator.state=GENERATOR_RUN;
 8003968:	7527      	strb	r7, [r4, #20]
 800396a:	e7ac      	b.n	80038c6 <GeneratorTask+0x5a>
			if(generator.state==GENERATOR_RUN){
 800396c:	7d23      	ldrb	r3, [r4, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d1a9      	bne.n	80038c6 <GeneratorTask+0x5a>
				if(generator.modeState==GENERATOR_DAC){
 8003972:	7d63      	ldrb	r3, [r4, #21]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d01c      	beq.n	80039b2 <GeneratorTask+0x146>
				}else if(generator.modeState==GENERATOR_PWM){
 8003978:	7d63      	ldrb	r3, [r4, #21]
 800397a:	b1a3      	cbz	r3, 80039a6 <GeneratorTask+0x13a>
				generator.state=GENERATOR_IDLE;
 800397c:	f884 8014 	strb.w	r8, [r4, #20]
 8003980:	e7a1      	b.n	80038c6 <GeneratorTask+0x5a>
			if(generator.modeState==GENERATOR_DAC){				
 8003982:	7d63      	ldrb	r3, [r4, #21]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d011      	beq.n	80039ac <GeneratorTask+0x140>
			}else if(generator.modeState==GENERATOR_PWM){
 8003988:	7d63      	ldrb	r3, [r4, #21]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d19b      	bne.n	80038c6 <GeneratorTask+0x5a>
				TIMGenPwmDeinit();
 800398e:	f009 f8e1 	bl	800cb54 <TIMGenPwmDeinit>
 8003992:	e798      	b.n	80038c6 <GeneratorTask+0x5a>
	generator.modeState = GENERATOR_PWM;
 8003994:	f884 8015 	strb.w	r8, [r4, #21]
			TIMGenPwmInit();
 8003998:	f009 f822 	bl	800c9e0 <TIMGenPwmInit>
 800399c:	e793      	b.n	80038c6 <GeneratorTask+0x5a>
	generator.modeState = GENERATOR_DAC;
 800399e:	7567      	strb	r7, [r4, #21]
			TIMGenInit();
 80039a0:	f008 ff38 	bl	800c814 <TIMGenInit>
 80039a4:	e78f      	b.n	80038c6 <GeneratorTask+0x5a>
					PWMGeneratingDisable();
 80039a6:	f008 ffef 	bl	800c988 <PWMGeneratingDisable>
 80039aa:	e7e7      	b.n	800397c <GeneratorTask+0x110>
				TIMGenDacDeinit();
 80039ac:	f008 ff68 	bl	800c880 <TIMGenDacDeinit>
 80039b0:	e789      	b.n	80038c6 <GeneratorTask+0x5a>
					GeneratingDisable();
 80039b2:	f008 f825 	bl	800ba00 <GeneratingDisable>
 80039b6:	e7e1      	b.n	800397c <GeneratorTask+0x110>
			TIM_DMA_Reconfig(i);			
 80039b8:	2001      	movs	r0, #1
 80039ba:	f008 ff7d 	bl	800c8b8 <TIM_DMA_Reconfig>
 80039be:	e7ad      	b.n	800391c <GeneratorTask+0xb0>
 80039c0:	4648      	mov	r0, r9
 80039c2:	f008 ff79 	bl	800c8b8 <TIM_DMA_Reconfig>
 80039c6:	e7a1      	b.n	800390c <GeneratorTask+0xa0>
 80039c8:	20004c14 	.word	0x20004c14
 80039cc:	20004c40 	.word	0x20004c40
 80039d0:	20004c44 	.word	0x20004c44

080039d4 <genSetMode>:
{
 80039d4:	b500      	push	{lr}
 80039d6:	b083      	sub	sp, #12
	switch(mode){
 80039d8:	b178      	cbz	r0, 80039fa <genSetMode+0x26>
 80039da:	2801      	cmp	r0, #1
 80039dc:	d10a      	bne.n	80039f4 <genSetMode+0x20>
		passMsg = MSG_GEN_DAC_MODE;
 80039de:	a902      	add	r1, sp, #8
 80039e0:	2321      	movs	r3, #33	; 0x21
 80039e2:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <genSetMode+0x44>)
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	f005 fab2 	bl	8008f58 <xQueueGenericSend>
}
 80039f4:	b003      	add	sp, #12
 80039f6:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_GEN_PWM_MODE;
 80039fa:	a902      	add	r1, sp, #8
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80039fc:	4a06      	ldr	r2, [pc, #24]	; (8003a18 <genSetMode+0x44>)
		passMsg = MSG_GEN_PWM_MODE;
 80039fe:	2322      	movs	r3, #34	; 0x22
 8003a00:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003a04:	4603      	mov	r3, r0
 8003a06:	6810      	ldr	r0, [r2, #0]
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	f005 faa4 	bl	8008f58 <xQueueGenericSend>
}
 8003a10:	b003      	add	sp, #12
 8003a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a16:	bf00      	nop
 8003a18:	20004c40 	.word	0x20004c40

08003a1c <generator_deinit>:
	switch(generator.modeState){
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <generator_deinit+0x18>)
 8003a1e:	7d5b      	ldrb	r3, [r3, #21]
 8003a20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a24:	b123      	cbz	r3, 8003a30 <generator_deinit+0x14>
 8003a26:	2a01      	cmp	r2, #1
 8003a28:	d101      	bne.n	8003a2e <generator_deinit+0x12>
		TIMGenDacDeinit();
 8003a2a:	f008 bf29 	b.w	800c880 <TIMGenDacDeinit>
 8003a2e:	4770      	bx	lr
		TIMGenPwmDeinit();
 8003a30:	f009 b890 	b.w	800cb54 <TIMGenPwmDeinit>
 8003a34:	20004c14 	.word	0x20004c14

08003a38 <genSetPwmFrequencyPSC>:
	TIM_GEN_PWM_PSC_Config(pscVal, chan);		// -1 subtraction made in PC app
 8003a38:	b280      	uxth	r0, r0
 8003a3a:	f009 b8af 	b.w	800cb9c <TIM_GEN_PWM_PSC_Config>
 8003a3e:	bf00      	nop

08003a40 <genSetPwmFrequencyARR>:
	TIM_GEN_PWM_ARR_Config(arrVal, chan);		// -1 subtraction made in PC app
 8003a40:	b280      	uxth	r0, r0
 8003a42:	f009 b8b5 	b.w	800cbb0 <TIM_GEN_PWM_ARR_Config>
 8003a46:	bf00      	nop

08003a48 <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003a48:	b530      	push	{r4, r5, lr}
	uint8_t result = GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE ){
 8003a4a:	4c1f      	ldr	r4, [pc, #124]	; (8003ac8 <genSetData+0x80>)
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003a4c:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE ){
 8003a4e:	7d25      	ldrb	r5, [r4, #20]
	uint8_t result = GEN_INVALID_STATE;
 8003a50:	2365      	movs	r3, #101	; 0x65
 8003a52:	f88d 3005 	strb.w	r3, [sp, #5]
	if(generator.state==GENERATOR_IDLE ){
 8003a56:	b9cd      	cbnz	r5, 8003a8c <genSetData+0x44>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003a58:	f102 030f 	add.w	r3, r2, #15
 8003a5c:	0040      	lsls	r0, r0, #1
 8003a5e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8003a62:	180d      	adds	r5, r1, r0
 8003a64:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
 8003a68:	da02      	bge.n	8003a70 <genSetData+0x28>
 8003a6a:	2066      	movs	r0, #102	; 0x66
		}else{
			result = GEN_OUT_OF_MEMORY;
		}
	}
	return result;
}
 8003a6c:	b003      	add	sp, #12
 8003a6e:	bd30      	pop	{r4, r5, pc}
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003a70:	7da3      	ldrb	r3, [r4, #22]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d3f9      	bcc.n	8003a6a <genSetData+0x22>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003a76:	3205      	adds	r2, #5
 8003a78:	460d      	mov	r5, r1
 8003a7a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8003a7e:	4418      	add	r0, r3
 8003a80:	f7fe fc3c 	bl	80022fc <commBufferReadNBytes>
 8003a84:	42a8      	cmp	r0, r5
 8003a86:	d004      	beq.n	8003a92 <genSetData+0x4a>
 8003a88:	206d      	movs	r0, #109	; 0x6d
 8003a8a:	e7ef      	b.n	8003a6c <genSetData+0x24>
 8003a8c:	4618      	mov	r0, r3
}
 8003a8e:	b003      	add	sp, #12
 8003a90:	bd30      	pop	{r4, r5, pc}
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003a92:	f10d 0005 	add.w	r0, sp, #5
 8003a96:	f7fe fc0f 	bl	80022b8 <commBufferReadByte>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1f4      	bne.n	8003a88 <genSetData+0x40>
 8003a9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003aa2:	2b3b      	cmp	r3, #59	; 0x3b
 8003aa4:	d1f0      	bne.n	8003a88 <genSetData+0x40>
				uint16_t passMsg = MSG_INVALIDATE;
 8003aa6:	a902      	add	r1, sp, #8
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <genSetData+0x84>)
				result = 0;
 8003aaa:	f88d 0005 	strb.w	r0, [sp, #5]
				uint16_t passMsg = MSG_INVALIDATE;
 8003aae:	2330      	movs	r3, #48	; 0x30
 8003ab0:	f821 3d02 	strh.w	r3, [r1, #-2]!
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	6810      	ldr	r0, [r2, #0]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	f005 fa4c 	bl	8008f58 <xQueueGenericSend>
 8003ac0:	f89d 0005 	ldrb.w	r0, [sp, #5]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003ac4:	e7d2      	b.n	8003a6c <genSetData+0x24>
 8003ac6:	bf00      	nop
 8003ac8:	20004c14 	.word	0x20004c14
 8003acc:	20004c40 	.word	0x20004c40

08003ad0 <genSetFrequency>:
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
	uint8_t result = GEN_TO_HIGH_FREQ;
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <genSetFrequency+0x34>)
 8003ad2:	4298      	cmp	r0, r3
 8003ad4:	d813      	bhi.n	8003afe <genSetFrequency+0x2e>
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003ad6:	b530      	push	{r4, r5, lr}
		generator.generatingFrequency[chan-1] = freq;
 8003ad8:	4d0b      	ldr	r5, [pc, #44]	; (8003b08 <genSetFrequency+0x38>)
 8003ada:	460c      	mov	r4, r1
 8003adc:	3901      	subs	r1, #1
 8003ade:	eb05 0381 	add.w	r3, r5, r1, lsl #2
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003ae2:	b083      	sub	sp, #12
		generator.generatingFrequency[chan-1] = freq;
 8003ae4:	6058      	str	r0, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003ae6:	b2c9      	uxtb	r1, r1
 8003ae8:	6858      	ldr	r0, [r3, #4]
 8003aea:	aa01      	add	r2, sp, #4
 8003aec:	f008 fdac 	bl	800c648 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003af0:	3401      	adds	r4, #1
 8003af2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003af6:	9b01      	ldr	r3, [sp, #4]
 8003af8:	6063      	str	r3, [r4, #4]
	}
	return result;
}
 8003afa:	b003      	add	sp, #12
 8003afc:	bd30      	pop	{r4, r5, pc}
	uint8_t result = GEN_TO_HIGH_FREQ;
 8003afe:	2069      	movs	r0, #105	; 0x69
}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	001e8480 	.word	0x001e8480
 8003b08:	20004c14 	.word	0x20004c14

08003b0c <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8003b0c:	b500      	push	{lr}
 8003b0e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_SEND_FREQ;
 8003b10:	a902      	add	r1, sp, #8
 8003b12:	2326      	movs	r3, #38	; 0x26
 8003b14:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <genSendRealSamplingFreq+0x20>)
 8003b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	f005 fa19 	bl	8008f58 <xQueueGenericSend>
}
 8003b26:	b003      	add	sp, #12
 8003b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b2c:	200047cc 	.word	0x200047cc

08003b30 <genDataOKSendNext>:

void genDataOKSendNext(void){
 8003b30:	b500      	push	{lr}
 8003b32:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_NEXT;
 8003b34:	a902      	add	r1, sp, #8
 8003b36:	2327      	movs	r3, #39	; 0x27
 8003b38:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <genDataOKSendNext+0x20>)
 8003b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	f005 fa07 	bl	8008f58 <xQueueGenericSend>
}
 8003b4a:	b003      	add	sp, #12
 8003b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b50:	200047cc 	.word	0x200047cc

08003b54 <genStatusOK>:

void genStatusOK(void){
 8003b54:	b500      	push	{lr}
 8003b56:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_OK;
 8003b58:	a902      	add	r1, sp, #8
 8003b5a:	2328      	movs	r3, #40	; 0x28
 8003b5c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <genStatusOK+0x20>)
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f005 f9f5 	bl	8008f58 <xQueueGenericSend>
}
 8003b6e:	b003      	add	sp, #12
 8003b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b74:	200047cc 	.word	0x200047cc

08003b78 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
	return generator.realGenFrequency[chan-1];
 8003b78:	4b02      	ldr	r3, [pc, #8]	; (8003b84 <genGetRealSmplFreq+0xc>)
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003b80:	6858      	ldr	r0, [r3, #4]
}
 8003b82:	4770      	bx	lr
 8003b84:	20004c14 	.word	0x20004c14

08003b88 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003b88:	b530      	push	{r4, r5, lr}
	uint8_t result=GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE){
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <genSetLength+0x58>)
 8003b8c:	7d1a      	ldrb	r2, [r3, #20]
uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003b8e:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE){
 8003b90:	bb0a      	cbnz	r2, 8003bd6 <genSetLength+0x4e>
 8003b92:	f002 05ff 	and.w	r5, r2, #255	; 0xff
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		if(length<=generator.maxOneChanSamples){
 8003b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9a:	4290      	cmp	r0, r2
 8003b9c:	d90e      	bls.n	8003bbc <genSetLength+0x34>
			generator.oneChanSamples[chan-1]=length;
			clearGenBuffer();
			result=0;
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8003b9e:	2467      	movs	r4, #103	; 0x67
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8003ba0:	a902      	add	r1, sp, #8
 8003ba2:	2330      	movs	r3, #48	; 0x30
 8003ba4:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <genSetLength+0x5c>)
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f005 f9d1 	bl	8008f58 <xQueueGenericSend>
	}
	return result;
}
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	b003      	add	sp, #12
 8003bba:	bd30      	pop	{r4, r5, pc}
			generator.oneChanSamples[chan-1]=length;
 8003bbc:	f101 040f 	add.w	r4, r1, #15
 8003bc0:	b280      	uxth	r0, r0
 8003bc2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8003bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4806      	ldr	r0, [pc, #24]	; (8003be8 <genSetLength+0x60>)
			result=0;
 8003bce:	462c      	mov	r4, r5
 8003bd0:	f00a fdf1 	bl	800e7b6 <memset>
 8003bd4:	e7e4      	b.n	8003ba0 <genSetLength+0x18>
	uint8_t result=GEN_INVALID_STATE;
 8003bd6:	2465      	movs	r4, #101	; 0x65
}
 8003bd8:	4620      	mov	r0, r4
 8003bda:	b003      	add	sp, #12
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	20004c14 	.word	0x20004c14
 8003be4:	20004c40 	.word	0x20004c40
 8003be8:	20004c44 	.word	0x20004c44

08003bec <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
	uint8_t result=GEN_INVALID_STATE;
	uint8_t chanTmp=generator.numOfChannles;
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <genSetNumOfChannels+0x84>)
 8003bee:	7d93      	ldrb	r3, [r2, #22]
	if(generator.state==GENERATOR_IDLE){
 8003bf0:	7d11      	ldrb	r1, [r2, #20]
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	d136      	bne.n	8003c64 <genSetNumOfChannels+0x78>
		if(chan<=MAX_DAC_CHANNELS){
 8003bf6:	2802      	cmp	r0, #2
 8003bf8:	d834      	bhi.n	8003c64 <genSetNumOfChannels+0x78>
uint8_t genSetNumOfChannels(uint8_t chan){
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003c02:	b082      	sub	sp, #8
 8003c04:	fb94 f4f0 	sdiv	r4, r4, r0
			while(chanTmp>0){
 8003c08:	b193      	cbz	r3, 8003c30 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f103 0110 	add.w	r1, r3, #16
 8003c12:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8003c16:	428c      	cmp	r4, r1
 8003c18:	da07      	bge.n	8003c2a <genSetNumOfChannels+0x3e>
 8003c1a:	e025      	b.n	8003c68 <genSetNumOfChannels+0x7c>
 8003c1c:	b2cb      	uxtb	r3, r1
 8003c1e:	f103 0110 	add.w	r1, r3, #16
 8003c22:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8003c26:	428c      	cmp	r4, r1
 8003c28:	db1e      	blt.n	8003c68 <genSetNumOfChannels+0x7c>
 8003c2a:	1e59      	subs	r1, r3, #1
			while(chanTmp>0){
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f5      	bne.n	8003c1c <genSetNumOfChannels+0x30>
					return GEN_BUFFER_SIZE_ERR;
				}
			}
			generator.numOfChannles=chan;
 8003c30:	7590      	strb	r0, [r2, #22]
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003c32:	6254      	str	r4, [r2, #36]	; 0x24
			for(uint8_t i=0;i<chan;i++){
 8003c34:	b140      	cbz	r0, 8003c48 <genSetNumOfChannels+0x5c>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <genSetNumOfChannels+0x88>)
 8003c38:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003c3a:	6193      	str	r3, [r2, #24]
			for(uint8_t i=0;i<chan;i++){
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d103      	bne.n	8003c48 <genSetNumOfChannels+0x5c>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003c40:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003c42:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003c46:	61d3      	str	r3, [r2, #28]
			}
			result=0;
			uint16_t passMsg = MSG_INVALIDATE;
 8003c48:	a902      	add	r1, sp, #8
 8003c4a:	2330      	movs	r3, #48	; 0x30
 8003c4c:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <genSetNumOfChannels+0x8c>)
 8003c52:	f04f 32ff 	mov.w	r2, #4294967295
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f005 f97d 	bl	8008f58 <xQueueGenericSend>
 8003c5e:	2000      	movs	r0, #0
		}
	}
	return result;
}
 8003c60:	b002      	add	sp, #8
 8003c62:	bd10      	pop	{r4, pc}
	uint8_t result=GEN_INVALID_STATE;
 8003c64:	2065      	movs	r0, #101	; 0x65
}
 8003c66:	4770      	bx	lr
					return GEN_BUFFER_SIZE_ERR;
 8003c68:	2067      	movs	r0, #103	; 0x67
}
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	bf00      	nop
 8003c70:	20004c14 	.word	0x20004c14
 8003c74:	20004c44 	.word	0x20004c44
 8003c78:	20004c40 	.word	0x20004c40

08003c7c <genSetOutputBuffer>:
		generatorBuffer[i]=0;
	}
}

void genSetOutputBuffer(void){
	DACSetOutputBuffer();
 8003c7c:	f007 be86 	b.w	800b98c <DACSetOutputBuffer>

08003c80 <genUnsetOutputBuffer>:
}

void genUnsetOutputBuffer(void){
	DACUnsetOutputBuffer();
 8003c80:	f007 be8a 	b.w	800b998 <DACUnsetOutputBuffer>

08003c84 <genSetDAC>:
}

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t result=0;
	if(generator.state==GENERATOR_IDLE){
 8003c88:	4c5e      	ldr	r4, [pc, #376]	; (8003e04 <genSetDAC+0x180>)
 8003c8a:	7d23      	ldrb	r3, [r4, #20]
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	4681      	mov	r9, r0
 8003c90:	4688      	mov	r8, r1
	if(generator.state==GENERATOR_IDLE){
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d142      	bne.n	8003d1c <genSetDAC+0x98>
	if(generator.state==GENERATOR_IDLE){
 8003c96:	7d23      	ldrb	r3, [r4, #20]
 8003c98:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d06d      	beq.n	8003d7c <genSetDAC+0xf8>
 8003ca0:	7d23      	ldrb	r3, [r4, #20]
 8003ca2:	4f59      	ldr	r7, [pc, #356]	; (8003e08 <genSetDAC+0x184>)
 8003ca4:	2565      	movs	r5, #101	; 0x65
 8003ca6:	ae01      	add	r6, sp, #4
 8003ca8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d07b      	beq.n	8003da8 <genSetDAC+0x124>
	uint8_t chanTmp=generator.numOfChannles;
 8003cb0:	7da3      	ldrb	r3, [r4, #22]
	if(generator.state==GENERATOR_IDLE){
 8003cb2:	7d22      	ldrb	r2, [r4, #20]
 8003cb4:	3565      	adds	r5, #101	; 0x65
 8003cb6:	b2ed      	uxtb	r5, r5
	uint8_t chanTmp=generator.numOfChannles;
 8003cb8:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	f040 808f 	bne.w	8003dde <genSetDAC+0x15a>
			while(chanTmp>0){
 8003cc0:	b1a3      	cbz	r3, 8003cec <genSetDAC+0x68>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f103 0210 	add.w	r2, r3, #16
 8003cca:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8003cce:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8003cd2:	d908      	bls.n	8003ce6 <genSetDAC+0x62>
 8003cd4:	e086      	b.n	8003de4 <genSetDAC+0x160>
 8003cd6:	b2d3      	uxtb	r3, r2
 8003cd8:	f103 0210 	add.w	r2, r3, #16
 8003cdc:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8003ce0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8003ce4:	d87e      	bhi.n	8003de4 <genSetDAC+0x160>
 8003ce6:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f4      	bne.n	8003cd6 <genSetDAC+0x52>
			generator.numOfChannles=chan;
 8003cec:	2302      	movs	r3, #2
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003cee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
			generator.numOfChannles=chan;
 8003cf2:	75a3      	strb	r3, [r4, #22]
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003cf4:	6262      	str	r2, [r4, #36]	; 0x24
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003cf6:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <genSetDAC+0x188>)
 8003cf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cfa:	61a3      	str	r3, [r4, #24]
 8003cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003cfe:	6838      	ldr	r0, [r7, #0]
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003d00:	eb03 0141 	add.w	r1, r3, r1, lsl #1
			uint16_t passMsg = MSG_INVALIDATE;
 8003d04:	f04f 0c30 	mov.w	ip, #48	; 0x30
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003d08:	61e1      	str	r1, [r4, #28]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	4631      	mov	r1, r6
			uint16_t passMsg = MSG_INVALIDATE;
 8003d12:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d16:	f005 f91f 	bl	8008f58 <xQueueGenericSend>
 8003d1a:	e002      	b.n	8003d22 <genSetDAC+0x9e>
 8003d1c:	4f3a      	ldr	r7, [pc, #232]	; (8003e08 <genSetDAC+0x184>)
	uint8_t result=0;
 8003d1e:	2500      	movs	r5, #0
 8003d20:	ae01      	add	r6, sp, #4
			result+=genSetLength(1,i+1);
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 8003d22:	69a3      	ldr	r3, [r4, #24]
		generator.generatingFrequency[chan-1] = freq;
 8003d24:	f04f 0a64 	mov.w	sl, #100	; 0x64
		*generator.pChanMem[0]=chann1;
 8003d28:	f8a3 9000 	strh.w	r9, [r3]
		generator.generatingFrequency[chan-1] = freq;
 8003d2c:	f8c4 a004 	str.w	sl, [r4, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003d30:	4632      	mov	r2, r6
 8003d32:	6860      	ldr	r0, [r4, #4]
 8003d34:	2100      	movs	r1, #0
 8003d36:	f008 fc87 	bl	800c648 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	60e3      	str	r3, [r4, #12]
		result+=genSetFrequency(100,1);
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 8003d3e:	69e3      	ldr	r3, [r4, #28]
 8003d40:	f8a3 8000 	strh.w	r8, [r3]
		generator.generatingFrequency[chan-1] = freq;
 8003d44:	f8c4 a008 	str.w	sl, [r4, #8]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	4632      	mov	r2, r6
		result+=genSetFrequency(100,1);
 8003d4c:	4405      	add	r5, r0
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f008 fc79 	bl	800c648 <TIM_Reconfig_gen>
		result+=genSetFrequency(100,1);
 8003d56:	b2ed      	uxtb	r5, r5
		generator.realGenFrequency[chan-1] = realFreq;
 8003d58:	9b01      	ldr	r3, [sp, #4]
 8003d5a:	6123      	str	r3, [r4, #16]
		result+=genSetFrequency(100,2);
 8003d5c:	4405      	add	r5, r0
 * @param  None
 * @retval None
 */
void genStart(void){
	uint16_t passMsg = MSG_GEN_START;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d5e:	4631      	mov	r1, r6
 8003d60:	6838      	ldr	r0, [r7, #0]
	uint16_t passMsg = MSG_GEN_START;
 8003d62:	2423      	movs	r4, #35	; 0x23
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d64:	2300      	movs	r3, #0
 8003d66:	f04f 32ff 	mov.w	r2, #4294967295
	uint16_t passMsg = MSG_GEN_START;
 8003d6a:	f8ad 4004 	strh.w	r4, [sp, #4]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d6e:	f005 f8f3 	bl	8008f58 <xQueueGenericSend>
		result+=genSetFrequency(100,2);
 8003d72:	b2ed      	uxtb	r5, r5
}
 8003d74:	4628      	mov	r0, r5
 8003d76:	b002      	add	sp, #8
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		if(length<=generator.maxOneChanSamples){
 8003d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d132      	bne.n	8003dea <genSetDAC+0x166>
 8003d84:	2567      	movs	r5, #103	; 0x67
		uint16_t passMsg = MSG_INVALIDATE;
 8003d86:	ae02      	add	r6, sp, #8
 8003d88:	2330      	movs	r3, #48	; 0x30
 8003d8a:	f826 3d04 	strh.w	r3, [r6, #-4]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d8e:	4f1e      	ldr	r7, [pc, #120]	; (8003e08 <genSetDAC+0x184>)
 8003d90:	4631      	mov	r1, r6
 8003d92:	2300      	movs	r3, #0
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	f005 f8dd 	bl	8008f58 <xQueueGenericSend>
	if(generator.state==GENERATOR_IDLE){
 8003d9e:	7d23      	ldrb	r3, [r4, #20]
 8003da0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d183      	bne.n	8003cb0 <genSetDAC+0x2c>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		if(length<=generator.maxOneChanSamples){
 8003daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dac:	b333      	cbz	r3, 8003dfc <genSetDAC+0x178>
			generator.oneChanSamples[chan-1]=length;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003db4:	4815      	ldr	r0, [pc, #84]	; (8003e0c <genSetDAC+0x188>)
 8003db6:	8463      	strh	r3, [r4, #34]	; 0x22
 8003db8:	f00a fcfd 	bl	800e7b6 <memset>
		uint16_t passMsg = MSG_INVALIDATE;
 8003dbc:	f04f 0c30 	mov.w	ip, #48	; 0x30
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	6838      	ldr	r0, [r7, #0]
		uint16_t passMsg = MSG_INVALIDATE;
 8003dca:	f8ad c004 	strh.w	ip, [sp, #4]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003dce:	f005 f8c3 	bl	8008f58 <xQueueGenericSend>
	uint8_t chanTmp=generator.numOfChannles;
 8003dd2:	7da3      	ldrb	r3, [r4, #22]
	if(generator.state==GENERATOR_IDLE){
 8003dd4:	7d22      	ldrb	r2, [r4, #20]
	uint8_t chanTmp=generator.numOfChannles;
 8003dd6:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 8003dd8:	2a00      	cmp	r2, #0
 8003dda:	f43f af71 	beq.w	8003cc0 <genSetDAC+0x3c>
 8003dde:	3565      	adds	r5, #101	; 0x65
 8003de0:	b2ed      	uxtb	r5, r5
 8003de2:	e79e      	b.n	8003d22 <genSetDAC+0x9e>
 8003de4:	3567      	adds	r5, #103	; 0x67
 8003de6:	b2ed      	uxtb	r5, r5
 8003de8:	e79b      	b.n	8003d22 <genSetDAC+0x9e>
			generator.oneChanSamples[chan-1]=length;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003df0:	4806      	ldr	r0, [pc, #24]	; (8003e0c <genSetDAC+0x188>)
 8003df2:	8423      	strh	r3, [r4, #32]
	uint8_t result=0;
 8003df4:	460d      	mov	r5, r1
 8003df6:	f00a fcde 	bl	800e7b6 <memset>
 8003dfa:	e7c4      	b.n	8003d86 <genSetDAC+0x102>
 8003dfc:	3567      	adds	r5, #103	; 0x67
 8003dfe:	b2ed      	uxtb	r5, r5
 8003e00:	e7dc      	b.n	8003dbc <genSetDAC+0x138>
 8003e02:	bf00      	nop
 8003e04:	20004c14 	.word	0x20004c14
 8003e08:	20004c40 	.word	0x20004c40
 8003e0c:	20004c44 	.word	0x20004c44

08003e10 <genStart>:
void genStart(void){
 8003e10:	b500      	push	{lr}
 8003e12:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_START;
 8003e14:	a902      	add	r1, sp, #8
 8003e16:	2323      	movs	r3, #35	; 0x23
 8003e18:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <genStart+0x20>)
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	f005 f897 	bl	8008f58 <xQueueGenericSend>
}
 8003e2a:	b003      	add	sp, #12
 8003e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e30:	20004c40 	.word	0x20004c40

08003e34 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8003e34:	b500      	push	{lr}
 8003e36:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_STOP;
 8003e38:	a902      	add	r1, sp, #8
 8003e3a:	2324      	movs	r3, #36	; 0x24
 8003e3c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <genStop+0x20>)
 8003e42:	f04f 32ff 	mov.w	r2, #4294967295
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f005 f885 	bl	8008f58 <xQueueGenericSend>
}
 8003e4e:	b003      	add	sp, #12
 8003e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e54:	20004c40 	.word	0x20004c40

08003e58 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8003e58:	b500      	push	{lr}
 8003e5a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_DEINIT;
 8003e5c:	a902      	add	r1, sp, #8
 8003e5e:	2325      	movs	r3, #37	; 0x25
 8003e60:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <genReset+0x20>)
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f005 f873 	bl	8008f58 <xQueueGenericSend>
}
 8003e72:	b003      	add	sp, #12
 8003e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e78:	20004c40 	.word	0x20004c40

08003e7c <LogAnlysTask>:
	*					to communication (comms) and takes care of logic analyzer functions.
  * @param  Task handler, parameters pointer
  * @retval None
  */
void LogAnlysTask(void const *argument)
{	
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8003e80:	ad02      	add	r5, sp, #8
 8003e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003e86:	2200      	movs	r2, #0
 8003e88:	2104      	movs	r1, #4
 8003e8a:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8003e8c:	f825 3d04 	strh.w	r3, [r5, #-4]!
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003e90:	f005 f81e 	bl	8008ed0 <xQueueGenericCreate>
 8003e94:	4e2f      	ldr	r6, [pc, #188]	; (8003f54 <LogAnlysTask+0xd8>)
  */
void logAnlysSetDefault(void){
/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 8003e96:	4f30      	ldr	r7, [pc, #192]	; (8003f58 <LogAnlysTask+0xdc>)
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003e98:	6030      	str	r0, [r6, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8003e9a:	2004      	movs	r0, #4
 8003e9c:	f005 fa1a 	bl	80092d4 <xQueueCreateMutex>
	logAnlys.preTriggerTime = 50;
 8003ea0:	2332      	movs	r3, #50	; 0x32
 8003ea2:	813b      	strh	r3, [r7, #8]
	logAnlys.samplesNumber = 1000;
 8003ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea8:	823b      	strh	r3, [r7, #16]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8003eaa:	4c2c      	ldr	r4, [pc, #176]	; (8003f5c <LogAnlysTask+0xe0>)
	logAnlys.trigConfig = TRIG_CHAN1;
	logAnlys.trigEdge = TRIG_EDGE_RISING;
	logAnlys.triggerMode = LOGA_MODE_AUTO;
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <LogAnlysTask+0xe4>)
 8003eae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8003f64 <LogAnlysTask+0xe8>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 8003eb2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003f68 <LogAnlysTask+0xec>
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8003eb6:	6020      	str	r0, [r4, #0]
	logAnlys.trigConfig = TRIG_CHAN1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	757b      	strb	r3, [r7, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8003ebc:	75bb      	strb	r3, [r7, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 8003ebe:	753b      	strb	r3, [r7, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8003ec4:	60fa      	str	r2, [r7, #12]
 8003ec6:	e008      	b.n	8003eda <LogAnlysTask+0x5e>
		}else if(message==MSG_LOGAN_START){
 8003ec8:	2b1b      	cmp	r3, #27
 8003eca:	d01b      	beq.n	8003f04 <LogAnlysTask+0x88>
		}else if(message==MSG_LOGAN_STOP){
 8003ecc:	2b1c      	cmp	r3, #28
 8003ece:	d02d      	beq.n	8003f2c <LogAnlysTask+0xb0>
		}else if(message==MSG_LOGAN_SAMPLING_END){
 8003ed0:	2b1d      	cmp	r3, #29
 8003ed2:	d030      	beq.n	8003f36 <LogAnlysTask+0xba>
		xSemaphoreGiveRecursive(logAnlysMutex);
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	f005 fa31 	bl	800933c <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8003eda:	2300      	movs	r3, #0
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	6830      	ldr	r0, [r6, #0]
 8003ee4:	f005 fae0 	bl	80094a8 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	f005 fc63 	bl	80097b8 <xQueueTakeMutexRecursive>
		if(message==MSG_LOGAN_INIT){
 8003ef2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003ef6:	2b19      	cmp	r3, #25
 8003ef8:	d1e6      	bne.n	8003ec8 <LogAnlysTask+0x4c>
	logAnlys.enable = LOGA_ENABLED;
 8003efa:	2301      	movs	r3, #1
 8003efc:	74fb      	strb	r3, [r7, #19]
	TIM_LogAnlys_Init();
 8003efe:	f00a fa01 	bl	800e304 <TIM_LogAnlys_Init>
 8003f02:	e7e7      	b.n	8003ed4 <LogAnlysTask+0x58>
	TIM_LogAnlys_Start();		
 8003f04:	f00a fa58 	bl	800e3b8 <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8003f08:	2301      	movs	r3, #1
 8003f0a:	74bb      	strb	r3, [r7, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8003f0c:	8938      	ldrh	r0, [r7, #8]
 8003f0e:	f006 f855 	bl	8009fbc <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 8003f12:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8003f16:	f8c8 3014 	str.w	r3, [r8, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8003f1a:	7d3b      	ldrb	r3, [r7, #20]
 8003f1c:	b91b      	cbnz	r3, 8003f26 <LogAnlysTask+0xaa>
		LOG_ANLYS_TriggerEventOccured();		
 8003f1e:	f00a f9e5 	bl	800e2ec <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8003f22:	f00a fab7 	bl	800e494 <TIM_PostTrigger_SoftwareStart>
	GPIO_EnableTrigger();	
 8003f26:	f00a fac3 	bl	800e4b0 <GPIO_EnableTrigger>
 8003f2a:	e7d3      	b.n	8003ed4 <LogAnlysTask+0x58>
	TIM_LogAnlys_Stop();
 8003f2c:	f00a fa5c 	bl	800e3e8 <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8003f30:	2304      	movs	r3, #4
 8003f32:	74bb      	strb	r3, [r7, #18]
 8003f34:	e7ce      	b.n	8003ed4 <LogAnlysTask+0x58>
			uint16_t passMsg = MSG_LOGAN_SEND_DATA;
 8003f36:	f04f 0c1e 	mov.w	ip, #30
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f40:	f10d 0106 	add.w	r1, sp, #6
 8003f44:	f8d9 0000 	ldr.w	r0, [r9]
			uint16_t passMsg = MSG_LOGAN_SEND_DATA;
 8003f48:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003f4c:	f005 f804 	bl	8008f58 <xQueueGenericSend>
 8003f50:	e7c0      	b.n	8003ed4 <LogAnlysTask+0x58>
 8003f52:	bf00      	nop
 8003f54:	20005414 	.word	0x20005414
 8003f58:	20005418 	.word	0x20005418
 8003f5c:	20005430 	.word	0x20005430
 8003f60:	2000543c 	.word	0x2000543c
 8003f64:	200047cc 	.word	0x200047cc
 8003f68:	40010400 	.word	0x40010400

08003f6c <logAnlysSendInit>:
void logAnlysSendInit(void){
 8003f6c:	b500      	push	{lr}
 8003f6e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_INIT;
 8003f70:	a902      	add	r1, sp, #8
 8003f72:	2319      	movs	r3, #25
 8003f74:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <logAnlysSendInit+0x20>)
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	f004 ffe9 	bl	8008f58 <xQueueGenericSend>
}
 8003f86:	b003      	add	sp, #12
 8003f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f8c:	20005414 	.word	0x20005414

08003f90 <logAnlysSendDeinit>:
void logAnlysSendDeinit(void){
 8003f90:	b500      	push	{lr}
 8003f92:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8003f94:	a902      	add	r1, sp, #8
 8003f96:	231a      	movs	r3, #26
 8003f98:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <logAnlysSendDeinit+0x20>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f004 ffd7 	bl	8008f58 <xQueueGenericSend>
}
 8003faa:	b003      	add	sp, #12
 8003fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fb0:	20005414 	.word	0x20005414

08003fb4 <logAnlysSendStart>:
void logAnlysSendStart(void){
 8003fb4:	b500      	push	{lr}
 8003fb6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_START;
 8003fb8:	a902      	add	r1, sp, #8
 8003fba:	231b      	movs	r3, #27
 8003fbc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <logAnlysSendStart+0x20>)
 8003fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f004 ffc5 	bl	8008f58 <xQueueGenericSend>
}
 8003fce:	b003      	add	sp, #12
 8003fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fd4:	20005414 	.word	0x20005414

08003fd8 <logAnlysSendStop>:
void logAnlysSendStop(void){
 8003fd8:	b500      	push	{lr}
 8003fda:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_STOP;
 8003fdc:	a902      	add	r1, sp, #8
 8003fde:	231c      	movs	r3, #28
 8003fe0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <logAnlysSendStop+0x20>)
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	f004 ffb3 	bl	8008f58 <xQueueGenericSend>
}
 8003ff2:	b003      	add	sp, #12
 8003ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ff8:	20005414 	.word	0x20005414

08003ffc <logAnlysPeriodElapsedCallback>:
void logAnlysPeriodElapsedCallback(void){
 8003ffc:	b500      	push	{lr}
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <logAnlysPeriodElapsedCallback+0x20>)
void logAnlysPeriodElapsedCallback(void){
 8004000:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 8004002:	231d      	movs	r3, #29
 8004004:	f8ad 3002 	strh.w	r3, [sp, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004008:	6810      	ldr	r0, [r2, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	aa01      	add	r2, sp, #4
 800400e:	f10d 0102 	add.w	r1, sp, #2
 8004012:	f005 f9b3 	bl	800937c <xQueueGenericSendFromISR>
}
 8004016:	b003      	add	sp, #12
 8004018:	f85d fb04 	ldr.w	pc, [sp], #4
 800401c:	20005414 	.word	0x20005414

08004020 <logAnlysStart>:
void logAnlysStart(void){
 8004020:	b510      	push	{r4, lr}
	logAnlys.state = LOGA_SAMPLING;			
 8004022:	4c0b      	ldr	r4, [pc, #44]	; (8004050 <logAnlysStart+0x30>)
	TIM_LogAnlys_Start();		
 8004024:	f00a f9c8 	bl	800e3b8 <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8004028:	2301      	movs	r3, #1
 800402a:	74a3      	strb	r3, [r4, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 800402c:	8920      	ldrh	r0, [r4, #8]
 800402e:	f005 ffc5 	bl	8009fbc <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <logAnlysStart+0x34>)
 8004034:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8004038:	615a      	str	r2, [r3, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 800403a:	7d23      	ldrb	r3, [r4, #20]
 800403c:	b91b      	cbnz	r3, 8004046 <logAnlysStart+0x26>
		LOG_ANLYS_TriggerEventOccured();		
 800403e:	f00a f955 	bl	800e2ec <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8004042:	f00a fa27 	bl	800e494 <TIM_PostTrigger_SoftwareStart>
}	
 8004046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_EnableTrigger();	
 800404a:	f00a ba31 	b.w	800e4b0 <GPIO_EnableTrigger>
 800404e:	bf00      	nop
 8004050:	20005418 	.word	0x20005418
 8004054:	40010400 	.word	0x40010400

08004058 <logAnlysStop>:
void logAnlysStop(void){
 8004058:	b508      	push	{r3, lr}
	TIM_LogAnlys_Stop();
 800405a:	f00a f9c5 	bl	800e3e8 <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 800405e:	4b02      	ldr	r3, [pc, #8]	; (8004068 <logAnlysStop+0x10>)
 8004060:	2204      	movs	r2, #4
 8004062:	749a      	strb	r2, [r3, #18]
}
 8004064:	bd08      	pop	{r3, pc}
 8004066:	bf00      	nop
 8004068:	20005418 	.word	0x20005418

0800406c <logAnlysSetSamplingFreq>:
	TIM_SamplingFreq_ARR_PSC_Reconfig(arrPsc);
 800406c:	f00a b9fa 	b.w	800e464 <TIM_SamplingFreq_ARR_PSC_Reconfig>

08004070 <logAnlysSetPosttrigger>:
	TIM_PostTrigger_ARR_PSC_Reconfig(arrPsc);
 8004070:	f00a b9e0 	b.w	800e434 <TIM_PostTrigger_ARR_PSC_Reconfig>

08004074 <logAnlysSetPretrigger>:
void logAnlysSetPretrigger(uint32_t timeInMilliseconds){
 8004074:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004076:	4d07      	ldr	r5, [pc, #28]	; (8004094 <logAnlysSetPretrigger+0x20>)
void logAnlysSetPretrigger(uint32_t timeInMilliseconds){
 8004078:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800407a:	f04f 31ff 	mov.w	r1, #4294967295
 800407e:	6828      	ldr	r0, [r5, #0]
 8004080:	f005 fb9a 	bl	80097b8 <xQueueTakeMutexRecursive>
	logAnlys.preTriggerTime = timeInMilliseconds;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <logAnlysSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004086:	6828      	ldr	r0, [r5, #0]
	logAnlys.preTriggerTime = timeInMilliseconds;
 8004088:	b2a4      	uxth	r4, r4
 800408a:	811c      	strh	r4, [r3, #8]
}
 800408c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004090:	f005 b954 	b.w	800933c <xQueueGiveMutexRecursive>
 8004094:	20005430 	.word	0x20005430
 8004098:	20005418 	.word	0x20005418

0800409c <logAnlysSetSamplesNum>:
void logAnlysSetSamplesNum(uint16_t samplesNum){	
 800409c:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800409e:	4c07      	ldr	r4, [pc, #28]	; (80040bc <logAnlysSetSamplesNum+0x20>)
void logAnlysSetSamplesNum(uint16_t samplesNum){	
 80040a0:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80040a2:	f04f 31ff 	mov.w	r1, #4294967295
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	f005 fb86 	bl	80097b8 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <logAnlysSetSamplesNum+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 80040ae:	6820      	ldr	r0, [r4, #0]
	logAnlys.samplesNumber = samplesNum;
 80040b0:	821d      	strh	r5, [r3, #16]
}
 80040b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 80040b6:	f005 b941 	b.w	800933c <xQueueGiveMutexRecursive>
 80040ba:	bf00      	nop
 80040bc:	20005430 	.word	0x20005430
 80040c0:	20005418 	.word	0x20005418

080040c4 <logAnlysSetTriggerRising>:
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <logAnlysSetTriggerRising+0x8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	759a      	strb	r2, [r3, #22]
}
 80040ca:	4770      	bx	lr
 80040cc:	20005418 	.word	0x20005418

080040d0 <logAnlysSetTriggerFalling>:
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 80040d0:	4b01      	ldr	r3, [pc, #4]	; (80040d8 <logAnlysSetTriggerFalling+0x8>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	759a      	strb	r2, [r3, #22]
}
 80040d6:	4770      	bx	lr
 80040d8:	20005418 	.word	0x20005418

080040dc <logAnlysSetTriggerChannel>:
	switch(chan){
 80040dc:	3801      	subs	r0, #1
 80040de:	2807      	cmp	r0, #7
 80040e0:	d808      	bhi.n	80040f4 <logAnlysSetTriggerChannel+0x18>
 80040e2:	e8df f000 	tbb	[pc, r0]
 80040e6:	0c08      	.short	0x0c08
 80040e8:	1c181410 	.word	0x1c181410
 80040ec:	0420      	.short	0x0420
			logAnlys.trigConfig = TRIG_CHAN8;
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 80040f0:	2207      	movs	r2, #7
 80040f2:	755a      	strb	r2, [r3, #21]
}
 80040f4:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN1;
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	755a      	strb	r2, [r3, #21]
			break;
 80040fc:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN2;
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004100:	2201      	movs	r2, #1
 8004102:	755a      	strb	r2, [r3, #21]
			break;
 8004104:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN3;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004108:	2202      	movs	r2, #2
 800410a:	755a      	strb	r2, [r3, #21]
			break;
 800410c:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN4;
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004110:	2203      	movs	r2, #3
 8004112:	755a      	strb	r2, [r3, #21]
			break;
 8004114:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN5;
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004118:	2204      	movs	r2, #4
 800411a:	755a      	strb	r2, [r3, #21]
			break;
 800411c:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN6;
 800411e:	4b04      	ldr	r3, [pc, #16]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004120:	2205      	movs	r2, #5
 8004122:	755a      	strb	r2, [r3, #21]
			break;
 8004124:	4770      	bx	lr
			logAnlys.trigConfig = TRIG_CHAN7;
 8004126:	4b02      	ldr	r3, [pc, #8]	; (8004130 <logAnlysSetTriggerChannel+0x54>)
 8004128:	2206      	movs	r2, #6
 800412a:	755a      	strb	r2, [r3, #21]
			break;
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20005418 	.word	0x20005418

08004134 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when osciloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8004134:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004138:	4cc2      	ldr	r4, [pc, #776]	; (8004444 <ScopeTriggerTask+0x310>)
 800413a:	4ec3      	ldr	r6, [pc, #780]	; (8004448 <ScopeTriggerTask+0x314>)
 800413c:	4dc3      	ldr	r5, [pc, #780]	; (800444c <ScopeTriggerTask+0x318>)
 800413e:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8004474 <ScopeTriggerTask+0x340>
 8004142:	f8df b334 	ldr.w	fp, [pc, #820]	; 8004478 <ScopeTriggerTask+0x344>
 8004146:	f8df 8334 	ldr.w	r8, [pc, #820]	; 800447c <ScopeTriggerTask+0x348>
 800414a:	b085      	sub	sp, #20

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 800414c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d013      	beq.n	800417c <ScopeTriggerTask+0x48>
 8004154:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d00f      	beq.n	800417c <ScopeTriggerTask+0x48>
 800415c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d00b      	beq.n	800417c <ScopeTriggerTask+0x48>
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
		}else{
			taskYIELD();
 8004164:	4aba      	ldr	r2, [pc, #744]	; (8004450 <ScopeTriggerTask+0x31c>)
 8004166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004174:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d1eb      	bne.n	8004154 <ScopeTriggerTask+0x20>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	6830      	ldr	r0, [r6, #0]
 8004182:	f005 fb19 	bl	80097b8 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 8004186:	4ab3      	ldr	r2, [pc, #716]	; (8004454 <ScopeTriggerTask+0x320>)
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004188:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
			lastWritingIndex = writingIndex;
 800418c:	682b      	ldr	r3, [r5, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800418e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
			lastWritingIndex = writingIndex;
 8004192:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004194:	f006 fea8 	bl	800aee8 <DMA_GetCurrDataCounter>
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800419a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 800419c:	f894 1020 	ldrb.w	r1, [r4, #32]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80041a0:	ebaa 0000 	sub.w	r0, sl, r0
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80041a4:	3b01      	subs	r3, #1
 80041a6:	4403      	add	r3, r0
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80041a8:	2901      	cmp	r1, #1
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80041aa:	fbb3 fcf2 	udiv	ip, r3, r2
 80041ae:	fb02 321c 	mls	r2, r2, ip, r3
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80041b2:	6028      	str	r0, [r5, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80041b4:	f8c9 2000 	str.w	r2, [r9]
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80041b8:	d00c      	beq.n	80041d4 <ScopeTriggerTask+0xa0>
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 80041ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d065      	beq.n	800428e <ScopeTriggerTask+0x15a>
			}else if(scope.state == SCOPE_SAMPLING){
 80041c2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	f000 80c8 	beq.w	800435c <ScopeTriggerTask+0x228>
			xSemaphoreGiveRecursive(scopeMutex);
 80041cc:	6830      	ldr	r0, [r6, #0]
 80041ce:	f005 f8b5 	bl	800933c <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 80041d2:	e7bb      	b.n	800414c <ScopeTriggerTask+0x18>
				if(scope.settings.adcRes<=8){
 80041d4:	8b63      	ldrh	r3, [r4, #26]
 80041d6:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80041d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80041dc:	f103 0307 	add.w	r3, r3, #7
 80041e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 80041e4:	f200 80a5 	bhi.w	8004332 <ScopeTriggerTask+0x1fe>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	685b      	ldr	r3, [r3, #4]
					data = data & 0x00ff;
 80041ee:	f813 c002 	ldrb.w	ip, [r3, r2]
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80041f2:	8ae1      	ldrh	r1, [r4, #22]
 80041f4:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	8b23      	ldrh	r3, [r4, #24]
 80041fc:	4f96      	ldr	r7, [pc, #600]	; (8004458 <ScopeTriggerTask+0x324>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80041fe:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004202:	f8a7 c000 	strh.w	ip, [r7]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004206:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800420a:	33ff      	adds	r3, #255	; 0xff
 800420c:	fb02 f303 	mul.w	r3, r2, r3
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004210:	4f90      	ldr	r7, [pc, #576]	; (8004454 <ScopeTriggerTask+0x320>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004212:	8b22      	ldrh	r2, [r4, #24]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004214:	fb0a f101 	mul.w	r1, sl, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004218:	fb0e f202 	mul.w	r2, lr, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800421c:	f8b7 a000 	ldrh.w	sl, [r7]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004220:	4f8e      	ldr	r7, [pc, #568]	; (800445c <ScopeTriggerTask+0x328>)
 8004222:	0c12      	lsrs	r2, r2, #16
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004224:	0c1b      	lsrs	r3, r3, #16
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004226:	b280      	uxth	r0, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004228:	3301      	adds	r3, #1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800422a:	603a      	str	r2, [r7, #0]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800422c:	4f8c      	ldr	r7, [pc, #560]	; (8004460 <ScopeTriggerTask+0x32c>)
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800422e:	f8cb 3000 	str.w	r3, [fp]
	if(index < lastIndex){
 8004232:	4550      	cmp	r0, sl
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004234:	ea4f 4321 	mov.w	r3, r1, asr #16
 8004238:	803b      	strh	r3, [r7, #0]
		result= index + scope.oneChanSamples - lastIndex;
 800423a:	bf3d      	ittte	cc
 800423c:	6be3      	ldrcc	r3, [r4, #60]	; 0x3c
 800423e:	eba3 030a 	subcc.w	r3, r3, sl
 8004242:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 8004244:	eba0 000a 	subcs.w	r0, r0, sl
 8004248:	b283      	uxth	r3, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800424a:	f8d8 0000 	ldr.w	r0, [r8]
 800424e:	4403      	add	r3, r0
				if (samplesTaken > samplesToStart)    
 8004250:	4293      	cmp	r3, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004252:	f8c8 3000 	str.w	r3, [r8]
				if (samplesTaken > samplesToStart)    
 8004256:	d9b9      	bls.n	80041cc <ScopeTriggerTask+0x98>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 8004258:	7d22      	ldrb	r2, [r4, #20]
 800425a:	2a00      	cmp	r2, #0
 800425c:	f040 8110 	bne.w	8004480 <ScopeTriggerTask+0x34c>
 8004260:	f10c 0210 	add.w	r2, ip, #16
 8004264:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8004268:	f280 810a 	bge.w	8004480 <ScopeTriggerTask+0x34c>
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 800426c:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 800426e:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004272:	2300      	movs	r3, #0
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
					scope.state = SCOPE_SAMPLING;
 8004278:	f884 0020 	strb.w	r0, [r4, #32]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800427c:	4879      	ldr	r0, [pc, #484]	; (8004464 <ScopeTriggerTask+0x330>)
					passMsg = MSG_SCOPE_TRIGGER;
 800427e:	f8ad c00e 	strh.w	ip, [sp, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004282:	f10d 010e 	add.w	r1, sp, #14
 8004286:	6800      	ldr	r0, [r0, #0]
 8004288:	f004 fe66 	bl	8008f58 <xQueueGenericSend>
 800428c:	e79e      	b.n	80041cc <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800428e:	4b71      	ldr	r3, [pc, #452]	; (8004454 <ScopeTriggerTask+0x320>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b280      	uxth	r0, r0
	if(index < lastIndex){
 8004294:	4298      	cmp	r0, r3
		result= index + scope.oneChanSamples - lastIndex;
 8004296:	bf3d      	ittte	cc
 8004298:	6be1      	ldrcc	r1, [r4, #60]	; 0x3c
 800429a:	1acb      	subcc	r3, r1, r3
 800429c:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 800429e:	1ac0      	subcs	r0, r0, r3
				if(scope.settings.adcRes<=8){
 80042a0:	8b63      	ldrh	r3, [r4, #26]
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80042a2:	f8d8 1000 	ldr.w	r1, [r8]
				if(scope.settings.adcRes<=8){
 80042a6:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80042a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		result= index - lastIndex;
 80042ac:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80042ae:	eb00 0a01 	add.w	sl, r0, r1
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80042b2:	f103 0307 	add.w	r3, r3, #7
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80042b6:	f8c8 a000 	str.w	sl, [r8]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80042ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 80042be:	f200 80ee 	bhi.w	800449e <ScopeTriggerTask+0x36a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80042c2:	f022 0101 	bic.w	r1, r2, #1
 80042c6:	6858      	ldr	r0, [r3, #4]
					data = data & 0x00ff;
 80042c8:	f810 c001 	ldrb.w	ip, [r0, r1]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80042cc:	8ae1      	ldrh	r1, [r4, #22]
 80042ce:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80042d2:	6920      	ldr	r0, [r4, #16]
 80042d4:	8b23      	ldrh	r3, [r4, #24]
 80042d6:	4f60      	ldr	r7, [pc, #384]	; (8004458 <ScopeTriggerTask+0x324>)
 80042d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80042dc:	33ff      	adds	r3, #255	; 0xff
 80042de:	fb00 f303 	mul.w	r3, r0, r3
 80042e2:	f8a7 c000 	strh.w	ip, [r7]
 80042e6:	0c1b      	lsrs	r3, r3, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80042e8:	6927      	ldr	r7, [r4, #16]
 80042ea:	8b20      	ldrh	r0, [r4, #24]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80042ec:	3301      	adds	r3, #1
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80042ee:	fb0e f101 	mul.w	r1, lr, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80042f2:	fb07 f000 	mul.w	r0, r7, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80042f6:	f8cb 3000 	str.w	r3, [fp]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80042fa:	4f59      	ldr	r7, [pc, #356]	; (8004460 <ScopeTriggerTask+0x32c>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80042fc:	4b57      	ldr	r3, [pc, #348]	; (800445c <ScopeTriggerTask+0x328>)
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 80042fe:	f894 e014 	ldrb.w	lr, [r4, #20]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004302:	0c09      	lsrs	r1, r1, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004304:	0c00      	lsrs	r0, r0, #16
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004306:	8039      	strh	r1, [r7, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004308:	6018      	str	r0, [r3, #0]
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 800430a:	f1be 0f00 	cmp.w	lr, #0
 800430e:	d114      	bne.n	800433a <ScopeTriggerTask+0x206>
 8004310:	4561      	cmp	r1, ip
 8004312:	d212      	bcs.n	800433a <ScopeTriggerTask+0x206>
					totalSmpTaken = samplesTaken;
 8004314:	4f54      	ldr	r7, [pc, #336]	; (8004468 <ScopeTriggerTask+0x334>)
 8004316:	f8c7 a000 	str.w	sl, [r7]
					triggerIndex = actualIndex;
 800431a:	4f54      	ldr	r7, [pc, #336]	; (800446c <ScopeTriggerTask+0x338>)
					samplesTaken = 0;
 800431c:	2100      	movs	r1, #0
					triggerIndex = actualIndex;
 800431e:	603a      	str	r2, [r7, #0]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004320:	460b      	mov	r3, r1
					scope.state = SCOPE_SAMPLING;
 8004322:	2003      	movs	r0, #3
					passMsg = MSG_SCOPE_TRIGGER;
 8004324:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 800432c:	f8c8 1000 	str.w	r1, [r8]
 8004330:	e7a2      	b.n	8004278 <ScopeTriggerTask+0x144>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8004338:	e75b      	b.n	80041f2 <ScopeTriggerTask+0xbe>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel)
 800433a:	7d23      	ldrb	r3, [r4, #20]
 800433c:	2b01      	cmp	r3, #1
 800433e:	f000 80b2 	beq.w	80044a6 <ScopeTriggerTask+0x372>
						|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004342:	7d63      	ldrb	r3, [r4, #21]
 8004344:	2b01      	cmp	r3, #1
 8004346:	f000 80b5 	beq.w	80044b4 <ScopeTriggerTask+0x380>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){
 800434a:	7d63      	ldrb	r3, [r4, #21]
 800434c:	2b02      	cmp	r3, #2
 800434e:	f47f af3d 	bne.w	80041cc <ScopeTriggerTask+0x98>
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	459a      	cmp	sl, r3
 8004356:	f67f af39 	bls.w	80041cc <ScopeTriggerTask+0x98>
 800435a:	e7db      	b.n	8004314 <ScopeTriggerTask+0x1e0>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 800435c:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <ScopeTriggerTask+0x320>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b280      	uxth	r0, r0
	if(index < lastIndex){
 8004362:	4298      	cmp	r0, r3
		result= index + scope.oneChanSamples - lastIndex;
 8004364:	bf3d      	ittte	cc
 8004366:	6be2      	ldrcc	r2, [r4, #60]	; 0x3c
 8004368:	1ad3      	subcc	r3, r2, r3
 800436a:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 800436c:	1ac0      	subcs	r0, r0, r3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 800436e:	f8d8 2000 	ldr.w	r2, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004372:	f894 3020 	ldrb.w	r3, [r4, #32]
		result= index - lastIndex;
 8004376:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004378:	4410      	add	r0, r2
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 800437a:	2b03      	cmp	r3, #3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 800437c:	f8c8 0000 	str.w	r0, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004380:	f47f af24 	bne.w	80041cc <ScopeTriggerTask+0x98>
 8004384:	f8db 3000 	ldr.w	r3, [fp]
 8004388:	4298      	cmp	r0, r3
 800438a:	f4ff af1f 	bcc.w	80041cc <ScopeTriggerTask+0x98>
					samplingDisable();
 800438e:	f006 ff0f 	bl	800b1b0 <samplingDisable>
					if (scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){	
 8004392:	7d63      	ldrb	r3, [r4, #21]
 8004394:	2b01      	cmp	r3, #1
 8004396:	f000 80a2 	beq.w	80044de <ScopeTriggerTask+0x3aa>
 800439a:	7d63      	ldrb	r3, [r4, #21]
 800439c:	4a33      	ldr	r2, [pc, #204]	; (800446c <ScopeTriggerTask+0x338>)
 800439e:	2b02      	cmp	r3, #2
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	d02a      	beq.n	80043fa <ScopeTriggerTask+0x2c6>
						if(scope.settings.adcRes>8){
 80043a4:	8b63      	ldrh	r3, [r4, #26]
 80043a6:	492e      	ldr	r1, [pc, #184]	; (8004460 <ScopeTriggerTask+0x32c>)
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	8809      	ldrh	r1, [r1, #0]
 80043ac:	f240 809a 	bls.w	80044e4 <ScopeTriggerTask+0x3b0>
							if(scope.settings.triggerEdge == EDGE_RISING){
 80043b0:	7d20      	ldrb	r0, [r4, #20]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80043b2:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 80043b6:	f10c 0c07 	add.w	ip, ip, #7
 80043ba:	0053      	lsls	r3, r2, #1
 80043bc:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
							if(scope.settings.triggerEdge == EDGE_RISING){
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f000 80a9 	beq.w	8004518 <ScopeTriggerTask+0x3e4>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 80043c6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80043ca:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d210      	bcs.n	80043f4 <ScopeTriggerTask+0x2c0>
 80043d2:	3a01      	subs	r2, #1
 80043d4:	3b02      	subs	r3, #2
 80043d6:	e000      	b.n	80043da <ScopeTriggerTask+0x2a6>
 80043d8:	4662      	mov	r2, ip
 80043da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80043de:	3007      	adds	r0, #7
 80043e0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80043e4:	f102 3cff 	add.w	ip, r2, #4294967295
 80043e8:	6840      	ldr	r0, [r0, #4]
 80043ea:	5ac0      	ldrh	r0, [r0, r3]
 80043ec:	4288      	cmp	r0, r1
 80043ee:	f1a3 0302 	sub.w	r3, r3, #2
 80043f2:	d3f1      	bcc.n	80043d8 <ScopeTriggerTask+0x2a4>
						triggerIndex++;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <ScopeTriggerTask+0x338>)
 80043f6:	3201      	adds	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
					SmpBeforeTrig = totalSmpTaken;
 80043fa:	4f1b      	ldr	r7, [pc, #108]	; (8004468 <ScopeTriggerTask+0x334>)
					SmpAfterTrig=samplesTaken;
 80043fc:	f8d8 0000 	ldr.w	r0, [r8]
 8004400:	9001      	str	r0, [sp, #4]
					SmpBeforeTrig = totalSmpTaken;
 8004402:	f240 3c18 	movw	ip, #792	; 0x318
 8004406:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 800440a:	6838      	ldr	r0, [r7, #0]
 800440c:	f8cc 0000 	str.w	r0, [ip]
					SmpAfterTrig=samplesTaken;
 8004410:	4817      	ldr	r0, [pc, #92]	; (8004470 <ScopeTriggerTask+0x33c>)
					scope.triggerIndex = triggerIndex;
 8004412:	6062      	str	r2, [r4, #4]
					SmpAfterTrig=samplesTaken;
 8004414:	9a01      	ldr	r2, [sp, #4]
 8004416:	6002      	str	r2, [r0, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004418:	4812      	ldr	r0, [pc, #72]	; (8004464 <ScopeTriggerTask+0x330>)
					samplesTaken = 0;
 800441a:	2100      	movs	r1, #0
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 800441c:	460b      	mov	r3, r1
					passMsg = MSG_SCOPE_DATA_READY;
 800441e:	f04f 0e15 	mov.w	lr, #21
					scope.state = SCOPE_DATA_SENDING;
 8004422:	f04f 0c04 	mov.w	ip, #4
					samplesTaken = 0;
 8004426:	f8c8 1000 	str.w	r1, [r8]
					totalSmpTaken = 0;
 800442a:	6039      	str	r1, [r7, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 800442c:	f04f 32ff 	mov.w	r2, #4294967295
 8004430:	f10d 010e 	add.w	r1, sp, #14
 8004434:	6800      	ldr	r0, [r0, #0]
					scope.state = SCOPE_DATA_SENDING;
 8004436:	f884 c020 	strb.w	ip, [r4, #32]
					passMsg = MSG_SCOPE_DATA_READY;
 800443a:	f8ad e00e 	strh.w	lr, [sp, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 800443e:	f004 fd8b 	bl	8008f58 <xQueueGenericSend>
 8004442:	e6c3      	b.n	80041cc <ScopeTriggerTask+0x98>
 8004444:	20000334 	.word	0x20000334
 8004448:	20000378 	.word	0x20000378
 800444c:	20000388 	.word	0x20000388
 8004450:	e000ed04 	.word	0xe000ed04
 8004454:	20000324 	.word	0x20000324
 8004458:	20000320 	.word	0x20000320
 800445c:	2000032c 	.word	0x2000032c
 8004460:	20000384 	.word	0x20000384
 8004464:	200047cc 	.word	0x200047cc
 8004468:	2000037c 	.word	0x2000037c
 800446c:	20000380 	.word	0x20000380
 8004470:	20000314 	.word	0x20000314
 8004474:	2000031c 	.word	0x2000031c
 8004478:	20000330 	.word	0x20000330
 800447c:	20000328 	.word	0x20000328
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel)
 8004480:	7d22      	ldrb	r2, [r4, #20]
 8004482:	2a01      	cmp	r2, #1
 8004484:	d01c      	beq.n	80044c0 <ScopeTriggerTask+0x38c>
							|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004486:	7d62      	ldrb	r2, [r4, #21]
 8004488:	2a01      	cmp	r2, #1
 800448a:	d022      	beq.n	80044d2 <ScopeTriggerTask+0x39e>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 800448c:	7d62      	ldrb	r2, [r4, #21]
 800448e:	2a02      	cmp	r2, #2
 8004490:	f47f ae9c 	bne.w	80041cc <ScopeTriggerTask+0x98>
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	4293      	cmp	r3, r2
 8004498:	f67f ae98 	bls.w	80041cc <ScopeTriggerTask+0x98>
 800449c:	e6e6      	b.n	800426c <ScopeTriggerTask+0x138>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80044a4:	e712      	b.n	80042cc <ScopeTriggerTask+0x198>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel)
 80044a6:	4561      	cmp	r1, ip
 80044a8:	f63f af34 	bhi.w	8004314 <ScopeTriggerTask+0x1e0>
						|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80044ac:	7d63      	ldrb	r3, [r4, #21]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f47f af4b 	bne.w	800434a <ScopeTriggerTask+0x216>
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	ebba 0f83 	cmp.w	sl, r3, lsl #2
 80044ba:	f63f af2b 	bhi.w	8004314 <ScopeTriggerTask+0x1e0>
 80044be:	e744      	b.n	800434a <ScopeTriggerTask+0x216>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel)
 80044c0:	f1ac 0c10 	sub.w	ip, ip, #16
 80044c4:	ebbc 4f11 	cmp.w	ip, r1, lsr #16
 80044c8:	f73f aed0 	bgt.w	800426c <ScopeTriggerTask+0x138>
							|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80044cc:	7d62      	ldrb	r2, [r4, #21]
 80044ce:	2a01      	cmp	r2, #1
 80044d0:	d1dc      	bne.n	800448c <ScopeTriggerTask+0x358>
 80044d2:	6922      	ldr	r2, [r4, #16]
 80044d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044d8:	f63f aec8 	bhi.w	800426c <ScopeTriggerTask+0x138>
 80044dc:	e7d6      	b.n	800448c <ScopeTriggerTask+0x358>
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <ScopeTriggerTask+0x448>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	e78a      	b.n	80043fa <ScopeTriggerTask+0x2c6>
							if(scope.settings.triggerEdge == EDGE_RISING){
 80044e4:	7d23      	ldrb	r3, [r4, #20]
 80044e6:	b383      	cbz	r3, 800454a <ScopeTriggerTask+0x416>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 80044e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80044ec:	3307      	adds	r3, #7
 80044ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	5c9b      	ldrb	r3, [r3, r2]
 80044f6:	428b      	cmp	r3, r1
 80044f8:	f4bf af7c 	bcs.w	80043f4 <ScopeTriggerTask+0x2c0>
 80044fc:	3a01      	subs	r2, #1
 80044fe:	e000      	b.n	8004502 <ScopeTriggerTask+0x3ce>
 8004500:	4602      	mov	r2, r0
 8004502:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004506:	3307      	adds	r3, #7
 8004508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800450c:	1e50      	subs	r0, r2, #1
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	5c9b      	ldrb	r3, [r3, r2]
 8004512:	428b      	cmp	r3, r1
 8004514:	d3f4      	bcc.n	8004500 <ScopeTriggerTask+0x3cc>
 8004516:	e76d      	b.n	80043f4 <ScopeTriggerTask+0x2c0>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004518:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800451c:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8004520:	4288      	cmp	r0, r1
 8004522:	f67f af67 	bls.w	80043f4 <ScopeTriggerTask+0x2c0>
 8004526:	3a01      	subs	r2, #1
 8004528:	1e98      	subs	r0, r3, #2
 800452a:	e000      	b.n	800452e <ScopeTriggerTask+0x3fa>
 800452c:	4662      	mov	r2, ip
 800452e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004532:	3307      	adds	r3, #7
 8004534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004538:	f102 3cff 	add.w	ip, r2, #4294967295
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	5a1b      	ldrh	r3, [r3, r0]
 8004540:	428b      	cmp	r3, r1
 8004542:	f1a0 0002 	sub.w	r0, r0, #2
 8004546:	d8f1      	bhi.n	800452c <ScopeTriggerTask+0x3f8>
 8004548:	e754      	b.n	80043f4 <ScopeTriggerTask+0x2c0>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800454a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800454e:	3307      	adds	r3, #7
 8004550:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	428b      	cmp	r3, r1
 800455a:	f67f af4b 	bls.w	80043f4 <ScopeTriggerTask+0x2c0>
 800455e:	3a01      	subs	r2, #1
 8004560:	e000      	b.n	8004564 <ScopeTriggerTask+0x430>
 8004562:	4602      	mov	r2, r0
 8004564:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004568:	3307      	adds	r3, #7
 800456a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800456e:	1e50      	subs	r0, r2, #1
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	5c9b      	ldrb	r3, [r3, r2]
 8004574:	428b      	cmp	r3, r1
 8004576:	d8f4      	bhi.n	8004562 <ScopeTriggerTask+0x42e>
 8004578:	e73c      	b.n	80043f4 <ScopeTriggerTask+0x2c0>
 800457a:	bf00      	nop
 800457c:	20000380 	.word	0x20000380

08004580 <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
	scope.bufferMemory = scopeBuffer;
 8004582:	4c2a      	ldr	r4, [pc, #168]	; (800462c <scopeSetDefault+0xac>)
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <scopeSetDefault+0xb0>)
 8004586:	6023      	str	r3, [r4, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 800458c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004590:	2000      	movs	r0, #0
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004592:	2101      	movs	r1, #1
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8004594:	60a5      	str	r5, [r4, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004596:	7520      	strb	r0, [r4, #20]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004598:	250c      	movs	r5, #12
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 800459a:	7561      	strb	r1, [r4, #21]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 800459c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 80045a0:	82e2      	strh	r2, [r4, #22]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 80045a2:	2164      	movs	r1, #100	; 0x64
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 80045a4:	8322      	strh	r2, [r4, #24]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 80045a6:	f247 5294 	movw	r2, #30100	; 0x7594
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 80045aa:	8365      	strh	r5, [r4, #26]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 80045ac:	83a0      	strh	r0, [r4, #28]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 80045ae:	6121      	str	r1, [r4, #16]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 80045b0:	6263      	str	r3, [r4, #36]	; 0x24
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 80045b2:	63a2      	str	r2, [r4, #56]	; 0x38
	if(scope.settings.adcRes>8){
 80045b4:	8b63      	ldrh	r3, [r4, #26]
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80045b6:	4f1f      	ldr	r7, [pc, #124]	; (8004634 <scopeSetDefault+0xb4>)
	if(scope.settings.adcRes>8){
 80045b8:	2b08      	cmp	r3, #8
		scope.oneChanSamples = scope.oneChanMemSize/2;
 80045ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80045bc:	6838      	ldr	r0, [r7, #0]
void scopeSetDefault(void){
 80045be:	b083      	sub	sp, #12
		scope.oneChanSamples = scope.oneChanMemSize/2;
 80045c0:	bf88      	it	hi
 80045c2:	085b      	lsrhi	r3, r3, #1
	scope.numOfChannles = 1;
 80045c4:	2501      	movs	r5, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80045c6:	2602      	movs	r6, #2
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
		scope.oneChanSamples = scope.oneChanMemSize;
 80045cc:	63e3      	str	r3, [r4, #60]	; 0x3c
	scope.numOfChannles = 1;
 80045ce:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	scope.triggerChannel = 1;
 80045d2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80045d6:	f005 f8ef 	bl	80097b8 <xQueueTakeMutexRecursive>
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80045da:	4631      	mov	r1, r6
 80045dc:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80045de:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80045e2:	f006 fde7 	bl	800b1b4 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80045e6:	2304      	movs	r3, #4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80045e8:	4619      	mov	r1, r3
 80045ea:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80045ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80045f0:	f006 fde0 	bl	800b1b4 <adcSetInputChannel>
 80045f4:	4631      	mov	r1, r6
 80045f6:	4630      	mov	r0, r6
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80045f8:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80045fc:	f006 fdda 	bl	800b1b4 <adcSetInputChannel>
 8004600:	4629      	mov	r1, r5
 8004602:	2003      	movs	r0, #3
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004604:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004608:	f006 fdd4 	bl	800b1b4 <adcSetInputChannel>
		result = 0;
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	f004 fe95 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004612:	a902      	add	r1, sp, #8
 8004614:	2330      	movs	r3, #48	; 0x30
 8004616:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <scopeSetDefault+0xb8>)
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	f004 fc98 	bl	8008f58 <xQueueGenericSend>
}
 8004628:	b003      	add	sp, #12
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462c:	20000334 	.word	0x20000334
 8004630:	2000543c 	.word	0x2000543c
 8004634:	20000378 	.word	0x20000378
 8004638:	20005438 	.word	0x20005438

0800463c <ScopeTask>:
void ScopeTask(void const *argument){
 800463c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004640:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 8004642:	ae02      	add	r6, sp, #8
 8004644:	f64f 73ff 	movw	r3, #65535	; 0xffff
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004648:	2200      	movs	r2, #0
 800464a:	2102      	movs	r1, #2
 800464c:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 800464e:	f826 3d06 	strh.w	r3, [r6, #-6]!
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004652:	f004 fc3d 	bl	8008ed0 <xQueueGenericCreate>
 8004656:	4f78      	ldr	r7, [pc, #480]	; (8004838 <ScopeTask+0x1fc>)
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004658:	4d78      	ldr	r5, [pc, #480]	; (800483c <ScopeTask+0x200>)
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800465a:	6038      	str	r0, [r7, #0]
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 800465c:	2004      	movs	r0, #4
 800465e:	f004 fe39 	bl	80092d4 <xQueueCreateMutex>
 8004662:	4c77      	ldr	r4, [pc, #476]	; (8004840 <ScopeTask+0x204>)
 8004664:	6028      	str	r0, [r5, #0]
 8004666:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8004848 <ScopeTask+0x20c>
 800466a:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 800484c <ScopeTask+0x210>
	scopeSetDefault();
 800466e:	f7ff ff87 	bl	8004580 <scopeSetDefault>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004672:	f04f 0800 	mov.w	r8, #0
			scope.state=SCOPE_SAMPLING_WAITING;
 8004676:	f04f 0a01 	mov.w	sl, #1
 800467a:	e04a      	b.n	8004712 <ScopeTask+0xd6>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d060      	beq.n	8004742 <ScopeTask+0x106>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8004680:	2b12      	cmp	r3, #18
 8004682:	f040 8097 	bne.w	80047b4 <ScopeTask+0x178>
 8004686:	f894 3020 	ldrb.w	r3, [r4, #32]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d03e      	beq.n	800470c <ScopeTask+0xd0>
 800468e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d03a      	beq.n	800470c <ScopeTask+0xd0>
 8004696:	f894 3020 	ldrb.w	r3, [r4, #32]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d036      	beq.n	800470c <ScopeTask+0xd0>
 800469e:	f894 3020 	ldrb.w	r3, [r4, #32]
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d032      	beq.n	800470c <ScopeTask+0xd0>
	writingIndex = 0;
 80046a6:	f8c9 8000 	str.w	r8, [r9]
	uint32_t realfreq=0;
 80046aa:	f8cd 8004 	str.w	r8, [sp, #4]
	ADC_DMA_Stop();
 80046ae:	f006 fbef 	bl	800ae90 <ADC_DMA_Stop>
	TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 80046b2:	a901      	add	r1, sp, #4
 80046b4:	68a0      	ldr	r0, [r4, #8]
 80046b6:	f009 ffa5 	bl	800e604 <TIM_Reconfig_scope>
	ADC_set_sampling_time(realfreq);	
 80046ba:	9801      	ldr	r0, [sp, #4]
 80046bc:	f006 fc44 	bl	800af48 <ADC_set_sampling_time>
		if(scope.numOfChannles>i){
 80046c0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 80b1 	bne.w	800482c <ScopeTask+0x1f0>
 80046ca:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f200 80a6 	bhi.w	8004820 <ScopeTask+0x1e4>
 80046d4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f200 809b 	bhi.w	8004814 <ScopeTask+0x1d8>
 80046de:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	f200 8090 	bhi.w	8004808 <ScopeTask+0x1cc>
	scope.settings.realSamplingFreq=realfreq;
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	60e3      	str	r3, [r4, #12]
			scope.state=SCOPE_SAMPLING_WAITING;
 80046ec:	f884 a020 	strb.w	sl, [r4, #32]
			samplingEnable();
 80046f0:	f006 fd5c 	bl	800b1ac <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 80046f4:	f04f 0c17 	mov.w	ip, #23
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80046f8:	2300      	movs	r3, #0
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	a901      	add	r1, sp, #4
 8004700:	f8db 0000 	ldr.w	r0, [fp]
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004704:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004708:	f004 fc26 	bl	8008f58 <xQueueGenericSend>
		xSemaphoreGiveRecursive(scopeMutex);
 800470c:	6828      	ldr	r0, [r5, #0]
 800470e:	f004 fe15 	bl	800933c <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004712:	2300      	movs	r3, #0
 8004714:	f04f 32ff 	mov.w	r2, #4294967295
 8004718:	4631      	mov	r1, r6
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f004 fec4 	bl	80094a8 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004720:	f04f 31ff 	mov.w	r1, #4294967295
 8004724:	6828      	ldr	r0, [r5, #0]
 8004726:	f005 f847 	bl	80097b8 <xQueueTakeMutexRecursive>
		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 800472a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800472e:	2b14      	cmp	r3, #20
 8004730:	d1a4      	bne.n	800467c <ScopeTask+0x40>
 8004732:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0e8      	beq.n	800470c <ScopeTask+0xd0>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 800473a:	2306      	movs	r3, #6
 800473c:	f884 3020 	strb.w	r3, [r4, #32]
 8004740:	e7e4      	b.n	800470c <ScopeTask+0xd0>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8004742:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004746:	2b05      	cmp	r3, #5
 8004748:	d0e0      	beq.n	800470c <ScopeTask+0xd0>
 800474a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0dc      	beq.n	800470c <ScopeTask+0xd0>
				samplingDisable();
 8004752:	f006 fd2d 	bl	800b1b0 <samplingDisable>
	writingIndex = 0;
 8004756:	f8c9 8000 	str.w	r8, [r9]
	uint32_t realfreq=0;
 800475a:	f8cd 8004 	str.w	r8, [sp, #4]
	ADC_DMA_Stop();
 800475e:	f006 fb97 	bl	800ae90 <ADC_DMA_Stop>
	TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8004762:	a901      	add	r1, sp, #4
 8004764:	68a0      	ldr	r0, [r4, #8]
 8004766:	f009 ff4d 	bl	800e604 <TIM_Reconfig_scope>
	ADC_set_sampling_time(realfreq);	
 800476a:	9801      	ldr	r0, [sp, #4]
 800476c:	f006 fbec 	bl	800af48 <ADC_set_sampling_time>
		if(scope.numOfChannles>i){
 8004770:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004774:	2b00      	cmp	r3, #0
 8004776:	d141      	bne.n	80047fc <ScopeTask+0x1c0>
 8004778:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800477c:	2b01      	cmp	r3, #1
 800477e:	d837      	bhi.n	80047f0 <ScopeTask+0x1b4>
 8004780:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004784:	2b02      	cmp	r3, #2
 8004786:	d82d      	bhi.n	80047e4 <ScopeTask+0x1a8>
 8004788:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800478c:	2b03      	cmp	r3, #3
 800478e:	d823      	bhi.n	80047d8 <ScopeTask+0x19c>
	scope.settings.realSamplingFreq=realfreq;
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	60e3      	str	r3, [r4, #12]
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 8004794:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d0b7      	beq.n	800470c <ScopeTask+0xd0>
 800479c:	f894 3020 	ldrb.w	r3, [r4, #32]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d0b3      	beq.n	800470c <ScopeTask+0xd0>
					samplesTaken=0;
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <ScopeTask+0x208>)
					scope.state=SCOPE_SAMPLING_WAITING;
 80047a6:	f884 a020 	strb.w	sl, [r4, #32]
					samplesTaken=0;
 80047aa:	f8c3 8000 	str.w	r8, [r3]
					samplingEnable();
 80047ae:	f006 fcfd 	bl	800b1ac <samplingEnable>
 80047b2:	e7ab      	b.n	800470c <ScopeTask+0xd0>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 80047b4:	2b13      	cmp	r3, #19
 80047b6:	d104      	bne.n	80047c2 <ScopeTask+0x186>
			samplingDisable();
 80047b8:	f006 fcfa 	bl	800b1b0 <samplingDisable>
			scope.state = SCOPE_IDLE;
 80047bc:	f884 8020 	strb.w	r8, [r4, #32]
 80047c0:	e7a4      	b.n	800470c <ScopeTask+0xd0>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 80047c2:	2b11      	cmp	r3, #17
 80047c4:	d1a2      	bne.n	800470c <ScopeTask+0xd0>
 80047c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d19e      	bne.n	800470c <ScopeTask+0xd0>
			samplingEnable();
 80047ce:	f006 fced 	bl	800b1ac <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 80047d2:	f884 a020 	strb.w	sl, [r4, #32]
 80047d6:	e799      	b.n	800470c <ScopeTask+0xd0>
			ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 80047d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80047dc:	2003      	movs	r0, #3
 80047de:	f006 fb23 	bl	800ae28 <ADC_DMA_Reconfig>
 80047e2:	e7d5      	b.n	8004790 <ScopeTask+0x154>
 80047e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80047e8:	2002      	movs	r0, #2
 80047ea:	f006 fb1d 	bl	800ae28 <ADC_DMA_Reconfig>
 80047ee:	e7cb      	b.n	8004788 <ScopeTask+0x14c>
 80047f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80047f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80047f4:	2001      	movs	r0, #1
 80047f6:	f006 fb17 	bl	800ae28 <ADC_DMA_Reconfig>
 80047fa:	e7c1      	b.n	8004780 <ScopeTask+0x144>
 80047fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004800:	2000      	movs	r0, #0
 8004802:	f006 fb11 	bl	800ae28 <ADC_DMA_Reconfig>
 8004806:	e7b7      	b.n	8004778 <ScopeTask+0x13c>
 8004808:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800480a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800480c:	2003      	movs	r0, #3
 800480e:	f006 fb0b 	bl	800ae28 <ADC_DMA_Reconfig>
 8004812:	e769      	b.n	80046e8 <ScopeTask+0xac>
 8004814:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004816:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004818:	2002      	movs	r0, #2
 800481a:	f006 fb05 	bl	800ae28 <ADC_DMA_Reconfig>
 800481e:	e75e      	b.n	80046de <ScopeTask+0xa2>
 8004820:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004822:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004824:	2001      	movs	r0, #1
 8004826:	f006 faff 	bl	800ae28 <ADC_DMA_Reconfig>
 800482a:	e753      	b.n	80046d4 <ScopeTask+0x98>
 800482c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800482e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004830:	2000      	movs	r0, #0
 8004832:	f006 faf9 	bl	800ae28 <ADC_DMA_Reconfig>
 8004836:	e748      	b.n	80046ca <ScopeTask+0x8e>
 8004838:	20005438 	.word	0x20005438
 800483c:	20000378 	.word	0x20000378
 8004840:	20000334 	.word	0x20000334
 8004844:	20000328 	.word	0x20000328
 8004848:	20000388 	.word	0x20000388
 800484c:	200047cc 	.word	0x200047cc

08004850 <GetNumOfChannels>:
	return scope.numOfChannles;
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <GetNumOfChannels+0x8>)
 8004852:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
}
 8004856:	4770      	bx	lr
 8004858:	20000334 	.word	0x20000334

0800485c <getDataPointer>:
	return scope.pChanMem[chan];
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <getDataPointer+0xc>)
 800485e:	3008      	adds	r0, #8
 8004860:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004864:	6858      	ldr	r0, [r3, #4]
}
 8004866:	4770      	bx	lr
 8004868:	20000334 	.word	0x20000334

0800486c <getOneChanMemSize>:
	return scope.oneChanMemSize;
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <getOneChanMemSize+0x8>)
 800486e:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000334 	.word	0x20000334

08004878 <getTriggerIndex>:
	return triggerIndex;
 8004878:	4b01      	ldr	r3, [pc, #4]	; (8004880 <getTriggerIndex+0x8>)
}
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000380 	.word	0x20000380

08004884 <getSamples>:
	return scope.settings.samplesToSend;
 8004884:	4b01      	ldr	r3, [pc, #4]	; (800488c <getSamples+0x8>)
 8004886:	6918      	ldr	r0, [r3, #16]
}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000334 	.word	0x20000334

08004890 <getADCRes>:
	return scope.settings.adcRes;
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <getADCRes+0x8>)
 8004892:	8b58      	ldrh	r0, [r3, #26]
}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000334 	.word	0x20000334

0800489c <getPretrigger>:
	return scope.settings.pretrigger;
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <getPretrigger+0x8>)
 800489e:	8b18      	ldrh	r0, [r3, #24]
}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000334 	.word	0x20000334

080048a8 <getScopeState>:
	return scope.state;
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <getScopeState+0x8>)
 80048aa:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 80048ae:	4770      	bx	lr
 80048b0:	20000334 	.word	0x20000334

080048b4 <scopeSetTriggerMode>:
void scopeSetTriggerMode(scopeTriggerMode mode){
 80048b4:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80048b6:	4c07      	ldr	r4, [pc, #28]	; (80048d4 <scopeSetTriggerMode+0x20>)
void scopeSetTriggerMode(scopeTriggerMode mode){
 80048b8:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80048ba:	f04f 31ff 	mov.w	r1, #4294967295
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	f004 ff7a 	bl	80097b8 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <scopeSetTriggerMode+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 80048c6:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerMode = mode;
 80048c8:	755d      	strb	r5, [r3, #21]
}
 80048ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 80048ce:	f004 bd35 	b.w	800933c <xQueueGiveMutexRecursive>
 80048d2:	bf00      	nop
 80048d4:	20000378 	.word	0x20000378
 80048d8:	20000334 	.word	0x20000334

080048dc <scopeSetTriggerEdge>:
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 80048dc:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80048de:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <scopeSetTriggerEdge+0x38>)
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 80048e0:	b083      	sub	sp, #12
 80048e2:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80048e4:	f04f 31ff 	mov.w	r1, #4294967295
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	f004 ff65 	bl	80097b8 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <scopeSetTriggerEdge+0x3c>)
	xSemaphoreGiveRecursive(scopeMutex);
 80048f0:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerEdge = edge;
 80048f2:	751d      	strb	r5, [r3, #20]
	xSemaphoreGiveRecursive(scopeMutex);
 80048f4:	f004 fd22 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80048f8:	a902      	add	r1, sp, #8
 80048fa:	2330      	movs	r3, #48	; 0x30
 80048fc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <scopeSetTriggerEdge+0x40>)
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	2300      	movs	r3, #0
 800490a:	f004 fb25 	bl	8008f58 <xQueueGenericSend>
}
 800490e:	b003      	add	sp, #12
 8004910:	bd30      	pop	{r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	20000378 	.word	0x20000378
 8004918:	20000334 	.word	0x20000334
 800491c:	20005438 	.word	0x20005438

08004920 <scopeSetDataDepth>:
uint8_t scopeSetDataDepth(uint16_t res){
 8004920:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004922:	4e25      	ldr	r6, [pc, #148]	; (80049b8 <scopeSetDataDepth+0x98>)
	scope.settings.adcRes = res;
 8004924:	4c25      	ldr	r4, [pc, #148]	; (80049bc <scopeSetDataDepth+0x9c>)
uint8_t scopeSetDataDepth(uint16_t res){
 8004926:	4605      	mov	r5, r0
 8004928:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800492a:	f04f 31ff 	mov.w	r1, #4294967295
 800492e:	6830      	ldr	r0, [r6, #0]
 8004930:	f004 ff42 	bl	80097b8 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8004934:	8365      	strh	r5, [r4, #26]
	uint32_t data_len=scope.settings.samplesToSend;
 8004936:	6923      	ldr	r3, [r4, #16]
	if(scope.settings.adcRes>8){
 8004938:	8b62      	ldrh	r2, [r4, #26]
 800493a:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 800493c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
		data_len=data_len*2;
 8004940:	bf88      	it	hi
 8004942:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004944:	fb03 f302 	mul.w	r3, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004948:	f247 5230 	movw	r2, #30000	; 0x7530
 800494c:	4293      	cmp	r3, r2
 800494e:	d829      	bhi.n	80049a4 <scopeSetDataDepth+0x84>
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8004950:	8b60      	ldrh	r0, [r4, #26]
 8004952:	f7fb fd8f 	bl	8000474 <__aeabi_ui2d>
 8004956:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80049b0 <scopeSetDataDepth+0x90>
 800495a:	ec41 0b11 	vmov	d1, r0, r1
 800495e:	f00b fd03 	bl	8010368 <pow>
 8004962:	ec51 0b10 	vmov	r0, r1, d0
 8004966:	f7fc f8d7 	bl	8000b18 <__aeabi_d2uiz>
 800496a:	b280      	uxth	r0, r0
 800496c:	83a0      	strh	r0, [r4, #28]
		if(scope.settings.adcRes>8){
 800496e:	8b63      	ldrh	r3, [r4, #26]
 8004970:	2b08      	cmp	r3, #8
			scope.oneChanSamples=scope.oneChanMemSize/2;
 8004972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004974:	bf88      	it	hi
 8004976:	085b      	lsrhi	r3, r3, #1
			scope.oneChanSamples=scope.oneChanMemSize;
 8004978:	63e3      	str	r3, [r4, #60]	; 0x3c
		adcSetResolution(res);
 800497a:	b2e8      	uxtb	r0, r5
 800497c:	f006 fd46 	bl	800b40c <adcSetResolution>
		result=0;
 8004980:	2400      	movs	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004982:	6830      	ldr	r0, [r6, #0]
 8004984:	f004 fcda 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004988:	a902      	add	r1, sp, #8
 800498a:	2330      	movs	r3, #48	; 0x30
 800498c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <scopeSetDataDepth+0xa0>)
 8004992:	f04f 32ff 	mov.w	r2, #4294967295
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	f004 fadd 	bl	8008f58 <xQueueGenericSend>
}
 800499e:	4620      	mov	r0, r4
 80049a0:	b002      	add	sp, #8
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	b2ed      	uxtb	r5, r5
		scope.settings.adcRes = resTmp;
 80049a6:	8365      	strh	r5, [r4, #26]
	uint8_t result=BUFFER_SIZE_ERR;
 80049a8:	243a      	movs	r4, #58	; 0x3a
 80049aa:	e7ea      	b.n	8004982 <scopeSetDataDepth+0x62>
 80049ac:	f3af 8000 	nop.w
 80049b0:	00000000 	.word	0x00000000
 80049b4:	40000000 	.word	0x40000000
 80049b8:	20000378 	.word	0x20000378
 80049bc:	20000334 	.word	0x20000334
 80049c0:	20005438 	.word	0x20005438

080049c4 <scopeSetSamplingFreq>:
uint8_t scopeSetSamplingFreq(uint32_t freq){
 80049c4:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80049c6:	4c12      	ldr	r4, [pc, #72]	; (8004a10 <scopeSetSamplingFreq+0x4c>)
uint8_t scopeSetSamplingFreq(uint32_t freq){
 80049c8:	4605      	mov	r5, r0
 80049ca:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80049cc:	f04f 31ff 	mov.w	r1, #4294967295
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	f004 fef1 	bl	80097b8 <xQueueTakeMutexRecursive>
	if (freq<=MAX_SAMPLING_FREQ_12B){
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <scopeSetSamplingFreq+0x50>)
 80049d8:	429d      	cmp	r5, r3
 80049da:	d812      	bhi.n	8004a02 <scopeSetSamplingFreq+0x3e>
		scope.settings.samplingFrequency = freq;
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <scopeSetSamplingFreq+0x54>)
 80049de:	609d      	str	r5, [r3, #8]
	xSemaphoreGiveRecursive(scopeMutex);
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	f004 fcab 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80049e6:	a902      	add	r1, sp, #8
 80049e8:	2330      	movs	r3, #48	; 0x30
 80049ea:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <scopeSetSamplingFreq+0x58>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	2300      	movs	r3, #0
 80049f8:	f004 faae 	bl	8008f58 <xQueueGenericSend>
}
 80049fc:	2000      	movs	r0, #0
 80049fe:	b003      	add	sp, #12
 8004a00:	bd30      	pop	{r4, r5, pc}
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004a02:	4d05      	ldr	r5, [pc, #20]	; (8004a18 <scopeSetSamplingFreq+0x54>)
 8004a04:	8b68      	ldrh	r0, [r5, #26]
 8004a06:	b2c0      	uxtb	r0, r0
 8004a08:	f009 fe0e 	bl	800e628 <getMaxScopeSamplingFreq>
 8004a0c:	60a8      	str	r0, [r5, #8]
 8004a0e:	e7e7      	b.n	80049e0 <scopeSetSamplingFreq+0x1c>
 8004a10:	20000378 	.word	0x20000378
 8004a14:	003d0900 	.word	0x003d0900
 8004a18:	20000334 	.word	0x20000334
 8004a1c:	20005438 	.word	0x20005438

08004a20 <scopeSetTrigLevel>:
void scopeSetTrigLevel(uint16_t level){
 8004a20:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a22:	4c07      	ldr	r4, [pc, #28]	; (8004a40 <scopeSetTrigLevel+0x20>)
void scopeSetTrigLevel(uint16_t level){
 8004a24:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a26:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	f004 fec4 	bl	80097b8 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <scopeSetTrigLevel+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004a32:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerLevel = level;
 8004a34:	82dd      	strh	r5, [r3, #22]
}
 8004a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004a3a:	f004 bc7f 	b.w	800933c <xQueueGiveMutexRecursive>
 8004a3e:	bf00      	nop
 8004a40:	20000378 	.word	0x20000378
 8004a44:	20000334 	.word	0x20000334

08004a48 <scopeSetPretrigger>:
void scopeSetPretrigger(uint16_t pretrig){
 8004a48:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a4a:	4c07      	ldr	r4, [pc, #28]	; (8004a68 <scopeSetPretrigger+0x20>)
void scopeSetPretrigger(uint16_t pretrig){
 8004a4c:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	f004 feb0 	bl	80097b8 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <scopeSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004a5a:	6820      	ldr	r0, [r4, #0]
	scope.settings.pretrigger = pretrig;
 8004a5c:	831d      	strh	r5, [r3, #24]
}
 8004a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004a62:	f004 bc6b 	b.w	800933c <xQueueGiveMutexRecursive>
 8004a66:	bf00      	nop
 8004a68:	20000378 	.word	0x20000378
 8004a6c:	20000334 	.word	0x20000334

08004a70 <scopeSetNumOfSamples>:
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004a70:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a72:	4d10      	ldr	r5, [pc, #64]	; (8004ab4 <scopeSetNumOfSamples+0x44>)
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004a74:	4c10      	ldr	r4, [pc, #64]	; (8004ab8 <scopeSetNumOfSamples+0x48>)
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004a76:	b082      	sub	sp, #8
 8004a78:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a7e:	6828      	ldr	r0, [r5, #0]
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004a80:	6923      	ldr	r3, [r4, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004a82:	f004 fe99 	bl	80097b8 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8004a86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	xSemaphoreGiveRecursive(scopeMutex);
 8004a88:	6828      	ldr	r0, [r5, #0]
	if(smp<scope.oneChanSamples){
 8004a8a:	42b3      	cmp	r3, r6
		scope.settings.samplesToSend = smp;
 8004a8c:	bf8a      	itet	hi
 8004a8e:	6126      	strhi	r6, [r4, #16]
	uint8_t result=BUFFER_SIZE_ERR;
 8004a90:	243a      	movls	r4, #58	; 0x3a
		result=0;
 8004a92:	2400      	movhi	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004a94:	f004 fc52 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004a98:	a902      	add	r1, sp, #8
 8004a9a:	2330      	movs	r3, #48	; 0x30
 8004a9c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <scopeSetNumOfSamples+0x4c>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f004 fa55 	bl	8008f58 <xQueueGenericSend>
}
 8004aae:	4620      	mov	r0, r4
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	20000378 	.word	0x20000378
 8004ab8:	20000334 	.word	0x20000334
 8004abc:	20005438 	.word	0x20005438

08004ac0 <scopeSetNumOfChannels>:
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t chanTmp=scope.numOfChannles;
 8004ac2:	4c35      	ldr	r4, [pc, #212]	; (8004b98 <scopeSetNumOfChannels+0xd8>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ac4:	4e35      	ldr	r6, [pc, #212]	; (8004b9c <scopeSetNumOfChannels+0xdc>)
	uint8_t chanTmp=scope.numOfChannles;
 8004ac6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004aca:	4605      	mov	r5, r0
 8004acc:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ace:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad2:	6830      	ldr	r0, [r6, #0]
	uint8_t chanTmp=scope.numOfChannles;
 8004ad4:	b2df      	uxtb	r7, r3
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ad6:	f004 fe6f 	bl	80097b8 <xQueueTakeMutexRecursive>
	if(chan<=MAX_ADC_CHANNELS){
 8004ada:	2d04      	cmp	r5, #4
 8004adc:	d858      	bhi.n	8004b90 <scopeSetNumOfChannels+0xd0>
		scope.numOfChannles=chan;
 8004ade:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	uint32_t data_len=scope.settings.samplesToSend;
 8004ae2:	6923      	ldr	r3, [r4, #16]
	if(scope.settings.adcRes>8){
 8004ae4:	8b62      	ldrh	r2, [r4, #26]
 8004ae6:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004ae8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
		data_len=data_len*2;
 8004aec:	bf88      	it	hi
 8004aee:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004af0:	fb03 f202 	mul.w	r2, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004af4:	f247 5330 	movw	r3, #30000	; 0x7530
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d835      	bhi.n	8004b68 <scopeSetNumOfChannels+0xa8>
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 8004afc:	fb93 f3f5 	sdiv	r3, r3, r5
 8004b00:	3364      	adds	r3, #100	; 0x64
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	63a3      	str	r3, [r4, #56]	; 0x38
			if(scope.settings.adcRes>8){
 8004b08:	8b63      	ldrh	r3, [r4, #26]
 8004b0a:	2b08      	cmp	r3, #8
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b0e:	bf88      	it	hi
 8004b10:	085b      	lsrhi	r3, r3, #1
 8004b12:	63e3      	str	r3, [r4, #60]	; 0x3c
			for(uint8_t i=0;i<chan;i++){
 8004b14:	b335      	cbz	r5, 8004b64 <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b16:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <scopeSetNumOfChannels+0xe0>)
 8004b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b1c:	f002 0301 	and.w	r3, r2, #1
 8004b20:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004b22:	2d01      	cmp	r5, #1
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b24:	6263      	str	r3, [r4, #36]	; 0x24
			for(uint8_t i=0;i<chan;i++){
 8004b26:	d01d      	beq.n	8004b64 <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	440b      	add	r3, r1
 8004b34:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004b36:	2d02      	cmp	r5, #2
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b38:	62a3      	str	r3, [r4, #40]	; 0x28
			for(uint8_t i=0;i<chan;i++){
 8004b3a:	d013      	beq.n	8004b64 <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b40:	f002 0301 	and.w	r3, r2, #1
 8004b44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004b48:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004b4a:	2d04      	cmp	r5, #4
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8004b4e:	d109      	bne.n	8004b64 <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004b50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b54:	4413      	add	r3, r2
 8004b56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	440b      	add	r3, r1
 8004b60:	441a      	add	r2, r3
 8004b62:	6322      	str	r2, [r4, #48]	; 0x30
			result=0;
 8004b64:	2400      	movs	r4, #0
 8004b66:	e002      	b.n	8004b6e <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 8004b68:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
	uint8_t result=BUFFER_SIZE_ERR;
 8004b6c:	243a      	movs	r4, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
 8004b6e:	6830      	ldr	r0, [r6, #0]
 8004b70:	f004 fbe4 	bl	800933c <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004b74:	a902      	add	r1, sp, #8
 8004b76:	2330      	movs	r3, #48	; 0x30
 8004b78:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <scopeSetNumOfChannels+0xe4>)
 8004b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	f004 f9e7 	bl	8008f58 <xQueueGenericSend>
}
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t result=BUFFER_SIZE_ERR;
 8004b90:	243a      	movs	r4, #58	; 0x3a
}
 8004b92:	4620      	mov	r0, r4
 8004b94:	b003      	add	sp, #12
 8004b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b98:	20000334 	.word	0x20000334
 8004b9c:	20000378 	.word	0x20000378
 8004ba0:	2000543c 	.word	0x2000543c
 8004ba4:	20005438 	.word	0x20005438

08004ba8 <scopeSetTrigChannel>:
	if(chan<=MAX_ADC_CHANNELS){
 8004ba8:	2804      	cmp	r0, #4
 8004baa:	d81c      	bhi.n	8004be6 <scopeSetTrigChannel+0x3e>
uint8_t scopeSetTrigChannel(uint8_t chan){
 8004bac:	b530      	push	{r4, r5, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004bae:	4d0f      	ldr	r5, [pc, #60]	; (8004bec <scopeSetTrigChannel+0x44>)
uint8_t scopeSetTrigChannel(uint8_t chan){
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	6828      	ldr	r0, [r5, #0]
 8004bba:	f004 fdfd 	bl	80097b8 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <scopeSetTrigChannel+0x48>)
		xSemaphoreGiveRecursive(scopeMutex);
 8004bc0:	6828      	ldr	r0, [r5, #0]
		scope.triggerChannel=chan;
 8004bc2:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
		xSemaphoreGiveRecursive(scopeMutex);
 8004bc6:	f004 fbb9 	bl	800933c <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004bca:	a902      	add	r1, sp, #8
 8004bcc:	2330      	movs	r3, #48	; 0x30
 8004bce:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <scopeSetTrigChannel+0x4c>)
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f004 f9bc 	bl	8008f58 <xQueueGenericSend>
		result=0;
 8004be0:	2000      	movs	r0, #0
}
 8004be2:	b003      	add	sp, #12
 8004be4:	bd30      	pop	{r4, r5, pc}
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 8004be6:	2038      	movs	r0, #56	; 0x38
}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000378 	.word	0x20000378
 8004bf0:	20000334 	.word	0x20000334
 8004bf4:	20005438 	.word	0x20005438

08004bf8 <scopeGetRealSmplFreq>:
	return scope.settings.realSamplingFreq;
 8004bf8:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <scopeGetRealSmplFreq+0x8>)
 8004bfa:	68d8      	ldr	r0, [r3, #12]
}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000334 	.word	0x20000334

08004c04 <scopeSetADCInputChannel>:
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8004c04:	2803      	cmp	r0, #3
 8004c06:	d826      	bhi.n	8004c56 <scopeSetADCInputChannel+0x52>
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <scopeSetADCInputChannel+0x58>)
 8004c0a:	5c1b      	ldrb	r3, [r3, r0]
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	d922      	bls.n	8004c56 <scopeSetADCInputChannel+0x52>
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004c10:	b570      	push	{r4, r5, r6, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c12:	4e13      	ldr	r6, [pc, #76]	; (8004c60 <scopeSetADCInputChannel+0x5c>)
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004c14:	b082      	sub	sp, #8
 8004c16:	460d      	mov	r5, r1
 8004c18:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c1e:	6830      	ldr	r0, [r6, #0]
 8004c20:	f004 fdca 	bl	80097b8 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <scopeSetADCInputChannel+0x60>)
 8004c26:	4423      	add	r3, r4
		adcSetInputChannel(adc, chann);
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4620      	mov	r0, r4
		scope.adcChannel[adc] = chann;
 8004c2c:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
		adcSetInputChannel(adc, chann);
 8004c30:	f006 fac0 	bl	800b1b4 <adcSetInputChannel>
		xSemaphoreGiveRecursive(scopeMutex);
 8004c34:	6830      	ldr	r0, [r6, #0]
 8004c36:	f004 fb81 	bl	800933c <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004c3a:	a902      	add	r1, sp, #8
 8004c3c:	2330      	movs	r3, #48	; 0x30
 8004c3e:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <scopeSetADCInputChannel+0x64>)
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f004 f984 	bl	8008f58 <xQueueGenericSend>
		result = 0;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	b002      	add	sp, #8
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8004c56:	203d      	movs	r0, #61	; 0x3d
}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	080117fc 	.word	0x080117fc
 8004c60:	20000378 	.word	0x20000378
 8004c64:	20000334 	.word	0x20000334
 8004c68:	20005438 	.word	0x20005438

08004c6c <scopeSetADCInputChannelDefault>:
uint8_t scopeSetADCInputChannelDefault(){
 8004c6c:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c6e:	4e1a      	ldr	r6, [pc, #104]	; (8004cd8 <scopeSetADCInputChannelDefault+0x6c>)
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c70:	4c1a      	ldr	r4, [pc, #104]	; (8004cdc <scopeSetADCInputChannelDefault+0x70>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c72:	6830      	ldr	r0, [r6, #0]
uint8_t scopeSetADCInputChannelDefault(){
 8004c74:	b082      	sub	sp, #8
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c76:	2502      	movs	r5, #2
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	f004 fd9c 	bl	80097b8 <xQueueTakeMutexRecursive>
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004c80:	4629      	mov	r1, r5
 8004c82:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c84:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004c88:	f006 fa94 	bl	800b1b4 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c8c:	2304      	movs	r3, #4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004c8e:	4619      	mov	r1, r3
 8004c90:	2001      	movs	r0, #1
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004c96:	f006 fa8d 	bl	800b1b4 <adcSetInputChannel>
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004c9e:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ca2:	f006 fa87 	bl	800b1b4 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ca6:	2301      	movs	r3, #1
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ca8:	4619      	mov	r1, r3
 8004caa:	2003      	movs	r0, #3
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004cac:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004cb0:	f006 fa80 	bl	800b1b4 <adcSetInputChannel>
	xSemaphoreGiveRecursive(scopeMutex);
 8004cb4:	6830      	ldr	r0, [r6, #0]
 8004cb6:	f004 fb41 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004cba:	a902      	add	r1, sp, #8
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <scopeSetADCInputChannelDefault+0x74>)
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f004 f944 	bl	8008f58 <xQueueGenericSend>
	return result;
}
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	b002      	add	sp, #8
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000378 	.word	0x20000378
 8004cdc:	20000334 	.word	0x20000334
 8004ce0:	20005438 	.word	0x20005438

08004ce4 <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 8004ce4:	b570      	push	{r4, r5, r6, lr}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ce6:	4e1a      	ldr	r6, [pc, #104]	; (8004d50 <scopeSetADCInputChannelVref+0x6c>)
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004ce8:	4c1a      	ldr	r4, [pc, #104]	; (8004d54 <scopeSetADCInputChannelVref+0x70>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cea:	6830      	ldr	r0, [r6, #0]
uint8_t scopeSetADCInputChannelVref(){
 8004cec:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cee:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf2:	f004 fd61 	bl	80097b8 <xQueueTakeMutexRecursive>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004cf6:	2308      	movs	r3, #8
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004cfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d00:	f006 fa58 	bl	800b1b4 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004d04:	2309      	movs	r3, #9
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d06:	4619      	mov	r1, r3
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004d08:	2503      	movs	r5, #3
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d0a:	2001      	movs	r0, #1
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004d0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d10:	f006 fa50 	bl	800b1b4 <adcSetInputChannel>
 8004d14:	4629      	mov	r1, r5
 8004d16:	2002      	movs	r0, #2
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004d18:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d1c:	f006 fa4a 	bl	800b1b4 <adcSetInputChannel>
 8004d20:	4629      	mov	r1, r5
 8004d22:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004d24:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004d28:	f006 fa44 	bl	800b1b4 <adcSetInputChannel>
		result = 0;
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8004d2c:	6830      	ldr	r0, [r6, #0]
 8004d2e:	f004 fb05 	bl	800933c <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004d32:	a902      	add	r1, sp, #8
 8004d34:	2330      	movs	r3, #48	; 0x30
 8004d36:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <scopeSetADCInputChannelVref+0x74>)
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	f004 f908 	bl	8008f58 <xQueueGenericSend>
	return result;
}
 8004d48:	2000      	movs	r0, #0
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000378 	.word	0x20000378
 8004d54:	20000334 	.word	0x20000334
 8004d58:	20005438 	.word	0x20005438

08004d5c <scopeGetRanges>:
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	7003      	strb	r3, [r0, #0]
	return RANGES;	
#endif


}
 8004d60:	4800      	ldr	r0, [pc, #0]	; (8004d64 <scopeGetRanges+0x8>)
 8004d62:	4770      	bx	lr
 8004d64:	08011800 	.word	0x08011800

08004d68 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8004d68:	b500      	push	{lr}
 8004d6a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_RESTART;
 8004d6c:	a902      	add	r1, sp, #8
 8004d6e:	2311      	movs	r3, #17
 8004d70:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <scopeRestart+0x20>)
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f004 f8eb 	bl	8008f58 <xQueueGenericSend>
}
 8004d82:	b003      	add	sp, #12
 8004d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d88:	20005438 	.word	0x20005438

08004d8c <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 8004d8c:	b500      	push	{lr}
 8004d8e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_START;
 8004d90:	a902      	add	r1, sp, #8
 8004d92:	2312      	movs	r3, #18
 8004d94:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <scopeStart+0x20>)
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	f004 f8d9 	bl	8008f58 <xQueueGenericSend>
}
 8004da6:	b003      	add	sp, #12
 8004da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dac:	20005438 	.word	0x20005438

08004db0 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 8004db0:	b500      	push	{lr}
 8004db2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_STOP;
 8004db4:	a902      	add	r1, sp, #8
 8004db6:	2313      	movs	r3, #19
 8004db8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <scopeStop+0x20>)
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f004 f8c7 	bl	8008f58 <xQueueGenericSend>
}
 8004dca:	b003      	add	sp, #12
 8004dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd0:	20005438 	.word	0x20005438

08004dd4 <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8004dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2102      	movs	r1, #2
 8004de0:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8004de2:	f8ad 3006 	strh.w	r3, [sp, #6]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004de6:	f004 f873 	bl	8008ed0 <xQueueGenericCreate>
 8004dea:	4d25      	ldr	r5, [pc, #148]	; (8004e80 <SyncPwmTask+0xac>)
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004dec:	4c25      	ldr	r4, [pc, #148]	; (8004e84 <SyncPwmTask+0xb0>)
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004dee:	6028      	str	r0, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004df0:	2004      	movs	r0, #4
 8004df2:	f004 fa6f 	bl	80092d4 <xQueueCreateMutex>

	if(syncPwmMessageQueue == 0){
 8004df6:	682b      	ldr	r3, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004df8:	6020      	str	r0, [r4, #0]
	if(syncPwmMessageQueue == 0){
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d035      	beq.n	8004e6a <SyncPwmTask+0x96>
}

void syncPwmSetDefault(void)
{
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 8004dfe:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <SyncPwmTask+0xb4>)
 8004e00:	2101      	movs	r1, #1
	syncPwm.chan2 = CHAN_ENABLE;
	syncPwm.chan3 = CHAN_ENABLE;
	syncPwm.chan4 = CHAN_ENABLE;

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 8004e02:	f44f 6661 	mov.w	r6, #3600	; 0xe10
	syncPwm.dataEdgeChan1[1] = 0;
	syncPwm.dataEdgeChan2[0] = 7200;
 8004e06:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
	syncPwm.dataEdgeChan1[1] = 0;
 8004e0a:	2700      	movs	r7, #0
	syncPwm.chan1 = CHAN_ENABLE;
 8004e0c:	7551      	strb	r1, [r2, #21]
	syncPwm.chan2 = CHAN_ENABLE;
 8004e0e:	7591      	strb	r1, [r2, #22]
	syncPwm.chan3 = CHAN_ENABLE;
 8004e10:	75d1      	strb	r1, [r2, #23]
	syncPwm.chan4 = CHAN_ENABLE;
 8004e12:	7611      	strb	r1, [r2, #24]
	syncPwm.dataEdgeChan1[0] = 3600;
 8004e14:	8016      	strh	r6, [r2, #0]
	syncPwm.dataEdgeChan2[1] = 3600;			
	syncPwm.dataEdgeChan3[0] = 10400;
 8004e16:	f642 01a0 	movw	r1, #10400	; 0x28a0
	syncPwm.dataEdgeChan1[1] = 0;
 8004e1a:	8057      	strh	r7, [r2, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8004e1c:	8090      	strh	r0, [r2, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8004e1e:	80d6      	strh	r6, [r2, #6]
	syncPwm.dataEdgeChan3[1] = 7200;			
	syncPwm.dataEdgeChan4[0] = 14000;
 8004e20:	f243 66b0 	movw	r6, #14000	; 0x36b0
	syncPwm.dataEdgeChan3[0] = 10400;
 8004e24:	8111      	strh	r1, [r2, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 8004e26:	8150      	strh	r0, [r2, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8004e28:	8196      	strh	r6, [r2, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 8004e2a:	81d1      	strh	r1, [r2, #14]
 8004e2c:	e009      	b.n	8004e42 <SyncPwmTask+0x6e>
		}else if(message==MSG_SYNCPWM_DEINIT){
 8004e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8004e30:	d01c      	beq.n	8004e6c <SyncPwmTask+0x98>
		}else if(message==MSG_SYNCPWM_START){
 8004e32:	2b2c      	cmp	r3, #44	; 0x2c
 8004e34:	d01d      	beq.n	8004e72 <SyncPwmTask+0x9e>
		}else if(message==MSG_SYNCPWM_STOP){
 8004e36:	2b2d      	cmp	r3, #45	; 0x2d
 8004e38:	d01e      	beq.n	8004e78 <SyncPwmTask+0xa4>
		xSemaphoreGiveRecursive(syncPwmMutex);
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	f004 fa7e 	bl	800933c <xQueueGiveMutexRecursive>
 8004e40:	682b      	ldr	r3, [r5, #0]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8004e42:	4618      	mov	r0, r3
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f10d 0106 	add.w	r1, sp, #6
 8004e4e:	f004 fb2b 	bl	80094a8 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 8004e52:	f04f 31ff 	mov.w	r1, #4294967295
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	f004 fcae 	bl	80097b8 <xQueueTakeMutexRecursive>
		if(message==MSG_SYNCPWM_INIT){
 8004e5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004e60:	2b2a      	cmp	r3, #42	; 0x2a
 8004e62:	d1e4      	bne.n	8004e2e <SyncPwmTask+0x5a>
	TIM_SYNC_PWM_Init();
 8004e64:	f007 feae 	bl	800cbc4 <TIM_SYNC_PWM_Init>
 8004e68:	e7e7      	b.n	8004e3a <SyncPwmTask+0x66>
 8004e6a:	e7fe      	b.n	8004e6a <SyncPwmTask+0x96>
	TIM_SYNC_PWM_Deinit();
 8004e6c:	f007 feb4 	bl	800cbd8 <TIM_SYNC_PWM_Deinit>
 8004e70:	e7e3      	b.n	8004e3a <SyncPwmTask+0x66>
	TIM_SYNC_PWM_Start();
 8004e72:	f007 feed 	bl	800cc50 <TIM_SYNC_PWM_Start>
 8004e76:	e7e0      	b.n	8004e3a <SyncPwmTask+0x66>
	TIM_SYNC_PWM_Stop();
 8004e78:	f007 ff76 	bl	800cd68 <TIM_SYNC_PWM_Stop>
 8004e7c:	e7dd      	b.n	8004e3a <SyncPwmTask+0x66>
 8004e7e:	bf00      	nop
 8004e80:	2000cb18 	.word	0x2000cb18
 8004e84:	2000cb1c 	.word	0x2000cb1c
 8004e88:	2000cafc 	.word	0x2000cafc

08004e8c <syncPwmSendInit>:
void syncPwmSendInit(void){
 8004e8c:	b500      	push	{lr}
 8004e8e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 8004e90:	a902      	add	r1, sp, #8
 8004e92:	232a      	movs	r3, #42	; 0x2a
 8004e94:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <syncPwmSendInit+0x20>)
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f004 f859 	bl	8008f58 <xQueueGenericSend>
}
 8004ea6:	b003      	add	sp, #12
 8004ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eac:	2000cb18 	.word	0x2000cb18

08004eb0 <syncPwmSendDeinit>:
void syncPwmSendDeinit(void){
 8004eb0:	b500      	push	{lr}
 8004eb2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 8004eb4:	a902      	add	r1, sp, #8
 8004eb6:	232b      	movs	r3, #43	; 0x2b
 8004eb8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <syncPwmSendDeinit+0x20>)
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f004 f847 	bl	8008f58 <xQueueGenericSend>
}
 8004eca:	b003      	add	sp, #12
 8004ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ed0:	2000cb18 	.word	0x2000cb18

08004ed4 <syncPwmSendStart>:
void syncPwmSendStart(void){
 8004ed4:	b500      	push	{lr}
 8004ed6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_START;
 8004ed8:	a902      	add	r1, sp, #8
 8004eda:	232c      	movs	r3, #44	; 0x2c
 8004edc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <syncPwmSendStart+0x20>)
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f004 f835 	bl	8008f58 <xQueueGenericSend>
}
 8004eee:	b003      	add	sp, #12
 8004ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ef4:	2000cb18 	.word	0x2000cb18

08004ef8 <syncPwmSendStop>:
void syncPwmSendStop(void){
 8004ef8:	b500      	push	{lr}
 8004efa:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 8004efc:	a902      	add	r1, sp, #8
 8004efe:	232d      	movs	r3, #45	; 0x2d
 8004f00:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <syncPwmSendStop+0x20>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f004 f823 	bl	8008f58 <xQueueGenericSend>
}
 8004f12:	b003      	add	sp, #12
 8004f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f18:	2000cb18 	.word	0x2000cb18

08004f1c <syncPwmChannelNumber>:
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <syncPwmChannelNumber+0x8>)
 8004f1e:	7518      	strb	r0, [r3, #20]
}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000cafc 	.word	0x2000cafc

08004f28 <syncPwmChannelConfig>:
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8004f28:	b280      	uxth	r0, r0
 8004f2a:	f007 bfc1 	b.w	800ceb0 <TIM_SYNC_PWM_DMA_ChanConfig>
 8004f2e:	bf00      	nop

08004f30 <syncPwmFreqReconfig>:
	TIM_ARR_PSC_Reconfig(arrPsc);
 8004f30:	f007 bff2 	b.w	800cf18 <TIM_ARR_PSC_Reconfig>

08004f34 <syncPwmSetChannelState>:
	TIM_SYNC_PWM_ChannelState(channel, state);
 8004f34:	f007 be62 	b.w	800cbfc <TIM_SYNC_PWM_ChannelState>

08004f38 <syncPwmSetStepMode>:
	TIM_SYNC_PWM_StepMode_Enable();
 8004f38:	f007 bfd2 	b.w	800cee0 <TIM_SYNC_PWM_StepMode_Enable>

08004f3c <syncPwmResetStepMode>:
	TIM_SYNC_PWM_StepMode_Disable();
 8004f3c:	f007 bfde 	b.w	800cefc <TIM_SYNC_PWM_StepMode_Disable>

08004f40 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_InitTick+0x24>)
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <HAL_InitTick+0x28>)
 8004f44:	681b      	ldr	r3, [r3, #0]
{
 8004f46:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
{
 8004f4c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8004f4e:	0998      	lsrs	r0, r3, #6
 8004f50:	f000 ff70 	bl	8005e34 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8004f54:	4621      	mov	r1, r4
 8004f56:	2200      	movs	r2, #0
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	f000 ff1a 	bl	8005d94 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8004f60:	2000      	movs	r0, #0
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	20000004 	.word	0x20000004
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f6c:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <HAL_Init+0x20>)
{
 8004f6e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	f043 0310 	orr.w	r3, r3, #16
 8004f76:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f78:	2003      	movs	r0, #3
 8004f7a:	f000 fef9 	bl	8005d70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f7e:	200f      	movs	r0, #15
 8004f80:	f7ff ffde 	bl	8004f40 <HAL_InitTick>
  HAL_MspInit();
 8004f84:	f006 fe72 	bl	800bc6c <HAL_MspInit>
}
 8004f88:	2000      	movs	r0, #0
 8004f8a:	bd08      	pop	{r3, pc}
 8004f8c:	40022000 	.word	0x40022000

08004f90 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004f90:	4b01      	ldr	r3, [pc, #4]	; (8004f98 <HAL_GetTick+0x8>)
 8004f92:	6818      	ldr	r0, [r3, #0]
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000cb20 	.word	0x2000cb20

08004f9c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F3xx_HAL_VERSION;
}
 8004f9c:	f04f 7082 	mov.w	r0, #17039360	; 0x1040000
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <HAL_ADC_MspDeInit>:
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <HAL_ADC_ConvCpltCallback>:
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <HAL_ADC_ConvHalfCpltCallback>:
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <HAL_ADC_ErrorCallback>:
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbc:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fbe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004fc0:	f043 0304 	orr.w	r3, r3, #4
 8004fc4:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8004fc6:	f7ff bff3 	b.w	8004fb0 <HAL_ADC_ErrorCallback>
 8004fca:	bf00      	nop

08004fcc <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004fcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004fce:	f7ff bfed 	b.w	8004fac <HAL_ADC_ConvHalfCpltCallback>
 8004fd2:	bf00      	nop

08004fd4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004fdc:	d002      	beq.n	8004fe4 <ADC_DMAConvCplt+0x10>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fe6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fee:	68ca      	ldr	r2, [r1, #12]
 8004ff0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004ff4:	d10c      	bne.n	8005010 <ADC_DMAConvCplt+0x3c>
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	b952      	cbnz	r2, 8005010 <ADC_DMAConvCplt+0x3c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005004:	04d2      	lsls	r2, r2, #19
 8005006:	d403      	bmi.n	8005010 <ADC_DMAConvCplt+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff bfc9 	b.w	8004fa8 <HAL_ADC_ConvCpltCallback>
 8005016:	bf00      	nop

08005018 <HAL_ADC_Init>:
{
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005020:	2800      	cmp	r0, #0
 8005022:	f000 809b 	beq.w	800515c <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005026:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005028:	f013 0310 	ands.w	r3, r3, #16
 800502c:	4604      	mov	r4, r0
 800502e:	d118      	bne.n	8005062 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005030:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8005032:	2d00      	cmp	r5, #0
 8005034:	f000 8095 	beq.w	8005162 <HAL_ADC_Init+0x14a>
 8005038:	6801      	ldr	r1, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800503a:	688a      	ldr	r2, [r1, #8]
 800503c:	00d2      	lsls	r2, r2, #3
 800503e:	f140 8081 	bpl.w	8005144 <HAL_ADC_Init+0x12c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005042:	688a      	ldr	r2, [r1, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005044:	0096      	lsls	r6, r2, #2
 8005046:	d47d      	bmi.n	8005144 <HAL_ADC_Init+0x12c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005048:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800504a:	06d0      	lsls	r0, r2, #27
 800504c:	f140 8097 	bpl.w	800517e <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8005050:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005052:	f023 0312 	bic.w	r3, r3, #18
 8005056:	f043 0310 	orr.w	r3, r3, #16
 800505a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 800505c:	2001      	movs	r0, #1
}
 800505e:	b002      	add	sp, #8
 8005060:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005062:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005064:	06dd      	lsls	r5, r3, #27
 8005066:	d4f3      	bmi.n	8005050 <HAL_ADC_Init+0x38>
 8005068:	6801      	ldr	r1, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800506a:	688b      	ldr	r3, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800506c:	f013 0304 	ands.w	r3, r3, #4
 8005070:	d1ee      	bne.n	8005050 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8005072:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005074:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8005078:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800507c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8005080:	6462      	str	r2, [r4, #68]	; 0x44
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005082:	f000 80e8 	beq.w	8005256 <HAL_ADC_Init+0x23e>
 8005086:	4aa4      	ldr	r2, [pc, #656]	; (8005318 <HAL_ADC_Init+0x300>)
 8005088:	4291      	cmp	r1, r2
 800508a:	d07c      	beq.n	8005186 <HAL_ADC_Init+0x16e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800508c:	48a3      	ldr	r0, [pc, #652]	; (800531c <HAL_ADC_Init+0x304>)
 800508e:	4281      	cmp	r1, r0
 8005090:	f000 80e4 	beq.w	800525c <HAL_ADC_Init+0x244>
 8005094:	4aa2      	ldr	r2, [pc, #648]	; (8005320 <HAL_ADC_Init+0x308>)
 8005096:	4291      	cmp	r1, r2
 8005098:	f000 80e1 	beq.w	800525e <HAL_ADC_Init+0x246>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	f002 0203 	and.w	r2, r2, #3
 80050a2:	2a01      	cmp	r2, #1
 80050a4:	f000 8132 	beq.w	800530c <HAL_ADC_Init+0x2f4>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050a8:	4d9e      	ldr	r5, [pc, #632]	; (8005324 <HAL_ADC_Init+0x30c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80050aa:	68aa      	ldr	r2, [r5, #8]
 80050ac:	6860      	ldr	r0, [r4, #4]
 80050ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80050b2:	4302      	orrs	r2, r0
 80050b4:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80050b6:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
 80050ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80050bc:	69e0      	ldr	r0, [r4, #28]
 80050be:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80050c2:	2e01      	cmp	r6, #1
 80050c4:	bf18      	it	ne
 80050c6:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 80050ca:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050ce:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80050d0:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050d4:	f000 8095 	beq.w	8005202 <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050da:	2a01      	cmp	r2, #1
 80050dc:	d00d      	beq.n	80050fa <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80050de:	488f      	ldr	r0, [pc, #572]	; (800531c <HAL_ADC_Init+0x304>)
 80050e0:	4281      	cmp	r1, r0
 80050e2:	f000 80a3 	beq.w	800522c <HAL_ADC_Init+0x214>
 80050e6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80050ea:	4281      	cmp	r1, r0
 80050ec:	f000 809e 	beq.w	800522c <HAL_ADC_Init+0x214>
 80050f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80050f6:	4303      	orrs	r3, r0
 80050f8:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80050fa:	688a      	ldr	r2, [r1, #8]
 80050fc:	f012 0f0c 	tst.w	r2, #12
 8005100:	d10b      	bne.n	800511a <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005102:	68c8      	ldr	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005104:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005106:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005108:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800510c:	0052      	lsls	r2, r2, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800510e:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005112:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005116:	60c8      	str	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005118:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800511a:	68cd      	ldr	r5, [r1, #12]
 800511c:	4a82      	ldr	r2, [pc, #520]	; (8005328 <HAL_ADC_Init+0x310>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800511e:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005120:	402a      	ands	r2, r5
 8005122:	4313      	orrs	r3, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005124:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8005126:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005128:	d073      	beq.n	8005212 <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800512a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800512c:	f023 030f 	bic.w	r3, r3, #15
 8005130:	630b      	str	r3, [r1, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8005132:	2000      	movs	r0, #0
 8005134:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8005136:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005138:	f023 0303 	bic.w	r3, r3, #3
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6463      	str	r3, [r4, #68]	; 0x44
 8005142:	e78c      	b.n	800505e <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8005144:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005146:	f023 0312 	bic.w	r3, r3, #18
 800514a:	f043 0310 	orr.w	r3, r3, #16
 800514e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005150:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800515a:	e779      	b.n	8005050 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 800515c:	2001      	movs	r0, #1
}
 800515e:	b002      	add	sp, #8
 8005160:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8005162:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ContextQueue = 0U;
 8005164:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8005168:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800516c:	f005 fd0e 	bl	800ab8c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005170:	6821      	ldr	r1, [r4, #0]
 8005172:	688a      	ldr	r2, [r1, #8]
 8005174:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005178:	d016      	beq.n	80051a8 <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517a:	462b      	mov	r3, r5
 800517c:	e75d      	b.n	800503a <HAL_ADC_Init+0x22>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800517e:	2b00      	cmp	r3, #0
 8005180:	f47f af66 	bne.w	8005050 <HAL_ADC_Init+0x38>
 8005184:	e771      	b.n	800506a <HAL_ADC_Init+0x52>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005186:	4d69      	ldr	r5, [pc, #420]	; (800532c <HAL_ADC_Init+0x314>)
 8005188:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	f002 0203 	and.w	r2, r2, #3
 8005192:	2a01      	cmp	r2, #1
 8005194:	d045      	beq.n	8005222 <HAL_ADC_Init+0x20a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005196:	6882      	ldr	r2, [r0, #8]
 8005198:	f002 0203 	and.w	r2, r2, #3
 800519c:	2a01      	cmp	r2, #1
 800519e:	d184      	bne.n	80050aa <HAL_ADC_Init+0x92>
 80051a0:	6802      	ldr	r2, [r0, #0]
 80051a2:	07d2      	lsls	r2, r2, #31
 80051a4:	d487      	bmi.n	80050b6 <HAL_ADC_Init+0x9e>
 80051a6:	e780      	b.n	80050aa <HAL_ADC_Init+0x92>
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80051a8:	6888      	ldr	r0, [r1, #8]
 80051aa:	f000 0003 	and.w	r0, r0, #3
 80051ae:	2801      	cmp	r0, #1
 80051b0:	d062      	beq.n	8005278 <HAL_ADC_Init+0x260>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051b4:	06dd      	lsls	r5, r3, #27
 80051b6:	d473      	bmi.n	80052a0 <HAL_ADC_Init+0x288>
          ADC_STATE_CLR_SET(hadc->State,
 80051b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051ba:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <HAL_ADC_Init+0x318>)
 80051bc:	485d      	ldr	r0, [pc, #372]	; (8005334 <HAL_ADC_Init+0x31c>)
 80051be:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80051c0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80051c4:	f022 0202 	bic.w	r2, r2, #2
 80051c8:	f042 0202 	orr.w	r2, r2, #2
 80051cc:	6462      	str	r2, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80051ce:	688a      	ldr	r2, [r1, #8]
 80051d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051d4:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051d6:	fba0 2303 	umull	r2, r3, r0, r3
 80051da:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80051dc:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051e2:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80051e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051e8:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051ea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80051ec:	9b01      	ldr	r3, [sp, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f43f af23 	beq.w	800503a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80051fa:	9b01      	ldr	r3, [sp, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f9      	bne.n	80051f4 <HAL_ADC_Init+0x1dc>
 8005200:	e71b      	b.n	800503a <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005202:	bb70      	cbnz	r0, 8005262 <HAL_ADC_Init+0x24a>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005204:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005206:	3a01      	subs	r2, #1
 8005208:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	e762      	b.n	80050d8 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005212:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005214:	6a23      	ldr	r3, [r4, #32]
 8005216:	f022 020f 	bic.w	r2, r2, #15
 800521a:	3b01      	subs	r3, #1
 800521c:	4313      	orrs	r3, r2
 800521e:	630b      	str	r3, [r1, #48]	; 0x30
 8005220:	e787      	b.n	8005132 <HAL_ADC_Init+0x11a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005222:	680a      	ldr	r2, [r1, #0]
 8005224:	07d6      	lsls	r6, r2, #31
 8005226:	f53f af46 	bmi.w	80050b6 <HAL_ADC_Init+0x9e>
 800522a:	e7b4      	b.n	8005196 <HAL_ADC_Init+0x17e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800522c:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8005230:	d038      	beq.n	80052a4 <HAL_ADC_Init+0x28c>
 8005232:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005236:	d051      	beq.n	80052dc <HAL_ADC_Init+0x2c4>
 8005238:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 800523c:	d051      	beq.n	80052e2 <HAL_ADC_Init+0x2ca>
 800523e:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8005242:	d051      	beq.n	80052e8 <HAL_ADC_Init+0x2d0>
 8005244:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8005248:	d051      	beq.n	80052ee <HAL_ADC_Init+0x2d6>
 800524a:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 800524e:	bf08      	it	eq
 8005250:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8005254:	e74e      	b.n	80050f4 <HAL_ADC_Init+0xdc>
 8005256:	4830      	ldr	r0, [pc, #192]	; (8005318 <HAL_ADC_Init+0x300>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005258:	4d34      	ldr	r5, [pc, #208]	; (800532c <HAL_ADC_Init+0x314>)
 800525a:	e797      	b.n	800518c <HAL_ADC_Init+0x174>
 800525c:	4830      	ldr	r0, [pc, #192]	; (8005320 <HAL_ADC_Init+0x308>)
 800525e:	4d31      	ldr	r5, [pc, #196]	; (8005324 <HAL_ADC_Init+0x30c>)
 8005260:	e794      	b.n	800518c <HAL_ADC_Init+0x174>
        ADC_STATE_CLR_SET(hadc->State,
 8005262:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005264:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005268:	f042 0220 	orr.w	r2, r2, #32
 800526c:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	64a2      	str	r2, [r4, #72]	; 0x48
 8005276:	e72f      	b.n	80050d8 <HAL_ADC_Init+0xc0>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005278:	680b      	ldr	r3, [r1, #0]
 800527a:	f013 0301 	ands.w	r3, r3, #1
 800527e:	d028      	beq.n	80052d2 <HAL_ADC_Init+0x2ba>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005280:	688b      	ldr	r3, [r1, #8]
 8005282:	f003 030d 	and.w	r3, r3, #13
 8005286:	2b01      	cmp	r3, #1
 8005288:	d00f      	beq.n	80052aa <HAL_ADC_Init+0x292>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800528c:	f043 0310 	orr.w	r3, r3, #16
 8005290:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800529a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      
      return HAL_ERROR;
 800529c:	4603      	mov	r3, r0
 800529e:	e6cc      	b.n	800503a <HAL_ADC_Init+0x22>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80052a0:	4613      	mov	r3, r2
 80052a2:	e6ca      	b.n	800503a <HAL_ADC_Init+0x22>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80052a4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80052a8:	e724      	b.n	80050f4 <HAL_ADC_Init+0xdc>
      __HAL_ADC_DISABLE(hadc);
 80052aa:	688b      	ldr	r3, [r1, #8]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	600a      	str	r2, [r1, #0]
    tickstart = HAL_GetTick();
 80052b6:	f7ff fe6b 	bl	8004f90 <HAL_GetTick>
 80052ba:	4605      	mov	r5, r0
 80052bc:	e004      	b.n	80052c8 <HAL_ADC_Init+0x2b0>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052be:	f7ff fe67 	bl	8004f90 <HAL_GetTick>
 80052c2:	1b40      	subs	r0, r0, r5
 80052c4:	2802      	cmp	r0, #2
 80052c6:	d815      	bhi.n	80052f4 <HAL_ADC_Init+0x2dc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052c8:	6821      	ldr	r1, [r4, #0]
 80052ca:	688b      	ldr	r3, [r1, #8]
 80052cc:	f013 0301 	ands.w	r3, r3, #1
 80052d0:	d1f5      	bne.n	80052be <HAL_ADC_Init+0x2a6>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80052d4:	06d0      	lsls	r0, r2, #27
 80052d6:	f53f aeb0 	bmi.w	800503a <HAL_ADC_Init+0x22>
 80052da:	e76d      	b.n	80051b8 <HAL_ADC_Init+0x1a0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80052dc:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80052e0:	e708      	b.n	80050f4 <HAL_ADC_Init+0xdc>
 80052e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e6:	e705      	b.n	80050f4 <HAL_ADC_Init+0xdc>
 80052e8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80052ec:	e702      	b.n	80050f4 <HAL_ADC_Init+0xdc>
 80052ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052f2:	e6ff      	b.n	80050f4 <HAL_ADC_Init+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052f6:	6821      	ldr	r1, [r4, #0]
 80052f8:	f043 0310 	orr.w	r3, r3, #16
 80052fc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005306:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005308:	2301      	movs	r3, #1
 800530a:	e696      	b.n	800503a <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800530c:	680a      	ldr	r2, [r1, #0]
 800530e:	07d2      	lsls	r2, r2, #31
 8005310:	f53f aed1 	bmi.w	80050b6 <HAL_ADC_Init+0x9e>
 8005314:	e6c8      	b.n	80050a8 <HAL_ADC_Init+0x90>
 8005316:	bf00      	nop
 8005318:	50000100 	.word	0x50000100
 800531c:	50000400 	.word	0x50000400
 8005320:	50000500 	.word	0x50000500
 8005324:	50000700 	.word	0x50000700
 8005328:	fff0c007 	.word	0xfff0c007
 800532c:	50000300 	.word	0x50000300
 8005330:	20000004 	.word	0x20000004
 8005334:	431bde83 	.word	0x431bde83

08005338 <HAL_ADC_DeInit>:
  if(hadc == NULL)
 8005338:	2800      	cmp	r0, #0
 800533a:	f000 80b7 	beq.w	80054ac <HAL_ADC_DeInit+0x174>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800533e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005342:	f042 0202 	orr.w	r2, r2, #2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005346:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005348:	6442      	str	r2, [r0, #68]	; 0x44
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	f012 0f0c 	tst.w	r2, #12
 8005350:	4604      	mov	r4, r0
 8005352:	d020      	beq.n	8005396 <HAL_ADC_DeInit+0x5e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	0191      	lsls	r1, r2, #6
 8005358:	d506      	bpl.n	8005368 <HAL_ADC_DeInit+0x30>
 800535a:	69c2      	ldr	r2, [r0, #28]
 800535c:	2a01      	cmp	r2, #1
 800535e:	d103      	bne.n	8005368 <HAL_ADC_DeInit+0x30>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005360:	6982      	ldr	r2, [r0, #24]
 8005362:	2a01      	cmp	r2, #1
 8005364:	f000 8103 	beq.w	800556e <HAL_ADC_DeInit+0x236>
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	0750      	lsls	r0, r2, #29
 800536c:	f100 80a0 	bmi.w	80054b0 <HAL_ADC_DeInit+0x178>

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	0715      	lsls	r5, r2, #28
 8005374:	f100 80a5 	bmi.w	80054c2 <HAL_ADC_DeInit+0x18a>

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005378:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800537a:	f7ff fe09 	bl	8004f90 <HAL_GetTick>
 800537e:	4606      	mov	r6, r0
 8005380:	e005      	b.n	800538e <HAL_ADC_DeInit+0x56>
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005382:	f7ff fe05 	bl	8004f90 <HAL_GetTick>
 8005386:	1b80      	subs	r0, r0, r6
 8005388:	280b      	cmp	r0, #11
 800538a:	f200 80b6 	bhi.w	80054fa <HAL_ADC_DeInit+0x1c2>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	422a      	tst	r2, r5
 8005394:	d1f5      	bne.n	8005382 <HAL_ADC_DeInit+0x4a>
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800539c:	60da      	str	r2, [r3, #12]
  if (ADC_IS_ENABLE(hadc) != RESET )
 800539e:	6898      	ldr	r0, [r3, #8]
 80053a0:	f000 0003 	and.w	r0, r0, #3
 80053a4:	2801      	cmp	r0, #1
 80053a6:	f000 80c9 	beq.w	800553c <HAL_ADC_DeInit+0x204>
      hadc->State = HAL_ADC_STATE_READY;
 80053aa:	2201      	movs	r2, #1
 80053ac:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80053ae:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 80053b0:	497e      	ldr	r1, [pc, #504]	; (80055ac <HAL_ADC_DeInit+0x274>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 80053b2:	4f7f      	ldr	r7, [pc, #508]	; (80055b0 <HAL_ADC_DeInit+0x278>)
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 80053b4:	487f      	ldr	r0, [pc, #508]	; (80055b4 <HAL_ADC_DeInit+0x27c>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 80053b6:	4e80      	ldr	r6, [pc, #512]	; (80055b8 <HAL_ADC_DeInit+0x280>)
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80053b8:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80053bc:	f022 0207 	bic.w	r2, r2, #7
 80053c0:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80053c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 80053c8:	689d      	ldr	r5, [r3, #8]
 80053ca:	f025 45e0 	bic.w	r5, r5, #1879048192	; 0x70000000
 80053ce:	609d      	str	r5, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 80053d0:	689d      	ldr	r5, [r3, #8]
 80053d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80053d6:	609d      	str	r5, [r3, #8]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	4011      	ands	r1, r2
 80053dc:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 80053de:	695a      	ldr	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80053e0:	4976      	ldr	r1, [pc, #472]	; (80055bc <HAL_ADC_DeInit+0x284>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 80053e2:	403a      	ands	r2, r7
 80053e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 80053ec:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 80053ee:	6a1d      	ldr	r5, [r3, #32]
 80053f0:	f005 25f0 	and.w	r5, r5, #4026593280	; 0xf000f000
 80053f4:	621d      	str	r5, [r3, #32]
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 80053f6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80053f8:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 80053fc:	625d      	str	r5, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80053fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005400:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005404:	629d      	str	r5, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005408:	4010      	ands	r0, r2
 800540a:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 800540c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800540e:	486c      	ldr	r0, [pc, #432]	; (80055c0 <HAL_ADC_DeInit+0x288>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005410:	4035      	ands	r5, r6
 8005412:	635d      	str	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 8005414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005416:	4032      	ands	r2, r6
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800541a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541c:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8005420:	f022 0207 	bic.w	r2, r2, #7
 8005424:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005428:	400a      	ands	r2, r1
 800542a:	661a      	str	r2, [r3, #96]	; 0x60
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800542c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800542e:	400a      	ands	r2, r1
 8005430:	665a      	str	r2, [r3, #100]	; 0x64
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8005432:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005434:	400a      	ands	r2, r1
 8005436:	669a      	str	r2, [r3, #104]	; 0x68
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8005438:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800543a:	4011      	ands	r1, r2
 800543c:	66d9      	str	r1, [r3, #108]	; 0x6c
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800543e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005442:	4002      	ands	r2, r0
 8005444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8005448:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800544c:	4002      	ands	r2, r0
 800544e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8005452:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005456:	4002      	ands	r2, r0
 8005458:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800545c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005464:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8005468:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800546c:	d052      	beq.n	8005514 <HAL_ADC_DeInit+0x1dc>
 800546e:	4a55      	ldr	r2, [pc, #340]	; (80055c4 <HAL_ADC_DeInit+0x28c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d078      	beq.n	8005566 <HAL_ADC_DeInit+0x22e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005474:	4954      	ldr	r1, [pc, #336]	; (80055c8 <HAL_ADC_DeInit+0x290>)
 8005476:	428b      	cmp	r3, r1
 8005478:	d072      	beq.n	8005560 <HAL_ADC_DeInit+0x228>
 800547a:	4a54      	ldr	r2, [pc, #336]	; (80055cc <HAL_ADC_DeInit+0x294>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d070      	beq.n	8005562 <HAL_ADC_DeInit+0x22a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	f002 0203 	and.w	r2, r2, #3
 8005486:	2a01      	cmp	r2, #1
 8005488:	f000 808a 	beq.w	80055a0 <HAL_ADC_DeInit+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800548c:	4850      	ldr	r0, [pc, #320]	; (80055d0 <HAL_ADC_DeInit+0x298>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 800548e:	6882      	ldr	r2, [r0, #8]
 8005490:	4b50      	ldr	r3, [pc, #320]	; (80055d4 <HAL_ADC_DeInit+0x29c>)
 8005492:	4013      	ands	r3, r2
 8005494:	6083      	str	r3, [r0, #8]
    HAL_ADC_MspDeInit(hadc);
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff fd84 	bl	8004fa4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800549c:	2300      	movs	r3, #0
 800549e:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET;
 80054a0:	4618      	mov	r0, r3
 80054a2:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80054a4:	2300      	movs	r3, #0
 80054a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 80054ac:	2001      	movs	r0, #1
}
 80054ae:	4770      	bx	lr
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80054b0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80054b2:	0792      	lsls	r2, r2, #30
 80054b4:	f53f af5c 	bmi.w	8005370 <HAL_ADC_DeInit+0x38>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	f042 0210 	orr.w	r2, r2, #16
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	e756      	b.n	8005370 <HAL_ADC_DeInit+0x38>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80054c2:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80054c4:	0790      	lsls	r0, r2, #30
 80054c6:	f53f af57 	bmi.w	8005378 <HAL_ADC_DeInit+0x40>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	f042 0220 	orr.w	r2, r2, #32
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	e751      	b.n	8005378 <HAL_ADC_DeInit+0x40>
      __HAL_ADC_DISABLE(hadc);
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	2103      	movs	r1, #3
 80054d8:	f042 0202 	orr.w	r2, r2, #2
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80054e0:	f7ff fd56 	bl	8004f90 <HAL_GetTick>
 80054e4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	07d2      	lsls	r2, r2, #31
 80054ec:	f57f af5d 	bpl.w	80053aa <HAL_ADC_DeInit+0x72>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054f0:	f7ff fd4e 	bl	8004f90 <HAL_GetTick>
 80054f4:	1b40      	subs	r0, r0, r5
 80054f6:	2802      	cmp	r0, #2
 80054f8:	d9f5      	bls.n	80054e6 <HAL_ADC_DeInit+0x1ae>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054fc:	f043 0310 	orr.w	r3, r3, #16
 8005500:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005502:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 800550a:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 800550c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800550e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	492b      	ldr	r1, [pc, #172]	; (80055c4 <HAL_ADC_DeInit+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005516:	4830      	ldr	r0, [pc, #192]	; (80055d8 <HAL_ADC_DeInit+0x2a0>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	f002 0203 	and.w	r2, r2, #3
 800551e:	2a01      	cmp	r2, #1
 8005520:	d008      	beq.n	8005534 <HAL_ADC_DeInit+0x1fc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 8005522:	688b      	ldr	r3, [r1, #8]
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d1b0      	bne.n	800548e <HAL_ADC_DeInit+0x156>
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	07dd      	lsls	r5, r3, #31
 8005530:	d4b1      	bmi.n	8005496 <HAL_ADC_DeInit+0x15e>
 8005532:	e7ac      	b.n	800548e <HAL_ADC_DeInit+0x156>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	07de      	lsls	r6, r3, #31
 8005538:	d4ad      	bmi.n	8005496 <HAL_ADC_DeInit+0x15e>
 800553a:	e7f2      	b.n	8005522 <HAL_ADC_DeInit+0x1ea>
  if (ADC_IS_ENABLE(hadc) != RESET )
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	07d1      	lsls	r1, r2, #31
 8005540:	f57f af33 	bpl.w	80053aa <HAL_ADC_DeInit+0x72>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	f002 020d 	and.w	r2, r2, #13
 800554a:	2a01      	cmp	r2, #1
 800554c:	d0c2      	beq.n	80054d4 <HAL_ADC_DeInit+0x19c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800554e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005550:	f043 0310 	orr.w	r3, r3, #16
 8005554:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	64a3      	str	r3, [r4, #72]	; 0x48
 800555e:	e7a1      	b.n	80054a4 <HAL_ADC_DeInit+0x16c>
 8005560:	491a      	ldr	r1, [pc, #104]	; (80055cc <HAL_ADC_DeInit+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005562:	481b      	ldr	r0, [pc, #108]	; (80055d0 <HAL_ADC_DeInit+0x298>)
 8005564:	e7d8      	b.n	8005518 <HAL_ADC_DeInit+0x1e0>
 8005566:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800556a:	481b      	ldr	r0, [pc, #108]	; (80055d8 <HAL_ADC_DeInit+0x2a0>)
 800556c:	e7d4      	b.n	8005518 <HAL_ADC_DeInit+0x1e0>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	0652      	lsls	r2, r2, #25
 8005572:	d406      	bmi.n	8005582 <HAL_ADC_DeInit+0x24a>
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_ADC_DeInit+0x2a4>)
 8005576:	e001      	b.n	800557c <HAL_ADC_DeInit+0x244>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005578:	3a01      	subs	r2, #1
 800557a:	d0be      	beq.n	80054fa <HAL_ADC_DeInit+0x1c2>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	064f      	lsls	r7, r1, #25
 8005580:	d5fa      	bpl.n	8005578 <HAL_ADC_DeInit+0x240>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	0756      	lsls	r6, r2, #29
 800558a:	d502      	bpl.n	8005592 <HAL_ADC_DeInit+0x25a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800558c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800558e:	0791      	lsls	r1, r2, #30
 8005590:	d501      	bpl.n	8005596 <HAL_ADC_DeInit+0x25e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005592:	2504      	movs	r5, #4
 8005594:	e6f1      	b.n	800537a <HAL_ADC_DeInit+0x42>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	f042 0210 	orr.w	r2, r2, #16
 800559c:	609a      	str	r2, [r3, #8]
 800559e:	e7f8      	b.n	8005592 <HAL_ADC_DeInit+0x25a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	07df      	lsls	r7, r3, #31
 80055a4:	f53f af77 	bmi.w	8005496 <HAL_ADC_DeInit+0x15e>
 80055a8:	e770      	b.n	800548c <HAL_ADC_DeInit+0x154>
 80055aa:	bf00      	nop
 80055ac:	80008004 	.word	0x80008004
 80055b0:	c0000007 	.word	0xc0000007
 80055b4:	e0820830 	.word	0xe0820830
 80055b8:	e0820820 	.word	0xe0820820
 80055bc:	03fff000 	.word	0x03fff000
 80055c0:	fff80000 	.word	0xfff80000
 80055c4:	50000100 	.word	0x50000100
 80055c8:	50000400 	.word	0x50000400
 80055cc:	50000500 	.word	0x50000500
 80055d0:	50000700 	.word	0x50000700
 80055d4:	fe3c10e0 	.word	0xfe3c10e0
 80055d8:	50000300 	.word	0x50000300
 80055dc:	00099400 	.word	0x00099400

080055e0 <HAL_ADC_Start_DMA>:
{
 80055e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80055e4:	6805      	ldr	r5, [r0, #0]
 80055e6:	68ac      	ldr	r4, [r5, #8]
 80055e8:	0767      	lsls	r7, r4, #29
 80055ea:	d43b      	bmi.n	8005664 <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 80055ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d037      	beq.n	8005664 <HAL_ADC_Start_DMA+0x84>
 80055f4:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80055f6:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 80055fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80055fe:	d013      	beq.n	8005628 <HAL_ADC_Start_DMA+0x48>
 8005600:	4b57      	ldr	r3, [pc, #348]	; (8005760 <HAL_ADC_Start_DMA+0x180>)
 8005602:	429d      	cmp	r5, r3
 8005604:	d010      	beq.n	8005628 <HAL_ADC_Start_DMA+0x48>
 8005606:	4b57      	ldr	r3, [pc, #348]	; (8005764 <HAL_ADC_Start_DMA+0x184>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f013 0f1f 	tst.w	r3, #31
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	4690      	mov	r8, r2
 8005616:	460f      	mov	r7, r1
 8005618:	4604      	mov	r4, r0
 800561a:	b98b      	cbnz	r3, 8005640 <HAL_ADC_Start_DMA+0x60>
        __HAL_UNLOCK(hadc);
 800561c:	2300      	movs	r3, #0
 800561e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005622:	2001      	movs	r0, #1
}
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_ADC_Start_DMA+0x188>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f013 0f1f 	tst.w	r3, #31
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	4690      	mov	r8, r2
 8005638:	460f      	mov	r7, r1
 800563a:	4604      	mov	r4, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ed      	beq.n	800561c <HAL_ADC_Start_DMA+0x3c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005640:	68ab      	ldr	r3, [r5, #8]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d00f      	beq.n	800566a <HAL_ADC_Start_DMA+0x8a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800564a:	68aa      	ldr	r2, [r5, #8]
 800564c:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_ADC_Start_DMA+0x18c>)
 800564e:	421a      	tst	r2, r3
 8005650:	d05a      	beq.n	8005708 <HAL_ADC_Start_DMA+0x128>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005654:	f043 0310 	orr.w	r3, r3, #16
 8005658:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800565a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	64a3      	str	r3, [r4, #72]	; 0x48
 8005662:	e7db      	b.n	800561c <HAL_ADC_Start_DMA+0x3c>
    tmp_hal_status = HAL_BUSY;
 8005664:	2002      	movs	r0, #2
}
 8005666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	07de      	lsls	r6, r3, #31
 800566e:	d5ec      	bpl.n	800564a <HAL_ADC_Start_DMA+0x6a>
        ADC_STATE_CLR_SET(hadc->State,
 8005670:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005672:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800567e:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8005682:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005684:	d061      	beq.n	800574a <HAL_ADC_Start_DMA+0x16a>
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_ADC_Start_DMA+0x180>)
 8005688:	429d      	cmp	r5, r3
 800568a:	d04f      	beq.n	800572c <HAL_ADC_Start_DMA+0x14c>
 800568c:	4b35      	ldr	r3, [pc, #212]	; (8005764 <HAL_ADC_Start_DMA+0x184>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	06da      	lsls	r2, r3, #27
 8005692:	d05c      	beq.n	800574e <HAL_ADC_Start_DMA+0x16e>
 8005694:	4a36      	ldr	r2, [pc, #216]	; (8005770 <HAL_ADC_Start_DMA+0x190>)
 8005696:	4295      	cmp	r5, r2
 8005698:	d059      	beq.n	800574e <HAL_ADC_Start_DMA+0x16e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800569a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800569c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a0:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80056a2:	68d3      	ldr	r3, [r2, #12]
 80056a4:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80056a8:	b12b      	cbz	r3, 80056b6 <HAL_ADC_Start_DMA+0xd6>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80056aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056b4:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80056ba:	492e      	ldr	r1, [pc, #184]	; (8005774 <HAL_ADC_Start_DMA+0x194>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056bc:	4a2e      	ldr	r2, [pc, #184]	; (8005778 <HAL_ADC_Start_DMA+0x198>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056be:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056c2:	bf1c      	itt	ne
 80056c4:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80056c6:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80056ca:	64a3      	str	r3, [r4, #72]	; 0x48
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056cc:	4b2b      	ldr	r3, [pc, #172]	; (800577c <HAL_ADC_Start_DMA+0x19c>)
        __HAL_UNLOCK(hadc);
 80056ce:	2600      	movs	r6, #0
 80056d0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056d4:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056d8:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056da:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056dc:	602b      	str	r3, [r5, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80056de:	686b      	ldr	r3, [r5, #4]
 80056e0:	f043 0310 	orr.w	r3, r3, #16
 80056e4:	606b      	str	r3, [r5, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80056e6:	68e9      	ldr	r1, [r5, #12]
 80056e8:	f041 0101 	orr.w	r1, r1, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80056ec:	4643      	mov	r3, r8
 80056ee:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80056f0:	60e9      	str	r1, [r5, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80056f2:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80056f6:	f000 fdb3 	bl	8006260 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	6893      	ldr	r3, [r2, #8]
 80056fe:	f043 0304 	orr.w	r3, r3, #4
      tmp_hal_status = ADC_Enable(hadc);
 8005702:	4630      	mov	r0, r6
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005704:	6093      	str	r3, [r2, #8]
 8005706:	e78d      	b.n	8005624 <HAL_ADC_Start_DMA+0x44>
    __HAL_ADC_ENABLE(hadc);
 8005708:	68ab      	ldr	r3, [r5, #8]
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8005710:	f7ff fc3e 	bl	8004f90 <HAL_GetTick>
 8005714:	4606      	mov	r6, r0
 8005716:	e004      	b.n	8005722 <HAL_ADC_Start_DMA+0x142>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005718:	f7ff fc3a 	bl	8004f90 <HAL_GetTick>
 800571c:	1b80      	subs	r0, r0, r6
 800571e:	2802      	cmp	r0, #2
 8005720:	d897      	bhi.n	8005652 <HAL_ADC_Start_DMA+0x72>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005722:	6825      	ldr	r5, [r4, #0]
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	07d8      	lsls	r0, r3, #31
 8005728:	d5f6      	bpl.n	8005718 <HAL_ADC_Start_DMA+0x138>
 800572a:	e7a1      	b.n	8005670 <HAL_ADC_Start_DMA+0x90>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800572c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	06d9      	lsls	r1, r3, #27
 8005734:	d00b      	beq.n	800574e <HAL_ADC_Start_DMA+0x16e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005736:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005738:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800573c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005740:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005742:	68d3      	ldr	r3, [r2, #12]
 8005744:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8005748:	e7ae      	b.n	80056a8 <HAL_ADC_Start_DMA+0xc8>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <HAL_ADC_Start_DMA+0x188>)
 800574c:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800574e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005750:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005754:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005756:	68eb      	ldr	r3, [r5, #12]
 8005758:	019b      	lsls	r3, r3, #6
 800575a:	d5ac      	bpl.n	80056b6 <HAL_ADC_Start_DMA+0xd6>
 800575c:	e7a5      	b.n	80056aa <HAL_ADC_Start_DMA+0xca>
 800575e:	bf00      	nop
 8005760:	50000100 	.word	0x50000100
 8005764:	50000700 	.word	0x50000700
 8005768:	50000300 	.word	0x50000300
 800576c:	8000003f 	.word	0x8000003f
 8005770:	50000400 	.word	0x50000400
 8005774:	08004fd5 	.word	0x08004fd5
 8005778:	08004fb5 	.word	0x08004fb5
 800577c:	08004fcd 	.word	0x08004fcd

08005780 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8005780:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005784:	2b01      	cmp	r3, #1
{  
 8005786:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8005788:	d04d      	beq.n	8005826 <HAL_ADC_Stop_DMA+0xa6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800578a:	6803      	ldr	r3, [r0, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800578e:	2101      	movs	r1, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005790:	f012 0f0c 	tst.w	r2, #12
 8005794:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005796:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800579a:	d024      	beq.n	80057e6 <HAL_ADC_Stop_DMA+0x66>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	0195      	lsls	r5, r2, #6
 80057a0:	d506      	bpl.n	80057b0 <HAL_ADC_Stop_DMA+0x30>
 80057a2:	69c2      	ldr	r2, [r0, #28]
 80057a4:	428a      	cmp	r2, r1
 80057a6:	d103      	bne.n	80057b0 <HAL_ADC_Stop_DMA+0x30>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80057a8:	6982      	ldr	r2, [r0, #24]
 80057aa:	428a      	cmp	r2, r1
 80057ac:	f000 8081 	beq.w	80058b2 <HAL_ADC_Stop_DMA+0x132>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	0750      	lsls	r0, r2, #29
 80057b4:	d506      	bpl.n	80057c4 <HAL_ADC_Stop_DMA+0x44>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80057b6:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80057b8:	0792      	lsls	r2, r2, #30
 80057ba:	d403      	bmi.n	80057c4 <HAL_ADC_Stop_DMA+0x44>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	f042 0210 	orr.w	r2, r2, #16
 80057c2:	609a      	str	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	0716      	lsls	r6, r2, #28
 80057c8:	d430      	bmi.n	800582c <HAL_ADC_Stop_DMA+0xac>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80057ca:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80057cc:	f7ff fbe0 	bl	8004f90 <HAL_GetTick>
 80057d0:	4606      	mov	r6, r0
 80057d2:	e004      	b.n	80057de <HAL_ADC_Stop_DMA+0x5e>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80057d4:	f7ff fbdc 	bl	8004f90 <HAL_GetTick>
 80057d8:	1b80      	subs	r0, r0, r6
 80057da:	280b      	cmp	r0, #11
 80057dc:	d85f      	bhi.n	800589e <HAL_ADC_Stop_DMA+0x11e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	422a      	tst	r2, r5
 80057e4:	d1f6      	bne.n	80057d4 <HAL_ADC_Stop_DMA+0x54>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80057e6:	68da      	ldr	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80057e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	60da      	str	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80057f0:	f000 fd76 	bl	80062e0 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 80057f4:	4605      	mov	r5, r0
 80057f6:	bb08      	cbnz	r0, 800583c <HAL_ADC_Stop_DMA+0xbc>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	f022 0210 	bic.w	r2, r2, #16
 8005800:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	f002 0203 	and.w	r2, r2, #3
 8005808:	2a01      	cmp	r2, #1
 800580a:	d063      	beq.n	80058d4 <HAL_ADC_Stop_DMA+0x154>
      ADC_STATE_CLR_SET(hadc->State,
 800580c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800580e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800581c:	2300      	movs	r3, #0
 800581e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005822:	4628      	mov	r0, r5
 8005824:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8005826:	2502      	movs	r5, #2
}
 8005828:	4628      	mov	r0, r5
 800582a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800582c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800582e:	0795      	lsls	r5, r2, #30
 8005830:	d4cb      	bmi.n	80057ca <HAL_ADC_Stop_DMA+0x4a>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	f042 0220 	orr.w	r2, r2, #32
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	e7c6      	b.n	80057ca <HAL_ADC_Stop_DMA+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800583c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800583e:	6823      	ldr	r3, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005844:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	f022 0210 	bic.w	r2, r2, #16
 800584c:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	f002 0203 	and.w	r2, r2, #3
 8005854:	2a01      	cmp	r2, #1
 8005856:	d1e1      	bne.n	800581c <HAL_ADC_Stop_DMA+0x9c>
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	07d2      	lsls	r2, r2, #31
 800585c:	d5de      	bpl.n	800581c <HAL_ADC_Stop_DMA+0x9c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	f002 020d 	and.w	r2, r2, #13
 8005864:	2a01      	cmp	r2, #1
 8005866:	d047      	beq.n	80058f8 <HAL_ADC_Stop_DMA+0x178>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800586a:	f043 0310 	orr.w	r3, r3, #16
 800586e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005870:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	64a3      	str	r3, [r4, #72]	; 0x48
 8005878:	e7d0      	b.n	800581c <HAL_ADC_Stop_DMA+0x9c>
      __HAL_ADC_DISABLE(hadc);
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	2103      	movs	r1, #3
 800587e:	f042 0202 	orr.w	r2, r2, #2
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005886:	f7ff fb83 	bl	8004f90 <HAL_GetTick>
 800588a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	07d9      	lsls	r1, r3, #31
 8005892:	d5bb      	bpl.n	800580c <HAL_ADC_Stop_DMA+0x8c>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005894:	f7ff fb7c 	bl	8004f90 <HAL_GetTick>
 8005898:	1b80      	subs	r0, r0, r6
 800589a:	2802      	cmp	r0, #2
 800589c:	d9f6      	bls.n	800588c <HAL_ADC_Stop_DMA+0x10c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800589e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058a0:	f043 0310 	orr.w	r3, r3, #16
 80058a4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80058ae:	2501      	movs	r5, #1
 80058b0:	e7b4      	b.n	800581c <HAL_ADC_Stop_DMA+0x9c>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	0650      	lsls	r0, r2, #25
 80058b6:	d406      	bmi.n	80058c6 <HAL_ADC_Stop_DMA+0x146>
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_ADC_Stop_DMA+0x1b0>)
 80058ba:	e001      	b.n	80058c0 <HAL_ADC_Stop_DMA+0x140>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80058bc:	3a01      	subs	r2, #1
 80058be:	d0ee      	beq.n	800589e <HAL_ADC_Stop_DMA+0x11e>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	0649      	lsls	r1, r1, #25
 80058c4:	d5fa      	bpl.n	80058bc <HAL_ADC_Stop_DMA+0x13c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	0752      	lsls	r2, r2, #29
 80058ce:	d427      	bmi.n	8005920 <HAL_ADC_Stop_DMA+0x1a0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80058d0:	2504      	movs	r5, #4
 80058d2:	e77b      	b.n	80057cc <HAL_ADC_Stop_DMA+0x4c>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80058d4:	6819      	ldr	r1, [r3, #0]
 80058d6:	07c8      	lsls	r0, r1, #31
 80058d8:	d598      	bpl.n	800580c <HAL_ADC_Stop_DMA+0x8c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80058da:	6899      	ldr	r1, [r3, #8]
 80058dc:	f001 010d 	and.w	r1, r1, #13
 80058e0:	2901      	cmp	r1, #1
 80058e2:	d0ca      	beq.n	800587a <HAL_ADC_Stop_DMA+0xfa>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058e6:	f043 0310 	orr.w	r3, r3, #16
 80058ea:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80058ee:	f043 0301 	orr.w	r3, r3, #1
      return HAL_ERROR;
 80058f2:	4615      	mov	r5, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80058f6:	e791      	b.n	800581c <HAL_ADC_Stop_DMA+0x9c>
      __HAL_ADC_DISABLE(hadc);
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	2103      	movs	r1, #3
 80058fc:	f042 0202 	orr.w	r2, r2, #2
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005904:	f7ff fb44 	bl	8004f90 <HAL_GetTick>
 8005908:	4606      	mov	r6, r0
 800590a:	e004      	b.n	8005916 <HAL_ADC_Stop_DMA+0x196>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800590c:	f7ff fb40 	bl	8004f90 <HAL_GetTick>
 8005910:	1b80      	subs	r0, r0, r6
 8005912:	2802      	cmp	r0, #2
 8005914:	d8a8      	bhi.n	8005868 <HAL_ADC_Stop_DMA+0xe8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d4f6      	bmi.n	800590c <HAL_ADC_Stop_DMA+0x18c>
 800591e:	e77d      	b.n	800581c <HAL_ADC_Stop_DMA+0x9c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005920:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005922:	0791      	lsls	r1, r2, #30
 8005924:	d4d4      	bmi.n	80058d0 <HAL_ADC_Stop_DMA+0x150>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	f042 0210 	orr.w	r2, r2, #16
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	e7cf      	b.n	80058d0 <HAL_ADC_Stop_DMA+0x150>
 8005930:	00099400 	.word	0x00099400

08005934 <HAL_ADCEx_Calibration_Start>:
  __HAL_LOCK(hadc);
 8005934:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005938:	2b01      	cmp	r3, #1
 800593a:	d044      	beq.n	80059c6 <HAL_ADCEx_Calibration_Start+0x92>
  if (ADC_IS_ENABLE(hadc) != RESET )
 800593c:	6803      	ldr	r3, [r0, #0]
{
 800593e:	b570      	push	{r4, r5, r6, lr}
 8005940:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005942:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 8005944:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005946:	f000 0003 	and.w	r0, r0, #3
 800594a:	4290      	cmp	r0, r2
 800594c:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800594e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005952:	d027      	beq.n	80059a4 <HAL_ADCEx_Calibration_Start+0x70>
    hadc->State = HAL_ADC_STATE_READY;
 8005954:	2201      	movs	r2, #1
 8005956:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005958:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800595a:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800595c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005960:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005962:	d103      	bne.n	800596c <HAL_ADCEx_Calibration_Start+0x38>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800596a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005972:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005974:	f7ff fb0c 	bl	8004f90 <HAL_GetTick>
 8005978:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800597a:	e004      	b.n	8005986 <HAL_ADCEx_Calibration_Start+0x52>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800597c:	f7ff fb08 	bl	8004f90 <HAL_GetTick>
 8005980:	1b40      	subs	r0, r0, r5
 8005982:	280a      	cmp	r0, #10
 8005984:	d821      	bhi.n	80059ca <HAL_ADCEx_Calibration_Start+0x96>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dbf6      	blt.n	800597c <HAL_ADCEx_Calibration_Start+0x48>
    ADC_STATE_CLR_SET(hadc->State,
 800598e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6463      	str	r3, [r4, #68]	; 0x44
  tmp_hal_status = ADC_Disable(hadc);
 800599a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800599c:	2300      	movs	r3, #0
 800599e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	07d1      	lsls	r1, r2, #31
 80059a8:	d5d4      	bpl.n	8005954 <HAL_ADCEx_Calibration_Start+0x20>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	f002 020d 	and.w	r2, r2, #13
 80059b0:	2a01      	cmp	r2, #1
 80059b2:	d015      	beq.n	80059e0 <HAL_ADCEx_Calibration_Start+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059b6:	f043 0310 	orr.w	r3, r3, #16
 80059ba:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80059c4:	e7ea      	b.n	800599c <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 80059c6:	2002      	movs	r0, #2
}
 80059c8:	4770      	bx	lr
        ADC_STATE_CLR_SET(hadc->State,
 80059ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059cc:	f023 0312 	bic.w	r3, r3, #18
 80059d0:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80059d4:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80059d6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80059d8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 80059dc:	2001      	movs	r0, #1
}
 80059de:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_DISABLE(hadc);
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	2103      	movs	r1, #3
 80059e4:	f042 0202 	orr.w	r2, r2, #2
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80059ec:	f7ff fad0 	bl	8004f90 <HAL_GetTick>
 80059f0:	4606      	mov	r6, r0
 80059f2:	e004      	b.n	80059fe <HAL_ADCEx_Calibration_Start+0xca>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059f4:	f7ff facc 	bl	8004f90 <HAL_GetTick>
 80059f8:	1b80      	subs	r0, r0, r6
 80059fa:	2802      	cmp	r0, #2
 80059fc:	d804      	bhi.n	8005a08 <HAL_ADCEx_Calibration_Start+0xd4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	07d2      	lsls	r2, r2, #31
 8005a04:	d4f6      	bmi.n	80059f4 <HAL_ADCEx_Calibration_Start+0xc0>
 8005a06:	e7a5      	b.n	8005954 <HAL_ADCEx_Calibration_Start+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a0a:	f043 0310 	orr.w	r3, r3, #16
 8005a0e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	64a3      	str	r3, [r4, #72]	; 0x48
    tmp_hal_status = HAL_ERROR;
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e7bf      	b.n	800599c <HAL_ADCEx_Calibration_Start+0x68>

08005a1c <HAL_ADC_ConfigChannel>:
{
 8005a1c:	b4f0      	push	{r4, r5, r6, r7}
 8005a1e:	4602      	mov	r2, r0
 8005a20:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8005a22:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8005a26:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8005a28:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8005a2a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005a2c:	f000 80de 	beq.w	8005bec <HAL_ADC_ConfigChannel+0x1d0>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a30:	6813      	ldr	r3, [r2, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005a32:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a34:	689d      	ldr	r5, [r3, #8]
  __HAL_LOCK(hadc);
 8005a36:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a38:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8005a3a:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a3e:	d437      	bmi.n	8005ab0 <HAL_ADC_ConfigChannel+0x94>
 8005a40:	e9d1 5600 	ldrd	r5, r6, [r1]
 8005a44:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    if (sConfig->Rank < 5U)
 8005a48:	2e04      	cmp	r6, #4
 8005a4a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8005a4e:	f200 80a3 	bhi.w	8005b98 <HAL_ADC_ConfigChannel+0x17c>
      MODIFY_REG(hadc->Instance->SQR1,
 8005a52:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8005a54:	271f      	movs	r7, #31
 8005a56:	4087      	lsls	r7, r0
 8005a58:	ea26 0607 	bic.w	r6, r6, r7
 8005a5c:	fa05 f000 	lsl.w	r0, r5, r0
 8005a60:	4330      	orrs	r0, r6
 8005a62:	6318      	str	r0, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005a64:	6898      	ldr	r0, [r3, #8]
 8005a66:	f010 0f0c 	tst.w	r0, #12
 8005a6a:	d14f      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a6c:	2d09      	cmp	r5, #9
 8005a6e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8005a72:	6888      	ldr	r0, [r1, #8]
 8005a74:	f200 809f 	bhi.w	8005bb6 <HAL_ADC_ConfigChannel+0x19a>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005a78:	695f      	ldr	r7, [r3, #20]
 8005a7a:	f04f 0c07 	mov.w	ip, #7
 8005a7e:	fa0c fc06 	lsl.w	ip, ip, r6
 8005a82:	40b0      	lsls	r0, r6
 8005a84:	ea27 060c 	bic.w	r6, r7, ip
 8005a88:	4330      	orrs	r0, r6
 8005a8a:	6158      	str	r0, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005a8c:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8005a90:	68d8      	ldr	r0, [r3, #12]
 8005a92:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005a96:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8005a98:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005a9a:	fa07 f000 	lsl.w	r0, r7, r0
 8005a9e:	06af      	lsls	r7, r5, #26
    switch (sConfig->OffsetNumber)
 8005aa0:	2e03      	cmp	r6, #3
 8005aa2:	d80f      	bhi.n	8005ac4 <HAL_ADC_ConfigChannel+0xa8>
 8005aa4:	e8df f016 	tbh	[pc, r6, lsl #1]
 8005aa8:	00f200fd 	.word	0x00f200fd
 8005aac:	00dc00e7 	.word	0x00dc00e7
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ab0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005ab2:	f043 0320 	orr.w	r3, r3, #32
 8005ab6:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8005abe:	b002      	add	sp, #8
 8005ac0:	bcf0      	pop	{r4, r5, r6, r7}
 8005ac2:	4770      	bx	lr
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ac4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005ac6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005aca:	42b8      	cmp	r0, r7
 8005acc:	d103      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005ace:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005ad0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ad4:	6618      	str	r0, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ad6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005ad8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005adc:	42b8      	cmp	r0, r7
 8005ade:	d103      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0xcc>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005ae0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005ae2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ae6:	6658      	str	r0, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ae8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005aea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005aee:	42b8      	cmp	r0, r7
 8005af0:	d103      	bne.n	8005afa <HAL_ADC_ConfigChannel+0xde>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005af2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005af4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005af8:	6698      	str	r0, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005afa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005afc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b00:	42b8      	cmp	r0, r7
 8005b02:	d103      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005b04:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005b06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b0a:	66d8      	str	r0, [r3, #108]	; 0x6c
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b0c:	6898      	ldr	r0, [r3, #8]
 8005b0e:	f000 0003 	and.w	r0, r0, #3
 8005b12:	2801      	cmp	r0, #1
 8005b14:	d06e      	beq.n	8005bf4 <HAL_ADC_ConfigChannel+0x1d8>
 8005b16:	2001      	movs	r0, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b18:	2c01      	cmp	r4, #1
 8005b1a:	fa00 f005 	lsl.w	r0, r0, r5
 8005b1e:	d06d      	beq.n	8005bfc <HAL_ADC_ConfigChannel+0x1e0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005b24:	ea21 0000 	bic.w	r0, r1, r0
 8005b28:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b30:	d07d      	beq.n	8005c2e <HAL_ADC_ConfigChannel+0x212>
 8005b32:	4c87      	ldr	r4, [pc, #540]	; (8005d50 <HAL_ADC_ConfigChannel+0x334>)
 8005b34:	4987      	ldr	r1, [pc, #540]	; (8005d54 <HAL_ADC_ConfigChannel+0x338>)
 8005b36:	4888      	ldr	r0, [pc, #544]	; (8005d58 <HAL_ADC_ConfigChannel+0x33c>)
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	bf08      	it	eq
 8005b3c:	4601      	moveq	r1, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b3e:	2d10      	cmp	r5, #16
 8005b40:	d071      	beq.n	8005c26 <HAL_ADC_ConfigChannel+0x20a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005b42:	2d11      	cmp	r5, #17
 8005b44:	d04e      	beq.n	8005be4 <HAL_ADC_ConfigChannel+0x1c8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b46:	2d12      	cmp	r5, #18
 8005b48:	d124      	bne.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005b4a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005b4c:	0240      	lsls	r0, r0, #9
 8005b4e:	d421      	bmi.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b54:	f000 80e4 	beq.w	8005d20 <HAL_ADC_ConfigChannel+0x304>
 8005b58:	487d      	ldr	r0, [pc, #500]	; (8005d50 <HAL_ADC_ConfigChannel+0x334>)
 8005b5a:	4283      	cmp	r3, r0
 8005b5c:	f000 80ec 	beq.w	8005d38 <HAL_ADC_ConfigChannel+0x31c>
 8005b60:	4c7e      	ldr	r4, [pc, #504]	; (8005d5c <HAL_ADC_ConfigChannel+0x340>)
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	f000 80a8 	beq.w	8005cb8 <HAL_ADC_ConfigChannel+0x29c>
 8005b68:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005b6c:	4283      	cmp	r3, r0
 8005b6e:	f000 80a4 	beq.w	8005cba <HAL_ADC_ConfigChannel+0x29e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b72:	6898      	ldr	r0, [r3, #8]
 8005b74:	f000 0003 	and.w	r0, r0, #3
 8005b78:	2801      	cmp	r0, #1
 8005b7a:	f000 80e4 	beq.w	8005d46 <HAL_ADC_ConfigChannel+0x32a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005b7e:	2d10      	cmp	r5, #16
 8005b80:	d008      	beq.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005b82:	2d11      	cmp	r5, #17
 8005b84:	f000 80ce 	beq.w	8005d24 <HAL_ADC_ConfigChannel+0x308>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b88:	2d12      	cmp	r5, #18
 8005b8a:	d103      	bne.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005b8c:	688b      	ldr	r3, [r1, #8]
 8005b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b92:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b94:	2000      	movs	r0, #0
 8005b96:	e78f      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8005b98:	2e09      	cmp	r6, #9
 8005b9a:	d918      	bls.n	8005bce <HAL_ADC_ConfigChannel+0x1b2>
    else if (sConfig->Rank < 15U)
 8005b9c:	2e0e      	cmp	r6, #14
 8005b9e:	d854      	bhi.n	8005c4a <HAL_ADC_ConfigChannel+0x22e>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005ba0:	383c      	subs	r0, #60	; 0x3c
 8005ba2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005ba4:	271f      	movs	r7, #31
 8005ba6:	4087      	lsls	r7, r0
 8005ba8:	ea26 0607 	bic.w	r6, r6, r7
 8005bac:	fa05 f000 	lsl.w	r0, r5, r0
 8005bb0:	4330      	orrs	r0, r6
 8005bb2:	6398      	str	r0, [r3, #56]	; 0x38
 8005bb4:	e756      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bb6:	3e1e      	subs	r6, #30
 8005bb8:	699f      	ldr	r7, [r3, #24]
 8005bba:	f04f 0c07 	mov.w	ip, #7
 8005bbe:	fa0c fc06 	lsl.w	ip, ip, r6
 8005bc2:	40b0      	lsls	r0, r6
 8005bc4:	ea27 060c 	bic.w	r6, r7, ip
 8005bc8:	4330      	orrs	r0, r6
 8005bca:	6198      	str	r0, [r3, #24]
 8005bcc:	e75e      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 8005bce:	381e      	subs	r0, #30
 8005bd0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005bd2:	271f      	movs	r7, #31
 8005bd4:	4087      	lsls	r7, r0
 8005bd6:	ea26 0607 	bic.w	r6, r6, r7
 8005bda:	fa05 f000 	lsl.w	r0, r5, r0
 8005bde:	4330      	orrs	r0, r6
 8005be0:	6358      	str	r0, [r3, #52]	; 0x34
 8005be2:	e73f      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x48>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005be4:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005be6:	01c4      	lsls	r4, r0, #7
 8005be8:	d5b2      	bpl.n	8005b50 <HAL_ADC_ConfigChannel+0x134>
 8005bea:	e7d3      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
  __HAL_LOCK(hadc);
 8005bec:	2002      	movs	r0, #2
}
 8005bee:	b002      	add	sp, #8
 8005bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8005bf2:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	07c7      	lsls	r7, r0, #31
 8005bf8:	d58d      	bpl.n	8005b16 <HAL_ADC_ConfigChannel+0xfa>
 8005bfa:	e7cb      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005bfc:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8005c00:	688e      	ldr	r6, [r1, #8]
 8005c02:	4320      	orrs	r0, r4
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005c04:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005c06:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005c0a:	d912      	bls.n	8005c32 <HAL_ADC_ConfigChannel+0x216>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005c0c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005c10:	391b      	subs	r1, #27
 8005c12:	6998      	ldr	r0, [r3, #24]
 8005c14:	2407      	movs	r4, #7
 8005c16:	408c      	lsls	r4, r1
 8005c18:	ea20 0004 	bic.w	r0, r0, r4
 8005c1c:	fa06 f101 	lsl.w	r1, r6, r1
 8005c20:	4301      	orrs	r1, r0
 8005c22:	6199      	str	r1, [r3, #24]
 8005c24:	e782      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x110>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005c26:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005c28:	0206      	lsls	r6, r0, #8
 8005c2a:	d591      	bpl.n	8005b50 <HAL_ADC_ConfigChannel+0x134>
 8005c2c:	e7b2      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c2e:	494a      	ldr	r1, [pc, #296]	; (8005d58 <HAL_ADC_ConfigChannel+0x33c>)
 8005c30:	e785      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x122>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005c32:	1c68      	adds	r0, r5, #1
 8005c34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005c38:	6959      	ldr	r1, [r3, #20]
 8005c3a:	2407      	movs	r4, #7
 8005c3c:	4084      	lsls	r4, r0
 8005c3e:	4086      	lsls	r6, r0
 8005c40:	ea21 0104 	bic.w	r1, r1, r4
 8005c44:	4331      	orrs	r1, r6
 8005c46:	6159      	str	r1, [r3, #20]
 8005c48:	e770      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x110>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005c4a:	385a      	subs	r0, #90	; 0x5a
 8005c4c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8005c4e:	271f      	movs	r7, #31
 8005c50:	4087      	lsls	r7, r0
 8005c52:	ea26 0607 	bic.w	r6, r6, r7
 8005c56:	fa05 f000 	lsl.w	r0, r5, r0
 8005c5a:	4330      	orrs	r0, r6
 8005c5c:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005c5e:	e701      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005c60:	f8d3 c06c 	ldr.w	ip, [r3, #108]	; 0x6c
 8005c64:	4e3e      	ldr	r6, [pc, #248]	; (8005d60 <HAL_ADC_ConfigChannel+0x344>)
 8005c66:	ea0c 0606 	and.w	r6, ip, r6
 8005c6a:	4337      	orrs	r7, r6
 8005c6c:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005c70:	4338      	orrs	r0, r7
 8005c72:	66d8      	str	r0, [r3, #108]	; 0x6c
      break;
 8005c74:	e74a      	b.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005c76:	f8d3 c068 	ldr.w	ip, [r3, #104]	; 0x68
 8005c7a:	4e39      	ldr	r6, [pc, #228]	; (8005d60 <HAL_ADC_ConfigChannel+0x344>)
 8005c7c:	ea0c 0606 	and.w	r6, ip, r6
 8005c80:	4337      	orrs	r7, r6
 8005c82:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005c86:	4338      	orrs	r0, r7
 8005c88:	6698      	str	r0, [r3, #104]	; 0x68
      break;
 8005c8a:	e73f      	b.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005c8c:	f8d3 c064 	ldr.w	ip, [r3, #100]	; 0x64
 8005c90:	4e33      	ldr	r6, [pc, #204]	; (8005d60 <HAL_ADC_ConfigChannel+0x344>)
 8005c92:	ea0c 0606 	and.w	r6, ip, r6
 8005c96:	4337      	orrs	r7, r6
 8005c98:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005c9c:	4338      	orrs	r0, r7
 8005c9e:	6658      	str	r0, [r3, #100]	; 0x64
      break;
 8005ca0:	e734      	b.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005ca2:	f8d3 c060 	ldr.w	ip, [r3, #96]	; 0x60
 8005ca6:	4e2e      	ldr	r6, [pc, #184]	; (8005d60 <HAL_ADC_ConfigChannel+0x344>)
 8005ca8:	ea0c 0606 	and.w	r6, ip, r6
 8005cac:	4337      	orrs	r7, r6
 8005cae:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005cb2:	4338      	orrs	r0, r7
 8005cb4:	6618      	str	r0, [r3, #96]	; 0x60
      break;
 8005cb6:	e729      	b.n	8005b0c <HAL_ADC_ConfigChannel+0xf0>
 8005cb8:	4c2a      	ldr	r4, [pc, #168]	; (8005d64 <HAL_ADC_ConfigChannel+0x348>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005cba:	6898      	ldr	r0, [r3, #8]
 8005cbc:	f000 0003 	and.w	r0, r0, #3
 8005cc0:	2801      	cmp	r0, #1
 8005cc2:	d024      	beq.n	8005d0e <HAL_ADC_ConfigChannel+0x2f2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005cc4:	68a0      	ldr	r0, [r4, #8]
 8005cc6:	f000 0003 	and.w	r0, r0, #3
 8005cca:	2801      	cmp	r0, #1
 8005ccc:	d037      	beq.n	8005d3e <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005cce:	2d10      	cmp	r5, #16
 8005cd0:	f47f af57 	bne.w	8005b82 <HAL_ADC_ConfigChannel+0x166>
 8005cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cd8:	f47f af5c 	bne.w	8005b94 <HAL_ADC_ConfigChannel+0x178>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cdc:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <HAL_ADC_ConfigChannel+0x34c>)
 8005cde:	4c23      	ldr	r4, [pc, #140]	; (8005d6c <HAL_ADC_ConfigChannel+0x350>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005ce2:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ce4:	fba4 4303 	umull	r4, r3, r4, r3
 8005ce8:	0c9b      	lsrs	r3, r3, #18
 8005cea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cee:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005cf4:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cf6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f43f af4a 	beq.w	8005b94 <HAL_ADC_ConfigChannel+0x178>
            wait_loop_index--;
 8005d00:	9b01      	ldr	r3, [sp, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f9      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x2e4>
 8005d0c:	e742      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x178>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	07c6      	lsls	r6, r0, #31
 8005d12:	d5d7      	bpl.n	8005cc4 <HAL_ADC_ConfigChannel+0x2a8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d14:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d16:	f043 0320 	orr.w	r3, r3, #32
 8005d1a:	6453      	str	r3, [r2, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	e6cb      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x9c>
 8005d20:	4c0b      	ldr	r4, [pc, #44]	; (8005d50 <HAL_ADC_ConfigChannel+0x334>)
 8005d22:	e7ca      	b.n	8005cba <HAL_ADC_ConfigChannel+0x29e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d28:	f47f af34 	bne.w	8005b94 <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005d2c:	688b      	ldr	r3, [r1, #8]
 8005d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d32:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d34:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005d36:	e6bf      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x9c>
 8005d38:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8005d3c:	e7bd      	b.n	8005cba <HAL_ADC_ConfigChannel+0x29e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	07c0      	lsls	r0, r0, #31
 8005d42:	d4e7      	bmi.n	8005d14 <HAL_ADC_ConfigChannel+0x2f8>
 8005d44:	e7c3      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2b2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	07c7      	lsls	r7, r0, #31
 8005d4a:	d4e3      	bmi.n	8005d14 <HAL_ADC_ConfigChannel+0x2f8>
 8005d4c:	e717      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x162>
 8005d4e:	bf00      	nop
 8005d50:	50000100 	.word	0x50000100
 8005d54:	50000700 	.word	0x50000700
 8005d58:	50000300 	.word	0x50000300
 8005d5c:	50000400 	.word	0x50000400
 8005d60:	83fff000 	.word	0x83fff000
 8005d64:	50000500 	.word	0x50000500
 8005d68:	20000004 	.word	0x20000004
 8005d6c:	431bde83 	.word	0x431bde83

08005d70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d70:	4a07      	ldr	r2, [pc, #28]	; (8005d90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005d72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d74:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005d78:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005d7a:	0200      	lsls	r0, r0, #8
 8005d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d80:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005d88:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005d8a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_NVIC_SetPriority+0x64>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d9c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d9e:	f1c3 0507 	rsb	r5, r3, #7
 8005da2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005da4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da8:	bf28      	it	cs
 8005daa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dac:	2c06      	cmp	r4, #6
 8005dae:	d919      	bls.n	8005de4 <HAL_NVIC_SetPriority+0x50>
 8005db0:	3b03      	subs	r3, #3
 8005db2:	f04f 34ff 	mov.w	r4, #4294967295
 8005db6:	409c      	lsls	r4, r3
 8005db8:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	40aa      	lsls	r2, r5
 8005dc2:	ea21 0102 	bic.w	r1, r1, r2
 8005dc6:	fa01 f203 	lsl.w	r2, r1, r3
 8005dca:	4322      	orrs	r2, r4
 8005dcc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	db0a      	blt.n	8005dea <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005dd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005ddc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005de0:	bc30      	pop	{r4, r5}
 8005de2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005de4:	2400      	movs	r4, #0
 8005de6:	4623      	mov	r3, r4
 8005de8:	e7e8      	b.n	8005dbc <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dea:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <HAL_NVIC_SetPriority+0x68>)
 8005dec:	f000 000f 	and.w	r0, r0, #15
 8005df0:	4403      	add	r3, r0
 8005df2:	761a      	strb	r2, [r3, #24]
 8005df4:	bc30      	pop	{r4, r5}
 8005df6:	4770      	bx	lr
 8005df8:	e000ed00 	.word	0xe000ed00
 8005dfc:	e000ecfc 	.word	0xe000ecfc

08005e00 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005e00:	f000 011f 	and.w	r1, r0, #31
 8005e04:	2301      	movs	r3, #1
 8005e06:	0940      	lsrs	r0, r0, #5
 8005e08:	4a02      	ldr	r2, [pc, #8]	; (8005e14 <HAL_NVIC_EnableIRQ+0x14>)
 8005e0a:	408b      	lsls	r3, r1
 8005e0c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	e000e100 	.word	0xe000e100

08005e18 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005e18:	0943      	lsrs	r3, r0, #5
 8005e1a:	3320      	adds	r3, #32
 8005e1c:	f000 001f 	and.w	r0, r0, #31
 8005e20:	2201      	movs	r2, #1
 8005e22:	4903      	ldr	r1, [pc, #12]	; (8005e30 <HAL_NVIC_DisableIRQ+0x18>)
 8005e24:	fa02 f000 	lsl.w	r0, r2, r0
 8005e28:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e100 	.word	0xe000e100

08005e34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e34:	3801      	subs	r0, #1
 8005e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005e3a:	d20e      	bcs.n	8005e5a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e3e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e40:	4c08      	ldr	r4, [pc, #32]	; (8005e64 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e42:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e44:	20f0      	movs	r0, #240	; 0xf0
 8005e46:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e4a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e4e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e52:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8005e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005e68:	0943      	lsrs	r3, r0, #5
 8005e6a:	3360      	adds	r3, #96	; 0x60
 8005e6c:	f000 001f 	and.w	r0, r0, #31
 8005e70:	2201      	movs	r2, #1
 8005e72:	4903      	ldr	r1, [pc, #12]	; (8005e80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8005e74:	fa02 f000 	lsl.w	r0, r2, r0
 8005e78:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e100 	.word	0xe000e100

08005e84 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005e86:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005e88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005e8a:	bf0c      	ite	eq
 8005e8c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005e90:	f023 0304 	bicne.w	r3, r3, #4
 8005e94:	6013      	str	r3, [r2, #0]
  }
}
 8005e96:	4770      	bx	lr
 8005e98:	e000e010 	.word	0xe000e010

08005e9c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8005e9c:	b188      	cbz	r0, 8005ec2 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005e9e:	7903      	ldrb	r3, [r0, #4]
{ 
 8005ea0:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005ea2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	b13b      	cbz	r3, 8005eba <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005eaa:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eac:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005eae:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eb0:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8005eb2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005eb4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005eb6:	7122      	strb	r2, [r4, #4]
}
 8005eb8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005eba:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005ebc:	f005 fce0 	bl	800b880 <HAL_DAC_MspInit>
 8005ec0:	e7f3      	b.n	8005eaa <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8005ec2:	2001      	movs	r0, #1
}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop

08005ec8 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005ec8:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005eca:	6800      	ldr	r0, [r0, #0]
{
 8005ecc:	b410      	push	{r4}
  __HAL_DAC_DISABLE(hdac, Channel);
 8005ece:	6803      	ldr	r3, [r0, #0]
 8005ed0:	2401      	movs	r4, #1
 8005ed2:	fa04 f101 	lsl.w	r1, r4, r1
 8005ed6:	ea23 0301 	bic.w	r3, r3, r1
 8005eda:	6003      	str	r3, [r0, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8005edc:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005ede:	7114      	strb	r4, [r2, #4]
}
 8005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop

08005ee8 <HAL_DAC_Stop_DMA>:
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005ee8:	6803      	ldr	r3, [r0, #0]
{
 8005eea:	b510      	push	{r4, lr}
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005eec:	681a      	ldr	r2, [r3, #0]
{
 8005eee:	4604      	mov	r4, r0
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005ef0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005ef4:	4088      	lsls	r0, r1
 8005ef6:	ea22 0200 	bic.w	r2, r2, r0
 8005efa:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	2001      	movs	r0, #1
 8005f00:	4088      	lsls	r0, r1
 8005f02:	ea22 0200 	bic.w	r2, r2, r0
 8005f06:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005f08:	b959      	cbnz	r1, 8005f22 <HAL_DAC_Stop_DMA+0x3a>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8005f0a:	68a0      	ldr	r0, [r4, #8]
 8005f0c:	f000 f9e8 	bl	80062e0 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f18:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8005f1a:	b960      	cbnz	r0, 8005f36 <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8005f20:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8005f22:	68e0      	ldr	r0, [r4, #12]
 8005f24:	f000 f9dc 	bl	80062e0 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f30:	6013      	str	r3, [r2, #0]
  if (status != HAL_OK)
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d0f2      	beq.n	8005f1c <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8005f36:	2304      	movs	r3, #4
 8005f38:	7123      	strb	r3, [r4, #4]
}
 8005f3a:	bd10      	pop	{r4, pc}

08005f3c <HAL_DAC_ConvCpltCallbackCh1>:
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop

08005f44 <HAL_DAC_ErrorCallbackCh1>:
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005f48:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff fff5 	bl	8005f44 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	7123      	strb	r3, [r4, #4]
}
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005f60:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005f62:	f7ff bfed 	b.w	8005f40 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8005f66:	bf00      	nop

08005f68 <DAC_DMAConvCpltCh1>:
{
 8005f68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f7ff ffe5 	bl	8005f3c <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8005f72:	2301      	movs	r3, #1
 8005f74:	7123      	strb	r3, [r4, #4]
}
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <HAL_DAC_Start_DMA>:
{
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8005f7a:	7944      	ldrb	r4, [r0, #5]
{
 8005f7c:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_LOCK(hdac);
 8005f80:	2c01      	cmp	r4, #1
 8005f82:	d054      	beq.n	800602e <HAL_DAC_Start_DMA+0xb6>
 8005f84:	4617      	mov	r7, r2
 8005f86:	6805      	ldr	r5, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f88:	2202      	movs	r2, #2
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4604      	mov	r4, r0
 8005f92:	7141      	strb	r1, [r0, #5]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8005f94:	682a      	ldr	r2, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8005f96:	b9ee      	cbnz	r6, 8005fd4 <HAL_DAC_Start_DMA+0x5c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f98:	6880      	ldr	r0, [r0, #8]
 8005f9a:	492c      	ldr	r1, [pc, #176]	; (800604c <HAL_DAC_Start_DMA+0xd4>)
 8005f9c:	6281      	str	r1, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f9e:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 800605c <HAL_DAC_Start_DMA+0xe4>
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005fa2:	492b      	ldr	r1, [pc, #172]	; (8006050 <HAL_DAC_Start_DMA+0xd8>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8005fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    switch(Alignment)
 8005fa8:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005fac:	e9c0 e10b 	strd	lr, r1, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8005fb0:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 8005fb2:	d047      	beq.n	8006044 <HAL_DAC_Start_DMA+0xcc>
 8005fb4:	f1bc 0f08 	cmp.w	ip, #8
 8005fb8:	d041      	beq.n	800603e <HAL_DAC_Start_DMA+0xc6>
 8005fba:	f1bc 0f00 	cmp.w	ip, #0
 8005fbe:	d030      	beq.n	8006022 <HAL_DAC_Start_DMA+0xaa>
  if(Channel == DAC_CHANNEL_1)
 8005fc0:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005fc2:	6829      	ldr	r1, [r5, #0]
 8005fc4:	f441 5c00 	orr.w	ip, r1, #8192	; 0x2000
 8005fc8:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005fcc:	4639      	mov	r1, r7
 8005fce:	f000 f947 	bl	8006260 <HAL_DMA_Start_IT>
 8005fd2:	e01c      	b.n	800600e <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005fd4:	68c0      	ldr	r0, [r0, #12]
 8005fd6:	491f      	ldr	r1, [pc, #124]	; (8006054 <HAL_DAC_Start_DMA+0xdc>)
 8005fd8:	6281      	str	r1, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005fda:	f8df e084 	ldr.w	lr, [pc, #132]	; 8006060 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005fde:	491e      	ldr	r1, [pc, #120]	; (8006058 <HAL_DAC_Start_DMA+0xe0>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8005fe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 8005fe4:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005fe8:	e9c0 e10b 	strd	lr, r1, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8005fec:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 8005fee:	d023      	beq.n	8006038 <HAL_DAC_Start_DMA+0xc0>
 8005ff0:	f1bc 0f08 	cmp.w	ip, #8
 8005ff4:	d01d      	beq.n	8006032 <HAL_DAC_Start_DMA+0xba>
 8005ff6:	f1bc 0f00 	cmp.w	ip, #0
 8005ffa:	d015      	beq.n	8006028 <HAL_DAC_Start_DMA+0xb0>
  if(Channel == DAC_CHANNEL_1)
 8005ffc:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ffe:	6829      	ldr	r1, [r5, #0]
 8006000:	f041 5c00 	orr.w	ip, r1, #536870912	; 0x20000000
 8006004:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006008:	4639      	mov	r1, r7
 800600a:	f000 f929 	bl	8006260 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	2301      	movs	r3, #1
 8006012:	6810      	ldr	r0, [r2, #0]
 8006014:	fa03 f106 	lsl.w	r1, r3, r6
 8006018:	4301      	orrs	r1, r0
  __HAL_UNLOCK(hdac);
 800601a:	2000      	movs	r0, #0
 800601c:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800601e:	6011      	str	r1, [r2, #0]
}
 8006020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006022:	f105 0208 	add.w	r2, r5, #8
        break;
 8006026:	e7cc      	b.n	8005fc2 <HAL_DAC_Start_DMA+0x4a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006028:	f105 0214 	add.w	r2, r5, #20
        break;
 800602c:	e7e7      	b.n	8005ffe <HAL_DAC_Start_DMA+0x86>
  __HAL_LOCK(hdac);
 800602e:	2002      	movs	r0, #2
}
 8006030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006032:	f105 021c 	add.w	r2, r5, #28
        break;
 8006036:	e7e2      	b.n	8005ffe <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006038:	f105 0218 	add.w	r2, r5, #24
        break;
 800603c:	e7df      	b.n	8005ffe <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800603e:	f105 0210 	add.w	r2, r5, #16
        break;
 8006042:	e7be      	b.n	8005fc2 <HAL_DAC_Start_DMA+0x4a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006044:	f105 020c 	add.w	r2, r5, #12
        break;
 8006048:	e7bb      	b.n	8005fc2 <HAL_DAC_Start_DMA+0x4a>
 800604a:	bf00      	nop
 800604c:	08005f69 	.word	0x08005f69
 8006050:	08005f49 	.word	0x08005f49
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060d5 	.word	0x080060d5
 800605c:	08005f61 	.word	0x08005f61
 8006060:	080060c5 	.word	0x080060c5

08006064 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8006064:	7943      	ldrb	r3, [r0, #5]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d01d      	beq.n	80060a6 <HAL_DAC_ConfigChannel+0x42>
  hdac->State = HAL_DAC_STATE_BUSY;
 800606a:	2302      	movs	r3, #2
{
 800606c:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 800606e:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8006070:	6804      	ldr	r4, [r0, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006072:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006076:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800607a:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800607c:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800607e:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006080:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 |= tmpreg2 << Channel;
 8006084:	4093      	lsls	r3, r2
 8006086:	430b      	orrs	r3, r1
  hdac->Instance->CR = tmpreg1;
 8006088:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	21c0      	movs	r1, #192	; 0xc0
 800608e:	fa01 f202 	lsl.w	r2, r1, r2
 8006092:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8006096:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8006098:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800609a:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800609c:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 800609e:	7143      	strb	r3, [r0, #5]
}
 80060a0:	bc70      	pop	{r4, r5, r6}
 80060a2:	4618      	mov	r0, r3
 80060a4:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80060a6:	2202      	movs	r2, #2
}
 80060a8:	4610      	mov	r0, r2
 80060aa:	4770      	bx	lr

080060ac <HAL_DACEx_ConvCpltCallbackCh2>:
}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80060b0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff fff9 	bl	80060ac <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 80060ba:	2301      	movs	r3, #1
 80060bc:	7123      	strb	r3, [r4, #4]
}
 80060be:	bd10      	pop	{r4, pc}

080060c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop

080060c4 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80060c4:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80060c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80060c8:	f7ff fffa 	bl	80060c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
}
 80060cc:	bd08      	pop	{r3, pc}
 80060ce:	bf00      	nop

080060d0 <HAL_DACEx_ErrorCallbackCh2>:
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop

080060d4 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80060d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	f043 0304 	orr.w	r3, r3, #4
 80060de:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80060e0:	4620      	mov	r0, r4
 80060e2:	f7ff fff5 	bl	80060d0 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 80060e6:	2301      	movs	r3, #1
 80060e8:	7123      	strb	r3, [r4, #4]
}
 80060ea:	bd10      	pop	{r4, pc}

080060ec <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d03a      	beq.n	8006166 <HAL_DMA_Init+0x7a>
{ 
 80060f0:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80060f2:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f6:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 80060fa:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80060fc:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060fe:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006100:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8006104:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006106:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006108:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 800610a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 800610c:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800610e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8006110:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006112:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006116:	4c15      	ldr	r4, [pc, #84]	; (800616c <HAL_DMA_Init+0x80>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006118:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800611c:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800611e:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8006120:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006122:	d916      	bls.n	8006152 <HAL_DMA_Init+0x66>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006124:	4a12      	ldr	r2, [pc, #72]	; (8006170 <HAL_DMA_Init+0x84>)
 8006126:	4913      	ldr	r1, [pc, #76]	; (8006174 <HAL_DMA_Init+0x88>)
    hdma->DmaBaseAddress = DMA2;
 8006128:	4c13      	ldr	r4, [pc, #76]	; (8006178 <HAL_DMA_Init+0x8c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800612a:	4402      	add	r2, r0
 800612c:	fba1 1202 	umull	r1, r2, r1, r2
 8006130:	0912      	lsrs	r2, r2, #4
 8006132:	0092      	lsls	r2, r2, #2
  hdma->XferCpltCallback = NULL;
 8006134:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006136:	2101      	movs	r1, #1
 8006138:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800613c:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8006140:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006144:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8006146:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800614a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
}  
 800614e:	bc30      	pop	{r4, r5}
 8006150:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <HAL_DMA_Init+0x90>)
 8006154:	4907      	ldr	r1, [pc, #28]	; (8006174 <HAL_DMA_Init+0x88>)
 8006156:	4402      	add	r2, r0
 8006158:	fba1 1202 	umull	r1, r2, r1, r2
 800615c:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 800615e:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	e7e6      	b.n	8006134 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 8006166:	2001      	movs	r0, #1
}  
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40020407 	.word	0x40020407
 8006170:	bffdfbf8 	.word	0xbffdfbf8
 8006174:	cccccccd 	.word	0xcccccccd
 8006178:	40020400 	.word	0x40020400
 800617c:	bffdfff8 	.word	0xbffdfff8

08006180 <HAL_DMA_DeInit>:
  if(NULL == hdma)
 8006180:	b368      	cbz	r0, 80061de <HAL_DMA_DeInit+0x5e>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006182:	6802      	ldr	r2, [r0, #0]
{
 8006184:	b430      	push	{r4, r5}
 8006186:	4601      	mov	r1, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006188:	4c16      	ldr	r4, [pc, #88]	; (80061e4 <HAL_DMA_DeInit+0x64>)
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800618a:	6810      	ldr	r0, [r2, #0]
  hdma->Instance->CCR  = 0U;
 800618c:	2300      	movs	r3, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800618e:	f020 0001 	bic.w	r0, r0, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006192:	42a2      	cmp	r2, r4
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006194:	6010      	str	r0, [r2, #0]
  hdma->Instance->CCR  = 0U;
 8006196:	6013      	str	r3, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 8006198:	6053      	str	r3, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 800619a:	6093      	str	r3, [r2, #8]
  hdma->Instance->CMAR = 0U;
 800619c:	60d3      	str	r3, [r2, #12]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800619e:	d915      	bls.n	80061cc <HAL_DMA_DeInit+0x4c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_DMA_DeInit+0x68>)
 80061a2:	4812      	ldr	r0, [pc, #72]	; (80061ec <HAL_DMA_DeInit+0x6c>)
    hdma->DmaBaseAddress = DMA2;
 80061a4:	4d12      	ldr	r5, [pc, #72]	; (80061f0 <HAL_DMA_DeInit+0x70>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80061a6:	4413      	add	r3, r2
 80061a8:	fba0 2303 	umull	r2, r3, r0, r3
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	009b      	lsls	r3, r3, #2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061b0:	2401      	movs	r4, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b2:	2200      	movs	r2, #0
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061b4:	409c      	lsls	r4, r3
 80061b6:	e9c1 530f 	strd	r5, r3, [r1, #60]	; 0x3c
  return HAL_OK;
 80061ba:	4610      	mov	r0, r2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061bc:	606c      	str	r4, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061be:	638a      	str	r2, [r1, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 80061c0:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80061c4:	f881 2020 	strb.w	r2, [r1, #32]
}
 80061c8:	bc30      	pop	{r4, r5}
 80061ca:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_DMA_DeInit+0x74>)
 80061ce:	4807      	ldr	r0, [pc, #28]	; (80061ec <HAL_DMA_DeInit+0x6c>)
    hdma->DmaBaseAddress = DMA1;
 80061d0:	4d09      	ldr	r5, [pc, #36]	; (80061f8 <HAL_DMA_DeInit+0x78>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061d2:	4413      	add	r3, r2
 80061d4:	fba0 2303 	umull	r2, r3, r0, r3
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	e7e8      	b.n	80061b0 <HAL_DMA_DeInit+0x30>
    return HAL_ERROR;
 80061de:	2001      	movs	r0, #1
}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40020407 	.word	0x40020407
 80061e8:	bffdfbf8 	.word	0xbffdfbf8
 80061ec:	cccccccd 	.word	0xcccccccd
 80061f0:	40020400 	.word	0x40020400
 80061f4:	bffdfff8 	.word	0xbffdfff8
 80061f8:	40020000 	.word	0x40020000

080061fc <HAL_DMA_Start>:
{
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80061fe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006202:	2c01      	cmp	r4, #1
 8006204:	d02a      	beq.n	800625c <HAL_DMA_Start+0x60>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006206:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800620a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800620c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800620e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006212:	d11e      	bne.n	8006252 <HAL_DMA_Start+0x56>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8006214:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006216:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006218:	2600      	movs	r6, #0
 800621a:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800621c:	6826      	ldr	r6, [r4, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 800621e:	f04f 0e02 	mov.w	lr, #2
 8006222:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8006226:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800622a:	6c06      	ldr	r6, [r0, #64]	; 0x40
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800622c:	6840      	ldr	r0, [r0, #4]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800622e:	f8c4 c000 	str.w	ip, [r4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006232:	2810      	cmp	r0, #16
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006234:	fa05 f506 	lsl.w	r5, r5, r6
 8006238:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800623a:	6063      	str	r3, [r4, #4]
    hdma->Instance->CPAR = DstAddress;
 800623c:	bf0b      	itete	eq
 800623e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006240:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006242:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006244:	60e2      	strne	r2, [r4, #12]
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800624e:	2000      	movs	r0, #0
} 
 8006250:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	__HAL_UNLOCK(hdma);
 8006252:	2300      	movs	r3, #0
 8006254:	f880 3020 	strb.w	r3, [r0, #32]
  	status = HAL_BUSY;
 8006258:	2002      	movs	r0, #2
} 
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 800625c:	2002      	movs	r0, #2
} 
 800625e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006260 <HAL_DMA_Start_IT>:
{
 8006260:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8006262:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006266:	2c01      	cmp	r4, #1
 8006268:	d02f      	beq.n	80062ca <HAL_DMA_Start_IT+0x6a>
  if(HAL_DMA_STATE_READY == hdma->State)
 800626a:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800626e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006270:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8006272:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006276:	d123      	bne.n	80062c0 <HAL_DMA_Start_IT+0x60>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006278:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800627a:	2600      	movs	r6, #0
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800627c:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006280:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006282:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006284:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006286:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800628a:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 800628c:	f04f 0e02 	mov.w	lr, #2
 8006290:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006294:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006296:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 800629a:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800629c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800629e:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 80062a0:	bf0b      	itete	eq
 80062a2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80062a4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80062a6:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80062a8:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80062aa:	b183      	cbz	r3, 80062ce <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	f043 030e 	orr.w	r3, r3, #14
 80062b2:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80062bc:	2000      	movs	r0, #0
} 
 80062be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 80062c0:	2300      	movs	r3, #0
 80062c2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80062c6:	2002      	movs	r0, #2
} 
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80062ca:	2002      	movs	r0, #2
} 
 80062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f043 030a 	orr.w	r3, r3, #10
 80062d4:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	e7e9      	b.n	80062b4 <HAL_DMA_Start_IT+0x54>

080062e0 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062e0:	6802      	ldr	r2, [r0, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
 80062e4:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062e6:	6810      	ldr	r0, [r2, #0]
 80062e8:	f020 000e 	bic.w	r0, r0, #14
{
 80062ec:	b430      	push	{r4, r5}
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80062f0:	6010      	str	r0, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062f2:	6810      	ldr	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062f4:	2401      	movs	r4, #1
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062f6:	f020 0001 	bic.w	r0, r0, #1
 80062fa:	6010      	str	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062fc:	fa04 f101 	lsl.w	r1, r4, r1
	__HAL_UNLOCK(hdma);
 8006300:	2200      	movs	r2, #0
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006302:	6069      	str	r1, [r5, #4]
}
 8006304:	4610      	mov	r0, r2
	hdma->State = HAL_DMA_STATE_READY; 
 8006306:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 800630a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800630e:	bc30      	pop	{r4, r5}
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop

08006314 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006314:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006318:	2a02      	cmp	r2, #2
{  
 800631a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800631c:	d003      	beq.n	8006326 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800631e:	2204      	movs	r2, #4
 8006320:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8006322:	2001      	movs	r0, #1
}
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006326:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006328:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800632a:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800632c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 800632e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006330:	f024 040e 	bic.w	r4, r4, #14
 8006334:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006336:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006338:	2601      	movs	r6, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800633a:	f024 0401 	bic.w	r4, r4, #1
 800633e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006340:	fa06 f101 	lsl.w	r1, r6, r1
    __HAL_UNLOCK(hdma);
 8006344:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006346:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006348:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800634c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006350:	b115      	cbz	r5, 8006358 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8006352:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	4620      	mov	r0, r4
}
 8006356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	4628      	mov	r0, r5
}
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800635c <HAL_DMA_IRQHandler>:
{
 800635c:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800635e:	e9d0 520f 	ldrd	r5, r2, [r0, #60]	; 0x3c
 8006362:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006364:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006366:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006368:	4093      	lsls	r3, r2
 800636a:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 800636c:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800636e:	d00a      	beq.n	8006386 <HAL_DMA_IRQHandler+0x2a>
 8006370:	f016 0f04 	tst.w	r6, #4
 8006374:	d007      	beq.n	8006386 <HAL_DMA_IRQHandler+0x2a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	0692      	lsls	r2, r2, #26
 800637a:	d537      	bpl.n	80063ec <HAL_DMA_IRQHandler+0x90>
  	if(hdma->XferHalfCpltCallback != NULL)
 800637c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800637e:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006380:	b1ca      	cbz	r2, 80063b6 <HAL_DMA_IRQHandler+0x5a>
}  
 8006382:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8006384:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006386:	2302      	movs	r3, #2
 8006388:	4093      	lsls	r3, r2
 800638a:	420b      	tst	r3, r1
 800638c:	d015      	beq.n	80063ba <HAL_DMA_IRQHandler+0x5e>
 800638e:	f016 0f02 	tst.w	r6, #2
 8006392:	d012      	beq.n	80063ba <HAL_DMA_IRQHandler+0x5e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	0692      	lsls	r2, r2, #26
 8006398:	d406      	bmi.n	80063a8 <HAL_DMA_IRQHandler+0x4c>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800639a:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800639c:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800639e:	f022 020a 	bic.w	r2, r2, #10
 80063a2:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80063a4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80063a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80063aa:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 80063ac:	2300      	movs	r3, #0
 80063ae:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d1e5      	bne.n	8006382 <HAL_DMA_IRQHandler+0x26>
}  
 80063b6:	bc70      	pop	{r4, r5, r6}
 80063b8:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80063ba:	2308      	movs	r3, #8
 80063bc:	4093      	lsls	r3, r2
 80063be:	420b      	tst	r3, r1
 80063c0:	d0f9      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x5a>
 80063c2:	0733      	lsls	r3, r6, #28
 80063c4:	d5f7      	bpl.n	80063b6 <HAL_DMA_IRQHandler+0x5a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063c6:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80063c8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063ca:	f023 030e 	bic.w	r3, r3, #14
 80063ce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80063d0:	2301      	movs	r3, #1
 80063d2:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80063d6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80063d8:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063da:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80063dc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80063e0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d0e6      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x5a>
}  
 80063e8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80063ea:	4708      	bx	r1
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	6022      	str	r2, [r4, #0]
 80063f4:	e7c2      	b.n	800637c <HAL_DMA_IRQHandler+0x20>
 80063f6:	bf00      	nop

080063f8 <HAL_DMA_RegisterCallback>:
{
 80063f8:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80063fa:	f890 0020 	ldrb.w	r0, [r0, #32]
 80063fe:	2801      	cmp	r0, #1
 8006400:	d01f      	beq.n	8006442 <HAL_DMA_RegisterCallback+0x4a>
{
 8006402:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 8006404:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006408:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800640a:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 800640c:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006410:	d005      	beq.n	800641e <HAL_DMA_RegisterCallback+0x26>
  __HAL_UNLOCK(hdma);
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641c:	4770      	bx	lr
    switch (CallbackID)
 800641e:	2903      	cmp	r1, #3
 8006420:	d811      	bhi.n	8006446 <HAL_DMA_RegisterCallback+0x4e>
 8006422:	e8df f001 	tbb	[pc, r1]
 8006426:	080b      	.short	0x080b
 8006428:	0205      	.short	0x0205
           hdma->XferAbortCallback = pCallback;
 800642a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	2000      	movs	r0, #0
           break; 
 800642e:	e7f0      	b.n	8006412 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferErrorCallback = pCallback;
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2000      	movs	r0, #0
           break;         
 8006434:	e7ed      	b.n	8006412 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferHalfCpltCallback = pCallback;
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2000      	movs	r0, #0
           break;         
 800643a:	e7ea      	b.n	8006412 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferCpltCallback = pCallback;
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800643e:	2000      	movs	r0, #0
           break;
 8006440:	e7e7      	b.n	8006412 <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 8006442:	2002      	movs	r0, #2
}
 8006444:	4770      	bx	lr
           status = HAL_ERROR;
 8006446:	2001      	movs	r0, #1
 8006448:	e7e3      	b.n	8006412 <HAL_DMA_RegisterCallback+0x1a>
 800644a:	bf00      	nop

0800644c <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 800644c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d012      	beq.n	800647a <HAL_DMA_UnRegisterCallback+0x2e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006454:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006458:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800645a:	429a      	cmp	r2, r3
  __HAL_LOCK(hdma);
 800645c:	f880 3020 	strb.w	r3, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006460:	d004      	beq.n	800646c <HAL_DMA_UnRegisterCallback+0x20>
  __HAL_UNLOCK(hdma);
 8006462:	2200      	movs	r2, #0
 8006464:	f880 2020 	strb.w	r2, [r0, #32]
}
 8006468:	4618      	mov	r0, r3
 800646a:	4770      	bx	lr
    switch (CallbackID)
 800646c:	2904      	cmp	r1, #4
 800646e:	d819      	bhi.n	80064a4 <HAL_DMA_UnRegisterCallback+0x58>
 8006470:	e8df f001 	tbb	[pc, r1]
 8006474:	15120f0c 	.word	0x15120f0c
 8006478:	06          	.byte	0x06
 8006479:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 800647a:	2302      	movs	r3, #2
}
 800647c:	4618      	mov	r0, r3
 800647e:	4770      	bx	lr
           hdma->XferCpltCallback = NULL;
 8006480:	2300      	movs	r3, #0
           hdma->XferHalfCpltCallback = NULL;
 8006482:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
           hdma->XferAbortCallback = NULL;
 8006486:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
           break; 
 800648a:	e7ea      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferCpltCallback = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	6283      	str	r3, [r0, #40]	; 0x28
           break;
 8006490:	e7e7      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferHalfCpltCallback = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	62c3      	str	r3, [r0, #44]	; 0x2c
           break;         
 8006496:	e7e4      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferErrorCallback = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	6303      	str	r3, [r0, #48]	; 0x30
           break;         
 800649c:	e7e1      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferAbortCallback = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	6343      	str	r3, [r0, #52]	; 0x34
           break; 
 80064a2:	e7de      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>
           status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e7dc      	b.n	8006462 <HAL_DMA_UnRegisterCallback+0x16>

080064a8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80064a8:	f8d1 c000 	ldr.w	ip, [r1]
 80064ac:	f1bc 0f00 	cmp.w	ip, #0
 80064b0:	f000 80d0 	beq.w	8006654 <HAL_GPIO_Init+0x1ac>
{
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064b8:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8006688 <HAL_GPIO_Init+0x1e0>
{
 80064bc:	b083      	sub	sp, #12
 80064be:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 80064c0:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80064c2:	f04f 0901 	mov.w	r9, #1
 80064c6:	fa09 f205 	lsl.w	r2, r9, r5
    if(iocurrent)
 80064ca:	ea12 060c 	ands.w	r6, r2, ip
 80064ce:	d077      	beq.n	80065c0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064d4:	f021 0a10 	bic.w	sl, r1, #16
 80064d8:	f1ba 0f02 	cmp.w	sl, #2
 80064dc:	d078      	beq.n	80065d0 <HAL_GPIO_Init+0x128>
 80064de:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064e0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80064e2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064e6:	40bb      	lsls	r3, r7
 80064e8:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064ea:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064ee:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064f2:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064f4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064f8:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064fc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8006500:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006502:	f240 8086 	bls.w	8006612 <HAL_GPIO_Init+0x16a>
      temp = GPIOx->PUPDR;
 8006506:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006508:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800650c:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800650e:	40ba      	lsls	r2, r7
 8006510:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006512:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 8006514:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006516:	d553      	bpl.n	80065c0 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006518:	4a54      	ldr	r2, [pc, #336]	; (800666c <HAL_GPIO_Init+0x1c4>)
 800651a:	6993      	ldr	r3, [r2, #24]
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	6193      	str	r3, [r2, #24]
 8006522:	6993      	ldr	r3, [r2, #24]
 8006524:	f025 0403 	bic.w	r4, r5, #3
 8006528:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006534:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8006536:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800653a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800653c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	230f      	movs	r3, #15
 8006542:	4093      	lsls	r3, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006544:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8006548:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800654c:	d016      	beq.n	800657c <HAL_GPIO_Init+0xd4>
 800654e:	4f48      	ldr	r7, [pc, #288]	; (8006670 <HAL_GPIO_Init+0x1c8>)
 8006550:	42b8      	cmp	r0, r7
 8006552:	d076      	beq.n	8006642 <HAL_GPIO_Init+0x19a>
 8006554:	4f47      	ldr	r7, [pc, #284]	; (8006674 <HAL_GPIO_Init+0x1cc>)
 8006556:	42b8      	cmp	r0, r7
 8006558:	d06e      	beq.n	8006638 <HAL_GPIO_Init+0x190>
 800655a:	4f47      	ldr	r7, [pc, #284]	; (8006678 <HAL_GPIO_Init+0x1d0>)
 800655c:	42b8      	cmp	r0, r7
 800655e:	d07a      	beq.n	8006656 <HAL_GPIO_Init+0x1ae>
 8006560:	4f46      	ldr	r7, [pc, #280]	; (800667c <HAL_GPIO_Init+0x1d4>)
 8006562:	42b8      	cmp	r0, r7
 8006564:	d07c      	beq.n	8006660 <HAL_GPIO_Init+0x1b8>
 8006566:	4f46      	ldr	r7, [pc, #280]	; (8006680 <HAL_GPIO_Init+0x1d8>)
 8006568:	42b8      	cmp	r0, r7
 800656a:	d06e      	beq.n	800664a <HAL_GPIO_Init+0x1a2>
 800656c:	4f45      	ldr	r7, [pc, #276]	; (8006684 <HAL_GPIO_Init+0x1dc>)
 800656e:	42b8      	cmp	r0, r7
 8006570:	bf0c      	ite	eq
 8006572:	2706      	moveq	r7, #6
 8006574:	2707      	movne	r7, #7
 8006576:	fa07 f202 	lsl.w	r2, r7, r2
 800657a:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 800657c:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
 800657e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8006582:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006584:	03cc      	lsls	r4, r1, #15
        temp &= ~((uint32_t)iocurrent);
 8006586:	bf54      	ite	pl
 8006588:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800658a:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 800658c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8006590:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006594:	038f      	lsls	r7, r1, #14
        temp &= ~((uint32_t)iocurrent);
 8006596:	bf54      	ite	pl
 8006598:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800659a:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 800659c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065a0:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065a4:	02cc      	lsls	r4, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80065a6:	bf54      	ite	pl
 80065a8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80065aa:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 80065ac:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80065b0:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065b4:	0289      	lsls	r1, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80065b6:	bf54      	ite	pl
 80065b8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80065ba:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 80065bc:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 80065c0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80065c2:	fa3c f305 	lsrs.w	r3, ip, r5
 80065c6:	f47f af7e 	bne.w	80064c6 <HAL_GPIO_Init+0x1e>
  }
}
 80065ca:	b003      	add	sp, #12
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3];
 80065d0:	08ef      	lsrs	r7, r5, #3
 80065d2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065d6:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80065da:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065dc:	00a4      	lsls	r4, r4, #2
 80065de:	f04f 0b0f 	mov.w	fp, #15
 80065e2:	fa0b fb04 	lsl.w	fp, fp, r4
 80065e6:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80065ee:	40a3      	lsls	r3, r4
 80065f0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80065f4:	623b      	str	r3, [r7, #32]
 80065f6:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80065fa:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065fe:	40bb      	lsls	r3, r7
 8006600:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006602:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006606:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800660a:	40bc      	lsls	r4, r7
 800660c:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 8006610:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8006612:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006614:	ea03 0a04 	and.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006618:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800661c:	40bc      	lsls	r4, r7
 800661e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 8006622:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8006624:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006628:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800662c:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006630:	40ac      	lsls	r4, r5
 8006632:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8006634:	6044      	str	r4, [r0, #4]
 8006636:	e766      	b.n	8006506 <HAL_GPIO_Init+0x5e>
 8006638:	2702      	movs	r7, #2
 800663a:	fa07 f202 	lsl.w	r2, r7, r2
 800663e:	4313      	orrs	r3, r2
 8006640:	e79c      	b.n	800657c <HAL_GPIO_Init+0xd4>
 8006642:	fa09 f202 	lsl.w	r2, r9, r2
 8006646:	4313      	orrs	r3, r2
 8006648:	e798      	b.n	800657c <HAL_GPIO_Init+0xd4>
 800664a:	2705      	movs	r7, #5
 800664c:	fa07 f202 	lsl.w	r2, r7, r2
 8006650:	4313      	orrs	r3, r2
 8006652:	e793      	b.n	800657c <HAL_GPIO_Init+0xd4>
 8006654:	4770      	bx	lr
 8006656:	2703      	movs	r7, #3
 8006658:	fa07 f202 	lsl.w	r2, r7, r2
 800665c:	4313      	orrs	r3, r2
 800665e:	e78d      	b.n	800657c <HAL_GPIO_Init+0xd4>
 8006660:	2704      	movs	r7, #4
 8006662:	fa07 f202 	lsl.w	r2, r7, r2
 8006666:	4313      	orrs	r3, r2
 8006668:	e788      	b.n	800657c <HAL_GPIO_Init+0xd4>
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000
 8006670:	48000400 	.word	0x48000400
 8006674:	48000800 	.word	0x48000800
 8006678:	48000c00 	.word	0x48000c00
 800667c:	48001000 	.word	0x48001000
 8006680:	48001400 	.word	0x48001400
 8006684:	48001800 	.word	0x48001800
 8006688:	40010400 	.word	0x40010400

0800668c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 800668c:	2900      	cmp	r1, #0
 800668e:	f000 8090 	beq.w	80067b2 <HAL_GPIO_DeInit+0x126>
{
 8006692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006696:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80067d0 <HAL_GPIO_DeInit+0x144>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800669a:	f8df b138 	ldr.w	fp, [pc, #312]	; 80067d4 <HAL_GPIO_DeInit+0x148>
  uint32_t position = 0x00U;
 800669e:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 80066a0:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066a4:	f04f 0a03 	mov.w	sl, #3
    iocurrent = GPIO_Pin & (1U << position);
 80066a8:	fa09 f503 	lsl.w	r5, r9, r3
    if (iocurrent)
 80066ac:	ea15 0c01 	ands.w	ip, r5, r1
 80066b0:	d045      	beq.n	800673e <HAL_GPIO_DeInit+0xb2>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b2:	005a      	lsls	r2, r3, #1
 80066b4:	6804      	ldr	r4, [r0, #0]
 80066b6:	fa0a f202 	lsl.w	r2, sl, r2
 80066ba:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066bc:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066be:	4014      	ands	r4, r2
 80066c0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80066c4:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066c6:	f003 0407 	and.w	r4, r3, #7
 80066ca:	f8d6 e020 	ldr.w	lr, [r6, #32]
 80066ce:	270f      	movs	r7, #15
 80066d0:	00a4      	lsls	r4, r4, #2
 80066d2:	fa07 f404 	lsl.w	r4, r7, r4
 80066d6:	ea2e 0404 	bic.w	r4, lr, r4
 80066da:	6234      	str	r4, [r6, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066dc:	6884      	ldr	r4, [r0, #8]
 80066de:	4014      	ands	r4, r2
 80066e0:	6084      	str	r4, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066e2:	6844      	ldr	r4, [r0, #4]
 80066e4:	ea24 0505 	bic.w	r5, r4, r5
 80066e8:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066ea:	68c5      	ldr	r5, [r0, #12]
 80066ec:	f023 0403 	bic.w	r4, r3, #3
 80066f0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80066f4:	402a      	ands	r2, r5
 80066f6:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80066fa:	60c2      	str	r2, [r0, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 80066fc:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8006700:	68a5      	ldr	r5, [r4, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006702:	0092      	lsls	r2, r2, #2
 8006704:	4097      	lsls	r7, r2
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006706:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 800670a:	ea05 0507 	and.w	r5, r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800670e:	d01c      	beq.n	800674a <HAL_GPIO_DeInit+0xbe>
 8006710:	4558      	cmp	r0, fp
 8006712:	d040      	beq.n	8006796 <HAL_GPIO_DeInit+0x10a>
 8006714:	4e29      	ldr	r6, [pc, #164]	; (80067bc <HAL_GPIO_DeInit+0x130>)
 8006716:	42b0      	cmp	r0, r6
 8006718:	d044      	beq.n	80067a4 <HAL_GPIO_DeInit+0x118>
 800671a:	4e29      	ldr	r6, [pc, #164]	; (80067c0 <HAL_GPIO_DeInit+0x134>)
 800671c:	42b0      	cmp	r0, r6
 800671e:	d045      	beq.n	80067ac <HAL_GPIO_DeInit+0x120>
 8006720:	4e28      	ldr	r6, [pc, #160]	; (80067c4 <HAL_GPIO_DeInit+0x138>)
 8006722:	42b0      	cmp	r0, r6
 8006724:	d03a      	beq.n	800679c <HAL_GPIO_DeInit+0x110>
 8006726:	4e28      	ldr	r6, [pc, #160]	; (80067c8 <HAL_GPIO_DeInit+0x13c>)
 8006728:	42b0      	cmp	r0, r6
 800672a:	d043      	beq.n	80067b4 <HAL_GPIO_DeInit+0x128>
 800672c:	4e27      	ldr	r6, [pc, #156]	; (80067cc <HAL_GPIO_DeInit+0x140>)
 800672e:	42b0      	cmp	r0, r6
 8006730:	bf0c      	ite	eq
 8006732:	2606      	moveq	r6, #6
 8006734:	2607      	movne	r6, #7
 8006736:	fa06 f202 	lsl.w	r2, r6, r2
 800673a:	4295      	cmp	r5, r2
 800673c:	d008      	beq.n	8006750 <HAL_GPIO_DeInit+0xc4>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 800673e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8006740:	fa31 f203 	lsrs.w	r2, r1, r3
 8006744:	d1b0      	bne.n	80066a8 <HAL_GPIO_DeInit+0x1c>
  }
}
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	2200      	movs	r2, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800674c:	4295      	cmp	r5, r2
 800674e:	d1f6      	bne.n	800673e <HAL_GPIO_DeInit+0xb2>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006750:	68a2      	ldr	r2, [r4, #8]
 8006752:	ea22 0707 	bic.w	r7, r2, r7
 8006756:	60a7      	str	r7, [r4, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006758:	f8d8 2000 	ldr.w	r2, [r8]
 800675c:	ea6f 0c0c 	mvn.w	ip, ip
 8006760:	ea02 020c 	and.w	r2, r2, ip
 8006764:	f8c8 2000 	str.w	r2, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006768:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800676c:	ea0c 0202 	and.w	r2, ip, r2
 8006770:	f8c8 2004 	str.w	r2, [r8, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006774:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006778:	ea0c 0202 	and.w	r2, ip, r2
 800677c:	f8c8 2008 	str.w	r2, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006780:	f8d8 200c 	ldr.w	r2, [r8, #12]
    position++;
 8006784:	3301      	adds	r3, #1
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006786:	ea0c 0202 	and.w	r2, ip, r2
 800678a:	f8c8 200c 	str.w	r2, [r8, #12]
  while ((GPIO_Pin >> position) != RESET)
 800678e:	fa31 f203 	lsrs.w	r2, r1, r3
 8006792:	d189      	bne.n	80066a8 <HAL_GPIO_DeInit+0x1c>
 8006794:	e7d7      	b.n	8006746 <HAL_GPIO_DeInit+0xba>
 8006796:	fa09 f202 	lsl.w	r2, r9, r2
 800679a:	e7d7      	b.n	800674c <HAL_GPIO_DeInit+0xc0>
 800679c:	2604      	movs	r6, #4
 800679e:	fa06 f202 	lsl.w	r2, r6, r2
 80067a2:	e7d3      	b.n	800674c <HAL_GPIO_DeInit+0xc0>
 80067a4:	2602      	movs	r6, #2
 80067a6:	fa06 f202 	lsl.w	r2, r6, r2
 80067aa:	e7cf      	b.n	800674c <HAL_GPIO_DeInit+0xc0>
 80067ac:	fa0a f202 	lsl.w	r2, sl, r2
 80067b0:	e7cc      	b.n	800674c <HAL_GPIO_DeInit+0xc0>
 80067b2:	4770      	bx	lr
 80067b4:	2605      	movs	r6, #5
 80067b6:	fa06 f202 	lsl.w	r2, r6, r2
 80067ba:	e7c7      	b.n	800674c <HAL_GPIO_DeInit+0xc0>
 80067bc:	48000800 	.word	0x48000800
 80067c0:	48000c00 	.word	0x48000c00
 80067c4:	48001000 	.word	0x48001000
 80067c8:	48001400 	.word	0x48001400
 80067cc:	48001800 	.word	0x48001800
 80067d0:	40010400 	.word	0x40010400
 80067d4:	48000400 	.word	0x48000400

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067dc:	6803      	ldr	r3, [r0, #0]
 80067de:	07df      	lsls	r7, r3, #31
{
 80067e0:	b083      	sub	sp, #12
 80067e2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e4:	d53d      	bpl.n	8006862 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80067e6:	49be      	ldr	r1, [pc, #760]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 80067e8:	684a      	ldr	r2, [r1, #4]
 80067ea:	f002 020c 	and.w	r2, r2, #12
 80067ee:	2a04      	cmp	r2, #4
 80067f0:	f000 810d 	beq.w	8006a0e <HAL_RCC_OscConfig+0x236>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067f4:	684a      	ldr	r2, [r1, #4]
 80067f6:	f002 020c 	and.w	r2, r2, #12
 80067fa:	2a08      	cmp	r2, #8
 80067fc:	f000 8100 	beq.w	8006a00 <HAL_RCC_OscConfig+0x228>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006800:	6863      	ldr	r3, [r4, #4]
 8006802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006806:	f000 8182 	beq.w	8006b0e <HAL_RCC_OscConfig+0x336>
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8199 	beq.w	8006b42 <HAL_RCC_OscConfig+0x36a>
 8006810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006814:	f000 82a1 	beq.w	8006d5a <HAL_RCC_OscConfig+0x582>
 8006818:	4bb1      	ldr	r3, [pc, #708]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006828:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682a:	f7fe fbb1 	bl	8004f90 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8006832:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006834:	4eaa      	ldr	r6, [pc, #680]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 8006836:	2501      	movs	r5, #1
 8006838:	e005      	b.n	8006846 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800683a:	f7fe fba9 	bl	8004f90 <HAL_GetTick>
 800683e:	1bc0      	subs	r0, r0, r7
 8006840:	2864      	cmp	r0, #100	; 0x64
 8006842:	f200 817a 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 8006846:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684a:	6832      	ldr	r2, [r6, #0]
 800684c:	fa98 f3a8 	rbit	r3, r8
 8006850:	fab3 f383 	clz	r3, r3
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	fa05 f303 	lsl.w	r3, r5, r3
 800685c:	4213      	tst	r3, r2
 800685e:	d0ec      	beq.n	800683a <HAL_RCC_OscConfig+0x62>
 8006860:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006862:	079e      	lsls	r6, r3, #30
 8006864:	d542      	bpl.n	80068ec <HAL_RCC_OscConfig+0x114>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006866:	4a9e      	ldr	r2, [pc, #632]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 8006868:	6851      	ldr	r1, [r2, #4]
 800686a:	f011 0f0c 	tst.w	r1, #12
 800686e:	f000 80ec 	beq.w	8006a4a <HAL_RCC_OscConfig+0x272>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006872:	6851      	ldr	r1, [r2, #4]
 8006874:	f001 010c 	and.w	r1, r1, #12
 8006878:	2908      	cmp	r1, #8
 800687a:	f000 80df 	beq.w	8006a3c <HAL_RCC_OscConfig+0x264>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800687e:	68e2      	ldr	r2, [r4, #12]
 8006880:	2a00      	cmp	r2, #0
 8006882:	f000 81b7 	beq.w	8006bf4 <HAL_RCC_OscConfig+0x41c>
 8006886:	2201      	movs	r2, #1
 8006888:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800688c:	fab3 f383 	clz	r3, r3
 8006890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006898:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689a:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 800689c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800689e:	f7fe fb77 	bl	8004f90 <HAL_GetTick>
 80068a2:	f04f 0802 	mov.w	r8, #2
 80068a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a8:	4d8d      	ldr	r5, [pc, #564]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 80068aa:	e005      	b.n	80068b8 <HAL_RCC_OscConfig+0xe0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ac:	f7fe fb70 	bl	8004f90 <HAL_GetTick>
 80068b0:	1bc0      	subs	r0, r0, r7
 80068b2:	2802      	cmp	r0, #2
 80068b4:	f200 8141 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 80068b8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068bc:	682a      	ldr	r2, [r5, #0]
 80068be:	fa98 f3a8 	rbit	r3, r8
 80068c2:	fab3 f383 	clz	r3, r3
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	fa06 f303 	lsl.w	r3, r6, r3
 80068ce:	4213      	tst	r3, r2
 80068d0:	d0ec      	beq.n	80068ac <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d2:	6829      	ldr	r1, [r5, #0]
 80068d4:	22f8      	movs	r2, #248	; 0xf8
 80068d6:	fa92 f2a2 	rbit	r2, r2
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	fab2 f282 	clz	r2, r2
 80068e0:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80068e4:	4093      	lsls	r3, r2
 80068e6:	430b      	orrs	r3, r1
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ec:	071d      	lsls	r5, r3, #28
 80068ee:	d421      	bmi.n	8006934 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f0:	0758      	lsls	r0, r3, #29
 80068f2:	d54e      	bpl.n	8006992 <HAL_RCC_OscConfig+0x1ba>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f4:	4b7a      	ldr	r3, [pc, #488]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	00d1      	lsls	r1, r2, #3
 80068fa:	f140 80e4 	bpl.w	8006ac6 <HAL_RCC_OscConfig+0x2ee>
    FlagStatus       pwrclkchanged = RESET;
 80068fe:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4d78      	ldr	r5, [pc, #480]	; (8006ae4 <HAL_RCC_OscConfig+0x30c>)
 8006904:	682a      	ldr	r2, [r5, #0]
 8006906:	05d2      	lsls	r2, r2, #23
 8006908:	f140 8107 	bpl.w	8006b1a <HAL_RCC_OscConfig+0x342>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	2b01      	cmp	r3, #1
 8006910:	f000 8196 	beq.w	8006c40 <HAL_RCC_OscConfig+0x468>
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8137 	beq.w	8006b88 <HAL_RCC_OscConfig+0x3b0>
 800691a:	2b05      	cmp	r3, #5
 800691c:	4b70      	ldr	r3, [pc, #448]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	f000 81b8 	beq.w	8006c94 <HAL_RCC_OscConfig+0x4bc>
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	621a      	str	r2, [r3, #32]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	f022 0204 	bic.w	r2, r2, #4
 8006930:	621a      	str	r2, [r3, #32]
 8006932:	e18a      	b.n	8006c4a <HAL_RCC_OscConfig+0x472>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006934:	6962      	ldr	r2, [r4, #20]
 8006936:	2a00      	cmp	r2, #0
 8006938:	f000 809e 	beq.w	8006a78 <HAL_RCC_OscConfig+0x2a0>
 800693c:	2201      	movs	r2, #1
 800693e:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8006942:	4b69      	ldr	r3, [pc, #420]	; (8006ae8 <HAL_RCC_OscConfig+0x310>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006944:	4e66      	ldr	r6, [pc, #408]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
      __HAL_RCC_LSI_ENABLE();
 8006946:	fab1 f181 	clz	r1, r1
 800694a:	440b      	add	r3, r1
 800694c:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694e:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8006950:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006952:	f7fe fb1d 	bl	8004f90 <HAL_GetTick>
 8006956:	f04f 0802 	mov.w	r8, #2
 800695a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800695c:	e005      	b.n	800696a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800695e:	f7fe fb17 	bl	8004f90 <HAL_GetTick>
 8006962:	1bc0      	subs	r0, r0, r7
 8006964:	2802      	cmp	r0, #2
 8006966:	f200 80e8 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 800696a:	fa98 f3a8 	rbit	r3, r8
 800696e:	fa98 f3a8 	rbit	r3, r8
 8006972:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006976:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006978:	fa98 f3a8 	rbit	r3, r8
 800697c:	fab3 f383 	clz	r3, r3
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	fa05 f303 	lsl.w	r3, r5, r3
 8006988:	4213      	tst	r3, r2
 800698a:	d0e8      	beq.n	800695e <HAL_RCC_OscConfig+0x186>
 800698c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698e:	0758      	lsls	r0, r3, #29
 8006990:	d4b0      	bmi.n	80068f4 <HAL_RCC_OscConfig+0x11c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006992:	69a3      	ldr	r3, [r4, #24]
 8006994:	b383      	cbz	r3, 80069f8 <HAL_RCC_OscConfig+0x220>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006996:	4d52      	ldr	r5, [pc, #328]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 8006998:	686a      	ldr	r2, [r5, #4]
 800699a:	f002 020c 	and.w	r2, r2, #12
 800699e:	2a08      	cmp	r2, #8
 80069a0:	d066      	beq.n	8006a70 <HAL_RCC_OscConfig+0x298>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069a8:	f000 817c 	beq.w	8006ca4 <HAL_RCC_OscConfig+0x4cc>
 80069ac:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b0:	fab3 f383 	clz	r3, r3
 80069b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fe fae5 	bl	8004f90 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80069c8:	4607      	mov	r7, r0
 80069ca:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ce:	2601      	movs	r6, #1
 80069d0:	e005      	b.n	80069de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d2:	f7fe fadd 	bl	8004f90 <HAL_GetTick>
 80069d6:	1bc0      	subs	r0, r0, r7
 80069d8:	2802      	cmp	r0, #2
 80069da:	f200 80ae 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 80069de:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	fa95 f3a5 	rbit	r3, r5
 80069e8:	fab3 f383 	clz	r3, r3
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa06 f303 	lsl.w	r3, r6, r3
 80069f4:	4213      	tst	r3, r2
 80069f6:	d1ec      	bne.n	80069d2 <HAL_RCC_OscConfig+0x1fa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80069f8:	2000      	movs	r0, #0
}
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a00:	684a      	ldr	r2, [r1, #4]
 8006a02:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8006a06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006a0a:	f47f aef9 	bne.w	8006800 <HAL_RCC_OscConfig+0x28>
 8006a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a12:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a16:	4932      	ldr	r1, [pc, #200]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 8006a18:	6808      	ldr	r0, [r1, #0]
 8006a1a:	fa92 f2a2 	rbit	r2, r2
 8006a1e:	fab2 f282 	clz	r2, r2
 8006a22:	f002 021f 	and.w	r2, r2, #31
 8006a26:	2101      	movs	r1, #1
 8006a28:	fa01 f202 	lsl.w	r2, r1, r2
 8006a2c:	4202      	tst	r2, r0
 8006a2e:	f43f af18 	beq.w	8006862 <HAL_RCC_OscConfig+0x8a>
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	f47f af14 	bne.w	8006862 <HAL_RCC_OscConfig+0x8a>
 8006a3a:	e019      	b.n	8006a70 <HAL_RCC_OscConfig+0x298>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a3c:	6852      	ldr	r2, [r2, #4]
 8006a3e:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8006a42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a46:	f47f af1a 	bne.w	800687e <HAL_RCC_OscConfig+0xa6>
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a50:	4923      	ldr	r1, [pc, #140]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
 8006a52:	6808      	ldr	r0, [r1, #0]
 8006a54:	fa92 f2a2 	rbit	r2, r2
 8006a58:	fab2 f282 	clz	r2, r2
 8006a5c:	f002 021f 	and.w	r2, r2, #31
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f202 	lsl.w	r2, r1, r2
 8006a66:	4202      	tst	r2, r0
 8006a68:	d040      	beq.n	8006aec <HAL_RCC_OscConfig+0x314>
 8006a6a:	68e2      	ldr	r2, [r4, #12]
 8006a6c:	428a      	cmp	r2, r1
 8006a6e:	d03d      	beq.n	8006aec <HAL_RCC_OscConfig+0x314>
        return HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
}
 8006a72:	b003      	add	sp, #12
 8006a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a78:	2501      	movs	r5, #1
 8006a7a:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <HAL_RCC_OscConfig+0x310>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	4e17      	ldr	r6, [pc, #92]	; (8006ae0 <HAL_RCC_OscConfig+0x308>)
      __HAL_RCC_LSI_DISABLE();
 8006a82:	fab1 f181 	clz	r1, r1
 8006a86:	440b      	add	r3, r1
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	f04f 0802 	mov.w	r8, #2
 8006a8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006a90:	f7fe fa7e 	bl	8004f90 <HAL_GetTick>
 8006a94:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a96:	e004      	b.n	8006aa2 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a98:	f7fe fa7a 	bl	8004f90 <HAL_GetTick>
 8006a9c:	1bc0      	subs	r0, r0, r7
 8006a9e:	2802      	cmp	r0, #2
 8006aa0:	d84b      	bhi.n	8006b3a <HAL_RCC_OscConfig+0x362>
 8006aa2:	fa98 f3a8 	rbit	r3, r8
 8006aa6:	fa98 f3a8 	rbit	r3, r8
 8006aaa:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006ab0:	fa98 f3a8 	rbit	r3, r8
 8006ab4:	fab3 f383 	clz	r3, r3
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	fa05 f303 	lsl.w	r3, r5, r3
 8006ac0:	4213      	tst	r3, r2
 8006ac2:	d1e9      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2c0>
 8006ac4:	e762      	b.n	800698c <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006acc:	61da      	str	r2, [r3, #28]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006ad8:	f04f 0801 	mov.w	r8, #1
 8006adc:	e711      	b.n	8006902 <HAL_RCC_OscConfig+0x12a>
 8006ade:	bf00      	nop
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	40007000 	.word	0x40007000
 8006ae8:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aec:	4da1      	ldr	r5, [pc, #644]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006aee:	21f8      	movs	r1, #248	; 0xf8
 8006af0:	6828      	ldr	r0, [r5, #0]
 8006af2:	fa91 f1a1 	rbit	r1, r1
 8006af6:	6922      	ldr	r2, [r4, #16]
 8006af8:	fab1 f181 	clz	r1, r1
 8006afc:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8006b00:	408a      	lsls	r2, r1
 8006b02:	4302      	orrs	r2, r0
 8006b04:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b06:	071d      	lsls	r5, r3, #28
 8006b08:	f57f aef2 	bpl.w	80068f0 <HAL_RCC_OscConfig+0x118>
 8006b0c:	e712      	b.n	8006934 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0e:	4a99      	ldr	r2, [pc, #612]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006b10:	6813      	ldr	r3, [r2, #0]
 8006b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e687      	b.n	800682a <HAL_RCC_OscConfig+0x52>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b1a:	682a      	ldr	r2, [r5, #0]
 8006b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b20:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8006b22:	f7fe fa35 	bl	8004f90 <HAL_GetTick>
 8006b26:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	05db      	lsls	r3, r3, #23
 8006b2c:	f53f aeee 	bmi.w	800690c <HAL_RCC_OscConfig+0x134>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b30:	f7fe fa2e 	bl	8004f90 <HAL_GetTick>
 8006b34:	1b80      	subs	r0, r0, r6
 8006b36:	2864      	cmp	r0, #100	; 0x64
 8006b38:	d9f6      	bls.n	8006b28 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8006b3a:	2003      	movs	r0, #3
}
 8006b3c:	b003      	add	sp, #12
 8006b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b42:	4d8c      	ldr	r5, [pc, #560]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006b54:	f7fe fa1c 	bl	8004f90 <HAL_GetTick>
 8006b58:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8006b5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5e:	2601      	movs	r6, #1
 8006b60:	e004      	b.n	8006b6c <HAL_RCC_OscConfig+0x394>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b62:	f7fe fa15 	bl	8004f90 <HAL_GetTick>
 8006b66:	1bc0      	subs	r0, r0, r7
 8006b68:	2864      	cmp	r0, #100	; 0x64
 8006b6a:	d8e6      	bhi.n	8006b3a <HAL_RCC_OscConfig+0x362>
 8006b6c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b70:	682a      	ldr	r2, [r5, #0]
 8006b72:	fa98 f3a8 	rbit	r3, r8
 8006b76:	fab3 f383 	clz	r3, r3
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	fa06 f303 	lsl.w	r3, r6, r3
 8006b82:	4213      	tst	r3, r2
 8006b84:	d1ed      	bne.n	8006b62 <HAL_RCC_OscConfig+0x38a>
 8006b86:	e66b      	b.n	8006860 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b88:	4d7a      	ldr	r5, [pc, #488]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006b8a:	6a2b      	ldr	r3, [r5, #32]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	622b      	str	r3, [r5, #32]
 8006b92:	6a2b      	ldr	r3, [r5, #32]
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8006b9a:	f7fe f9f9 	bl	8004f90 <HAL_GetTick>
 8006b9e:	f04f 0902 	mov.w	r9, #2
 8006ba2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba4:	2601      	movs	r6, #1
 8006ba6:	e013      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3f8>
 8006ba8:	fa99 f3a9 	rbit	r3, r9
 8006bac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006bae:	fa99 f3a9 	rbit	r3, r9
 8006bb2:	fab3 f383 	clz	r3, r3
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	fa06 f303 	lsl.w	r3, r6, r3
 8006bbe:	4213      	tst	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc2:	f7fe f9e5 	bl	8004f90 <HAL_GetTick>
 8006bc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bca:	1bc0      	subs	r0, r0, r7
 8006bcc:	4298      	cmp	r0, r3
 8006bce:	d8b4      	bhi.n	8006b3a <HAL_RCC_OscConfig+0x362>
 8006bd0:	fa99 f3a9 	rbit	r3, r9
 8006bd4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0e5      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x3d0>
 8006bdc:	6a2a      	ldr	r2, [r5, #32]
 8006bde:	e7e6      	b.n	8006bae <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	f43f aed5 	beq.w	8006992 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be8:	4a62      	ldr	r2, [pc, #392]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006bea:	69d3      	ldr	r3, [r2, #28]
 8006bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	61d3      	str	r3, [r2, #28]
 8006bf2:	e6ce      	b.n	8006992 <HAL_RCC_OscConfig+0x1ba>
 8006bf4:	2501      	movs	r5, #1
 8006bf6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8006bfa:	fab3 f383 	clz	r3, r3
 8006bfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	f04f 0802 	mov.w	r8, #2
 8006c0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006c0e:	f7fe f9bf 	bl	8004f90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c12:	4e58      	ldr	r6, [pc, #352]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8006c14:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c16:	e004      	b.n	8006c22 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c18:	f7fe f9ba 	bl	8004f90 <HAL_GetTick>
 8006c1c:	1bc0      	subs	r0, r0, r7
 8006c1e:	2802      	cmp	r0, #2
 8006c20:	d88b      	bhi.n	8006b3a <HAL_RCC_OscConfig+0x362>
 8006c22:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	6832      	ldr	r2, [r6, #0]
 8006c28:	fa98 f3a8 	rbit	r3, r8
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa05 f303 	lsl.w	r3, r5, r3
 8006c38:	4213      	tst	r3, r2
 8006c3a:	d1ed      	bne.n	8006c18 <HAL_RCC_OscConfig+0x440>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	e655      	b.n	80068ec <HAL_RCC_OscConfig+0x114>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c40:	4a4c      	ldr	r2, [pc, #304]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006c42:	6a13      	ldr	r3, [r2, #32]
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8006c4a:	f7fe f9a1 	bl	8004f90 <HAL_GetTick>
 8006c4e:	f04f 0902 	mov.w	r9, #2
 8006c52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c54:	4e47      	ldr	r6, [pc, #284]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
 8006c56:	2501      	movs	r5, #1
 8006c58:	e014      	b.n	8006c84 <HAL_RCC_OscConfig+0x4ac>
 8006c5a:	fa99 f3a9 	rbit	r3, r9
 8006c5e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006c60:	fa99 f3a9 	rbit	r3, r9
 8006c64:	fab3 f383 	clz	r3, r3
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	fa05 f303 	lsl.w	r3, r5, r3
 8006c70:	4213      	tst	r3, r2
 8006c72:	d1b5      	bne.n	8006be0 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c74:	f7fe f98c 	bl	8004f90 <HAL_GetTick>
 8006c78:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c7c:	1bc0      	subs	r0, r0, r7
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	f63f af5b 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 8006c84:	fa99 f3a9 	rbit	r3, r9
 8006c88:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0e4      	beq.n	8006c5a <HAL_RCC_OscConfig+0x482>
 8006c90:	6a32      	ldr	r2, [r6, #32]
 8006c92:	e7e5      	b.n	8006c60 <HAL_RCC_OscConfig+0x488>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c94:	f042 0204 	orr.w	r2, r2, #4
 8006c98:	621a      	str	r2, [r3, #32]
 8006c9a:	6a1a      	ldr	r2, [r3, #32]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	621a      	str	r2, [r3, #32]
 8006ca2:	e7d2      	b.n	8006c4a <HAL_RCC_OscConfig+0x472>
 8006ca4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006ca8:	fab3 f383 	clz	r3, r3
 8006cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006cba:	f7fe f969 	bl	8004f90 <HAL_GetTick>
 8006cbe:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8006cc2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cc4:	2601      	movs	r6, #1
 8006cc6:	e005      	b.n	8006cd4 <HAL_RCC_OscConfig+0x4fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fe f962 	bl	8004f90 <HAL_GetTick>
 8006ccc:	1bc0      	subs	r0, r0, r7
 8006cce:	2802      	cmp	r0, #2
 8006cd0:	f63f af33 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 8006cd4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd8:	682a      	ldr	r2, [r5, #0]
 8006cda:	fa98 f3a8 	rbit	r3, r8
 8006cde:	fab3 f383 	clz	r3, r3
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	fa06 f303 	lsl.w	r3, r6, r3
 8006cea:	4213      	tst	r3, r2
 8006cec:	d1ec      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cf2:	f023 030f 	bic.w	r3, r3, #15
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006cfa:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8006cfe:	686a      	ldr	r2, [r5, #4]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8006d06:	4313      	orrs	r3, r2
 8006d08:	606b      	str	r3, [r5, #4]
 8006d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d0e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006d12:	fab3 f383 	clz	r3, r3
 8006d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8006d24:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006d26:	f7fe f933 	bl	8004f90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d2a:	4e12      	ldr	r6, [pc, #72]	; (8006d74 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8006d2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d2e:	2501      	movs	r5, #1
 8006d30:	e005      	b.n	8006d3e <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d32:	f7fe f92d 	bl	8004f90 <HAL_GetTick>
 8006d36:	1bc0      	subs	r0, r0, r7
 8006d38:	2802      	cmp	r0, #2
 8006d3a:	f63f aefe 	bhi.w	8006b3a <HAL_RCC_OscConfig+0x362>
 8006d3e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d42:	6832      	ldr	r2, [r6, #0]
 8006d44:	fa94 f3a4 	rbit	r3, r4
 8006d48:	fab3 f383 	clz	r3, r3
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	fa05 f303 	lsl.w	r3, r5, r3
 8006d54:	4213      	tst	r3, r2
 8006d56:	d0ec      	beq.n	8006d32 <HAL_RCC_OscConfig+0x55a>
 8006d58:	e64e      	b.n	80069f8 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d5e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e55a      	b.n	800682a <HAL_RCC_OscConfig+0x52>
 8006d74:	40021000 	.word	0x40021000

08006d78 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006d78:	4a6f      	ldr	r2, [pc, #444]	; (8006f38 <HAL_RCC_ClockConfig+0x1c0>)
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	428b      	cmp	r3, r1
 8006d82:	d20b      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x24>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d84:	6813      	ldr	r3, [r2, #0]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	428b      	cmp	r3, r1
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x24>
    {
      return HAL_ERROR;
 8006d98:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8006d9a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	6803      	ldr	r3, [r0, #0]
{
 8006d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da2:	079c      	lsls	r4, r3, #30
 8006da4:	d506      	bpl.n	8006db4 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da6:	4c65      	ldr	r4, [pc, #404]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006da8:	6885      	ldr	r5, [r0, #8]
 8006daa:	6862      	ldr	r2, [r4, #4]
 8006dac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006db0:	432a      	orrs	r2, r5
 8006db2:	6062      	str	r2, [r4, #4]
 8006db4:	460e      	mov	r6, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db6:	07d9      	lsls	r1, r3, #31
 8006db8:	4604      	mov	r4, r0
 8006dba:	d532      	bpl.n	8006e22 <HAL_RCC_ClockConfig+0xaa>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dbc:	6842      	ldr	r2, [r0, #4]
 8006dbe:	2a01      	cmp	r2, #1
 8006dc0:	f000 80a5 	beq.w	8006f0e <HAL_RCC_ClockConfig+0x196>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dc4:	2a02      	cmp	r2, #2
 8006dc6:	bf0c      	ite	eq
 8006dc8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8006dcc:	2302      	movne	r3, #2
 8006dce:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd2:	495a      	ldr	r1, [pc, #360]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006dd4:	6808      	ldr	r0, [r1, #0]
 8006dd6:	fa93 f3a3 	rbit	r3, r3
 8006dda:	fab3 f383 	clz	r3, r3
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	2101      	movs	r1, #1
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	4203      	tst	r3, r0
 8006dea:	d02a      	beq.n	8006e42 <HAL_RCC_ClockConfig+0xca>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dec:	4d53      	ldr	r5, [pc, #332]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006dee:	686b      	ldr	r3, [r5, #4]
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8006df8:	f7fe f8ca 	bl	8004f90 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8006e00:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e02:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	d071      	beq.n	8006eec <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d106      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xa2>
 8006e0c:	e079      	b.n	8006f02 <HAL_RCC_ClockConfig+0x18a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e0e:	f7fe f8bf 	bl	8004f90 <HAL_GetTick>
 8006e12:	1bc0      	subs	r0, r0, r7
 8006e14:	4540      	cmp	r0, r8
 8006e16:	f200 808c 	bhi.w	8006f32 <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e1a:	686b      	ldr	r3, [r5, #4]
 8006e1c:	f013 0f0c 	tst.w	r3, #12
 8006e20:	d1f5      	bne.n	8006e0e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006e22:	4a45      	ldr	r2, [pc, #276]	; (8006f38 <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	42b3      	cmp	r3, r6
 8006e2c:	d90c      	bls.n	8006e48 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	4333      	orrs	r3, r6
 8006e36:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	42b3      	cmp	r3, r6
 8006e40:	d002      	beq.n	8006e48 <HAL_RCC_ClockConfig+0xd0>
      return HAL_ERROR;
 8006e42:	2001      	movs	r0, #1
}
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	075a      	lsls	r2, r3, #29
 8006e4c:	d506      	bpl.n	8006e5c <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4e:	493b      	ldr	r1, [pc, #236]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	68e0      	ldr	r0, [r4, #12]
 8006e52:	684a      	ldr	r2, [r1, #4]
 8006e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e58:	4302      	orrs	r2, r0
 8006e5a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	d507      	bpl.n	8006e70 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e60:	4a36      	ldr	r2, [pc, #216]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006e62:	6921      	ldr	r1, [r4, #16]
 8006e64:	6853      	ldr	r3, [r2, #4]
 8006e66:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e6e:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006e70:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006e72:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e74:	f003 010c 	and.w	r1, r3, #12
 8006e78:	2908      	cmp	r1, #8
 8006e7a:	d130      	bne.n	8006ede <HAL_RCC_ClockConfig+0x166>
 8006e7c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8006e80:	fa91 f1a1 	rbit	r1, r1
 8006e84:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e86:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e8c:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006e94:	40cb      	lsrs	r3, r1
 8006e96:	492a      	ldr	r1, [pc, #168]	; (8006f40 <HAL_RCC_ClockConfig+0x1c8>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006e98:	4c2a      	ldr	r4, [pc, #168]	; (8006f44 <HAL_RCC_ClockConfig+0x1cc>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8006e9c:	492a      	ldr	r1, [pc, #168]	; (8006f48 <HAL_RCC_ClockConfig+0x1d0>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006e9e:	fab0 f080 	clz	r0, r0
 8006ea2:	f002 020f 	and.w	r2, r2, #15
 8006ea6:	40c2      	lsrs	r2, r0
 8006ea8:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8006eaa:	fbb1 f1f2 	udiv	r1, r1, r2
 8006eae:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006eb4:	22f0      	movs	r2, #240	; 0xf0
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	fa92 f2a2 	rbit	r2, r2
 8006ebc:	fab2 f282 	clz	r2, r2
 8006ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec4:	40d3      	lsrs	r3, r2
 8006ec6:	4821      	ldr	r0, [pc, #132]	; (8006f4c <HAL_RCC_ClockConfig+0x1d4>)
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_RCC_ClockConfig+0x1d8>)
 8006eca:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ecc:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ece:	fa21 f303 	lsr.w	r3, r1, r3
 8006ed2:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ed4:	f7fe f834 	bl	8004f40 <HAL_InitTick>
  return HAL_OK;
 8006ed8:	2000      	movs	r0, #0
}
 8006eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8006ede:	491a      	ldr	r1, [pc, #104]	; (8006f48 <HAL_RCC_ClockConfig+0x1d0>)
 8006ee0:	e7e7      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee2:	f7fe f855 	bl	8004f90 <HAL_GetTick>
 8006ee6:	1bc0      	subs	r0, r0, r7
 8006ee8:	4540      	cmp	r0, r8
 8006eea:	d822      	bhi.n	8006f32 <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006eec:	686b      	ldr	r3, [r5, #4]
 8006eee:	f003 030c 	and.w	r3, r3, #12
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d1f5      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0x16a>
 8006ef6:	e794      	b.n	8006e22 <HAL_RCC_ClockConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef8:	f7fe f84a 	bl	8004f90 <HAL_GetTick>
 8006efc:	1bc0      	subs	r0, r0, r7
 8006efe:	4540      	cmp	r0, r8
 8006f00:	d817      	bhi.n	8006f32 <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f02:	686b      	ldr	r3, [r5, #4]
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d1f5      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x180>
 8006f0c:	e789      	b.n	8006e22 <HAL_RCC_ClockConfig+0xaa>
 8006f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f12:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f16:	4909      	ldr	r1, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	6809      	ldr	r1, [r1, #0]
 8006f1a:	fa93 f3a3 	rbit	r3, r3
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	420b      	tst	r3, r1
 8006f2c:	f47f af5e 	bne.w	8006dec <HAL_RCC_ClockConfig+0x74>
 8006f30:	e787      	b.n	8006e42 <HAL_RCC_ClockConfig+0xca>
          return HAL_TIMEOUT;
 8006f32:	2003      	movs	r0, #3
 8006f34:	e786      	b.n	8006e44 <HAL_RCC_ClockConfig+0xcc>
 8006f36:	bf00      	nop
 8006f38:	40022000 	.word	0x40022000
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	08011810 	.word	0x08011810
 8006f44:	08011820 	.word	0x08011820
 8006f48:	007a1200 	.word	0x007a1200
 8006f4c:	080119b8 	.word	0x080119b8
 8006f50:	20000004 	.word	0x20000004

08006f54 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006f54:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x4c>)
 8006f56:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006f58:	f003 010c 	and.w	r1, r3, #12
 8006f5c:	2908      	cmp	r1, #8
 8006f5e:	d001      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8006f60:	4810      	ldr	r0, [pc, #64]	; (8006fa4 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006f62:	4770      	bx	lr
{
 8006f64:	b430      	push	{r4, r5}
 8006f66:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8006f6a:	fa90 f0a0 	rbit	r0, r0
 8006f6e:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006f70:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006f74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f76:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006f7a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006f7e:	40c3      	lsrs	r3, r0
 8006f80:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006f82:	4d0a      	ldr	r5, [pc, #40]	; (8006fac <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006f84:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8006f86:	4c07      	ldr	r4, [pc, #28]	; (8006fa4 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006f88:	fab1 f181 	clz	r1, r1
 8006f8c:	f002 030f 	and.w	r3, r2, #15
 8006f90:	40cb      	lsrs	r3, r1
 8006f92:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8006f94:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f98:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8006f9a:	fb00 f003 	mul.w	r0, r0, r3
}
 8006f9e:	4770      	bx	lr
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	007a1200 	.word	0x007a1200
 8006fa8:	08011810 	.word	0x08011810
 8006fac:	08011820 	.word	0x08011820

08006fb0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8006fb0:	4b01      	ldr	r3, [pc, #4]	; (8006fb8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000004 	.word	0x20000004

08006fbc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006fbc:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	fa92 f2a2 	rbit	r2, r2
 8006fc8:	fab2 f282 	clz	r2, r2
 8006fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd0:	40d3      	lsrs	r3, r2
 8006fd2:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8006fd4:	4a04      	ldr	r2, [pc, #16]	; (8006fe8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	6810      	ldr	r0, [r2, #0]
}    
 8006fda:	40d8      	lsrs	r0, r3
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	080119c8 	.word	0x080119c8
 8006fe8:	20000004 	.word	0x20000004

08006fec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	fa92 f2a2 	rbit	r2, r2
 8006ff8:	fab2 f282 	clz	r2, r2
 8006ffc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007000:	40d3      	lsrs	r3, r2
 8007002:	4904      	ldr	r1, [pc, #16]	; (8007014 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8007004:	4a04      	ldr	r2, [pc, #16]	; (8007018 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007006:	5ccb      	ldrb	r3, [r1, r3]
 8007008:	6810      	ldr	r0, [r2, #0]
} 
 800700a:	40d8      	lsrs	r0, r3
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40021000 	.word	0x40021000
 8007014:	080119c8 	.word	0x080119c8
 8007018:	20000004 	.word	0x20000004

0800701c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800701c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007020:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007022:	6800      	ldr	r0, [r0, #0]
 8007024:	03c6      	lsls	r6, r0, #15
{
 8007026:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007028:	d53e      	bpl.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702a:	4ba0      	ldr	r3, [pc, #640]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	00d5      	lsls	r5, r2, #3
 8007030:	f140 80f3 	bpl.w	800721a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007034:	4d9e      	ldr	r5, [pc, #632]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007036:	682a      	ldr	r2, [r5, #0]
 8007038:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 800703a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800703e:	f140 80fc 	bpl.w	800723a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007042:	4d9a      	ldr	r5, [pc, #616]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007044:	6861      	ldr	r1, [r4, #4]
 8007046:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007048:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800704c:	d020      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800704e:	f401 7340 	and.w	r3, r1, #768	; 0x300
 8007052:	4293      	cmp	r3, r2
 8007054:	d01c      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007056:	6a29      	ldr	r1, [r5, #32]
 8007058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800705c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8007060:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007064:	4f93      	ldr	r7, [pc, #588]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8007066:	fab2 f282 	clz	r2, r2
 800706a:	443a      	add	r2, r7
 800706c:	0092      	lsls	r2, r2, #2
 800706e:	f04f 0c01 	mov.w	ip, #1
 8007072:	f8c2 c000 	str.w	ip, [r2]
 8007076:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800707a:	fab3 f383 	clz	r3, r3
 800707e:	443b      	add	r3, r7
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007086:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8007088:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800708a:	f100 80ea 	bmi.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x246>
 800708e:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007090:	4a86      	ldr	r2, [pc, #536]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007092:	6a13      	ldr	r3, [r2, #32]
 8007094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007098:	430b      	orrs	r3, r1
 800709a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800709c:	b11e      	cbz	r6, 80070a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800709e:	69d3      	ldr	r3, [r2, #28]
 80070a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a4:	61d3      	str	r3, [r2, #28]
 80070a6:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070a8:	07c3      	lsls	r3, r0, #31
 80070aa:	d506      	bpl.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ac:	4a7f      	ldr	r2, [pc, #508]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070ae:	68a1      	ldr	r1, [r4, #8]
 80070b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ba:	0787      	lsls	r7, r0, #30
 80070bc:	d506      	bpl.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070be:	4a7b      	ldr	r2, [pc, #492]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070c0:	68e1      	ldr	r1, [r4, #12]
 80070c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070cc:	0746      	lsls	r6, r0, #29
 80070ce:	d506      	bpl.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070d0:	4a76      	ldr	r2, [pc, #472]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070d2:	6921      	ldr	r1, [r4, #16]
 80070d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070d6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80070da:	430b      	orrs	r3, r1
 80070dc:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070de:	0685      	lsls	r5, r0, #26
 80070e0:	d506      	bpl.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070e2:	4a72      	ldr	r2, [pc, #456]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070e4:	69e1      	ldr	r1, [r4, #28]
 80070e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070e8:	f023 0310 	bic.w	r3, r3, #16
 80070ec:	430b      	orrs	r3, r1
 80070ee:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070f0:	0381      	lsls	r1, r0, #14
 80070f2:	d506      	bpl.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80070f4:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80070f8:	6853      	ldr	r3, [r2, #4]
 80070fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80070fe:	430b      	orrs	r3, r1
 8007100:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007102:	0642      	lsls	r2, r0, #25
 8007104:	d506      	bpl.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007106:	4a69      	ldr	r2, [pc, #420]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007108:	6a21      	ldr	r1, [r4, #32]
 800710a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800710c:	f023 0320 	bic.w	r3, r3, #32
 8007110:	430b      	orrs	r3, r1
 8007112:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007114:	0343      	lsls	r3, r0, #13
 8007116:	d506      	bpl.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007118:	4a64      	ldr	r2, [pc, #400]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800711a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800711c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	430b      	orrs	r3, r1
 8007124:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007126:	0707      	lsls	r7, r0, #28
 8007128:	d506      	bpl.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800712a:	4a60      	ldr	r2, [pc, #384]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800712c:	6961      	ldr	r1, [r4, #20]
 800712e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007130:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007134:	430b      	orrs	r3, r1
 8007136:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007138:	06c6      	lsls	r6, r0, #27
 800713a:	d506      	bpl.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800713c:	4a5b      	ldr	r2, [pc, #364]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800713e:	69a1      	ldr	r1, [r4, #24]
 8007140:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007142:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007146:	430b      	orrs	r3, r1
 8007148:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800714a:	0585      	lsls	r5, r0, #22
 800714c:	d506      	bpl.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800714e:	4a57      	ldr	r2, [pc, #348]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007150:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007152:	6853      	ldr	r3, [r2, #4]
 8007154:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007158:	430b      	orrs	r3, r1
 800715a:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800715c:	0601      	lsls	r1, r0, #24
 800715e:	d506      	bpl.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007160:	4a52      	ldr	r2, [pc, #328]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007162:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007164:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007166:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800716a:	430b      	orrs	r3, r1
 800716c:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800716e:	05c2      	lsls	r2, r0, #23
 8007170:	d506      	bpl.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007172:	4a4e      	ldr	r2, [pc, #312]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007174:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007176:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007178:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800717c:	430b      	orrs	r3, r1
 800717e:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007180:	04c3      	lsls	r3, r0, #19
 8007182:	d506      	bpl.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007184:	4a49      	ldr	r2, [pc, #292]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007188:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800718a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800718e:	430b      	orrs	r3, r1
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007192:	0487      	lsls	r7, r0, #18
 8007194:	d506      	bpl.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007196:	4a45      	ldr	r2, [pc, #276]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007198:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800719a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800719c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a0:	430b      	orrs	r3, r1
 80071a2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80071a4:	02c6      	lsls	r6, r0, #11
 80071a6:	d506      	bpl.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80071a8:	4a40      	ldr	r2, [pc, #256]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b2:	430b      	orrs	r3, r1
 80071b4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80071b6:	0285      	lsls	r5, r0, #10
 80071b8:	d506      	bpl.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80071ba:	4a3c      	ldr	r2, [pc, #240]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071c4:	430b      	orrs	r3, r1
 80071c6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80071c8:	0241      	lsls	r1, r0, #9
 80071ca:	d506      	bpl.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80071cc:	4a37      	ldr	r2, [pc, #220]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d6:	430b      	orrs	r3, r1
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80071da:	0202      	lsls	r2, r0, #8
 80071dc:	d506      	bpl.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80071de:	4a33      	ldr	r2, [pc, #204]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80071ec:	01c3      	lsls	r3, r0, #7
 80071ee:	d506      	bpl.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80071f0:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80071fe:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007202:	d007      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007204:	4a29      	ldr	r2, [pc, #164]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007206:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007208:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800720a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800720e:	430b      	orrs	r3, r1
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007212:	2000      	movs	r0, #0
}
 8007214:	b003      	add	sp, #12
 8007216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800721a:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800721c:	4d24      	ldr	r5, [pc, #144]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007222:	61da      	str	r2, [r3, #28]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800722e:	682a      	ldr	r2, [r5, #0]
 8007230:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 8007232:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007236:	f53f af04 	bmi.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800723a:	682a      	ldr	r2, [r5, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007240:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8007242:	f7fd fea5 	bl	8004f90 <HAL_GetTick>
 8007246:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	05d9      	lsls	r1, r3, #23
 800724c:	f53f aef9 	bmi.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007250:	f7fd fe9e 	bl	8004f90 <HAL_GetTick>
 8007254:	1bc0      	subs	r0, r0, r7
 8007256:	2864      	cmp	r0, #100	; 0x64
 8007258:	d9f6      	bls.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x22c>
          return HAL_TIMEOUT;
 800725a:	2003      	movs	r0, #3
}
 800725c:	b003      	add	sp, #12
 800725e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007262:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 8007264:	f7fd fe94 	bl	8004f90 <HAL_GetTick>
 8007268:	f04f 0902 	mov.w	r9, #2
 800726c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726e:	e015      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007270:	fa99 f3a9 	rbit	r3, r9
 8007274:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007276:	fa99 f3a9 	rbit	r3, r9
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	fa07 f303 	lsl.w	r3, r7, r3
 8007286:	4213      	tst	r3, r2
 8007288:	f47f af01 	bne.w	800708e <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fd fe80 	bl	8004f90 <HAL_GetTick>
 8007290:	f241 3388 	movw	r3, #5000	; 0x1388
 8007294:	eba0 0008 	sub.w	r0, r0, r8
 8007298:	4298      	cmp	r0, r3
 800729a:	d8de      	bhi.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800729c:	fa99 f3a9 	rbit	r3, r9
 80072a0:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0e3      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80072a8:	6a2a      	ldr	r2, [r5, #32]
 80072aa:	e7e4      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80072ac:	40021000 	.word	0x40021000
 80072b0:	40007000 	.word	0x40007000
 80072b4:	10908100 	.word	0x10908100

080072b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072b8:	b470      	push	{r4, r5, r6}
  uint32_t frequency = 0U;
  uint32_t srcclk = 0U;
#if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 80072ba:	4db5      	ldr	r5, [pc, #724]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
{
 80072bc:	4606      	mov	r6, r0
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 80072be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 80072c0:	b087      	sub	sp, #28
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 80072c2:	466c      	mov	r4, sp
 80072c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c6:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80072ca:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 80072ce:	e884 0003 	stmia.w	r4, {r0, r1}
  switch (PeriphClk)
 80072d2:	f000 810d 	beq.w	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80072d6:	d816      	bhi.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 80072d8:	2e10      	cmp	r6, #16
 80072da:	f000 810e 	beq.w	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80072de:	d93e      	bls.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80072e0:	2e80      	cmp	r6, #128	; 0x80
 80072e2:	f000 80d3 	beq.w	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80072e6:	f200 8089 	bhi.w	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80072ea:	2e20      	cmp	r6, #32
 80072ec:	f000 8122 	beq.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80072f0:	2e40      	cmp	r6, #64	; 0x40
 80072f2:	d130      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    }
#if defined(RCC_CFGR3_I2C2SW)
  case RCC_PERIPHCLK_I2C2:
    {
      /* Get the current I2C2 source */
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80072f4:	4ba7      	ldr	r3, [pc, #668]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80072f6:	6b18      	ldr	r0, [r3, #48]	; 0x30

      /* Check if HSI is ready and if I2C2 clock selection is HSI */
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80072f8:	f010 0020 	ands.w	r0, r0, #32
 80072fc:	d059      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
    {
      break;
    }
  }
  return(frequency);
}
 80072fe:	b007      	add	sp, #28
 8007300:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetSysClockFreq();
 8007302:	f7ff be27 	b.w	8006f54 <HAL_RCC_GetSysClockFreq>
  switch (PeriphClk)
 8007306:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 800730a:	f000 810e 	beq.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800730e:	d93f      	bls.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007310:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8007314:	f000 80b1 	beq.w	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007318:	d852      	bhi.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800731a:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 800731e:	f000 80e2 	beq.w	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8007322:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8007326:	d116      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8007328:	4b9a      	ldr	r3, [pc, #616]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800732a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800732c:	0556      	lsls	r6, r2, #21
 800732e:	f140 80a8 	bpl.w	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007332:	e050      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007334:	4a97      	ldr	r2, [pc, #604]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007336:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007338:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 800733c:	f000 80cf 	beq.w	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007340:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007344:	f000 8161 	beq.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800734c:	d0d7      	beq.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800734e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007352:	f000 8089 	beq.w	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        frequency = 0U;
 8007356:	2000      	movs	r0, #0
}
 8007358:	b007      	add	sp, #28
 800735a:	bc70      	pop	{r4, r5, r6}
 800735c:	4770      	bx	lr
  switch (PeriphClk)
 800735e:	2e02      	cmp	r6, #2
 8007360:	f000 80ef 	beq.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007364:	d972      	bls.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007366:	2e04      	cmp	r6, #4
 8007368:	d0e4      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800736a:	2e08      	cmp	r6, #8
 800736c:	d1f3      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800736e:	4b89      	ldr	r3, [pc, #548]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007372:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8007376:	f000 80b2 	beq.w	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800737a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800737e:	f000 8157 	beq.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007386:	d0ba      	beq.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800738c:	d06c      	beq.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800738e:	e7e2      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  switch (PeriphClk)
 8007390:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8007394:	f000 8124 	beq.w	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007398:	d93e      	bls.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800739a:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 800739e:	f000 8101 	beq.w	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80073a2:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80073a6:	d1d6      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80073a8:	4b7a      	ldr	r3, [pc, #488]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80073aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80073ac:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80073b0:	d1a5      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80073b2:	681a      	ldr	r2, [r3, #0]
        frequency = HSI_VALUE;
 80073b4:	4b78      	ldr	r3, [pc, #480]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80073b6:	f012 0f02 	tst.w	r2, #2
 80073ba:	bf18      	it	ne
 80073bc:	4618      	movne	r0, r3
 80073be:	e7cb      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 80073c0:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 80073c4:	f000 80dd 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 80073c8:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80073cc:	d1c3      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 80073ce:	4b71      	ldr	r3, [pc, #452]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80073d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80073d2:	0410      	lsls	r0, r2, #16
 80073d4:	d555      	bpl.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	0199      	lsls	r1, r3, #6
 80073da:	d5bc      	bpl.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80073dc:	4a6d      	ldr	r2, [pc, #436]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
    pllclk = (HSE_VALUE/prediv) * pllmul;
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80073de:	486e      	ldr	r0, [pc, #440]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80073e0:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80073e2:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80073e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 80073e6:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80073ea:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 80073ee:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80073f0:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80073f2:	fbb0 f0f2 	udiv	r0, r0, r2
 80073f6:	fb00 f003 	mul.w	r0, r0, r3
 80073fa:	e7ad      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 80073fc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8007400:	f000 80af 	beq.w	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8007404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007408:	d1a5      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800740a:	4b62      	ldr	r3, [pc, #392]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800740c:	685b      	ldr	r3, [r3, #4]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 800740e:	021c      	lsls	r4, r3, #8
 8007410:	f57f af75 	bpl.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        frequency = 0xDEADDEADU;
 8007414:	4861      	ldr	r0, [pc, #388]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007416:	e79f      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8007418:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800741c:	d19b      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 800741e:	4b5d      	ldr	r3, [pc, #372]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007422:	0592      	lsls	r2, r2, #22
 8007424:	d52d      	bpl.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800742c:	d094      	beq.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800742e:	685a      	ldr	r2, [r3, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8007430:	6859      	ldr	r1, [r3, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007434:	4858      	ldr	r0, [pc, #352]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  pllmul = ( pllmul >> 18U) + 2U;
 8007436:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800743a:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800743c:	f001 020f 	and.w	r2, r1, #15
 8007440:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007442:	fbb0 f0f2 	udiv	r0, r0, r2
 8007446:	fb00 f003 	mul.w	r0, r0, r3
 800744a:	e785      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 800744c:	2e01      	cmp	r6, #1
 800744e:	d182      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007450:	4a50      	ldr	r2, [pc, #320]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007452:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007454:	f013 0303 	ands.w	r3, r3, #3
 8007458:	f000 80e6 	beq.w	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800745c:	2b03      	cmp	r3, #3
 800745e:	f000 80d4 	beq.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007462:	2b01      	cmp	r3, #1
 8007464:	f43f af4b 	beq.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007468:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
        frequency = LSE_VALUE;
 800746c:	f013 0f02 	tst.w	r3, #2
 8007470:	bf0c      	ite	eq
 8007472:	2000      	moveq	r0, #0
 8007474:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007478:	e76e      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 800747a:	4b46      	ldr	r3, [pc, #280]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800747c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800747e:	0515      	lsls	r5, r2, #20
 8007480:	d4d1      	bmi.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = SystemCoreClock;
 8007482:	4b47      	ldr	r3, [pc, #284]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007484:	6818      	ldr	r0, [r3, #0]
}
 8007486:	b007      	add	sp, #28
 8007488:	bc70      	pop	{r4, r5, r6}
 800748a:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800748c:	4a41      	ldr	r2, [pc, #260]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800748e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 8007490:	f413 73f8 	ands.w	r3, r3, #496	; 0x1f0
 8007494:	d0f5      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007496:	6810      	ldr	r0, [r2, #0]
 8007498:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800749c:	f43f af5c 	beq.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80074a0:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80074a2:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80074a4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80074a6:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80074aa:	fa92 f2a2 	rbit	r2, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 80074ae:	fab2 f282 	clz	r2, r2
 80074b2:	40d3      	lsrs	r3, r2
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	aa06      	add	r2, sp, #24
 80074ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 80074be:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80074c2:	3202      	adds	r2, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80074c4:	f000 010f 	and.w	r1, r0, #15
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 80074c8:	f833 4c18 	ldrh.w	r4, [r3, #-24]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80074cc:	4832      	ldr	r0, [pc, #200]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80074ce:	1c4b      	adds	r3, r1, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80074d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80074d4:	fb00 f002 	mul.w	r0, r0, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 80074d8:	fbb0 f0f4 	udiv	r0, r0, r4
 80074dc:	e73c      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
}
 80074de:	b007      	add	sp, #28
 80074e0:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetPCLK1Freq();
 80074e2:	f7ff bd6b 	b.w	8006fbc <HAL_RCC_GetPCLK1Freq>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 80074e6:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80074ea:	0192      	lsls	r2, r2, #6
 80074ec:	d5c9      	bpl.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80074ee:	e79a      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80074f4:	05d0      	lsls	r0, r2, #23
 80074f6:	d5c4      	bpl.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80074f8:	e795      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80074fa:	4a26      	ldr	r2, [pc, #152]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80074fe:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8007502:	d0ec      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007508:	d07f      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800750a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750e:	f43f aef6 	beq.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007516:	f47f af1e 	bne.w	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800751a:	6a13      	ldr	r3, [r2, #32]
        frequency = LSE_VALUE;
 800751c:	f013 0f02 	tst.w	r3, #2
 8007520:	bf0c      	ite	eq
 8007522:	2000      	moveq	r0, #0
 8007524:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007528:	e716      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 800752a:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800752c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800752e:	01d1      	lsls	r1, r2, #7
 8007530:	d5a7      	bpl.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007532:	e778      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007536:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007538:	f010 0010 	ands.w	r0, r0, #16
 800753c:	f47f aedf 	bne.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007540:	e737      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007542:	4a14      	ldr	r2, [pc, #80]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007544:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007546:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 800754a:	d0c8      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800754c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007550:	d05b      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007556:	f43f aed2 	beq.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800755a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800755e:	d0dc      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007560:	e6f9      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 8007562:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007564:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 8007566:	f413 5378 	ands.w	r3, r3, #15872	; 0x3e00
 800756a:	d08a      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800756c:	6810      	ldr	r0, [r2, #0]
 800756e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007572:	f43f aef1 	beq.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007576:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8007578:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800757a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800757c:	f44f 5278 	mov.w	r2, #15872	; 0x3e00
 8007580:	e793      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8007582:	4b04      	ldr	r3, [pc, #16]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007586:	0494      	lsls	r4, r2, #18
 8007588:	f57f af7b 	bpl.w	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800758c:	e74b      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 800758e:	bf00      	nop
 8007590:	08011454 	.word	0x08011454
 8007594:	40021000 	.word	0x40021000
 8007598:	007a1200 	.word	0x007a1200
 800759c:	deaddead 	.word	0xdeaddead
 80075a0:	20000004 	.word	0x20000004
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80075ac:	f43f aed4 	beq.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80075b0:	685a      	ldr	r2, [r3, #4]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80075b2:	4824      	ldr	r0, [pc, #144]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 80075b4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80075b8:	685a      	ldr	r2, [r3, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80075ba:	6859      	ldr	r1, [r3, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80075bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 80075be:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80075c2:	f103 0302 	add.w	r3, r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80075c6:	f001 020f 	and.w	r2, r1, #15
 80075ca:	f102 0201 	add.w	r2, r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80075ce:	fbb0 f0f2 	udiv	r0, r0, r2
 80075d2:	fb00 f003 	mul.w	r0, r0, r3
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 80075d6:	bf04      	itt	eq
 80075d8:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 80075dc:	0840      	lsreq	r0, r0, #1
 80075de:	e6bb      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80075e0:	4a17      	ldr	r2, [pc, #92]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 80075e2:	6a13      	ldr	r3, [r2, #32]
 80075e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80075e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ec:	d095      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80075ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f2:	d011      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80075f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f8:	f47f aead 	bne.w	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80075fc:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 32U;
 80075fe:	4812      	ldr	r0, [pc, #72]	; (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x390>)
 8007600:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007604:	bf08      	it	eq
 8007606:	2000      	moveq	r0, #0
 8007608:	e6a6      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800760a:	6813      	ldr	r3, [r2, #0]
        frequency = HSI_VALUE;
 800760c:	480d      	ldr	r0, [pc, #52]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800760e:	f013 0f02 	tst.w	r3, #2
 8007612:	bf08      	it	eq
 8007614:	2000      	moveq	r0, #0
 8007616:	e69f      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007618:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800761a:	f013 0f02 	tst.w	r3, #2
 800761e:	f649 4040 	movw	r0, #40000	; 0x9c40
 8007622:	bf08      	it	eq
 8007624:	2000      	moveq	r0, #0
 8007626:	e697      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
}
 8007628:	b007      	add	sp, #28
 800762a:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetPCLK2Freq();
 800762c:	f7ff bcde 	b.w	8006fec <HAL_RCC_GetPCLK2Freq>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
        frequency = HSI_VALUE;
 8007632:	4804      	ldr	r0, [pc, #16]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007634:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 8007636:	f013 0f02 	tst.w	r3, #2
 800763a:	bf08      	it	eq
 800763c:	2000      	moveq	r0, #0
 800763e:	e68b      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8007640:	40021000 	.word	0x40021000
 8007644:	007a1200 	.word	0x007a1200
 8007648:	0003d090 	.word	0x0003d090

0800764c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800764c:	2800      	cmp	r0, #0
 800764e:	d076      	beq.n	800773e <HAL_TIM_Base_Init+0xf2>
{ 
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007652:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007656:	4604      	mov	r4, r0
 8007658:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800765c:	b39b      	cbz	r3, 80076c6 <HAL_TIM_Base_Init+0x7a>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800765e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007660:	4e43      	ldr	r6, [pc, #268]	; (8007770 <HAL_TIM_Base_Init+0x124>)
 8007662:	69a5      	ldr	r5, [r4, #24]
 8007664:	68e0      	ldr	r0, [r4, #12]
 8007666:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007668:	2302      	movs	r3, #2
 800766a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800766e:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007670:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007672:	d066      	beq.n	8007742 <HAL_TIM_Base_Init+0xf6>
 8007674:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007678:	d043      	beq.n	8007702 <HAL_TIM_Base_Init+0xb6>
 800767a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800767e:	42b2      	cmp	r2, r6
 8007680:	d026      	beq.n	80076d0 <HAL_TIM_Base_Init+0x84>
 8007682:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007686:	42b2      	cmp	r2, r6
 8007688:	d022      	beq.n	80076d0 <HAL_TIM_Base_Init+0x84>
 800768a:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800768e:	42b2      	cmp	r2, r6
 8007690:	d01e      	beq.n	80076d0 <HAL_TIM_Base_Init+0x84>
 8007692:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007696:	42b2      	cmp	r2, r6
 8007698:	d064      	beq.n	8007764 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800769a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 800769e:	42b2      	cmp	r2, r6
 80076a0:	d05e      	beq.n	8007760 <HAL_TIM_Base_Init+0x114>
 80076a2:	4e34      	ldr	r6, [pc, #208]	; (8007774 <HAL_TIM_Base_Init+0x128>)
 80076a4:	42b2      	cmp	r2, r6
 80076a6:	d05b      	beq.n	8007760 <HAL_TIM_Base_Init+0x114>
 80076a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076ac:	42b2      	cmp	r2, r6
 80076ae:	d057      	beq.n	8007760 <HAL_TIM_Base_Init+0x114>
 80076b0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80076b4:	42b2      	cmp	r2, r6
 80076b6:	d053      	beq.n	8007760 <HAL_TIM_Base_Init+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076bc:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80076be:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c0:	62d0      	str	r0, [r2, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80076c2:	6291      	str	r1, [r2, #40]	; 0x28
 80076c4:	e017      	b.n	80076f6 <HAL_TIM_Base_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 80076c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80076ca:	f004 fd37 	bl	800c13c <HAL_TIM_Base_MspInit>
 80076ce:	e7c6      	b.n	800765e <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80076d0:	68a6      	ldr	r6, [r4, #8]
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80076d2:	4f29      	ldr	r7, [pc, #164]	; (8007778 <HAL_TIM_Base_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80076d8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076da:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e6:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80076e8:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80076ea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076ec:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80076ee:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80076f0:	d115      	bne.n	800771e <HAL_TIM_Base_Init+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076f2:	6963      	ldr	r3, [r4, #20]
 80076f4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80076f6:	2301      	movs	r3, #1
 80076f8:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80076fa:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80076fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007702:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007704:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800770a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800770c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007710:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007716:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007718:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800771a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800771c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800771e:	4b17      	ldr	r3, [pc, #92]	; (800777c <HAL_TIM_Base_Init+0x130>)
 8007720:	429a      	cmp	r2, r3
 8007722:	d0e6      	beq.n	80076f2 <HAL_TIM_Base_Init+0xa6>
 8007724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007728:	429a      	cmp	r2, r3
 800772a:	d0e2      	beq.n	80076f2 <HAL_TIM_Base_Init+0xa6>
 800772c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007730:	429a      	cmp	r2, r3
 8007732:	d0de      	beq.n	80076f2 <HAL_TIM_Base_Init+0xa6>
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	429a      	cmp	r2, r3
 800773a:	d1dc      	bne.n	80076f6 <HAL_TIM_Base_Init+0xaa>
 800773c:	e7d9      	b.n	80076f2 <HAL_TIM_Base_Init+0xa6>
    return HAL_ERROR;
 800773e:	2001      	movs	r0, #1
}
 8007740:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007742:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007744:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800774a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800774c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007750:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007756:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007758:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800775a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800775c:	6291      	str	r1, [r2, #40]	; 0x28
 800775e:	e7c8      	b.n	80076f2 <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007760:	6926      	ldr	r6, [r4, #16]
 8007762:	e7f3      	b.n	800774c <HAL_TIM_Base_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007764:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800776a:	4333      	orrs	r3, r6
 800776c:	e799      	b.n	80076a2 <HAL_TIM_Base_Init+0x56>
 800776e:	bf00      	nop
 8007770:	40012c00 	.word	0x40012c00
 8007774:	40014400 	.word	0x40014400
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000

08007780 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8007782:	6803      	ldr	r3, [r0, #0]
{
 8007784:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8007786:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800778a:	6a19      	ldr	r1, [r3, #32]
 800778c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007790:	4211      	tst	r1, r2
{
 8007792:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8007794:	d108      	bne.n	80077a8 <HAL_TIM_Base_DeInit+0x28>
 8007796:	6a19      	ldr	r1, [r3, #32]
 8007798:	f240 4244 	movw	r2, #1092	; 0x444
 800779c:	4211      	tst	r1, r2
 800779e:	d103      	bne.n	80077a8 <HAL_TIM_Base_DeInit+0x28>
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 80077a8:	4620      	mov	r0, r4
 80077aa:	f004 fea7 	bl	800c4fc <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 80077ae:	2000      	movs	r0, #0
 80077b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80077b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop

080077bc <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 80077bc:	6801      	ldr	r1, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80077be:	2202      	movs	r2, #2
{
 80077c0:	b410      	push	{r4}
  htim->State= HAL_TIM_STATE_BUSY;
 80077c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80077c6:	680a      	ldr	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 80077c8:	2401      	movs	r4, #1
{
 80077ca:	4603      	mov	r3, r0
  __HAL_TIM_ENABLE(htim);
 80077cc:	4322      	orrs	r2, r4
 80077ce:	600a      	str	r2, [r1, #0]
}
 80077d0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80077d2:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
}
 80077d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 80077dc:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 80077de:	6803      	ldr	r3, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80077e0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80077e4:	6a19      	ldr	r1, [r3, #32]
 80077e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80077ea:	4211      	tst	r1, r2
 80077ec:	d108      	bne.n	8007800 <HAL_TIM_Base_Stop+0x24>
 80077ee:	6a19      	ldr	r1, [r3, #32]
 80077f0:	f240 4244 	movw	r2, #1092	; 0x444
 80077f4:	4211      	tst	r1, r2
 80077f6:	d103      	bne.n	8007800 <HAL_TIM_Base_Stop+0x24>
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f022 0201 	bic.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8007800:	2301      	movs	r3, #1
 8007802:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007806:	2000      	movs	r0, #0
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800780c:	6803      	ldr	r3, [r0, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	f042 0201 	orr.w	r2, r2, #1
 8007814:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	f042 0201 	orr.w	r2, r2, #1
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	2000      	movs	r0, #0
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop

08007824 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	6803      	ldr	r3, [r0, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800782e:	6a19      	ldr	r1, [r3, #32]
 8007830:	f241 1211 	movw	r2, #4369	; 0x1111
 8007834:	4211      	tst	r1, r2
 8007836:	d108      	bne.n	800784a <HAL_TIM_Base_Stop_IT+0x26>
 8007838:	6a19      	ldr	r1, [r3, #32]
 800783a:	f240 4244 	movw	r2, #1092	; 0x444
 800783e:	4211      	tst	r1, r2
 8007840:	d103      	bne.n	800784a <HAL_TIM_Base_Stop_IT+0x26>
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
}
 800784a:	2000      	movs	r0, #0
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop

08007850 <HAL_TIM_OC_MspInit>:
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8007854:	2800      	cmp	r0, #0
 8007856:	d076      	beq.n	8007946 <HAL_TIM_OC_Init+0xf2>
{
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 800785a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800785e:	4604      	mov	r4, r0
 8007860:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007864:	b39b      	cbz	r3, 80078ce <HAL_TIM_OC_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8007866:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	4e43      	ldr	r6, [pc, #268]	; (8007978 <HAL_TIM_OC_Init+0x124>)
 800786a:	69a5      	ldr	r5, [r4, #24]
 800786c:	68e0      	ldr	r0, [r4, #12]
 800786e:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007870:	2302      	movs	r3, #2
 8007872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007876:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007878:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800787a:	d066      	beq.n	800794a <HAL_TIM_OC_Init+0xf6>
 800787c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007880:	d043      	beq.n	800790a <HAL_TIM_OC_Init+0xb6>
 8007882:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007886:	42b2      	cmp	r2, r6
 8007888:	d026      	beq.n	80078d8 <HAL_TIM_OC_Init+0x84>
 800788a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800788e:	42b2      	cmp	r2, r6
 8007890:	d022      	beq.n	80078d8 <HAL_TIM_OC_Init+0x84>
 8007892:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007896:	42b2      	cmp	r2, r6
 8007898:	d01e      	beq.n	80078d8 <HAL_TIM_OC_Init+0x84>
 800789a:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800789e:	42b2      	cmp	r2, r6
 80078a0:	d064      	beq.n	800796c <HAL_TIM_OC_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078a2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80078a6:	42b2      	cmp	r2, r6
 80078a8:	d05e      	beq.n	8007968 <HAL_TIM_OC_Init+0x114>
 80078aa:	4e34      	ldr	r6, [pc, #208]	; (800797c <HAL_TIM_OC_Init+0x128>)
 80078ac:	42b2      	cmp	r2, r6
 80078ae:	d05b      	beq.n	8007968 <HAL_TIM_OC_Init+0x114>
 80078b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80078b4:	42b2      	cmp	r2, r6
 80078b6:	d057      	beq.n	8007968 <HAL_TIM_OC_Init+0x114>
 80078b8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80078bc:	42b2      	cmp	r2, r6
 80078be:	d053      	beq.n	8007968 <HAL_TIM_OC_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80078c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80078ca:	6291      	str	r1, [r2, #40]	; 0x28
 80078cc:	e017      	b.n	80078fe <HAL_TIM_OC_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 80078ce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80078d2:	f7ff ffbd 	bl	8007850 <HAL_TIM_OC_MspInit>
 80078d6:	e7c6      	b.n	8007866 <HAL_TIM_OC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80078d8:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80078da:	4f29      	ldr	r7, [pc, #164]	; (8007980 <HAL_TIM_OC_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80078e0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80078e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ee:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80078f0:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80078f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80078f6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80078f8:	d115      	bne.n	8007926 <HAL_TIM_OC_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80078fe:	2301      	movs	r3, #1
 8007900:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007902:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007904:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800790a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007912:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007918:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800791e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007920:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007922:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007924:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007926:	4b17      	ldr	r3, [pc, #92]	; (8007984 <HAL_TIM_OC_Init+0x130>)
 8007928:	429a      	cmp	r2, r3
 800792a:	d0e6      	beq.n	80078fa <HAL_TIM_OC_Init+0xa6>
 800792c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007930:	429a      	cmp	r2, r3
 8007932:	d0e2      	beq.n	80078fa <HAL_TIM_OC_Init+0xa6>
 8007934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007938:	429a      	cmp	r2, r3
 800793a:	d0de      	beq.n	80078fa <HAL_TIM_OC_Init+0xa6>
 800793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007940:	429a      	cmp	r2, r3
 8007942:	d1dc      	bne.n	80078fe <HAL_TIM_OC_Init+0xaa>
 8007944:	e7d9      	b.n	80078fa <HAL_TIM_OC_Init+0xa6>
    return HAL_ERROR;
 8007946:	2001      	movs	r0, #1
}
 8007948:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800794a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007952:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007958:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800795a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800795e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007960:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007962:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007964:	6291      	str	r1, [r2, #40]	; 0x28
 8007966:	e7c8      	b.n	80078fa <HAL_TIM_OC_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007968:	6926      	ldr	r6, [r4, #16]
 800796a:	e7f3      	b.n	8007954 <HAL_TIM_OC_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 800796c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007972:	4333      	orrs	r3, r6
 8007974:	e799      	b.n	80078aa <HAL_TIM_OC_Init+0x56>
 8007976:	bf00      	nop
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40014400 	.word	0x40014400
 8007980:	40013400 	.word	0x40013400
 8007984:	40014000 	.word	0x40014000

08007988 <HAL_TIM_PWM_MspInit>:
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop

0800798c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800798c:	2800      	cmp	r0, #0
 800798e:	d076      	beq.n	8007a7e <HAL_TIM_PWM_Init+0xf2>
{
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007992:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007996:	4604      	mov	r4, r0
 8007998:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800799c:	b39b      	cbz	r3, 8007a06 <HAL_TIM_PWM_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800799e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a0:	4e43      	ldr	r6, [pc, #268]	; (8007ab0 <HAL_TIM_PWM_Init+0x124>)
 80079a2:	69a5      	ldr	r5, [r4, #24]
 80079a4:	68e0      	ldr	r0, [r4, #12]
 80079a6:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 80079a8:	2302      	movs	r3, #2
 80079aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ae:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80079b0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b2:	d066      	beq.n	8007a82 <HAL_TIM_PWM_Init+0xf6>
 80079b4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80079b8:	d043      	beq.n	8007a42 <HAL_TIM_PWM_Init+0xb6>
 80079ba:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80079be:	42b2      	cmp	r2, r6
 80079c0:	d026      	beq.n	8007a10 <HAL_TIM_PWM_Init+0x84>
 80079c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80079c6:	42b2      	cmp	r2, r6
 80079c8:	d022      	beq.n	8007a10 <HAL_TIM_PWM_Init+0x84>
 80079ca:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80079ce:	42b2      	cmp	r2, r6
 80079d0:	d01e      	beq.n	8007a10 <HAL_TIM_PWM_Init+0x84>
 80079d2:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 80079d6:	42b2      	cmp	r2, r6
 80079d8:	d064      	beq.n	8007aa4 <HAL_TIM_PWM_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079da:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80079de:	42b2      	cmp	r2, r6
 80079e0:	d05e      	beq.n	8007aa0 <HAL_TIM_PWM_Init+0x114>
 80079e2:	4e34      	ldr	r6, [pc, #208]	; (8007ab4 <HAL_TIM_PWM_Init+0x128>)
 80079e4:	42b2      	cmp	r2, r6
 80079e6:	d05b      	beq.n	8007aa0 <HAL_TIM_PWM_Init+0x114>
 80079e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80079ec:	42b2      	cmp	r2, r6
 80079ee:	d057      	beq.n	8007aa0 <HAL_TIM_PWM_Init+0x114>
 80079f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80079f4:	42b2      	cmp	r2, r6
 80079f6:	d053      	beq.n	8007aa0 <HAL_TIM_PWM_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80079fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a00:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007a02:	6291      	str	r1, [r2, #40]	; 0x28
 8007a04:	e017      	b.n	8007a36 <HAL_TIM_PWM_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 8007a06:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007a0a:	f7ff ffbd 	bl	8007988 <HAL_TIM_PWM_MspInit>
 8007a0e:	e7c6      	b.n	800799e <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007a10:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007a12:	4f29      	ldr	r7, [pc, #164]	; (8007ab8 <HAL_TIM_PWM_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a18:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a1a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a20:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a26:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007a28:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007a2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007a2e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007a30:	d115      	bne.n	8007a5e <HAL_TIM_PWM_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 8007a32:	6963      	ldr	r3, [r4, #20]
 8007a34:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007a36:	2301      	movs	r3, #1
 8007a38:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007a3a:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007a42:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a44:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a4a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a50:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a56:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007a58:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007a5c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007a5e:	4b17      	ldr	r3, [pc, #92]	; (8007abc <HAL_TIM_PWM_Init+0x130>)
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d0e6      	beq.n	8007a32 <HAL_TIM_PWM_Init+0xa6>
 8007a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d0e2      	beq.n	8007a32 <HAL_TIM_PWM_Init+0xa6>
 8007a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d0de      	beq.n	8007a32 <HAL_TIM_PWM_Init+0xa6>
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d1dc      	bne.n	8007a36 <HAL_TIM_PWM_Init+0xaa>
 8007a7c:	e7d9      	b.n	8007a32 <HAL_TIM_PWM_Init+0xa6>
    return HAL_ERROR;
 8007a7e:	2001      	movs	r0, #1
}
 8007a80:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007a82:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a84:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a8a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a90:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a96:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007a98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007a9c:	6291      	str	r1, [r2, #40]	; 0x28
 8007a9e:	e7c8      	b.n	8007a32 <HAL_TIM_PWM_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa0:	6926      	ldr	r6, [r4, #16]
 8007aa2:	e7f3      	b.n	8007a8c <HAL_TIM_PWM_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007aa4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007aaa:	4333      	orrs	r3, r6
 8007aac:	e799      	b.n	80079e2 <HAL_TIM_PWM_Init+0x56>
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40013400 	.word	0x40013400
 8007abc:	40014000 	.word	0x40014000

08007ac0 <HAL_TIM_PWM_Start>:
 8007ac0:	6803      	ldr	r3, [r0, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	6a18      	ldr	r0, [r3, #32]
 8007ac6:	fa02 f101 	lsl.w	r1, r2, r1
 8007aca:	ea20 0001 	bic.w	r0, r0, r1
 8007ace:	b410      	push	{r4}
 8007ad0:	6218      	str	r0, [r3, #32]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	4c11      	ldr	r4, [pc, #68]	; (8007b1c <HAL_TIM_PWM_Start+0x5c>)
 8007ad6:	4311      	orrs	r1, r2
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	6219      	str	r1, [r3, #32]
 8007adc:	d012      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x44>
 8007ade:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <HAL_TIM_PWM_Start+0x60>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00f      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x44>
 8007ae4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x44>
 8007aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x44>
 8007af4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x44>
 8007afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d103      	bne.n	8007b0c <HAL_TIM_PWM_Start+0x4c>
 8007b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b0a:	645a      	str	r2, [r3, #68]	; 0x44
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	2000      	movs	r0, #0
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	4770      	bx	lr
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40013400 	.word	0x40013400

08007b24 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b24:	6803      	ldr	r3, [r0, #0]
{   
 8007b26:	b430      	push	{r4, r5}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b28:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8007b2a:	4d20      	ldr	r5, [pc, #128]	; (8007bac <HAL_TIM_PWM_Stop+0x88>)
  tmp = TIM_CCER_CC1E << Channel;
 8007b2c:	2401      	movs	r4, #1
 8007b2e:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 8007b32:	ea22 0201 	bic.w	r2, r2, r1
 8007b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	d026      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
 8007b40:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <HAL_TIM_PWM_Stop+0x8c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d023      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
 8007b46:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01f      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
 8007b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01b      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
 8007b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d017      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
 8007b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIM_PWM_Stop+0x6a>
  __HAL_TIM_DISABLE(htim);
 8007b66:	6a19      	ldr	r1, [r3, #32]
 8007b68:	f241 1211 	movw	r2, #4369	; 0x1111
 8007b6c:	4211      	tst	r1, r2
 8007b6e:	d108      	bne.n	8007b82 <HAL_TIM_PWM_Stop+0x5e>
 8007b70:	6a19      	ldr	r1, [r3, #32]
 8007b72:	f240 4244 	movw	r2, #1092	; 0x444
 8007b76:	4211      	tst	r1, r2
 8007b78:	d103      	bne.n	8007b82 <HAL_TIM_PWM_Stop+0x5e>
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
} 
 8007b88:	bc30      	pop	{r4, r5}
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8007b8e:	6a19      	ldr	r1, [r3, #32]
 8007b90:	f241 1211 	movw	r2, #4369	; 0x1111
 8007b94:	4211      	tst	r1, r2
 8007b96:	d1e6      	bne.n	8007b66 <HAL_TIM_PWM_Stop+0x42>
 8007b98:	6a19      	ldr	r1, [r3, #32]
 8007b9a:	f240 4244 	movw	r2, #1092	; 0x444
 8007b9e:	4211      	tst	r1, r2
 8007ba0:	d1e1      	bne.n	8007b66 <HAL_TIM_PWM_Stop+0x42>
 8007ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8007baa:	e7dc      	b.n	8007b66 <HAL_TIM_PWM_Stop+0x42>
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40013400 	.word	0x40013400

08007bb4 <HAL_TIM_IC_MspInit>:
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop

08007bb8 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d076      	beq.n	8007caa <HAL_TIM_IC_Init+0xf2>
{
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007bbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bc8:	b39b      	cbz	r3, 8007c32 <HAL_TIM_IC_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007bca:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bcc:	4e43      	ldr	r6, [pc, #268]	; (8007cdc <HAL_TIM_IC_Init+0x124>)
 8007bce:	69a5      	ldr	r5, [r4, #24]
 8007bd0:	68e0      	ldr	r0, [r4, #12]
 8007bd2:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY; 
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bda:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007bdc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bde:	d066      	beq.n	8007cae <HAL_TIM_IC_Init+0xf6>
 8007be0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007be4:	d043      	beq.n	8007c6e <HAL_TIM_IC_Init+0xb6>
 8007be6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007bea:	42b2      	cmp	r2, r6
 8007bec:	d026      	beq.n	8007c3c <HAL_TIM_IC_Init+0x84>
 8007bee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007bf2:	42b2      	cmp	r2, r6
 8007bf4:	d022      	beq.n	8007c3c <HAL_TIM_IC_Init+0x84>
 8007bf6:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007bfa:	42b2      	cmp	r2, r6
 8007bfc:	d01e      	beq.n	8007c3c <HAL_TIM_IC_Init+0x84>
 8007bfe:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007c02:	42b2      	cmp	r2, r6
 8007c04:	d064      	beq.n	8007cd0 <HAL_TIM_IC_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c06:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007c0a:	42b2      	cmp	r2, r6
 8007c0c:	d05e      	beq.n	8007ccc <HAL_TIM_IC_Init+0x114>
 8007c0e:	4e34      	ldr	r6, [pc, #208]	; (8007ce0 <HAL_TIM_IC_Init+0x128>)
 8007c10:	42b2      	cmp	r2, r6
 8007c12:	d05b      	beq.n	8007ccc <HAL_TIM_IC_Init+0x114>
 8007c14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007c18:	42b2      	cmp	r2, r6
 8007c1a:	d057      	beq.n	8007ccc <HAL_TIM_IC_Init+0x114>
 8007c1c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007c20:	42b2      	cmp	r2, r6
 8007c22:	d053      	beq.n	8007ccc <HAL_TIM_IC_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c28:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007c2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c2e:	6291      	str	r1, [r2, #40]	; 0x28
 8007c30:	e017      	b.n	8007c62 <HAL_TIM_IC_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 8007c32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8007c36:	f7ff ffbd 	bl	8007bb4 <HAL_TIM_IC_MspInit>
 8007c3a:	e7c6      	b.n	8007bca <HAL_TIM_IC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007c3c:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c3e:	4f29      	ldr	r7, [pc, #164]	; (8007ce4 <HAL_TIM_IC_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c44:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c46:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c54:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007c56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c58:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c5a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c5c:	d115      	bne.n	8007c8a <HAL_TIM_IC_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 8007c5e:	6963      	ldr	r3, [r4, #20]
 8007c60:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007c62:	2301      	movs	r3, #1
 8007c64:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007c66:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007c6e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c70:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c76:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c7c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c82:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007c84:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c86:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c88:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <HAL_TIM_IC_Init+0x130>)
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d0e6      	beq.n	8007c5e <HAL_TIM_IC_Init+0xa6>
 8007c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d0e2      	beq.n	8007c5e <HAL_TIM_IC_Init+0xa6>
 8007c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d0de      	beq.n	8007c5e <HAL_TIM_IC_Init+0xa6>
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1dc      	bne.n	8007c62 <HAL_TIM_IC_Init+0xaa>
 8007ca8:	e7d9      	b.n	8007c5e <HAL_TIM_IC_Init+0xa6>
    return HAL_ERROR;
 8007caa:	2001      	movs	r0, #1
}
 8007cac:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007cae:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cb0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007cb6:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cbc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007cc4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007cc8:	6291      	str	r1, [r2, #40]	; 0x28
 8007cca:	e7c8      	b.n	8007c5e <HAL_TIM_IC_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ccc:	6926      	ldr	r6, [r4, #16]
 8007cce:	e7f3      	b.n	8007cb8 <HAL_TIM_IC_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007cd6:	4333      	orrs	r3, r6
 8007cd8:	e799      	b.n	8007c0e <HAL_TIM_IC_Init+0x56>
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40014000 	.word	0x40014000

08007cec <HAL_TIM_OnePulse_MspInit>:
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	f000 8084 	beq.w	8007dfe <HAL_TIM_OnePulse_Init+0x10e>
{
 8007cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d035      	beq.n	8007d74 <HAL_TIM_OnePulse_Init+0x84>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d08:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d0a:	4e49      	ldr	r6, [pc, #292]	; (8007e30 <HAL_TIM_OnePulse_Init+0x140>)
 8007d0c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007d10:	68e0      	ldr	r0, [r4, #12]
 8007d12:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007d14:	2202      	movs	r2, #2
 8007d16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d1a:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8007d1c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d1e:	d070      	beq.n	8007e02 <HAL_TIM_OnePulse_Init+0x112>
 8007d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d24:	d04c      	beq.n	8007dc0 <HAL_TIM_OnePulse_Init+0xd0>
 8007d26:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007d2a:	42b3      	cmp	r3, r6
 8007d2c:	d027      	beq.n	8007d7e <HAL_TIM_OnePulse_Init+0x8e>
 8007d2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d32:	42b3      	cmp	r3, r6
 8007d34:	d023      	beq.n	8007d7e <HAL_TIM_OnePulse_Init+0x8e>
 8007d36:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007d3a:	42b3      	cmp	r3, r6
 8007d3c:	d01f      	beq.n	8007d7e <HAL_TIM_OnePulse_Init+0x8e>
 8007d3e:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007d42:	42b3      	cmp	r3, r6
 8007d44:	d06f      	beq.n	8007e26 <HAL_TIM_OnePulse_Init+0x136>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d46:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007d4a:	42b3      	cmp	r3, r6
 8007d4c:	d069      	beq.n	8007e22 <HAL_TIM_OnePulse_Init+0x132>
 8007d4e:	4e39      	ldr	r6, [pc, #228]	; (8007e34 <HAL_TIM_OnePulse_Init+0x144>)
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	d066      	beq.n	8007e22 <HAL_TIM_OnePulse_Init+0x132>
 8007d54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d58:	42b3      	cmp	r3, r6
 8007d5a:	d062      	beq.n	8007e22 <HAL_TIM_OnePulse_Init+0x132>
 8007d5c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007d60:	42b3      	cmp	r3, r6
 8007d62:	d05e      	beq.n	8007e22 <HAL_TIM_OnePulse_Init+0x132>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d68:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8007d6c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d6e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007d70:	6299      	str	r1, [r3, #40]	; 0x28
 8007d72:	e018      	b.n	8007da6 <HAL_TIM_OnePulse_Init+0xb6>
    htim->Lock = HAL_UNLOCKED;
 8007d74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8007d78:	f7ff ffb8 	bl	8007cec <HAL_TIM_OnePulse_MspInit>
 8007d7c:	e7c4      	b.n	8007d08 <HAL_TIM_OnePulse_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 8007d7e:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007d80:	4f2d      	ldr	r7, [pc, #180]	; (8007e38 <HAL_TIM_OnePulse_Init+0x148>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d86:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d88:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d8e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d94:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007d98:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8007d9a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d9c:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007d9e:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007da0:	d11d      	bne.n	8007dde <HAL_TIM_OnePulse_Init+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8007da2:	6962      	ldr	r2, [r4, #20]
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007da6:	2601      	movs	r6, #1
 8007da8:	615e      	str	r6, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	f022 0208 	bic.w	r2, r2, #8
 8007db0:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	432a      	orrs	r2, r5
 8007db6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007db8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007dba:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007dc0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007dc8:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dce:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dd4:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8007dd8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dda:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007ddc:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <HAL_TIM_OnePulse_Init+0x14c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d0de      	beq.n	8007da2 <HAL_TIM_OnePulse_Init+0xb2>
 8007de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d0da      	beq.n	8007da2 <HAL_TIM_OnePulse_Init+0xb2>
 8007dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d0d6      	beq.n	8007da2 <HAL_TIM_OnePulse_Init+0xb2>
 8007df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d1d4      	bne.n	8007da6 <HAL_TIM_OnePulse_Init+0xb6>
 8007dfc:	e7d1      	b.n	8007da2 <HAL_TIM_OnePulse_Init+0xb2>
    return HAL_ERROR;
 8007dfe:	2001      	movs	r0, #1
}
 8007e00:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007e02:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e04:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e0a:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e10:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e16:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8007e1a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e1c:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007e1e:	6299      	str	r1, [r3, #40]	; 0x28
 8007e20:	e7bf      	b.n	8007da2 <HAL_TIM_OnePulse_Init+0xb2>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e22:	6926      	ldr	r6, [r4, #16]
 8007e24:	e7f2      	b.n	8007e0c <HAL_TIM_OnePulse_Init+0x11c>
    tmpcr1 |= Structure->CounterMode;
 8007e26:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e2c:	4332      	orrs	r2, r6
 8007e2e:	e78e      	b.n	8007d4e <HAL_TIM_OnePulse_Init+0x5e>
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40014400 	.word	0x40014400
 8007e38:	40013400 	.word	0x40013400
 8007e3c:	40014000 	.word	0x40014000

08007e40 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8007e40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	f000 8099 	beq.w	8007f7c <HAL_TIM_IC_ConfigChannel+0x13c>
{
 8007e4a:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007e4e:	2401      	movs	r4, #1
 8007e50:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007e58:	e9d1 5700 	ldrd	r5, r7, [r1]
 8007e5c:	6803      	ldr	r3, [r0, #0]
 8007e5e:	e9d1 6402 	ldrd	r6, r4, [r1, #8]
  if (Channel == TIM_CHANNEL_1)
 8007e62:	b372      	cbz	r2, 8007ec2 <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 8007e64:	2a04      	cmp	r2, #4
 8007e66:	d067      	beq.n	8007f38 <HAL_TIM_IC_ConfigChannel+0xf8>
  else if (Channel == TIM_CHANNEL_3)
 8007e68:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e6a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8007e6c:	f000 8088 	beq.w	8007f80 <HAL_TIM_IC_ConfigChannel+0x140>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e76:	69d9      	ldr	r1, [r3, #28]
  tmpccer = TIMx->CCER;
 8007e78:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e7c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e80:	0324      	lsls	r4, r4, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e82:	032a      	lsls	r2, r5, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e84:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e88:	b2a4      	uxth	r4, r4
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e8a:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e8e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e92:	f42c 4c20 	bic.w	ip, ip, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e96:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e9a:	430c      	orrs	r4, r1
  TIMx->CCMR2 = tmpccmr2;
 8007e9c:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e9e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ea0:	69da      	ldr	r2, [r3, #28]
 8007ea2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ea6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8007eae:	61de      	str	r6, [r3, #28]
  __HAL_UNLOCK(htim);
 8007eb0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007eb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007ebc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK; 
 8007ebe:	4618      	mov	r0, r3
}
 8007ec0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec2:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ec4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8007fc0 <HAL_TIM_IC_ConfigChannel+0x180>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	621a      	str	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ece:	4563      	cmp	r3, ip
  tmpccmr1 = TIMx->CCMR1;
 8007ed0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ed4:	d019      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d016      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007edc:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 8007ee0:	4563      	cmp	r3, ip
 8007ee2:	d012      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007ee4:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8007ee8:	4563      	cmp	r3, ip
 8007eea:	d00e      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007eec:	f50c 3c96 	add.w	ip, ip, #76800	; 0x12c00
 8007ef0:	4563      	cmp	r3, ip
 8007ef2:	d00a      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007ef4:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 8007ef8:	4563      	cmp	r3, ip
 8007efa:	d006      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
 8007efc:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8007f00:	4563      	cmp	r3, ip
 8007f02:	d002      	beq.n	8007f0a <HAL_TIM_IC_ConfigChannel+0xca>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f04:	f041 0101 	orr.w	r1, r1, #1
 8007f08:	e002      	b.n	8007f10 <HAL_TIM_IC_ConfigChannel+0xd0>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f0a:	f021 0103 	bic.w	r1, r1, #3
    tmpccmr1 |= TIM_ICSelection;
 8007f0e:	4339      	orrs	r1, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f10:	0124      	lsls	r4, r4, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f12:	f022 070a 	bic.w	r7, r2, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f16:	b2e4      	uxtb	r4, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f18:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f1c:	f005 020a 	and.w	r2, r5, #10
 8007f20:	433a      	orrs	r2, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f22:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007f24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f26:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	f022 020c 	bic.w	r2, r2, #12
 8007f2e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	4316      	orrs	r6, r2
 8007f34:	619e      	str	r6, [r3, #24]
 8007f36:	e7bb      	b.n	8007eb0 <HAL_TIM_IC_ConfigChannel+0x70>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f38:	6a1a      	ldr	r2, [r3, #32]
 8007f3a:	f022 0210 	bic.w	r2, r2, #16
 8007f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f40:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007f42:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f46:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f4a:	0324      	lsls	r4, r4, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f4c:	012a      	lsls	r2, r5, #4
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f4e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f52:	b2a4      	uxth	r4, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f54:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f5c:	f02c 0ca0 	bic.w	ip, ip, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f60:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f64:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8007f66:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f70:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8007f78:	619e      	str	r6, [r3, #24]
 8007f7a:	e799      	b.n	8007eb0 <HAL_TIM_IC_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8007f7c:	2002      	movs	r0, #2
}
 8007f7e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f86:	69d9      	ldr	r1, [r3, #28]
  tmpccer = TIMx->CCER;
 8007f88:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f8c:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f90:	0124      	lsls	r4, r4, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f92:	022a      	lsls	r2, r5, #8
  tmpccmr2 |= TIM_ICSelection;
 8007f94:	4339      	orrs	r1, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f96:	b2e4      	uxtb	r4, r4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f98:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f9c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fa0:	f42c 6c20 	bic.w	ip, ip, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fa4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fa8:	4321      	orrs	r1, r4
  TIMx->CCMR2 = tmpccmr2;
 8007faa:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fac:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	f022 020c 	bic.w	r2, r2, #12
 8007fb4:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	4316      	orrs	r6, r2
 8007fba:	61de      	str	r6, [r3, #28]
 8007fbc:	e778      	b.n	8007eb0 <HAL_TIM_IC_ConfigChannel+0x70>
 8007fbe:	bf00      	nop
 8007fc0:	40012c00 	.word	0x40012c00

08007fc4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007fc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d068      	beq.n	800809e <HAL_TIM_ConfigClockSource+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 8007fcc:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8007fce:	6803      	ldr	r3, [r0, #0]
{
 8007fd0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007fd6:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007fd8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fda:	4a5e      	ldr	r2, [pc, #376]	; (8008154 <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 8007fdc:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fde:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8007fe2:	f04f 0501 	mov.w	r5, #1
 8007fe6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8007fea:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007fec:	f000 809a 	beq.w	8008124 <HAL_TIM_ConfigClockSource+0x160>
 8007ff0:	d919      	bls.n	8008026 <HAL_TIM_ConfigClockSource+0x62>
 8007ff2:	2c70      	cmp	r4, #112	; 0x70
 8007ff4:	f000 8082 	beq.w	80080fc <HAL_TIM_ConfigClockSource+0x138>
 8007ff8:	d92b      	bls.n	8008052 <HAL_TIM_ConfigClockSource+0x8e>
 8007ffa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007ffe:	d076      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x12a>
 8008000:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8008004:	d11c      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008006:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800800a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800800c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800800e:	432a      	orrs	r2, r5
 8008010:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008014:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008018:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800801a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008022:	609a      	str	r2, [r3, #8]
    break;
 8008024:	e00c      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8008026:	2c10      	cmp	r4, #16
 8008028:	d042      	beq.n	80080b0 <HAL_TIM_ConfigClockSource+0xec>
 800802a:	d92f      	bls.n	800808c <HAL_TIM_ConfigClockSource+0xc8>
 800802c:	2c20      	cmp	r4, #32
 800802e:	d038      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0xde>
 8008030:	2c30      	cmp	r4, #48	; 0x30
 8008032:	d105      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 8008034:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800803a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 800803e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8008040:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008042:	2201      	movs	r2, #1
 8008044:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008048:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800804c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800804e:	4618      	mov	r0, r3
}
 8008050:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008052:	2c50      	cmp	r4, #80	; 0x50
 8008054:	d033      	beq.n	80080be <HAL_TIM_ConfigClockSource+0xfa>
 8008056:	2c60      	cmp	r4, #96	; 0x60
 8008058:	d1f2      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800805a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800805c:	684d      	ldr	r5, [r1, #4]
 800805e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008060:	f024 0410 	bic.w	r4, r4, #16
 8008064:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008066:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8008068:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800806a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800806e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008072:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008076:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800807a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800807c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800807e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008084:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	e7d9      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 800808c:	2c00      	cmp	r4, #0
 800808e:	d1d7      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 8008090:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008092:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008096:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	e7d0      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 800809e:	2002      	movs	r0, #2
}
 80080a0:	4770      	bx	lr
   tmpsmcr = TIMx->SMCR;
 80080a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80080a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80080a8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80080ac:	609a      	str	r2, [r3, #8]
 80080ae:	e7c7      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 80080b0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80080b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80080b6:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	e7c0      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  tmpccer = TIMx->CCER;
 80080be:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c0:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80080c2:	684c      	ldr	r4, [r1, #4]
 80080c4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c6:	f026 0601 	bic.w	r6, r6, #1
 80080ca:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80080cc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ce:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080d6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80080da:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80080dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080de:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80080e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80080e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80080e6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	e7a8      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080f4:	f022 0207 	bic.w	r2, r2, #7
 80080f8:	609a      	str	r2, [r3, #8]
    break;
 80080fa:	e7a1      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080fc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8008100:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8008102:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008104:	432a      	orrs	r2, r5
 8008106:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800810a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800810e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8008110:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008112:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008114:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008118:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800811c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008120:	609a      	str	r2, [r3, #8]
    break;
 8008122:	e78d      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
  tmpccer = TIMx->CCER;
 8008124:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008126:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008128:	684c      	ldr	r4, [r1, #4]
 800812a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800812c:	f026 0601 	bic.w	r6, r6, #1
 8008130:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008132:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008134:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800813c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008140:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8008142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008144:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8008146:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008148:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800814c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8008150:	609a      	str	r2, [r3, #8]
 8008152:	e775      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x7c>
 8008154:	fffe0088 	.word	0xfffe0088

08008158 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 8008158:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800815c:	2b01      	cmp	r3, #1
 800815e:	d047      	beq.n	80081f0 <HAL_TIM_SlaveConfigSynchronization+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8008162:	6802      	ldr	r2, [r0, #0]
{
 8008164:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8008166:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800816a:	e9d1 4500 	ldrd	r4, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 800816e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008174:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800817a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800817e:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8008180:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 8008182:	f04f 0401 	mov.w	r4, #1
 8008186:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800818a:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800818c:	d046      	beq.n	800821c <HAL_TIM_SlaveConfigSynchronization+0xc4>
 800818e:	d91f      	bls.n	80081d0 <HAL_TIM_SlaveConfigSynchronization+0x78>
 8008190:	2d60      	cmp	r5, #96	; 0x60
 8008192:	d030      	beq.n	80081f6 <HAL_TIM_SlaveConfigSynchronization+0x9e>
 8008194:	2d70      	cmp	r5, #112	; 0x70
 8008196:	d10a      	bne.n	80081ae <HAL_TIM_SlaveConfigSynchronization+0x56>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008198:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800819c:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800819e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081a0:	432b      	orrs	r3, r5
 80081a2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081aa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80081ac:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80081ae:	68d3      	ldr	r3, [r2, #12]
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80081b6:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80081b8:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);  
 80081ba:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80081bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c0:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80081c2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 80081c6:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
} 
 80081ca:	bcf0      	pop	{r4, r5, r6, r7}
 80081cc:	4608      	mov	r0, r1
 80081ce:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80081d0:	2d40      	cmp	r5, #64	; 0x40
 80081d2:	d1ec      	bne.n	80081ae <HAL_TIM_SlaveConfigSynchronization+0x56>
      tmpccer = htim->Instance->CCER;
 80081d4:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80081d6:	6a14      	ldr	r4, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80081d8:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80081da:	f024 0401 	bic.w	r4, r4, #1
 80081de:	6214      	str	r4, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80081e0:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80081e6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80081ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;                               
 80081ec:	6215      	str	r5, [r2, #32]
 80081ee:	e7de      	b.n	80081ae <HAL_TIM_SlaveConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 80081f0:	2302      	movs	r3, #2
} 
 80081f2:	4618      	mov	r0, r3
 80081f4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081f8:	688d      	ldr	r5, [r1, #8]
 80081fa:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081fc:	f024 0410 	bic.w	r4, r4, #16
 8008200:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8008204:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008206:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800820a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8008212:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008216:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008218:	6213      	str	r3, [r2, #32]
 800821a:	e7c8      	b.n	80081ae <HAL_TIM_SlaveConfigSynchronization+0x56>
  tmpccer = TIMx->CCER;
 800821c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800821e:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008220:	688c      	ldr	r4, [r1, #8]
 8008222:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008224:	f026 0601 	bic.w	r6, r6, #1
 8008228:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800822a:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800822c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008234:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008236:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800823a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800823c:	6211      	str	r1, [r2, #32]
 800823e:	e7b6      	b.n	80081ae <HAL_TIM_SlaveConfigSynchronization+0x56>

08008240 <TIM_OC1_SetConfig>:
{
 8008240:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008242:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 8008244:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8008246:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008248:	4d1c      	ldr	r5, [pc, #112]	; (80082bc <TIM_OC1_SetConfig+0x7c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800824a:	f024 0401 	bic.w	r4, r4, #1
 800824e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8008250:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8008252:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008254:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008256:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800825a:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800825e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008262:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8008264:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8008268:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800826c:	d013      	beq.n	8008296 <TIM_OC1_SetConfig+0x56>
 800826e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008272:	42a8      	cmp	r0, r5
 8008274:	d00f      	beq.n	8008296 <TIM_OC1_SetConfig+0x56>
 8008276:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800827a:	42a8      	cmp	r0, r5
 800827c:	d00b      	beq.n	8008296 <TIM_OC1_SetConfig+0x56>
 800827e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008282:	42a8      	cmp	r0, r5
 8008284:	d007      	beq.n	8008296 <TIM_OC1_SetConfig+0x56>
 8008286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800828a:	42a8      	cmp	r0, r5
 800828c:	d003      	beq.n	8008296 <TIM_OC1_SetConfig+0x56>
 800828e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008292:	42a8      	cmp	r0, r5
 8008294:	d10b      	bne.n	80082ae <TIM_OC1_SetConfig+0x6e>
    tmpccer |= OC_Config->OCNPolarity;
 8008296:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008298:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800829c:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800829e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082a2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80082a6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80082a8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80082ac:	432c      	orrs	r4, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80082ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80082b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80082b2:	6182      	str	r2, [r0, #24]
} 
 80082b4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80082b6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80082b8:	6203      	str	r3, [r0, #32]
} 
 80082ba:	4770      	bx	lr
 80082bc:	40012c00 	.word	0x40012c00

080082c0 <TIM_OC2_SetConfig>:
{
 80082c0:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c6:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082c8:	4d23      	ldr	r5, [pc, #140]	; (8008358 <TIM_OC2_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ca:	f024 0410 	bic.w	r4, r4, #16
 80082ce:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80082d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80082d2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80082d4:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80082da:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082de:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082e2:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e4:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082ec:	d017      	beq.n	800831e <TIM_OC2_SetConfig+0x5e>
 80082ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082f2:	42a8      	cmp	r0, r5
 80082f4:	d013      	beq.n	800831e <TIM_OC2_SetConfig+0x5e>
 80082f6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80082fa:	42a8      	cmp	r0, r5
 80082fc:	d024      	beq.n	8008348 <TIM_OC2_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80082fe:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 8008302:	42a8      	cmp	r0, r5
 8008304:	d012      	beq.n	800832c <TIM_OC2_SetConfig+0x6c>
 8008306:	4d15      	ldr	r5, [pc, #84]	; (800835c <TIM_OC2_SetConfig+0x9c>)
 8008308:	42a8      	cmp	r0, r5
 800830a:	d00f      	beq.n	800832c <TIM_OC2_SetConfig+0x6c>
 800830c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008310:	42a8      	cmp	r0, r5
 8008312:	d00b      	beq.n	800832c <TIM_OC2_SetConfig+0x6c>
 8008314:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008318:	42a8      	cmp	r0, r5
 800831a:	d10e      	bne.n	800833a <TIM_OC2_SetConfig+0x7a>
 800831c:	e006      	b.n	800832c <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800831e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800832c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008330:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008334:	4335      	orrs	r5, r6
 8008336:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800833a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800833c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800833e:	6182      	str	r2, [r0, #24]
}
 8008340:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8008342:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 8008344:	6203      	str	r3, [r0, #32]
}
 8008346:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008348:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800834a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800834e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008356:	e7d6      	b.n	8008306 <TIM_OC2_SetConfig+0x46>
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40014400 	.word	0x40014400

08008360 <TIM_OC3_SetConfig>:
{
 8008360:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008362:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008364:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8008366:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008368:	4d23      	ldr	r5, [pc, #140]	; (80083f8 <TIM_OC3_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800836a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800836e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8008370:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8008372:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8008374:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8008376:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800837a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800837e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008382:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008384:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8008388:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800838c:	d017      	beq.n	80083be <TIM_OC3_SetConfig+0x5e>
 800838e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008392:	42a8      	cmp	r0, r5
 8008394:	d013      	beq.n	80083be <TIM_OC3_SetConfig+0x5e>
 8008396:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800839a:	42a8      	cmp	r0, r5
 800839c:	d024      	beq.n	80083e8 <TIM_OC3_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800839e:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 80083a2:	42a8      	cmp	r0, r5
 80083a4:	d012      	beq.n	80083cc <TIM_OC3_SetConfig+0x6c>
 80083a6:	4d15      	ldr	r5, [pc, #84]	; (80083fc <TIM_OC3_SetConfig+0x9c>)
 80083a8:	42a8      	cmp	r0, r5
 80083aa:	d00f      	beq.n	80083cc <TIM_OC3_SetConfig+0x6c>
 80083ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80083b0:	42a8      	cmp	r0, r5
 80083b2:	d00b      	beq.n	80083cc <TIM_OC3_SetConfig+0x6c>
 80083b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083b8:	42a8      	cmp	r0, r5
 80083ba:	d10e      	bne.n	80083da <TIM_OC3_SetConfig+0x7a>
 80083bc:	e006      	b.n	80083cc <TIM_OC3_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80083c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80083c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083cc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083d0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d4:	4335      	orrs	r5, r6
 80083d6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 80083da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80083dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80083de:	61c2      	str	r2, [r0, #28]
}
 80083e0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80083e2:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 80083e4:	6203      	str	r3, [r0, #32]
}
 80083e6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083e8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80083f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f6:	e7d6      	b.n	80083a6 <TIM_OC3_SetConfig+0x46>
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40014400 	.word	0x40014400

08008400 <TIM_OC4_SetConfig>:
{
 8008400:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008402:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008404:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008406:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008408:	4d19      	ldr	r5, [pc, #100]	; (8008470 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800840a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800840e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8008410:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8008412:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8008414:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800841a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800841e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008422:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008424:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008428:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800842c:	d013      	beq.n	8008456 <TIM_OC4_SetConfig+0x56>
 800842e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008432:	42a8      	cmp	r0, r5
 8008434:	d00f      	beq.n	8008456 <TIM_OC4_SetConfig+0x56>
 8008436:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800843a:	42a8      	cmp	r0, r5
 800843c:	d00b      	beq.n	8008456 <TIM_OC4_SetConfig+0x56>
 800843e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008442:	42a8      	cmp	r0, r5
 8008444:	d007      	beq.n	8008456 <TIM_OC4_SetConfig+0x56>
 8008446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800844a:	42a8      	cmp	r0, r5
 800844c:	d003      	beq.n	8008456 <TIM_OC4_SetConfig+0x56>
 800844e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008452:	42a8      	cmp	r0, r5
 8008454:	d104      	bne.n	8008460 <TIM_OC4_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008456:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008458:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800845c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8008460:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008462:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008464:	61c3      	str	r3, [r0, #28]
}
 8008466:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8008468:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 800846a:	6202      	str	r2, [r0, #32]
}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40012c00 	.word	0x40012c00

08008474 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8008474:	6a03      	ldr	r3, [r0, #32]
{
 8008476:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8008478:	2401      	movs	r4, #1
 800847a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800847c:	ea23 0304 	bic.w	r3, r3, r4
 8008480:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8008482:	6a03      	ldr	r3, [r0, #32]
}
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8008488:	408a      	lsls	r2, r1
 800848a:	431a      	orrs	r2, r3
 800848c:	6202      	str	r2, [r0, #32]
}
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8008492:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	f000 80b8 	beq.w	800860c <HAL_TIM_OC_ConfigChannel+0x17c>
 800849c:	4604      	mov	r4, r0
  
  htim->State = HAL_TIM_STATE_BUSY;
 800849e:	2302      	movs	r3, #2
  __HAL_LOCK(htim); 
 80084a0:	2001      	movs	r0, #1
 80084a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80084a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  switch (Channel)
 80084aa:	2a14      	cmp	r2, #20
 80084ac:	d842      	bhi.n	8008534 <HAL_TIM_OC_ConfigChannel+0xa4>
 80084ae:	e8df f002 	tbb	[pc, r2]
 80084b2:	4148      	.short	0x4148
 80084b4:	41524141 	.word	0x41524141
 80084b8:	415c4141 	.word	0x415c4141
 80084bc:	41664141 	.word	0x41664141
 80084c0:	41704141 	.word	0x41704141
 80084c4:	4141      	.short	0x4141
 80084c6:	0b          	.byte	0x0b
 80084c7:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084c8:	6823      	ldr	r3, [r4, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084ca:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084ce:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	680f      	ldr	r7, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80084d2:	4e4f      	ldr	r6, [pc, #316]	; (8008610 <HAL_TIM_OC_ConfigChannel+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084d4:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80084d8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80084da:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80084dc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80084de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084e0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084e4:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80084ec:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084ee:	ea40 500c 	orr.w	r0, r0, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80084f6:	d013      	beq.n	8008520 <HAL_TIM_OC_ConfigChannel+0x90>
 80084f8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	d00f      	beq.n	8008520 <HAL_TIM_OC_ConfigChannel+0x90>
 8008500:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008504:	42b3      	cmp	r3, r6
 8008506:	d00b      	beq.n	8008520 <HAL_TIM_OC_ConfigChannel+0x90>
 8008508:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800850c:	42b3      	cmp	r3, r6
 800850e:	d007      	beq.n	8008520 <HAL_TIM_OC_ConfigChannel+0x90>
 8008510:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008514:	42b3      	cmp	r3, r6
 8008516:	d003      	beq.n	8008520 <HAL_TIM_OC_ConfigChannel+0x90>
 8008518:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800851c:	42b3      	cmp	r3, r6
 800851e:	d104      	bne.n	800852a <HAL_TIM_OC_ConfigChannel+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008520:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008522:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008526:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800852a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800852c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800852e:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8008530:	65d9      	str	r1, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8008532:	6218      	str	r0, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8008534:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8008536:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008538:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 800853c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	f7ff fe7c 	bl	8008240 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8008548:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800854a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800854c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8008550:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008554:	e7f4      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xb0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	f7ff feb2 	bl	80082c0 <TIM_OC2_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800855c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800855e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008560:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8008564:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008568:	e7ea      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xb0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800856a:	6820      	ldr	r0, [r4, #0]
 800856c:	f7ff fef8 	bl	8008360 <TIM_OC3_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8008570:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8008572:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8008578:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800857c:	e7e0      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xb0>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	f7ff ff3e 	bl	8008400 <TIM_OC4_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8008584:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8008586:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008588:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 800858c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008590:	e7d6      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xb0>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008592:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008594:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008598:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800859a:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800859c:	4e1c      	ldr	r6, [pc, #112]	; (8008610 <HAL_TIM_OC_ConfigChannel+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800859e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80085a2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80085a4:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80085a6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80085a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80085ae:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80085b6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80085bc:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	d013      	beq.n	80085ea <HAL_TIM_OC_ConfigChannel+0x15a>
 80085c2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80085c6:	42b3      	cmp	r3, r6
 80085c8:	d00f      	beq.n	80085ea <HAL_TIM_OC_ConfigChannel+0x15a>
 80085ca:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80085ce:	42b3      	cmp	r3, r6
 80085d0:	d00b      	beq.n	80085ea <HAL_TIM_OC_ConfigChannel+0x15a>
 80085d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80085d6:	42b3      	cmp	r3, r6
 80085d8:	d007      	beq.n	80085ea <HAL_TIM_OC_ConfigChannel+0x15a>
 80085da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80085de:	42b3      	cmp	r3, r6
 80085e0:	d003      	beq.n	80085ea <HAL_TIM_OC_ConfigChannel+0x15a>
 80085e2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80085e6:	42b3      	cmp	r3, r6
 80085e8:	d104      	bne.n	80085f4 <HAL_TIM_OC_ConfigChannel+0x164>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ea:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085ec:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085f0:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80085f4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80085f6:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80085f8:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80085fa:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 80085fc:	6218      	str	r0, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 80085fe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8008600:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008602:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8008606:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800860a:	e799      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xb0>
  __HAL_LOCK(htim); 
 800860c:	2002      	movs	r0, #2
}
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008610:	40012c00 	.word	0x40012c00

08008614 <HAL_TIM_PWM_ConfigChannel>:
{
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8008616:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800861a:	2b01      	cmp	r3, #1
 800861c:	f000 810c 	beq.w	8008838 <HAL_TIM_PWM_ConfigChannel+0x224>
 8008620:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8008622:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8008624:	2101      	movs	r1, #1
 8008626:	4604      	mov	r4, r0
 8008628:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8008630:	2a14      	cmp	r2, #20
 8008632:	d84f      	bhi.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8008634:	e8df f002 	tbb	[pc, r2]
 8008638:	4e4e4e55 	.word	0x4e4e4e55
 800863c:	4e4e4e6d 	.word	0x4e4e4e6d
 8008640:	4e4e4e86 	.word	0x4e4e4e86
 8008644:	4e4e4e9e 	.word	0x4e4e4e9e
 8008648:	4e4e4eb7 	.word	0x4e4e4eb7
 800864c:	0b          	.byte	0x0b
 800864d:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800864e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008650:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008654:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008656:	682f      	ldr	r7, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008658:	4e78      	ldr	r6, [pc, #480]	; (800883c <HAL_TIM_PWM_ConfigChannel+0x228>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800865a:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800865e:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8008660:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8008662:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008666:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800866a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800866e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008672:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008674:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008678:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800867c:	d013      	beq.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x92>
 800867e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008682:	42b3      	cmp	r3, r6
 8008684:	d00f      	beq.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x92>
 8008686:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800868a:	42b3      	cmp	r3, r6
 800868c:	d00b      	beq.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x92>
 800868e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008692:	42b3      	cmp	r3, r6
 8008694:	d007      	beq.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x92>
 8008696:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800869a:	42b3      	cmp	r3, r6
 800869c:	d003      	beq.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x92>
 800869e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80086a2:	42b3      	cmp	r3, r6
 80086a4:	d104      	bne.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x9c>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086a6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086a8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086ac:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 80086b0:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80086b2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80086b6:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;  
 80086b8:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80086bc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80086c2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086c6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80086ca:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80086cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80086d2:	655a      	str	r2, [r3, #84]	; 0x54
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80086d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80086d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80086dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80086e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086e2:	4629      	mov	r1, r5
 80086e4:	6800      	ldr	r0, [r0, #0]
 80086e6:	f7ff fdab 	bl	8008240 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086ec:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086ee:	6999      	ldr	r1, [r3, #24]
 80086f0:	f041 0108 	orr.w	r1, r1, #8
 80086f4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086f6:	6999      	ldr	r1, [r3, #24]
 80086f8:	f021 0104 	bic.w	r1, r1, #4
 80086fc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086fe:	699a      	ldr	r2, [r3, #24]
 8008700:	4302      	orrs	r2, r0
 8008702:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008704:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008706:	2301      	movs	r3, #1
 8008708:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800870c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008710:	e7e6      	b.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008712:	4629      	mov	r1, r5
 8008714:	6800      	ldr	r0, [r0, #0]
 8008716:	f7ff fdd3 	bl	80082c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800871a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800871c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800871e:	6999      	ldr	r1, [r3, #24]
 8008720:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008724:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008726:	6999      	ldr	r1, [r3, #24]
 8008728:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800872c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008734:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008736:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008738:	2301      	movs	r3, #1
 800873a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800873e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008742:	e7cd      	b.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008744:	4629      	mov	r1, r5
 8008746:	6800      	ldr	r0, [r0, #0]
 8008748:	f7ff fe0a 	bl	8008360 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800874c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800874e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008750:	69d9      	ldr	r1, [r3, #28]
 8008752:	f041 0108 	orr.w	r1, r1, #8
 8008756:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008758:	69d9      	ldr	r1, [r3, #28]
 800875a:	f021 0104 	bic.w	r1, r1, #4
 800875e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8008760:	69da      	ldr	r2, [r3, #28]
 8008762:	4302      	orrs	r2, r0
 8008764:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008766:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008768:	2301      	movs	r3, #1
 800876a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800876e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008772:	e7b5      	b.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008774:	4629      	mov	r1, r5
 8008776:	6800      	ldr	r0, [r0, #0]
 8008778:	f7ff fe42 	bl	8008400 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800877c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800877e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008780:	69d9      	ldr	r1, [r3, #28]
 8008782:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008786:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008788:	69d9      	ldr	r1, [r3, #28]
 800878a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800878e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008796:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008798:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800879a:	2301      	movs	r3, #1
 800879c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80087a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80087a4:	e79c      	b.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087a6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087a8:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087ac:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80087ae:	682f      	ldr	r7, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087b0:	4e22      	ldr	r6, [pc, #136]	; (800883c <HAL_TIM_PWM_ConfigChannel+0x228>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087b2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80087b6:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80087b8:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80087ba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80087bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80087c2:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087ca:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087cc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80087d0:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	d013      	beq.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80087d6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80087da:	42b3      	cmp	r3, r6
 80087dc:	d00f      	beq.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80087de:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80087e2:	42b3      	cmp	r3, r6
 80087e4:	d00b      	beq.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80087e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80087ea:	42b3      	cmp	r3, r6
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80087ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80087f2:	42b3      	cmp	r3, r6
 80087f4:	d003      	beq.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80087f6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	d104      	bne.n	8008808 <HAL_TIM_PWM_ConfigChannel+0x1f4>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087fe:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008800:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008804:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8008808:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800880a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800880c:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800880e:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8008810:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008812:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008814:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008816:	f041 0108 	orr.w	r1, r1, #8
 800881a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800881c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800881e:	f021 0104 	bic.w	r1, r1, #4
 8008822:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008826:	4302      	orrs	r2, r0
 8008828:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800882a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800882c:	2301      	movs	r3, #1
 800882e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008832:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008836:	e753      	b.n	80086e0 <HAL_TIM_PWM_ConfigChannel+0xcc>
  __HAL_LOCK(htim);
 8008838:	2002      	movs	r0, #2
}
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883c:	40012c00 	.word	0x40012c00

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8008840:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008844:	2b01      	cmp	r3, #1
 8008846:	d022      	beq.n	800888e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 = htim->Instance->CR2;
 8008848:	6802      	ldr	r2, [r0, #0]
{
 800884a:	b470      	push	{r4, r5, r6}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800884c:	4d11      	ldr	r5, [pc, #68]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 800884e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008850:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008852:	42aa      	cmp	r2, r5
 8008854:	d007      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008856:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800885a:	42aa      	cmp	r2, r5
 800885c:	d003      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800885e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008862:	42aa      	cmp	r2, r5
 8008864:	d103      	bne.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008866:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008868:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800886c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800886e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008870:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008876:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800887a:	4333      	orrs	r3, r6
  __HAL_UNLOCK(htim);
 800887c:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800887e:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8008880:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8008882:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8008884:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
} 
 8008888:	4620      	mov	r0, r4
 800888a:	bc70      	pop	{r4, r5, r6}
 800888c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800888e:	2302      	movs	r3, #2
} 
 8008890:	4618      	mov	r0, r3
 8008892:	4770      	bx	lr
 8008894:	40012c00 	.word	0x40012c00

08008898 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8008898:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d03f      	beq.n	8008920 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 80088a0:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088a2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80088a6:	4602      	mov	r2, r0
 80088a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ac:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088b0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088bc:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088c0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088c6:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088cc:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80088ce:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088d0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80088d6:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088d8:	4c12      	ldr	r4, [pc, #72]	; (8008924 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80088da:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80088dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088e0:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80088e2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088e6:	d007      	beq.n	80088f8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80088e8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80088ec:	42a0      	cmp	r0, r4
 80088ee:	d003      	beq.n	80088f8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80088f0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d10c      	bne.n	8008912 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80088f8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80088fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088fe:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8008902:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800890a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800890c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008910:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8008912:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008914:	6443      	str	r3, [r0, #68]	; 0x44
}
 8008916:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008918:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 800891a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 800891e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008920:	2002      	movs	r0, #2
}
 8008922:	4770      	bx	lr
 8008924:	40012c00 	.word	0x40012c00

08008928 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892a:	460f      	mov	r7, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800892c:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 8008930:	2920      	cmp	r1, #32
{
 8008932:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 8008934:	d130      	bne.n	8008998 <HAL_UART_Transmit+0x70>
  {
    if((pData == NULL ) || (Size == 0U))
 8008936:	b397      	cbz	r7, 800899e <HAL_UART_Transmit+0x76>
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	b382      	cbz	r2, 800899e <HAL_UART_Transmit+0x76>
 800893c:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800893e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8008942:	2b01      	cmp	r3, #1
 8008944:	4604      	mov	r4, r0
 8008946:	d027      	beq.n	8008998 <HAL_UART_Transmit+0x70>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	2300      	movs	r3, #0
 800894a:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800894c:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894e:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8008950:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008954:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008958:	f7fc fb1a 	bl	8004f90 <HAL_GetTick>

    huart->TxXferSize = Size;
 800895c:	9a01      	ldr	r2, [sp, #4]
 800895e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8008962:	4606      	mov	r6, r0
 8008964:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 8008966:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800896a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800896e:	b29b      	uxth	r3, r3
 8008970:	b313      	cbz	r3, 80089b8 <HAL_UART_Transmit+0x90>
    {
      huart->TxXferCount--;
 8008972:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008976:	3a01      	subs	r2, #1
 8008978:	b292      	uxth	r2, r2
 800897a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800897e:	1c69      	adds	r1, r5, #1
 8008980:	d126      	bne.n	80089d0 <HAL_UART_Transmit+0xa8>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008982:	69c2      	ldr	r2, [r0, #28]
 8008984:	0612      	lsls	r2, r2, #24
 8008986:	d5fc      	bpl.n	8008982 <HAL_UART_Transmit+0x5a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898e:	d03b      	beq.n	8008a08 <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8008990:	783b      	ldrb	r3, [r7, #0]
 8008992:	8503      	strh	r3, [r0, #40]	; 0x28
 8008994:	3701      	adds	r7, #1
 8008996:	e7e8      	b.n	800896a <HAL_UART_Transmit+0x42>
    return HAL_BUSY;
 8008998:	2002      	movs	r0, #2
}
 800899a:	b003      	add	sp, #12
 800899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800899e:	2001      	movs	r0, #1
}
 80089a0:	b003      	add	sp, #12
 80089a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a4:	69c3      	ldr	r3, [r0, #28]
 80089a6:	065b      	lsls	r3, r3, #25
 80089a8:	d40b      	bmi.n	80089c2 <HAL_UART_Transmit+0x9a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80089aa:	b1dd      	cbz	r5, 80089e4 <HAL_UART_Transmit+0xbc>
 80089ac:	f7fc faf0 	bl	8004f90 <HAL_GetTick>
 80089b0:	1b80      	subs	r0, r0, r6
 80089b2:	4285      	cmp	r5, r0
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	d315      	bcc.n	80089e4 <HAL_UART_Transmit+0xbc>
 80089b8:	1c69      	adds	r1, r5, #1
 80089ba:	d1f3      	bne.n	80089a4 <HAL_UART_Transmit+0x7c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089bc:	69c3      	ldr	r3, [r0, #28]
 80089be:	065a      	lsls	r2, r3, #25
 80089c0:	d5fc      	bpl.n	80089bc <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_READY;
 80089c2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80089c4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80089c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80089ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80089ce:	e7e4      	b.n	800899a <HAL_UART_Transmit+0x72>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d0:	69c3      	ldr	r3, [r0, #28]
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	d4d8      	bmi.n	8008988 <HAL_UART_Transmit+0x60>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80089d6:	b12d      	cbz	r5, 80089e4 <HAL_UART_Transmit+0xbc>
 80089d8:	f7fc fada 	bl	8004f90 <HAL_GetTick>
 80089dc:	1b80      	subs	r0, r0, r6
 80089de:	4285      	cmp	r5, r0
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	d2cc      	bcs.n	800897e <HAL_UART_Transmit+0x56>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e4:	6803      	ldr	r3, [r0, #0]
 80089e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089ea:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ec:	6883      	ldr	r3, [r0, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80089ee:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f0:	f023 0301 	bic.w	r3, r3, #1
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089f4:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f6:	6083      	str	r3, [r0, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80089f8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
      return HAL_TIMEOUT;
 80089fc:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 80089fe:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8008a02:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
 8008a06:	e7c8      	b.n	800899a <HAL_UART_Transmit+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1c0      	bne.n	8008990 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8008a0e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	8503      	strh	r3, [r0, #40]	; 0x28
        pData += 2U;
 8008a18:	e7a7      	b.n	800896a <HAL_UART_Transmit+0x42>
 8008a1a:	bf00      	nop

08008a1c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a1e:	07da      	lsls	r2, r3, #31
{
 8008a20:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a22:	d506      	bpl.n	8008a32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a24:	6801      	ldr	r1, [r0, #0]
 8008a26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008a28:	684a      	ldr	r2, [r1, #4]
 8008a2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008a2e:	4322      	orrs	r2, r4
 8008a30:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a32:	079c      	lsls	r4, r3, #30
 8008a34:	d506      	bpl.n	8008a44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a36:	6801      	ldr	r1, [r0, #0]
 8008a38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008a3a:	684a      	ldr	r2, [r1, #4]
 8008a3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a40:	4322      	orrs	r2, r4
 8008a42:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a44:	0759      	lsls	r1, r3, #29
 8008a46:	d506      	bpl.n	8008a56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008a4c:	684a      	ldr	r2, [r1, #4]
 8008a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a52:	4322      	orrs	r2, r4
 8008a54:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a56:	071a      	lsls	r2, r3, #28
 8008a58:	d506      	bpl.n	8008a68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a5a:	6801      	ldr	r1, [r0, #0]
 8008a5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008a5e:	684a      	ldr	r2, [r1, #4]
 8008a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a64:	4322      	orrs	r2, r4
 8008a66:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a68:	06dc      	lsls	r4, r3, #27
 8008a6a:	d506      	bpl.n	8008a7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a6c:	6801      	ldr	r1, [r0, #0]
 8008a6e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008a70:	688a      	ldr	r2, [r1, #8]
 8008a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a76:	4322      	orrs	r2, r4
 8008a78:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a7a:	0699      	lsls	r1, r3, #26
 8008a7c:	d506      	bpl.n	8008a8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a7e:	6801      	ldr	r1, [r0, #0]
 8008a80:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008a82:	688a      	ldr	r2, [r1, #8]
 8008a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a88:	4322      	orrs	r2, r4
 8008a8a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a8c:	065a      	lsls	r2, r3, #25
 8008a8e:	d509      	bpl.n	8008aa4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a90:	6801      	ldr	r1, [r0, #0]
 8008a92:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008a94:	684a      	ldr	r2, [r1, #4]
 8008a96:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008a9a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008aa0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aa2:	d00b      	beq.n	8008abc <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	d506      	bpl.n	8008ab6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa8:	6802      	ldr	r2, [r0, #0]
 8008aaa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008aac:	6853      	ldr	r3, [r2, #4]
 8008aae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	6053      	str	r3, [r2, #4]
}
 8008ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008abc:	684a      	ldr	r2, [r1, #4]
 8008abe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ac0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008ac4:	4322      	orrs	r2, r4
 8008ac6:	604a      	str	r2, [r1, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <UART_AdvFeatureConfig+0x88>
 8008aca:	bf00      	nop

08008acc <HAL_UART_Init>:
  if(huart == NULL)
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f000 8134 	beq.w	8008d3a <HAL_UART_Init+0x26e>
{
 8008ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8008ad4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8008ad8:	4604      	mov	r4, r0
 8008ada:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d038      	beq.n	8008b54 <HAL_UART_Init+0x88>
  __HAL_UART_DISABLE(huart);
 8008ae2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ae4:	6927      	ldr	r7, [r4, #16]
 8008ae6:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008ae8:	49b7      	ldr	r1, [pc, #732]	; (8008dc8 <HAL_UART_Init+0x2fc>)
  huart->gState = HAL_UART_STATE_BUSY;
 8008aea:	2224      	movs	r2, #36	; 0x24
 8008aec:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8008af0:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008af2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008af4:	f020 0001 	bic.w	r0, r0, #1
 8008af8:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008afa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008afc:	69e0      	ldr	r0, [r4, #28]
 8008afe:	433a      	orrs	r2, r7
 8008b00:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008b02:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b04:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008b06:	430a      	orrs	r2, r1
 8008b08:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0a:	6859      	ldr	r1, [r3, #4]
 8008b0c:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008b0e:	69a2      	ldr	r2, [r4, #24]
 8008b10:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b12:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8008b16:	4329      	orrs	r1, r5
 8008b18:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008b1a:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b1c:	4dab      	ldr	r5, [pc, #684]	; (8008dcc <HAL_UART_Init+0x300>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008b1e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008b22:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008b24:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b26:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008b28:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b2a:	d018      	beq.n	8008b5e <HAL_UART_Init+0x92>
 8008b2c:	4aa8      	ldr	r2, [pc, #672]	; (8008dd0 <HAL_UART_Init+0x304>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d036      	beq.n	8008ba0 <HAL_UART_Init+0xd4>
 8008b32:	4aa8      	ldr	r2, [pc, #672]	; (8008dd4 <HAL_UART_Init+0x308>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	f000 80c1 	beq.w	8008cbc <HAL_UART_Init+0x1f0>
 8008b3a:	4aa7      	ldr	r2, [pc, #668]	; (8008dd8 <HAL_UART_Init+0x30c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d055      	beq.n	8008bec <HAL_UART_Init+0x120>
 8008b40:	4aa6      	ldr	r2, [pc, #664]	; (8008ddc <HAL_UART_Init+0x310>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f000 80db 	beq.w	8008cfe <HAL_UART_Init+0x232>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008b4c:	f000 8138 	beq.w	8008dc0 <HAL_UART_Init+0x2f4>
    return HAL_ERROR;
 8008b50:	2001      	movs	r0, #1
}
 8008b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8008b54:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8008b58:	f005 fd92 	bl	800e680 <HAL_UART_MspInit>
 8008b5c:	e7c1      	b.n	8008ae2 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b5e:	4aa0      	ldr	r2, [pc, #640]	; (8008de0 <HAL_UART_Init+0x314>)
 8008b60:	49a0      	ldr	r1, [pc, #640]	; (8008de4 <HAL_UART_Init+0x318>)
 8008b62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b64:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008b6c:	5c8a      	ldrb	r2, [r1, r2]
 8008b6e:	f000 80e6 	beq.w	8008d3e <HAL_UART_Init+0x272>
    switch (clocksource)
 8008b72:	2a08      	cmp	r2, #8
 8008b74:	d8ec      	bhi.n	8008b50 <HAL_UART_Init+0x84>
 8008b76:	a101      	add	r1, pc, #4	; (adr r1, 8008b7c <HAL_UART_Init+0xb0>)
 8008b78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b7c:	08008cf9 	.word	0x08008cf9
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008d1b 	.word	0x08008d1b
 8008b88:	08008b51 	.word	0x08008b51
 8008b8c:	08008d15 	.word	0x08008d15
 8008b90:	08008b51 	.word	0x08008b51
 8008b94:	08008b51 	.word	0x08008b51
 8008b98:	08008b51 	.word	0x08008b51
 8008b9c:	08008cdb 	.word	0x08008cdb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ba0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8008ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ba6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008baa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008bae:	f000 80ae 	beq.w	8008d0e <HAL_UART_Init+0x242>
 8008bb2:	f240 809b 	bls.w	8008cec <HAL_UART_Init+0x220>
 8008bb6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008bba:	f000 808b 	beq.w	8008cd4 <HAL_UART_Init+0x208>
 8008bbe:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008bc2:	d1c1      	bne.n	8008b48 <HAL_UART_Init+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008bc8:	f040 80a7 	bne.w	8008d1a <HAL_UART_Init+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	084a      	lsrs	r2, r1, #1
 8008bd0:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8008bd4:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008bd8:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 8008bdc:	f022 010f 	bic.w	r1, r2, #15
 8008be0:	b289      	uxth	r1, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008be2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8008be6:	430a      	orrs	r2, r1
 8008be8:	60da      	str	r2, [r3, #12]
 8008bea:	e01a      	b.n	8008c22 <HAL_UART_Init+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bec:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8008bf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008bf2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008bf6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008bfa:	f000 8088 	beq.w	8008d0e <HAL_UART_Init+0x242>
 8008bfe:	d975      	bls.n	8008cec <HAL_UART_Init+0x220>
 8008c00:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008c04:	d066      	beq.n	8008cd4 <HAL_UART_Init+0x208>
 8008c06:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008c0a:	d0db      	beq.n	8008bc4 <HAL_UART_Init+0xf8>
 8008c0c:	e79c      	b.n	8008b48 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008c0e:	f7fe f9ed 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008c12:	e9d4 3100 	ldrd	r3, r1, [r4]
 8008c16:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 8008c1a:	fbb2 f2f1 	udiv	r2, r2, r1
 8008c1e:	b292      	uxth	r2, r2
 8008c20:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	f040 8083 	bne.w	8008d30 <HAL_UART_Init+0x264>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c38:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008c3a:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3c:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8008c46:	f7fc f9a3 	bl	8004f90 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8008c50:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c52:	d40b      	bmi.n	8008c6c <HAL_UART_Init+0x1a0>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	0752      	lsls	r2, r2, #29
 8008c58:	d424      	bmi.n	8008ca4 <HAL_UART_Init+0x1d8>
  huart->gState  = HAL_UART_STATE_READY;
 8008c5a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8008c5c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8008c5e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8008c62:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8008c66:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6c:	69dd      	ldr	r5, [r3, #28]
 8008c6e:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008c72:	d1ef      	bne.n	8008c54 <HAL_UART_Init+0x188>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008c74:	f7fc f98c 	bl	8004f90 <HAL_GetTick>
 8008c78:	1b80      	subs	r0, r0, r6
 8008c7a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c7e:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008c80:	d3f4      	bcc.n	8008c6c <HAL_UART_Init+0x1a0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8a:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8008c8c:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8e:	f022 0201 	bic.w	r2, r2, #1
 8008c92:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8008c94:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8008c96:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8008c9a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca4:	69dd      	ldr	r5, [r3, #28]
 8008ca6:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008caa:	d1d6      	bne.n	8008c5a <HAL_UART_Init+0x18e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008cac:	f7fc f970 	bl	8004f90 <HAL_GetTick>
 8008cb0:	1b80      	subs	r0, r0, r6
 8008cb2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cb6:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008cb8:	d3f4      	bcc.n	8008ca4 <HAL_UART_Init+0x1d8>
 8008cba:	e7e2      	b.n	8008c82 <HAL_UART_Init+0x1b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cbc:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8008cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008cc2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008cc6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008cca:	d020      	beq.n	8008d0e <HAL_UART_Init+0x242>
 8008ccc:	d90e      	bls.n	8008cec <HAL_UART_Init+0x220>
 8008cce:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8008cd2:	d154      	bne.n	8008d7e <HAL_UART_Init+0x2b2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008cd8:	d06a      	beq.n	8008db0 <HAL_UART_Init+0x2e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008cda:	6861      	ldr	r1, [r4, #4]
 8008cdc:	084a      	lsrs	r2, r1, #1
 8008cde:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8008ce2:	fbb2 f2f1 	udiv	r2, r2, r1
 8008ce6:	b292      	uxth	r2, r2
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	e79a      	b.n	8008c22 <HAL_UART_Init+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	f47f af2b 	bne.w	8008b48 <HAL_UART_Init+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008cf6:	d060      	beq.n	8008dba <HAL_UART_Init+0x2ee>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008cf8:	f7fe f960 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 8008cfc:	e789      	b.n	8008c12 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cfe:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8008d02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d04:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008d08:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008d0c:	d12e      	bne.n	8008d6c <HAL_UART_Init+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d12:	d039      	beq.n	8008d88 <HAL_UART_Init+0x2bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008d14:	f7fe f91e 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
 8008d18:	e77b      	b.n	8008c12 <HAL_UART_Init+0x146>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008d1a:	6861      	ldr	r1, [r4, #4]
 8008d1c:	084a      	lsrs	r2, r1, #1
 8008d1e:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 8008d22:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 8008d26:	fbb2 f2f1 	udiv	r2, r2, r1
 8008d2a:	b292      	uxth	r2, r2
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	e778      	b.n	8008c22 <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7ff fe73 	bl	8008a1c <UART_AdvFeatureConfig>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	e777      	b.n	8008c2a <HAL_UART_Init+0x15e>
    return HAL_ERROR;
 8008d3a:	2001      	movs	r0, #1
}
 8008d3c:	4770      	bx	lr
    switch (clocksource)
 8008d3e:	2a08      	cmp	r2, #8
 8008d40:	d83e      	bhi.n	8008dc0 <HAL_UART_Init+0x2f4>
 8008d42:	a101      	add	r1, pc, #4	; (adr r1, 8008d48 <HAL_UART_Init+0x27c>)
 8008d44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d48:	08008dbb 	.word	0x08008dbb
 8008d4c:	08008dab 	.word	0x08008dab
 8008d50:	08008bcd 	.word	0x08008bcd
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008d89 	.word	0x08008d89
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008db1 	.word	0x08008db1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d6c:	d9be      	bls.n	8008cec <HAL_UART_Init+0x220>
 8008d6e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008d72:	d0af      	beq.n	8008cd4 <HAL_UART_Init+0x208>
 8008d74:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8008d78:	f43f af24 	beq.w	8008bc4 <HAL_UART_Init+0xf8>
 8008d7c:	e6e4      	b.n	8008b48 <HAL_UART_Init+0x7c>
 8008d7e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8008d82:	f43f af1f 	beq.w	8008bc4 <HAL_UART_Init+0xf8>
 8008d86:	e6df      	b.n	8008b48 <HAL_UART_Init+0x7c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008d88:	f7fe f8e4 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
    huart->Instance->BRR = brrtemp;
 8008d8c:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008d90:	084a      	lsrs	r2, r1, #1
 8008d92:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8008d96:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 8008d9a:	f020 020f 	bic.w	r2, r0, #15
 8008d9e:	b292      	uxth	r2, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008da0:	f3c0 0042 	ubfx	r0, r0, #1, #3
    huart->Instance->BRR = brrtemp;
 8008da4:	4310      	orrs	r0, r2
 8008da6:	60d8      	str	r0, [r3, #12]
 8008da8:	e73b      	b.n	8008c22 <HAL_UART_Init+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008daa:	f7fe f91f 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
 8008dae:	e7ed      	b.n	8008d8c <HAL_UART_Init+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008db0:	6861      	ldr	r1, [r4, #4]
 8008db2:	084a      	lsrs	r2, r1, #1
 8008db4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008db8:	e70e      	b.n	8008bd8 <HAL_UART_Init+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008dba:	f7fe f8ff 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 8008dbe:	e7e5      	b.n	8008d8c <HAL_UART_Init+0x2c0>
    huart->Instance->BRR = brrtemp;
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 8008dc4:	2001      	movs	r0, #1
}
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	efff69f3 	.word	0xefff69f3
 8008dcc:	40013800 	.word	0x40013800
 8008dd0:	40004400 	.word	0x40004400
 8008dd4:	40004800 	.word	0x40004800
 8008dd8:	40004c00 	.word	0x40004c00
 8008ddc:	40005000 	.word	0x40005000
 8008de0:	40021000 	.word	0x40021000
 8008de4:	08011830 	.word	0x08011830

08008de8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008de8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008dea:	f000 fe8f 	bl	8009b0c <vTaskStartScheduler>
  
  return osOK;
}
 8008dee:	2000      	movs	r0, #0
 8008df0:	bd08      	pop	{r3, pc}
 8008df2:	bf00      	nop

08008df4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008df4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008df6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8008dfa:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8008dfc:	2c84      	cmp	r4, #132	; 0x84
{
 8008dfe:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8008e00:	bf14      	ite	ne
 8008e02:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e04:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e06:	ad03      	add	r5, sp, #12
{
 8008e08:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e0a:	6840      	ldr	r0, [r0, #4]
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	8a12      	ldrh	r2, [r2, #16]
 8008e10:	e9cd 4500 	strd	r4, r5, [sp]
 8008e14:	f000 fd38 	bl	8009888 <xTaskCreate>
 8008e18:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e1a:	bf0c      	ite	eq
 8008e1c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8008e1e:	2000      	movne	r0, #0
}
 8008e20:	b005      	add	sp, #20
 8008e22:	bd30      	pop	{r4, r5, pc}

08008e24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e24:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e26:	2800      	cmp	r0, #0
 8008e28:	bf08      	it	eq
 8008e2a:	2001      	moveq	r0, #1
 8008e2c:	f001 f8c6 	bl	8009fbc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e30:	2000      	movs	r0, #0
 8008e32:	bd08      	pop	{r3, pc}

08008e34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e34:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e38:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e3c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e3e:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e40:	e9c0 2300 	strd	r2, r3, [r0]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e44:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e54:	e9d0 2300 	ldrd	r2, r3, [r0]
{
 8008e58:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e5a:	689c      	ldr	r4, [r3, #8]
 8008e5c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e5e:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008e60:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008e62:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e64:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e66:	6099      	str	r1, [r3, #8]
}
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e6c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e6e:	6002      	str	r2, [r0, #0]
}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e74:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e76:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e78:	1c6b      	adds	r3, r5, #1
 8008e7a:	d011      	beq.n	8008ea0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e7c:	f100 0208 	add.w	r2, r0, #8
 8008e80:	e000      	b.n	8008e84 <vListInsert+0x10>
 8008e82:	461a      	mov	r2, r3
 8008e84:	6853      	ldr	r3, [r2, #4]
 8008e86:	681c      	ldr	r4, [r3, #0]
 8008e88:	42ac      	cmp	r4, r5
 8008e8a:	d9fa      	bls.n	8008e82 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e8c:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e8e:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008e90:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e92:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e94:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e96:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e98:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e9a:	6004      	str	r4, [r0, #0]
}
 8008e9c:	bc30      	pop	{r4, r5}
 8008e9e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ea0:	6902      	ldr	r2, [r0, #16]
 8008ea2:	6853      	ldr	r3, [r2, #4]
 8008ea4:	e7f2      	b.n	8008e8c <vListInsert+0x18>
 8008ea6:	bf00      	nop

08008ea8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ea8:	6843      	ldr	r3, [r0, #4]
 8008eaa:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008eac:	6902      	ldr	r2, [r0, #16]
{
 8008eae:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eb0:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eb2:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008eb4:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eb6:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8008eb8:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8008eba:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ebc:	bf08      	it	eq
 8008ebe:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 8008ec0:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 8008ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 8008eca:	6013      	str	r3, [r2, #0]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	4770      	bx	lr

08008ed0 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ed0:	b940      	cbnz	r0, 8008ee4 <xQueueGenericCreate+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	e7fe      	b.n	8008ee2 <xQueueGenericCreate+0x12>
	{
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	460d      	mov	r5, r1

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008eea:	b151      	cbz	r1, 8008f02 <xQueueGenericCreate+0x32>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eec:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008ef0:	3048      	adds	r0, #72	; 0x48
 8008ef2:	f001 fc89 	bl	800a808 <pvPortMalloc>

		if( pxNewQueue != NULL )
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	b358      	cbz	r0, 8008f52 <xQueueGenericCreate+0x82>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008efa:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008efe:	6003      	str	r3, [r0, #0]
 8008f00:	e005      	b.n	8008f0e <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f02:	2048      	movs	r0, #72	; 0x48
 8008f04:	f001 fc80 	bl	800a808 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008f08:	4604      	mov	r4, r0
 8008f0a:	b310      	cbz	r0, 8008f52 <xQueueGenericCreate+0x82>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f0c:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 8008f0e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8008f12:	f001 fb17 	bl	800a544 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008f16:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8008f1a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f1c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008f1e:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008f22:	1acb      	subs	r3, r1, r3
 8008f24:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f26:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008f28:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8008f2a:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f2c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008f2e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f30:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008f34:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 8008f36:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f3a:	f104 0010 	add.w	r0, r4, #16
 8008f3e:	f7ff ff79 	bl	8008e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f46:	f7ff ff75 	bl	8008e34 <vListInitialise>
	taskEXIT_CRITICAL();
 8008f4a:	f001 fb1d 	bl	800a588 <vPortExitCritical>
	}
 8008f4e:	4620      	mov	r0, r4
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f52:	2400      	movs	r4, #0
	}
 8008f54:	4620      	mov	r0, r4
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f000 8122 	beq.w	80091aa <xQueueGenericSend+0x252>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f66:	2900      	cmp	r1, #0
 8008f68:	f000 8112 	beq.w	8009190 <xQueueGenericSend+0x238>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d10b      	bne.n	8008f88 <xQueueGenericSend+0x30>
 8008f70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f72:	2a01      	cmp	r2, #1
 8008f74:	d008      	beq.n	8008f88 <xQueueGenericSend+0x30>
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	e7fe      	b.n	8008f86 <xQueueGenericSend+0x2e>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	461e      	mov	r6, r3
 8008f8c:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8e:	f001 f9bf 	bl	800a310 <xTaskGetSchedulerState>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f040 80f9 	bne.w	800918a <xQueueGenericSend+0x232>
 8008f98:	9b01      	ldr	r3, [sp, #4]
 8008f9a:	b143      	cbz	r3, 8008fae <xQueueGenericSend+0x56>
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	e7fe      	b.n	8008fac <xQueueGenericSend+0x54>
 8008fae:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fb0:	f001 fac8 	bl	800a544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8008fb8:	f8df 9314 	ldr.w	r9, [pc, #788]	; 80092d0 <xQueueGenericSend+0x378>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fbc:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 8008fbe:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fc2:	d375      	bcc.n	80090b0 <xQueueGenericSend+0x158>
 8008fc4:	2e02      	cmp	r6, #2
 8008fc6:	f000 80f9 	beq.w	80091bc <xQueueGenericSend+0x264>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fca:	9d01      	ldr	r5, [sp, #4]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	f000 814c 	beq.w	800926a <xQueueGenericSend+0x312>
				else if( xEntryTimeSet == pdFALSE )
 8008fd2:	f1ba 0f00 	cmp.w	sl, #0
 8008fd6:	d102      	bne.n	8008fde <xQueueGenericSend+0x86>
					vTaskSetTimeOutState( &xTimeOut );
 8008fd8:	a802      	add	r0, sp, #8
 8008fda:	f001 f937 	bl	800a24c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8008fde:	f001 fad3 	bl	800a588 <vPortExitCritical>
		vTaskSuspendAll();
 8008fe2:	f000 fe9f 	bl	8009d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fe6:	f001 faad 	bl	800a544 <vPortEnterCritical>
 8008fea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008fee:	2bff      	cmp	r3, #255	; 0xff
 8008ff0:	bf08      	it	eq
 8008ff2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8008ff6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008ffa:	2bff      	cmp	r3, #255	; 0xff
 8008ffc:	bf08      	it	eq
 8008ffe:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8009002:	f001 fac1 	bl	800a588 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009006:	a901      	add	r1, sp, #4
 8009008:	a802      	add	r0, sp, #8
 800900a:	f001 f935 	bl	800a278 <xTaskCheckForTimeOut>
 800900e:	2800      	cmp	r0, #0
 8009010:	f040 8111 	bne.w	8009236 <xQueueGenericSend+0x2de>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009014:	f001 fa96 	bl	800a544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800901a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800901c:	429a      	cmp	r2, r3
 800901e:	d067      	beq.n	80090f0 <xQueueGenericSend+0x198>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009020:	f001 fab2 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009024:	f001 fa8e 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009028:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800902c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800902e:	2d00      	cmp	r5, #0
 8009030:	dd11      	ble.n	8009056 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009034:	b17b      	cbz	r3, 8009056 <xQueueGenericSend+0xfe>
 8009036:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800903a:	e001      	b.n	8009040 <xQueueGenericSend+0xe8>
 800903c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903e:	b153      	cbz	r3, 8009056 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009040:	4650      	mov	r0, sl
 8009042:	f001 f8bf 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009046:	b108      	cbz	r0, 800904c <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 8009048:	f001 f956 	bl	800a2f8 <vTaskMissedYield>
 800904c:	3d01      	subs	r5, #1
 800904e:	b2eb      	uxtb	r3, r5
 8009050:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1f2      	bne.n	800903c <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 8009056:	23ff      	movs	r3, #255	; 0xff
 8009058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800905c:	f001 fa94 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009060:	f001 fa70 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009064:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009068:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800906a:	2d00      	cmp	r5, #0
 800906c:	dd11      	ble.n	8009092 <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	b17b      	cbz	r3, 8009092 <xQueueGenericSend+0x13a>
 8009072:	f104 0a10 	add.w	sl, r4, #16
 8009076:	e001      	b.n	800907c <xQueueGenericSend+0x124>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b153      	cbz	r3, 8009092 <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907c:	4650      	mov	r0, sl
 800907e:	f001 f8a1 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009082:	b108      	cbz	r0, 8009088 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 8009084:	f001 f938 	bl	800a2f8 <vTaskMissedYield>
 8009088:	3d01      	subs	r5, #1
 800908a:	b2eb      	uxtb	r3, r5
 800908c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f2      	bne.n	8009078 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 8009092:	23ff      	movs	r3, #255	; 0xff
 8009094:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009098:	f001 fa76 	bl	800a588 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800909c:	f000 ff04 	bl	8009ea8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80090a0:	f001 fa50 	bl	800a544 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80090a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	f04f 0a01 	mov.w	sl, #1
 80090ae:	d289      	bcs.n	8008fc4 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	f000 8086 	beq.w	80091c6 <xQueueGenericSend+0x26e>
	else if( xPosition == queueSEND_TO_BACK )
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	f000 80a1 	beq.w	8009202 <xQueueGenericSend+0x2aa>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c0:	4639      	mov	r1, r7
 80090c2:	68e0      	ldr	r0, [r4, #12]
 80090c4:	f005 fb6c 	bl	800e7a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090ca:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090cc:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090ce:	425b      	negs	r3, r3
 80090d0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090d4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d6:	d202      	bcs.n	80090de <xQueueGenericSend+0x186>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80090d8:	6862      	ldr	r2, [r4, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80090de:	2e02      	cmp	r6, #2
 80090e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e2:	f000 80c6 	beq.w	8009272 <xQueueGenericSend+0x31a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80090e6:	3501      	adds	r5, #1
 80090e8:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d071      	beq.n	80091d2 <xQueueGenericSend+0x27a>
 80090ee:	e09b      	b.n	8009228 <xQueueGenericSend+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090f0:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 80090f4:	f001 fa48 	bl	800a588 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090f8:	4650      	mov	r0, sl
 80090fa:	9901      	ldr	r1, [sp, #4]
 80090fc:	f001 f812 	bl	800a124 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009100:	f001 fa20 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009104:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009108:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800910a:	2d00      	cmp	r5, #0
 800910c:	dd11      	ble.n	8009132 <xQueueGenericSend+0x1da>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800910e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009110:	b17b      	cbz	r3, 8009132 <xQueueGenericSend+0x1da>
 8009112:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8009116:	e001      	b.n	800911c <xQueueGenericSend+0x1c4>
 8009118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911a:	b153      	cbz	r3, 8009132 <xQueueGenericSend+0x1da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800911c:	4658      	mov	r0, fp
 800911e:	f001 f851 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009122:	b108      	cbz	r0, 8009128 <xQueueGenericSend+0x1d0>
						vTaskMissedYield();
 8009124:	f001 f8e8 	bl	800a2f8 <vTaskMissedYield>
 8009128:	3d01      	subs	r5, #1
 800912a:	b2eb      	uxtb	r3, r5
 800912c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f2      	bne.n	8009118 <xQueueGenericSend+0x1c0>
		pxQueue->cTxLock = queueUNLOCKED;
 8009132:	23ff      	movs	r3, #255	; 0xff
 8009134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009138:	f001 fa26 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 800913c:	f001 fa02 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009140:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009144:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009146:	2d00      	cmp	r5, #0
 8009148:	dc0a      	bgt.n	8009160 <xQueueGenericSend+0x208>
 800914a:	e00c      	b.n	8009166 <xQueueGenericSend+0x20e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800914c:	4650      	mov	r0, sl
 800914e:	f001 f839 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009152:	b108      	cbz	r0, 8009158 <xQueueGenericSend+0x200>
					vTaskMissedYield();
 8009154:	f001 f8d0 	bl	800a2f8 <vTaskMissedYield>
 8009158:	3d01      	subs	r5, #1
 800915a:	b2eb      	uxtb	r3, r5
 800915c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800915e:	b113      	cbz	r3, 8009166 <xQueueGenericSend+0x20e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f2      	bne.n	800914c <xQueueGenericSend+0x1f4>
		pxQueue->cRxLock = queueUNLOCKED;
 8009166:	23ff      	movs	r3, #255	; 0xff
 8009168:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800916c:	f001 fa0c 	bl	800a588 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8009170:	f000 fe9a 	bl	8009ea8 <xTaskResumeAll>
 8009174:	2800      	cmp	r0, #0
 8009176:	d193      	bne.n	80090a0 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 8009178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800917c:	f8c9 3000 	str.w	r3, [r9]
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	e78a      	b.n	80090a0 <xQueueGenericSend+0x148>
 800918a:	f04f 0a00 	mov.w	sl, #0
 800918e:	e70f      	b.n	8008fb0 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009190:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009192:	2a00      	cmp	r2, #0
 8009194:	f43f aeea 	beq.w	8008f6c <xQueueGenericSend+0x14>
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	e7fe      	b.n	80091a8 <xQueueGenericSend+0x250>
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	e7fe      	b.n	80091ba <xQueueGenericSend+0x262>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091be:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	f47f af7d 	bne.w	80090c0 <xQueueGenericSend+0x168>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091c6:	6826      	ldr	r6, [r4, #0]
 80091c8:	3501      	adds	r5, #1
 80091ca:	b146      	cbz	r6, 80091de <xQueueGenericSend+0x286>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80091ce:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091d0:	bb53      	cbnz	r3, 8009228 <xQueueGenericSend+0x2d0>
				taskEXIT_CRITICAL();
 80091d2:	f001 f9d9 	bl	800a588 <vPortExitCritical>
				return pdPASS;
 80091d6:	2001      	movs	r0, #1
}
 80091d8:	b005      	add	sp, #20
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80091de:	6860      	ldr	r0, [r4, #4]
 80091e0:	f001 f8f0 	bl	800a3c4 <xTaskPriorityDisinherit>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 80091e6:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80091e8:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ea:	b9eb      	cbnz	r3, 8009228 <xQueueGenericSend+0x2d0>
					else if( xYieldRequired != pdFALSE )
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0f0      	beq.n	80091d2 <xQueueGenericSend+0x27a>
						queueYIELD_IF_USING_PREEMPTION();
 80091f0:	4b37      	ldr	r3, [pc, #220]	; (80092d0 <xQueueGenericSend+0x378>)
 80091f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	e7e7      	b.n	80091d2 <xQueueGenericSend+0x27a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009202:	4639      	mov	r1, r7
 8009204:	68a0      	ldr	r0, [r4, #8]
 8009206:	f005 facb 	bl	800e7a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800920e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009210:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009212:	4293      	cmp	r3, r2
 8009214:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009218:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800921a:	d3d7      	bcc.n	80091cc <xQueueGenericSend+0x274>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800921c:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800921e:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009220:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009222:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0d4      	beq.n	80091d2 <xQueueGenericSend+0x27a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009228:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800922c:	f000 ffca 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009230:	2800      	cmp	r0, #0
 8009232:	d1dd      	bne.n	80091f0 <xQueueGenericSend+0x298>
 8009234:	e7cd      	b.n	80091d2 <xQueueGenericSend+0x27a>
	taskENTER_CRITICAL();
 8009236:	f001 f985 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800923a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800923e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009240:	2d00      	cmp	r5, #0
 8009242:	dd1d      	ble.n	8009280 <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009246:	b1db      	cbz	r3, 8009280 <xQueueGenericSend+0x328>
 8009248:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800924c:	e005      	b.n	800925a <xQueueGenericSend+0x302>
 800924e:	3d01      	subs	r5, #1
 8009250:	b2eb      	uxtb	r3, r5
 8009252:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009254:	b1a3      	cbz	r3, 8009280 <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009258:	b193      	cbz	r3, 8009280 <xQueueGenericSend+0x328>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800925a:	4630      	mov	r0, r6
 800925c:	f000 ffb2 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0f4      	beq.n	800924e <xQueueGenericSend+0x2f6>
						vTaskMissedYield();
 8009264:	f001 f848 	bl	800a2f8 <vTaskMissedYield>
 8009268:	e7f1      	b.n	800924e <xQueueGenericSend+0x2f6>
					taskEXIT_CRITICAL();
 800926a:	f001 f98d 	bl	800a588 <vPortExitCritical>
					return errQUEUE_FULL;
 800926e:	4628      	mov	r0, r5
 8009270:	e7b2      	b.n	80091d8 <xQueueGenericSend+0x280>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009272:	2d00      	cmp	r5, #0
 8009274:	d1ab      	bne.n	80091ce <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009276:	2201      	movs	r2, #1
 8009278:	63a2      	str	r2, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0a9      	beq.n	80091d2 <xQueueGenericSend+0x27a>
 800927e:	e7d3      	b.n	8009228 <xQueueGenericSend+0x2d0>
		pxQueue->cTxLock = queueUNLOCKED;
 8009280:	23ff      	movs	r3, #255	; 0xff
 8009282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009286:	f001 f97f 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 800928a:	f001 f95b 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800928e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009292:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009294:	2d00      	cmp	r5, #0
 8009296:	dd12      	ble.n	80092be <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	b183      	cbz	r3, 80092be <xQueueGenericSend+0x366>
 800929c:	f104 0610 	add.w	r6, r4, #16
 80092a0:	e005      	b.n	80092ae <xQueueGenericSend+0x356>
 80092a2:	3d01      	subs	r5, #1
 80092a4:	b2eb      	uxtb	r3, r5
 80092a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092a8:	b14b      	cbz	r3, 80092be <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	b13b      	cbz	r3, 80092be <xQueueGenericSend+0x366>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 ff88 	bl	800a1c4 <xTaskRemoveFromEventList>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d0f4      	beq.n	80092a2 <xQueueGenericSend+0x34a>
					vTaskMissedYield();
 80092b8:	f001 f81e 	bl	800a2f8 <vTaskMissedYield>
 80092bc:	e7f1      	b.n	80092a2 <xQueueGenericSend+0x34a>
		pxQueue->cRxLock = queueUNLOCKED;
 80092be:	23ff      	movs	r3, #255	; 0xff
 80092c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80092c4:	f001 f960 	bl	800a588 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80092c8:	f000 fdee 	bl	8009ea8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80092cc:	2000      	movs	r0, #0
 80092ce:	e783      	b.n	80091d8 <xQueueGenericSend+0x280>
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <xQueueCreateMutex>:
	{
 80092d4:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80092d6:	2048      	movs	r0, #72	; 0x48
 80092d8:	f001 fa96 	bl	800a808 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80092dc:	4604      	mov	r4, r0
 80092de:	b350      	cbz	r0, 8009336 <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 80092e0:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80092e2:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092e4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80092e6:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 80092ea:	f001 f92b 	bl	800a544 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80092ee:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80092f2:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092f4:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80092f6:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80092fa:	1a9a      	subs	r2, r3, r2
 80092fc:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80092fe:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8009300:	26ff      	movs	r6, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009302:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009306:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009308:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800930c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009310:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009314:	f7ff fd8e 	bl	8008e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009318:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800931c:	f7ff fd8a 	bl	8008e34 <vListInitialise>
	taskEXIT_CRITICAL();
 8009320:	f001 f932 	bl	800a588 <vPortExitCritical>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009324:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009328:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800932a:	462b      	mov	r3, r5
 800932c:	462a      	mov	r2, r5
 800932e:	4629      	mov	r1, r5
 8009330:	4620      	mov	r0, r4
 8009332:	f7ff fe11 	bl	8008f58 <xQueueGenericSend>
	}
 8009336:	4620      	mov	r0, r4
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	bf00      	nop

0800933c <xQueueGiveMutexRecursive>:
	{
 800933c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800933e:	b138      	cbz	r0, 8009350 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009340:	6845      	ldr	r5, [r0, #4]
 8009342:	4604      	mov	r4, r0
 8009344:	f000 ffde 	bl	800a304 <xTaskGetCurrentTaskHandle>
 8009348:	4285      	cmp	r5, r0
 800934a:	d00a      	beq.n	8009362 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800934c:	2000      	movs	r0, #0
	}
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	e7fe      	b.n	8009360 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 8009362:	68e3      	ldr	r3, [r4, #12]
 8009364:	3b01      	subs	r3, #1
 8009366:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009368:	b10b      	cbz	r3, 800936e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800936a:	2001      	movs	r0, #1
	}
 800936c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800936e:	4620      	mov	r0, r4
 8009370:	461a      	mov	r2, r3
 8009372:	4619      	mov	r1, r3
 8009374:	f7ff fdf0 	bl	8008f58 <xQueueGenericSend>
			xReturn = pdPASS;
 8009378:	2001      	movs	r0, #1
	}
 800937a:	bd38      	pop	{r3, r4, r5, pc}

0800937c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 800937c:	2800      	cmp	r0, #0
 800937e:	d037      	beq.n	80093f0 <xQueueGenericSendFromISR+0x74>
{
 8009380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009384:	b341      	cbz	r1, 80093d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009386:	2b02      	cmp	r3, #2
 8009388:	d10b      	bne.n	80093a2 <xQueueGenericSendFromISR+0x26>
 800938a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800938c:	2c01      	cmp	r4, #1
 800938e:	d008      	beq.n	80093a2 <xQueueGenericSendFromISR+0x26>
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	e7fe      	b.n	80093a0 <xQueueGenericSendFromISR+0x24>
 80093a2:	4604      	mov	r4, r0
 80093a4:	461f      	mov	r7, r3
 80093a6:	4691      	mov	r9, r2
 80093a8:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093aa:	f001 f9d7 	bl	800a75c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093ae:	f3ef 8811 	mrs	r8, BASEPRI
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80093c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d31b      	bcc.n	8009402 <xQueueGenericSendFromISR+0x86>
 80093ca:	2f02      	cmp	r7, #2
 80093cc:	d034      	beq.n	8009438 <xQueueGenericSendFromISR+0xbc>
			xReturn = errQUEUE_FULL;
 80093ce:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093d0:	f388 8811 	msr	BASEPRI, r8
}
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80093da:	2c00      	cmp	r4, #0
 80093dc:	d0d3      	beq.n	8009386 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	e7fe      	b.n	80093ee <xQueueGenericSendFromISR+0x72>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	e7fe      	b.n	8009400 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009402:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009406:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009408:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800940a:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800940c:	b1da      	cbz	r2, 8009446 <xQueueGenericSendFromISR+0xca>
	else if( xPosition == queueSEND_TO_BACK )
 800940e:	b36f      	cbz	r7, 800946c <xQueueGenericSendFromISR+0xf0>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009410:	4651      	mov	r1, sl
 8009412:	68e0      	ldr	r0, [r4, #12]
 8009414:	f005 f9c4 	bl	800e7a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800941a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800941c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800941e:	425b      	negs	r3, r3
 8009420:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009422:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009424:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009426:	d202      	bcs.n	800942e <xQueueGenericSendFromISR+0xb2>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009428:	6862      	ldr	r2, [r4, #4]
 800942a:	4413      	add	r3, r2
 800942c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800942e:	2f02      	cmp	r7, #2
 8009430:	d10f      	bne.n	8009452 <xQueueGenericSendFromISR+0xd6>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009432:	b176      	cbz	r6, 8009452 <xQueueGenericSendFromISR+0xd6>
				--uxMessagesWaiting;
 8009434:	3e01      	subs	r6, #1
 8009436:	e00c      	b.n	8009452 <xQueueGenericSendFromISR+0xd6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009438:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800943c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800943e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8009440:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009442:	2a00      	cmp	r2, #0
 8009444:	d1e4      	bne.n	8009410 <xQueueGenericSendFromISR+0x94>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009446:	6827      	ldr	r7, [r4, #0]
 8009448:	b91f      	cbnz	r7, 8009452 <xQueueGenericSendFromISR+0xd6>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800944a:	6860      	ldr	r0, [r4, #4]
 800944c:	f000 ffba 	bl	800a3c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8009450:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009452:	3601      	adds	r6, #1
			if( cTxLock == queueUNLOCKED )
 8009454:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009456:	63a6      	str	r6, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009458:	d016      	beq.n	8009488 <xQueueGenericSendFromISR+0x10c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800945a:	1c6b      	adds	r3, r5, #1
 800945c:	b25b      	sxtb	r3, r3
 800945e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009462:	2001      	movs	r0, #1
	__asm volatile
 8009464:	f388 8811 	msr	BASEPRI, r8
}
 8009468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800946c:	4651      	mov	r1, sl
 800946e:	68a0      	ldr	r0, [r4, #8]
 8009470:	f005 f996 	bl	800e7a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009478:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800947a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800947c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800947e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009480:	d3e7      	bcc.n	8009452 <xQueueGenericSendFromISR+0xd6>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	e7e4      	b.n	8009452 <xQueueGenericSendFromISR+0xd6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0e9      	beq.n	8009462 <xQueueGenericSendFromISR+0xe6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800948e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009492:	f000 fe97 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0e3      	beq.n	8009462 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 800949a:	f1b9 0f00 	cmp.w	r9, #0
 800949e:	d0e0      	beq.n	8009462 <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094a0:	2001      	movs	r0, #1
 80094a2:	f8c9 0000 	str.w	r0, [r9]
 80094a6:	e793      	b.n	80093d0 <xQueueGenericSendFromISR+0x54>

080094a8 <xQueueGenericReceive>:
{
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	b085      	sub	sp, #20
 80094ae:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f000 8158 	beq.w	8009766 <xQueueGenericReceive+0x2be>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b6:	2900      	cmp	r1, #0
 80094b8:	f000 8148 	beq.w	800974c <xQueueGenericReceive+0x2a4>
 80094bc:	4604      	mov	r4, r0
 80094be:	4698      	mov	r8, r3
 80094c0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094c2:	f000 ff25 	bl	800a310 <xTaskGetSchedulerState>
 80094c6:	b950      	cbnz	r0, 80094de <xQueueGenericReceive+0x36>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	b143      	cbz	r3, 80094de <xQueueGenericReceive+0x36>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	e7fe      	b.n	80094dc <xQueueGenericReceive+0x34>
		taskENTER_CRITICAL();
 80094de:	f001 f831 	bl	800a544 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	f040 80ba 	bne.w	800965e <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d06a      	beq.n	80095c6 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
 80094f0:	a802      	add	r0, sp, #8
 80094f2:	f000 feab 	bl	800a24c <vTaskSetTimeOutState>
					portYIELD_WITHIN_API();
 80094f6:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80097b4 <xQueueGenericReceive+0x30c>
		prvLockQueue( pxQueue );
 80094fa:	46aa      	mov	sl, r5
 80094fc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8009500:	f001 f842 	bl	800a588 <vPortExitCritical>
		vTaskSuspendAll();
 8009504:	f000 fc0e 	bl	8009d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009508:	f001 f81c 	bl	800a544 <vPortEnterCritical>
 800950c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009510:	2bff      	cmp	r3, #255	; 0xff
 8009512:	bf08      	it	eq
 8009514:	f884 a044 	strbeq.w	sl, [r4, #68]	; 0x44
 8009518:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800951c:	2bff      	cmp	r3, #255	; 0xff
 800951e:	bf08      	it	eq
 8009520:	f884 a045 	strbeq.w	sl, [r4, #69]	; 0x45
 8009524:	f001 f830 	bl	800a588 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009528:	a901      	add	r1, sp, #4
 800952a:	a802      	add	r0, sp, #8
 800952c:	f000 fea4 	bl	800a278 <xTaskCheckForTimeOut>
 8009530:	2800      	cmp	r0, #0
 8009532:	d14e      	bne.n	80095d2 <xQueueGenericReceive+0x12a>
	taskENTER_CRITICAL();
 8009534:	f001 f806 	bl	800a544 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80b9 	beq.w	80096b2 <xQueueGenericReceive+0x20a>
	taskEXIT_CRITICAL();
 8009540:	f001 f822 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009544:	f000 fffe 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009548:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800954c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800954e:	2d00      	cmp	r5, #0
 8009550:	dc0a      	bgt.n	8009568 <xQueueGenericReceive+0xc0>
 8009552:	e00c      	b.n	800956e <xQueueGenericReceive+0xc6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009554:	4630      	mov	r0, r6
 8009556:	f000 fe35 	bl	800a1c4 <xTaskRemoveFromEventList>
 800955a:	b108      	cbz	r0, 8009560 <xQueueGenericReceive+0xb8>
						vTaskMissedYield();
 800955c:	f000 fecc 	bl	800a2f8 <vTaskMissedYield>
 8009560:	3d01      	subs	r5, #1
 8009562:	b2eb      	uxtb	r3, r5
 8009564:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009566:	b113      	cbz	r3, 800956e <xQueueGenericReceive+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f2      	bne.n	8009554 <xQueueGenericReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 800956e:	23ff      	movs	r3, #255	; 0xff
 8009570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009574:	f001 f808 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009578:	f000 ffe4 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800957c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009580:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009582:	2d00      	cmp	r5, #0
 8009584:	dd10      	ble.n	80095a8 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	b173      	cbz	r3, 80095a8 <xQueueGenericReceive+0x100>
 800958a:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800958e:	4648      	mov	r0, r9
 8009590:	f000 fe18 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009594:	b108      	cbz	r0, 800959a <xQueueGenericReceive+0xf2>
					vTaskMissedYield();
 8009596:	f000 feaf 	bl	800a2f8 <vTaskMissedYield>
 800959a:	3d01      	subs	r5, #1
 800959c:	b2eb      	uxtb	r3, r5
 800959e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095a0:	b113      	cbz	r3, 80095a8 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f2      	bne.n	800958e <xQueueGenericReceive+0xe6>
		pxQueue->cRxLock = queueUNLOCKED;
 80095a8:	23ff      	movs	r3, #255	; 0xff
 80095aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80095ae:	f000 ffeb 	bl	800a588 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80095b2:	f000 fc79 	bl	8009ea8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80095b6:	f000 ffc5 	bl	800a544 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095bc:	2d00      	cmp	r5, #0
 80095be:	d14e      	bne.n	800965e <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d19c      	bne.n	8009500 <xQueueGenericReceive+0x58>
					taskEXIT_CRITICAL();
 80095c6:	f000 ffdf 	bl	800a588 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80095ca:	2000      	movs	r0, #0
}
 80095cc:	b005      	add	sp, #20
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskENTER_CRITICAL();
 80095d2:	f000 ffb7 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80095d6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80095da:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095dc:	2d00      	cmp	r5, #0
 80095de:	dc0a      	bgt.n	80095f6 <xQueueGenericReceive+0x14e>
 80095e0:	e00c      	b.n	80095fc <xQueueGenericReceive+0x154>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e2:	4630      	mov	r0, r6
 80095e4:	f000 fdee 	bl	800a1c4 <xTaskRemoveFromEventList>
 80095e8:	b108      	cbz	r0, 80095ee <xQueueGenericReceive+0x146>
						vTaskMissedYield();
 80095ea:	f000 fe85 	bl	800a2f8 <vTaskMissedYield>
 80095ee:	3d01      	subs	r5, #1
 80095f0:	b2eb      	uxtb	r3, r5
 80095f2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095f4:	b113      	cbz	r3, 80095fc <xQueueGenericReceive+0x154>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f2      	bne.n	80095e2 <xQueueGenericReceive+0x13a>
		pxQueue->cTxLock = queueUNLOCKED;
 80095fc:	23ff      	movs	r3, #255	; 0xff
 80095fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009602:	f000 ffc1 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009606:	f000 ff9d 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800960a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800960e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009610:	2d00      	cmp	r5, #0
 8009612:	dd11      	ble.n	8009638 <xQueueGenericReceive+0x190>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	b17b      	cbz	r3, 8009638 <xQueueGenericReceive+0x190>
 8009618:	f104 0910 	add.w	r9, r4, #16
 800961c:	e001      	b.n	8009622 <xQueueGenericReceive+0x17a>
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	b153      	cbz	r3, 8009638 <xQueueGenericReceive+0x190>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009622:	4648      	mov	r0, r9
 8009624:	f000 fdce 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009628:	b108      	cbz	r0, 800962e <xQueueGenericReceive+0x186>
					vTaskMissedYield();
 800962a:	f000 fe65 	bl	800a2f8 <vTaskMissedYield>
 800962e:	3d01      	subs	r5, #1
 8009630:	b2eb      	uxtb	r3, r5
 8009632:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f2      	bne.n	800961e <xQueueGenericReceive+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 8009638:	23ff      	movs	r3, #255	; 0xff
 800963a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800963e:	f000 ffa3 	bl	800a588 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8009642:	f000 fc31 	bl	8009ea8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8009646:	f000 ff7d 	bl	800a544 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800964a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ba      	beq.n	80095c6 <xQueueGenericReceive+0x11e>
	taskEXIT_CRITICAL();
 8009650:	f000 ff9a 	bl	800a588 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009654:	f000 ff76 	bl	800a544 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009658:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800965a:	2d00      	cmp	r5, #0
 800965c:	d0b0      	beq.n	80095c0 <xQueueGenericReceive+0x118>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800965e:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8009660:	68e6      	ldr	r6, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009662:	b152      	cbz	r2, 800967a <xQueueGenericReceive+0x1d2>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009664:	6861      	ldr	r1, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009666:	18b3      	adds	r3, r6, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009668:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800966a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800966c:	bf24      	itt	cs
 800966e:	6823      	ldrcs	r3, [r4, #0]
 8009670:	60e3      	strcs	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009672:	4638      	mov	r0, r7
 8009674:	68e1      	ldr	r1, [r4, #12]
 8009676:	f005 f893 	bl	800e7a0 <memcpy>
				if( xJustPeeking == pdFALSE )
 800967a:	f1b8 0f00 	cmp.w	r8, #0
 800967e:	f040 8083 	bne.w	8009788 <xQueueGenericReceive+0x2e0>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009682:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8009684:	3d01      	subs	r5, #1
 8009686:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8086 	beq.w	800979a <xQueueGenericReceive+0x2f2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d07c      	beq.n	800978e <xQueueGenericReceive+0x2e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009694:	f104 0010 	add.w	r0, r4, #16
 8009698:	f000 fd94 	bl	800a1c4 <xTaskRemoveFromEventList>
 800969c:	2800      	cmp	r0, #0
 800969e:	d076      	beq.n	800978e <xQueueGenericReceive+0x2e6>
							queueYIELD_IF_USING_PREEMPTION();
 80096a0:	4b44      	ldr	r3, [pc, #272]	; (80097b4 <xQueueGenericReceive+0x30c>)
 80096a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	e06d      	b.n	800978e <xQueueGenericReceive+0x2e6>
	taskEXIT_CRITICAL();
 80096b2:	f000 ff69 	bl	800a588 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d05d      	beq.n	8009778 <xQueueGenericReceive+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096bc:	9901      	ldr	r1, [sp, #4]
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 fd30 	bl	800a124 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80096c4:	f000 ff3e 	bl	800a544 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80096c8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80096cc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	dc0a      	bgt.n	80096e8 <xQueueGenericReceive+0x240>
 80096d2:	e00c      	b.n	80096ee <xQueueGenericReceive+0x246>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 fd75 	bl	800a1c4 <xTaskRemoveFromEventList>
 80096da:	b108      	cbz	r0, 80096e0 <xQueueGenericReceive+0x238>
						vTaskMissedYield();
 80096dc:	f000 fe0c 	bl	800a2f8 <vTaskMissedYield>
 80096e0:	3d01      	subs	r5, #1
 80096e2:	b2eb      	uxtb	r3, r5
 80096e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e6:	b113      	cbz	r3, 80096ee <xQueueGenericReceive+0x246>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f2      	bne.n	80096d4 <xQueueGenericReceive+0x22c>
		pxQueue->cTxLock = queueUNLOCKED;
 80096ee:	23ff      	movs	r3, #255	; 0xff
 80096f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80096f4:	f000 ff48 	bl	800a588 <vPortExitCritical>
	taskENTER_CRITICAL();
 80096f8:	f000 ff24 	bl	800a544 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80096fc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009700:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009702:	2d00      	cmp	r5, #0
 8009704:	dd10      	ble.n	8009728 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	b173      	cbz	r3, 8009728 <xQueueGenericReceive+0x280>
 800970a:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800970e:	4648      	mov	r0, r9
 8009710:	f000 fd58 	bl	800a1c4 <xTaskRemoveFromEventList>
 8009714:	b108      	cbz	r0, 800971a <xQueueGenericReceive+0x272>
					vTaskMissedYield();
 8009716:	f000 fdef 	bl	800a2f8 <vTaskMissedYield>
 800971a:	3d01      	subs	r5, #1
 800971c:	b2eb      	uxtb	r3, r5
 800971e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009720:	b113      	cbz	r3, 8009728 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f2      	bne.n	800970e <xQueueGenericReceive+0x266>
		pxQueue->cRxLock = queueUNLOCKED;
 8009728:	23ff      	movs	r3, #255	; 0xff
 800972a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800972e:	f000 ff2b 	bl	800a588 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8009732:	f000 fbb9 	bl	8009ea8 <xTaskResumeAll>
 8009736:	2800      	cmp	r0, #0
 8009738:	d18c      	bne.n	8009654 <xQueueGenericReceive+0x1ac>
					portYIELD_WITHIN_API();
 800973a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800973e:	f8cb 3000 	str.w	r3, [fp]
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	e783      	b.n	8009654 <xQueueGenericReceive+0x1ac>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800974c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800974e:	2a00      	cmp	r2, #0
 8009750:	f43f aeb4 	beq.w	80094bc <xQueueGenericReceive+0x14>
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	e7fe      	b.n	8009764 <xQueueGenericReceive+0x2bc>
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	e7fe      	b.n	8009776 <xQueueGenericReceive+0x2ce>
						taskENTER_CRITICAL();
 8009778:	f000 fee4 	bl	800a544 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800977c:	6860      	ldr	r0, [r4, #4]
 800977e:	f000 fdd7 	bl	800a330 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8009782:	f000 ff01 	bl	800a588 <vPortExitCritical>
 8009786:	e799      	b.n	80096bc <xQueueGenericReceive+0x214>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009788:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800978a:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800978c:	b94b      	cbnz	r3, 80097a2 <xQueueGenericReceive+0x2fa>
				taskEXIT_CRITICAL();
 800978e:	f000 fefb 	bl	800a588 <vPortExitCritical>
				return pdPASS;
 8009792:	2001      	movs	r0, #1
}
 8009794:	b005      	add	sp, #20
 8009796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800979a:	f000 fe6b 	bl	800a474 <pvTaskIncrementMutexHeldCount>
 800979e:	6060      	str	r0, [r4, #4]
 80097a0:	e775      	b.n	800968e <xQueueGenericReceive+0x1e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097a6:	f000 fd0d 	bl	800a1c4 <xTaskRemoveFromEventList>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	f47f af78 	bne.w	80096a0 <xQueueGenericReceive+0x1f8>
 80097b0:	e7ed      	b.n	800978e <xQueueGenericReceive+0x2e6>
 80097b2:	bf00      	nop
 80097b4:	e000ed04 	.word	0xe000ed04

080097b8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80097b8:	b190      	cbz	r0, 80097e0 <xQueueTakeMutexRecursive+0x28>
	{
 80097ba:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80097bc:	6846      	ldr	r6, [r0, #4]
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	f000 fd9f 	bl	800a304 <xTaskGetCurrentTaskHandle>
 80097c6:	4286      	cmp	r6, r0
 80097c8:	d013      	beq.n	80097f2 <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 80097ca:	2300      	movs	r3, #0
 80097cc:	462a      	mov	r2, r5
 80097ce:	4619      	mov	r1, r3
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7ff fe69 	bl	80094a8 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 80097d6:	b110      	cbz	r0, 80097de <xQueueTakeMutexRecursive+0x26>
				( pxMutex->u.uxRecursiveCallCount )++;
 80097d8:	68e3      	ldr	r3, [r4, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60e3      	str	r3, [r4, #12]
	}
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	e7fe      	b.n	80097f0 <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )++;
 80097f2:	68e3      	ldr	r3, [r4, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 80097f8:	2001      	movs	r0, #1
	}
 80097fa:	bd70      	pop	{r4, r5, r6, pc}

080097fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097fe:	4b1b      	ldr	r3, [pc, #108]	; (800986c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009800:	4e1b      	ldr	r6, [pc, #108]	; (8009870 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8009802:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009804:	6833      	ldr	r3, [r6, #0]
{
 8009806:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009808:	1d18      	adds	r0, r3, #4
{
 800980a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800980c:	f7ff fb4c 	bl	8008ea8 <uxListRemove>
 8009810:	b940      	cbnz	r0, 8009824 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009812:	6833      	ldr	r3, [r6, #0]
 8009814:	4917      	ldr	r1, [pc, #92]	; (8009874 <prvAddCurrentTaskToDelayedList+0x78>)
 8009816:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009818:	680b      	ldr	r3, [r1, #0]
 800981a:	2201      	movs	r2, #1
 800981c:	4082      	lsls	r2, r0
 800981e:	ea23 0302 	bic.w	r3, r3, r2
 8009822:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009824:	1c6b      	adds	r3, r5, #1
 8009826:	d017      	beq.n	8009858 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009828:	6833      	ldr	r3, [r6, #0]
 800982a:	1964      	adds	r4, r4, r5
 800982c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800982e:	d20b      	bcs.n	8009848 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009830:	4b11      	ldr	r3, [pc, #68]	; (8009878 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	6831      	ldr	r1, [r6, #0]
 8009836:	3104      	adds	r1, #4
 8009838:	f7ff fb1c 	bl	8008e74 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <prvAddCurrentTaskToDelayedList+0x80>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009842:	bf88      	it	hi
 8009844:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009848:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <prvAddCurrentTaskToDelayedList+0x84>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	6831      	ldr	r1, [r6, #0]
}
 800984e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009852:	3104      	adds	r1, #4
 8009854:	f7ff bb0e 	b.w	8008e74 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009858:	2f00      	cmp	r7, #0
 800985a:	d0e5      	beq.n	8009828 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800985c:	6831      	ldr	r1, [r6, #0]
 800985e:	4809      	ldr	r0, [pc, #36]	; (8009884 <prvAddCurrentTaskToDelayedList+0x88>)
 8009860:	3104      	adds	r1, #4
}
 8009862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009866:	f7ff baf5 	b.w	8008e54 <vListInsertEnd>
 800986a:	bf00      	nop
 800986c:	200004b0 	.word	0x200004b0
 8009870:	2000038c 	.word	0x2000038c
 8009874:	20000438 	.word	0x20000438
 8009878:	20000390 	.word	0x20000390
 800987c:	20000468 	.word	0x20000468
 8009880:	20000394 	.word	0x20000394
 8009884:	20000488 	.word	0x20000488

08009888 <xTaskCreate>:
	{
 8009888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800988c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8009890:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009892:	4650      	mov	r0, sl
	{
 8009894:	460d      	mov	r5, r1
 8009896:	4699      	mov	r9, r3
 8009898:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989a:	f000 ffb5 	bl	800a808 <pvPortMalloc>
			if( pxStack != NULL )
 800989e:	2800      	cmp	r0, #0
 80098a0:	f000 810e 	beq.w	8009ac0 <xTaskCreate+0x238>
 80098a4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80098a6:	20b4      	movs	r0, #180	; 0xb4
 80098a8:	f000 ffae 	bl	800a808 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80098ac:	4604      	mov	r4, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 80da 	beq.w	8009a68 <xTaskCreate+0x1e0>
					pxNewTCB->pxStack = pxStack;
 80098b4:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098b6:	782b      	ldrb	r3, [r5, #0]
 80098b8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098bc:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 80098c0:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098c2:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80098c4:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d04d      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098cc:	786b      	ldrb	r3, [r5, #1]
 80098ce:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80098d2:	786b      	ldrb	r3, [r5, #1]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d047      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098d8:	78ab      	ldrb	r3, [r5, #2]
 80098da:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80098de:	78ab      	ldrb	r3, [r5, #2]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d041      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098e4:	78eb      	ldrb	r3, [r5, #3]
 80098e6:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80098ea:	78eb      	ldrb	r3, [r5, #3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d03b      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098f0:	792b      	ldrb	r3, [r5, #4]
 80098f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80098f6:	792b      	ldrb	r3, [r5, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d035      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098fc:	796b      	ldrb	r3, [r5, #5]
 80098fe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8009902:	796b      	ldrb	r3, [r5, #5]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02f      	beq.n	8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009908:	79ab      	ldrb	r3, [r5, #6]
 800990a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800990e:	79ab      	ldrb	r3, [r5, #6]
 8009910:	b353      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009912:	79eb      	ldrb	r3, [r5, #7]
 8009914:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8009918:	79eb      	ldrb	r3, [r5, #7]
 800991a:	b32b      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800991c:	7a2b      	ldrb	r3, [r5, #8]
 800991e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8009922:	7a2b      	ldrb	r3, [r5, #8]
 8009924:	b303      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009926:	7a6b      	ldrb	r3, [r5, #9]
 8009928:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800992c:	7a6b      	ldrb	r3, [r5, #9]
 800992e:	b1db      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009930:	7aab      	ldrb	r3, [r5, #10]
 8009932:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8009936:	7aab      	ldrb	r3, [r5, #10]
 8009938:	b1b3      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800993a:	7aeb      	ldrb	r3, [r5, #11]
 800993c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8009940:	7aeb      	ldrb	r3, [r5, #11]
 8009942:	b18b      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009944:	7b2b      	ldrb	r3, [r5, #12]
 8009946:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800994a:	7b2b      	ldrb	r3, [r5, #12]
 800994c:	b163      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800994e:	7b6b      	ldrb	r3, [r5, #13]
 8009950:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8009954:	7b6b      	ldrb	r3, [r5, #13]
 8009956:	b13b      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009958:	7bab      	ldrb	r3, [r5, #14]
 800995a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800995e:	7bab      	ldrb	r3, [r5, #14]
 8009960:	b113      	cbz	r3, 8009968 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009962:	7beb      	ldrb	r3, [r5, #15]
 8009964:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8009968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800996a:	2d06      	cmp	r5, #6
 800996c:	bf28      	it	cs
 800996e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009970:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009974:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8009978:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800997a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800997c:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800997e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8009982:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009986:	f7ff fa61 	bl	8008e4c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800998e:	f104 0018 	add.w	r0, r4, #24
 8009992:	f7ff fa5b 	bl	8008e4c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009996:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8009998:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800999c:	4659      	mov	r1, fp
 800999e:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099a0:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099a6:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099a8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80099ac:	f004 ff03 	bl	800e7b6 <memset>
 80099b0:	4d45      	ldr	r5, [pc, #276]	; (8009ac8 <xTaskCreate+0x240>)
 80099b2:	4b46      	ldr	r3, [pc, #280]	; (8009acc <xTaskCreate+0x244>)
 80099b4:	4a46      	ldr	r2, [pc, #280]	; (8009ad0 <xTaskCreate+0x248>)
 80099b6:	6522      	str	r2, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099b8:	4641      	mov	r1, r8
 80099ba:	464a      	mov	r2, r9
 80099bc:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099be:	e9c4 5315 	strd	r5, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099c2:	f000 fd95 	bl	800a4f0 <pxPortInitialiseStack>
 80099c6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80099c8:	b107      	cbz	r7, 80099cc <xTaskCreate+0x144>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099ca:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 80099cc:	f000 fdba 	bl	800a544 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80099d0:	4a40      	ldr	r2, [pc, #256]	; (8009ad4 <xTaskCreate+0x24c>)
		if( pxCurrentTCB == NULL )
 80099d2:	4e41      	ldr	r6, [pc, #260]	; (8009ad8 <xTaskCreate+0x250>)
		uxCurrentNumberOfTasks++;
 80099d4:	6813      	ldr	r3, [r2, #0]
 80099d6:	3301      	adds	r3, #1
 80099d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099da:	6833      	ldr	r3, [r6, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d03a      	beq.n	8009a56 <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 80099e0:	4f3e      	ldr	r7, [pc, #248]	; (8009adc <xTaskCreate+0x254>)
 80099e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	b35a      	cbz	r2, 8009a40 <xTaskCreate+0x1b8>
 80099e8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009b00 <xTaskCreate+0x278>
		uxTaskNumber++;
 80099ec:	4a3c      	ldr	r2, [pc, #240]	; (8009ae0 <xTaskCreate+0x258>)
		prvAddTaskToReadyList( pxNewTCB );
 80099ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009b04 <xTaskCreate+0x27c>
		uxTaskNumber++;
 80099f2:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80099f4:	f8dc e000 	ldr.w	lr, [ip]
 80099f8:	2501      	movs	r5, #1
		uxTaskNumber++;
 80099fa:	4428      	add	r0, r5
 80099fc:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80099fe:	fa05 f203 	lsl.w	r2, r5, r3
 8009a02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a06:	ea42 020e 	orr.w	r2, r2, lr
 8009a0a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8009a0e:	4651      	mov	r1, sl
 8009a10:	f8cc 2000 	str.w	r2, [ip]
 8009a14:	f7ff fa1e 	bl	8008e54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009a18:	f000 fdb6 	bl	800a588 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	b1bb      	cbz	r3, 8009a50 <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a20:	6832      	ldr	r2, [r6, #0]
 8009a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d212      	bcs.n	8009a50 <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 8009a2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ae4 <xTaskCreate+0x25c>)
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8009a3a:	4628      	mov	r0, r5
	}
 8009a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a40:	6832      	ldr	r2, [r6, #0]
 8009a42:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8009b00 <xTaskCreate+0x278>
 8009a46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a48:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8009a4a:	bf98      	it	ls
 8009a4c:	6034      	strls	r4, [r6, #0]
 8009a4e:	e7cd      	b.n	80099ec <xTaskCreate+0x164>
			xReturn = pdPASS;
 8009a50:	4628      	mov	r0, r5
	}
 8009a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8009a56:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a58:	6813      	ldr	r3, [r2, #0]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d00b      	beq.n	8009a76 <xTaskCreate+0x1ee>
 8009a5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a60:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8009b00 <xTaskCreate+0x278>
 8009a64:	4f1d      	ldr	r7, [pc, #116]	; (8009adc <xTaskCreate+0x254>)
 8009a66:	e7c1      	b.n	80099ec <xTaskCreate+0x164>
					vPortFree( pxStack );
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f000 ff59 	bl	800a920 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8009b00 <xTaskCreate+0x278>
 8009a7a:	4645      	mov	r5, r8
 8009a7c:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a80:	4628      	mov	r0, r5
 8009a82:	3514      	adds	r5, #20
 8009a84:	f7ff f9d6 	bl	8008e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a88:	42bd      	cmp	r5, r7
 8009a8a:	d1f9      	bne.n	8009a80 <xTaskCreate+0x1f8>
	vListInitialise( &xDelayedTaskList1 );
 8009a8c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009b08 <xTaskCreate+0x280>
	vListInitialise( &xDelayedTaskList2 );
 8009a90:	4d15      	ldr	r5, [pc, #84]	; (8009ae8 <xTaskCreate+0x260>)
 8009a92:	4f12      	ldr	r7, [pc, #72]	; (8009adc <xTaskCreate+0x254>)
	vListInitialise( &xDelayedTaskList1 );
 8009a94:	4648      	mov	r0, r9
 8009a96:	f7ff f9cd 	bl	8008e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f7ff f9ca 	bl	8008e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aa0:	4812      	ldr	r0, [pc, #72]	; (8009aec <xTaskCreate+0x264>)
 8009aa2:	f7ff f9c7 	bl	8008e34 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009aa6:	4812      	ldr	r0, [pc, #72]	; (8009af0 <xTaskCreate+0x268>)
 8009aa8:	f7ff f9c4 	bl	8008e34 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009aac:	4811      	ldr	r0, [pc, #68]	; (8009af4 <xTaskCreate+0x26c>)
 8009aae:	f7ff f9c1 	bl	8008e34 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ab2:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <xTaskCreate+0x270>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ab4:	4a11      	ldr	r2, [pc, #68]	; (8009afc <xTaskCreate+0x274>)
 8009ab6:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aba:	601d      	str	r5, [r3, #0]
 8009abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009abe:	e795      	b.n	80099ec <xTaskCreate+0x164>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac4:	e7ba      	b.n	8009a3c <xTaskCreate+0x1b4>
 8009ac6:	bf00      	nop
 8009ac8:	08011a10 	.word	0x08011a10
 8009acc:	080119d0 	.word	0x080119d0
 8009ad0:	080119f0 	.word	0x080119f0
 8009ad4:	20000424 	.word	0x20000424
 8009ad8:	2000038c 	.word	0x2000038c
 8009adc:	20000484 	.word	0x20000484
 8009ae0:	20000434 	.word	0x20000434
 8009ae4:	e000ed04 	.word	0xe000ed04
 8009ae8:	20000450 	.word	0x20000450
 8009aec:	20000470 	.word	0x20000470
 8009af0:	2000049c 	.word	0x2000049c
 8009af4:	20000488 	.word	0x20000488
 8009af8:	20000394 	.word	0x20000394
 8009afc:	20000390 	.word	0x20000390
 8009b00:	20000398 	.word	0x20000398
 8009b04:	20000438 	.word	0x20000438
 8009b08:	2000043c 	.word	0x2000043c

08009b0c <vTaskStartScheduler>:
{
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b14:	f000 fe78 	bl	800a808 <pvPortMalloc>
			if( pxStack != NULL )
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f000 80a4 	beq.w	8009c66 <vTaskStartScheduler+0x15a>
 8009b1e:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009b20:	20b4      	movs	r0, #180	; 0xb4
 8009b22:	f000 fe71 	bl	800a808 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009b26:	4604      	mov	r4, r0
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f000 8099 	beq.w	8009c60 <vTaskStartScheduler+0x154>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b2e:	2500      	movs	r5, #0
 8009b30:	4b65      	ldr	r3, [pc, #404]	; (8009cc8 <vTaskStartScheduler+0x1bc>)
 8009b32:	6343      	str	r3, [r0, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b34:	1d07      	adds	r7, r0, #4
					pxNewTCB->pxStack = pxStack;
 8009b36:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b38:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b3c:	f880 5043 	strb.w	r5, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8009b40:	62c5      	str	r5, [r0, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8009b42:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b46:	4638      	mov	r0, r7
 8009b48:	f7ff f980 	bl	8008e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b4c:	f104 0018 	add.w	r0, r4, #24
 8009b50:	f7ff f97c 	bl	8008e4c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b54:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 8009b56:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b5a:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5c:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b5e:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b60:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b62:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b66:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b68:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009b6c:	f004 fe23 	bl	800e7b6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009b70:	f506 76fe 	add.w	r6, r6, #508	; 0x1fc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b74:	4b55      	ldr	r3, [pc, #340]	; (8009ccc <vTaskStartScheduler+0x1c0>)
 8009b76:	4956      	ldr	r1, [pc, #344]	; (8009cd0 <vTaskStartScheduler+0x1c4>)
 8009b78:	4a56      	ldr	r2, [pc, #344]	; (8009cd4 <vTaskStartScheduler+0x1c8>)
 8009b7a:	6522      	str	r2, [r4, #80]	; 0x50
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009b7c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b80:	462a      	mov	r2, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b82:	e9c4 1315 	strd	r1, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b86:	4630      	mov	r0, r6
 8009b88:	4953      	ldr	r1, [pc, #332]	; (8009cd8 <vTaskStartScheduler+0x1cc>)
		if( pxCurrentTCB == NULL )
 8009b8a:	4e54      	ldr	r6, [pc, #336]	; (8009cdc <vTaskStartScheduler+0x1d0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b8c:	f000 fcb0 	bl	800a4f0 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b90:	4b53      	ldr	r3, [pc, #332]	; (8009ce0 <vTaskStartScheduler+0x1d4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b92:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b94:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8009b96:	f000 fcd5 	bl	800a544 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009b9a:	4b52      	ldr	r3, [pc, #328]	; (8009ce4 <vTaskStartScheduler+0x1d8>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009ba2:	6832      	ldr	r2, [r6, #0]
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d052      	beq.n	8009c4e <vTaskStartScheduler+0x142>
			if( xSchedulerRunning == pdFALSE )
 8009ba8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8009d10 <vTaskStartScheduler+0x204>
 8009bac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009bae:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d044      	beq.n	8009c40 <vTaskStartScheduler+0x134>
 8009bb6:	4d4c      	ldr	r5, [pc, #304]	; (8009ce8 <vTaskStartScheduler+0x1dc>)
		uxTaskNumber++;
 8009bb8:	f8df e158 	ldr.w	lr, [pc, #344]	; 8009d14 <vTaskStartScheduler+0x208>
		prvAddTaskToReadyList( pxNewTCB );
 8009bbc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009d18 <vTaskStartScheduler+0x20c>
		uxTaskNumber++;
 8009bc0:	f8de 3000 	ldr.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8009bc4:	f8dc 9000 	ldr.w	r9, [ip]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	4082      	lsls	r2, r0
 8009bcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8009bd0:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8009bd2:	ea42 0209 	orr.w	r2, r2, r9
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		uxTaskNumber++;
 8009bdc:	f8ce 3000 	str.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8009be0:	f8cc 2000 	str.w	r2, [ip]
 8009be4:	f7ff f936 	bl	8008e54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009be8:	f000 fcce 	bl	800a588 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009bec:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf0:	b163      	cbz	r3, 8009c0c <vTaskStartScheduler+0x100>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bf2:	6832      	ldr	r2, [r6, #0]
 8009bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009bf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d207      	bcs.n	8009c0c <vTaskStartScheduler+0x100>
			taskYIELD_IF_USING_PREEMPTION();
 8009bfc:	4b3b      	ldr	r3, [pc, #236]	; (8009cec <vTaskStartScheduler+0x1e0>)
 8009bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c1c:	6833      	ldr	r3, [r6, #0]
 8009c1e:	4934      	ldr	r1, [pc, #208]	; (8009cf0 <vTaskStartScheduler+0x1e4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c20:	4834      	ldr	r0, [pc, #208]	; (8009cf4 <vTaskStartScheduler+0x1e8>)
		xTickCount = ( TickType_t ) 0U;
 8009c22:	4a35      	ldr	r2, [pc, #212]	; (8009cf8 <vTaskStartScheduler+0x1ec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c24:	334c      	adds	r3, #76	; 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c26:	f04f 34ff 	mov.w	r4, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c2a:	600b      	str	r3, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8009c2c:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c2e:	6004      	str	r4, [r0, #0]
		xTickCount = ( TickType_t ) 0U;
 8009c30:	2300      	movs	r3, #0
		xSchedulerRunning = pdTRUE;
 8009c32:	f8c8 1000 	str.w	r1, [r8]
}
 8009c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xTickCount = ( TickType_t ) 0U;
 8009c3a:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009c3c:	f000 bd16 	b.w	800a66c <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	4d29      	ldr	r5, [pc, #164]	; (8009ce8 <vTaskStartScheduler+0x1dc>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8009c48:	bf98      	it	ls
 8009c4a:	6034      	strls	r4, [r6, #0]
 8009c4c:	e7b4      	b.n	8009bb8 <vTaskStartScheduler+0xac>
			pxCurrentTCB = pxNewTCB;
 8009c4e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d010      	beq.n	8009c78 <vTaskStartScheduler+0x16c>
 8009c56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c58:	4d23      	ldr	r5, [pc, #140]	; (8009ce8 <vTaskStartScheduler+0x1dc>)
 8009c5a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009d10 <vTaskStartScheduler+0x204>
 8009c5e:	e7ab      	b.n	8009bb8 <vTaskStartScheduler+0xac>
					vPortFree( pxStack );
 8009c60:	4630      	mov	r0, r6
 8009c62:	f000 fe5d 	bl	800a920 <vPortFree>
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	e7fe      	b.n	8009c76 <vTaskStartScheduler+0x16a>
 8009c78:	4d1b      	ldr	r5, [pc, #108]	; (8009ce8 <vTaskStartScheduler+0x1dc>)
 8009c7a:	46a8      	mov	r8, r5
 8009c7c:	f105 098c 	add.w	r9, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c80:	4640      	mov	r0, r8
 8009c82:	f108 0814 	add.w	r8, r8, #20
 8009c86:	f7ff f8d5 	bl	8008e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8a:	45c1      	cmp	r9, r8
 8009c8c:	d1f8      	bne.n	8009c80 <vTaskStartScheduler+0x174>
	vListInitialise( &xDelayedTaskList1 );
 8009c8e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8009d1c <vTaskStartScheduler+0x210>
	vListInitialise( &xDelayedTaskList2 );
 8009c92:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009d20 <vTaskStartScheduler+0x214>
 8009c96:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009d10 <vTaskStartScheduler+0x204>
	vListInitialise( &xDelayedTaskList1 );
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7ff f8ca 	bl	8008e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f7ff f8c7 	bl	8008e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca6:	4815      	ldr	r0, [pc, #84]	; (8009cfc <vTaskStartScheduler+0x1f0>)
 8009ca8:	f7ff f8c4 	bl	8008e34 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009cac:	4814      	ldr	r0, [pc, #80]	; (8009d00 <vTaskStartScheduler+0x1f4>)
 8009cae:	f7ff f8c1 	bl	8008e34 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009cb2:	4814      	ldr	r0, [pc, #80]	; (8009d04 <vTaskStartScheduler+0x1f8>)
 8009cb4:	f7ff f8be 	bl	8008e34 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cb8:	4a13      	ldr	r2, [pc, #76]	; (8009d08 <vTaskStartScheduler+0x1fc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cba:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <vTaskStartScheduler+0x200>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cbc:	f8c2 a000 	str.w	sl, [r2]
 8009cc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cc2:	f8c3 9000 	str.w	r9, [r3]
 8009cc6:	e777      	b.n	8009bb8 <vTaskStartScheduler+0xac>
 8009cc8:	454c4449 	.word	0x454c4449
 8009ccc:	080119d0 	.word	0x080119d0
 8009cd0:	08011a10 	.word	0x08011a10
 8009cd4:	080119f0 	.word	0x080119f0
 8009cd8:	0800a005 	.word	0x0800a005
 8009cdc:	2000038c 	.word	0x2000038c
 8009ce0:	20000464 	.word	0x20000464
 8009ce4:	20000424 	.word	0x20000424
 8009ce8:	20000398 	.word	0x20000398
 8009cec:	e000ed04 	.word	0xe000ed04
 8009cf0:	20000010 	.word	0x20000010
 8009cf4:	20000468 	.word	0x20000468
 8009cf8:	200004b0 	.word	0x200004b0
 8009cfc:	20000470 	.word	0x20000470
 8009d00:	2000049c 	.word	0x2000049c
 8009d04:	20000488 	.word	0x20000488
 8009d08:	20000390 	.word	0x20000390
 8009d0c:	20000394 	.word	0x20000394
 8009d10:	20000484 	.word	0x20000484
 8009d14:	20000434 	.word	0x20000434
 8009d18:	20000438 	.word	0x20000438
 8009d1c:	2000043c 	.word	0x2000043c
 8009d20:	20000450 	.word	0x20000450

08009d24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009d24:	4a02      	ldr	r2, [pc, #8]	; (8009d30 <vTaskSuspendAll+0xc>)
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	6013      	str	r3, [r2, #0]
}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	20000430 	.word	0x20000430

08009d34 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009d34:	4b01      	ldr	r3, [pc, #4]	; (8009d3c <xTaskGetTickCount+0x8>)
 8009d36:	6818      	ldr	r0, [r3, #0]
}
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	200004b0 	.word	0x200004b0

08009d40 <xTaskGetTickCountFromISR>:
{
 8009d40:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d42:	f000 fd0b 	bl	800a75c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8009d46:	4b01      	ldr	r3, [pc, #4]	; (8009d4c <xTaskGetTickCountFromISR+0xc>)
 8009d48:	6818      	ldr	r0, [r3, #0]
}
 8009d4a:	bd08      	pop	{r3, pc}
 8009d4c:	200004b0 	.word	0x200004b0

08009d50 <xTaskIncrementTick>:
{
 8009d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d54:	4b49      	ldr	r3, [pc, #292]	; (8009e7c <xTaskIncrementTick+0x12c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	b9cb      	cbnz	r3, 8009d8e <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + 1;
 8009d5a:	4b49      	ldr	r3, [pc, #292]	; (8009e80 <xTaskIncrementTick+0x130>)
 8009d5c:	681e      	ldr	r6, [r3, #0]
 8009d5e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8009d60:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8009d62:	b30e      	cbz	r6, 8009da8 <xTaskIncrementTick+0x58>
 8009d64:	f8df b138 	ldr.w	fp, [pc, #312]	; 8009ea0 <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d68:	f8db 2000 	ldr.w	r2, [fp]
 8009d6c:	42b2      	cmp	r2, r6
 8009d6e:	d929      	bls.n	8009dc4 <xTaskIncrementTick+0x74>
 8009d70:	4f44      	ldr	r7, [pc, #272]	; (8009e84 <xTaskIncrementTick+0x134>)
 8009d72:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8009ea4 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8009d76:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d78:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d82:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	bf28      	it	cs
 8009d8a:	2501      	movcs	r5, #1
 8009d8c:	e004      	b.n	8009d98 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8009d8e:	4a3e      	ldr	r2, [pc, #248]	; (8009e88 <xTaskIncrementTick+0x138>)
 8009d90:	6813      	ldr	r3, [r2, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009d96:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8009d98:	4b3c      	ldr	r3, [pc, #240]	; (8009e8c <xTaskIncrementTick+0x13c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009d9c:	2b00      	cmp	r3, #0
}
 8009d9e:	bf0c      	ite	eq
 8009da0:	4628      	moveq	r0, r5
 8009da2:	2001      	movne	r0, #1
 8009da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8009da8:	4c39      	ldr	r4, [pc, #228]	; (8009e90 <xTaskIncrementTick+0x140>)
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d048      	beq.n	8009e44 <xTaskIncrementTick+0xf4>
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	e7fe      	b.n	8009dc2 <xTaskIncrementTick+0x72>
 8009dc4:	4c32      	ldr	r4, [pc, #200]	; (8009e90 <xTaskIncrementTick+0x140>)
 8009dc6:	4f2f      	ldr	r7, [pc, #188]	; (8009e84 <xTaskIncrementTick+0x134>)
 8009dc8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8009ea4 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8009dcc:	2500      	movs	r5, #0
 8009dce:	e02d      	b.n	8009e2c <xTaskIncrementTick+0xdc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	68d2      	ldr	r2, [r2, #12]
 8009dd4:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ddc:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8009de0:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de2:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8009de4:	d32b      	bcc.n	8009e3e <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de6:	f7ff f85f 	bl	8008ea8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dea:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dee:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009df2:	b109      	cbz	r1, 8009df8 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009df4:	f7ff f858 	bl	8008ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009df8:	4a26      	ldr	r2, [pc, #152]	; (8009e94 <xTaskIncrementTick+0x144>)
 8009dfa:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8009dfe:	6813      	ldr	r3, [r2, #0]
 8009e00:	2101      	movs	r1, #1
 8009e02:	fa01 fc00 	lsl.w	ip, r1, r0
 8009e06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e0a:	4651      	mov	r1, sl
 8009e0c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8009e10:	ea4c 0c03 	orr.w	ip, ip, r3
 8009e14:	f8c2 c000 	str.w	ip, [r2]
 8009e18:	f7ff f81c 	bl	8008e54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e1c:	f8d8 0000 	ldr.w	r0, [r8]
 8009e20:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8009e24:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009e26:	4291      	cmp	r1, r2
 8009e28:	bf28      	it	cs
 8009e2a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e2c:	6822      	ldr	r2, [r4, #0]
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	d1cd      	bne.n	8009dd0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	f8cb 2000 	str.w	r2, [fp]
					break;
 8009e3c:	e79c      	b.n	8009d78 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8009e3e:	f8cb 1000 	str.w	r1, [fp]
						break;
 8009e42:	e799      	b.n	8009d78 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8009e44:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <xTaskIncrementTick+0x148>)
 8009e46:	6821      	ldr	r1, [r4, #0]
 8009e48:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <xTaskIncrementTick+0x14c>)
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	6020      	str	r0, [r4, #0]
 8009e4e:	6019      	str	r1, [r3, #0]
 8009e50:	6813      	ldr	r3, [r2, #0]
 8009e52:	3301      	adds	r3, #1
 8009e54:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	b933      	cbnz	r3, 8009e6a <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e5c:	f8df b040 	ldr.w	fp, [pc, #64]	; 8009ea0 <xTaskIncrementTick+0x150>
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	f8cb 2000 	str.w	r2, [fp]
 8009e68:	e77e      	b.n	8009d68 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e6a:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e6c:	f8df b030 	ldr.w	fp, [pc, #48]	; 8009ea0 <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e70:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e72:	68d2      	ldr	r2, [r2, #12]
 8009e74:	6852      	ldr	r2, [r2, #4]
 8009e76:	f8cb 2000 	str.w	r2, [fp]
 8009e7a:	e775      	b.n	8009d68 <xTaskIncrementTick+0x18>
 8009e7c:	20000430 	.word	0x20000430
 8009e80:	200004b0 	.word	0x200004b0
 8009e84:	20000398 	.word	0x20000398
 8009e88:	2000042c 	.word	0x2000042c
 8009e8c:	200004b4 	.word	0x200004b4
 8009e90:	20000390 	.word	0x20000390
 8009e94:	20000438 	.word	0x20000438
 8009e98:	20000394 	.word	0x20000394
 8009e9c:	2000046c 	.word	0x2000046c
 8009ea0:	20000468 	.word	0x20000468
 8009ea4:	2000038c 	.word	0x2000038c

08009ea8 <xTaskResumeAll>:
{
 8009ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8009eac:	4c38      	ldr	r4, [pc, #224]	; (8009f90 <xTaskResumeAll+0xe8>)
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	b943      	cbnz	r3, 8009ec4 <xTaskResumeAll+0x1c>
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009ec4:	f000 fb3e 	bl	800a544 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ece:	6824      	ldr	r4, [r4, #0]
 8009ed0:	bb7c      	cbnz	r4, 8009f32 <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ed2:	4b30      	ldr	r3, [pc, #192]	; (8009f94 <xTaskResumeAll+0xec>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	b363      	cbz	r3, 8009f32 <xTaskResumeAll+0x8a>
 8009ed8:	4d2f      	ldr	r5, [pc, #188]	; (8009f98 <xTaskResumeAll+0xf0>)
 8009eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009fb0 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 8009ede:	4e2f      	ldr	r6, [pc, #188]	; (8009f9c <xTaskResumeAll+0xf4>)
 8009ee0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8009fb4 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ee4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8009fb8 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ee8:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 8009eec:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eee:	b333      	cbz	r3, 8009f3e <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009ef0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009ef4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ef6:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009efa:	f104 0018 	add.w	r0, r4, #24
 8009efe:	f7fe ffd3 	bl	8008ea8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f02:	4640      	mov	r0, r8
 8009f04:	f7fe ffd0 	bl	8008ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009f0a:	6832      	ldr	r2, [r6, #0]
 8009f0c:	fa07 f300 	lsl.w	r3, r7, r0
 8009f10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f14:	4313      	orrs	r3, r2
 8009f16:	4641      	mov	r1, r8
 8009f18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	f7fe ff99 	bl	8008e54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f22:	f8db 3000 	ldr.w	r3, [fp]
 8009f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d3dc      	bcc.n	8009ee8 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 8009f2e:	602f      	str	r7, [r5, #0]
 8009f30:	e7da      	b.n	8009ee8 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8009f32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009f34:	f000 fb28 	bl	800a588 <vPortExitCritical>
}
 8009f38:	4620      	mov	r0, r4
 8009f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8009f3e:	b13c      	cbz	r4, 8009f50 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f40:	4b17      	ldr	r3, [pc, #92]	; (8009fa0 <xTaskResumeAll+0xf8>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	b9da      	cbnz	r2, 8009f80 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f48:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <xTaskResumeAll+0xfc>)
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009f50:	4e15      	ldr	r6, [pc, #84]	; (8009fa8 <xTaskResumeAll+0x100>)
 8009f52:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009f54:	b13c      	cbz	r4, 8009f66 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8009f56:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009f58:	f7ff fefa 	bl	8009d50 <xTaskIncrementTick>
 8009f5c:	b100      	cbz	r0, 8009f60 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8009f5e:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009f60:	3c01      	subs	r4, #1
 8009f62:	d1f9      	bne.n	8009f58 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009f64:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0e2      	beq.n	8009f32 <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8009f6c:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <xTaskResumeAll+0x104>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009f7c:	2401      	movs	r4, #1
 8009f7e:	e7d9      	b.n	8009f34 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f80:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f84:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f86:	68d2      	ldr	r2, [r2, #12]
 8009f88:	6852      	ldr	r2, [r2, #4]
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	e7e0      	b.n	8009f50 <xTaskResumeAll+0xa8>
 8009f8e:	bf00      	nop
 8009f90:	20000430 	.word	0x20000430
 8009f94:	20000424 	.word	0x20000424
 8009f98:	200004b4 	.word	0x200004b4
 8009f9c:	20000438 	.word	0x20000438
 8009fa0:	20000390 	.word	0x20000390
 8009fa4:	20000468 	.word	0x20000468
 8009fa8:	2000042c 	.word	0x2000042c
 8009fac:	e000ed04 	.word	0xe000ed04
 8009fb0:	20000470 	.word	0x20000470
 8009fb4:	20000398 	.word	0x20000398
 8009fb8:	2000038c 	.word	0x2000038c

08009fbc <vTaskDelay>:
	{
 8009fbc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fbe:	b198      	cbz	r0, 8009fe8 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8009fc0:	4b0e      	ldr	r3, [pc, #56]	; (8009ffc <vTaskDelay+0x40>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	b141      	cbz	r1, 8009fd8 <vTaskDelay+0x1c>
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	e7fe      	b.n	8009fd6 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	3201      	adds	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fde:	f7ff fc0d 	bl	80097fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009fe2:	f7ff ff61 	bl	8009ea8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009fe6:	b938      	cbnz	r0, 8009ff8 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <vTaskDelay+0x44>)
 8009fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	f3bf 8f6f 	isb	sy
	}
 8009ff8:	bd08      	pop	{r3, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000430 	.word	0x20000430
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <prvIdleTask>:
{
 800a004:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 800a008:	4c1e      	ldr	r4, [pc, #120]	; (800a084 <prvIdleTask+0x80>)
 800a00a:	4e1f      	ldr	r6, [pc, #124]	; (800a088 <prvIdleTask+0x84>)
 800a00c:	4d1f      	ldr	r5, [pc, #124]	; (800a08c <prvIdleTask+0x88>)
 800a00e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a094 <prvIdleTask+0x90>
				taskYIELD();
 800a012:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a098 <prvIdleTask+0x94>
 800a016:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800a01a:	e006      	b.n	800a02a <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800a01c:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800a01e:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 800a020:	3301      	adds	r3, #1
 800a022:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 800a024:	f7ff ff40 	bl	8009ea8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800a028:	b96f      	cbnz	r7, 800a046 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1f5      	bne.n	800a01c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a030:	f8d8 3000 	ldr.w	r3, [r8]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d9f8      	bls.n	800a02a <prvIdleTask+0x26>
				taskYIELD();
 800a038:	f8ca 9000 	str.w	r9, [sl]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	e7f1      	b.n	800a02a <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 800a046:	f000 fa7d 	bl	800a544 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a04a:	68f3      	ldr	r3, [r6, #12]
 800a04c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a050:	f10b 0004 	add.w	r0, fp, #4
 800a054:	f7fe ff28 	bl	8008ea8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800a058:	4a0d      	ldr	r2, [pc, #52]	; (800a090 <prvIdleTask+0x8c>)
 800a05a:	6813      	ldr	r3, [r2, #0]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 800a066:	f000 fa8f 	bl	800a588 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a06a:	f10b 004c 	add.w	r0, fp, #76	; 0x4c
 800a06e:	f004 ff5b 	bl	800ef28 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800a072:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800a076:	f000 fc53 	bl	800a920 <vPortFree>
			vPortFree( pxTCB );
 800a07a:	4658      	mov	r0, fp
 800a07c:	f000 fc50 	bl	800a920 <vPortFree>
 800a080:	e7d3      	b.n	800a02a <prvIdleTask+0x26>
 800a082:	bf00      	nop
 800a084:	20000430 	.word	0x20000430
 800a088:	2000049c 	.word	0x2000049c
 800a08c:	20000428 	.word	0x20000428
 800a090:	20000424 	.word	0x20000424
 800a094:	20000398 	.word	0x20000398
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a09c:	4b1b      	ldr	r3, [pc, #108]	; (800a10c <vTaskSwitchContext+0x70>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	bb0b      	cbnz	r3, 800a0e6 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 800a0a2:	491b      	ldr	r1, [pc, #108]	; (800a110 <vTaskSwitchContext+0x74>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a0a4:	4a1b      	ldr	r2, [pc, #108]	; (800a114 <vTaskSwitchContext+0x78>)
{
 800a0a6:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800a0a8:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a0aa:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800a0ac:	fab3 f383 	clz	r3, r3
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f1c3 031f 	rsb	r3, r3, #31
 800a0b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a0ba:	0092      	lsls	r2, r2, #2
 800a0bc:	4816      	ldr	r0, [pc, #88]	; (800a118 <vTaskSwitchContext+0x7c>)
 800a0be:	5881      	ldr	r1, [r0, r2]
 800a0c0:	1884      	adds	r4, r0, r2
 800a0c2:	b1a1      	cbz	r1, 800a0ee <vTaskSwitchContext+0x52>
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	3208      	adds	r2, #8
 800a0c8:	6849      	ldr	r1, [r1, #4]
 800a0ca:	6061      	str	r1, [r4, #4]
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	d016      	beq.n	800a100 <vTaskSwitchContext+0x64>
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <vTaskSwitchContext+0x80>)
 800a0d4:	68ca      	ldr	r2, [r1, #12]
 800a0d6:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a11      	ldr	r2, [pc, #68]	; (800a120 <vTaskSwitchContext+0x84>)
}
 800a0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0e0:	334c      	adds	r3, #76	; 0x4c
 800a0e2:	6013      	str	r3, [r2, #0]
}
 800a0e4:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <vTaskSwitchContext+0x74>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	4770      	bx	lr
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	e7fe      	b.n	800a0fe <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a100:	2214      	movs	r2, #20
 800a102:	fb02 0303 	mla	r3, r2, r3, r0
 800a106:	6849      	ldr	r1, [r1, #4]
 800a108:	6059      	str	r1, [r3, #4]
 800a10a:	e7e2      	b.n	800a0d2 <vTaskSwitchContext+0x36>
 800a10c:	20000430 	.word	0x20000430
 800a110:	200004b4 	.word	0x200004b4
 800a114:	20000438 	.word	0x20000438
 800a118:	20000398 	.word	0x20000398
 800a11c:	2000038c 	.word	0x2000038c
 800a120:	20000010 	.word	0x20000010

0800a124 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a124:	b940      	cbnz	r0, 800a138 <vTaskPlaceOnEventList+0x14>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	e7fe      	b.n	800a136 <vTaskPlaceOnEventList+0x12>
{
 800a138:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a13a:	4d1b      	ldr	r5, [pc, #108]	; (800a1a8 <vTaskPlaceOnEventList+0x84>)
 800a13c:	460c      	mov	r4, r1
 800a13e:	6829      	ldr	r1, [r5, #0]
 800a140:	3118      	adds	r1, #24
 800a142:	f7fe fe97 	bl	8008e74 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a146:	4b19      	ldr	r3, [pc, #100]	; (800a1ac <vTaskPlaceOnEventList+0x88>)
 800a148:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a14a:	6828      	ldr	r0, [r5, #0]
 800a14c:	3004      	adds	r0, #4
 800a14e:	f7fe feab 	bl	8008ea8 <uxListRemove>
 800a152:	b940      	cbnz	r0, 800a166 <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	4916      	ldr	r1, [pc, #88]	; (800a1b0 <vTaskPlaceOnEventList+0x8c>)
 800a158:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a15a:	680b      	ldr	r3, [r1, #0]
 800a15c:	2201      	movs	r2, #1
 800a15e:	4082      	lsls	r2, r0
 800a160:	ea23 0302 	bic.w	r3, r3, r2
 800a164:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a166:	1c63      	adds	r3, r4, #1
 800a168:	d00f      	beq.n	800a18a <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a16a:	682b      	ldr	r3, [r5, #0]
 800a16c:	19a4      	adds	r4, r4, r6
 800a16e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a170:	d212      	bcs.n	800a198 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a172:	4b10      	ldr	r3, [pc, #64]	; (800a1b4 <vTaskPlaceOnEventList+0x90>)
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	6829      	ldr	r1, [r5, #0]
 800a178:	3104      	adds	r1, #4
 800a17a:	f7fe fe7b 	bl	8008e74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a17e:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <vTaskPlaceOnEventList+0x94>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a184:	bf38      	it	cc
 800a186:	601c      	strcc	r4, [r3, #0]
}
 800a188:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a18a:	6829      	ldr	r1, [r5, #0]
 800a18c:	480b      	ldr	r0, [pc, #44]	; (800a1bc <vTaskPlaceOnEventList+0x98>)
 800a18e:	3104      	adds	r1, #4
}
 800a190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a194:	f7fe be5e 	b.w	8008e54 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a198:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <vTaskPlaceOnEventList+0x9c>)
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	6829      	ldr	r1, [r5, #0]
}
 800a19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1a2:	3104      	adds	r1, #4
 800a1a4:	f7fe be66 	b.w	8008e74 <vListInsert>
 800a1a8:	2000038c 	.word	0x2000038c
 800a1ac:	200004b0 	.word	0x200004b0
 800a1b0:	20000438 	.word	0x20000438
 800a1b4:	20000390 	.word	0x20000390
 800a1b8:	20000468 	.word	0x20000468
 800a1bc:	20000488 	.word	0x20000488
 800a1c0:	20000394 	.word	0x20000394

0800a1c4 <xTaskRemoveFromEventList>:
{
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a1c6:	68c3      	ldr	r3, [r0, #12]
 800a1c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a1ca:	b32c      	cbz	r4, 800a218 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1cc:	f104 0518 	add.w	r5, r4, #24
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f7fe fe69 	bl	8008ea8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1d6:	4b17      	ldr	r3, [pc, #92]	; (800a234 <xTaskRemoveFromEventList+0x70>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	bb33      	cbnz	r3, 800a22a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1dc:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1de:	4d16      	ldr	r5, [pc, #88]	; (800a238 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7fe fe61 	bl	8008ea8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1e8:	682f      	ldr	r7, [r5, #0]
 800a1ea:	4814      	ldr	r0, [pc, #80]	; (800a23c <xTaskRemoveFromEventList+0x78>)
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4093      	lsls	r3, r2
 800a1f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1f4:	433b      	orrs	r3, r7
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	f7fe fe29 	bl	8008e54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <xTaskRemoveFromEventList+0x7c>)
 800a204:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800a20c:	bf83      	ittte	hi
 800a20e:	4b0d      	ldrhi	r3, [pc, #52]	; (800a244 <xTaskRemoveFromEventList+0x80>)
 800a210:	2001      	movhi	r0, #1
 800a212:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800a214:	2000      	movls	r0, #0
}
 800a216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	e7fe      	b.n	800a228 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a22a:	4629      	mov	r1, r5
 800a22c:	4806      	ldr	r0, [pc, #24]	; (800a248 <xTaskRemoveFromEventList+0x84>)
 800a22e:	f7fe fe11 	bl	8008e54 <vListInsertEnd>
 800a232:	e7e6      	b.n	800a202 <xTaskRemoveFromEventList+0x3e>
 800a234:	20000430 	.word	0x20000430
 800a238:	20000438 	.word	0x20000438
 800a23c:	20000398 	.word	0x20000398
 800a240:	2000038c 	.word	0x2000038c
 800a244:	200004b4 	.word	0x200004b4
 800a248:	20000470 	.word	0x20000470

0800a24c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800a24c:	b130      	cbz	r0, 800a25c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a24e:	4a08      	ldr	r2, [pc, #32]	; (800a270 <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a250:	4b08      	ldr	r3, [pc, #32]	; (800a274 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a252:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	e9c0 2300 	strd	r2, r3, [r0]
}
 800a25a:	4770      	bx	lr
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	e7fe      	b.n	800a26c <vTaskSetTimeOutState+0x20>
 800a26e:	bf00      	nop
 800a270:	2000046c 	.word	0x2000046c
 800a274:	200004b0 	.word	0x200004b0

0800a278 <xTaskCheckForTimeOut>:
{
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a27a:	b360      	cbz	r0, 800a2d6 <xTaskCheckForTimeOut+0x5e>
	configASSERT( pxTicksToWait );
 800a27c:	b311      	cbz	r1, 800a2c4 <xTaskCheckForTimeOut+0x4c>
 800a27e:	460d      	mov	r5, r1
 800a280:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a282:	f000 f95f 	bl	800a544 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800a286:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800a288:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a2f4 <xTaskCheckForTimeOut+0x7c>
			if( *pxTicksToWait == portMAX_DELAY )
 800a28c:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800a28e:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800a292:	d029      	beq.n	800a2e8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a294:	4e16      	ldr	r6, [pc, #88]	; (800a2f0 <xTaskCheckForTimeOut+0x78>)
 800a296:	e9d4 0200 	ldrd	r0, r2, [r4]
 800a29a:	6837      	ldr	r7, [r6, #0]
 800a29c:	42b8      	cmp	r0, r7
 800a29e:	d001      	beq.n	800a2a4 <xTaskCheckForTimeOut+0x2c>
 800a2a0:	4291      	cmp	r1, r2
 800a2a2:	d223      	bcs.n	800a2ec <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2a4:	1a8f      	subs	r7, r1, r2
 800a2a6:	42bb      	cmp	r3, r7
 800a2a8:	d920      	bls.n	800a2ec <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800a2aa:	1a5b      	subs	r3, r3, r1
 800a2ac:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2ae:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2b0:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800a2b4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2b6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800a2ba:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800a2bc:	f000 f964 	bl	800a588 <vPortExitCritical>
}
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	e7fe      	b.n	800a2d4 <xTaskCheckForTimeOut+0x5c>
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	e7e7      	b.n	800a2bc <xTaskCheckForTimeOut+0x44>
			xReturn = pdTRUE;
 800a2ec:	2501      	movs	r5, #1
 800a2ee:	e7e5      	b.n	800a2bc <xTaskCheckForTimeOut+0x44>
 800a2f0:	2000046c 	.word	0x2000046c
 800a2f4:	200004b0 	.word	0x200004b0

0800a2f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a2f8:	4b01      	ldr	r3, [pc, #4]	; (800a300 <vTaskMissedYield+0x8>)
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
}
 800a2fe:	4770      	bx	lr
 800a300:	200004b4 	.word	0x200004b4

0800a304 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a304:	4b01      	ldr	r3, [pc, #4]	; (800a30c <xTaskGetCurrentTaskHandle+0x8>)
 800a306:	6818      	ldr	r0, [r3, #0]
	}
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	2000038c 	.word	0x2000038c

0800a310 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <xTaskGetSchedulerState+0x18>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	b133      	cbz	r3, 800a324 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a316:	4b05      	ldr	r3, [pc, #20]	; (800a32c <xTaskGetSchedulerState+0x1c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800a31c:	bf0c      	ite	eq
 800a31e:	2002      	moveq	r0, #2
 800a320:	2000      	movne	r0, #0
 800a322:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a324:	2001      	movs	r0, #1
	}
 800a326:	4770      	bx	lr
 800a328:	20000484 	.word	0x20000484
 800a32c:	20000430 	.word	0x20000430

0800a330 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a330:	b1d0      	cbz	r0, 800a368 <vTaskPriorityInherit+0x38>
	{
 800a332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a334:	4c20      	ldr	r4, [pc, #128]	; (800a3b8 <vTaskPriorityInherit+0x88>)
 800a336:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d212      	bcs.n	800a366 <vTaskPriorityInherit+0x36>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a340:	6982      	ldr	r2, [r0, #24]
 800a342:	2a00      	cmp	r2, #0
 800a344:	db04      	blt.n	800a350 <vTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a346:	6822      	ldr	r2, [r4, #0]
 800a348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a34a:	f1c2 0207 	rsb	r2, r2, #7
 800a34e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a350:	4d1a      	ldr	r5, [pc, #104]	; (800a3bc <vTaskPriorityInherit+0x8c>)
 800a352:	6942      	ldr	r2, [r0, #20]
 800a354:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a358:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d004      	beq.n	800a36a <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a368:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a36a:	1d07      	adds	r7, r0, #4
 800a36c:	4606      	mov	r6, r0
 800a36e:	4638      	mov	r0, r7
 800a370:	f7fe fd9a 	bl	8008ea8 <uxListRemove>
 800a374:	b970      	cbnz	r0, 800a394 <vTaskPriorityInherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a376:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a378:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a37c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a380:	b942      	cbnz	r2, 800a394 <vTaskPriorityInherit+0x64>
 800a382:	4a0f      	ldr	r2, [pc, #60]	; (800a3c0 <vTaskPriorityInherit+0x90>)
 800a384:	2001      	movs	r0, #1
 800a386:	6811      	ldr	r1, [r2, #0]
 800a388:	fa00 f303 	lsl.w	r3, r0, r3
 800a38c:	ea21 0303 	bic.w	r3, r1, r3
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	e000      	b.n	800a396 <vTaskPriorityInherit+0x66>
 800a394:	4a0a      	ldr	r2, [pc, #40]	; (800a3c0 <vTaskPriorityInherit+0x90>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a396:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 800a398:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a39a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a39c:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4083      	lsls	r3, r0
 800a3a2:	4323      	orrs	r3, r4
 800a3a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800a3ae:	6013      	str	r3, [r2, #0]
	}
 800a3b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 800a3b4:	f7fe bd4e 	b.w	8008e54 <vListInsertEnd>
 800a3b8:	2000038c 	.word	0x2000038c
 800a3bc:	20000398 	.word	0x20000398
 800a3c0:	20000438 	.word	0x20000438

0800a3c4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a3c4:	b168      	cbz	r0, 800a3e2 <xTaskPriorityDisinherit+0x1e>
	{
 800a3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800a3c8:	4b27      	ldr	r3, [pc, #156]	; (800a468 <xTaskPriorityDisinherit+0xa4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4283      	cmp	r3, r0
 800a3ce:	d00a      	beq.n	800a3e6 <xTaskPriorityDisinherit+0x22>
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	e7fe      	b.n	800a3e0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800a3e2:	2000      	movs	r0, #0
	}
 800a3e4:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800a3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e8:	b943      	cbnz	r3, 800a3fc <xTaskPriorityDisinherit+0x38>
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	e7fe      	b.n	800a3fa <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a3fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800a400:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a402:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800a404:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a406:	d000      	beq.n	800a40a <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a408:	b10b      	cbz	r3, 800a40e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a40a:	2000      	movs	r0, #0
	}
 800a40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a40e:	1d06      	adds	r6, r0, #4
 800a410:	4604      	mov	r4, r0
 800a412:	4630      	mov	r0, r6
 800a414:	f7fe fd48 	bl	8008ea8 <uxListRemove>
 800a418:	b1a8      	cbz	r0, 800a446 <xTaskPriorityDisinherit+0x82>
 800a41a:	4814      	ldr	r0, [pc, #80]	; (800a46c <xTaskPriorityDisinherit+0xa8>)
 800a41c:	4b14      	ldr	r3, [pc, #80]	; (800a470 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a41e:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800a420:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a422:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a424:	2501      	movs	r5, #1
 800a426:	f04f 0c14 	mov.w	ip, #20
 800a42a:	fb0c 0002 	mla	r0, ip, r2, r0
 800a42e:	4631      	mov	r1, r6
 800a430:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a434:	f1c2 0207 	rsb	r2, r2, #7
 800a438:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a43a:	433e      	orrs	r6, r7
 800a43c:	601e      	str	r6, [r3, #0]
 800a43e:	f7fe fd09 	bl	8008e54 <vListInsertEnd>
					xReturn = pdTRUE;
 800a442:	4628      	mov	r0, r5
	}
 800a444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a446:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a448:	4808      	ldr	r0, [pc, #32]	; (800a46c <xTaskPriorityDisinherit+0xa8>)
 800a44a:	2314      	movs	r3, #20
 800a44c:	fb03 f301 	mul.w	r3, r3, r1
 800a450:	58c3      	ldr	r3, [r0, r3]
 800a452:	b10b      	cbz	r3, 800a458 <xTaskPriorityDisinherit+0x94>
 800a454:	4b06      	ldr	r3, [pc, #24]	; (800a470 <xTaskPriorityDisinherit+0xac>)
 800a456:	e7e2      	b.n	800a41e <xTaskPriorityDisinherit+0x5a>
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <xTaskPriorityDisinherit+0xac>)
 800a45a:	2501      	movs	r5, #1
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	408d      	lsls	r5, r1
 800a460:	ea22 0205 	bic.w	r2, r2, r5
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	e7da      	b.n	800a41e <xTaskPriorityDisinherit+0x5a>
 800a468:	2000038c 	.word	0x2000038c
 800a46c:	20000398 	.word	0x20000398
 800a470:	20000438 	.word	0x20000438

0800a474 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <pvTaskIncrementMutexHeldCount+0x14>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	b11a      	cbz	r2, 800a482 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a47a:	6819      	ldr	r1, [r3, #0]
 800a47c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800a47e:	3201      	adds	r2, #1
 800a480:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800a482:	6818      	ldr	r0, [r3, #0]
	}
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	2000038c 	.word	0x2000038c

0800a48c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <prvTaskExitError+0x2c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3301      	adds	r3, #1
 800a492:	d008      	beq.n	800a4a6 <prvTaskExitError+0x1a>
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	e7fe      	b.n	800a4a4 <prvTaskExitError+0x18>
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	e7fe      	b.n	800a4b6 <prvTaskExitError+0x2a>
 800a4b8:	20000000 	.word	0x20000000

0800a4bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a4bc:	4806      	ldr	r0, [pc, #24]	; (800a4d8 <prvPortStartFirstTask+0x1c>)
 800a4be:	6800      	ldr	r0, [r0, #0]
 800a4c0:	6800      	ldr	r0, [r0, #0]
 800a4c2:	f380 8808 	msr	MSP, r0
 800a4c6:	b662      	cpsie	i
 800a4c8:	b661      	cpsie	f
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	df00      	svc	0
 800a4d4:	bf00      	nop
 800a4d6:	0000      	.short	0x0000
 800a4d8:	e000ed08 	.word	0xe000ed08

0800a4dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4ec <vPortEnableVFP+0x10>
 800a4e0:	6801      	ldr	r1, [r0, #0]
 800a4e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4e6:	6001      	str	r1, [r0, #0]
 800a4e8:	4770      	bx	lr
 800a4ea:	0000      	.short	0x0000
 800a4ec:	e000ed88 	.word	0xe000ed88

0800a4f0 <pxPortInitialiseStack>:
{
 800a4f0:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4f2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4f6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4fa:	4c07      	ldr	r4, [pc, #28]	; (800a518 <pxPortInitialiseStack+0x28>)
 800a4fc:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800a500:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a504:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a508:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800a50c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a510:	bc30      	pop	{r4, r5}
 800a512:	3844      	subs	r0, #68	; 0x44
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	0800a48d 	.word	0x0800a48d
 800a51c:	00000000 	.word	0x00000000

0800a520 <SVC_Handler>:
	__asm volatile (
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <pxCurrentTCBConst2>)
 800a522:	6819      	ldr	r1, [r3, #0]
 800a524:	6808      	ldr	r0, [r1, #0]
 800a526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	f380 8809 	msr	PSP, r0
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f04f 0000 	mov.w	r0, #0
 800a536:	f380 8811 	msr	BASEPRI, r0
 800a53a:	4770      	bx	lr
 800a53c:	f3af 8000 	nop.w

0800a540 <pxCurrentTCBConst2>:
 800a540:	2000038c 	.word	0x2000038c

0800a544 <vPortEnterCritical>:
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a554:	4a0a      	ldr	r2, [pc, #40]	; (800a580 <vPortEnterCritical+0x3c>)
 800a556:	6813      	ldr	r3, [r2, #0]
 800a558:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a55a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a55c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a55e:	d000      	beq.n	800a562 <vPortEnterCritical+0x1e>
}
 800a560:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a562:	4b08      	ldr	r3, [pc, #32]	; (800a584 <vPortEnterCritical+0x40>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a56a:	d0f9      	beq.n	800a560 <vPortEnterCritical+0x1c>
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	e7fe      	b.n	800a57c <vPortEnterCritical+0x38>
 800a57e:	bf00      	nop
 800a580:	20000000 	.word	0x20000000
 800a584:	e000ed04 	.word	0xe000ed04

0800a588 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a588:	4a08      	ldr	r2, [pc, #32]	; (800a5ac <vPortExitCritical+0x24>)
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	b943      	cbnz	r3, 800a5a0 <vPortExitCritical+0x18>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	e7fe      	b.n	800a59e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5a4:	b90b      	cbnz	r3, 800a5aa <vPortExitCritical+0x22>
	__asm volatile
 800a5a6:	f383 8811 	msr	BASEPRI, r3
}
 800a5aa:	4770      	bx	lr
 800a5ac:	20000000 	.word	0x20000000

0800a5b0 <PendSV_Handler>:
	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800a5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5d4:	f380 8811 	msr	BASEPRI, r0
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f7ff fd5c 	bl	800a09c <vTaskSwitchContext>
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f380 8811 	msr	BASEPRI, r0
 800a5ec:	bc08      	pop	{r3}
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	6808      	ldr	r0, [r1, #0]
 800a5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f6:	f01e 0f10 	tst.w	lr, #16
 800a5fa:	bf08      	it	eq
 800a5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a600:	f380 8809 	msr	PSP, r0
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w

0800a610 <pxCurrentTCBConst>:
 800a610:	2000038c 	.word	0x2000038c

0800a614 <SysTick_Handler>:
{
 800a614:	b508      	push	{r3, lr}
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a626:	f7ff fb93 	bl	8009d50 <xTaskIncrementTick>
 800a62a:	b118      	cbz	r0, 800a634 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a62c:	4b03      	ldr	r3, [pc, #12]	; (800a63c <SysTick_Handler+0x28>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a634:	2300      	movs	r3, #0
 800a636:	f383 8811 	msr	BASEPRI, r3
}
 800a63a:	bd08      	pop	{r3, pc}
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a640:	4b06      	ldr	r3, [pc, #24]	; (800a65c <vPortSetupTimerInterrupt+0x1c>)
 800a642:	4907      	ldr	r1, [pc, #28]	; (800a660 <vPortSetupTimerInterrupt+0x20>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4807      	ldr	r0, [pc, #28]	; (800a664 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a648:	4a07      	ldr	r2, [pc, #28]	; (800a668 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a64a:	fba1 1303 	umull	r1, r3, r1, r3
 800a64e:	099b      	lsrs	r3, r3, #6
 800a650:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a652:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a654:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a656:	6011      	str	r1, [r2, #0]
}
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000004 	.word	0x20000004
 800a660:	10624dd3 	.word	0x10624dd3
 800a664:	e000e014 	.word	0xe000e014
 800a668:	e000e010 	.word	0xe000e010

0800a66c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a66c:	4b32      	ldr	r3, [pc, #200]	; (800a738 <xPortStartScheduler+0xcc>)
 800a66e:	4a33      	ldr	r2, [pc, #204]	; (800a73c <xPortStartScheduler+0xd0>)
 800a670:	6819      	ldr	r1, [r3, #0]
 800a672:	4291      	cmp	r1, r2
 800a674:	d04e      	beq.n	800a714 <xPortStartScheduler+0xa8>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b31      	ldr	r3, [pc, #196]	; (800a740 <xPortStartScheduler+0xd4>)
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d053      	beq.n	800a726 <xPortStartScheduler+0xba>
{
 800a67e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a680:	4b30      	ldr	r3, [pc, #192]	; (800a744 <xPortStartScheduler+0xd8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a682:	4c31      	ldr	r4, [pc, #196]	; (800a748 <xPortStartScheduler+0xdc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a684:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a686:	4931      	ldr	r1, [pc, #196]	; (800a74c <xPortStartScheduler+0xe0>)
{
 800a688:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a68a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a68c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a68e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a690:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a69a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6a6:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6a8:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6aa:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ac:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6ae:	d50f      	bpl.n	800a6d0 <xPortStartScheduler+0x64>
 800a6b0:	2206      	movs	r2, #6
 800a6b2:	e000      	b.n	800a6b6 <xPortStartScheduler+0x4a>
 800a6b4:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6c6:	061b      	lsls	r3, r3, #24
 800a6c8:	f102 30ff 	add.w	r0, r2, #4294967295
 800a6cc:	d4f2      	bmi.n	800a6b4 <xPortStartScheduler+0x48>
 800a6ce:	600a      	str	r2, [r1, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6d0:	680b      	ldr	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6d2:	9801      	ldr	r0, [sp, #4]
 800a6d4:	4c1b      	ldr	r4, [pc, #108]	; (800a744 <xPortStartScheduler+0xd8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6d6:	4a1e      	ldr	r2, [pc, #120]	; (800a750 <xPortStartScheduler+0xe4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6d8:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6da:	b2c0      	uxtb	r0, r0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6e0:	600b      	str	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6e2:	7020      	strb	r0, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6e4:	6813      	ldr	r3, [r2, #0]
 800a6e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6ec:	6813      	ldr	r3, [r2, #0]
 800a6ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6f2:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800a6f4:	f7ff ffa4 	bl	800a640 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a6f8:	4b16      	ldr	r3, [pc, #88]	; (800a754 <xPortStartScheduler+0xe8>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800a6fe:	f7ff feed 	bl	800a4dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a702:	4a15      	ldr	r2, [pc, #84]	; (800a758 <xPortStartScheduler+0xec>)
 800a704:	6813      	ldr	r3, [r2, #0]
 800a706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a70a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a70c:	f7ff fed6 	bl	800a4bc <prvPortStartFirstTask>
	prvTaskExitError();
 800a710:	f7ff febc 	bl	800a48c <prvTaskExitError>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	e7fe      	b.n	800a724 <xPortStartScheduler+0xb8>
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	e7fe      	b.n	800a736 <xPortStartScheduler+0xca>
 800a738:	e000ed00 	.word	0xe000ed00
 800a73c:	410fc271 	.word	0x410fc271
 800a740:	410fc270 	.word	0x410fc270
 800a744:	e000e400 	.word	0xe000e400
 800a748:	200004b8 	.word	0x200004b8
 800a74c:	200004bc 	.word	0x200004bc
 800a750:	e000ed20 	.word	0xe000ed20
 800a754:	20000000 	.word	0x20000000
 800a758:	e000ef34 	.word	0xe000ef34

0800a75c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800a75c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a760:	2b0f      	cmp	r3, #15
 800a762:	d90e      	bls.n	800a782 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a764:	4910      	ldr	r1, [pc, #64]	; (800a7a8 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a766:	4a11      	ldr	r2, [pc, #68]	; (800a7ac <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a768:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a76a:	7812      	ldrb	r2, [r2, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d908      	bls.n	800a782 <vPortValidateInterruptPriority+0x26>
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	e7fe      	b.n	800a780 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a782:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortValidateInterruptPriority+0x54>)
 800a784:	4a0b      	ldr	r2, [pc, #44]	; (800a7b4 <vPortValidateInterruptPriority+0x58>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a78e:	4293      	cmp	r3, r2
 800a790:	d908      	bls.n	800a7a4 <vPortValidateInterruptPriority+0x48>
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	e7fe      	b.n	800a7a2 <vPortValidateInterruptPriority+0x46>
	}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	e000e3f0 	.word	0xe000e3f0
 800a7ac:	200004b8 	.word	0x200004b8
 800a7b0:	e000ed0c 	.word	0xe000ed0c
 800a7b4:	200004bc 	.word	0x200004bc

0800a7b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7b8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7ba:	4b11      	ldr	r3, [pc, #68]	; (800a800 <prvInsertBlockIntoFreeList+0x48>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4282      	cmp	r2, r0
 800a7c0:	d201      	bcs.n	800a7c6 <prvInsertBlockIntoFreeList+0xe>
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	e7fa      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7c6:	685c      	ldr	r4, [r3, #4]
 800a7c8:	1919      	adds	r1, r3, r4
 800a7ca:	4288      	cmp	r0, r1
 800a7cc:	d103      	bne.n	800a7d6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7ce:	6841      	ldr	r1, [r0, #4]
 800a7d0:	4421      	add	r1, r4
 800a7d2:	6059      	str	r1, [r3, #4]
 800a7d4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7d6:	6844      	ldr	r4, [r0, #4]
 800a7d8:	1901      	adds	r1, r0, r4
 800a7da:	428a      	cmp	r2, r1
 800a7dc:	d109      	bne.n	800a7f2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7de:	4909      	ldr	r1, [pc, #36]	; (800a804 <prvInsertBlockIntoFreeList+0x4c>)
 800a7e0:	6809      	ldr	r1, [r1, #0]
 800a7e2:	428a      	cmp	r2, r1
 800a7e4:	d005      	beq.n	800a7f2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7e6:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ea:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ec:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ee:	6041      	str	r1, [r0, #4]
 800a7f0:	e000      	b.n	800a7f4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7f2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7f4:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7f6:	bf18      	it	ne
 800a7f8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	2000479c 	.word	0x2000479c
 800a804:	200004c0 	.word	0x200004c0

0800a808 <pvPortMalloc>:
{
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 800a80a:	4d3e      	ldr	r5, [pc, #248]	; (800a904 <pvPortMalloc+0xfc>)
{
 800a80c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a80e:	f7ff fa89 	bl	8009d24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a812:	682a      	ldr	r2, [r5, #0]
 800a814:	2a00      	cmp	r2, #0
 800a816:	d056      	beq.n	800a8c6 <pvPortMalloc+0xbe>
 800a818:	4b3b      	ldr	r3, [pc, #236]	; (800a908 <pvPortMalloc+0x100>)
 800a81a:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a81c:	422c      	tst	r4, r5
 800a81e:	d14d      	bne.n	800a8bc <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800a820:	2c00      	cmp	r4, #0
 800a822:	d04b      	beq.n	800a8bc <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800a824:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a828:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a82a:	bf1c      	itt	ne
 800a82c:	f023 0307 	bicne.w	r3, r3, #7
 800a830:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a832:	2b00      	cmp	r3, #0
 800a834:	d042      	beq.n	800a8bc <pvPortMalloc+0xb4>
 800a836:	4f35      	ldr	r7, [pc, #212]	; (800a90c <pvPortMalloc+0x104>)
 800a838:	683e      	ldr	r6, [r7, #0]
 800a83a:	429e      	cmp	r6, r3
 800a83c:	d33e      	bcc.n	800a8bc <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800a83e:	4834      	ldr	r0, [pc, #208]	; (800a910 <pvPortMalloc+0x108>)
 800a840:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a842:	e006      	b.n	800a852 <pvPortMalloc+0x4a>
 800a844:	f8d4 c000 	ldr.w	ip, [r4]
 800a848:	f1bc 0f00 	cmp.w	ip, #0
 800a84c:	d004      	beq.n	800a858 <pvPortMalloc+0x50>
 800a84e:	4620      	mov	r0, r4
 800a850:	4664      	mov	r4, ip
 800a852:	6861      	ldr	r1, [r4, #4]
 800a854:	4299      	cmp	r1, r3
 800a856:	d3f5      	bcc.n	800a844 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800a858:	4294      	cmp	r4, r2
 800a85a:	d02f      	beq.n	800a8bc <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a860:	1aca      	subs	r2, r1, r3
 800a862:	2a10      	cmp	r2, #16
 800a864:	d910      	bls.n	800a888 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a866:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a868:	0741      	lsls	r1, r0, #29
 800a86a:	d008      	beq.n	800a87e <pvPortMalloc+0x76>
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	e7fe      	b.n	800a87c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a87e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a880:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a882:	f7ff ff99 	bl	800a7b8 <prvInsertBlockIntoFreeList>
 800a886:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <pvPortMalloc+0x10c>)
 800a88a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a88c:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800a88e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a890:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a892:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800a894:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a898:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a89c:	bf38      	it	cc
 800a89e:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8a0:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800a8a2:	f7ff fb01 	bl	8009ea8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8a6:	0763      	lsls	r3, r4, #29
 800a8a8:	d00b      	beq.n	800a8c2 <pvPortMalloc+0xba>
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	e7fe      	b.n	800a8ba <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800a8bc:	f7ff faf4 	bl	8009ea8 <xTaskResumeAll>
 800a8c0:	2400      	movs	r4, #0
}
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800a8c8:	4a14      	ldr	r2, [pc, #80]	; (800a91c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8ca:	4911      	ldr	r1, [pc, #68]	; (800a910 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8cc:	4f11      	ldr	r7, [pc, #68]	; (800a914 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8ce:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8d0:	bf18      	it	ne
 800a8d2:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d4:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d8:	bf18      	it	ne
 800a8da:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8de:	4e0b      	ldr	r6, [pc, #44]	; (800a90c <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 800a8e0:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8e2:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8e4:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8e6:	4d08      	ldr	r5, [pc, #32]	; (800a908 <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8e8:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800a8f4:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8f8:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8fa:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8fc:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a900:	460d      	mov	r5, r1
 800a902:	e78b      	b.n	800a81c <pvPortMalloc+0x14>
 800a904:	200004c0 	.word	0x200004c0
 800a908:	20004790 	.word	0x20004790
 800a90c:	20004794 	.word	0x20004794
 800a910:	2000479c 	.word	0x2000479c
 800a914:	20004798 	.word	0x20004798
 800a918:	200004c4 	.word	0x200004c4
 800a91c:	20004788 	.word	0x20004788

0800a920 <vPortFree>:
	if( pv != NULL )
 800a920:	b1d0      	cbz	r0, 800a958 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a922:	4a19      	ldr	r2, [pc, #100]	; (800a988 <vPortFree+0x68>)
 800a924:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a928:	6812      	ldr	r2, [r2, #0]
 800a92a:	4213      	tst	r3, r2
 800a92c:	d108      	bne.n	800a940 <vPortFree+0x20>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	e7fe      	b.n	800a93e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a940:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a944:	b149      	cbz	r1, 800a95a <vPortFree+0x3a>
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	e7fe      	b.n	800a956 <vPortFree+0x36>
 800a958:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a95a:	ea23 0302 	bic.w	r3, r3, r2
{
 800a95e:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a960:	f840 3c04 	str.w	r3, [r0, #-4]
 800a964:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800a966:	f7ff f9dd 	bl	8009d24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a96a:	4a08      	ldr	r2, [pc, #32]	; (800a98c <vPortFree+0x6c>)
 800a96c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a970:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a972:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a976:	440b      	add	r3, r1
 800a978:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a97a:	f7ff ff1d 	bl	800a7b8 <prvInsertBlockIntoFreeList>
}
 800a97e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a982:	f7ff ba91 	b.w	8009ea8 <xTaskResumeAll>
 800a986:	bf00      	nop
 800a988:	20004790 	.word	0x20004790
 800a98c:	20004794 	.word	0x20004794

0800a990 <MX_ADC1_Init>:
uint32_t ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a990:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc1.Init.Resolution = ADCResolution;
 800a992:	4b19      	ldr	r3, [pc, #100]	; (800a9f8 <MX_ADC1_Init+0x68>)
  hadc1.Instance = ADC1;
 800a994:	4c19      	ldr	r4, [pc, #100]	; (800a9fc <MX_ADC1_Init+0x6c>)
  hadc1.Init.Resolution = ADCResolution;
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60a3      	str	r3, [r4, #8]
  hadc1.Instance = ADC1;
 800a99a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a99e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800a9a2:	b086      	sub	sp, #24
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800a9a4:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a9a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800a9aa:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800a9ae:	2304      	movs	r3, #4
  hadc1.Instance = ADC1;
 800a9b0:	6020      	str	r0, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a9b2:	6065      	str	r5, [r4, #4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc1);
 800a9b4:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a9b6:	2500      	movs	r5, #0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a9b8:	6321      	str	r1, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800a9ba:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a9bc:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a9c0:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a9c2:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a9c4:	60e5      	str	r5, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a9c6:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800a9c8:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800a9ca:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a9cc:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc1);
 800a9ce:	f7fa fb23 	bl	8005018 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <MX_ADC1_Init+0x70>)
 800a9d4:	4a0b      	ldr	r2, [pc, #44]	; (800aa04 <MX_ADC1_Init+0x74>)
 800a9d6:	7819      	ldrb	r1, [r3, #0]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800a9d8:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <MX_ADC1_Init+0x78>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800a9da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800a9de:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800a9e0:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a9e6:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800a9ea:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800a9ec:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800a9ee:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800a9f0:	f7fb f814 	bl	8005a1c <HAL_ADC_ConfigChannel>

}
 800a9f4:	b006      	add	sp, #24
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	200047b0 	.word	0x200047b0
 800a9fc:	2000cc00 	.word	0x2000cc00
 800aa00:	200047ac 	.word	0x200047ac
 800aa04:	08011834 	.word	0x08011834
 800aa08:	200047b4 	.word	0x200047b4

0800aa0c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800aa0c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc2.Init.Resolution = ADCResolution;
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <MX_ADC2_Init+0x68>)
  hadc2.Instance = ADC2;
 800aa10:	4c19      	ldr	r4, [pc, #100]	; (800aa78 <MX_ADC2_Init+0x6c>)
  hadc2.Init.Resolution = ADCResolution;
 800aa12:	681b      	ldr	r3, [r3, #0]
  hadc2.Instance = ADC2;
 800aa14:	4819      	ldr	r0, [pc, #100]	; (800aa7c <MX_ADC2_Init+0x70>)
  hadc2.Init.Resolution = ADCResolution;
 800aa16:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800aa18:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800aa1c:	b086      	sub	sp, #24
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800aa1e:	2601      	movs	r6, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800aa20:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800aa24:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800aa28:	2304      	movs	r3, #4
  hadc2.Instance = ADC2;
 800aa2a:	6020      	str	r0, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800aa2c:	6065      	str	r5, [r4, #4]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc2);
 800aa2e:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aa30:	2500      	movs	r5, #0
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800aa32:	6321      	str	r1, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800aa34:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aa36:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800aa3a:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800aa3c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800aa3e:	60e5      	str	r5, [r4, #12]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800aa40:	61a5      	str	r5, [r4, #24]
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800aa42:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Init.NbrOfConversion = 1;
 800aa44:	6226      	str	r6, [r4, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800aa46:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc2);
 800aa48:	f7fa fae6 	bl	8005018 <HAL_ADC_Init>
	
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800aa4c:	4b0c      	ldr	r3, [pc, #48]	; (800aa80 <MX_ADC2_Init+0x74>)
 800aa4e:	4a0d      	ldr	r2, [pc, #52]	; (800aa84 <MX_ADC2_Init+0x78>)
 800aa50:	7859      	ldrb	r1, [r3, #1]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800aa52:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <MX_ADC2_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800aa54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800aa58:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800aa5a:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800aa60:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800aa64:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800aa66:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800aa68:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800aa6a:	f7fa ffd7 	bl	8005a1c <HAL_ADC_ConfigChannel>

}
 800aa6e:	b006      	add	sp, #24
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
 800aa72:	bf00      	nop
 800aa74:	200047b0 	.word	0x200047b0
 800aa78:	2000cb68 	.word	0x2000cb68
 800aa7c:	50000100 	.word	0x50000100
 800aa80:	200047ac 	.word	0x200047ac
 800aa84:	08011858 	.word	0x08011858
 800aa88:	200047b4 	.word	0x200047b4

0800aa8c <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800aa8c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc3.Init.Resolution = ADCResolution;
 800aa8e:	4b19      	ldr	r3, [pc, #100]	; (800aaf4 <MX_ADC3_Init+0x68>)
  hadc3.Instance = ADC3;
 800aa90:	4c19      	ldr	r4, [pc, #100]	; (800aaf8 <MX_ADC3_Init+0x6c>)
  hadc3.Init.Resolution = ADCResolution;
 800aa92:	681b      	ldr	r3, [r3, #0]
  hadc3.Instance = ADC3;
 800aa94:	4819      	ldr	r0, [pc, #100]	; (800aafc <MX_ADC3_Init+0x70>)
  hadc3.Init.Resolution = ADCResolution;
 800aa96:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800aa98:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800aa9c:	b086      	sub	sp, #24
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800aa9e:	2601      	movs	r6, #1
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800aaa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800aaa4:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800aaa8:	2304      	movs	r3, #4
  hadc3.Instance = ADC3;
 800aaaa:	6020      	str	r0, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800aaac:	6065      	str	r5, [r4, #4]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc3);
 800aaae:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aab0:	2500      	movs	r5, #0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800aab2:	6321      	str	r1, [r4, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800aab4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aab6:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800aaba:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800aabc:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800aabe:	60e5      	str	r5, [r4, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800aac0:	61a5      	str	r5, [r4, #24]
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800aac2:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800aac4:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800aac6:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc3);
 800aac8:	f7fa faa6 	bl	8005018 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800aacc:	4b0c      	ldr	r3, [pc, #48]	; (800ab00 <MX_ADC3_Init+0x74>)
 800aace:	4a0d      	ldr	r2, [pc, #52]	; (800ab04 <MX_ADC3_Init+0x78>)
 800aad0:	7899      	ldrb	r1, [r3, #2]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800aad2:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <MX_ADC3_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800aad4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800aad8:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800aada:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800aadc:	4620      	mov	r0, r4
 800aade:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800aae0:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800aae4:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800aae6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800aae8:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800aaea:	f7fa ff97 	bl	8005a1c <HAL_ADC_ConfigChannel>

}
 800aaee:	b006      	add	sp, #24
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200047b0 	.word	0x200047b0
 800aaf8:	2000cc54 	.word	0x2000cc54
 800aafc:	50000400 	.word	0x50000400
 800ab00:	200047ac 	.word	0x200047ac
 800ab04:	08011880 	.word	0x08011880
 800ab08:	200047b4 	.word	0x200047b4

0800ab0c <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800ab0c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc4.Instance = ADC4;
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc4.Init.Resolution = ADCResolution;
 800ab0e:	4b19      	ldr	r3, [pc, #100]	; (800ab74 <MX_ADC4_Init+0x68>)
  hadc4.Instance = ADC4;
 800ab10:	4c19      	ldr	r4, [pc, #100]	; (800ab78 <MX_ADC4_Init+0x6c>)
  hadc4.Init.Resolution = ADCResolution;
 800ab12:	681b      	ldr	r3, [r3, #0]
  hadc4.Instance = ADC4;
 800ab14:	4819      	ldr	r0, [pc, #100]	; (800ab7c <MX_ADC4_Init+0x70>)
  hadc4.Init.Resolution = ADCResolution;
 800ab16:	60a3      	str	r3, [r4, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ab18:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800ab1c:	b086      	sub	sp, #24
  hadc4.Init.ContinuousConvMode = DISABLE;
  hadc4.Init.DiscontinuousConvMode = DISABLE;
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc4.Init.NbrOfConversion = 1;
 800ab1e:	2601      	movs	r6, #1
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ab20:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ab24:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Init.DMAContinuousRequests = ENABLE;
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800ab28:	2304      	movs	r3, #4
  hadc4.Instance = ADC4;
 800ab2a:	6020      	str	r0, [r4, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ab2c:	6065      	str	r5, [r4, #4]
  hadc4.Init.LowPowerAutoWait = DISABLE;
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc4);
 800ab2e:	4620      	mov	r0, r4
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ab30:	2500      	movs	r5, #0
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ab32:	6321      	str	r1, [r4, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ab34:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ab36:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800ab3a:	61e5      	str	r5, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800ab3c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ab3e:	60e5      	str	r5, [r4, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800ab40:	61a5      	str	r5, [r4, #24]
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800ab42:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc4.Init.NbrOfConversion = 1;
 800ab44:	6226      	str	r6, [r4, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800ab46:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc4);
 800ab48:	f7fa fa66 	bl	8005018 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <MX_ADC4_Init+0x74>)
 800ab4e:	4a0d      	ldr	r2, [pc, #52]	; (800ab84 <MX_ADC4_Init+0x78>)
 800ab50:	78d9      	ldrb	r1, [r3, #3]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <MX_ADC4_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800ab54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800ab58:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800ab5a:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ab60:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800ab64:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800ab66:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800ab68:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800ab6a:	f7fa ff57 	bl	8005a1c <HAL_ADC_ConfigChannel>

}
 800ab6e:	b006      	add	sp, #24
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
 800ab72:	bf00      	nop
 800ab74:	200047b0 	.word	0x200047b0
 800ab78:	2000ccec 	.word	0x2000ccec
 800ab7c:	50000500 	.word	0x50000500
 800ab80:	200047ac 	.word	0x200047ac
 800ab84:	08011890 	.word	0x08011890
 800ab88:	200047b4 	.word	0x200047b4

0800ab8c <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ab8c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800ab8e:	6803      	ldr	r3, [r0, #0]
 800ab90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800ab94:	b08a      	sub	sp, #40	; 0x28
 800ab96:	4604      	mov	r4, r0
  if(hadc->Instance==ADC1)
 800ab98:	d044      	beq.n	800ac24 <HAL_ADC_MspInit+0x98>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800ab9a:	4a8b      	ldr	r2, [pc, #556]	; (800adc8 <HAL_ADC_MspInit+0x23c>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d009      	beq.n	800abb4 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800aba0:	4a8a      	ldr	r2, [pc, #552]	; (800adcc <HAL_ADC_MspInit+0x240>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	f000 8090 	beq.w	800acc8 <HAL_ADC_MspInit+0x13c>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 800aba8:	4a89      	ldr	r2, [pc, #548]	; (800add0 <HAL_ADC_MspInit+0x244>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	f000 80cc 	beq.w	800ad48 <HAL_ADC_MspInit+0x1bc>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800abb0:	b00a      	add	sp, #40	; 0x28
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800abb4:	4a87      	ldr	r2, [pc, #540]	; (800add4 <HAL_ADC_MspInit+0x248>)
 800abb6:	6813      	ldr	r3, [r2, #0]
 800abb8:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800abba:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800abbc:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800abbe:	d072      	beq.n	800aca6 <HAL_ADC_MspInit+0x11a>
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800abc0:	4b85      	ldr	r3, [pc, #532]	; (800add8 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800abc2:	4986      	ldr	r1, [pc, #536]	; (800addc <HAL_ADC_MspInit+0x250>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	4a86      	ldr	r2, [pc, #536]	; (800ade0 <HAL_ADC_MspInit+0x254>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800abc8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800abcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800abd0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd2:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800abd4:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800abd6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd8:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800abdc:	f7fb fc64 	bl	80064a8 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800abe0:	4b80      	ldr	r3, [pc, #512]	; (800ade4 <HAL_ADC_MspInit+0x258>)
    hdma_adc2.Instance = DMA2_Channel1;
 800abe2:	4d81      	ldr	r5, [pc, #516]	; (800ade8 <HAL_ADC_MspInit+0x25c>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800abe4:	681b      	ldr	r3, [r3, #0]
    hdma_adc2.Instance = DMA2_Channel1;
 800abe6:	4981      	ldr	r1, [pc, #516]	; (800adec <HAL_ADC_MspInit+0x260>)
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abe8:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800abea:	f023 0308 	bic.w	r3, r3, #8
 800abee:	2b10      	cmp	r3, #16
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800abf0:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800abf4:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Init(&hdma_adc2);
 800abf6:	487c      	ldr	r0, [pc, #496]	; (800ade8 <HAL_ADC_MspInit+0x25c>)
    hdma_adc2.Instance = DMA2_Channel1;
 800abf8:	6029      	str	r1, [r5, #0]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800abfa:	bf18      	it	ne
 800abfc:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ac00:	60ea      	str	r2, [r5, #12]
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac02:	bf14      	ite	ne
 800ac04:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800ac08:	4631      	moveq	r1, r6
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ac0a:	2220      	movs	r2, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800ac0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac10:	612e      	str	r6, [r5, #16]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800ac12:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800ac16:	61eb      	str	r3, [r5, #28]
    HAL_DMA_Init(&hdma_adc4);
 800ac18:	f7fb fa68 	bl	80060ec <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800ac1c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ac1e:	626c      	str	r4, [r5, #36]	; 0x24
}
 800ac20:	b00a      	add	sp, #40	; 0x28
 800ac22:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800ac24:	4a6b      	ldr	r2, [pc, #428]	; (800add4 <HAL_ADC_MspInit+0x248>)
 800ac26:	6813      	ldr	r3, [r2, #0]
 800ac28:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800ac2a:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800ac2c:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800ac2e:	d029      	beq.n	800ac84 <HAL_ADC_MspInit+0xf8>
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ac30:	4b69      	ldr	r3, [pc, #420]	; (800add8 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ac32:	496f      	ldr	r1, [pc, #444]	; (800adf0 <HAL_ADC_MspInit+0x264>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	4a6f      	ldr	r2, [pc, #444]	; (800adf4 <HAL_ADC_MspInit+0x268>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ac38:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ac3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ac40:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac42:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac44:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ac46:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac48:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ac4c:	f7fb fc2c 	bl	80064a8 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ac50:	4b64      	ldr	r3, [pc, #400]	; (800ade4 <HAL_ADC_MspInit+0x258>)
    hdma_adc1.Instance = DMA1_Channel1;
 800ac52:	4d69      	ldr	r5, [pc, #420]	; (800adf8 <HAL_ADC_MspInit+0x26c>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ac54:	681b      	ldr	r3, [r3, #0]
    hdma_adc1.Instance = DMA1_Channel1;
 800ac56:	4969      	ldr	r1, [pc, #420]	; (800adfc <HAL_ADC_MspInit+0x270>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac58:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ac5a:	f023 0308 	bic.w	r3, r3, #8
 800ac5e:	2b10      	cmp	r3, #16
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ac60:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac64:	60ae      	str	r6, [r5, #8]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac66:	bf18      	it	ne
 800ac68:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 800ac6c:	6029      	str	r1, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ac6e:	60ea      	str	r2, [r5, #12]
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac70:	bf14      	ite	ne
 800ac72:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800ac76:	4631      	moveq	r1, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ac78:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800ac7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac7e:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc1);
 800ac80:	485d      	ldr	r0, [pc, #372]	; (800adf8 <HAL_ADC_MspInit+0x26c>)
 800ac82:	e7c6      	b.n	800ac12 <HAL_ADC_MspInit+0x86>
      __ADC12_CLK_ENABLE();
 800ac84:	4b5e      	ldr	r3, [pc, #376]	; (800ae00 <HAL_ADC_MspInit+0x274>)
 800ac86:	695a      	ldr	r2, [r3, #20]
 800ac88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac8c:	615a      	str	r2, [r3, #20]
 800ac8e:	695a      	ldr	r2, [r3, #20]
 800ac90:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ac94:	9201      	str	r2, [sp, #4]
 800ac96:	9a01      	ldr	r2, [sp, #4]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800ac98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9a:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800ac9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aca2:	62da      	str	r2, [r3, #44]	; 0x2c
 800aca4:	e7c4      	b.n	800ac30 <HAL_ADC_MspInit+0xa4>
      __ADC12_CLK_ENABLE();
 800aca6:	4b56      	ldr	r3, [pc, #344]	; (800ae00 <HAL_ADC_MspInit+0x274>)
 800aca8:	695a      	ldr	r2, [r3, #20]
 800acaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800acae:	615a      	str	r2, [r3, #20]
 800acb0:	695a      	ldr	r2, [r3, #20]
 800acb2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800acb6:	9202      	str	r2, [sp, #8]
 800acb8:	9a02      	ldr	r2, [sp, #8]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800acba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbc:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800acc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acc4:	62da      	str	r2, [r3, #44]	; 0x2c
 800acc6:	e77b      	b.n	800abc0 <HAL_ADC_MspInit+0x34>
    ADC34_CLK_ENABLED++;
 800acc8:	4a4e      	ldr	r2, [pc, #312]	; (800ae04 <HAL_ADC_MspInit+0x278>)
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800acce:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800acd0:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800acd2:	d10f      	bne.n	800acf4 <HAL_ADC_MspInit+0x168>
      __ADC34_CLK_ENABLE();
 800acd4:	4b4a      	ldr	r3, [pc, #296]	; (800ae00 <HAL_ADC_MspInit+0x274>)
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800acdc:	615a      	str	r2, [r3, #20]
 800acde:	695a      	ldr	r2, [r3, #20]
 800ace0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ace4:	9203      	str	r2, [sp, #12]
 800ace6:	9a03      	ldr	r2, [sp, #12]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800acee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acf2:	62da      	str	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800acf4:	4b38      	ldr	r3, [pc, #224]	; (800add8 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800acf6:	4944      	ldr	r1, [pc, #272]	; (800ae08 <HAL_ADC_MspInit+0x27c>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800acf8:	789b      	ldrb	r3, [r3, #2]
 800acfa:	4a44      	ldr	r2, [pc, #272]	; (800ae0c <HAL_ADC_MspInit+0x280>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800acfc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800ad00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad04:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad06:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad08:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800ad0a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad0c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800ad10:	f7fb fbca 	bl	80064a8 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad14:	4b33      	ldr	r3, [pc, #204]	; (800ade4 <HAL_ADC_MspInit+0x258>)
    hdma_adc3.Instance = DMA2_Channel5;
 800ad16:	4d3e      	ldr	r5, [pc, #248]	; (800ae10 <HAL_ADC_MspInit+0x284>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad18:	681b      	ldr	r3, [r3, #0]
    hdma_adc3.Instance = DMA2_Channel5;
 800ad1a:	493e      	ldr	r1, [pc, #248]	; (800ae14 <HAL_ADC_MspInit+0x288>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad1c:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad1e:	f023 0308 	bic.w	r3, r3, #8
 800ad22:	2b10      	cmp	r3, #16
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800ad24:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad28:	60ae      	str	r6, [r5, #8]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ad2a:	bf18      	it	ne
 800ad2c:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc3.Instance = DMA2_Channel5;
 800ad30:	6029      	str	r1, [r5, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800ad32:	60ea      	str	r2, [r5, #12]
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ad34:	bf14      	ite	ne
 800ad36:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800ad3a:	4631      	moveq	r1, r6
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800ad3c:	2220      	movs	r2, #32
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800ad3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad42:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc3);
 800ad44:	4832      	ldr	r0, [pc, #200]	; (800ae10 <HAL_ADC_MspInit+0x284>)
 800ad46:	e764      	b.n	800ac12 <HAL_ADC_MspInit+0x86>
    ADC34_CLK_ENABLED++;
 800ad48:	4a2e      	ldr	r2, [pc, #184]	; (800ae04 <HAL_ADC_MspInit+0x278>)
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800ad4e:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800ad50:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800ad52:	d10f      	bne.n	800ad74 <HAL_ADC_MspInit+0x1e8>
      __ADC34_CLK_ENABLE();
 800ad54:	4b2a      	ldr	r3, [pc, #168]	; (800ae00 <HAL_ADC_MspInit+0x274>)
 800ad56:	695a      	ldr	r2, [r3, #20]
 800ad58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ad5c:	615a      	str	r2, [r3, #20]
 800ad5e:	695a      	ldr	r2, [r3, #20]
 800ad60:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ad64:	9204      	str	r2, [sp, #16]
 800ad66:	9a04      	ldr	r2, [sp, #16]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800ad68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800ad6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad72:	62da      	str	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800ad74:	4b18      	ldr	r3, [pc, #96]	; (800add8 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800ad76:	4928      	ldr	r1, [pc, #160]	; (800ae18 <HAL_ADC_MspInit+0x28c>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800ad78:	78db      	ldrb	r3, [r3, #3]
 800ad7a:	4a28      	ldr	r2, [pc, #160]	; (800ae1c <HAL_ADC_MspInit+0x290>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800ad7c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800ad80:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad84:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad86:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad88:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800ad8a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800ad90:	f7fb fb8a 	bl	80064a8 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad94:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <HAL_ADC_MspInit+0x258>)
    hdma_adc4.Instance = DMA2_Channel2;
 800ad96:	4d22      	ldr	r5, [pc, #136]	; (800ae20 <HAL_ADC_MspInit+0x294>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad98:	681b      	ldr	r3, [r3, #0]
    hdma_adc4.Instance = DMA2_Channel2;
 800ad9a:	4922      	ldr	r1, [pc, #136]	; (800ae24 <HAL_ADC_MspInit+0x298>)
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad9c:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ad9e:	f023 0308 	bic.w	r3, r3, #8
 800ada2:	2b10      	cmp	r3, #16
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800ada4:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800ada8:	60ae      	str	r6, [r5, #8]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800adaa:	bf18      	it	ne
 800adac:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc4.Instance = DMA2_Channel2;
 800adb0:	6029      	str	r1, [r5, #0]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800adb2:	60ea      	str	r2, [r5, #12]
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800adb4:	bf14      	ite	ne
 800adb6:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800adba:	4631      	moveq	r1, r6
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800adbc:	2220      	movs	r2, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800adbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adc2:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc4);
 800adc4:	4816      	ldr	r0, [pc, #88]	; (800ae20 <HAL_ADC_MspInit+0x294>)
 800adc6:	e724      	b.n	800ac12 <HAL_ADC_MspInit+0x86>
 800adc8:	50000100 	.word	0x50000100
 800adcc:	50000400 	.word	0x50000400
 800add0:	50000500 	.word	0x50000500
 800add4:	200047a4 	.word	0x200047a4
 800add8:	200047ac 	.word	0x200047ac
 800addc:	080118c4 	.word	0x080118c4
 800ade0:	08011910 	.word	0x08011910
 800ade4:	200047b0 	.word	0x200047b0
 800ade8:	2000cd40 	.word	0x2000cd40
 800adec:	40020408 	.word	0x40020408
 800adf0:	080118a0 	.word	0x080118a0
 800adf4:	080118fc 	.word	0x080118fc
 800adf8:	2000cca8 	.word	0x2000cca8
 800adfc:	40020008 	.word	0x40020008
 800ae00:	40021000 	.word	0x40021000
 800ae04:	200047a8 	.word	0x200047a8
 800ae08:	080118ec 	.word	0x080118ec
 800ae0c:	08011924 	.word	0x08011924
 800ae10:	2000cbbc 	.word	0x2000cbbc
 800ae14:	40020458 	.word	0x40020458
 800ae18:	080118ec 	.word	0x080118ec
 800ae1c:	0801192c 	.word	0x0801192c
 800ae20:	2000cb24 	.word	0x2000cb24
 800ae24:	4002041c 	.word	0x4002041c

0800ae28 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800ae28:	b530      	push	{r4, r5, lr}
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	b097      	sub	sp, #92	; 0x5c
 800ae2e:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800ae30:	2803      	cmp	r0, #3
 800ae32:	d808      	bhi.n	800ae46 <ADC_DMA_Reconfig+0x1e>
 800ae34:	e8df f000 	tbb	[pc, r0]
 800ae38:	0212181e 	.word	0x0212181e
		break;
		case 2:
			adcHandler=hadc3;
		break;
		case 3:
			adcHandler=hadc4;
 800ae3c:	2254      	movs	r2, #84	; 0x54
 800ae3e:	4910      	ldr	r1, [pc, #64]	; (800ae80 <ADC_DMA_Reconfig+0x58>)
 800ae40:	a801      	add	r0, sp, #4
 800ae42:	f003 fcad 	bl	800e7a0 <memcpy>
		break;
	}
	
	if(buff!=NULL && len!=0){
 800ae46:	b104      	cbz	r4, 800ae4a <ADC_DMA_Reconfig+0x22>
 800ae48:	b90d      	cbnz	r5, 800ae4e <ADC_DMA_Reconfig+0x26>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
	}
}
 800ae4a:	b017      	add	sp, #92	; 0x5c
 800ae4c:	bd30      	pop	{r4, r5, pc}
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800ae4e:	462a      	mov	r2, r5
 800ae50:	4621      	mov	r1, r4
 800ae52:	a801      	add	r0, sp, #4
 800ae54:	f7fa fbc4 	bl	80055e0 <HAL_ADC_Start_DMA>
}
 800ae58:	b017      	add	sp, #92	; 0x5c
 800ae5a:	bd30      	pop	{r4, r5, pc}
			adcHandler=hadc3;
 800ae5c:	2254      	movs	r2, #84	; 0x54
 800ae5e:	4909      	ldr	r1, [pc, #36]	; (800ae84 <ADC_DMA_Reconfig+0x5c>)
 800ae60:	a801      	add	r0, sp, #4
 800ae62:	f003 fc9d 	bl	800e7a0 <memcpy>
		break;
 800ae66:	e7ee      	b.n	800ae46 <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc2;
 800ae68:	2254      	movs	r2, #84	; 0x54
 800ae6a:	4907      	ldr	r1, [pc, #28]	; (800ae88 <ADC_DMA_Reconfig+0x60>)
 800ae6c:	a801      	add	r0, sp, #4
 800ae6e:	f003 fc97 	bl	800e7a0 <memcpy>
		break;
 800ae72:	e7e8      	b.n	800ae46 <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc1;
 800ae74:	2254      	movs	r2, #84	; 0x54
 800ae76:	4905      	ldr	r1, [pc, #20]	; (800ae8c <ADC_DMA_Reconfig+0x64>)
 800ae78:	a801      	add	r0, sp, #4
 800ae7a:	f003 fc91 	bl	800e7a0 <memcpy>
		break;
 800ae7e:	e7e2      	b.n	800ae46 <ADC_DMA_Reconfig+0x1e>
 800ae80:	2000ccec 	.word	0x2000ccec
 800ae84:	2000cc54 	.word	0x2000cc54
 800ae88:	2000cb68 	.word	0x2000cb68
 800ae8c:	2000cc00 	.word	0x2000cc00

0800ae90 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_ADC_Stop_DMA(&hadc1);
 800ae92:	4f11      	ldr	r7, [pc, #68]	; (800aed8 <ADC_DMA_Stop+0x48>)
	HAL_ADC_Stop_DMA(&hadc2);
 800ae94:	4e11      	ldr	r6, [pc, #68]	; (800aedc <ADC_DMA_Stop+0x4c>)
	HAL_ADC_Stop_DMA(&hadc3);
 800ae96:	4d12      	ldr	r5, [pc, #72]	; (800aee0 <ADC_DMA_Stop+0x50>)
	HAL_ADC_Stop_DMA(&hadc4);
 800ae98:	4c12      	ldr	r4, [pc, #72]	; (800aee4 <ADC_DMA_Stop+0x54>)
	HAL_ADC_Stop_DMA(&hadc1);
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7fa fc70 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7fa fc6d 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800aea6:	4628      	mov	r0, r5
 800aea8:	f7fa fc6a 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800aeac:	4620      	mov	r0, r4
 800aeae:	f7fa fc67 	bl	8005780 <HAL_ADC_Stop_DMA>
	MX_ADC4_Init();
}


void CalibrateADC (void){
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f7fa fd3d 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800aeba:	4630      	mov	r0, r6
 800aebc:	2100      	movs	r1, #0
 800aebe:	f7fa fd39 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800aec2:	4628      	mov	r0, r5
 800aec4:	2100      	movs	r1, #0
 800aec6:	f7fa fd35 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800aeca:	4620      	mov	r0, r4
 800aecc:	2100      	movs	r1, #0
}
 800aece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800aed2:	f7fa bd2f 	b.w	8005934 <HAL_ADCEx_Calibration_Start>
 800aed6:	bf00      	nop
 800aed8:	2000cc00 	.word	0x2000cc00
 800aedc:	2000cb68 	.word	0x2000cb68
 800aee0:	2000cc54 	.word	0x2000cc54
 800aee4:	2000ccec 	.word	0x2000ccec

0800aee8 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800aee8:	b500      	push	{lr}
	switch(channel){
 800aeea:	3801      	subs	r0, #1
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800aeec:	b097      	sub	sp, #92	; 0x5c
	switch(channel){
 800aeee:	2803      	cmp	r0, #3
 800aef0:	d808      	bhi.n	800af04 <DMA_GetCurrDataCounter+0x1c>
 800aef2:	e8df f000 	tbb	[pc, r0]
 800aef6:	141a      	.short	0x141a
 800aef8:	020e      	.short	0x020e
			adcHandler=hadc4;
 800aefa:	2254      	movs	r2, #84	; 0x54
 800aefc:	490e      	ldr	r1, [pc, #56]	; (800af38 <DMA_GetCurrDataCounter+0x50>)
 800aefe:	a801      	add	r0, sp, #4
 800af00:	f003 fc4e 	bl	800e7a0 <memcpy>
  return adcHandler.DMA_Handle->Instance->CNDTR;
 800af04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6858      	ldr	r0, [r3, #4]
}
 800af0a:	b280      	uxth	r0, r0
 800af0c:	b017      	add	sp, #92	; 0x5c
 800af0e:	f85d fb04 	ldr.w	pc, [sp], #4
			adcHandler=hadc3;
 800af12:	2254      	movs	r2, #84	; 0x54
 800af14:	4909      	ldr	r1, [pc, #36]	; (800af3c <DMA_GetCurrDataCounter+0x54>)
 800af16:	a801      	add	r0, sp, #4
 800af18:	f003 fc42 	bl	800e7a0 <memcpy>
		break;
 800af1c:	e7f2      	b.n	800af04 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc2;
 800af1e:	2254      	movs	r2, #84	; 0x54
 800af20:	4907      	ldr	r1, [pc, #28]	; (800af40 <DMA_GetCurrDataCounter+0x58>)
 800af22:	a801      	add	r0, sp, #4
 800af24:	f003 fc3c 	bl	800e7a0 <memcpy>
		break;
 800af28:	e7ec      	b.n	800af04 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc1;
 800af2a:	2254      	movs	r2, #84	; 0x54
 800af2c:	4905      	ldr	r1, [pc, #20]	; (800af44 <DMA_GetCurrDataCounter+0x5c>)
 800af2e:	a801      	add	r0, sp, #4
 800af30:	f003 fc36 	bl	800e7a0 <memcpy>
		break;
 800af34:	e7e6      	b.n	800af04 <DMA_GetCurrDataCounter+0x1c>
 800af36:	bf00      	nop
 800af38:	2000ccec 	.word	0x2000ccec
 800af3c:	2000cc54 	.word	0x2000cc54
 800af40:	2000cb68 	.word	0x2000cb68
 800af44:	2000cc00 	.word	0x2000cc00

0800af48 <ADC_set_sampling_time>:
void ADC_set_sampling_time(uint32_t realfreq){
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch(ADCResolution){
 800af4c:	f8df a250 	ldr.w	sl, [pc, #592]	; 800b1a0 <ADC_set_sampling_time+0x258>
 800af50:	f8da 2000 	ldr.w	r2, [sl]
void ADC_set_sampling_time(uint32_t realfreq){
 800af54:	b087      	sub	sp, #28
 800af56:	4604      	mov	r4, r0
	switch(ADCResolution){
 800af58:	2a18      	cmp	r2, #24
 800af5a:	d836      	bhi.n	800afca <ADC_set_sampling_time+0x82>
 800af5c:	e8df f002 	tbb	[pc, r2]
 800af60:	3535350d 	.word	0x3535350d
 800af64:	35353535 	.word	0x35353535
 800af68:	35353533 	.word	0x35353533
 800af6c:	35353535 	.word	0x35353535
 800af70:	35353531 	.word	0x35353531
 800af74:	35353535 	.word	0x35353535
 800af78:	2f          	.byte	0x2f
 800af79:	00          	.byte	0x00
 800af7a:	250c      	movs	r5, #12
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/realfreq-ADCRes-1;
 800af7c:	f7fc f836 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
 800af80:	fbb0 f0f4 	udiv	r0, r0, r4
 800af84:	1b40      	subs	r0, r0, r5
 800af86:	3801      	subs	r0, #1
	if(cyclesForConversion>=601){
 800af88:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800af8c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800b1a4 <ADC_set_sampling_time+0x25c>
	if(cyclesForConversion>=601){
 800af90:	d81d      	bhi.n	800afce <ADC_set_sampling_time+0x86>
	}else if(cyclesForConversion>=181){
 800af92:	28b4      	cmp	r0, #180	; 0xb4
 800af94:	f200 80da 	bhi.w	800b14c <ADC_set_sampling_time+0x204>
	}else if(cyclesForConversion>=61){
 800af98:	283c      	cmp	r0, #60	; 0x3c
 800af9a:	f200 80db 	bhi.w	800b154 <ADC_set_sampling_time+0x20c>
	}else if(cyclesForConversion>=19){
 800af9e:	2812      	cmp	r0, #18
 800afa0:	f200 80dc 	bhi.w	800b15c <ADC_set_sampling_time+0x214>
	}else if(cyclesForConversion>=7){
 800afa4:	2806      	cmp	r0, #6
 800afa6:	f200 80dd 	bhi.w	800b164 <ADC_set_sampling_time+0x21c>
	}else if(cyclesForConversion>=4){
 800afaa:	2803      	cmp	r0, #3
 800afac:	f200 80de 	bhi.w	800b16c <ADC_set_sampling_time+0x224>
	}else if(cyclesForConversion>=2){
 800afb0:	2801      	cmp	r0, #1
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 800afb2:	bf8c      	ite	hi
 800afb4:	2101      	movhi	r1, #1
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800afb6:	2100      	movls	r1, #0
 800afb8:	f8c8 1000 	str.w	r1, [r8]
 800afbc:	e00a      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
			break;
 800afbe:	2506      	movs	r5, #6
 800afc0:	e7dc      	b.n	800af7c <ADC_set_sampling_time+0x34>
			break;
 800afc2:	2508      	movs	r5, #8
 800afc4:	e7da      	b.n	800af7c <ADC_set_sampling_time+0x34>
	switch(ADCResolution){
 800afc6:	250a      	movs	r5, #10
 800afc8:	e7d8      	b.n	800af7c <ADC_set_sampling_time+0x34>
 800afca:	2500      	movs	r5, #0
 800afcc:	e7d6      	b.n	800af7c <ADC_set_sampling_time+0x34>
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800afce:	2107      	movs	r1, #7
 800afd0:	f8c8 1000 	str.w	r1, [r8]
	HAL_ADC_Stop_DMA(&hadc1);
 800afd4:	4e67      	ldr	r6, [pc, #412]	; (800b174 <ADC_set_sampling_time+0x22c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800afd6:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b1a8 <ADC_set_sampling_time+0x260>
  hadc2.Instance = ADC2;
 800afda:	4d67      	ldr	r5, [pc, #412]	; (800b178 <ADC_set_sampling_time+0x230>)
	HAL_ADC_Stop_DMA(&hadc1);
 800afdc:	4630      	mov	r0, r6
 800afde:	f7fa fbcf 	bl	8005780 <HAL_ADC_Stop_DMA>
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800afe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.Resolution = ADCResolution;
 800afe6:	f8da 1000 	ldr.w	r1, [sl]
  hadc1.Instance = ADC1;
 800afea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800afee:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aff2:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800aff4:	2701      	movs	r7, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800aff6:	e9c6 320b 	strd	r3, r2, [r6, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800affa:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  hadc1.Instance = ADC1;
 800affe:	6030      	str	r0, [r6, #0]
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b000:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800b002:	4630      	mov	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b004:	e9c6 b101 	strd	fp, r1, [r6, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b008:	6134      	str	r4, [r6, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b00a:	61f4      	str	r4, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b00c:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b00e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b010:	61b4      	str	r4, [r6, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b012:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b014:	6237      	str	r7, [r6, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b016:	6377      	str	r7, [r6, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b018:	6173      	str	r3, [r6, #20]
  HAL_ADC_Init(&hadc1);
 800b01a:	f7f9 fffd 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b01e:	f899 0000 	ldrb.w	r0, [r9]
 800b022:	4956      	ldr	r1, [pc, #344]	; (800b17c <ADC_set_sampling_time+0x234>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b024:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b028:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b02c:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b02e:	4630      	mov	r0, r6
 800b030:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b032:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b034:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b036:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b03a:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b03c:	f7fa fcee 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b040:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800b044:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b048:	e9c5 3c0b 	strd	r3, ip, [r5, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b04c:	f8da 1000 	ldr.w	r1, [sl]
  hadc2.Instance = ADC2;
 800b050:	4e4b      	ldr	r6, [pc, #300]	; (800b180 <ADC_set_sampling_time+0x238>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b052:	f8c5 b004 	str.w	fp, [r5, #4]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b056:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc2);
 800b058:	4628      	mov	r0, r5
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b05a:	e9c5 3405 	strd	r3, r4, [r5, #20]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b05e:	612c      	str	r4, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b060:	61ec      	str	r4, [r5, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b062:	626c      	str	r4, [r5, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b064:	60ec      	str	r4, [r5, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b066:	622f      	str	r7, [r5, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b068:	636f      	str	r7, [r5, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b06a:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b06c:	602e      	str	r6, [r5, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b06e:	60a9      	str	r1, [r5, #8]
  HAL_ADC_Init(&hadc2);
 800b070:	f7f9 ffd2 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b074:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b078:	4942      	ldr	r1, [pc, #264]	; (800b184 <ADC_set_sampling_time+0x23c>)
  hadc3.Instance = ADC3;
 800b07a:	4e43      	ldr	r6, [pc, #268]	; (800b188 <ADC_set_sampling_time+0x240>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b07c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b080:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b084:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b086:	4628      	mov	r0, r5
 800b088:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b08a:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b08c:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b08e:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b092:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b094:	f7fa fcc2 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b098:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 800b09c:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b0a0:	e9c6 3e0b 	strd	r3, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b0a4:	f8da 1000 	ldr.w	r1, [sl]
  hadc3.Instance = ADC3;
 800b0a8:	4d38      	ldr	r5, [pc, #224]	; (800b18c <ADC_set_sampling_time+0x244>)
 800b0aa:	6035      	str	r5, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b0ac:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc3);
 800b0ae:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b0b0:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b0b4:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b0b6:	f8c6 b004 	str.w	fp, [r6, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b0ba:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b0bc:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b0be:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b0c0:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b0c2:	6237      	str	r7, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b0c4:	6377      	str	r7, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b0c6:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b0c8:	f7f9 ffa6 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b0cc:	f899 0002 	ldrb.w	r0, [r9, #2]
 800b0d0:	492f      	ldr	r1, [pc, #188]	; (800b190 <ADC_set_sampling_time+0x248>)
  hadc4.Instance = ADC4;
 800b0d2:	4d30      	ldr	r5, [pc, #192]	; (800b194 <ADC_set_sampling_time+0x24c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b0d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b0d8:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b0dc:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b0e2:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b0e4:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b0e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b0ea:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b0ec:	f7fa fc96 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc4.Init.Resolution = ADCResolution;
 800b0f0:	f8da 3000 	ldr.w	r3, [sl]
 800b0f4:	60ab      	str	r3, [r5, #8]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b0f6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800b0fa:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc4.Instance = ADC4;
 800b0fe:	4926      	ldr	r1, [pc, #152]	; (800b198 <ADC_set_sampling_time+0x250>)
 800b100:	6029      	str	r1, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b102:	e9c5 3a0b 	strd	r3, sl, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b106:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b108:	2304      	movs	r3, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b10a:	e9c5 3405 	strd	r3, r4, [r5, #20]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b10e:	f8c5 b004 	str.w	fp, [r5, #4]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b112:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b114:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b116:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b118:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b11a:	622f      	str	r7, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b11c:	636f      	str	r7, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b11e:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b120:	f7f9 ff7a 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b124:	f899 1003 	ldrb.w	r1, [r9, #3]
 800b128:	4b1c      	ldr	r3, [pc, #112]	; (800b19c <ADC_set_sampling_time+0x254>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b12a:	f8d8 2000 	ldr.w	r2, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b12e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  sConfig.Rank = 1;
 800b132:	9701      	str	r7, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b134:	4669      	mov	r1, sp
 800b136:	4628      	mov	r0, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b138:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b13c:	9405      	str	r4, [sp, #20]
  sConfig.SamplingTime = ADCSamplingTime;
 800b13e:	9202      	str	r2, [sp, #8]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b140:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b142:	f7fa fc6b 	bl	8005a1c <HAL_ADC_ConfigChannel>
}
 800b146:	b007      	add	sp, #28
 800b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
 800b14c:	2106      	movs	r1, #6
 800b14e:	f8c8 1000 	str.w	r1, [r8]
 800b152:	e73f      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
 800b154:	2105      	movs	r1, #5
 800b156:	f8c8 1000 	str.w	r1, [r8]
 800b15a:	e73b      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
 800b15c:	2104      	movs	r1, #4
 800b15e:	f8c8 1000 	str.w	r1, [r8]
 800b162:	e737      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
 800b164:	2103      	movs	r1, #3
 800b166:	f8c8 1000 	str.w	r1, [r8]
 800b16a:	e733      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
 800b16c:	2102      	movs	r1, #2
 800b16e:	f8c8 1000 	str.w	r1, [r8]
 800b172:	e72f      	b.n	800afd4 <ADC_set_sampling_time+0x8c>
 800b174:	2000cc00 	.word	0x2000cc00
 800b178:	2000cb68 	.word	0x2000cb68
 800b17c:	08011834 	.word	0x08011834
 800b180:	50000100 	.word	0x50000100
 800b184:	08011858 	.word	0x08011858
 800b188:	2000cc54 	.word	0x2000cc54
 800b18c:	50000400 	.word	0x50000400
 800b190:	08011880 	.word	0x08011880
 800b194:	2000ccec 	.word	0x2000ccec
 800b198:	50000500 	.word	0x50000500
 800b19c:	08011890 	.word	0x08011890
 800b1a0:	200047b0 	.word	0x200047b0
 800b1a4:	200047b4 	.word	0x200047b4
 800b1a8:	200047ac 	.word	0x200047ac

0800b1ac <samplingEnable>:
	TIMScopeEnable();
 800b1ac:	f003 ba1e 	b.w	800e5ec <TIMScopeEnable>

0800b1b0 <samplingDisable>:
	TIMScopeDisable();
 800b1b0:	f003 ba22 	b.w	800e5f8 <TIMScopeDisable>

0800b1b4 <adcSetInputChannel>:
void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ADCChannel[adc]=chann;
 800b1b8:	4b7e      	ldr	r3, [pc, #504]	; (800b3b4 <adcSetInputChannel+0x200>)
	HAL_ADC_Stop_DMA(&hadc1);
 800b1ba:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800b3f0 <adcSetInputChannel+0x23c>
	HAL_ADC_Stop_DMA(&hadc2);
 800b1be:	4f7e      	ldr	r7, [pc, #504]	; (800b3b8 <adcSetInputChannel+0x204>)
	HAL_ADC_Stop_DMA(&hadc3);
 800b1c0:	4e7e      	ldr	r6, [pc, #504]	; (800b3bc <adcSetInputChannel+0x208>)
	ADCChannel[adc]=chann;
 800b1c2:	5419      	strb	r1, [r3, r0]
void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800b1c4:	b087      	sub	sp, #28
	TIMScopeDisable();
 800b1c6:	f003 fa17 	bl	800e5f8 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800b1ca:	4640      	mov	r0, r8
	HAL_ADC_Stop_DMA(&hadc4);
 800b1cc:	4d7c      	ldr	r5, [pc, #496]	; (800b3c0 <adcSetInputChannel+0x20c>)
  hadc1.Init.Resolution = ADCResolution;
 800b1ce:	f8df a224 	ldr.w	sl, [pc, #548]	; 800b3f4 <adcSetInputChannel+0x240>
  sConfig.SamplingTime = ADCSamplingTime;
 800b1d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b3f8 <adcSetInputChannel+0x244>
	HAL_ADC_Stop_DMA(&hadc1);
 800b1d6:	f7fa fad3 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f7fa fad0 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7fa facd 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7fa faca 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_DeInit(&hadc1);
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	f7fa f8a3 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f7fa f8a0 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7fa f89d 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7fa f89a 	bl	8005338 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc1);
 800b204:	486f      	ldr	r0, [pc, #444]	; (800b3c4 <adcSetInputChannel+0x210>)
 800b206:	f7fa ffbb 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800b20a:	486f      	ldr	r0, [pc, #444]	; (800b3c8 <adcSetInputChannel+0x214>)
 800b20c:	f7fa ffb8 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800b210:	486e      	ldr	r0, [pc, #440]	; (800b3cc <adcSetInputChannel+0x218>)
 800b212:	f7fa ffb5 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800b216:	486e      	ldr	r0, [pc, #440]	; (800b3d0 <adcSetInputChannel+0x21c>)
 800b218:	f7fa ffb2 	bl	8006180 <HAL_DMA_DeInit>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b21c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b220:	f8c8 2004 	str.w	r2, [r8, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b224:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Instance = ADC1;
 800b228:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b22c:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b230:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800b232:	f04f 0901 	mov.w	r9, #1
  hadc1.Init.Resolution = ADCResolution;
 800b236:	f8da 1000 	ldr.w	r1, [sl]
  hadc1.Instance = ADC1;
 800b23a:	f8c8 0000 	str.w	r0, [r8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b23e:	e9c8 230b 	strd	r2, r3, [r8, #44]	; 0x2c
  HAL_ADC_Init(&hadc1);
 800b242:	4640      	mov	r0, r8
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b244:	2204      	movs	r2, #4
  hadc1.Init.Resolution = ADCResolution;
 800b246:	f8c8 1008 	str.w	r1, [r8, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b24a:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b24e:	f8c8 401c 	str.w	r4, [r8, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b252:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b256:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b25a:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b25e:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b262:	f8c8 9020 	str.w	r9, [r8, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b266:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b26a:	f8c8 2014 	str.w	r2, [r8, #20]
  HAL_ADC_Init(&hadc1);
 800b26e:	f7f9 fed3 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b272:	4b50      	ldr	r3, [pc, #320]	; (800b3b4 <adcSetInputChannel+0x200>)
 800b274:	4957      	ldr	r1, [pc, #348]	; (800b3d4 <adcSetInputChannel+0x220>)
 800b276:	7818      	ldrb	r0, [r3, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800b278:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b27c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b280:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b282:	4640      	mov	r0, r8
 800b284:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b286:	9202      	str	r2, [sp, #8]
  sConfig.Rank = 1;
 800b288:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b28c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b290:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b292:	f7fa fbc3 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b29a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b29e:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b2a0:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b2a4:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b2a8:	f8da 1000 	ldr.w	r1, [sl]
  hadc2.Instance = ADC2;
 800b2ac:	4b4a      	ldr	r3, [pc, #296]	; (800b3d8 <adcSetInputChannel+0x224>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b2ae:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b2b0:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800b2b2:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b2b4:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b2b8:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b2ba:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b2bc:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b2be:	f8c7 9020 	str.w	r9, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b2c2:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b2c6:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b2c8:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b2ca:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800b2cc:	f7f9 fea4 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b2d0:	4b38      	ldr	r3, [pc, #224]	; (800b3b4 <adcSetInputChannel+0x200>)
 800b2d2:	4942      	ldr	r1, [pc, #264]	; (800b3dc <adcSetInputChannel+0x228>)
 800b2d4:	7858      	ldrb	r0, [r3, #1]
  sConfig.Offset = 0;
 800b2d6:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b2d8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b2dc:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 800b2de:	e9cd 2900 	strd	r2, r9, [sp]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b2e2:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800b2e4:	f8db 2000 	ldr.w	r2, [fp]
 800b2e8:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b2ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b2ee:	f7fa fb95 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b2f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b2f6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b2fa:	6072      	str	r2, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b2fc:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b300:	e9c6 2e0b 	strd	r2, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b304:	f8da 1000 	ldr.w	r1, [sl]
  hadc3.Instance = ADC3;
 800b308:	4f35      	ldr	r7, [pc, #212]	; (800b3e0 <adcSetInputChannel+0x22c>)
 800b30a:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b30c:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc3);
 800b30e:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b310:	e9c6 2405 	strd	r2, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b314:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b316:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b318:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b31a:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b31c:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b31e:	f8c6 9020 	str.w	r9, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b322:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b326:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b328:	f7f9 fe76 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b32c:	4b21      	ldr	r3, [pc, #132]	; (800b3b4 <adcSetInputChannel+0x200>)
 800b32e:	492d      	ldr	r1, [pc, #180]	; (800b3e4 <adcSetInputChannel+0x230>)
 800b330:	7898      	ldrb	r0, [r3, #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b332:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b336:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b33a:	9202      	str	r2, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b33c:	4669      	mov	r1, sp
 800b33e:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800b340:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b344:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b348:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b34a:	9700      	str	r7, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b34c:	f7fa fb66 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc4.Init.Resolution = ADCResolution;
 800b350:	f8da 1000 	ldr.w	r1, [sl]
 800b354:	60a9      	str	r1, [r5, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b356:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b35a:	6069      	str	r1, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b35c:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800b360:	f44f 7160 	mov.w	r1, #896	; 0x380
  hadc4.Instance = ADC4;
 800b364:	4a20      	ldr	r2, [pc, #128]	; (800b3e8 <adcSetInputChannel+0x234>)
 800b366:	602a      	str	r2, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b368:	e9c5 180b 	strd	r1, r8, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b36c:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b36e:	2104      	movs	r1, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b370:	e9c5 1405 	strd	r1, r4, [r5, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b374:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b376:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b378:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b37a:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b37c:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b380:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b384:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b386:	f7f9 fe47 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b38a:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <adcSetInputChannel+0x200>)
 800b38c:	4917      	ldr	r1, [pc, #92]	; (800b3ec <adcSetInputChannel+0x238>)
 800b38e:	78d8      	ldrb	r0, [r3, #3]
  sConfig.SamplingTime = ADCSamplingTime;
 800b390:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b394:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  sConfig.Rank = 1;
 800b398:	f8cd 9004 	str.w	r9, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b39c:	4669      	mov	r1, sp
 800b39e:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b3a0:	e9cd 2402 	strd	r2, r4, [sp, #8]
  sConfig.Offset = 0;
 800b3a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b3a8:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b3aa:	f7fa fb37 	bl	8005a1c <HAL_ADC_ConfigChannel>
}
 800b3ae:	b007      	add	sp, #28
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	200047ac 	.word	0x200047ac
 800b3b8:	2000cb68 	.word	0x2000cb68
 800b3bc:	2000cc54 	.word	0x2000cc54
 800b3c0:	2000ccec 	.word	0x2000ccec
 800b3c4:	2000cca8 	.word	0x2000cca8
 800b3c8:	2000cd40 	.word	0x2000cd40
 800b3cc:	2000cbbc 	.word	0x2000cbbc
 800b3d0:	2000cb24 	.word	0x2000cb24
 800b3d4:	08011834 	.word	0x08011834
 800b3d8:	50000100 	.word	0x50000100
 800b3dc:	08011858 	.word	0x08011858
 800b3e0:	50000400 	.word	0x50000400
 800b3e4:	08011880 	.word	0x08011880
 800b3e8:	50000500 	.word	0x50000500
 800b3ec:	08011890 	.word	0x08011890
 800b3f0:	2000cc00 	.word	0x2000cc00
 800b3f4:	200047b0 	.word	0x200047b0
 800b3f8:	200047b4 	.word	0x200047b4

0800b3fc <adcSetDefaultInputs>:
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800b3fc:	4b01      	ldr	r3, [pc, #4]	; (800b404 <adcSetDefaultInputs+0x8>)
 800b3fe:	4a02      	ldr	r2, [pc, #8]	; (800b408 <adcSetDefaultInputs+0xc>)
 800b400:	601a      	str	r2, [r3, #0]
}
 800b402:	4770      	bx	lr
 800b404:	200047ac 	.word	0x200047ac
 800b408:	01020402 	.word	0x01020402

0800b40c <adcSetResolution>:
void adcSetResolution (uint8_t res){
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	b089      	sub	sp, #36	; 0x24
 800b412:	4604      	mov	r4, r0
	TIMScopeDisable();
 800b414:	f003 f8f0 	bl	800e5f8 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800b418:	4881      	ldr	r0, [pc, #516]	; (800b620 <adcSetResolution+0x214>)
 800b41a:	f7fa f9b1 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b41e:	4881      	ldr	r0, [pc, #516]	; (800b624 <adcSetResolution+0x218>)
 800b420:	f7fa f9ae 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b424:	4880      	ldr	r0, [pc, #512]	; (800b628 <adcSetResolution+0x21c>)
 800b426:	f7fa f9ab 	bl	8005780 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800b42a:	4880      	ldr	r0, [pc, #512]	; (800b62c <adcSetResolution+0x220>)
 800b42c:	f7fa f9a8 	bl	8005780 <HAL_ADC_Stop_DMA>
	if(res==8){
 800b430:	2c08      	cmp	r4, #8
 800b432:	f000 80ee 	beq.w	800b612 <adcSetResolution+0x206>
	}else if(res==12){
 800b436:	2c0c      	cmp	r4, #12
 800b438:	d002      	beq.n	800b440 <adcSetResolution+0x34>
}
 800b43a:	b009      	add	sp, #36	; 0x24
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCResolution	= ADC_RESOLUTION12b;
 800b440:	f8df b218 	ldr.w	fp, [pc, #536]	; 800b65c <adcSetResolution+0x250>
 800b444:	2200      	movs	r2, #0
 800b446:	f8cb 2000 	str.w	r2, [fp]
	HAL_ADC_DeInit(&hadc1);
 800b44a:	4975      	ldr	r1, [pc, #468]	; (800b620 <adcSetResolution+0x214>)
	HAL_ADC_DeInit(&hadc2);
 800b44c:	4f75      	ldr	r7, [pc, #468]	; (800b624 <adcSetResolution+0x218>)
	HAL_ADC_DeInit(&hadc3);
 800b44e:	4e76      	ldr	r6, [pc, #472]	; (800b628 <adcSetResolution+0x21c>)
	HAL_ADC_DeInit(&hadc4);
 800b450:	4d76      	ldr	r5, [pc, #472]	; (800b62c <adcSetResolution+0x220>)
	HAL_ADC_DeInit(&hadc1);
 800b452:	9101      	str	r1, [sp, #4]
 800b454:	4608      	mov	r0, r1
 800b456:	f7f9 ff6f 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7f9 ff6c 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800b460:	4630      	mov	r0, r6
 800b462:	f7f9 ff69 	bl	8005338 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800b466:	4628      	mov	r0, r5
 800b468:	f7f9 ff66 	bl	8005338 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc1);
 800b46c:	4870      	ldr	r0, [pc, #448]	; (800b630 <adcSetResolution+0x224>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b46e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800b660 <adcSetResolution+0x254>
  sConfig.SamplingTime = ADCSamplingTime;
 800b472:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800b664 <adcSetResolution+0x258>
	HAL_DMA_DeInit(&hdma_adc1);
 800b476:	f7fa fe83 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800b47a:	486e      	ldr	r0, [pc, #440]	; (800b634 <adcSetResolution+0x228>)
 800b47c:	f7fa fe80 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800b480:	486d      	ldr	r0, [pc, #436]	; (800b638 <adcSetResolution+0x22c>)
 800b482:	f7fa fe7d 	bl	8006180 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800b486:	486d      	ldr	r0, [pc, #436]	; (800b63c <adcSetResolution+0x230>)
 800b488:	f7fa fe7a 	bl	8006180 <HAL_DMA_DeInit>
  hadc1.Instance = ADC1;
 800b48c:	9901      	ldr	r1, [sp, #4]
  hadc1.Init.Resolution = ADCResolution;
 800b48e:	f8db 3000 	ldr.w	r3, [fp]
 800b492:	608b      	str	r3, [r1, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b498:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b49c:	604b      	str	r3, [r1, #4]
  hadc1.Instance = ADC1;
 800b49e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b4a2:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b4a6:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800b4a8:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b4ac:	e9c1 320b 	strd	r3, r2, [r1, #44]	; 0x2c
  hadc1.Instance = ADC1;
 800b4b0:	6008      	str	r0, [r1, #0]
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b4b2:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800b4b4:	4608      	mov	r0, r1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b4b6:	610c      	str	r4, [r1, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b4b8:	61cc      	str	r4, [r1, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b4ba:	624c      	str	r4, [r1, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b4bc:	60cc      	str	r4, [r1, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b4be:	618c      	str	r4, [r1, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b4c0:	638c      	str	r4, [r1, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b4c2:	f8c1 8020 	str.w	r8, [r1, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b4c6:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b4ca:	614b      	str	r3, [r1, #20]
  HAL_ADC_Init(&hadc1);
 800b4cc:	f7f9 fda4 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b4d0:	f89a c000 	ldrb.w	ip, [sl]
 800b4d4:	485a      	ldr	r0, [pc, #360]	; (800b640 <adcSetResolution+0x234>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4d6:	9901      	ldr	r1, [sp, #4]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b4d8:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
  sConfig.Offset = 0;
 800b4dc:	9407      	str	r4, [sp, #28]
  sConfig.Rank = 1;
 800b4de:	e9cd 3802 	strd	r3, r8, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4e2:	4608      	mov	r0, r1
  sConfig.SamplingTime = ADCSamplingTime;
 800b4e4:	f8d9 3000 	ldr.w	r3, [r9]
 800b4e8:	9304      	str	r3, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4ea:	a902      	add	r1, sp, #8
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b4ec:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4f0:	f7fa fa94 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b4f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b4f8:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b4fc:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b4fe:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b502:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b506:	f8db 1000 	ldr.w	r1, [fp]
  hadc2.Instance = ADC2;
 800b50a:	4b4e      	ldr	r3, [pc, #312]	; (800b644 <adcSetResolution+0x238>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b50c:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b50e:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800b510:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b512:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b516:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b518:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b51a:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b51c:	f8c7 8020 	str.w	r8, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b520:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b524:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b526:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b528:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800b52a:	f7f9 fd75 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b52e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800b532:	4945      	ldr	r1, [pc, #276]	; (800b648 <adcSetResolution+0x23c>)
  sConfig.Offset = 0;
 800b534:	9407      	str	r4, [sp, #28]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b536:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b53a:	a902      	add	r1, sp, #8
  sConfig.Rank = 1;
 800b53c:	e9cd 3802 	strd	r3, r8, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b540:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800b542:	f8d9 3000 	ldr.w	r3, [r9]
 800b546:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b548:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b54c:	f7fa fa66 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b554:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b558:	6073      	str	r3, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b55a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b55e:	e9c6 3e0b 	strd	r3, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b562:	f8db 1000 	ldr.w	r1, [fp]
  hadc3.Instance = ADC3;
 800b566:	4f39      	ldr	r7, [pc, #228]	; (800b64c <adcSetResolution+0x240>)
 800b568:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b56a:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc3);
 800b56c:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b56e:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b572:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b574:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b576:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b578:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b57a:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b57c:	f8c6 8020 	str.w	r8, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b580:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b584:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b586:	f7f9 fd47 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b58a:	f89a 0002 	ldrb.w	r0, [sl, #2]
 800b58e:	4930      	ldr	r1, [pc, #192]	; (800b650 <adcSetResolution+0x244>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b590:	f8d9 3000 	ldr.w	r3, [r9]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b594:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b598:	9304      	str	r3, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b59a:	a902      	add	r1, sp, #8
 800b59c:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800b59e:	f8cd 800c 	str.w	r8, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b5a2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sConfig.Offset = 0;
 800b5a6:	9407      	str	r4, [sp, #28]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b5a8:	9702      	str	r7, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b5aa:	f7fa fa37 	bl	8005a1c <HAL_ADC_ConfigChannel>
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b5ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc4.Init.Resolution = ADCResolution;
 800b5b2:	f8db 3000 	ldr.w	r3, [fp]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b5b6:	606a      	str	r2, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b5b8:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 800b5bc:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Instance = ADC4;
 800b5c0:	4924      	ldr	r1, [pc, #144]	; (800b654 <adcSetResolution+0x248>)
  hadc4.Init.Resolution = ADCResolution;
 800b5c2:	60ab      	str	r3, [r5, #8]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b5c4:	e9c5 2b0b 	strd	r2, fp, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b5c8:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b5ca:	2204      	movs	r2, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b5cc:	e9c5 2405 	strd	r2, r4, [r5, #20]
  hadc4.Instance = ADC4;
 800b5d0:	6029      	str	r1, [r5, #0]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b5d2:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b5d4:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b5d6:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b5d8:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b5da:	f8c5 8020 	str.w	r8, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b5de:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b5e2:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b5e4:	f7f9 fd18 	bl	8005018 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b5e8:	f89a 1003 	ldrb.w	r1, [sl, #3]
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <adcSetResolution+0x24c>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b5ee:	f8d9 2000 	ldr.w	r2, [r9]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b5f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  sConfig.Rank = 1;
 800b5f6:	f8cd 800c 	str.w	r8, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b5fa:	a902      	add	r1, sp, #8
 800b5fc:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b5fe:	e9cd 2404 	strd	r2, r4, [sp, #16]
  sConfig.Offset = 0;
 800b602:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b606:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b608:	f7fa fa08 	bl	8005a1c <HAL_ADC_ConfigChannel>
}
 800b60c:	b009      	add	sp, #36	; 0x24
 800b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCResolution	= ADC_RESOLUTION8b;
 800b612:	f8df b048 	ldr.w	fp, [pc, #72]	; 800b65c <adcSetResolution+0x250>
 800b616:	2210      	movs	r2, #16
 800b618:	f8cb 2000 	str.w	r2, [fp]
 800b61c:	e715      	b.n	800b44a <adcSetResolution+0x3e>
 800b61e:	bf00      	nop
 800b620:	2000cc00 	.word	0x2000cc00
 800b624:	2000cb68 	.word	0x2000cb68
 800b628:	2000cc54 	.word	0x2000cc54
 800b62c:	2000ccec 	.word	0x2000ccec
 800b630:	2000cca8 	.word	0x2000cca8
 800b634:	2000cd40 	.word	0x2000cd40
 800b638:	2000cbbc 	.word	0x2000cbbc
 800b63c:	2000cb24 	.word	0x2000cb24
 800b640:	08011834 	.word	0x08011834
 800b644:	50000100 	.word	0x50000100
 800b648:	08011858 	.word	0x08011858
 800b64c:	50000400 	.word	0x50000400
 800b650:	08011880 	.word	0x08011880
 800b654:	50000500 	.word	0x50000500
 800b658:	08011890 	.word	0x08011890
 800b65c:	200047b0 	.word	0x200047b0
 800b660:	200047ac 	.word	0x200047ac
 800b664:	200047b4 	.word	0x200047b4

0800b668 <CalibrateADC>:
void CalibrateADC (void){
 800b668:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800b66a:	2100      	movs	r1, #0
 800b66c:	4808      	ldr	r0, [pc, #32]	; (800b690 <CalibrateADC+0x28>)
 800b66e:	f7fa f961 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800b672:	2100      	movs	r1, #0
 800b674:	4807      	ldr	r0, [pc, #28]	; (800b694 <CalibrateADC+0x2c>)
 800b676:	f7fa f95d 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800b67a:	2100      	movs	r1, #0
 800b67c:	4806      	ldr	r0, [pc, #24]	; (800b698 <CalibrateADC+0x30>)
 800b67e:	f7fa f959 	bl	8005934 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b682:	2100      	movs	r1, #0
 800b684:	4805      	ldr	r0, [pc, #20]	; (800b69c <CalibrateADC+0x34>)
}
 800b686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b68a:	f7fa b953 	b.w	8005934 <HAL_ADCEx_Calibration_Start>
 800b68e:	bf00      	nop
 800b690:	2000cc00 	.word	0x2000cc00
 800b694:	2000cb68 	.word	0x2000cb68
 800b698:	2000cc54 	.word	0x2000cc54
 800b69c:	2000ccec 	.word	0x2000ccec

0800b6a0 <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	b0a7      	sub	sp, #156	; 0x9c

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800b6a4:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b6a6:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b6a8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b6aa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b6ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b6b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800b6b6:	9006      	str	r0, [sp, #24]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b6b8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b6ba:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b6be:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b6c0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b6c4:	f7fb f888 	bl	80067d8 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;		// RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1; (before PWM generator implementation)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b6c8:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b6ca:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b6d0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b6d2:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b6d6:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b6d8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b6da:	9405      	str	r4, [sp, #20]

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800b6dc:	4d13      	ldr	r5, [pc, #76]	; (800b72c <SystemClock_Config+0x8c>)
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b6de:	f7fb fb4b 	bl	8006d78 <HAL_RCC_ClockConfig>
																			 RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34| \
																			 RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15| \
																			 RCC_PERIPHCLK_TIM8; 
																			 // RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \ RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34; (before gen. implem.)
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800b6e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	#endif //USE_GEN_PWM || USE_LOG_ANLYS	
	#ifdef USE_SYNC_PWM		
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
	#endif //USE_SYNC_PWM	
	#ifdef USE_COUNTER	
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800b6e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
		PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;		
	#endif //USE_COUNTER	
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b6ee:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800b6f0:	911b      	str	r1, [sp, #108]	; 0x6c
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800b6f2:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b6f4:	931a      	str	r3, [sp, #104]	; 0x68
		PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800b6f6:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800b6f8:	9421      	str	r4, [sp, #132]	; 0x84
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800b6fa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800b6fe:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b700:	f7fb fc8c 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b704:	f7fb fc54 	bl	8006fb0 <HAL_RCC_GetHCLKFreq>
 800b708:	4b09      	ldr	r3, [pc, #36]	; (800b730 <SystemClock_Config+0x90>)
 800b70a:	fba3 3000 	umull	r3, r0, r3, r0
 800b70e:	0980      	lsrs	r0, r0, #6
 800b710:	f7fa fb90 	bl	8005e34 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b714:	2004      	movs	r0, #4
 800b716:	f7fa fbb5 	bl	8005e84 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b71a:	4622      	mov	r2, r4
 800b71c:	4621      	mov	r1, r4
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295
 800b722:	f7fa fb37 	bl	8005d94 <HAL_NVIC_SetPriority>
}
 800b726:	b027      	add	sp, #156	; 0x9c
 800b728:	bd30      	pop	{r4, r5, pc}
 800b72a:	bf00      	nop
 800b72c:	00703180 	.word	0x00703180
 800b730:	10624dd3 	.word	0x10624dd3

0800b734 <resetDevice>:

void resetDevice(void){
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800b734:	4b01      	ldr	r3, [pc, #4]	; (800b73c <resetDevice+0x8>)
 800b736:	4a02      	ldr	r2, [pc, #8]	; (800b740 <resetDevice+0xc>)
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	e7fe      	b.n	800b73a <resetDevice+0x6>
 800b73c:	e000ed00 	.word	0xe000ed00
 800b740:	05fa0004 	.word	0x05fa0004

0800b744 <commsSend>:
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800b744:	f002 bfce 	b.w	800e6e4 <UARTsendChar>

0800b748 <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	b082      	sub	sp, #8
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b74c:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>8);
 800b74e:	0a06      	lsrs	r6, r0, #8
	buff[2]=(uint8_t)(num>>16);
 800b750:	0c05      	lsrs	r5, r0, #16
	buff[3]=(uint8_t)(num>>24);
 800b752:	0e04      	lsrs	r4, r0, #24
	buff[0]=(uint8_t)(num);
 800b754:	f88d 0004 	strb.w	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b758:	f241 3388 	movw	r3, #5000	; 0x1388
 800b75c:	eb0d 0102 	add.w	r1, sp, r2
 800b760:	4805      	ldr	r0, [pc, #20]	; (800b778 <commsSendUint32+0x30>)
	buff[1]=(uint8_t)(num>>8);
 800b762:	f88d 6005 	strb.w	r6, [sp, #5]
	buff[2]=(uint8_t)(num>>16);
 800b766:	f88d 5006 	strb.w	r5, [sp, #6]
	buff[3]=(uint8_t)(num>>24);
 800b76a:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b76e:	f7fd f8db 	bl	8008928 <HAL_UART_Transmit>
}
 800b772:	b002      	add	sp, #8
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	bf00      	nop
 800b778:	2000d39c 	.word	0x2000d39c

0800b77c <commsSendBuff>:
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b77c:	460a      	mov	r2, r1
 800b77e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b782:	4601      	mov	r1, r0
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <commsSendBuff+0x10>)
 800b786:	f7fd b8cf 	b.w	8008928 <HAL_UART_Transmit>
 800b78a:	bf00      	nop
 800b78c:	2000d39c 	.word	0x2000d39c

0800b790 <commsSendString>:
	#endif
}
void commsSendString(char *chr){
	uint32_t i = 0;
	char * tmp=chr;
	while(*(tmp++)){i++;}
 800b790:	7802      	ldrb	r2, [r0, #0]
void commsSendString(char *chr){
 800b792:	4601      	mov	r1, r0
	while(*(tmp++)){i++;}
 800b794:	b172      	cbz	r2, 800b7b4 <commsSendString+0x24>
void commsSendString(char *chr){
 800b796:	b410      	push	{r4}
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	1a5a      	subs	r2, r3, r1
	while(*(tmp++)){i++;}
 800b79c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	d1fa      	bne.n	800b79a <commsSendString+0xa>
 800b7a4:	b292      	uxth	r2, r2
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800b7a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7aa:	4805      	ldr	r0, [pc, #20]	; (800b7c0 <commsSendString+0x30>)
	#endif

}
 800b7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800b7b0:	f7fd b8ba 	b.w	8008928 <HAL_UART_Transmit>
 800b7b4:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7b8:	4801      	ldr	r0, [pc, #4]	; (800b7c0 <commsSendString+0x30>)
 800b7ba:	f7fd b8b5 	b.w	8008928 <HAL_UART_Transmit>
 800b7be:	bf00      	nop
 800b7c0:	2000d39c 	.word	0x2000d39c

0800b7c4 <commsSendDouble>:

void commsSendDouble(double value){
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	ab04      	add	r3, sp, #16
 800b7ca:	ed03 0b04 	vstr	d0, [r3, #-16]
 800b7ce:	466b      	mov	r3, sp
	memcpy(intAlias, &value, sizeof(value));
 800b7d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7d4:	4c16      	ldr	r4, [pc, #88]	; (800b830 <commsSendDouble+0x6c>)
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b7d6:	4d17      	ldr	r5, [pc, #92]	; (800b834 <commsSendDouble+0x70>)
	commsSendUint32(intAlias[0]);
 800b7d8:	4603      	mov	r3, r0
	buff[2]=(uint8_t)(num>>16);
 800b7da:	0c02      	lsrs	r2, r0, #16
	memcpy(intAlias, &value, sizeof(value));
 800b7dc:	e884 0003 	stmia.w	r4, {r0, r1}
	buff[1]=(uint8_t)(num>>8);
 800b7e0:	0a07      	lsrs	r7, r0, #8
	buff[3]=(uint8_t)(num>>24);
 800b7e2:	0e06      	lsrs	r6, r0, #24
	buff[0]=(uint8_t)(num);
 800b7e4:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b7e8:	a903      	add	r1, sp, #12
	buff[2]=(uint8_t)(num>>16);
 800b7ea:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7f4:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>8);
 800b7f6:	f88d 700d 	strb.w	r7, [sp, #13]
	buff[3]=(uint8_t)(num>>24);
 800b7fa:	f88d 600f 	strb.w	r6, [sp, #15]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b7fe:	f7fd f893 	bl	8008928 <HAL_UART_Transmit>
	commsSendUint32(intAlias[1]);
 800b802:	6863      	ldr	r3, [r4, #4]
	buff[0]=(uint8_t)(num);
 800b804:	2400      	movs	r4, #0
	buff[1]=(uint8_t)(num>>8);
 800b806:	0a1a      	lsrs	r2, r3, #8
	buff[0]=(uint8_t)(num);
 800b808:	f363 0407 	bfi	r4, r3, #0, #8
 800b80c:	f362 240f 	bfi	r4, r2, #8, #8
	buff[2]=(uint8_t)(num>>16);
 800b810:	0c1a      	lsrs	r2, r3, #16
	buff[0]=(uint8_t)(num);
 800b812:	f362 4417 	bfi	r4, r2, #16, #8
	buff[3]=(uint8_t)(num>>24);
 800b816:	0e1b      	lsrs	r3, r3, #24
	buff[0]=(uint8_t)(num);
 800b818:	f363 641f 	bfi	r4, r3, #24, #8
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b81c:	a903      	add	r1, sp, #12
 800b81e:	4628      	mov	r0, r5
 800b820:	f241 3388 	movw	r3, #5000	; 0x1388
 800b824:	2204      	movs	r2, #4
	buff[0]=(uint8_t)(num);
 800b826:	9403      	str	r4, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b828:	f7fd f87e 	bl	8008928 <HAL_UART_Transmit>
}
 800b82c:	b005      	add	sp, #20
 800b82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b830:	20004834 	.word	0x20004834
 800b834:	2000d39c 	.word	0x2000d39c

0800b838 <commsRecieveUART>:
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800b838:	f7f6 bda8 	b.w	800238c <commInputByte>

0800b83c <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800b83c:	b510      	push	{r4, lr}

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800b83e:	4c0d      	ldr	r4, [pc, #52]	; (800b874 <MX_DAC_Init+0x38>)
 800b840:	4b0d      	ldr	r3, [pc, #52]	; (800b878 <MX_DAC_Init+0x3c>)
 800b842:	6023      	str	r3, [r4, #0]
{
 800b844:	b084      	sub	sp, #16
  HAL_DAC_Init(&hdac);
 800b846:	4620      	mov	r0, r4
 800b848:	f7fa fb28 	bl	8005e9c <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800b84c:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <MX_DAC_Init+0x40>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b852:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800b854:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b856:	4620      	mov	r0, r4
 800b858:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800b85a:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b85c:	f7fa fc02 	bl	8006064 <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800b860:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800b862:	a901      	add	r1, sp, #4
 800b864:	4620      	mov	r0, r4
 800b866:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800b868:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800b86a:	f7fa fbfb 	bl	8006064 <HAL_DAC_ConfigChannel>

}
 800b86e:	b004      	add	sp, #16
 800b870:	bd10      	pop	{r4, pc}
 800b872:	bf00      	nop
 800b874:	2000ce0c 	.word	0x2000ce0c
 800b878:	40007400 	.word	0x40007400
 800b87c:	200047b8 	.word	0x200047b8

0800b880 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800b880:	4b30      	ldr	r3, [pc, #192]	; (800b944 <HAL_DAC_MspInit+0xc4>)
 800b882:	6802      	ldr	r2, [r0, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d000      	beq.n	800b88a <HAL_DAC_MspInit+0xa>
 800b888:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __DAC1_CLK_ENABLE();
 800b88a:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
{
 800b88e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __DAC1_CLK_ENABLE();
 800b892:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800b894:	4d2c      	ldr	r5, [pc, #176]	; (800b948 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch1);
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800b896:	4f2d      	ldr	r7, [pc, #180]	; (800b94c <HAL_DAC_MspInit+0xcc>)
    __DAC1_CLK_ENABLE();
 800b898:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b89c:	61da      	str	r2, [r3, #28]
 800b89e:	69db      	ldr	r3, [r3, #28]
{
 800b8a0:	b08b      	sub	sp, #44	; 0x2c
    __DAC1_CLK_ENABLE();
 800b8a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8aa:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b8ae:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8b2:	a905      	add	r1, sp, #20
 800b8b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800b8bc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    __DAC1_CLK_ENABLE();
 800b8c0:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8c2:	f8cd 801c 	str.w	r8, [sp, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8c6:	f04f 0b10 	mov.w	fp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ca:	f7fa fded 	bl	80064a8 <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b8ce:	f04f 0a20 	mov.w	sl, #32
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b8d2:	2180      	movs	r1, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b8d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800b8dc:	4c1c      	ldr	r4, [pc, #112]	; (800b950 <HAL_DAC_MspInit+0xd0>)
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8de:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800b8e2:	4628      	mov	r0, r5
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800b8e4:	602c      	str	r4, [r5, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8e6:	f8c5 b004 	str.w	fp, [r5, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b8ea:	60e9      	str	r1, [r5, #12]
 800b8ec:	9103      	str	r1, [sp, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b8ee:	612a      	str	r2, [r5, #16]
 800b8f0:	9202      	str	r2, [sp, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b8f2:	616b      	str	r3, [r5, #20]
 800b8f4:	9301      	str	r3, [sp, #4]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800b8f6:	e9c5 a906 	strd	sl, r9, [r5, #24]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800b8fa:	f7fa fbf7 	bl	80060ec <HAL_DMA_Init>
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800b8fe:	6838      	ldr	r0, [r7, #0]

		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800b900:	4c14      	ldr	r4, [pc, #80]	; (800b954 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b902:	9b01      	ldr	r3, [sp, #4]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b904:	60b5      	str	r5, [r6, #8]
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800b906:	ea40 0009 	orr.w	r0, r0, r9
 800b90a:	6038      	str	r0, [r7, #0]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b90c:	9903      	ldr	r1, [sp, #12]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b90e:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b910:	9a02      	ldr	r2, [sp, #8]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800b912:	4d11      	ldr	r5, [pc, #68]	; (800b958 <HAL_DAC_MspInit+0xd8>)
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b914:	f8c4 8008 	str.w	r8, [r4, #8]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch2);
 800b918:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800b91a:	e9c4 3a05 	strd	r3, sl, [r4, #20]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b91e:	f8c4 b004 	str.w	fp, [r4, #4]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b922:	60e1      	str	r1, [r4, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b924:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800b926:	f8c4 901c 	str.w	r9, [r4, #28]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800b92a:	6025      	str	r5, [r4, #0]
		HAL_DMA_Init(&hdma_dac1_ch2);
 800b92c:	f7fa fbde 	bl	80060ec <HAL_DMA_Init>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800b930:	683b      	ldr	r3, [r7, #0]
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800b932:	60f4      	str	r4, [r6, #12]
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800b934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800b938:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800b93a:	603b      	str	r3, [r7, #0]
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 800b93c:	b00b      	add	sp, #44	; 0x2c
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	bf00      	nop
 800b944:	40007400 	.word	0x40007400
 800b948:	2000cdc8 	.word	0x2000cdc8
 800b94c:	40010000 	.word	0x40010000
 800b950:	40020030 	.word	0x40020030
 800b954:	2000cd84 	.word	0x2000cd84
 800b958:	40020044 	.word	0x40020044

0800b95c <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800b95c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dacChannel=0;
	switch(chan){
 800b95e:	2801      	cmp	r0, #1
	uint32_t dacChannel=0;
 800b960:	bf0c      	ite	eq
 800b962:	2410      	moveq	r4, #16
 800b964:	2400      	movne	r4, #0
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800b966:	b082      	sub	sp, #8
 800b968:	460d      	mov	r5, r1
		break;
		case 1:
			dacChannel=DAC_CHANNEL_2;
		break;
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800b96a:	4807      	ldr	r0, [pc, #28]	; (800b988 <DAC_DMA_Reconfig+0x2c>)
 800b96c:	4621      	mov	r1, r4
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800b96e:	4616      	mov	r6, r2
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800b970:	f7fa faba 	bl	8005ee8 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800b974:	2000      	movs	r0, #0
 800b976:	9000      	str	r0, [sp, #0]
 800b978:	4621      	mov	r1, r4
 800b97a:	4633      	mov	r3, r6
 800b97c:	462a      	mov	r2, r5
 800b97e:	4802      	ldr	r0, [pc, #8]	; (800b988 <DAC_DMA_Reconfig+0x2c>)
 800b980:	f7fa fafa 	bl	8005f78 <HAL_DAC_Start_DMA>
}
 800b984:	b002      	add	sp, #8
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	2000ce0c 	.word	0x2000ce0c

0800b98c <DACSetOutputBuffer>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void DACSetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800b98c:	4b01      	ldr	r3, [pc, #4]	; (800b994 <DACSetOutputBuffer+0x8>)
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
}
 800b992:	4770      	bx	lr
 800b994:	200047b8 	.word	0x200047b8

0800b998 <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800b998:	4b01      	ldr	r3, [pc, #4]	; (800b9a0 <DACUnsetOutputBuffer+0x8>)
 800b99a:	2202      	movs	r2, #2
 800b99c:	601a      	str	r2, [r3, #0]
}
 800b99e:	4770      	bx	lr
 800b9a0:	200047b8 	.word	0x200047b8

0800b9a4 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800b9a4:	b510      	push	{r4, lr}
  hdac.Instance = DAC;
 800b9a6:	4c13      	ldr	r4, [pc, #76]	; (800b9f4 <GeneratingEnable+0x50>)
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <GeneratingEnable+0x54>)
 800b9aa:	6023      	str	r3, [r4, #0]
void GeneratingEnable(void){
 800b9ac:	b086      	sub	sp, #24
  HAL_DAC_Init(&hdac);
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7fa fa74 	bl	8005e9c <HAL_DAC_Init>
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800b9b4:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <GeneratingEnable+0x58>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b9ba:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800b9bc:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b9be:	4620      	mov	r0, r4
 800b9c0:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800b9c2:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800b9c4:	f7fa fb4e 	bl	8006064 <HAL_DAC_ConfigChannel>
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800b9c8:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800b9ca:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800b9d0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b9d2:	2430      	movs	r4, #48	; 0x30
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800b9d4:	f7fa fb46 	bl	8006064 <HAL_DAC_ConfigChannel>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b9d8:	2203      	movs	r2, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9da:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9dc:	a901      	add	r1, sp, #4
 800b9de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b9e2:	e9cd 4201 	strd	r4, r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9e6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e8:	f7fa fd5e 	bl	80064a8 <HAL_GPIO_Init>
	MX_DAC_Init();
	DACEnableOutput();
	TIMGenEnable();
 800b9ec:	f000 fef6 	bl	800c7dc <TIMGenEnable>
}
 800b9f0:	b006      	add	sp, #24
 800b9f2:	bd10      	pop	{r4, pc}
 800b9f4:	2000ce0c 	.word	0x2000ce0c
 800b9f8:	40007400 	.word	0x40007400
 800b9fc:	200047b8 	.word	0x200047b8

0800ba00 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800ba00:	b510      	push	{r4, lr}
	TIMGenDisable();
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800ba02:	4c0c      	ldr	r4, [pc, #48]	; (800ba34 <GeneratingDisable+0x34>)
void GeneratingDisable(void){
 800ba04:	b086      	sub	sp, #24
	TIMGenDisable();
 800ba06:	f000 fef7 	bl	800c7f8 <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f7fa fa5b 	bl	8005ec8 <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800ba12:	4620      	mov	r0, r4
 800ba14:	2110      	movs	r1, #16
 800ba16:	f7fa fa57 	bl	8005ec8 <HAL_DAC_Stop>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba1a:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ba1c:	2230      	movs	r2, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba1e:	a901      	add	r1, sp, #4
 800ba20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba24:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba28:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba2a:	f7fa fd3d 	bl	80064a8 <HAL_GPIO_Init>
	DACDisableOutput();	
}
 800ba2e:	b006      	add	sp, #24
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	bf00      	nop
 800ba34:	2000ce0c 	.word	0x2000ce0c

0800ba38 <MX_DMA_Init>:
#include "dma.h"

void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();
 800ba38:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <MX_DMA_Init+0x2c>)
 800ba3a:	695a      	ldr	r2, [r3, #20]
 800ba3c:	f042 0202 	orr.w	r2, r2, #2
 800ba40:	615a      	str	r2, [r3, #20]
 800ba42:	695a      	ldr	r2, [r3, #20]
{
 800ba44:	b082      	sub	sp, #8
  __DMA2_CLK_ENABLE();
 800ba46:	f002 0202 	and.w	r2, r2, #2
 800ba4a:	9200      	str	r2, [sp, #0]
 800ba4c:	9a00      	ldr	r2, [sp, #0]
	__DMA1_CLK_ENABLE();
 800ba4e:	695a      	ldr	r2, [r3, #20]
 800ba50:	f042 0201 	orr.w	r2, r2, #1
 800ba54:	615a      	str	r2, [r3, #20]
 800ba56:	695b      	ldr	r3, [r3, #20]
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
}
 800ba60:	b002      	add	sp, #8
 800ba62:	4770      	bx	lr
 800ba64:	40021000 	.word	0x40021000

0800ba68 <MX_GPIO_Init>:
//	BSP_LED_Init(LED2);

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800ba68:	4b2b      	ldr	r3, [pc, #172]	; (800bb18 <MX_GPIO_Init+0xb0>)
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ba6a:	492c      	ldr	r1, [pc, #176]	; (800bb1c <MX_GPIO_Init+0xb4>)
  __GPIOC_CLK_ENABLE();
 800ba6c:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ba6e:	482c      	ldr	r0, [pc, #176]	; (800bb20 <MX_GPIO_Init+0xb8>)
{
 800ba70:	b510      	push	{r4, lr}
  __GPIOC_CLK_ENABLE();
 800ba72:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ba76:	615a      	str	r2, [r3, #20]
 800ba78:	695a      	ldr	r2, [r3, #20]
{
 800ba7a:	b08a      	sub	sp, #40	; 0x28
  __GPIOC_CLK_ENABLE();
 800ba7c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800ba80:	9201      	str	r2, [sp, #4]
 800ba82:	9a01      	ldr	r2, [sp, #4]
  __GPIOF_CLK_ENABLE();
 800ba84:	695a      	ldr	r2, [r3, #20]
 800ba86:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ba8a:	615a      	str	r2, [r3, #20]
 800ba8c:	695a      	ldr	r2, [r3, #20]
 800ba8e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ba92:	9202      	str	r2, [sp, #8]
 800ba94:	9a02      	ldr	r2, [sp, #8]
  __GPIOA_CLK_ENABLE();
 800ba96:	695a      	ldr	r2, [r3, #20]
 800ba98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ba9c:	615a      	str	r2, [r3, #20]
 800ba9e:	695a      	ldr	r2, [r3, #20]
 800baa0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800baa4:	9203      	str	r2, [sp, #12]
 800baa6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800baa8:	695a      	ldr	r2, [r3, #20]
 800baaa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800baae:	615a      	str	r2, [r3, #20]
 800bab0:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bab2:	9106      	str	r1, [sp, #24]
  __GPIOB_CLK_ENABLE();
 800bab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bab8:	2400      	movs	r4, #0
  __GPIOB_CLK_ENABLE();
 800baba:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800babc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 800babe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __GPIOB_CLK_ENABLE();
 800bac2:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800bac4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bac8:	f7fa fcee 	bl	80064a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800bacc:	200c      	movs	r0, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bace:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bad0:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bad2:	2307      	movs	r3, #7
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800bad4:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bada:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800badc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bade:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bae2:	f7fa fce1 	bl	80064a8 <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800bae6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = D7_PIN;
 800bae8:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800baec:	2301      	movs	r3, #1
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800baee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = D7_PIN;
 800baf2:	e9cd 2405 	strd	r2, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800baf6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800baf8:	f7fa fcd6 	bl	80064a8 <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  
	GPIO_InitStruct.Pin = D8_PIN;
 800bafc:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bb00:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800bb02:	a905      	add	r1, sp, #20
 800bb04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb08:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800bb0e:	f7fa fccb 	bl	80064a8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
	
}
 800bb12:	b00a      	add	sp, #40	; 0x28
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	bf00      	nop
 800bb18:	40021000 	.word	0x40021000
 800bb1c:	10120000 	.word	0x10120000
 800bb20:	48000800 	.word	0x48000800

0800bb24 <LED_On>:

void LED_On(void){
//	BSP_LED_On(LED2);
}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop

0800bb28 <LED_Off>:
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop

0800bb2c <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800bb2c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//xQueueSendToBack(messageQueue, MSG_COMMS_FLUSH, portMAX_DELAY);
		osDelay(10);
 800bb2e:	200a      	movs	r0, #10
 800bb30:	f7fd f978 	bl	8008e24 <osDelay>
 800bb34:	e7fb      	b.n	800bb2e <StartThread+0x2>
 800bb36:	bf00      	nop

0800bb38 <main>:
{
 800bb38:	b580      	push	{r7, lr}
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bb3a:	4c4b      	ldr	r4, [pc, #300]	; (800bc68 <main+0x130>)
{
 800bb3c:	b0ae      	sub	sp, #184	; 0xb8
	HAL_Init();
 800bb3e:	f7f9 fa15 	bl	8004f6c <HAL_Init>
	SystemClock_Config();
 800bb42:	f7ff fdad 	bl	800b6a0 <SystemClock_Config>
	MX_GPIO_Init();
 800bb46:	f7ff ff8f 	bl	800ba68 <MX_GPIO_Init>
	MX_DMA_Init();
 800bb4a:	f7ff ff75 	bl	800ba38 <MX_DMA_Init>
	LED_On();
 800bb4e:	f7ff ffe9 	bl	800bb24 <LED_On>
	MX_ADC1_Init();
 800bb52:	f7fe ff1d 	bl	800a990 <MX_ADC1_Init>
	MX_ADC2_Init();
 800bb56:	f7fe ff59 	bl	800aa0c <MX_ADC2_Init>
	MX_ADC3_Init();
 800bb5a:	f7fe ff97 	bl	800aa8c <MX_ADC3_Init>
	MX_ADC4_Init();
 800bb5e:	f7fe ffd5 	bl	800ab0c <MX_ADC4_Init>
	MX_TIM15_Init();
 800bb62:	f002 fd09 	bl	800e578 <MX_TIM15_Init>
	CalibrateADC();
 800bb66:	f7ff fd7f 	bl	800b668 <CalibrateADC>
	adcSetDefaultInputs();
 800bb6a:	f7ff fc47 	bl	800b3fc <adcSetDefaultInputs>
	MX_DAC_Init();
 800bb6e:	f7ff fe65 	bl	800b83c <MX_DAC_Init>
	MX_TIM6_Init();
 800bb72:	f000 faab 	bl	800c0cc <MX_TIM6_Init>
	MX_TIM7_Init();
 800bb76:	f000 fac5 	bl	800c104 <MX_TIM7_Init>
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bb7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb7c:	4625      	mov	r5, r4
 800bb7e:	f10d 0c04 	add.w	ip, sp, #4
 800bb82:	f855 8b04 	ldr.w	r8, [r5], #4
 800bb86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bb8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bb8c:	f104 0e18 	add.w	lr, r4, #24
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bb90:	af06      	add	r7, sp, #24
 800bb92:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bb94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bb98:	ae0b      	add	r6, sp, #44	; 0x2c
 800bb9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bb9c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bba0:	682a      	ldr	r2, [r5, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bba2:	f8de 3000 	ldr.w	r3, [lr]
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bba6:	f8cc 8000 	str.w	r8, [ip]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bbaa:	603a      	str	r2, [r7, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbac:	6033      	str	r3, [r6, #0]
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbb2:	f104 0640 	add.w	r6, r4, #64	; 0x40
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbb6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800bbba:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbc0:	f104 0554 	add.w	r5, r4, #84	; 0x54
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbc4:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bbc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbce:	af1a      	add	r7, sp, #104	; 0x68
 800bbd0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbd2:	f104 0e68 	add.w	lr, r4, #104	; 0x68
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbd6:	f8d9 3000 	ldr.w	r3, [r9]
 800bbda:	f8c8 3000 	str.w	r3, [r8]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbe2:	6836      	ldr	r6, [r6, #0]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbe4:	682d      	ldr	r5, [r5, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbe6:	f8cc 6000 	str.w	r6, [ip]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbea:	603d      	str	r5, [r7, #0]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbec:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbf0:	af1f      	add	r7, sp, #124	; 0x7c
 800bbf2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbf8:	3490      	adds	r4, #144	; 0x90
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbfa:	ae24      	add	r6, sp, #144	; 0x90
 800bbfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bbfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc00:	ad29      	add	r5, sp, #164	; 0xa4
 800bc02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc04:	f8de 1000 	ldr.w	r1, [lr]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc08:	f8dc 2000 	ldr.w	r2, [ip]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc0c:	6823      	ldr	r3, [r4, #0]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc0e:	6039      	str	r1, [r7, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800bc10:	a801      	add	r0, sp, #4
 800bc12:	2100      	movs	r1, #0
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc14:	6032      	str	r2, [r6, #0]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bc16:	602b      	str	r3, [r5, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800bc18:	f7fd f8ec 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	a806      	add	r0, sp, #24
 800bc20:	f7fd f8e8 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800bc24:	2100      	movs	r1, #0
 800bc26:	a80b      	add	r0, sp, #44	; 0x2c
 800bc28:	f7fd f8e4 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	a810      	add	r0, sp, #64	; 0x40
 800bc30:	f7fd f8e0 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800bc34:	2100      	movs	r1, #0
 800bc36:	a815      	add	r0, sp, #84	; 0x54
 800bc38:	f7fd f8dc 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	a81a      	add	r0, sp, #104	; 0x68
 800bc40:	f7fd f8d8 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800bc44:	2100      	movs	r1, #0
 800bc46:	a81f      	add	r0, sp, #124	; 0x7c
 800bc48:	f7fd f8d4 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	a824      	add	r0, sp, #144	; 0x90
 800bc50:	f7fd f8d0 	bl	8008df4 <osThreadCreate>
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 800bc54:	2100      	movs	r1, #0
 800bc56:	a829      	add	r0, sp, #164	; 0xa4
 800bc58:	f7fd f8cc 	bl	8008df4 <osThreadCreate>
	LED_Off();
 800bc5c:	f7ff ff64 	bl	800bb28 <LED_Off>
	osKernelStart();
 800bc60:	f7fd f8c2 	bl	8008de8 <osKernelStart>
 800bc64:	e7fe      	b.n	800bc64 <main+0x12c>
 800bc66:	bf00      	nop
 800bc68:	0801146c 	.word	0x0801146c

0800bc6c <HAL_MspInit>:
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */
  __SYSCFG_CLK_ENABLE();
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <HAL_MspInit+0x30>)
{
 800bc6e:	b500      	push	{lr}
  __SYSCFG_CLK_ENABLE();
 800bc70:	699a      	ldr	r2, [r3, #24]
 800bc72:	f042 0201 	orr.w	r2, r2, #1
 800bc76:	619a      	str	r2, [r3, #24]
 800bc78:	699b      	ldr	r3, [r3, #24]
{
 800bc7a:	b083      	sub	sp, #12
  __SYSCFG_CLK_ENABLE();
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	9301      	str	r3, [sp, #4]
  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bc82:	2003      	movs	r0, #3
  __SYSCFG_CLK_ENABLE();
 800bc84:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bc86:	f7fa f873 	bl	8005d70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bc92:	b003      	add	sp, #12
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bc98:	f7fa b87c 	b.w	8005d94 <HAL_NVIC_SetPriority>
 800bc9c:	40021000 	.word	0x40021000

0800bca0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800bca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <USART2_IRQHandler+0x18>)
 800bca4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	commsRecieveUART(c);
 800bca6:	b2c0      	uxtb	r0, r0
 800bca8:	f7ff fdc6 	bl	800b838 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800bcac:	2026      	movs	r0, #38	; 0x26
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bcae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800bcb2:	f7fa b8d9 	b.w	8005e68 <HAL_NVIC_ClearPendingIRQ>
 800bcb6:	bf00      	nop
 800bcb8:	40004400 	.word	0x40004400

0800bcbc <DMA1_Channel6_IRQHandler>:

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop

0800bcc0 <DMA1_Channel2_IRQHandler>:
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <DMA1_Channel2_IRQHandler+0x8>)
 800bcc2:	f7fa bb4b 	b.w	800635c <HAL_DMA_IRQHandler>
 800bcc6:	bf00      	nop
 800bcc8:	2000d17c 	.word	0x2000d17c

0800bccc <DMA1_Channel7_IRQHandler>:
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800bccc:	4801      	ldr	r0, [pc, #4]	; (800bcd4 <DMA1_Channel7_IRQHandler+0x8>)
 800bcce:	f7fa bb45 	b.w	800635c <HAL_DMA_IRQHandler>
 800bcd2:	bf00      	nop
 800bcd4:	2000d290 	.word	0x2000d290

0800bcd8 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 800bcd8:	b570      	push	{r4, r5, r6, lr}
	TIM_PostTrigger_SoftwareStart();
 800bcda:	f002 fbdb 	bl	800e494 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800bcde:	4b45      	ldr	r3, [pc, #276]	; (800bdf4 <EXTI15_10_IRQHandler+0x11c>)
 800bce0:	4d45      	ldr	r5, [pc, #276]	; (800bdf8 <EXTI15_10_IRQHandler+0x120>)
 800bce2:	681a      	ldr	r2, [r3, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800bce4:	4b45      	ldr	r3, [pc, #276]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800bce6:	6852      	ldr	r2, [r2, #4]
 800bce8:	602a      	str	r2, [r5, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800bcea:	695c      	ldr	r4, [r3, #20]
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
	uint8_t isRightPin = 0;
	
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800bcec:	0660      	lsls	r0, r4, #25
 800bcee:	d504      	bpl.n	800bcfa <EXTI15_10_IRQHandler+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800bcf0:	2240      	movs	r2, #64	; 0x40
 800bcf2:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 800bcf4:	7d6b      	ldrb	r3, [r5, #21]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d051      	beq.n	800bd9e <EXTI15_10_IRQHandler+0xc6>
	uint8_t isRightPin = 0;
 800bcfa:	2300      	movs	r3, #0
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 800bcfc:	0621      	lsls	r1, r4, #24
 800bcfe:	d506      	bpl.n	800bd0e <EXTI15_10_IRQHandler+0x36>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800bd00:	4a3e      	ldr	r2, [pc, #248]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd02:	2180      	movs	r1, #128	; 0x80
 800bd04:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 800bd06:	7d6e      	ldrb	r6, [r5, #21]
 800bd08:	b2f6      	uxtb	r6, r6
 800bd0a:	2e01      	cmp	r6, #1
 800bd0c:	d067      	beq.n	800bdde <EXTI15_10_IRQHandler+0x106>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 800bd0e:	05e2      	lsls	r2, r4, #23
 800bd10:	d506      	bpl.n	800bd20 <EXTI15_10_IRQHandler+0x48>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800bd12:	4a3a      	ldr	r2, [pc, #232]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd14:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd18:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 800bd1a:	7d6a      	ldrb	r2, [r5, #21]
 800bd1c:	2a02      	cmp	r2, #2
 800bd1e:	d063      	beq.n	800bde8 <EXTI15_10_IRQHandler+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 800bd20:	05a6      	lsls	r6, r4, #22
 800bd22:	d506      	bpl.n	800bd32 <EXTI15_10_IRQHandler+0x5a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 800bd24:	4a35      	ldr	r2, [pc, #212]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd2a:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 800bd2c:	7d6a      	ldrb	r2, [r5, #21]
 800bd2e:	2a03      	cmp	r2, #3
 800bd30:	d03a      	beq.n	800bda8 <EXTI15_10_IRQHandler+0xd0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 800bd32:	0560      	lsls	r0, r4, #21
 800bd34:	d506      	bpl.n	800bd44 <EXTI15_10_IRQHandler+0x6c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800bd36:	4a31      	ldr	r2, [pc, #196]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd3c:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 800bd3e:	7d6a      	ldrb	r2, [r5, #21]
 800bd40:	2a04      	cmp	r2, #4
 800bd42:	d036      	beq.n	800bdb2 <EXTI15_10_IRQHandler+0xda>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 800bd44:	0521      	lsls	r1, r4, #20
 800bd46:	d506      	bpl.n	800bd56 <EXTI15_10_IRQHandler+0x7e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 800bd48:	4a2c      	ldr	r2, [pc, #176]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd4e:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 800bd50:	7d6a      	ldrb	r2, [r5, #21]
 800bd52:	2a05      	cmp	r2, #5
 800bd54:	d032      	beq.n	800bdbc <EXTI15_10_IRQHandler+0xe4>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 800bd56:	04e2      	lsls	r2, r4, #19
 800bd58:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800bd5c:	d506      	bpl.n	800bd6c <EXTI15_10_IRQHandler+0x94>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800bd5e:	4c27      	ldr	r4, [pc, #156]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bd64:	6162      	str	r2, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 800bd66:	7d6a      	ldrb	r2, [r5, #21]
 800bd68:	2a06      	cmp	r2, #6
 800bd6a:	d02c      	beq.n	800bdc6 <EXTI15_10_IRQHandler+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800bd6c:	b956      	cbnz	r6, 800bd84 <EXTI15_10_IRQHandler+0xac>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	
	if(isRightPin == 1){		
 800bd6e:	b99b      	cbnz	r3, 800bd98 <EXTI15_10_IRQHandler+0xc0>
//		TIM_PostTrigger_SoftwareStart();
	}
	else{
		//stop TIM4 and reset		
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800bd70:	4a23      	ldr	r2, [pc, #140]	; (800be00 <EXTI15_10_IRQHandler+0x128>)
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800bd72:	4924      	ldr	r1, [pc, #144]	; (800be04 <EXTI15_10_IRQHandler+0x12c>)
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800bd74:	6813      	ldr	r3, [r2, #0]
 800bd76:	f023 0301 	bic.w	r3, r3, #1
 800bd7a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800bd7c:	680b      	ldr	r3, [r1, #0]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800bd84:	4a1d      	ldr	r2, [pc, #116]	; (800bdfc <EXTI15_10_IRQHandler+0x124>)
 800bd86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd8a:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800bd8c:	7d6a      	ldrb	r2, [r5, #21]
 800bd8e:	2a07      	cmp	r2, #7
 800bd90:	d1ed      	bne.n	800bd6e <EXTI15_10_IRQHandler+0x96>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800bd92:	2028      	movs	r0, #40	; 0x28
 800bd94:	f7fa f840 	bl	8005e18 <HAL_NVIC_DisableIRQ>
		logAnlys.trigOccur = TRIG_OCCURRED;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	75eb      	strb	r3, [r5, #23]
}
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800bd9e:	2017      	movs	r0, #23
 800bda0:	f7fa f83a 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e7a9      	b.n	800bcfc <EXTI15_10_IRQHandler+0x24>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800bda8:	2017      	movs	r0, #23
 800bdaa:	f7fa f835 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7bf      	b.n	800bd32 <EXTI15_10_IRQHandler+0x5a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800bdb2:	2028      	movs	r0, #40	; 0x28
 800bdb4:	f7fa f830 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e7c3      	b.n	800bd44 <EXTI15_10_IRQHandler+0x6c>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800bdbc:	2028      	movs	r0, #40	; 0x28
 800bdbe:	f7fa f82b 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e7c7      	b.n	800bd56 <EXTI15_10_IRQHandler+0x7e>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800bdc6:	2028      	movs	r0, #40	; 0x28
 800bdc8:	f7fa f826 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	d0e3      	beq.n	800bd98 <EXTI15_10_IRQHandler+0xc0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800bdd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdd4:	6163      	str	r3, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800bdd6:	7d6b      	ldrb	r3, [r5, #21]
 800bdd8:	2b07      	cmp	r3, #7
 800bdda:	d1dd      	bne.n	800bd98 <EXTI15_10_IRQHandler+0xc0>
 800bddc:	e7d9      	b.n	800bd92 <EXTI15_10_IRQHandler+0xba>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800bdde:	2017      	movs	r0, #23
 800bde0:	f7fa f81a 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bde4:	4633      	mov	r3, r6
 800bde6:	e792      	b.n	800bd0e <EXTI15_10_IRQHandler+0x36>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800bde8:	2017      	movs	r0, #23
 800bdea:	f7fa f815 	bl	8005e18 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e796      	b.n	800bd20 <EXTI15_10_IRQHandler+0x48>
 800bdf2:	bf00      	nop
 800bdf4:	2000d24c 	.word	0x2000d24c
 800bdf8:	20005418 	.word	0x20005418
 800bdfc:	40010400 	.word	0x40010400
 800be00:	40000800 	.word	0x40000800
 800be04:	2000d13c 	.word	0x2000d13c

0800be08 <EXTI9_5_IRQHandler>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	f002 fb43 	bl	800e494 <TIM_PostTrigger_SoftwareStart>
 800be0e:	4b45      	ldr	r3, [pc, #276]	; (800bf24 <EXTI9_5_IRQHandler+0x11c>)
 800be10:	4d45      	ldr	r5, [pc, #276]	; (800bf28 <EXTI9_5_IRQHandler+0x120>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	4b45      	ldr	r3, [pc, #276]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be16:	6852      	ldr	r2, [r2, #4]
 800be18:	602a      	str	r2, [r5, #0]
 800be1a:	695c      	ldr	r4, [r3, #20]
 800be1c:	0660      	lsls	r0, r4, #25
 800be1e:	d504      	bpl.n	800be2a <EXTI9_5_IRQHandler+0x22>
 800be20:	2240      	movs	r2, #64	; 0x40
 800be22:	615a      	str	r2, [r3, #20]
 800be24:	7d6b      	ldrb	r3, [r5, #21]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d051      	beq.n	800bece <EXTI9_5_IRQHandler+0xc6>
 800be2a:	2300      	movs	r3, #0
 800be2c:	0621      	lsls	r1, r4, #24
 800be2e:	d506      	bpl.n	800be3e <EXTI9_5_IRQHandler+0x36>
 800be30:	4a3e      	ldr	r2, [pc, #248]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be32:	2180      	movs	r1, #128	; 0x80
 800be34:	6151      	str	r1, [r2, #20]
 800be36:	7d6e      	ldrb	r6, [r5, #21]
 800be38:	b2f6      	uxtb	r6, r6
 800be3a:	2e01      	cmp	r6, #1
 800be3c:	d067      	beq.n	800bf0e <EXTI9_5_IRQHandler+0x106>
 800be3e:	05e2      	lsls	r2, r4, #23
 800be40:	d506      	bpl.n	800be50 <EXTI9_5_IRQHandler+0x48>
 800be42:	4a3a      	ldr	r2, [pc, #232]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be48:	6151      	str	r1, [r2, #20]
 800be4a:	7d6a      	ldrb	r2, [r5, #21]
 800be4c:	2a02      	cmp	r2, #2
 800be4e:	d063      	beq.n	800bf18 <EXTI9_5_IRQHandler+0x110>
 800be50:	05a6      	lsls	r6, r4, #22
 800be52:	d506      	bpl.n	800be62 <EXTI9_5_IRQHandler+0x5a>
 800be54:	4a35      	ldr	r2, [pc, #212]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be5a:	6151      	str	r1, [r2, #20]
 800be5c:	7d6a      	ldrb	r2, [r5, #21]
 800be5e:	2a03      	cmp	r2, #3
 800be60:	d03a      	beq.n	800bed8 <EXTI9_5_IRQHandler+0xd0>
 800be62:	0560      	lsls	r0, r4, #21
 800be64:	d506      	bpl.n	800be74 <EXTI9_5_IRQHandler+0x6c>
 800be66:	4a31      	ldr	r2, [pc, #196]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800be6c:	6151      	str	r1, [r2, #20]
 800be6e:	7d6a      	ldrb	r2, [r5, #21]
 800be70:	2a04      	cmp	r2, #4
 800be72:	d036      	beq.n	800bee2 <EXTI9_5_IRQHandler+0xda>
 800be74:	0521      	lsls	r1, r4, #20
 800be76:	d506      	bpl.n	800be86 <EXTI9_5_IRQHandler+0x7e>
 800be78:	4a2c      	ldr	r2, [pc, #176]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800be7e:	6151      	str	r1, [r2, #20]
 800be80:	7d6a      	ldrb	r2, [r5, #21]
 800be82:	2a05      	cmp	r2, #5
 800be84:	d032      	beq.n	800beec <EXTI9_5_IRQHandler+0xe4>
 800be86:	04e2      	lsls	r2, r4, #19
 800be88:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800be8c:	d506      	bpl.n	800be9c <EXTI9_5_IRQHandler+0x94>
 800be8e:	4c27      	ldr	r4, [pc, #156]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800be90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be94:	6162      	str	r2, [r4, #20]
 800be96:	7d6a      	ldrb	r2, [r5, #21]
 800be98:	2a06      	cmp	r2, #6
 800be9a:	d02c      	beq.n	800bef6 <EXTI9_5_IRQHandler+0xee>
 800be9c:	b956      	cbnz	r6, 800beb4 <EXTI9_5_IRQHandler+0xac>
 800be9e:	b99b      	cbnz	r3, 800bec8 <EXTI9_5_IRQHandler+0xc0>
 800bea0:	4a23      	ldr	r2, [pc, #140]	; (800bf30 <EXTI9_5_IRQHandler+0x128>)
 800bea2:	4924      	ldr	r1, [pc, #144]	; (800bf34 <EXTI9_5_IRQHandler+0x12c>)
 800bea4:	6813      	ldr	r3, [r2, #0]
 800bea6:	f023 0301 	bic.w	r3, r3, #1
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	680b      	ldr	r3, [r1, #0]
 800beae:	2200      	movs	r2, #0
 800beb0:	625a      	str	r2, [r3, #36]	; 0x24
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	4a1d      	ldr	r2, [pc, #116]	; (800bf2c <EXTI9_5_IRQHandler+0x124>)
 800beb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800beba:	6151      	str	r1, [r2, #20]
 800bebc:	7d6a      	ldrb	r2, [r5, #21]
 800bebe:	2a07      	cmp	r2, #7
 800bec0:	d1ed      	bne.n	800be9e <EXTI9_5_IRQHandler+0x96>
 800bec2:	2028      	movs	r0, #40	; 0x28
 800bec4:	f7f9 ffa8 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bec8:	2300      	movs	r3, #0
 800beca:	75eb      	strb	r3, [r5, #23]
 800becc:	bd70      	pop	{r4, r5, r6, pc}
 800bece:	2017      	movs	r0, #23
 800bed0:	f7f9 ffa2 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e7a9      	b.n	800be2c <EXTI9_5_IRQHandler+0x24>
 800bed8:	2017      	movs	r0, #23
 800beda:	f7f9 ff9d 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bede:	2301      	movs	r3, #1
 800bee0:	e7bf      	b.n	800be62 <EXTI9_5_IRQHandler+0x5a>
 800bee2:	2028      	movs	r0, #40	; 0x28
 800bee4:	f7f9 ff98 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bee8:	2301      	movs	r3, #1
 800beea:	e7c3      	b.n	800be74 <EXTI9_5_IRQHandler+0x6c>
 800beec:	2028      	movs	r0, #40	; 0x28
 800beee:	f7f9 ff93 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e7c7      	b.n	800be86 <EXTI9_5_IRQHandler+0x7e>
 800bef6:	2028      	movs	r0, #40	; 0x28
 800bef8:	f7f9 ff8e 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800befc:	2e00      	cmp	r6, #0
 800befe:	d0e3      	beq.n	800bec8 <EXTI9_5_IRQHandler+0xc0>
 800bf00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf04:	6163      	str	r3, [r4, #20]
 800bf06:	7d6b      	ldrb	r3, [r5, #21]
 800bf08:	2b07      	cmp	r3, #7
 800bf0a:	d1dd      	bne.n	800bec8 <EXTI9_5_IRQHandler+0xc0>
 800bf0c:	e7d9      	b.n	800bec2 <EXTI9_5_IRQHandler+0xba>
 800bf0e:	2017      	movs	r0, #23
 800bf10:	f7f9 ff82 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bf14:	4633      	mov	r3, r6
 800bf16:	e792      	b.n	800be3e <EXTI9_5_IRQHandler+0x36>
 800bf18:	2017      	movs	r0, #23
 800bf1a:	f7f9 ff7d 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e796      	b.n	800be50 <EXTI9_5_IRQHandler+0x48>
 800bf22:	bf00      	nop
 800bf24:	2000d24c 	.word	0x2000d24c
 800bf28:	20005418 	.word	0x20005418
 800bf2c:	40010400 	.word	0x40010400
 800bf30:	40000800 	.word	0x40000800
 800bf34:	2000d13c 	.word	0x2000d13c

0800bf38 <TIM4_IRQHandler>:
*/
void TIM4_IRQHandler(void)
{
//  HAL_TIM_IRQHandler(&htim4);
	
	if(logAnlys.enable == LOGA_ENABLED){
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <TIM4_IRQHandler+0x14>)
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800bf3a:	4805      	ldr	r0, [pc, #20]	; (800bf50 <TIM4_IRQHandler+0x18>)
	if(logAnlys.enable == LOGA_ENABLED){
 800bf3c:	7cdb      	ldrb	r3, [r3, #19]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d001      	beq.n	800bf46 <TIM4_IRQHandler+0xe>
	}else{
		COUNTER_PeriodElapsedCallback(&htim4);
 800bf42:	f001 ba13 	b.w	800d36c <COUNTER_PeriodElapsedCallback>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800bf46:	f002 b9ab 	b.w	800e2a0 <LOG_ANLYS_PeriodElapsedCallback>
 800bf4a:	bf00      	nop
 800bf4c:	20005418 	.word	0x20005418
 800bf50:	2000d13c 	.word	0x2000d13c

0800bf54 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bf54:	4a0c      	ldr	r2, [pc, #48]	; (800bf88 <_sbrk+0x34>)
{
 800bf56:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800bf58:	6813      	ldr	r3, [r2, #0]
 800bf5a:	b133      	cbz	r3, 800bf6a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800bf5c:	4418      	add	r0, r3
 800bf5e:	4669      	mov	r1, sp
 800bf60:	4288      	cmp	r0, r1
 800bf62:	d808      	bhi.n	800bf76 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800bf64:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800bf6a:	4b08      	ldr	r3, [pc, #32]	; (800bf8c <_sbrk+0x38>)
 800bf6c:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800bf6e:	4418      	add	r0, r3
 800bf70:	4669      	mov	r1, sp
 800bf72:	4288      	cmp	r0, r1
 800bf74:	d9f6      	bls.n	800bf64 <_sbrk+0x10>
		errno = ENOMEM;
 800bf76:	f002 fbe9 	bl	800e74c <__errno>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	bd08      	pop	{r3, pc}
 800bf86:	bf00      	nop
 800bf88:	200047bc 	.word	0x200047bc
 800bf8c:	2000d410 	.word	0x2000d410

0800bf90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf90:	4917      	ldr	r1, [pc, #92]	; (800bff0 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bf92:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800bf94:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800bf96:	4819      	ldr	r0, [pc, #100]	; (800bffc <SystemInit+0x6c>)
{
 800bf98:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf9a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800bf9e:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800bfa2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 800bfa6:	681c      	ldr	r4, [r3, #0]
 800bfa8:	f044 0401 	orr.w	r4, r4, #1
 800bfac:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800bfae:	685c      	ldr	r4, [r3, #4]
 800bfb0:	4022      	ands	r2, r4
 800bfb2:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800bfba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bfbe:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bfc6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800bfce:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	f022 020f 	bic.w	r2, r2, #15
 800bfd6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 800bfd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800bfda:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 800bfdc:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bfde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 800bfe2:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 800bfe4:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bfe6:	608a      	str	r2, [r1, #8]
#endif
}
 800bfe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	e000ed00 	.word	0xe000ed00
 800bff4:	40021000 	.word	0x40021000
 800bff8:	f87fc00c 	.word	0xf87fc00c
 800bffc:	ff00fccc 	.word	0xff00fccc

0800c000 <MX_TIM8_SYNC_PWM_Init>:
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void)
{
 800c000:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 800c002:	4d2f      	ldr	r5, [pc, #188]	; (800c0c0 <MX_TIM8_SYNC_PWM_Init+0xc0>)
 800c004:	4b2f      	ldr	r3, [pc, #188]	; (800c0c4 <MX_TIM8_SYNC_PWM_Init+0xc4>)
 800c006:	602b      	str	r3, [r5, #0]
{
 800c008:	b09b      	sub	sp, #108	; 0x6c
	htim8.Init.Prescaler = 1151; // 1151
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c00a:	2400      	movs	r4, #0
	htim8.Init.Prescaler = 1151; // 1151
 800c00c:	f240 427f 	movw	r2, #1151	; 0x47f
	htim8.Init.Period = 62499; // 62499
 800c010:	f24f 4323 	movw	r3, #62499	; 0xf423
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim8.Init.RepetitionCounter = 0;
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim8);
 800c014:	4628      	mov	r0, r5
	htim8.Init.Prescaler = 1151; // 1151
 800c016:	606a      	str	r2, [r5, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c018:	e9c5 4302 	strd	r4, r3, [r5, #8]
	htim8.Init.RepetitionCounter = 0;
 800c01c:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c020:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim8);
 800c022:	f7fb fb13 	bl	800764c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c026:	a91a      	add	r1, sp, #104	; 0x68
 800c028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02c:	f841 3d58 	str.w	r3, [r1, #-88]!
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 800c030:	4628      	mov	r0, r5
 800c032:	f7fb ffc7 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;			
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800c036:	4e24      	ldr	r6, [pc, #144]	; (800c0c8 <MX_TIM8_SYNC_PWM_Init+0xc8>)
	HAL_TIM_OC_Init(&htim8);
 800c038:	4628      	mov	r0, r5
 800c03a:	f7fb fc0b 	bl	8007854 <HAL_TIM_OC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800c03e:	a901      	add	r1, sp, #4
 800c040:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c042:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c046:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800c048:	f7fc fbfa 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800c04c:	8877      	ldrh	r7, [r6, #2]
 800c04e:	9709      	str	r7, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800c050:	4622      	mov	r2, r4
 800c052:	a908      	add	r1, sp, #32
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c054:	2330      	movs	r3, #48	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;			
 800c056:	2708      	movs	r7, #8
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800c058:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c05a:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c05c:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c05e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c062:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;			
 800c064:	970b      	str	r7, [sp, #44]	; 0x2c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800c066:	f7fc fa13 	bl	8008490 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 800c06a:	88f3      	ldrh	r3, [r6, #6]
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 800c06e:	a908      	add	r1, sp, #32
 800c070:	4628      	mov	r0, r5
 800c072:	2204      	movs	r2, #4
 800c074:	f7fc fa0c 	bl	8008490 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 800c078:	8973      	ldrh	r3, [r6, #10]
 800c07a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 800c07c:	463a      	mov	r2, r7
 800c07e:	a908      	add	r1, sp, #32
 800c080:	4628      	mov	r0, r5
 800c082:	f7fc fa05 	bl	8008490 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 800c086:	89f3      	ldrh	r3, [r6, #14]
 800c088:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800c08a:	a908      	add	r1, sp, #32
 800c08c:	4628      	mov	r0, r5
 800c08e:	220c      	movs	r2, #12
 800c090:	f7fc f9fe 	bl	8008490 <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800c098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800c09c:	4628      	mov	r0, r5
 800c09e:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c0a0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800c0a4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c0a8:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800c0aa:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c0ae:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c0b2:	9214      	str	r2, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800c0b4:	9317      	str	r3, [sp, #92]	; 0x5c
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800c0b6:	f7fc fbef 	bl	8008898 <HAL_TIMEx_ConfigBreakDeadTime>
	/* CCRx DMA request enable */
	//	TIM8->DIER |= TIM_DIER_CC1DE;
	//	TIM8->DIER |= TIM_DIER_CC2DE;
	//	TIM8->DIER |= TIM_DIER_CC3DE;
	//	TIM8->DIER |= TIM_DIER_CC4DE;
}
 800c0ba:	b01b      	add	sp, #108	; 0x6c
 800c0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	2000ce64 	.word	0x2000ce64
 800c0c4:	40013400 	.word	0x40013400
 800c0c8:	2000cafc 	.word	0x2000cafc

0800c0cc <MX_TIM6_Init>:
{
 800c0cc:	b530      	push	{r4, r5, lr}
	htim6.Instance = TIM6;
 800c0ce:	4c0b      	ldr	r4, [pc, #44]	; (800c0fc <MX_TIM6_Init+0x30>)
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <MX_TIM6_Init+0x34>)
 800c0d2:	6023      	str	r3, [r4, #0]
{
 800c0d4:	b085      	sub	sp, #20
	htim6.Init.Prescaler = 0;
 800c0d6:	2500      	movs	r5, #0
	htim6.Init.Period = 0x7FF;
 800c0d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800c0dc:	4620      	mov	r0, r4
	htim6.Init.Period = 0x7FF;
 800c0de:	60e3      	str	r3, [r4, #12]
	htim6.Init.Prescaler = 0;
 800c0e0:	6065      	str	r5, [r4, #4]
	htim6.Init.ClockDivision = 0;
 800c0e2:	6125      	str	r5, [r4, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0e4:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim6);
 800c0e6:	f7fb fab1 	bl	800764c <HAL_TIM_Base_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c0ea:	2320      	movs	r3, #32
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c0f0:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c0f2:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800c0f4:	f7fc fba4 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800c0f8:	b005      	add	sp, #20
 800c0fa:	bd30      	pop	{r4, r5, pc}
 800c0fc:	2000d038 	.word	0x2000d038
 800c100:	40001000 	.word	0x40001000

0800c104 <MX_TIM7_Init>:
{
 800c104:	b530      	push	{r4, r5, lr}
	htim7.Instance = TIM7;
 800c106:	4c0b      	ldr	r4, [pc, #44]	; (800c134 <MX_TIM7_Init+0x30>)
 800c108:	4b0b      	ldr	r3, [pc, #44]	; (800c138 <MX_TIM7_Init+0x34>)
 800c10a:	6023      	str	r3, [r4, #0]
{
 800c10c:	b085      	sub	sp, #20
	htim7.Init.Prescaler = 0;
 800c10e:	2500      	movs	r5, #0
	htim7.Init.Period = 0x7FF;
 800c110:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim7);
 800c114:	4620      	mov	r0, r4
	htim7.Init.Period = 0x7FF;
 800c116:	60e3      	str	r3, [r4, #12]
	htim7.Init.Prescaler = 0;
 800c118:	6065      	str	r5, [r4, #4]
	htim7.Init.ClockDivision = 0;
 800c11a:	6125      	str	r5, [r4, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c11c:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim7);
 800c11e:	f7fb fa95 	bl	800764c <HAL_TIM_Base_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c122:	2320      	movs	r3, #32
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800c124:	4620      	mov	r0, r4
 800c126:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c128:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c12a:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800c12c:	f7fc fb88 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800c130:	b005      	add	sp, #20
 800c132:	bd30      	pop	{r4, r5, pc}
 800c134:	2000d0b8 	.word	0x2000d0b8
 800c138:	40001400 	.word	0x40001400

0800c13c <HAL_TIM_Base_MspInit>:
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

#ifdef USE_SCOPE
	if(htim_base->Instance==TIM15)
 800c140:	4ba5      	ldr	r3, [pc, #660]	; (800c3d8 <HAL_TIM_Base_MspInit+0x29c>)
 800c142:	6804      	ldr	r4, [r0, #0]
 800c144:	429c      	cmp	r4, r3
{
 800c146:	b08f      	sub	sp, #60	; 0x3c
 800c148:	4605      	mov	r5, r0
	if(htim_base->Instance==TIM15)
 800c14a:	f000 8135 	beq.w	800c3b8 <HAL_TIM_Base_MspInit+0x27c>
	/* Note: PC app must send the mode first even if only one 
		 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if(generator.modeState==GENERATOR_DAC){
 800c14e:	4ba3      	ldr	r3, [pc, #652]	; (800c3dc <HAL_TIM_Base_MspInit+0x2a0>)
 800c150:	7d5a      	ldrb	r2, [r3, #21]
 800c152:	2a01      	cmp	r2, #1
 800c154:	d032      	beq.n	800c1bc <HAL_TIM_Base_MspInit+0x80>
	}
#endif //USE_GEN

#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if(generator.modeState==GENERATOR_PWM){
 800c156:	7d5b      	ldrb	r3, [r3, #21]
 800c158:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c15c:	b97b      	cbnz	r3, 800c17e <HAL_TIM_Base_MspInit+0x42>
		if(htim_base->Instance==TIM1){
 800c15e:	4ba0      	ldr	r3, [pc, #640]	; (800c3e0 <HAL_TIM_Base_MspInit+0x2a4>)
 800c160:	429c      	cmp	r4, r3
 800c162:	f000 81a9 	beq.w	800c4b8 <HAL_TIM_Base_MspInit+0x37c>
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
			GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
		}
		if(htim_base->Instance==TIM3){
 800c166:	4b9f      	ldr	r3, [pc, #636]	; (800c3e4 <HAL_TIM_Base_MspInit+0x2a8>)
 800c168:	429c      	cmp	r4, r3
 800c16a:	f000 818b 	beq.w	800c484 <HAL_TIM_Base_MspInit+0x348>
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		}
		if(htim_base->Instance==TIM6){
 800c16e:	4b9e      	ldr	r3, [pc, #632]	; (800c3e8 <HAL_TIM_Base_MspInit+0x2ac>)
 800c170:	429c      	cmp	r4, r3
 800c172:	f000 815d 	beq.w	800c430 <HAL_TIM_Base_MspInit+0x2f4>
			HAL_DMA_Init(&hdma_tim6_up);
			TIM6->DIER |= TIM_DIER_UDE;

			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
		}
		if(htim_base->Instance==TIM7){
 800c176:	4b9d      	ldr	r3, [pc, #628]	; (800c3ec <HAL_TIM_Base_MspInit+0x2b0>)
 800c178:	429c      	cmp	r4, r3
 800c17a:	f000 80e9 	beq.w	800c350 <HAL_TIM_Base_MspInit+0x214>
	}
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	if(htim_base->Instance==TIM8)
 800c17e:	4b9c      	ldr	r3, [pc, #624]	; (800c3f0 <HAL_TIM_Base_MspInit+0x2b4>)
 800c180:	429c      	cmp	r4, r3
 800c182:	d033      	beq.n	800c1ec <HAL_TIM_Base_MspInit+0xb0>
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
	}
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	if(htim_base->Instance==TIM1){
 800c184:	4b96      	ldr	r3, [pc, #600]	; (800c3e0 <HAL_TIM_Base_MspInit+0x2a4>)
 800c186:	429c      	cmp	r4, r3
 800c188:	f000 80ba 	beq.w	800c300 <HAL_TIM_Base_MspInit+0x1c4>
		if(logAnlys.enable==LOGA_ENABLED){
			TIM1_LOG_ANLYS_MspInit(htim_base);
		}
	}

	if(htim_base->Instance==TIM4){
 800c18c:	4b99      	ldr	r3, [pc, #612]	; (800c3f4 <HAL_TIM_Base_MspInit+0x2b8>)
 800c18e:	429c      	cmp	r4, r3
 800c190:	d006      	beq.n	800c1a0 <HAL_TIM_Base_MspInit+0x64>



#ifdef USE_COUNTER

	if(htim_base->Instance==TIM2){
 800c192:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c196:	f000 80c4 	beq.w	800c322 <HAL_TIM_Base_MspInit+0x1e6>
			TIM4_REForICorTI_MspInit(htim_base);
		}
	}

#endif //USE_COUNTER
}
 800c19a:	b00f      	add	sp, #60	; 0x3c
 800c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(logAnlys.enable==LOGA_ENABLED){
 800c1a0:	4b95      	ldr	r3, [pc, #596]	; (800c3f8 <HAL_TIM_Base_MspInit+0x2bc>)
 800c1a2:	7cda      	ldrb	r2, [r3, #19]
 800c1a4:	2a01      	cmp	r2, #1
 800c1a6:	f000 80b5 	beq.w	800c314 <HAL_TIM_Base_MspInit+0x1d8>
		if(logAnlys.enable==LOGA_DISABLED){
 800c1aa:	7cdb      	ldrb	r3, [r3, #19]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f4      	bne.n	800c19a <HAL_TIM_Base_MspInit+0x5e>
			TIM4_REForICorTI_MspInit(htim_base);
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f001 f823 	bl	800d1fc <TIM4_REForICorTI_MspInit>
}
 800c1b6:	b00f      	add	sp, #60	; 0x3c
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(htim_base->Instance==TIM6){
 800c1bc:	4a8a      	ldr	r2, [pc, #552]	; (800c3e8 <HAL_TIM_Base_MspInit+0x2ac>)
 800c1be:	4294      	cmp	r4, r2
 800c1c0:	f000 80fe 	beq.w	800c3c0 <HAL_TIM_Base_MspInit+0x284>
		if(htim_base->Instance==TIM7){
 800c1c4:	4a89      	ldr	r2, [pc, #548]	; (800c3ec <HAL_TIM_Base_MspInit+0x2b0>)
 800c1c6:	4294      	cmp	r4, r2
 800c1c8:	d1c5      	bne.n	800c156 <HAL_TIM_Base_MspInit+0x1a>
			__TIM7_CLK_ENABLE();
 800c1ca:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800c1ce:	69d1      	ldr	r1, [r2, #28]
 800c1d0:	f041 0120 	orr.w	r1, r1, #32
 800c1d4:	61d1      	str	r1, [r2, #28]
 800c1d6:	69d2      	ldr	r2, [r2, #28]
 800c1d8:	f002 0220 	and.w	r2, r2, #32
 800c1dc:	9203      	str	r2, [sp, #12]
 800c1de:	9a03      	ldr	r2, [sp, #12]
	if(generator.modeState==GENERATOR_PWM){
 800c1e0:	7d5b      	ldrb	r3, [r3, #21]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c3      	beq.n	800c16e <HAL_TIM_Base_MspInit+0x32>
	if(htim_base->Instance==TIM8)
 800c1e6:	4b82      	ldr	r3, [pc, #520]	; (800c3f0 <HAL_TIM_Base_MspInit+0x2b4>)
 800c1e8:	429c      	cmp	r4, r3
 800c1ea:	d1cb      	bne.n	800c184 <HAL_TIM_Base_MspInit+0x48>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c1ec:	4983      	ldr	r1, [pc, #524]	; (800c3fc <HAL_TIM_Base_MspInit+0x2c0>)
		hdma_tim8_ch1.Instance = DMA2_Channel3;
 800c1ee:	4a84      	ldr	r2, [pc, #528]	; (800c400 <HAL_TIM_Base_MspInit+0x2c4>)
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c1f0:	698e      	ldr	r6, [r1, #24]
		hdma_tim8_ch2.Instance = DMA2_Channel5;
 800c1f2:	4b84      	ldr	r3, [pc, #528]	; (800c404 <HAL_TIM_Base_MspInit+0x2c8>)
		hdma_tim8_ch1.Instance = DMA2_Channel3;
 800c1f4:	9200      	str	r2, [sp, #0]
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c1f6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
		hdma_tim8_ch2.Instance = DMA2_Channel5;
 800c1fa:	9301      	str	r3, [sp, #4]
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c1fc:	618e      	str	r6, [r1, #24]
 800c1fe:	6989      	ldr	r1, [r1, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c200:	4881      	ldr	r0, [pc, #516]	; (800c408 <HAL_TIM_Base_MspInit+0x2cc>)
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c202:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c206:	f04f 0e02 	mov.w	lr, #2
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c20a:	f04f 0c01 	mov.w	ip, #1
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c20e:	9108      	str	r1, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800c210:	f44f 7870 	mov.w	r8, #960	; 0x3c0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c214:	2703      	movs	r7, #3
		GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800c216:	2604      	movs	r6, #4
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c218:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c21a:	e9cd 8e09 	strd	r8, lr, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c21e:	e9cd c70b 	strd	ip, r7, [sp, #44]	; 0x2c
		__HAL_RCC_TIM8_CLK_ENABLE();
 800c222:	f8dd 9020 	ldr.w	r9, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800c226:	960d      	str	r6, [sp, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c228:	f7fa f93e 	bl	80064a8 <HAL_GPIO_Init>
		hdma_tim8_ch1.Instance = DMA2_Channel3;
 800c22c:	9a00      	ldr	r2, [sp, #0]
 800c22e:	4977      	ldr	r1, [pc, #476]	; (800c40c <HAL_TIM_Base_MspInit+0x2d0>)
 800c230:	6011      	str	r1, [r2, #0]
		hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c232:	f44f 6780 	mov.w	r7, #1024	; 0x400
		hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c236:	f04f 0b10 	mov.w	fp, #16
		hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c23a:	f04f 0a00 	mov.w	sl, #0
		hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c23e:	f04f 0980 	mov.w	r9, #128	; 0x80
		hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c242:	f44f 7880 	mov.w	r8, #256	; 0x100
		hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800c246:	2620      	movs	r6, #32
		hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		HAL_DMA_Init(&hdma_tim8_ch1);
 800c24c:	4610      	mov	r0, r2
		hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c24e:	61d3      	str	r3, [r2, #28]
		hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c250:	e9c2 ba01 	strd	fp, sl, [r2, #4]
		hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c254:	e9c2 9803 	strd	r9, r8, [r2, #12]
		hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800c258:	e9c2 7605 	strd	r7, r6, [r2, #20]
		HAL_DMA_Init(&hdma_tim8_ch1);
 800c25c:	f7f9 ff46 	bl	80060ec <HAL_DMA_Init>
		TIM8->DIER |= TIM_DIER_CC1DE;
 800c260:	68e1      	ldr	r1, [r4, #12]
		HAL_DMA_Init(&hdma_tim8_ch2);
 800c262:	9b01      	ldr	r3, [sp, #4]
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800c264:	9a00      	ldr	r2, [sp, #0]
		TIM8->DIER |= TIM_DIER_CC1DE;
 800c266:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800c26a:	60e1      	str	r1, [r4, #12]
		HAL_DMA_Init(&hdma_tim8_ch2);
 800c26c:	4618      	mov	r0, r3
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800c26e:	626a      	str	r2, [r5, #36]	; 0x24
		hdma_tim8_ch2.Instance = DMA2_Channel5;
 800c270:	4967      	ldr	r1, [pc, #412]	; (800c410 <HAL_TIM_Base_MspInit+0x2d4>)
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800c272:	6255      	str	r5, [r2, #36]	; 0x24
		hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800c274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c278:	61da      	str	r2, [r3, #28]
		hdma_tim8_ch2.Instance = DMA2_Channel5;
 800c27a:	6019      	str	r1, [r3, #0]
		hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c27c:	e9c3 ba01 	strd	fp, sl, [r3, #4]
		hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c280:	e9c3 9803 	strd	r9, r8, [r3, #12]
		hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 800c284:	e9c3 7605 	strd	r7, r6, [r3, #20]
		hdma_tim8_ch2.Instance = DMA2_Channel5;
 800c288:	9300      	str	r3, [sp, #0]
		HAL_DMA_Init(&hdma_tim8_ch2);
 800c28a:	f7f9 ff2f 	bl	80060ec <HAL_DMA_Init>
		TIM8->DIER |= TIM_DIER_CC2DE;
 800c28e:	68e1      	ldr	r1, [r4, #12]
		hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800c290:	4a60      	ldr	r2, [pc, #384]	; (800c414 <HAL_TIM_Base_MspInit+0x2d8>)
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 800c292:	9b00      	ldr	r3, [sp, #0]
		TIM8->DIER |= TIM_DIER_CC2DE;
 800c294:	4339      	orrs	r1, r7
 800c296:	60e1      	str	r1, [r4, #12]
		HAL_DMA_Init(&hdma_tim8_ch3_up);
 800c298:	4610      	mov	r0, r2
		hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800c29a:	495f      	ldr	r1, [pc, #380]	; (800c418 <HAL_TIM_Base_MspInit+0x2dc>)
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 800c29c:	62ab      	str	r3, [r5, #40]	; 0x28
 800c29e:	625d      	str	r5, [r3, #36]	; 0x24
		hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800c2a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2a4:	61d3      	str	r3, [r2, #28]
		hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800c2a6:	6011      	str	r1, [r2, #0]
		hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c2a8:	e9c2 ba01 	strd	fp, sl, [r2, #4]
		hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c2ac:	e9c2 9803 	strd	r9, r8, [r2, #12]
		hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 800c2b0:	e9c2 7605 	strd	r7, r6, [r2, #20]
		hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800c2b4:	9200      	str	r2, [sp, #0]
		HAL_DMA_Init(&hdma_tim8_ch3_up);
 800c2b6:	f7f9 ff19 	bl	80060ec <HAL_DMA_Init>
		TIM8->DIER |= TIM_DIER_CC3DE;  //__HAL_TIM_ENABLE_DMA(htim_base, TIM_DMA_CC3);
 800c2ba:	68e1      	ldr	r1, [r4, #12]
		hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800c2bc:	4b57      	ldr	r3, [pc, #348]	; (800c41c <HAL_TIM_Base_MspInit+0x2e0>)
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 800c2be:	9a00      	ldr	r2, [sp, #0]
		TIM8->DIER |= TIM_DIER_CC3DE;  //__HAL_TIM_ENABLE_DMA(htim_base, TIM_DMA_CC3);
 800c2c0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c2c4:	60e1      	str	r1, [r4, #12]
		HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800c2c6:	4618      	mov	r0, r3
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 800c2c8:	62ea      	str	r2, [r5, #44]	; 0x2c
		hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800c2ca:	4955      	ldr	r1, [pc, #340]	; (800c420 <HAL_TIM_Base_MspInit+0x2e4>)
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 800c2cc:	6255      	str	r5, [r2, #36]	; 0x24
		hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800c2ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c2d2:	61da      	str	r2, [r3, #28]
		hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800c2d4:	e9c3 ba01 	strd	fp, sl, [r3, #4]
		hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c2d8:	e9c3 9803 	strd	r9, r8, [r3, #12]
		hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800c2dc:	e9c3 7605 	strd	r7, r6, [r3, #20]
		hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800c2e0:	6019      	str	r1, [r3, #0]
 800c2e2:	9300      	str	r3, [sp, #0]
		HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800c2e4:	f7f9 ff02 	bl	80060ec <HAL_DMA_Init>
		TIM8->DIER |= TIM_DIER_CC4DE;
 800c2e8:	68e2      	ldr	r2, [r4, #12]
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 800c2ea:	9b00      	ldr	r3, [sp, #0]
		TIM8->DIER |= TIM_DIER_CC4DE;
 800c2ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2f0:	60e2      	str	r2, [r4, #12]
 800c2f2:	682c      	ldr	r4, [r5, #0]
		__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 800c2f4:	632b      	str	r3, [r5, #48]	; 0x30
 800c2f6:	625d      	str	r5, [r3, #36]	; 0x24
	if(htim_base->Instance==TIM1){
 800c2f8:	4b39      	ldr	r3, [pc, #228]	; (800c3e0 <HAL_TIM_Base_MspInit+0x2a4>)
 800c2fa:	429c      	cmp	r4, r3
 800c2fc:	f47f af46 	bne.w	800c18c <HAL_TIM_Base_MspInit+0x50>
		if(logAnlys.enable==LOGA_ENABLED){
 800c300:	4b3d      	ldr	r3, [pc, #244]	; (800c3f8 <HAL_TIM_Base_MspInit+0x2bc>)
 800c302:	7cdb      	ldrb	r3, [r3, #19]
 800c304:	2b01      	cmp	r3, #1
 800c306:	f47f af48 	bne.w	800c19a <HAL_TIM_Base_MspInit+0x5e>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 800c30a:	4628      	mov	r0, r5
 800c30c:	f001 ff3a 	bl	800e184 <TIM1_LOG_ANLYS_MspInit>
 800c310:	682c      	ldr	r4, [r5, #0]
 800c312:	e73b      	b.n	800c18c <HAL_TIM_Base_MspInit+0x50>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 800c314:	4628      	mov	r0, r5
 800c316:	f001 ff83 	bl	800e220 <TIM4_LOG_ANLYS_MspInit>
 800c31a:	682b      	ldr	r3, [r5, #0]
	if(htim_base->Instance==TIM2){
 800c31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c320:	d144      	bne.n	800c3ac <HAL_TIM_Base_MspInit+0x270>
		if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800c322:	4b40      	ldr	r3, [pc, #256]	; (800c424 <HAL_TIM_Base_MspInit+0x2e8>)
 800c324:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c328:	2a01      	cmp	r2, #1
 800c32a:	d03b      	beq.n	800c3a4 <HAL_TIM_Base_MspInit+0x268>
 800c32c:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c330:	2a04      	cmp	r2, #4
 800c332:	d037      	beq.n	800c3a4 <HAL_TIM_Base_MspInit+0x268>
		}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800c334:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c338:	2a02      	cmp	r2, #2
 800c33a:	d004      	beq.n	800c346 <HAL_TIM_Base_MspInit+0x20a>
 800c33c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800c340:	2b03      	cmp	r3, #3
 800c342:	f47f af2a 	bne.w	800c19a <HAL_TIM_Base_MspInit+0x5e>
			TIM2_ICorTI_MspInit(htim_base);
 800c346:	4628      	mov	r0, r5
 800c348:	f000 fef4 	bl	800d134 <TIM2_ICorTI_MspInit>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	e02d      	b.n	800c3ac <HAL_TIM_Base_MspInit+0x270>
			__TIM7_CLK_ENABLE();
 800c350:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
			hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800c354:	4e34      	ldr	r6, [pc, #208]	; (800c428 <HAL_TIM_Base_MspInit+0x2ec>)
			__TIM7_CLK_ENABLE();
 800c356:	69da      	ldr	r2, [r3, #28]
			hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800c358:	4934      	ldr	r1, [pc, #208]	; (800c42c <HAL_TIM_Base_MspInit+0x2f0>)
			__TIM7_CLK_ENABLE();
 800c35a:	f042 0220 	orr.w	r2, r2, #32
 800c35e:	61da      	str	r2, [r3, #28]
 800c360:	69db      	ldr	r3, [r3, #28]
			hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800c362:	6031      	str	r1, [r6, #0]
			__TIM7_CLK_ENABLE();
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	9307      	str	r3, [sp, #28]
			hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c36a:	2310      	movs	r3, #16
			hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c36c:	2100      	movs	r1, #0
			hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800c36e:	2280      	movs	r2, #128	; 0x80
			hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c370:	6073      	str	r3, [r6, #4]
			hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c372:	f44f 7380 	mov.w	r3, #256	; 0x100
			__TIM7_CLK_ENABLE();
 800c376:	9807      	ldr	r0, [sp, #28]
			hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c378:	60b1      	str	r1, [r6, #8]
			hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800c37a:	60f2      	str	r2, [r6, #12]
			hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c37c:	f44f 6180 	mov.w	r1, #1024	; 0x400
			hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800c380:	2220      	movs	r2, #32
			hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c382:	6133      	str	r3, [r6, #16]
			HAL_DMA_Init(&hdma_tim7_up);
 800c384:	4630      	mov	r0, r6
			hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800c386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c38a:	e9c6 2306 	strd	r2, r3, [r6, #24]
			hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c38e:	6171      	str	r1, [r6, #20]
			HAL_DMA_Init(&hdma_tim7_up);
 800c390:	f7f9 feac 	bl	80060ec <HAL_DMA_Init>
			TIM7->DIER |= TIM_DIER_UDE;
 800c394:	68e3      	ldr	r3, [r4, #12]
 800c396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c39a:	60e3      	str	r3, [r4, #12]
 800c39c:	682c      	ldr	r4, [r5, #0]
			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800c39e:	622e      	str	r6, [r5, #32]
 800c3a0:	6275      	str	r5, [r6, #36]	; 0x24
 800c3a2:	e6ec      	b.n	800c17e <HAL_TIM_Base_MspInit+0x42>
			TIM2_ETRorREF_MspInit(htim_base);
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 fe7b 	bl	800d0a0 <TIM2_ETRorREF_MspInit>
 800c3aa:	682b      	ldr	r3, [r5, #0]
	if(htim_base->Instance==TIM4){
 800c3ac:	4a11      	ldr	r2, [pc, #68]	; (800c3f4 <HAL_TIM_Base_MspInit+0x2b8>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	f47f aef3 	bne.w	800c19a <HAL_TIM_Base_MspInit+0x5e>
 800c3b4:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <HAL_TIM_Base_MspInit+0x2bc>)
 800c3b6:	e6f8      	b.n	800c1aa <HAL_TIM_Base_MspInit+0x6e>
		TIM15_SCOPE_MspInit(htim_base);
 800c3b8:	f002 f900 	bl	800e5bc <TIM15_SCOPE_MspInit>
 800c3bc:	682c      	ldr	r4, [r5, #0]
 800c3be:	e6c6      	b.n	800c14e <HAL_TIM_Base_MspInit+0x12>
			__TIM6_CLK_ENABLE();
 800c3c0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800c3c4:	69d1      	ldr	r1, [r2, #28]
 800c3c6:	f041 0110 	orr.w	r1, r1, #16
 800c3ca:	61d1      	str	r1, [r2, #28]
 800c3cc:	69d2      	ldr	r2, [r2, #28]
 800c3ce:	f002 0210 	and.w	r2, r2, #16
 800c3d2:	9202      	str	r2, [sp, #8]
 800c3d4:	9a02      	ldr	r2, [sp, #8]
 800c3d6:	e703      	b.n	800c1e0 <HAL_TIM_Base_MspInit+0xa4>
 800c3d8:	40014000 	.word	0x40014000
 800c3dc:	20004c14 	.word	0x20004c14
 800c3e0:	40012c00 	.word	0x40012c00
 800c3e4:	40000400 	.word	0x40000400
 800c3e8:	40001000 	.word	0x40001000
 800c3ec:	40001400 	.word	0x40001400
 800c3f0:	40013400 	.word	0x40013400
 800c3f4:	40000800 	.word	0x40000800
 800c3f8:	20005418 	.word	0x20005418
 800c3fc:	40021000 	.word	0x40021000
 800c400:	2000cee8 	.word	0x2000cee8
 800c404:	2000ce20 	.word	0x2000ce20
 800c408:	48000800 	.word	0x48000800
 800c40c:	40020430 	.word	0x40020430
 800c410:	40020458 	.word	0x40020458
 800c414:	2000cfb0 	.word	0x2000cfb0
 800c418:	40020408 	.word	0x40020408
 800c41c:	2000cf6c 	.word	0x2000cf6c
 800c420:	4002041c 	.word	0x4002041c
 800c424:	20004848 	.word	0x20004848
 800c428:	2000cea4 	.word	0x2000cea4
 800c42c:	40020044 	.word	0x40020044
			__TIM6_CLK_ENABLE();
 800c430:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
			hdma_tim6_up.Instance = DMA1_Channel3;
 800c434:	4e2e      	ldr	r6, [pc, #184]	; (800c4f0 <HAL_TIM_Base_MspInit+0x3b4>)
			__TIM6_CLK_ENABLE();
 800c436:	69da      	ldr	r2, [r3, #28]
			hdma_tim6_up.Instance = DMA1_Channel3;
 800c438:	492e      	ldr	r1, [pc, #184]	; (800c4f4 <HAL_TIM_Base_MspInit+0x3b8>)
			__TIM6_CLK_ENABLE();
 800c43a:	f042 0210 	orr.w	r2, r2, #16
 800c43e:	61da      	str	r2, [r3, #28]
 800c440:	69db      	ldr	r3, [r3, #28]
			hdma_tim6_up.Instance = DMA1_Channel3;
 800c442:	6031      	str	r1, [r6, #0]
			__TIM6_CLK_ENABLE();
 800c444:	f003 0310 	and.w	r3, r3, #16
 800c448:	9306      	str	r3, [sp, #24]
			hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c44a:	2310      	movs	r3, #16
			hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c44c:	2100      	movs	r1, #0
			hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800c44e:	2280      	movs	r2, #128	; 0x80
			hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c450:	6073      	str	r3, [r6, #4]
			hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c452:	f44f 7380 	mov.w	r3, #256	; 0x100
			__TIM6_CLK_ENABLE();
 800c456:	9806      	ldr	r0, [sp, #24]
			hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c458:	60b1      	str	r1, [r6, #8]
			hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800c45a:	60f2      	str	r2, [r6, #12]
			hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c45c:	f44f 6180 	mov.w	r1, #1024	; 0x400
			hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800c460:	2220      	movs	r2, #32
			hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c462:	6133      	str	r3, [r6, #16]
			HAL_DMA_Init(&hdma_tim6_up);
 800c464:	4630      	mov	r0, r6
			hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800c466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c46a:	e9c6 2306 	strd	r2, r3, [r6, #24]
			hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c46e:	6171      	str	r1, [r6, #20]
			HAL_DMA_Init(&hdma_tim6_up);
 800c470:	f7f9 fe3c 	bl	80060ec <HAL_DMA_Init>
			TIM6->DIER |= TIM_DIER_UDE;
 800c474:	68e3      	ldr	r3, [r4, #12]
 800c476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c47a:	60e3      	str	r3, [r4, #12]
 800c47c:	682c      	ldr	r4, [r5, #0]
			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800c47e:	622e      	str	r6, [r5, #32]
 800c480:	6275      	str	r5, [r6, #36]	; 0x24
 800c482:	e678      	b.n	800c176 <HAL_TIM_Base_MspInit+0x3a>
			__TIM3_CLK_ENABLE();
 800c484:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c488:	2110      	movs	r1, #16
			__TIM3_CLK_ENABLE();
 800c48a:	69da      	ldr	r2, [r3, #28]
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c48c:	481a      	ldr	r0, [pc, #104]	; (800c4f8 <HAL_TIM_Base_MspInit+0x3bc>)
			__TIM3_CLK_ENABLE();
 800c48e:	f042 0202 	orr.w	r2, r2, #2
 800c492:	61da      	str	r2, [r3, #28]
 800c494:	69db      	ldr	r3, [r3, #28]
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c496:	9109      	str	r1, [sp, #36]	; 0x24
			__TIM3_CLK_ENABLE();
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	9305      	str	r3, [sp, #20]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49e:	2400      	movs	r4, #0
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a0:	2302      	movs	r3, #2
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c4a2:	2203      	movs	r2, #3
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4a4:	a909      	add	r1, sp, #36	; 0x24
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c4a6:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
			__TIM3_CLK_ENABLE();
 800c4aa:	9e05      	ldr	r6, [sp, #20]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4ac:	930a      	str	r3, [sp, #40]	; 0x28
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c4ae:	930d      	str	r3, [sp, #52]	; 0x34
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4b0:	f7f9 fffa 	bl	80064a8 <HAL_GPIO_Init>
 800c4b4:	682c      	ldr	r4, [r5, #0]
 800c4b6:	e65a      	b.n	800c16e <HAL_TIM_Base_MspInit+0x32>
			__TIM1_CLK_ENABLE();
 800c4b8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c4bc:	f44f 7000 	mov.w	r0, #512	; 0x200
			__TIM1_CLK_ENABLE();
 800c4c0:	6999      	ldr	r1, [r3, #24]
 800c4c2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c4c6:	6199      	str	r1, [r3, #24]
 800c4c8:	699b      	ldr	r3, [r3, #24]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ca:	920b      	str	r2, [sp, #44]	; 0x2c
			__TIM1_CLK_ENABLE();
 800c4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d0:	9304      	str	r3, [sp, #16]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4d2:	2402      	movs	r4, #2
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c4d4:	2203      	movs	r2, #3
			GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800c4d6:	2306      	movs	r3, #6
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c4d8:	9009      	str	r0, [sp, #36]	; 0x24
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4da:	a909      	add	r1, sp, #36	; 0x24
 800c4dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4e0:	940a      	str	r4, [sp, #40]	; 0x28
			__TIM1_CLK_ENABLE();
 800c4e2:	9e04      	ldr	r6, [sp, #16]
			GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800c4e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4e8:	f7f9 ffde 	bl	80064a8 <HAL_GPIO_Init>
 800c4ec:	682c      	ldr	r4, [r5, #0]
 800c4ee:	e63a      	b.n	800c166 <HAL_TIM_Base_MspInit+0x2a>
 800c4f0:	2000cff4 	.word	0x2000cff4
 800c4f4:	40020030 	.word	0x40020030
 800c4f8:	48000400 	.word	0x48000400

0800c4fc <HAL_TIM_Base_MspDeInit>:
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
#ifdef USE_SCOPE
	if(htim_base->Instance==TIM15)
 800c4fc:	4a48      	ldr	r2, [pc, #288]	; (800c620 <HAL_TIM_Base_MspDeInit+0x124>)
 800c4fe:	6803      	ldr	r3, [r0, #0]
 800c500:	4293      	cmp	r3, r2
{
 800c502:	b510      	push	{r4, lr}
 800c504:	4604      	mov	r4, r0
	if(htim_base->Instance==TIM15)
 800c506:	d075      	beq.n	800c5f4 <HAL_TIM_Base_MspDeInit+0xf8>
	}
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if(generator.modeState==GENERATOR_DAC){
 800c508:	4a46      	ldr	r2, [pc, #280]	; (800c624 <HAL_TIM_Base_MspDeInit+0x128>)
 800c50a:	7d51      	ldrb	r1, [r2, #21]
 800c50c:	2901      	cmp	r1, #1
 800c50e:	d031      	beq.n	800c574 <HAL_TIM_Base_MspDeInit+0x78>
		}
	}
#endif //USE_GEN

#ifdef USE_GEN_PWM
	if(generator.modeState==GENERATOR_PWM){
 800c510:	7d52      	ldrb	r2, [r2, #21]
 800c512:	b9da      	cbnz	r2, 800c54c <HAL_TIM_Base_MspDeInit+0x50>
		if(htim_base->Instance==TIM1){
 800c514:	4a44      	ldr	r2, [pc, #272]	; (800c628 <HAL_TIM_Base_MspDeInit+0x12c>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d061      	beq.n	800c5de <HAL_TIM_Base_MspDeInit+0xe2>
			__TIM1_CLK_DISABLE();
		}
		if(htim_base->Instance==TIM3){
 800c51a:	4a44      	ldr	r2, [pc, #272]	; (800c62c <HAL_TIM_Base_MspDeInit+0x130>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d106      	bne.n	800c52e <HAL_TIM_Base_MspDeInit+0x32>
			__TIM3_CLK_DISABLE();
 800c520:	f502 3203 	add.w	r2, r2, #134144	; 0x20c00
 800c524:	69d3      	ldr	r3, [r2, #28]
 800c526:	f023 0302 	bic.w	r3, r3, #2
 800c52a:	61d3      	str	r3, [r2, #28]

	if(htim_base->Instance==TIM4){
		TIM4_CNT_MspDeinit(htim_base);
	}
#endif //USE_COUNTER
} 
 800c52c:	bd10      	pop	{r4, pc}
		if(htim_base->Instance==TIM6){
 800c52e:	4a40      	ldr	r2, [pc, #256]	; (800c630 <HAL_TIM_Base_MspDeInit+0x134>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d108      	bne.n	800c546 <HAL_TIM_Base_MspDeInit+0x4a>
			__TIM6_CLK_DISABLE();
 800c534:	4a3f      	ldr	r2, [pc, #252]	; (800c634 <HAL_TIM_Base_MspDeInit+0x138>)
			HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800c536:	6a20      	ldr	r0, [r4, #32]
			__TIM6_CLK_DISABLE();
 800c538:	69d3      	ldr	r3, [r2, #28]
 800c53a:	f023 0310 	bic.w	r3, r3, #16
 800c53e:	61d3      	str	r3, [r2, #28]
			HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800c540:	f7f9 fe1e 	bl	8006180 <HAL_DMA_DeInit>
 800c544:	6823      	ldr	r3, [r4, #0]
		if(htim_base->Instance==TIM7){
 800c546:	4a3c      	ldr	r2, [pc, #240]	; (800c638 <HAL_TIM_Base_MspDeInit+0x13c>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d021      	beq.n	800c590 <HAL_TIM_Base_MspDeInit+0x94>
	if(htim_base->Instance==TIM8)
 800c54c:	4a3b      	ldr	r2, [pc, #236]	; (800c63c <HAL_TIM_Base_MspDeInit+0x140>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d031      	beq.n	800c5b6 <HAL_TIM_Base_MspDeInit+0xba>
	if(htim_base->Instance==TIM1){
 800c552:	4a35      	ldr	r2, [pc, #212]	; (800c628 <HAL_TIM_Base_MspDeInit+0x12c>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d048      	beq.n	800c5ea <HAL_TIM_Base_MspDeInit+0xee>
	if(htim_base->Instance==TIM4){
 800c558:	4a39      	ldr	r2, [pc, #228]	; (800c640 <HAL_TIM_Base_MspDeInit+0x144>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d022      	beq.n	800c5a4 <HAL_TIM_Base_MspDeInit+0xa8>
	if(htim_base->Instance==TIM2){
 800c55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c562:	d1e3      	bne.n	800c52c <HAL_TIM_Base_MspDeInit+0x30>
		TIM2_CNT_MspDeinit(htim_base);
 800c564:	4620      	mov	r0, r4
 800c566:	f000 fe85 	bl	800d274 <TIM2_CNT_MspDeinit>
 800c56a:	6823      	ldr	r3, [r4, #0]
	if(htim_base->Instance==TIM4){
 800c56c:	4a34      	ldr	r2, [pc, #208]	; (800c640 <HAL_TIM_Base_MspDeInit+0x144>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d01c      	beq.n	800c5ac <HAL_TIM_Base_MspDeInit+0xb0>
} 
 800c572:	bd10      	pop	{r4, pc}
		if(htim_base->Instance==TIM6){
 800c574:	492e      	ldr	r1, [pc, #184]	; (800c630 <HAL_TIM_Base_MspDeInit+0x134>)
 800c576:	428b      	cmp	r3, r1
 800c578:	d040      	beq.n	800c5fc <HAL_TIM_Base_MspDeInit+0x100>
		if(htim_base->Instance==TIM7){
 800c57a:	492f      	ldr	r1, [pc, #188]	; (800c638 <HAL_TIM_Base_MspDeInit+0x13c>)
 800c57c:	428b      	cmp	r3, r1
 800c57e:	d1c7      	bne.n	800c510 <HAL_TIM_Base_MspDeInit+0x14>
			__TIM7_CLK_DISABLE();
 800c580:	482c      	ldr	r0, [pc, #176]	; (800c634 <HAL_TIM_Base_MspDeInit+0x138>)
 800c582:	69c1      	ldr	r1, [r0, #28]
 800c584:	f021 0120 	bic.w	r1, r1, #32
 800c588:	61c1      	str	r1, [r0, #28]
	if(generator.modeState==GENERATOR_PWM){
 800c58a:	7d52      	ldrb	r2, [r2, #21]
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	d1e0      	bne.n	800c552 <HAL_TIM_Base_MspDeInit+0x56>
			__TIM7_CLK_DISABLE();
 800c590:	4a28      	ldr	r2, [pc, #160]	; (800c634 <HAL_TIM_Base_MspDeInit+0x138>)
			HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800c592:	6a20      	ldr	r0, [r4, #32]
			__TIM7_CLK_DISABLE();
 800c594:	69d3      	ldr	r3, [r2, #28]
 800c596:	f023 0320 	bic.w	r3, r3, #32
 800c59a:	61d3      	str	r3, [r2, #28]
			HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800c59c:	f7f9 fdf0 	bl	8006180 <HAL_DMA_DeInit>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	e7d3      	b.n	800c54c <HAL_TIM_Base_MspDeInit+0x50>
		if(logAnlys.enable==ENABLE){
 800c5a4:	4b27      	ldr	r3, [pc, #156]	; (800c644 <HAL_TIM_Base_MspDeInit+0x148>)
 800c5a6:	7cdb      	ldrb	r3, [r3, #19]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d030      	beq.n	800c60e <HAL_TIM_Base_MspDeInit+0x112>
		TIM4_CNT_MspDeinit(htim_base);
 800c5ac:	4620      	mov	r0, r4
} 
 800c5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		TIM4_CNT_MspDeinit(htim_base);
 800c5b2:	f000 bea5 	b.w	800d300 <TIM4_CNT_MspDeinit>
		__HAL_RCC_TIM8_CLK_DISABLE();
 800c5b6:	f502 425c 	add.w	r2, r2, #56320	; 0xdc00
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800c5ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
		__HAL_RCC_TIM8_CLK_DISABLE();
 800c5bc:	6993      	ldr	r3, [r2, #24]
 800c5be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5c2:	6193      	str	r3, [r2, #24]
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800c5c4:	f7f9 fddc 	bl	8006180 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800c5c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c5ca:	f7f9 fdd9 	bl	8006180 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 800c5ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c5d0:	f7f9 fdd6 	bl	8006180 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 800c5d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c5d6:	f7f9 fdd3 	bl	8006180 <HAL_DMA_DeInit>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	e7b9      	b.n	800c552 <HAL_TIM_Base_MspDeInit+0x56>
			__TIM1_CLK_DISABLE();
 800c5de:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 800c5e2:	6993      	ldr	r3, [r2, #24]
 800c5e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5e8:	6193      	str	r3, [r2, #24]
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f001 fe4e 	bl	800e28c <TIM1_LOG_ANLYS_MspDeinit>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	e7b1      	b.n	800c558 <HAL_TIM_Base_MspDeInit+0x5c>
		TIM15_SCOPE_MspDeinit(htim_base);
 800c5f4:	f001 fff2 	bl	800e5dc <TIM15_SCOPE_MspDeinit>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	e785      	b.n	800c508 <HAL_TIM_Base_MspDeInit+0xc>
			__TIM6_CLK_DISABLE();
 800c5fc:	480d      	ldr	r0, [pc, #52]	; (800c634 <HAL_TIM_Base_MspDeInit+0x138>)
 800c5fe:	69c1      	ldr	r1, [r0, #28]
 800c600:	f021 0110 	bic.w	r1, r1, #16
 800c604:	61c1      	str	r1, [r0, #28]
	if(generator.modeState==GENERATOR_PWM){
 800c606:	7d52      	ldrb	r2, [r2, #21]
 800c608:	2a00      	cmp	r2, #0
 800c60a:	d1a2      	bne.n	800c552 <HAL_TIM_Base_MspDeInit+0x56>
 800c60c:	e792      	b.n	800c534 <HAL_TIM_Base_MspDeInit+0x38>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 800c60e:	4620      	mov	r0, r4
 800c610:	f001 fe28 	bl	800e264 <TIM4_LOG_ANLYS_MspDeinit>
	if(htim_base->Instance==TIM2){
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c61a:	d1a7      	bne.n	800c56c <HAL_TIM_Base_MspDeInit+0x70>
 800c61c:	e7a2      	b.n	800c564 <HAL_TIM_Base_MspDeInit+0x68>
 800c61e:	bf00      	nop
 800c620:	40014000 	.word	0x40014000
 800c624:	20004c14 	.word	0x20004c14
 800c628:	40012c00 	.word	0x40012c00
 800c62c:	40000400 	.word	0x40000400
 800c630:	40001000 	.word	0x40001000
 800c634:	40021000 	.word	0x40021000
 800c638:	40001400 	.word	0x40001400
 800c63c:	40013400 	.word	0x40013400
 800c640:	40000800 	.word	0x40000800
 800c644:	20005418 	.word	0x20005418

0800c648 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 800c648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c64c:	4614      	mov	r4, r2
 800c64e:	4680      	mov	r8, r0
 800c650:	460d      	mov	r5, r1
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800c652:	f7fa fcb3 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 800c656:	0042      	lsls	r2, r0, #1
	if(chan==0){
 800c658:	b12d      	cbz	r5, 800c666 <TIM_Reconfig_gen+0x1e>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
	}else if(chan==1){
 800c65a:	2d01      	cmp	r5, #1
 800c65c:	d041      	beq.n	800c6e2 <TIM_Reconfig_gen+0x9a>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
	}else{
		return 0;
 800c65e:	2500      	movs	r5, #0
	}
}
 800c660:	4628      	mov	r0, r5
 800c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	uint8_t result = UNKNOW_ERROR;

	if (isFreqPassed == true) {
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800c666:	0083      	lsls	r3, r0, #2
 800c668:	fbb3 f3f8 	udiv	r3, r3, r8
 800c66c:	3301      	adds	r3, #1
	} else {
		clkDiv = samplingFreq;
	}

	if (clkDiv == 0) { //error
 800c66e:	085b      	lsrs	r3, r3, #1
 800c670:	d055      	beq.n	800c71e <TIM_Reconfig_gen+0xd6>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800c672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c676:	d32f      	bcc.n	800c6d8 <TIM_Reconfig_gen+0x90>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800c678:	141e      	asrs	r6, r3, #16
 800c67a:	3601      	adds	r6, #1
		uint32_t errMin = 0xFFFFFFFF;
 800c67c:	f04f 3eff 	mov.w	lr, #4294967295
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c680:	f64f 78ff 	movw	r8, #65535	; 0xffff
			div = clkDiv / ratio;
 800c684:	fb93 f7f6 	sdiv	r7, r3, r6
			errVal = clkDiv - (div * ratio);
 800c688:	b2b8      	uxth	r0, r7
 800c68a:	fb06 3010 	mls	r0, r6, r0, r3
			if (errVal < errMin) {
 800c68e:	4570      	cmp	r0, lr
			ratio++;
 800c690:	fa1f fc86 	uxth.w	ip, r6
			if (errVal < errMin) {
 800c694:	bf3c      	itt	cc
 800c696:	4686      	movcc	lr, r0
				errMinRatio = ratio;
 800c698:	4635      	movcc	r5, r6
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c69a:	45c4      	cmp	ip, r8
 800c69c:	d072      	beq.n	800c784 <TIM_Reconfig_gen+0x13c>
 800c69e:	3601      	adds	r6, #1
		while (errVal != 0) {
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d1ef      	bne.n	800c684 <TIM_Reconfig_gen+0x3c>
			div = clkDiv / ratio;
 800c6a4:	b2bf      	uxth	r7, r7
 800c6a6:	1e7b      	subs	r3, r7, #1
 800c6a8:	f10c 36ff 	add.w	r6, ip, #4294967295
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800c6ac:	45bc      	cmp	ip, r7
 800c6ae:	b299      	uxth	r1, r3
 800c6b0:	b2b6      	uxth	r6, r6
 800c6b2:	d961      	bls.n	800c778 <TIM_Reconfig_gen+0x130>
 800c6b4:	460f      	mov	r7, r1
		}

		if (errVal) {
			result = GEN_FREQ_IS_INACCURATE;
		} else {
			result = 0;
 800c6b6:	2500      	movs	r5, #0
		}
	}

	if (realFreq != 0) {
 800c6b8:	b12c      	cbz	r4, 800c6c6 <TIM_Reconfig_gen+0x7e>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800c6ba:	1c73      	adds	r3, r6, #1
 800c6bc:	fb01 3303 	mla	r3, r1, r3, r3
 800c6c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6c4:	6022      	str	r2, [r4, #0]
		//			autoReloadReg++;
		//			*realFreq=HAL_RCC_GetPCLK2Freq()/((prescaler+1)*(autoReloadReg+1));
		//		}
	}

	htim_base->Init.Period = autoReloadReg;
 800c6c6:	4b43      	ldr	r3, [pc, #268]	; (800c7d4 <TIM_Reconfig_gen+0x18c>)
	htim_base->Init.Prescaler = prescaler;
	HAL_TIM_Base_Init(htim_base);
 800c6c8:	4618      	mov	r0, r3
	htim_base->Init.Period = autoReloadReg;
 800c6ca:	60de      	str	r6, [r3, #12]
	htim_base->Init.Prescaler = prescaler;
 800c6cc:	605f      	str	r7, [r3, #4]
	HAL_TIM_Base_Init(htim_base);
 800c6ce:	f7fa ffbd 	bl	800764c <HAL_TIM_Base_Init>
}
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		autoReloadReg = clkDiv - 1;
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	b29e      	uxth	r6, r3
 800c6dc:	462f      	mov	r7, r5
		prescaler = 0;
 800c6de:	4629      	mov	r1, r5
 800c6e0:	e7ea      	b.n	800c6b8 <TIM_Reconfig_gen+0x70>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800c6e2:	0083      	lsls	r3, r0, #2
 800c6e4:	fbb3 f3f8 	udiv	r3, r3, r8
 800c6e8:	3301      	adds	r3, #1
	if (clkDiv == 0) { //error
 800c6ea:	085b      	lsrs	r3, r3, #1
 800c6ec:	d040      	beq.n	800c770 <TIM_Reconfig_gen+0x128>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800c6ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6f2:	d218      	bcs.n	800c726 <TIM_Reconfig_gen+0xde>
		autoReloadReg = clkDiv - 1;
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	b29f      	uxth	r7, r3
		result = 0;
 800c6fa:	460d      	mov	r5, r1
		prescaler = 0;
 800c6fc:	4608      	mov	r0, r1
	if (realFreq != 0) {
 800c6fe:	b12c      	cbz	r4, 800c70c <TIM_Reconfig_gen+0xc4>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800c700:	1c7b      	adds	r3, r7, #1
 800c702:	fb00 3303 	mla	r3, r0, r3, r3
 800c706:	fbb2 f2f3 	udiv	r2, r2, r3
 800c70a:	6022      	str	r2, [r4, #0]
	htim_base->Init.Period = autoReloadReg;
 800c70c:	4b32      	ldr	r3, [pc, #200]	; (800c7d8 <TIM_Reconfig_gen+0x190>)
	HAL_TIM_Base_Init(htim_base);
 800c70e:	4618      	mov	r0, r3
	htim_base->Init.Period = autoReloadReg;
 800c710:	60df      	str	r7, [r3, #12]
	htim_base->Init.Prescaler = prescaler;
 800c712:	6059      	str	r1, [r3, #4]
	HAL_TIM_Base_Init(htim_base);
 800c714:	f7fa ff9a 	bl	800764c <HAL_TIM_Base_Init>
}
 800c718:	4628      	mov	r0, r5
 800c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71e:	2100      	movs	r1, #0
 800c720:	460f      	mov	r7, r1
		result = GEN_FREQ_MISMATCH;
 800c722:	256c      	movs	r5, #108	; 0x6c
 800c724:	e7c8      	b.n	800c6b8 <TIM_Reconfig_gen+0x70>
		uint16_t ratio = clkDiv >> 16;
 800c726:	141e      	asrs	r6, r3, #16
 800c728:	3601      	adds	r6, #1
	uint32_t errMinRatio = 0;
 800c72a:	f04f 0c00 	mov.w	ip, #0
		uint32_t errMin = 0xFFFFFFFF;
 800c72e:	f04f 31ff 	mov.w	r1, #4294967295
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c732:	f64f 70ff 	movw	r0, #65535	; 0xffff
			div = clkDiv / ratio;
 800c736:	fb93 f7f6 	sdiv	r7, r3, r6
			errVal = clkDiv - (div * ratio);
 800c73a:	b2bd      	uxth	r5, r7
 800c73c:	fb06 3515 	mls	r5, r6, r5, r3
			if (errVal < errMin) {
 800c740:	428d      	cmp	r5, r1
			ratio++;
 800c742:	fa1f fe86 	uxth.w	lr, r6
			if (errVal < errMin) {
 800c746:	bf3c      	itt	cc
 800c748:	4629      	movcc	r1, r5
				errMinRatio = ratio;
 800c74a:	46b4      	movcc	ip, r6
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c74c:	4586      	cmp	lr, r0
 800c74e:	d02b      	beq.n	800c7a8 <TIM_Reconfig_gen+0x160>
 800c750:	3601      	adds	r6, #1
		while (errVal != 0) {
 800c752:	2d00      	cmp	r5, #0
 800c754:	d1ef      	bne.n	800c736 <TIM_Reconfig_gen+0xee>
			div = clkDiv / ratio;
 800c756:	b2b9      	uxth	r1, r7
 800c758:	1e4f      	subs	r7, r1, #1
 800c75a:	f10e 33ff 	add.w	r3, lr, #4294967295
		if (ratio > div) {
 800c75e:	458e      	cmp	lr, r1
 800c760:	b2bf      	uxth	r7, r7
 800c762:	b298      	uxth	r0, r3
 800c764:	d933      	bls.n	800c7ce <TIM_Reconfig_gen+0x186>
 800c766:	4603      	mov	r3, r0
 800c768:	4639      	mov	r1, r7
 800c76a:	4638      	mov	r0, r7
 800c76c:	461f      	mov	r7, r3
 800c76e:	e7c6      	b.n	800c6fe <TIM_Reconfig_gen+0xb6>
 800c770:	2000      	movs	r0, #0
 800c772:	4601      	mov	r1, r0
		result = GEN_FREQ_MISMATCH;
 800c774:	256c      	movs	r5, #108	; 0x6c
 800c776:	e7c2      	b.n	800c6fe <TIM_Reconfig_gen+0xb6>
		if (ratio > div) {
 800c778:	460b      	mov	r3, r1
 800c77a:	4637      	mov	r7, r6
 800c77c:	4631      	mov	r1, r6
			result = 0;
 800c77e:	4605      	mov	r5, r0
		if (ratio > div) {
 800c780:	461e      	mov	r6, r3
 800c782:	e799      	b.n	800c6b8 <TIM_Reconfig_gen+0x70>
				div = clkDiv / errMinRatio;
 800c784:	fbb3 f3f5 	udiv	r3, r3, r5
				ratio = errMinRatio;
 800c788:	b2ad      	uxth	r5, r5
				div = clkDiv / errMinRatio;
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	1e59      	subs	r1, r3, #1
 800c78e:	1e6e      	subs	r6, r5, #1
		if (ratio > div) {
 800c790:	42ab      	cmp	r3, r5
 800c792:	b289      	uxth	r1, r1
 800c794:	b2b6      	uxth	r6, r6
 800c796:	d302      	bcc.n	800c79e <TIM_Reconfig_gen+0x156>
 800c798:	460b      	mov	r3, r1
 800c79a:	4631      	mov	r1, r6
 800c79c:	461e      	mov	r6, r3
 800c79e:	460f      	mov	r7, r1
			result = GEN_FREQ_IS_INACCURATE;
 800c7a0:	256b      	movs	r5, #107	; 0x6b
		if (errVal) {
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d188      	bne.n	800c6b8 <TIM_Reconfig_gen+0x70>
 800c7a6:	e786      	b.n	800c6b6 <TIM_Reconfig_gen+0x6e>
				div = clkDiv / errMinRatio;
 800c7a8:	fbb3 f3fc 	udiv	r3, r3, ip
				ratio = errMinRatio;
 800c7ac:	fa1f fc8c 	uxth.w	ip, ip
				div = clkDiv / errMinRatio;
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	1e58      	subs	r0, r3, #1
 800c7b4:	f10c 37ff 	add.w	r7, ip, #4294967295
		if (ratio > div) {
 800c7b8:	4563      	cmp	r3, ip
 800c7ba:	b280      	uxth	r0, r0
 800c7bc:	b2bf      	uxth	r7, r7
 800c7be:	d302      	bcc.n	800c7c6 <TIM_Reconfig_gen+0x17e>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	461f      	mov	r7, r3
 800c7c6:	4601      	mov	r1, r0
		if (errVal) {
 800c7c8:	b115      	cbz	r5, 800c7d0 <TIM_Reconfig_gen+0x188>
			result = GEN_FREQ_IS_INACCURATE;
 800c7ca:	256b      	movs	r5, #107	; 0x6b
 800c7cc:	e797      	b.n	800c6fe <TIM_Reconfig_gen+0xb6>
 800c7ce:	4601      	mov	r1, r0
			result = 0;
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	e794      	b.n	800c6fe <TIM_Reconfig_gen+0xb6>
 800c7d4:	2000d038 	.word	0x2000d038
 800c7d8:	2000d0b8 	.word	0x2000d0b8

0800c7dc <TIMGenEnable>:
void TIMGenEnable(void){
 800c7dc:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start(&htim6);
 800c7de:	4804      	ldr	r0, [pc, #16]	; (800c7f0 <TIMGenEnable+0x14>)
 800c7e0:	f7fa ffec 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 800c7e4:	4803      	ldr	r0, [pc, #12]	; (800c7f4 <TIMGenEnable+0x18>)
}
 800c7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim7);
 800c7ea:	f7fa bfe7 	b.w	80077bc <HAL_TIM_Base_Start>
 800c7ee:	bf00      	nop
 800c7f0:	2000d038 	.word	0x2000d038
 800c7f4:	2000d0b8 	.word	0x2000d0b8

0800c7f8 <TIMGenDisable>:
void TIMGenDisable(void){
 800c7f8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 800c7fa:	4804      	ldr	r0, [pc, #16]	; (800c80c <TIMGenDisable+0x14>)
 800c7fc:	f7fa ffee 	bl	80077dc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800c800:	4803      	ldr	r0, [pc, #12]	; (800c810 <TIMGenDisable+0x18>)
}
 800c802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim7);
 800c806:	f7fa bfe9 	b.w	80077dc <HAL_TIM_Base_Stop>
 800c80a:	bf00      	nop
 800c80c:	2000d038 	.word	0x2000d038
 800c810:	2000d0b8 	.word	0x2000d0b8

0800c814 <TIMGenInit>:
void TIMGenInit(void){
 800c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	htim6.Instance = TIM6;
 800c818:	4e15      	ldr	r6, [pc, #84]	; (800c870 <TIMGenInit+0x5c>)
	htim7.Instance = TIM7;
 800c81a:	4d16      	ldr	r5, [pc, #88]	; (800c874 <TIMGenInit+0x60>)
void TIMGenInit(void){
 800c81c:	b084      	sub	sp, #16
	MX_DAC_Init();
 800c81e:	f7ff f80d 	bl	800b83c <MX_DAC_Init>
	htim6.Init.Prescaler = 0;
 800c822:	2400      	movs	r4, #0
	htim6.Instance = TIM6;
 800c824:	4b14      	ldr	r3, [pc, #80]	; (800c878 <TIMGenInit+0x64>)
 800c826:	6033      	str	r3, [r6, #0]
	htim6.Init.Period = 0x7FF;
 800c828:	f240 78ff 	movw	r8, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800c82c:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c82e:	2720      	movs	r7, #32
	htim6.Init.Period = 0x7FF;
 800c830:	f8c6 800c 	str.w	r8, [r6, #12]
	htim6.Init.Prescaler = 0;
 800c834:	6074      	str	r4, [r6, #4]
	htim6.Init.ClockDivision = 0;
 800c836:	6134      	str	r4, [r6, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c838:	60b4      	str	r4, [r6, #8]
	HAL_TIM_Base_Init(&htim6);
 800c83a:	f7fa ff07 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800c83e:	a901      	add	r1, sp, #4
 800c840:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c842:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c844:	9701      	str	r7, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800c846:	f7fb fffb 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	htim7.Instance = TIM7;
 800c84a:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <TIMGenInit+0x68>)
 800c84c:	602b      	str	r3, [r5, #0]
	HAL_TIM_Base_Init(&htim7);
 800c84e:	4628      	mov	r0, r5
	htim7.Init.Period = 0x7FF;
 800c850:	f8c5 800c 	str.w	r8, [r5, #12]
	htim7.Init.Prescaler = 0;
 800c854:	606c      	str	r4, [r5, #4]
	htim7.Init.ClockDivision = 0;
 800c856:	612c      	str	r4, [r5, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c858:	60ac      	str	r4, [r5, #8]
	HAL_TIM_Base_Init(&htim7);
 800c85a:	f7fa fef7 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800c85e:	a901      	add	r1, sp, #4
 800c860:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c862:	9701      	str	r7, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c864:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800c866:	f7fb ffeb 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800c86a:	b004      	add	sp, #16
 800c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c870:	2000d038 	.word	0x2000d038
 800c874:	2000d0b8 	.word	0x2000d0b8
 800c878:	40001000 	.word	0x40001000
 800c87c:	40001400 	.word	0x40001400

0800c880 <TIMGenDacDeinit>:
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST;
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <TIMGenDacDeinit+0x34>)
 800c882:	691a      	ldr	r2, [r3, #16]
 800c884:	f042 0210 	orr.w	r2, r2, #16
 800c888:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;	
 800c88a:	691a      	ldr	r2, [r3, #16]
 800c88c:	f022 0210 	bic.w	r2, r2, #16
 800c890:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM7RST;
 800c892:	691a      	ldr	r2, [r3, #16]
 800c894:	f042 0220 	orr.w	r2, r2, #32
 800c898:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM7RST;	
 800c89a:	691a      	ldr	r2, [r3, #16]
 800c89c:	f022 0220 	bic.w	r2, r2, #32
 800c8a0:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR |= RCC_APB1RSTR_DAC1RST;
 800c8a2:	691a      	ldr	r2, [r3, #16]
 800c8a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c8a8:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DAC1RST;		
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800c8b0:	611a      	str	r2, [r3, #16]
}
 800c8b2:	4770      	bx	lr
 800c8b4:	40021000 	.word	0x40021000

0800c8b8 <TIM_DMA_Reconfig>:
void TIM_DMA_Reconfig(uint8_t chan){	
 800c8b8:	b510      	push	{r4, lr}
	if(chan==0){
 800c8ba:	b110      	cbz	r0, 800c8c2 <TIM_DMA_Reconfig+0xa>
	}else if(chan==1){
 800c8bc:	2801      	cmp	r0, #1
 800c8be:	d00c      	beq.n	800c8da <TIM_DMA_Reconfig+0x22>
}
 800c8c0:	bd10      	pop	{r4, pc}
		HAL_DMA_Abort(&hdma_tim6_up);	
 800c8c2:	480c      	ldr	r0, [pc, #48]	; (800c8f4 <TIM_DMA_Reconfig+0x3c>)
 800c8c4:	f7f9 fd0c 	bl	80062e0 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(TIM1->CCR2), generator.oneChanSamples[0]);
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <TIM_DMA_Reconfig+0x40>)
 800c8ca:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <TIM_DMA_Reconfig+0x44>)
 800c8cc:	6999      	ldr	r1, [r3, #24]
 800c8ce:	4809      	ldr	r0, [pc, #36]	; (800c8f4 <TIM_DMA_Reconfig+0x3c>)
 800c8d0:	8c1b      	ldrh	r3, [r3, #32]
}
 800c8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(TIM1->CCR2), generator.oneChanSamples[0]);
 800c8d6:	f7f9 bc91 	b.w	80061fc <HAL_DMA_Start>
		HAL_DMA_Abort(&hdma_tim7_up);
 800c8da:	4809      	ldr	r0, [pc, #36]	; (800c900 <TIM_DMA_Reconfig+0x48>)
 800c8dc:	f7f9 fd00 	bl	80062e0 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(TIM3->CCR1), generator.oneChanSamples[1]);
 800c8e0:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <TIM_DMA_Reconfig+0x40>)
 800c8e2:	4a08      	ldr	r2, [pc, #32]	; (800c904 <TIM_DMA_Reconfig+0x4c>)
 800c8e4:	69d9      	ldr	r1, [r3, #28]
 800c8e6:	4806      	ldr	r0, [pc, #24]	; (800c900 <TIM_DMA_Reconfig+0x48>)
 800c8e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
}
 800c8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(TIM3->CCR1), generator.oneChanSamples[1]);
 800c8ee:	f7f9 bc85 	b.w	80061fc <HAL_DMA_Start>
 800c8f2:	bf00      	nop
 800c8f4:	2000cff4 	.word	0x2000cff4
 800c8f8:	20004c14 	.word	0x20004c14
 800c8fc:	40012c38 	.word	0x40012c38
 800c900:	2000cea4 	.word	0x2000cea4
 800c904:	40000434 	.word	0x40000434

0800c908 <PWMGeneratingEnable>:
void PWMGeneratingEnable(void){
 800c908:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){	
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <PWMGeneratingEnable+0x64>)
 800c90c:	7d9a      	ldrb	r2, [r3, #22]
 800c90e:	2a01      	cmp	r2, #1
 800c910:	d01d      	beq.n	800c94e <PWMGeneratingEnable+0x46>
	}else if(generator.numOfChannles>1){	
 800c912:	7d9b      	ldrb	r3, [r3, #22]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d919      	bls.n	800c94c <PWMGeneratingEnable+0x44>
		TIM6->DIER |= TIM_DIER_UDE;			
 800c918:	4a15      	ldr	r2, [pc, #84]	; (800c970 <PWMGeneratingEnable+0x68>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c91a:	4816      	ldr	r0, [pc, #88]	; (800c974 <PWMGeneratingEnable+0x6c>)
		TIM6->DIER |= TIM_DIER_UDE;			
 800c91c:	68d3      	ldr	r3, [r2, #12]
 800c91e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c922:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c924:	2104      	movs	r1, #4
 800c926:	f7fb f8cb 	bl	8007ac0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);	
 800c92a:	4813      	ldr	r0, [pc, #76]	; (800c978 <PWMGeneratingEnable+0x70>)
 800c92c:	f7fa ff46 	bl	80077bc <HAL_TIM_Base_Start>
		TIM7->DIER |= TIM_DIER_UDE;			
 800c930:	4a12      	ldr	r2, [pc, #72]	; (800c97c <PWMGeneratingEnable+0x74>)
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		
 800c932:	4813      	ldr	r0, [pc, #76]	; (800c980 <PWMGeneratingEnable+0x78>)
		TIM7->DIER |= TIM_DIER_UDE;			
 800c934:	68d3      	ldr	r3, [r2, #12]
 800c936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c93a:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		
 800c93c:	2100      	movs	r1, #0
 800c93e:	f7fb f8bf 	bl	8007ac0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);			
 800c942:	4810      	ldr	r0, [pc, #64]	; (800c984 <PWMGeneratingEnable+0x7c>)
}
 800c944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Start(&htim7);			
 800c948:	f7fa bf38 	b.w	80077bc <HAL_TIM_Base_Start>
}
 800c94c:	bd08      	pop	{r3, pc}
		TIM6->DIER |= TIM_DIER_UDE;			
 800c94e:	4a08      	ldr	r2, [pc, #32]	; (800c970 <PWMGeneratingEnable+0x68>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c950:	4808      	ldr	r0, [pc, #32]	; (800c974 <PWMGeneratingEnable+0x6c>)
		TIM6->DIER |= TIM_DIER_UDE;			
 800c952:	68d3      	ldr	r3, [r2, #12]
 800c954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c958:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c95a:	2104      	movs	r1, #4
 800c95c:	f7fb f8b0 	bl	8007ac0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);				
 800c960:	4805      	ldr	r0, [pc, #20]	; (800c978 <PWMGeneratingEnable+0x70>)
}
 800c962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Start(&htim6);				
 800c966:	f7fa bf29 	b.w	80077bc <HAL_TIM_Base_Start>
 800c96a:	bf00      	nop
 800c96c:	20004c14 	.word	0x20004c14
 800c970:	40001000 	.word	0x40001000
 800c974:	2000d078 	.word	0x2000d078
 800c978:	2000d038 	.word	0x2000d038
 800c97c:	40001400 	.word	0x40001400
 800c980:	2000cf2c 	.word	0x2000cf2c
 800c984:	2000d0b8 	.word	0x2000d0b8

0800c988 <PWMGeneratingDisable>:
void PWMGeneratingDisable(void){
 800c988:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){				
 800c98a:	4b10      	ldr	r3, [pc, #64]	; (800c9cc <PWMGeneratingDisable+0x44>)
 800c98c:	7d9a      	ldrb	r2, [r3, #22]
 800c98e:	2a01      	cmp	r2, #1
 800c990:	d013      	beq.n	800c9ba <PWMGeneratingDisable+0x32>
	}else if(generator.numOfChannles>1){				
 800c992:	7d9b      	ldrb	r3, [r3, #22]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d90f      	bls.n	800c9b8 <PWMGeneratingDisable+0x30>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c998:	2104      	movs	r1, #4
 800c99a:	480d      	ldr	r0, [pc, #52]	; (800c9d0 <PWMGeneratingDisable+0x48>)
 800c99c:	f7fb f8c2 	bl	8007b24 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);						
 800c9a0:	480c      	ldr	r0, [pc, #48]	; (800c9d4 <PWMGeneratingDisable+0x4c>)
 800c9a2:	f7fa ff1b 	bl	80077dc <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);		
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	480b      	ldr	r0, [pc, #44]	; (800c9d8 <PWMGeneratingDisable+0x50>)
 800c9aa:	f7fb f8bb 	bl	8007b24 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);			
 800c9ae:	480b      	ldr	r0, [pc, #44]	; (800c9dc <PWMGeneratingDisable+0x54>)
}
 800c9b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim7);			
 800c9b4:	f7fa bf12 	b.w	80077dc <HAL_TIM_Base_Stop>
}
 800c9b8:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c9ba:	2104      	movs	r1, #4
 800c9bc:	4804      	ldr	r0, [pc, #16]	; (800c9d0 <PWMGeneratingDisable+0x48>)
 800c9be:	f7fb f8b1 	bl	8007b24 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);		
 800c9c2:	4804      	ldr	r0, [pc, #16]	; (800c9d4 <PWMGeneratingDisable+0x4c>)
}
 800c9c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim6);		
 800c9c8:	f7fa bf08 	b.w	80077dc <HAL_TIM_Base_Stop>
 800c9cc:	20004c14 	.word	0x20004c14
 800c9d0:	2000d078 	.word	0x2000d078
 800c9d4:	2000d038 	.word	0x2000d038
 800c9d8:	2000cf2c 	.word	0x2000cf2c
 800c9dc:	2000d0b8 	.word	0x2000d0b8

0800c9e0 <TIMGenPwmInit>:
void TIMGenPwmInit(void){
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	htim1.Instance = TIM1;
 800c9e4:	4d53      	ldr	r5, [pc, #332]	; (800cb34 <TIMGenPwmInit+0x154>)
 800c9e6:	4b54      	ldr	r3, [pc, #336]	; (800cb38 <TIMGenPwmInit+0x158>)
 800c9e8:	602b      	str	r3, [r5, #0]
void TIMGenPwmInit(void){
 800c9ea:	b09b      	sub	sp, #108	; 0x6c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9ec:	ae1a      	add	r6, sp, #104	; 0x68
	htim1.Init.Prescaler = 0;
 800c9ee:	2400      	movs	r4, #0
	htim1.Init.Period = 1023;
 800c9f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c9f4:	f04f 0b80 	mov.w	fp, #128	; 0x80
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9f8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	HAL_TIM_Base_Init(&htim1);
 800c9fc:	4628      	mov	r0, r5
	htim1.Init.Period = 1023;
 800c9fe:	60eb      	str	r3, [r5, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca00:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 800ca04:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ca08:	f8c5 b018 	str.w	fp, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 800ca0c:	f7fa fe1e 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ca10:	f846 ad58 	str.w	sl, [r6, #-88]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800ca14:	4628      	mov	r0, r5
 800ca16:	4631      	mov	r1, r6
 800ca18:	f7fb fad4 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f7fa ffb5 	bl	800798c <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800ca22:	a901      	add	r1, sp, #4
 800ca24:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca26:	f04f 0960 	mov.w	r9, #96	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ca2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca2e:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800ca30:	f7fb ff06 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ca34:	a908      	add	r1, sp, #32
	sConfigOC.Pulse = 512;
 800ca36:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	2204      	movs	r2, #4
	htim6.Instance = TIM6;
 800ca3e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800cb50 <TIMGenPwmInit+0x170>
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ca42:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.Pulse = 512;
 800ca44:	e9cd 9308 	strd	r9, r3, [sp, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ca48:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ca4c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ca50:	f7fb fde0 	bl	8008614 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800ca54:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ca5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800ca5e:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca60:	9314      	str	r3, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ca62:	9217      	str	r2, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca64:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800ca68:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca6c:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800ca6e:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ca72:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800ca76:	f7fb ff0f 	bl	8008898 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_Base_MspInit(&htim1);
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f7ff fb5e 	bl	800c13c <HAL_TIM_Base_MspInit>
	htim3.Instance = TIM3;
 800ca80:	4d2e      	ldr	r5, [pc, #184]	; (800cb3c <TIMGenPwmInit+0x15c>)
	htim6.Instance = TIM6;
 800ca82:	4a2f      	ldr	r2, [pc, #188]	; (800cb40 <TIMGenPwmInit+0x160>)
 800ca84:	f8c8 2000 	str.w	r2, [r8]
	htim6.Init.Period = 0x7FF;
 800ca88:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800ca8c:	4640      	mov	r0, r8
	htim6.Init.Period = 0x7FF;
 800ca8e:	f8c8 300c 	str.w	r3, [r8, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ca92:	2720      	movs	r7, #32
	htim6.Init.Prescaler = 0;
 800ca94:	f8c8 4004 	str.w	r4, [r8, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca98:	f8c8 4008 	str.w	r4, [r8, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca9c:	f8c8 4018 	str.w	r4, [r8, #24]
	HAL_TIM_Base_Init(&htim6);
 800caa0:	f7fa fdd4 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800caa4:	a90f      	add	r1, sp, #60	; 0x3c
 800caa6:	4640      	mov	r0, r8
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800caa8:	9411      	str	r4, [sp, #68]	; 0x44
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800caaa:	970f      	str	r7, [sp, #60]	; 0x3c
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800caac:	f7fb fec8 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	htim3.Instance = TIM3;
 800cab0:	4a24      	ldr	r2, [pc, #144]	; (800cb44 <TIMGenPwmInit+0x164>)
 800cab2:	602a      	str	r2, [r5, #0]
	htim3.Init.Period = 511;
 800cab4:	f240 13ff 	movw	r3, #511	; 0x1ff
	HAL_TIM_Base_Init(&htim3);
 800cab8:	4628      	mov	r0, r5
	htim3.Init.Period = 511;
 800caba:	60eb      	str	r3, [r5, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cabc:	f8c5 b018 	str.w	fp, [r5, #24]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cac0:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cac4:	612c      	str	r4, [r5, #16]
	HAL_TIM_Base_Init(&htim3);
 800cac6:	f7fa fdc1 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800caca:	eb0d 0107 	add.w	r1, sp, r7
 800cace:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cad0:	f8cd a020 	str.w	sl, [sp, #32]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800cad4:	f7fb fa76 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800cad8:	4628      	mov	r0, r5
 800cada:	f7fa ff57 	bl	800798c <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800cade:	4631      	mov	r1, r6
 800cae0:	4628      	mov	r0, r5
	htim7.Instance = TIM7;
 800cae2:	4e19      	ldr	r6, [pc, #100]	; (800cb48 <TIMGenPwmInit+0x168>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cae4:	9404      	str	r4, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cae6:	9406      	str	r4, [sp, #24]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800cae8:	f7fb feaa 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800caec:	a90f      	add	r1, sp, #60	; 0x3c
 800caee:	4622      	mov	r2, r4
	sConfigOC.Pulse = 256;
 800caf0:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800caf4:	4628      	mov	r0, r5
	sConfigOC.Pulse = 256;
 800caf6:	9310      	str	r3, [sp, #64]	; 0x40
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800caf8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cafc:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cafe:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800cb00:	f7fb fd88 	bl	8008614 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_MspInit(&htim3);
 800cb04:	4628      	mov	r0, r5
 800cb06:	f7ff fb19 	bl	800c13c <HAL_TIM_Base_MspInit>
	htim7.Instance = TIM7;
 800cb0a:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <TIMGenPwmInit+0x16c>)
 800cb0c:	6033      	str	r3, [r6, #0]
	htim7.Init.Period = 0x7FF;
 800cb0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim7);
 800cb12:	4630      	mov	r0, r6
	htim7.Init.Period = 0x7FF;
 800cb14:	60f2      	str	r2, [r6, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb16:	e9c6 4401 	strd	r4, r4, [r6, #4]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb1a:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim7);
 800cb1c:	f7fa fd96 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800cb20:	a90f      	add	r1, sp, #60	; 0x3c
 800cb22:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800cb24:	970f      	str	r7, [sp, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb26:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800cb28:	f7fb fe8a 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800cb2c:	b01b      	add	sp, #108	; 0x6c
 800cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb32:	bf00      	nop
 800cb34:	2000d078 	.word	0x2000d078
 800cb38:	40012c00 	.word	0x40012c00
 800cb3c:	2000cf2c 	.word	0x2000cf2c
 800cb40:	40001000 	.word	0x40001000
 800cb44:	40000400 	.word	0x40000400
 800cb48:	2000d0b8 	.word	0x2000d0b8
 800cb4c:	40001400 	.word	0x40001400
 800cb50:	2000d038 	.word	0x2000d038

0800cb54 <TIMGenPwmDeinit>:
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST;
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <TIMGenPwmDeinit+0x44>)
 800cb56:	691a      	ldr	r2, [r3, #16]
 800cb58:	f042 0210 	orr.w	r2, r2, #16
 800cb5c:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;	
 800cb5e:	691a      	ldr	r2, [r3, #16]
 800cb60:	f022 0210 	bic.w	r2, r2, #16
 800cb64:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM7RST;
 800cb66:	691a      	ldr	r2, [r3, #16]
 800cb68:	f042 0220 	orr.w	r2, r2, #32
 800cb6c:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM7RST;	
 800cb6e:	691a      	ldr	r2, [r3, #16]
 800cb70:	f022 0220 	bic.w	r2, r2, #32
 800cb74:	611a      	str	r2, [r3, #16]
	RCC->APB2RSTR |= RCC_APB2RSTR_TIM1RST;
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb7c:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST;	
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb84:	60da      	str	r2, [r3, #12]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 800cb86:	691a      	ldr	r2, [r3, #16]
 800cb88:	f042 0202 	orr.w	r2, r2, #2
 800cb8c:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;	
 800cb8e:	691a      	ldr	r2, [r3, #16]
 800cb90:	f022 0202 	bic.w	r2, r2, #2
 800cb94:	611a      	str	r2, [r3, #16]
}
 800cb96:	4770      	bx	lr
 800cb98:	40021000 	.word	0x40021000

0800cb9c <TIM_GEN_PWM_PSC_Config>:
	if(chan == 1){
 800cb9c:	2901      	cmp	r1, #1
		TIM1->PSC = pscVal;
 800cb9e:	bf0c      	ite	eq
 800cba0:	4b01      	ldreq	r3, [pc, #4]	; (800cba8 <TIM_GEN_PWM_PSC_Config+0xc>)
		TIM3->PSC = pscVal;
 800cba2:	4b02      	ldrne	r3, [pc, #8]	; (800cbac <TIM_GEN_PWM_PSC_Config+0x10>)
 800cba4:	6298      	str	r0, [r3, #40]	; 0x28
}
 800cba6:	4770      	bx	lr
 800cba8:	40012c00 	.word	0x40012c00
 800cbac:	40000400 	.word	0x40000400

0800cbb0 <TIM_GEN_PWM_ARR_Config>:
	if(chan == 1){
 800cbb0:	2901      	cmp	r1, #1
		TIM1->ARR = arrVal;
 800cbb2:	bf0c      	ite	eq
 800cbb4:	4b01      	ldreq	r3, [pc, #4]	; (800cbbc <TIM_GEN_PWM_ARR_Config+0xc>)
		TIM3->ARR = arrVal;
 800cbb6:	4b02      	ldrne	r3, [pc, #8]	; (800cbc0 <TIM_GEN_PWM_ARR_Config+0x10>)
 800cbb8:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 800cbba:	4770      	bx	lr
 800cbbc:	40012c00 	.word	0x40012c00
 800cbc0:	40000400 	.word	0x40000400

0800cbc4 <TIM_SYNC_PWM_Init>:
void TIM_SYNC_PWM_Init(void){		
 800cbc4:	b508      	push	{r3, lr}
	MX_TIM8_SYNC_PWM_Init();
 800cbc6:	f7ff fa1b 	bl	800c000 <MX_TIM8_SYNC_PWM_Init>
	HAL_TIM_Base_Init(&htim8);
 800cbca:	4802      	ldr	r0, [pc, #8]	; (800cbd4 <TIM_SYNC_PWM_Init+0x10>)
}
 800cbcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Init(&htim8);
 800cbd0:	f7fa bd3c 	b.w	800764c <HAL_TIM_Base_Init>
 800cbd4:	2000ce64 	.word	0x2000ce64

0800cbd8 <TIM_SYNC_PWM_Deinit>:
void TIM_SYNC_PWM_Deinit(void){
 800cbd8:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim8);	
 800cbda:	4806      	ldr	r0, [pc, #24]	; (800cbf4 <TIM_SYNC_PWM_Deinit+0x1c>)
 800cbdc:	f7fa fdd0 	bl	8007780 <HAL_TIM_Base_DeInit>
	RCC->APB2RSTR |= RCC_APB2RSTR_TIM8RST;
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <TIM_SYNC_PWM_Deinit+0x20>)
 800cbe2:	68da      	ldr	r2, [r3, #12]
 800cbe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbe8:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM8RST;	
 800cbea:	68da      	ldr	r2, [r3, #12]
 800cbec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbf0:	60da      	str	r2, [r3, #12]
}
 800cbf2:	bd08      	pop	{r3, pc}
 800cbf4:	2000ce64 	.word	0x2000ce64
 800cbf8:	40021000 	.word	0x40021000

0800cbfc <TIM_SYNC_PWM_ChannelState>:
	if(channel == 1){
 800cbfc:	2801      	cmp	r0, #1
 800cbfe:	d015      	beq.n	800cc2c <TIM_SYNC_PWM_ChannelState+0x30>
	}else if(channel == 2){
 800cc00:	2802      	cmp	r0, #2
 800cc02:	d00b      	beq.n	800cc1c <TIM_SYNC_PWM_ChannelState+0x20>
	}else if(channel == 3){
 800cc04:	2803      	cmp	r0, #3
 800cc06:	d019      	beq.n	800cc3c <TIM_SYNC_PWM_ChannelState+0x40>
	}else if(channel == 4){
 800cc08:	2804      	cmp	r0, #4
 800cc0a:	d106      	bne.n	800cc1a <TIM_SYNC_PWM_ChannelState+0x1e>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;	
 800cc0c:	f1a1 0101 	sub.w	r1, r1, #1
 800cc10:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <TIM_SYNC_PWM_ChannelState+0x50>)
 800cc12:	fab1 f181 	clz	r1, r1
 800cc16:	0949      	lsrs	r1, r1, #5
 800cc18:	7619      	strb	r1, [r3, #24]
}
 800cc1a:	4770      	bx	lr
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;	
 800cc1c:	f1a1 0101 	sub.w	r1, r1, #1
 800cc20:	4b0a      	ldr	r3, [pc, #40]	; (800cc4c <TIM_SYNC_PWM_ChannelState+0x50>)
 800cc22:	fab1 f181 	clz	r1, r1
 800cc26:	0949      	lsrs	r1, r1, #5
 800cc28:	7599      	strb	r1, [r3, #22]
 800cc2a:	4770      	bx	lr
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;		
 800cc2c:	f1a1 0101 	sub.w	r1, r1, #1
 800cc30:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <TIM_SYNC_PWM_ChannelState+0x50>)
 800cc32:	fab1 f181 	clz	r1, r1
 800cc36:	0949      	lsrs	r1, r1, #5
 800cc38:	7559      	strb	r1, [r3, #21]
 800cc3a:	4770      	bx	lr
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;	
 800cc3c:	f1a1 0101 	sub.w	r1, r1, #1
 800cc40:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <TIM_SYNC_PWM_ChannelState+0x50>)
 800cc42:	fab1 f181 	clz	r1, r1
 800cc46:	0949      	lsrs	r1, r1, #5
 800cc48:	75d9      	strb	r1, [r3, #23]
 800cc4a:	4770      	bx	lr
 800cc4c:	2000cafc 	.word	0x2000cafc

0800cc50 <TIM_SYNC_PWM_Start>:
{		
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(syncPwm.chan1 == CHAN_ENABLE){		
 800cc52:	4c37      	ldr	r4, [pc, #220]	; (800cd30 <TIM_SYNC_PWM_Start+0xe0>)
 800cc54:	7d65      	ldrb	r5, [r4, #21]
 800cc56:	b2ed      	uxtb	r5, r5
 800cc58:	2d01      	cmp	r5, #1
 800cc5a:	d053      	beq.n	800cd04 <TIM_SYNC_PWM_Start+0xb4>
 800cc5c:	4e35      	ldr	r6, [pc, #212]	; (800cd34 <TIM_SYNC_PWM_Start+0xe4>)
	if(syncPwm.chan2 == CHAN_ENABLE){	
 800cc5e:	7da5      	ldrb	r5, [r4, #22]
 800cc60:	b2ed      	uxtb	r5, r5
 800cc62:	2d01      	cmp	r5, #1
 800cc64:	d03a      	beq.n	800ccdc <TIM_SYNC_PWM_Start+0x8c>
	if(syncPwm.chan3 == CHAN_ENABLE){		
 800cc66:	7de5      	ldrb	r5, [r4, #23]
 800cc68:	b2ed      	uxtb	r5, r5
 800cc6a:	2d01      	cmp	r5, #1
 800cc6c:	d022      	beq.n	800ccb4 <TIM_SYNC_PWM_Start+0x64>
	if(syncPwm.chan4 == CHAN_ENABLE){			
 800cc6e:	7e25      	ldrb	r5, [r4, #24]
 800cc70:	b2ed      	uxtb	r5, r5
 800cc72:	2d01      	cmp	r5, #1
 800cc74:	d00a      	beq.n	800cc8c <TIM_SYNC_PWM_Start+0x3c>
	__HAL_TIM_MOE_ENABLE(&htim8);	
 800cc76:	6831      	ldr	r1, [r6, #0]
	TIM8->CR1 |= TIM_CR1_CEN;		
 800cc78:	4a2f      	ldr	r2, [pc, #188]	; (800cd38 <TIM_SYNC_PWM_Start+0xe8>)
	__HAL_TIM_MOE_ENABLE(&htim8);	
 800cc7a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800cc7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc80:	644b      	str	r3, [r1, #68]	; 0x44
	TIM8->CR1 |= TIM_CR1_CEN;		
 800cc82:	6813      	ldr	r3, [r2, #0]
 800cc84:	f043 0301 	orr.w	r3, r3, #1
 800cc88:	6013      	str	r3, [r2, #0]
}
 800cc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TIM8->CCR4 = syncPwm.dataEdgeChan4[1];
 800cc8c:	89e4      	ldrh	r4, [r4, #14]
 800cc8e:	4b2a      	ldr	r3, [pc, #168]	; (800cd38 <TIM_SYNC_PWM_Start+0xe8>)
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com, (uint32_t)&syncPwm.dataEdgeChan4[0], (uint32_t)&(TIM8->CCR4), 2);		
 800cc90:	4a2a      	ldr	r2, [pc, #168]	; (800cd3c <TIM_SYNC_PWM_Start+0xec>)
 800cc92:	492b      	ldr	r1, [pc, #172]	; (800cd40 <TIM_SYNC_PWM_Start+0xf0>)
 800cc94:	482b      	ldr	r0, [pc, #172]	; (800cd44 <TIM_SYNC_PWM_Start+0xf4>)
		TIM8->CCR4 = syncPwm.dataEdgeChan4[1];
 800cc96:	b2a4      	uxth	r4, r4
 800cc98:	641c      	str	r4, [r3, #64]	; 0x40
		TIM8->DIER |= TIM_DIER_CC4DE;
 800cc9a:	68dc      	ldr	r4, [r3, #12]
 800cc9c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 800cca0:	60dc      	str	r4, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com, (uint32_t)&syncPwm.dataEdgeChan4[0], (uint32_t)&(TIM8->CCR4), 2);		
 800cca2:	2302      	movs	r3, #2
 800cca4:	f7f9 faaa 	bl	80061fc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);	
 800cca8:	462a      	mov	r2, r5
 800ccaa:	210c      	movs	r1, #12
 800ccac:	6830      	ldr	r0, [r6, #0]
 800ccae:	f7fb fbe1 	bl	8008474 <TIM_CCxChannelCmd>
 800ccb2:	e7e0      	b.n	800cc76 <TIM_SYNC_PWM_Start+0x26>
		TIM8->CCR3 = syncPwm.dataEdgeChan3[1];
 800ccb4:	8967      	ldrh	r7, [r4, #10]
 800ccb6:	4b20      	ldr	r3, [pc, #128]	; (800cd38 <TIM_SYNC_PWM_Start+0xe8>)
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t)&syncPwm.dataEdgeChan3[0], (uint32_t)&(TIM8->CCR3), 2);	
 800ccb8:	4a23      	ldr	r2, [pc, #140]	; (800cd48 <TIM_SYNC_PWM_Start+0xf8>)
 800ccba:	4924      	ldr	r1, [pc, #144]	; (800cd4c <TIM_SYNC_PWM_Start+0xfc>)
 800ccbc:	4824      	ldr	r0, [pc, #144]	; (800cd50 <TIM_SYNC_PWM_Start+0x100>)
		TIM8->CCR3 = syncPwm.dataEdgeChan3[1];
 800ccbe:	b2bf      	uxth	r7, r7
 800ccc0:	63df      	str	r7, [r3, #60]	; 0x3c
		TIM8->DIER |= TIM_DIER_CC3DE;		
 800ccc2:	68df      	ldr	r7, [r3, #12]
 800ccc4:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 800ccc8:	60df      	str	r7, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t)&syncPwm.dataEdgeChan3[0], (uint32_t)&(TIM8->CCR3), 2);	
 800ccca:	2302      	movs	r3, #2
 800cccc:	f7f9 fa96 	bl	80061fc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);				
 800ccd0:	462a      	mov	r2, r5
 800ccd2:	2108      	movs	r1, #8
 800ccd4:	6830      	ldr	r0, [r6, #0]
 800ccd6:	f7fb fbcd 	bl	8008474 <TIM_CCxChannelCmd>
 800ccda:	e7c8      	b.n	800cc6e <TIM_SYNC_PWM_Start+0x1e>
		TIM8->CCR2 = syncPwm.dataEdgeChan2[1];		
 800ccdc:	88e7      	ldrh	r7, [r4, #6]
 800ccde:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <TIM_SYNC_PWM_Start+0xe8>)
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t)&syncPwm.dataEdgeChan2[0], (uint32_t)&(TIM8->CCR2), 2);						
 800cce0:	4a1c      	ldr	r2, [pc, #112]	; (800cd54 <TIM_SYNC_PWM_Start+0x104>)
 800cce2:	491d      	ldr	r1, [pc, #116]	; (800cd58 <TIM_SYNC_PWM_Start+0x108>)
 800cce4:	481d      	ldr	r0, [pc, #116]	; (800cd5c <TIM_SYNC_PWM_Start+0x10c>)
		TIM8->CCR2 = syncPwm.dataEdgeChan2[1];		
 800cce6:	b2bf      	uxth	r7, r7
 800cce8:	639f      	str	r7, [r3, #56]	; 0x38
		TIM8->DIER |= TIM_DIER_CC2DE;				
 800ccea:	68df      	ldr	r7, [r3, #12]
 800ccec:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800ccf0:	60df      	str	r7, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t)&syncPwm.dataEdgeChan2[0], (uint32_t)&(TIM8->CCR2), 2);						
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	f7f9 fa82 	bl	80061fc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);		
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	2104      	movs	r1, #4
 800ccfc:	6830      	ldr	r0, [r6, #0]
 800ccfe:	f7fb fbb9 	bl	8008474 <TIM_CCxChannelCmd>
 800cd02:	e7b0      	b.n	800cc66 <TIM_SYNC_PWM_Start+0x16>
		TIM8->CCR1 = syncPwm.dataEdgeChan1[1];		
 800cd04:	8861      	ldrh	r1, [r4, #2]
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <TIM_SYNC_PWM_Start+0xe8>)
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);	
 800cd08:	4e0a      	ldr	r6, [pc, #40]	; (800cd34 <TIM_SYNC_PWM_Start+0xe4>)
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t)&syncPwm.dataEdgeChan1[0], (uint32_t)&(TIM8->CCR1), 2);						
 800cd0a:	4a15      	ldr	r2, [pc, #84]	; (800cd60 <TIM_SYNC_PWM_Start+0x110>)
 800cd0c:	4815      	ldr	r0, [pc, #84]	; (800cd64 <TIM_SYNC_PWM_Start+0x114>)
		TIM8->CCR1 = syncPwm.dataEdgeChan1[1];		
 800cd0e:	b289      	uxth	r1, r1
 800cd10:	6359      	str	r1, [r3, #52]	; 0x34
		TIM8->DIER |= TIM_DIER_CC1DE;
 800cd12:	68d9      	ldr	r1, [r3, #12]
 800cd14:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800cd18:	60d9      	str	r1, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t)&syncPwm.dataEdgeChan1[0], (uint32_t)&(TIM8->CCR1), 2);						
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	f7f9 fa6d 	bl	80061fc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);	
 800cd22:	462a      	mov	r2, r5
 800cd24:	6830      	ldr	r0, [r6, #0]
 800cd26:	2100      	movs	r1, #0
 800cd28:	f7fb fba4 	bl	8008474 <TIM_CCxChannelCmd>
 800cd2c:	e797      	b.n	800cc5e <TIM_SYNC_PWM_Start+0xe>
 800cd2e:	bf00      	nop
 800cd30:	2000cafc 	.word	0x2000cafc
 800cd34:	2000ce64 	.word	0x2000ce64
 800cd38:	40013400 	.word	0x40013400
 800cd3c:	40013440 	.word	0x40013440
 800cd40:	2000cb08 	.word	0x2000cb08
 800cd44:	2000cf6c 	.word	0x2000cf6c
 800cd48:	4001343c 	.word	0x4001343c
 800cd4c:	2000cb04 	.word	0x2000cb04
 800cd50:	2000cfb0 	.word	0x2000cfb0
 800cd54:	40013438 	.word	0x40013438
 800cd58:	2000cb00 	.word	0x2000cb00
 800cd5c:	2000ce20 	.word	0x2000ce20
 800cd60:	40013434 	.word	0x40013434
 800cd64:	2000cee8 	.word	0x2000cee8

0800cd68 <TIM_SYNC_PWM_Stop>:
{	
 800cd68:	b570      	push	{r4, r5, r6, lr}
	__HAL_TIM_DISABLE(&htim8); 
 800cd6a:	4d49      	ldr	r5, [pc, #292]	; (800ce90 <TIM_SYNC_PWM_Stop+0x128>)
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	6a19      	ldr	r1, [r3, #32]
 800cd70:	f241 1211 	movw	r2, #4369	; 0x1111
 800cd74:	4211      	tst	r1, r2
 800cd76:	d105      	bne.n	800cd84 <TIM_SYNC_PWM_Stop+0x1c>
 800cd78:	6a19      	ldr	r1, [r3, #32]
 800cd7a:	f240 4244 	movw	r2, #1092	; 0x444
 800cd7e:	4211      	tst	r1, r2
 800cd80:	f000 8081 	beq.w	800ce86 <TIM_SYNC_PWM_Stop+0x11e>
	__HAL_TIM_MOE_DISABLE(&htim8);
 800cd84:	6a19      	ldr	r1, [r3, #32]
 800cd86:	f241 1211 	movw	r2, #4369	; 0x1111
 800cd8a:	4211      	tst	r1, r2
 800cd8c:	d104      	bne.n	800cd98 <TIM_SYNC_PWM_Stop+0x30>
 800cd8e:	6a19      	ldr	r1, [r3, #32]
 800cd90:	f240 4244 	movw	r2, #1092	; 0x444
 800cd94:	4211      	tst	r1, r2
 800cd96:	d030      	beq.n	800cdfa <TIM_SYNC_PWM_Stop+0x92>
	if(syncPwm.chan1 == CHAN_ENABLE){		
 800cd98:	4c3e      	ldr	r4, [pc, #248]	; (800ce94 <TIM_SYNC_PWM_Stop+0x12c>)
 800cd9a:	7d63      	ldrb	r3, [r4, #21]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d034      	beq.n	800ce0a <TIM_SYNC_PWM_Stop+0xa2>
	if(syncPwm.chan2 == CHAN_ENABLE){		
 800cda0:	7da3      	ldrb	r3, [r4, #22]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d041      	beq.n	800ce2a <TIM_SYNC_PWM_Stop+0xc2>
	if(syncPwm.chan3 == CHAN_ENABLE){	
 800cda6:	7de3      	ldrb	r3, [r4, #23]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d04e      	beq.n	800ce4a <TIM_SYNC_PWM_Stop+0xe2>
	if(syncPwm.chan4 == CHAN_ENABLE){	
 800cdac:	7e23      	ldrb	r3, [r4, #24]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d05b      	beq.n	800ce6a <TIM_SYNC_PWM_Stop+0x102>
	syncPwm.timAutoReloadReg = TIM8->ARR;
 800cdb2:	4e39      	ldr	r6, [pc, #228]	; (800ce98 <TIM_SYNC_PWM_Stop+0x130>)
	RCC->APB2RSTR |= RCC_APB2RSTR_TIM8RST;
 800cdb4:	4b39      	ldr	r3, [pc, #228]	; (800ce9c <TIM_SYNC_PWM_Stop+0x134>)
	syncPwm.timAutoReloadReg = TIM8->ARR;
 800cdb6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800cdb8:	b292      	uxth	r2, r2
 800cdba:	8222      	strh	r2, [r4, #16]
	syncPwm.timPrescReg = TIM8->PSC;
 800cdbc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800cdbe:	b292      	uxth	r2, r2
 800cdc0:	8262      	strh	r2, [r4, #18]
	RCC->APB2RSTR |= RCC_APB2RSTR_TIM8RST;
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cdc8:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM8RST;	
 800cdca:	68da      	ldr	r2, [r3, #12]
 800cdcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cdd0:	60da      	str	r2, [r3, #12]
	MX_TIM8_SYNC_PWM_Init();
 800cdd2:	f7ff f915 	bl	800c000 <MX_TIM8_SYNC_PWM_Init>
	if(syncPwm.stepMode==CHAN_ENABLE){	
 800cdd6:	7e63      	ldrb	r3, [r4, #25]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d104      	bne.n	800cde8 <TIM_SYNC_PWM_Stop+0x80>
	TIM8->CR1 |= TIM_CR1_OPM;			
 800cdde:	6832      	ldr	r2, [r6, #0]
 800cde0:	f042 0208 	orr.w	r2, r2, #8
 800cde4:	6032      	str	r2, [r6, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800cde6:	7663      	strb	r3, [r4, #25]
	htim8.Init.Prescaler = syncPwm.timPrescReg;
 800cde8:	8a62      	ldrh	r2, [r4, #18]
	htim8.Init.Period = syncPwm.timAutoReloadReg;
 800cdea:	8a23      	ldrh	r3, [r4, #16]
	htim8.Init.Prescaler = syncPwm.timPrescReg;
 800cdec:	606a      	str	r2, [r5, #4]
	htim8.Init.Period = syncPwm.timAutoReloadReg;
 800cdee:	60eb      	str	r3, [r5, #12]
	HAL_TIM_Base_Init(&htim8);
 800cdf0:	4827      	ldr	r0, [pc, #156]	; (800ce90 <TIM_SYNC_PWM_Stop+0x128>)
}
 800cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Init(&htim8);
 800cdf6:	f7fa bc29 	b.w	800764c <HAL_TIM_Base_Init>
	__HAL_TIM_MOE_DISABLE(&htim8);
 800cdfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	if(syncPwm.chan1 == CHAN_ENABLE){		
 800cdfc:	4c25      	ldr	r4, [pc, #148]	; (800ce94 <TIM_SYNC_PWM_Stop+0x12c>)
	__HAL_TIM_MOE_DISABLE(&htim8);
 800cdfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce02:	645a      	str	r2, [r3, #68]	; 0x44
	if(syncPwm.chan1 == CHAN_ENABLE){		
 800ce04:	7d63      	ldrb	r3, [r4, #21]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d1ca      	bne.n	800cda0 <TIM_SYNC_PWM_Stop+0x38>
		TIM8->DIER &= ~TIM_DIER_CC1DE;		
 800ce0a:	4a23      	ldr	r2, [pc, #140]	; (800ce98 <TIM_SYNC_PWM_Stop+0x130>)
		HAL_DMA_Abort(&hdma_tim8_ch1);	
 800ce0c:	4824      	ldr	r0, [pc, #144]	; (800cea0 <TIM_SYNC_PWM_Stop+0x138>)
		TIM8->DIER &= ~TIM_DIER_CC1DE;		
 800ce0e:	68d3      	ldr	r3, [r2, #12]
 800ce10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce14:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);	
 800ce16:	f7f9 fa63 	bl	80062e0 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	6828      	ldr	r0, [r5, #0]
 800ce20:	f7fb fb28 	bl	8008474 <TIM_CCxChannelCmd>
	if(syncPwm.chan2 == CHAN_ENABLE){		
 800ce24:	7da3      	ldrb	r3, [r4, #22]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d1bd      	bne.n	800cda6 <TIM_SYNC_PWM_Stop+0x3e>
		TIM8->DIER &= ~TIM_DIER_CC2DE;				
 800ce2a:	4a1b      	ldr	r2, [pc, #108]	; (800ce98 <TIM_SYNC_PWM_Stop+0x130>)
		HAL_DMA_Abort(&hdma_tim8_ch2);		
 800ce2c:	481d      	ldr	r0, [pc, #116]	; (800cea4 <TIM_SYNC_PWM_Stop+0x13c>)
		TIM8->DIER &= ~TIM_DIER_CC2DE;				
 800ce2e:	68d3      	ldr	r3, [r2, #12]
 800ce30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce34:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);		
 800ce36:	f7f9 fa53 	bl	80062e0 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	6828      	ldr	r0, [r5, #0]
 800ce40:	f7fb fb18 	bl	8008474 <TIM_CCxChannelCmd>
	if(syncPwm.chan3 == CHAN_ENABLE){	
 800ce44:	7de3      	ldrb	r3, [r4, #23]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d1b0      	bne.n	800cdac <TIM_SYNC_PWM_Stop+0x44>
		TIM8->DIER &= ~TIM_DIER_CC3DE;				
 800ce4a:	4a13      	ldr	r2, [pc, #76]	; (800ce98 <TIM_SYNC_PWM_Stop+0x130>)
		HAL_DMA_Abort(&hdma_tim8_ch3_up);		
 800ce4c:	4816      	ldr	r0, [pc, #88]	; (800cea8 <TIM_SYNC_PWM_Stop+0x140>)
		TIM8->DIER &= ~TIM_DIER_CC3DE;				
 800ce4e:	68d3      	ldr	r3, [r2, #12]
 800ce50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce54:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);		
 800ce56:	f7f9 fa43 	bl	80062e0 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);		
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2108      	movs	r1, #8
 800ce5e:	6828      	ldr	r0, [r5, #0]
 800ce60:	f7fb fb08 	bl	8008474 <TIM_CCxChannelCmd>
	if(syncPwm.chan4 == CHAN_ENABLE){	
 800ce64:	7e23      	ldrb	r3, [r4, #24]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d1a3      	bne.n	800cdb2 <TIM_SYNC_PWM_Stop+0x4a>
		TIM8->DIER &= ~TIM_DIER_CC4DE;		
 800ce6a:	4a0b      	ldr	r2, [pc, #44]	; (800ce98 <TIM_SYNC_PWM_Stop+0x130>)
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);		
 800ce6c:	480f      	ldr	r0, [pc, #60]	; (800ceac <TIM_SYNC_PWM_Stop+0x144>)
		TIM8->DIER &= ~TIM_DIER_CC4DE;		
 800ce6e:	68d3      	ldr	r3, [r2, #12]
 800ce70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce74:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);		
 800ce76:	f7f9 fa33 	bl	80062e0 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);				
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	210c      	movs	r1, #12
 800ce7e:	6828      	ldr	r0, [r5, #0]
 800ce80:	f7fb faf8 	bl	8008474 <TIM_CCxChannelCmd>
 800ce84:	e795      	b.n	800cdb2 <TIM_SYNC_PWM_Stop+0x4a>
	__HAL_TIM_DISABLE(&htim8); 
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	f022 0201 	bic.w	r2, r2, #1
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	e779      	b.n	800cd84 <TIM_SYNC_PWM_Stop+0x1c>
 800ce90:	2000ce64 	.word	0x2000ce64
 800ce94:	2000cafc 	.word	0x2000cafc
 800ce98:	40013400 	.word	0x40013400
 800ce9c:	40021000 	.word	0x40021000
 800cea0:	2000cee8 	.word	0x2000cee8
 800cea4:	2000ce20 	.word	0x2000ce20
 800cea8:	2000cfb0 	.word	0x2000cfb0
 800ceac:	2000cf6c 	.word	0x2000cf6c

0800ceb0 <TIM_SYNC_PWM_DMA_ChanConfig>:
	switch (syncPwm.channelToConfig)
 800ceb0:	4a0a      	ldr	r2, [pc, #40]	; (800cedc <TIM_SYNC_PWM_DMA_ChanConfig+0x2c>)
 800ceb2:	7d13      	ldrb	r3, [r2, #20]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d805      	bhi.n	800cec6 <TIM_SYNC_PWM_DMA_ChanConfig+0x16>
 800ceba:	e8df f003 	tbb	[pc, r3]
 800cebe:	080b      	.short	0x080b
 800cec0:	0205      	.short	0x0205
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 800cec2:	8191      	strh	r1, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 800cec4:	81d0      	strh	r0, [r2, #14]
}
 800cec6:	4770      	bx	lr
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 800cec8:	8111      	strh	r1, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 800ceca:	8150      	strh	r0, [r2, #10]
		break;
 800cecc:	4770      	bx	lr
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 800cece:	8091      	strh	r1, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 800ced0:	80d0      	strh	r0, [r2, #6]
		break;
 800ced2:	4770      	bx	lr
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 800ced4:	8011      	strh	r1, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 800ced6:	8050      	strh	r0, [r2, #2]
		break;
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	2000cafc 	.word	0x2000cafc

0800cee0 <TIM_SYNC_PWM_StepMode_Enable>:
	TIM8->CR1 |= TIM_CR1_OPM;			
 800cee0:	4a04      	ldr	r2, [pc, #16]	; (800cef4 <TIM_SYNC_PWM_StepMode_Enable+0x14>)
	syncPwm.stepMode = CHAN_ENABLE;
 800cee2:	4905      	ldr	r1, [pc, #20]	; (800cef8 <TIM_SYNC_PWM_StepMode_Enable+0x18>)
	TIM8->CR1 |= TIM_CR1_OPM;			
 800cee4:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800cee6:	2001      	movs	r0, #1
	TIM8->CR1 |= TIM_CR1_OPM;			
 800cee8:	f043 0308 	orr.w	r3, r3, #8
 800ceec:	6013      	str	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800ceee:	7648      	strb	r0, [r1, #25]
}
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	40013400 	.word	0x40013400
 800cef8:	2000cafc 	.word	0x2000cafc

0800cefc <TIM_SYNC_PWM_StepMode_Disable>:
	TIM8->CR1 &= ~TIM_CR1_OPM;	
 800cefc:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <TIM_SYNC_PWM_StepMode_Disable+0x14>)
	syncPwm.stepMode = CHAN_DISABLE;
 800cefe:	4905      	ldr	r1, [pc, #20]	; (800cf14 <TIM_SYNC_PWM_StepMode_Disable+0x18>)
	TIM8->CR1 &= ~TIM_CR1_OPM;	
 800cf00:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 800cf02:	2000      	movs	r0, #0
	TIM8->CR1 &= ~TIM_CR1_OPM;	
 800cf04:	f023 0308 	bic.w	r3, r3, #8
 800cf08:	6013      	str	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 800cf0a:	7648      	strb	r0, [r1, #25]
}
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	40013400 	.word	0x40013400
 800cf14:	2000cafc 	.word	0x2000cafc

0800cf18 <TIM_ARR_PSC_Reconfig>:
	htim8.Init.Prescaler = (uint16_t)(arrPsc >> 16);
 800cf18:	4a03      	ldr	r2, [pc, #12]	; (800cf28 <TIM_ARR_PSC_Reconfig+0x10>)
 800cf1a:	0c01      	lsrs	r1, r0, #16
	htim8.Init.Period = (uint16_t)arrPsc;
 800cf1c:	b283      	uxth	r3, r0
	HAL_TIM_Base_Init(&htim8);
 800cf1e:	4610      	mov	r0, r2
	htim8.Init.Prescaler = (uint16_t)(arrPsc >> 16);
 800cf20:	6051      	str	r1, [r2, #4]
	htim8.Init.Period = (uint16_t)arrPsc;
 800cf22:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&htim8);
 800cf24:	f7fa bb92 	b.w	800764c <HAL_TIM_Base_Init>
 800cf28:	2000ce64 	.word	0x2000ce64

0800cf2c <TIM_Reconfig>:
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800cf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf30:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (isFreqPassed == true) {
 800cf34:	b124      	cbz	r4, 800cf40 <TIM_Reconfig+0x14>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800cf36:	004c      	lsls	r4, r1, #1
 800cf38:	fbb4 f2f2 	udiv	r2, r4, r2
 800cf3c:	3201      	adds	r2, #1
 800cf3e:	0852      	lsrs	r2, r2, #1
	if (clkDiv == 0) { //error
 800cf40:	2a00      	cmp	r2, #0
 800cf42:	d03a      	beq.n	800cfba <TIM_Reconfig+0x8e>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800cf44:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cf48:	db31      	blt.n	800cfae <TIM_Reconfig+0x82>
		uint16_t ratio = clkDiv >> 16;
 800cf4a:	1415      	asrs	r5, r2, #16
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	b2ad      	uxth	r5, r5
		uint32_t errMin = 0xFFFFFFFF;
 800cf50:	f04f 3cff 	mov.w	ip, #4294967295
	uint32_t errMinRatio = 0;
 800cf54:	f04f 0800 	mov.w	r8, #0
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800cf58:	f64f 7eff 	movw	lr, #65535	; 0xffff
			div = clkDiv / ratio;
 800cf5c:	fb92 f6f5 	sdiv	r6, r2, r5
			errVal = clkDiv - (div * ratio);
 800cf60:	b2b4      	uxth	r4, r6
 800cf62:	fb05 2414 	mls	r4, r5, r4, r2
			if (errVal < errMin) {
 800cf66:	4564      	cmp	r4, ip
			ratio++;
 800cf68:	b2af      	uxth	r7, r5
 800cf6a:	bf3c      	itt	cc
 800cf6c:	46a4      	movcc	ip, r4
				errMinRatio = ratio;
 800cf6e:	46a8      	movcc	r8, r5
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800cf70:	4577      	cmp	r7, lr
 800cf72:	d027      	beq.n	800cfc4 <TIM_Reconfig+0x98>
 800cf74:	3501      	adds	r5, #1
		while (errVal != 0) {
 800cf76:	2c00      	cmp	r4, #0
 800cf78:	d1f0      	bne.n	800cf5c <TIM_Reconfig+0x30>
			div = clkDiv / ratio;
 800cf7a:	b2b6      	uxth	r6, r6
 800cf7c:	1e75      	subs	r5, r6, #1
 800cf7e:	1e7a      	subs	r2, r7, #1
		if (ratio > div) {
 800cf80:	42b7      	cmp	r7, r6
 800cf82:	b2ad      	uxth	r5, r5
 800cf84:	fa1f fc82 	uxth.w	ip, r2
 800cf88:	d931      	bls.n	800cfee <TIM_Reconfig+0xc2>
 800cf8a:	4662      	mov	r2, ip
 800cf8c:	462e      	mov	r6, r5
 800cf8e:	46ac      	mov	ip, r5
 800cf90:	4615      	mov	r5, r2
	if (realFreq != 0) {
 800cf92:	b12b      	cbz	r3, 800cfa0 <TIM_Reconfig+0x74>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800cf94:	1c6a      	adds	r2, r5, #1
 800cf96:	fb0c 2202 	mla	r2, ip, r2, r2
 800cf9a:	fbb1 f1f2 	udiv	r1, r1, r2
 800cf9e:	6019      	str	r1, [r3, #0]
	htim_base->Init.Period = autoReloadReg;
 800cfa0:	60c5      	str	r5, [r0, #12]
	htim_base->Init.Prescaler = prescaler;
 800cfa2:	6046      	str	r6, [r0, #4]
	HAL_TIM_Base_Init(htim_base);
 800cfa4:	f7fa fb52 	bl	800764c <HAL_TIM_Base_Init>

	return result;

}
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfae:	2600      	movs	r6, #0
		autoReloadReg = clkDiv - 1;
 800cfb0:	3a01      	subs	r2, #1
 800cfb2:	b295      	uxth	r5, r2
		result = 0;
 800cfb4:	4634      	mov	r4, r6
		prescaler = 0;
 800cfb6:	46b4      	mov	ip, r6
 800cfb8:	e7eb      	b.n	800cf92 <TIM_Reconfig+0x66>
 800cfba:	f04f 0c00 	mov.w	ip, #0
 800cfbe:	4666      	mov	r6, ip
		result = GEN_FREQ_MISMATCH;
 800cfc0:	246c      	movs	r4, #108	; 0x6c
 800cfc2:	e7e6      	b.n	800cf92 <TIM_Reconfig+0x66>
				div = clkDiv / errMinRatio;
 800cfc4:	fbb2 f2f8 	udiv	r2, r2, r8
				ratio = errMinRatio;
 800cfc8:	fa1f f888 	uxth.w	r8, r8
				div = clkDiv / errMinRatio;
 800cfcc:	b292      	uxth	r2, r2
 800cfce:	f102 3cff 	add.w	ip, r2, #4294967295
 800cfd2:	f108 35ff 	add.w	r5, r8, #4294967295
		if (ratio > div) {
 800cfd6:	4542      	cmp	r2, r8
 800cfd8:	fa1f fc8c 	uxth.w	ip, ip
 800cfdc:	b2ad      	uxth	r5, r5
 800cfde:	d302      	bcc.n	800cfe6 <TIM_Reconfig+0xba>
 800cfe0:	4662      	mov	r2, ip
 800cfe2:	46ac      	mov	ip, r5
 800cfe4:	4615      	mov	r5, r2
 800cfe6:	4666      	mov	r6, ip
		if (errVal) {
 800cfe8:	b114      	cbz	r4, 800cff0 <TIM_Reconfig+0xc4>
			result = GEN_FREQ_IS_INACCURATE;
 800cfea:	246b      	movs	r4, #107	; 0x6b
 800cfec:	e7d1      	b.n	800cf92 <TIM_Reconfig+0x66>
 800cfee:	4666      	mov	r6, ip
			result = 0;
 800cff0:	2400      	movs	r4, #0
 800cff2:	e7ce      	b.n	800cf92 <TIM_Reconfig+0x66>

0800cff4 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800cff4:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
	if(counter.state == COUNTER_REF){
 800cff6:	4c27      	ldr	r4, [pc, #156]	; (800d094 <MX_TIM4_Init+0xa0>)
	htim4.Instance = TIM4;
 800cff8:	4b27      	ldr	r3, [pc, #156]	; (800d098 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800cffa:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800cffe:	4927      	ldr	r1, [pc, #156]	; (800d09c <MX_TIM4_Init+0xa8>)
 800d000:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800d002:	2a04      	cmp	r2, #4
{
 800d004:	b089      	sub	sp, #36	; 0x24
	if(counter.state == COUNTER_REF){
 800d006:	d03d      	beq.n	800d084 <MX_TIM4_Init+0x90>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
		htim4.Init.Period = 59999;
	}else if(counter.state == COUNTER_ETR){
 800d008:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800d00c:	2a01      	cmp	r2, #1
 800d00e:	d007      	beq.n	800d020 <MX_TIM4_Init+0x2c>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800d010:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800d014:	2a02      	cmp	r2, #2
 800d016:	d003      	beq.n	800d020 <MX_TIM4_Init+0x2c>
 800d018:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800d01c:	2a03      	cmp	r2, #3
 800d01e:	d105      	bne.n	800d02c <MX_TIM4_Init+0x38>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800d020:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800d024:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800d028:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800d02a:	60da      	str	r2, [r3, #12]
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
		htim4.Init.Period = TIM4_ARR;
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d02c:	2500      	movs	r5, #0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800d02e:	481a      	ldr	r0, [pc, #104]	; (800d098 <MX_TIM4_Init+0xa4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d030:	609d      	str	r5, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d032:	611d      	str	r5, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d034:	619d      	str	r5, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800d036:	f7fa fb09 	bl	800764c <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 800d03a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800d03e:	4816      	ldr	r0, [pc, #88]	; (800d098 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800d040:	2b04      	cmp	r3, #4
 800d042:	a908      	add	r1, sp, #32
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d044:	bf0c      	ite	eq
 800d046:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d04a:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800d04e:	f841 3d10 	str.w	r3, [r1, #-16]!
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800d052:	bf04      	itt	eq
 800d054:	e9cd 5505 	strdeq	r5, r5, [sp, #20]
		sClockSourceConfig.ClockFilter = 0;
 800d058:	9507      	streq	r5, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800d05a:	f7fa ffb3 	bl	8007fc4 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800d05e:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d062:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800d064:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d066:	9201      	str	r2, [sp, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800d068:	d011      	beq.n	800d08e <MX_TIM4_Init+0x9a>
 800d06a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800d06e:	2b03      	cmp	r3, #3
 800d070:	bf0c      	ite	eq
 800d072:	2300      	moveq	r3, #0
 800d074:	2380      	movne	r3, #128	; 0x80
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800d076:	a901      	add	r1, sp, #4
 800d078:	4807      	ldr	r0, [pc, #28]	; (800d098 <MX_TIM4_Init+0xa4>)
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	f7fb fbe0 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800d080:	b009      	add	sp, #36	; 0x24
 800d082:	bd30      	pop	{r4, r5, pc}
		htim4.Init.Prescaler = 59999;
 800d084:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800d088:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800d08a:	60da      	str	r2, [r3, #12]
 800d08c:	e7ce      	b.n	800d02c <MX_TIM4_Init+0x38>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d08e:	2300      	movs	r3, #0
 800d090:	e7f1      	b.n	800d076 <MX_TIM4_Init+0x82>
 800d092:	bf00      	nop
 800d094:	20004848 	.word	0x20004848
 800d098:	2000d13c 	.word	0x2000d13c
 800d09c:	40000800 	.word	0x40000800

0800d0a0 <TIM2_ETRorREF_MspInit>:
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM2_CLK_ENABLE();
 800d0a0:	4b20      	ldr	r3, [pc, #128]	; (800d124 <TIM2_ETRorREF_MspInit+0x84>)
{
 800d0a2:	b570      	push	{r4, r5, r6, lr}
	__TIM2_CLK_ENABLE();
 800d0a4:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 800d0a6:	4c20      	ldr	r4, [pc, #128]	; (800d128 <TIM2_ETRorREF_MspInit+0x88>)
	__TIM2_CLK_ENABLE();
 800d0a8:	f042 0201 	orr.w	r2, r2, #1
 800d0ac:	61da      	str	r2, [r3, #28]
 800d0ae:	69db      	ldr	r3, [r3, #28]
{
 800d0b0:	b086      	sub	sp, #24
	__TIM2_CLK_ENABLE();
 800d0b2:	f003 0301 	and.w	r3, r3, #1
{
 800d0b6:	4606      	mov	r6, r0
	__TIM2_CLK_ENABLE();
 800d0b8:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0ba:	2002      	movs	r0, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0bc:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d0be:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d0c0:	2203      	movs	r2, #3
	__TIM2_CLK_ENABLE();
 800d0c2:	9900      	ldr	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0c4:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0c6:	a901      	add	r1, sp, #4
 800d0c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d0cc:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d0ce:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d0d0:	e9cd 5203 	strd	r5, r2, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0d4:	f7f9 f9e8 	bl	80064a8 <HAL_GPIO_Init>
	hdma_tim2_up.Instance = DMA1_Channel2;
 800d0d8:	4a14      	ldr	r2, [pc, #80]	; (800d12c <TIM2_ETRorREF_MspInit+0x8c>)
 800d0da:	6022      	str	r2, [r4, #0]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d0dc:	f44f 7300 	mov.w	r3, #512	; 0x200
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d0e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800d0e4:	2220      	movs	r2, #32
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d0e6:	6123      	str	r3, [r4, #16]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_up);
 800d0e8:	4620      	mov	r0, r4
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800d0ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0ee:	e9c4 2306 	strd	r2, r3, [r4, #24]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d0f2:	6161      	str	r1, [r4, #20]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d0f4:	6065      	str	r5, [r4, #4]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 800d0f6:	e9c4 5502 	strd	r5, r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim2_up);
 800d0fa:	f7f8 fff7 	bl	80060ec <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800d0fe:	6234      	str	r4, [r6, #32]
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800d100:	4629      	mov	r1, r5
 800d102:	4620      	mov	r0, r4
 800d104:	4a0a      	ldr	r2, [pc, #40]	; (800d130 <TIM2_ETRorREF_MspInit+0x90>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800d106:	6266      	str	r6, [r4, #36]	; 0x24
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800d108:	f7f9 f976 	bl	80063f8 <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 800d10c:	462a      	mov	r2, r5
 800d10e:	2109      	movs	r1, #9
 800d110:	200c      	movs	r0, #12
 800d112:	f7f8 fe3f 	bl	8005d94 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800d116:	200c      	movs	r0, #12
 800d118:	f7f8 fe72 	bl	8005e00 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 800d11c:	f7f6 fb4c 	bl	80037b8 <counterEtrRefSetDefault>
}
 800d120:	b006      	add	sp, #24
 800d122:	bd70      	pop	{r4, r5, r6, pc}
 800d124:	40021000 	.word	0x40021000
 800d128:	2000d17c 	.word	0x2000d17c
 800d12c:	4002001c 	.word	0x4002001c
 800d130:	080032f5 	.word	0x080032f5

0800d134 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800d134:	4b2b      	ldr	r3, [pc, #172]	; (800d1e4 <TIM2_ICorTI_MspInit+0xb0>)
{
 800d136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d13a:	69da      	ldr	r2, [r3, #28]
	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800d13c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800d1f8 <TIM2_ICorTI_MspInit+0xc4>
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800d140:	4d29      	ldr	r5, [pc, #164]	; (800d1e8 <TIM2_ICorTI_MspInit+0xb4>)
	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800d142:	4c2a      	ldr	r4, [pc, #168]	; (800d1ec <TIM2_ICorTI_MspInit+0xb8>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d144:	f042 0201 	orr.w	r2, r2, #1
 800d148:	61da      	str	r2, [r3, #28]
 800d14a:	69db      	ldr	r3, [r3, #28]
{
 800d14c:	b087      	sub	sp, #28
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d154:	2600      	movs	r6, #0
{
 800d156:	4607      	mov	r7, r0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d158:	f04f 0c02 	mov.w	ip, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d15c:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d15e:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d160:	2201      	movs	r2, #1
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d162:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d164:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d16a:	e9cd c602 	strd	ip, r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d16e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d170:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d172:	f7f9 f999 	bl	80064a8 <HAL_GPIO_Init>
	if(counter.state==COUNTER_IC){
 800d176:	f898 23b8 	ldrb.w	r2, [r8, #952]	; 0x3b8
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800d17a:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <TIM2_ICorTI_MspInit+0xbc>)
 800d17c:	602b      	str	r3, [r5, #0]
	if(counter.state==COUNTER_IC){
 800d17e:	2a02      	cmp	r2, #2
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800d180:	bf14      	ite	ne
 800d182:	4632      	movne	r2, r6
 800d184:	2280      	moveq	r2, #128	; 0x80
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d186:	f44f 7b00 	mov.w	fp, #512	; 0x200
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d18a:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800d18e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800d192:	4628      	mov	r0, r5
 800d194:	60ea      	str	r2, [r5, #12]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d196:	606e      	str	r6, [r5, #4]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800d198:	60ae      	str	r6, [r5, #8]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800d19a:	61ae      	str	r6, [r5, #24]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d19c:	e9c5 ba04 	strd	fp, sl, [r5, #16]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800d1a0:	f8c5 901c 	str.w	r9, [r5, #28]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800d1a4:	f7f8 ffa2 	bl	80060ec <HAL_DMA_Init>
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800d1a8:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800d1ac:	4a11      	ldr	r2, [pc, #68]	; (800d1f4 <TIM2_ICorTI_MspInit+0xc0>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800d1ae:	62bd      	str	r5, [r7, #40]	; 0x28
	if(counter.state==COUNTER_IC){
 800d1b0:	2b02      	cmp	r3, #2
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800d1b2:	bf0c      	ite	eq
 800d1b4:	2380      	moveq	r3, #128	; 0x80
 800d1b6:	4633      	movne	r3, r6
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch1);
 800d1b8:	4620      	mov	r0, r4
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800d1ba:	6022      	str	r2, [r4, #0]
 800d1bc:	60e3      	str	r3, [r4, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800d1be:	626f      	str	r7, [r5, #36]	; 0x24
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d1c0:	f8c4 b010 	str.w	fp, [r4, #16]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d1c4:	e9c4 6601 	strd	r6, r6, [r4, #4]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800d1c8:	e9c4 a605 	strd	sl, r6, [r4, #20]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800d1cc:	f8c4 901c 	str.w	r9, [r4, #28]
	HAL_DMA_Init(&hdma_tim2_ch1);
 800d1d0:	f7f8 ff8c 	bl	80060ec <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800d1d4:	627c      	str	r4, [r7, #36]	; 0x24
 800d1d6:	6267      	str	r7, [r4, #36]	; 0x24

	counterIcTiSetDefault();
 800d1d8:	f7f6 fb1a 	bl	8003810 <counterIcTiSetDefault>
}
 800d1dc:	b007      	add	sp, #28
 800d1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e2:	bf00      	nop
 800d1e4:	40021000 	.word	0x40021000
 800d1e8:	2000d1c4 	.word	0x2000d1c4
 800d1ec:	2000d0f8 	.word	0x2000d0f8
 800d1f0:	40020080 	.word	0x40020080
 800d1f4:	40020058 	.word	0x40020058
 800d1f8:	20004848 	.word	0x20004848

0800d1fc <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM4_CLK_ENABLE();
 800d1fc:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <TIM4_REForICorTI_MspInit+0x70>)

	if(counter.state==COUNTER_REF){
 800d1fe:	491c      	ldr	r1, [pc, #112]	; (800d270 <TIM4_REForICorTI_MspInit+0x74>)
	__TIM4_CLK_ENABLE();
 800d200:	69da      	ldr	r2, [r3, #28]
{
 800d202:	b530      	push	{r4, r5, lr}
	__TIM4_CLK_ENABLE();
 800d204:	f042 0204 	orr.w	r2, r2, #4
 800d208:	61da      	str	r2, [r3, #28]
 800d20a:	69db      	ldr	r3, [r3, #28]
{
 800d20c:	b087      	sub	sp, #28
	__TIM4_CLK_ENABLE();
 800d20e:	f003 0304 	and.w	r3, r3, #4
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	9b00      	ldr	r3, [sp, #0]
	if(counter.state==COUNTER_REF){
 800d216:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	d013      	beq.n	800d246 <TIM4_REForICorTI_MspInit+0x4a>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800d21e:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800d222:	2b02      	cmp	r3, #2
 800d224:	d005      	beq.n	800d232 <TIM4_REForICorTI_MspInit+0x36>
 800d226:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d001      	beq.n	800d232 <TIM4_REForICorTI_MspInit+0x36>

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 800d22e:	b007      	add	sp, #28
 800d230:	bd30      	pop	{r4, r5, pc}
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800d232:	2200      	movs	r2, #0
 800d234:	2109      	movs	r1, #9
 800d236:	201e      	movs	r0, #30
 800d238:	f7f8 fdac 	bl	8005d94 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800d23c:	201e      	movs	r0, #30
 800d23e:	f7f8 fddf 	bl	8005e00 <HAL_NVIC_EnableIRQ>
}
 800d242:	b007      	add	sp, #28
 800d244:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800d246:	f44f 7080 	mov.w	r0, #256	; 0x100
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d24a:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800d24c:	230a      	movs	r3, #10
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800d24e:	9001      	str	r0, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d250:	2502      	movs	r5, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d252:	2400      	movs	r4, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d254:	a901      	add	r1, sp, #4
 800d256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d25a:	e9cd 5402 	strd	r5, r4, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800d25e:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d262:	f7f9 f921 	bl	80064a8 <HAL_GPIO_Init>
}
 800d266:	b007      	add	sp, #28
 800d268:	bd30      	pop	{r4, r5, pc}
 800d26a:	bf00      	nop
 800d26c:	40021000 	.word	0x40021000
 800d270:	20004848 	.word	0x20004848

0800d274 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM2_CLK_DISABLE();
 800d274:	491f      	ldr	r1, [pc, #124]	; (800d2f4 <TIM2_CNT_MspDeinit+0x80>)

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800d276:	4a20      	ldr	r2, [pc, #128]	; (800d2f8 <TIM2_CNT_MspDeinit+0x84>)
	__TIM2_CLK_DISABLE();
 800d278:	69cb      	ldr	r3, [r1, #28]
 800d27a:	f023 0301 	bic.w	r3, r3, #1
{
 800d27e:	b510      	push	{r4, lr}
	__TIM2_CLK_DISABLE();
 800d280:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800d282:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d286:	2b01      	cmp	r3, #1
{
 800d288:	4604      	mov	r4, r0
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800d28a:	d021      	beq.n	800d2d0 <TIM2_CNT_MspDeinit+0x5c>
 800d28c:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d290:	2b04      	cmp	r3, #4
 800d292:	d01d      	beq.n	800d2d0 <TIM2_CNT_MspDeinit+0x5c>

		//			TIM2 -> DIER &= ~TIM_DIER_UDE;
		//			TIM2 -> CCMR1 &= ~TIM_CCMR1_CC1S_Msk;
		//			TIM2 -> CCER &= ~TIM_CCER_CC1E;

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 800d294:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d004      	beq.n	800d2a6 <TIM2_CNT_MspDeinit+0x32>
 800d29c:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d000      	beq.n	800d2a6 <TIM2_CNT_MspDeinit+0x32>
		//			TIM2 -> CCER &= ~TIM_CCER_CC1E;
		//			TIM2 -> CCER &= ~TIM_CCER_CC2E;
		//			TIM2 -> DIER &= ~TIM_DIER_CC1DE;				/* Capture/Compare 1 DMA request deinit */
		//			TIM2 -> DIER &= ~TIM_DIER_CC2DE;				/* Capture/Compare 1 DMA request deinit */
	}
}
 800d2a4:	bd10      	pop	{r4, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800d2a6:	2103      	movs	r1, #3
 800d2a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d2ac:	f7f9 f9ee 	bl	800668c <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800d2b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d2b2:	f7f8 ff65 	bl	8006180 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800d2b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d2b8:	f7f8 ff62 	bl	8006180 <HAL_DMA_DeInit>
		__HAL_RCC_TIM2_FORCE_RESET();
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	; (800d2f4 <TIM2_CNT_MspDeinit+0x80>)
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	f042 0201 	orr.w	r2, r2, #1
 800d2c4:	611a      	str	r2, [r3, #16]
		__HAL_RCC_TIM2_RELEASE_RESET();
 800d2c6:	691a      	ldr	r2, [r3, #16]
 800d2c8:	f022 0201 	bic.w	r2, r2, #1
 800d2cc:	611a      	str	r2, [r3, #16]
}
 800d2ce:	bd10      	pop	{r4, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d2d6:	f7f9 f9d9 	bl	800668c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 800d2da:	200c      	movs	r0, #12
 800d2dc:	f7f8 fd9c 	bl	8005e18 <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	4806      	ldr	r0, [pc, #24]	; (800d2fc <TIM2_CNT_MspDeinit+0x88>)
 800d2e4:	f7f9 f8b2 	bl	800644c <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800d2e8:	6a20      	ldr	r0, [r4, #32]
}
 800d2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800d2ee:	f7f8 bf47 	b.w	8006180 <HAL_DMA_DeInit>
 800d2f2:	bf00      	nop
 800d2f4:	40021000 	.word	0x40021000
 800d2f8:	20004848 	.word	0x20004848
 800d2fc:	2000d17c 	.word	0x2000d17c

0800d300 <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM4_CLK_DISABLE();
 800d300:	4918      	ldr	r1, [pc, #96]	; (800d364 <TIM4_CNT_MspDeinit+0x64>)

	if(counter.state==COUNTER_REF){
 800d302:	4a19      	ldr	r2, [pc, #100]	; (800d368 <TIM4_CNT_MspDeinit+0x68>)
{
 800d304:	b508      	push	{r3, lr}
	__TIM4_CLK_DISABLE();
 800d306:	69cb      	ldr	r3, [r1, #28]
 800d308:	f023 0304 	bic.w	r3, r3, #4
 800d30c:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_REF){
 800d30e:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d312:	2b04      	cmp	r3, #4
 800d314:	d01a      	beq.n	800d34c <TIM4_CNT_MspDeinit+0x4c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800d316:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d012      	beq.n	800d344 <TIM4_CNT_MspDeinit+0x44>
 800d31e:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800d322:	2b03      	cmp	r3, #3
 800d324:	d00e      	beq.n	800d344 <TIM4_CNT_MspDeinit+0x44>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);

	}	else if(counter.state==COUNTER_ETR){
 800d326:	f892 13b8 	ldrb.w	r1, [r2, #952]	; 0x3b8
 800d32a:	b2c9      	uxtb	r1, r1
 800d32c:	2901      	cmp	r1, #1
 800d32e:	d014      	beq.n	800d35a <TIM4_CNT_MspDeinit+0x5a>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 800d330:	4b0c      	ldr	r3, [pc, #48]	; (800d364 <TIM4_CNT_MspDeinit+0x64>)
 800d332:	691a      	ldr	r2, [r3, #16]
 800d334:	f042 0204 	orr.w	r2, r2, #4
 800d338:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800d33a:	691a      	ldr	r2, [r3, #16]
 800d33c:	f022 0204 	bic.w	r2, r2, #4
 800d340:	611a      	str	r2, [r3, #16]
}
 800d342:	bd08      	pop	{r3, pc}
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800d344:	201e      	movs	r0, #30
 800d346:	f7f8 fd67 	bl	8005e18 <HAL_NVIC_DisableIRQ>
 800d34a:	e7f1      	b.n	800d330 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800d34c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d354:	f7f9 f99a 	bl	800668c <HAL_GPIO_DeInit>
 800d358:	e7ea      	b.n	800d330 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800d35a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d35e:	f7f9 f995 	bl	800668c <HAL_GPIO_DeInit>
 800d362:	e7e5      	b.n	800d330 <TIM4_CNT_MspDeinit+0x30>
 800d364:	40021000 	.word	0x40021000
 800d368:	20004848 	.word	0x20004848

0800d36c <COUNTER_PeriodElapsedCallback>:
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d36c:	6803      	ldr	r3, [r0, #0]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	07d1      	lsls	r1, r2, #31
 800d372:	d502      	bpl.n	800d37a <COUNTER_PeriodElapsedCallback+0xe>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	07d2      	lsls	r2, r2, #31
 800d378:	d400      	bmi.n	800d37c <COUNTER_PeriodElapsedCallback+0x10>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
			counterPeriodElapsedCallback(htim);
		}
	}
}
 800d37a:	4770      	bx	lr
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d37c:	f06f 0201 	mvn.w	r2, #1
 800d380:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 800d382:	f7f6 b915 	b.w	80035b0 <counterPeriodElapsedCallback>
 800d386:	bf00      	nop

0800d388 <TIM_counter_etr_init>:
 * @brief  Initialize Counter Direct method (ETR input).
 * @note		TIM4 gate time; TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
 800d388:	b570      	push	{r4, r5, r6, lr}
	htim4.State = HAL_TIM_STATE_RESET;
 800d38a:	492d      	ldr	r1, [pc, #180]	; (800d440 <TIM_counter_etr_init+0xb8>)
	htim2.State = HAL_TIM_STATE_RESET;
 800d38c:	4e2d      	ldr	r6, [pc, #180]	; (800d444 <TIM_counter_etr_init+0xbc>)
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d38e:	4a2e      	ldr	r2, [pc, #184]	; (800d448 <TIM_counter_etr_init+0xc0>)
	htim4.State = HAL_TIM_STATE_RESET;
 800d390:	2300      	movs	r3, #0
 800d392:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	htim2.State = HAL_TIM_STATE_RESET;
 800d396:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d39a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d39c:	01db      	lsls	r3, r3, #7
void TIM_counter_etr_init(void){
 800d39e:	b08c      	sub	sp, #48	; 0x30
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d3a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d3a4:	d446      	bmi.n	800d434 <TIM_counter_etr_init+0xac>
	}	else {
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d3a6:	f7f9 ff87 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3aa:	4b28      	ldr	r3, [pc, #160]	; (800d44c <TIM_counter_etr_init+0xc4>)
 800d3ac:	6018      	str	r0, [r3, #0]
	MX_TIM4_Init();
 800d3ae:	f7ff fe21 	bl	800cff4 <MX_TIM4_Init>
	htim2.Instance = TIM2;
 800d3b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 800d3b6:	2400      	movs	r4, #0
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800d3b8:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800d3bc:	4821      	ldr	r0, [pc, #132]	; (800d444 <TIM_counter_etr_init+0xbc>)
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800d3be:	60f3      	str	r3, [r6, #12]
	htim2.Init.Prescaler = 0;
 800d3c0:	e9c6 5400 	strd	r5, r4, [r6]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3c4:	60b4      	str	r4, [r6, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3c6:	6134      	str	r4, [r6, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3c8:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim2);
 800d3ca:	f7fa f93f 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d3ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d3d2:	a903      	add	r1, sp, #12
 800d3d4:	481b      	ldr	r0, [pc, #108]	; (800d444 <TIM_counter_etr_init+0xbc>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d3d6:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800d3d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800d3dc:	9406      	str	r4, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d3de:	f7fa fdf1 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800d3e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d3e6:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d3e8:	a907      	add	r1, sp, #28
 800d3ea:	4816      	ldr	r0, [pc, #88]	; (800d444 <TIM_counter_etr_init+0xbc>)
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d3ec:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800d3f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d3f4:	f7fa feb0 	bl	8008158 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d3f8:	4669      	mov	r1, sp
 800d3fa:	4812      	ldr	r0, [pc, #72]	; (800d444 <TIM_counter_etr_init+0xbc>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3fc:	9400      	str	r4, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3fe:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d400:	f7fb fa1e 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	TIM2 -> CCMR1 &= ~TIM_CCMR1_CC1S;
 800d404:	69ab      	ldr	r3, [r5, #24]
 800d406:	f023 0303 	bic.w	r3, r3, #3
 800d40a:	61ab      	str	r3, [r5, #24]
	TIM2 -> CCMR1 &= ~TIM_CCMR1_CC2S;
 800d40c:	69ab      	ldr	r3, [r5, #24]
 800d40e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d412:	61ab      	str	r3, [r5, #24]
	TIM2 -> DIER  |= TIM_DIER_UDE;					/* __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE); */
 800d414:	68eb      	ldr	r3, [r5, #12]
 800d416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d41a:	60eb      	str	r3, [r5, #12]
	TIM2 -> CCMR1 |= TIM_CCMR1_CC1S;  			/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC	*/
 800d41c:	69ab      	ldr	r3, [r5, #24]
 800d41e:	f043 0303 	orr.w	r3, r3, #3
 800d422:	61ab      	str	r3, [r5, #24]
	tim4clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800d424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d428:	f7f9 ff46 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d42c:	4b08      	ldr	r3, [pc, #32]	; (800d450 <TIM_counter_etr_init+0xc8>)
 800d42e:	6018      	str	r0, [r3, #0]
}
 800d430:	b00c      	add	sp, #48	; 0x30
 800d432:	bd70      	pop	{r4, r5, r6, pc}
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d434:	f7f9 ff40 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d438:	4b04      	ldr	r3, [pc, #16]	; (800d44c <TIM_counter_etr_init+0xc4>)
 800d43a:	0040      	lsls	r0, r0, #1
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	e7b6      	b.n	800d3ae <TIM_counter_etr_init+0x26>
 800d440:	2000d13c 	.word	0x2000d13c
 800d444:	2000d208 	.word	0x2000d208
 800d448:	40021000 	.word	0x40021000
 800d44c:	2000d248 	.word	0x2000d248
 800d450:	2000d1c0 	.word	0x2000d1c0

0800d454 <TIM_counter_ref_init>:
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d454:	4b32      	ldr	r3, [pc, #200]	; (800d520 <TIM_counter_ref_init+0xcc>)
	htim4.State = HAL_TIM_STATE_RESET;
 800d456:	4833      	ldr	r0, [pc, #204]	; (800d524 <TIM_counter_ref_init+0xd0>)
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d458:	691a      	ldr	r2, [r3, #16]
 800d45a:	f042 0201 	orr.w	r2, r2, #1
void TIM_counter_ref_init(void){
 800d45e:	b570      	push	{r4, r5, r6, lr}
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d460:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 800d462:	691a      	ldr	r2, [r3, #16]
	htim2.State = HAL_TIM_STATE_RESET;
 800d464:	4e30      	ldr	r6, [pc, #192]	; (800d528 <TIM_counter_ref_init+0xd4>)
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 800d466:	f022 0201 	bic.w	r2, r2, #1
 800d46a:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM4RST;
 800d46c:	691a      	ldr	r2, [r3, #16]
 800d46e:	f042 0204 	orr.w	r2, r2, #4
 800d472:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST;
 800d474:	691a      	ldr	r2, [r3, #16]
	htim4.State = HAL_TIM_STATE_RESET;
 800d476:	2100      	movs	r1, #0
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST;
 800d478:	f022 0204 	bic.w	r2, r2, #4
 800d47c:	611a      	str	r2, [r3, #16]
	htim4.State = HAL_TIM_STATE_RESET;
 800d47e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
	htim2.State = HAL_TIM_STATE_RESET;
 800d482:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	01db      	lsls	r3, r3, #7
void TIM_counter_ref_init(void){
 800d48a:	b08c      	sub	sp, #48	; 0x30
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d48c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d490:	d440      	bmi.n	800d514 <TIM_counter_ref_init+0xc0>
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d492:	f7f9 ff11 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d496:	4b25      	ldr	r3, [pc, #148]	; (800d52c <TIM_counter_ref_init+0xd8>)
 800d498:	6018      	str	r0, [r3, #0]
	MX_TIM4_Init();
 800d49a:	f7ff fdab 	bl	800cff4 <MX_TIM4_Init>
	htim2.Instance = TIM2;
 800d49e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 800d4a2:	2400      	movs	r4, #0
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800d4a4:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800d4a8:	481f      	ldr	r0, [pc, #124]	; (800d528 <TIM_counter_ref_init+0xd4>)
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800d4aa:	60f3      	str	r3, [r6, #12]
	htim2.Init.Prescaler = 0;
 800d4ac:	e9c6 5400 	strd	r5, r4, [r6]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4b0:	60b4      	str	r4, [r6, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4b2:	6134      	str	r4, [r6, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4b4:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim2);
 800d4b6:	f7fa f8c9 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d4ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d4be:	a903      	add	r1, sp, #12
 800d4c0:	4819      	ldr	r0, [pc, #100]	; (800d528 <TIM_counter_ref_init+0xd4>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d4c2:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800d4c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800d4c8:	9406      	str	r4, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d4ca:	f7fa fd7b 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800d4ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d4d2:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d4d4:	a907      	add	r1, sp, #28
 800d4d6:	4814      	ldr	r0, [pc, #80]	; (800d528 <TIM_counter_ref_init+0xd4>)
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d4d8:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800d4dc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d4e0:	f7fa fe3a 	bl	8008158 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d4e4:	4669      	mov	r1, sp
 800d4e6:	4810      	ldr	r0, [pc, #64]	; (800d528 <TIM_counter_ref_init+0xd4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4e8:	9400      	str	r4, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4ea:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d4ec:	f7fb f9a8 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	TIM2 -> CCMR1 &= ~TIM_CCMR1_CC1S;
 800d4f0:	69ab      	ldr	r3, [r5, #24]
 800d4f2:	f023 0303 	bic.w	r3, r3, #3
 800d4f6:	61ab      	str	r3, [r5, #24]
	TIM2 -> CCMR1 &= ~TIM_CCMR1_CC2S;
 800d4f8:	69ab      	ldr	r3, [r5, #24]
 800d4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4fe:	61ab      	str	r3, [r5, #24]
	TIM2 -> DIER  |= TIM_DIER_UDE;					/* __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE); */
 800d500:	68eb      	ldr	r3, [r5, #12]
 800d502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d506:	60eb      	str	r3, [r5, #12]
	TIM2 -> CCMR1 |= TIM_CCMR1_CC1S;  			/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC	*/
 800d508:	69ab      	ldr	r3, [r5, #24]
 800d50a:	f043 0303 	orr.w	r3, r3, #3
 800d50e:	61ab      	str	r3, [r5, #24]
}
 800d510:	b00c      	add	sp, #48	; 0x30
 800d512:	bd70      	pop	{r4, r5, r6, pc}
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d514:	f7f9 fed0 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <TIM_counter_ref_init+0xd8>)
 800d51a:	0040      	lsls	r0, r0, #1
 800d51c:	6018      	str	r0, [r3, #0]
 800d51e:	e7bc      	b.n	800d49a <TIM_counter_ref_init+0x46>
 800d520:	40021000 	.word	0x40021000
 800d524:	2000d13c 	.word	0x2000d13c
 800d528:	2000d208 	.word	0x2000d208
 800d52c:	2000d248 	.word	0x2000d248

0800d530 <TIM_counter_ic_init>:
void TIM_counter_ic_init(void){
 800d530:	b570      	push	{r4, r5, r6, lr}
	htim4.State = HAL_TIM_STATE_RESET;
 800d532:	4931      	ldr	r1, [pc, #196]	; (800d5f8 <TIM_counter_ic_init+0xc8>)
	htim2.State = HAL_TIM_STATE_RESET;
 800d534:	4e31      	ldr	r6, [pc, #196]	; (800d5fc <TIM_counter_ic_init+0xcc>)
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d536:	4a32      	ldr	r2, [pc, #200]	; (800d600 <TIM_counter_ic_init+0xd0>)
	htim4.State = HAL_TIM_STATE_RESET;
 800d538:	2300      	movs	r3, #0
 800d53a:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	htim2.State = HAL_TIM_STATE_RESET;
 800d53e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d542:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d544:	01db      	lsls	r3, r3, #7
void TIM_counter_ic_init(void){
 800d546:	b08c      	sub	sp, #48	; 0x30
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d548:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d54c:	d44e      	bmi.n	800d5ec <TIM_counter_ic_init+0xbc>
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d54e:	f7f9 feb3 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d552:	4b2c      	ldr	r3, [pc, #176]	; (800d604 <TIM_counter_ic_init+0xd4>)
 800d554:	6018      	str	r0, [r3, #0]
	htim2.Instance = TIM2;
 800d556:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	MX_TIM4_Init();
 800d55a:	f7ff fd4b 	bl	800cff4 <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800d55e:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800d560:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d564:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800d566:	4825      	ldr	r0, [pc, #148]	; (800d5fc <TIM_counter_ic_init+0xcc>)
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d568:	61b3      	str	r3, [r6, #24]
	htim2.Init.Period = 0xFFFFFFFF;
 800d56a:	e9c6 2503 	strd	r2, r5, [r6, #12]
	htim2.Init.Prescaler = 0;
 800d56e:	e9c6 4500 	strd	r4, r5, [r6]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d572:	60b5      	str	r5, [r6, #8]
	HAL_TIM_Base_Init(&htim2);
 800d574:	f7fa f86a 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d578:	a90c      	add	r1, sp, #48	; 0x30
 800d57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d57e:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d582:	481e      	ldr	r0, [pc, #120]	; (800d5fc <TIM_counter_ic_init+0xcc>)
 800d584:	f7fa fd1e 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800d588:	481c      	ldr	r0, [pc, #112]	; (800d5fc <TIM_counter_ic_init+0xcc>)
 800d58a:	f7fa fb15 	bl	8007bb8 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d58e:	a901      	add	r1, sp, #4
 800d590:	481a      	ldr	r0, [pc, #104]	; (800d5fc <TIM_counter_ic_init+0xcc>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d592:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d594:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d596:	f7fb f953 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d59a:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d59c:	462a      	mov	r2, r5
 800d59e:	a908      	add	r1, sp, #32
 800d5a0:	4816      	ldr	r0, [pc, #88]	; (800d5fc <TIM_counter_ic_init+0xcc>)
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d5a2:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800d5a4:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800d5a6:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d5aa:	f7fa fc49 	bl	8007e40 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800d5ae:	a908      	add	r1, sp, #32
 800d5b0:	2204      	movs	r2, #4
 800d5b2:	4812      	ldr	r0, [pc, #72]	; (800d5fc <TIM_counter_ic_init+0xcc>)
 800d5b4:	f7fa fc44 	bl	8007e40 <HAL_TIM_IC_ConfigChannel>
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;  	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1	*/
 800d5b8:	69a3      	ldr	r3, [r4, #24]
 800d5ba:	f043 0301 	orr.w	r3, r3, #1
 800d5be:	61a3      	str	r3, [r4, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;		/* IC2 is mapped on TI2 */
 800d5c0:	69a3      	ldr	r3, [r4, #24]
 800d5c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5c6:	61a3      	str	r3, [r4, #24]
	TIM2->CCER |= TIM_CCER_CC1E;				/* CC1 channel configured as input: This bit determines if a capture of the counter value can
 800d5c8:	6a23      	ldr	r3, [r4, #32]
 800d5ca:	f043 0301 	orr.w	r3, r3, #1
 800d5ce:	6223      	str	r3, [r4, #32]
	TIM2->CCER |= TIM_CCER_CC2E;
 800d5d0:	6a23      	ldr	r3, [r4, #32]
 800d5d2:	f043 0310 	orr.w	r3, r3, #16
 800d5d6:	6223      	str	r3, [r4, #32]
	TIM2->DIER |= TIM_DIER_CC1DE;				/* Capture/Compare 1 DMA request */
 800d5d8:	68e3      	ldr	r3, [r4, #12]
 800d5da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5de:	60e3      	str	r3, [r4, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;				/* Capture/Compare 1 DMA request */
 800d5e0:	68e3      	ldr	r3, [r4, #12]
 800d5e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d5e6:	60e3      	str	r3, [r4, #12]
}
 800d5e8:	b00c      	add	sp, #48	; 0x30
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d5ec:	f7f9 fe64 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5f0:	4b04      	ldr	r3, [pc, #16]	; (800d604 <TIM_counter_ic_init+0xd4>)
 800d5f2:	0040      	lsls	r0, r0, #1
 800d5f4:	6018      	str	r0, [r3, #0]
 800d5f6:	e7ae      	b.n	800d556 <TIM_counter_ic_init+0x26>
 800d5f8:	2000d13c 	.word	0x2000d13c
 800d5fc:	2000d208 	.word	0x2000d208
 800d600:	40021000 	.word	0x40021000
 800d604:	2000d248 	.word	0x2000d248

0800d608 <TIM_counter_ti_init>:
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d608:	4b50      	ldr	r3, [pc, #320]	; (800d74c <TIM_counter_ti_init+0x144>)
	htim4.State = HAL_TIM_STATE_RESET;
 800d60a:	4851      	ldr	r0, [pc, #324]	; (800d750 <TIM_counter_ti_init+0x148>)
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d60c:	691a      	ldr	r2, [r3, #16]
 800d60e:	f042 0201 	orr.w	r2, r2, #1
void TIM_counter_ti_init(void){
 800d612:	b570      	push	{r4, r5, r6, lr}
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800d614:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 800d616:	691a      	ldr	r2, [r3, #16]
	htim2.State = HAL_TIM_STATE_RESET;
 800d618:	4e4e      	ldr	r6, [pc, #312]	; (800d754 <TIM_counter_ti_init+0x14c>)
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 800d61a:	f022 0201 	bic.w	r2, r2, #1
 800d61e:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM4RST;
 800d620:	691a      	ldr	r2, [r3, #16]
 800d622:	f042 0204 	orr.w	r2, r2, #4
 800d626:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST;
 800d628:	691a      	ldr	r2, [r3, #16]
	htim4.State = HAL_TIM_STATE_RESET;
 800d62a:	2100      	movs	r1, #0
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST;
 800d62c:	f022 0204 	bic.w	r2, r2, #4
 800d630:	611a      	str	r2, [r3, #16]
	htim4.State = HAL_TIM_STATE_RESET;
 800d632:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
	htim2.State = HAL_TIM_STATE_RESET;
 800d636:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63c:	01db      	lsls	r3, r3, #7
void TIM_counter_ti_init(void){
 800d63e:	b08c      	sub	sp, #48	; 0x30
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d640:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d644:	d47c      	bmi.n	800d740 <TIM_counter_ti_init+0x138>
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d646:	f7f9 fe37 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d64a:	4b43      	ldr	r3, [pc, #268]	; (800d758 <TIM_counter_ti_init+0x150>)
 800d64c:	6018      	str	r0, [r3, #0]
	htim2.Instance = TIM2;
 800d64e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 800d652:	2500      	movs	r5, #0
	MX_TIM4_Init();
 800d654:	f7ff fcce 	bl	800cff4 <MX_TIM4_Init>
	htim2.Init.Period = 0xFFFFFFFF;
 800d658:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d65c:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800d65e:	483d      	ldr	r0, [pc, #244]	; (800d754 <TIM_counter_ti_init+0x14c>)
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d660:	61b3      	str	r3, [r6, #24]
	htim2.Init.Period = 0xFFFFFFFF;
 800d662:	e9c6 2503 	strd	r2, r5, [r6, #12]
	htim2.Init.Prescaler = 0;
 800d666:	e9c6 4500 	strd	r4, r5, [r6]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d66a:	60b5      	str	r5, [r6, #8]
	HAL_TIM_Base_Init(&htim2);
 800d66c:	f7f9 ffee 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d670:	a90c      	add	r1, sp, #48	; 0x30
 800d672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d676:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d67a:	4836      	ldr	r0, [pc, #216]	; (800d754 <TIM_counter_ti_init+0x14c>)
 800d67c:	f7fa fca2 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800d680:	4834      	ldr	r0, [pc, #208]	; (800d754 <TIM_counter_ti_init+0x14c>)
 800d682:	f7fa fa99 	bl	8007bb8 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d686:	a901      	add	r1, sp, #4
 800d688:	4832      	ldr	r0, [pc, #200]	; (800d754 <TIM_counter_ti_init+0x14c>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d68a:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d68c:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d68e:	f7fb f8d7 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d692:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d694:	462a      	mov	r2, r5
 800d696:	a908      	add	r1, sp, #32
 800d698:	482e      	ldr	r0, [pc, #184]	; (800d754 <TIM_counter_ti_init+0x14c>)
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d69a:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800d69c:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800d69e:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d6a2:	f7fa fbcd 	bl	8007e40 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800d6a6:	a908      	add	r1, sp, #32
 800d6a8:	2204      	movs	r2, #4
 800d6aa:	482a      	ldr	r0, [pc, #168]	; (800d754 <TIM_counter_ti_init+0x14c>)
 800d6ac:	f7fa fbc8 	bl	8007e40 <HAL_TIM_IC_ConfigChannel>
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;  	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1	*/
 800d6b0:	69a3      	ldr	r3, [r4, #24]
void TIM_TI_Init(void)
{
	/* Do not run timer after initialization, wait for start command */
	TIM2->CR1 &= ~TIM_CR1_CEN;
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 800d6b2:	4827      	ldr	r0, [pc, #156]	; (800d750 <TIM_counter_ti_init+0x148>)
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;  	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1	*/
 800d6b4:	f043 0301 	orr.w	r3, r3, #1
 800d6b8:	61a3      	str	r3, [r4, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;		/* IC2 is mapped on TI2 */
 800d6ba:	69a3      	ldr	r3, [r4, #24]
 800d6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6c0:	61a3      	str	r3, [r4, #24]
	TIM2->CCER |= TIM_CCER_CC1E;				/* CC1 channel configured as input: This bit determines if a capture of the counter value can
 800d6c2:	6a23      	ldr	r3, [r4, #32]
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	6223      	str	r3, [r4, #32]
	TIM2->CCER |= TIM_CCER_CC2E;
 800d6ca:	6a23      	ldr	r3, [r4, #32]
 800d6cc:	f043 0310 	orr.w	r3, r3, #16
 800d6d0:	6223      	str	r3, [r4, #32]
	TIM2->DIER |= TIM_DIER_CC1DE;				/* Capture/Compare 1 DMA request */
 800d6d2:	68e3      	ldr	r3, [r4, #12]
 800d6d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d6d8:	60e3      	str	r3, [r4, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;				/* Capture/Compare 1 DMA request */
 800d6da:	68e3      	ldr	r3, [r4, #12]
 800d6dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d6e0:	60e3      	str	r3, [r4, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	f023 0301 	bic.w	r3, r3, #1
 800d6e8:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800d6ea:	f7fa f89b 	bl	8007824 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800d6ee:	6a23      	ldr	r3, [r4, #32]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
	TIM2->SMCR |= TIM_SMCR_SMS_3;

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 800d6f0:	4a1a      	ldr	r2, [pc, #104]	; (800d75c <TIM_counter_ti_init+0x154>)
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800d6f2:	f023 0301 	bic.w	r3, r3, #1
 800d6f6:	6223      	str	r3, [r4, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800d6f8:	6a23      	ldr	r3, [r4, #32]
 800d6fa:	f023 0310 	bic.w	r3, r3, #16
 800d6fe:	6223      	str	r3, [r4, #32]
	TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d700:	69a3      	ldr	r3, [r4, #24]
 800d702:	f023 030c 	bic.w	r3, r3, #12
 800d706:	61a3      	str	r3, [r4, #24]
	TIM2->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d708:	69a3      	ldr	r3, [r4, #24]
 800d70a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d70e:	61a3      	str	r3, [r4, #24]
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d716:	60a3      	str	r3, [r4, #8]
	TIM2->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800d718:	68a3      	ldr	r3, [r4, #8]
 800d71a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800d71e:	60a3      	str	r3, [r4, #8]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800d720:	68a3      	ldr	r3, [r4, #8]
 800d722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d726:	f023 0307 	bic.w	r3, r3, #7
 800d72a:	60a3      	str	r3, [r4, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_3;
 800d72c:	68a3      	ldr	r3, [r4, #8]
 800d72e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d732:	60a3      	str	r3, [r4, #8]
	counter.bin = BIN0;
 800d734:	f882 53c2 	strb.w	r5, [r2, #962]	; 0x3c2
	/* AB event sequence first */
	counter.abba = BIN0;
 800d738:	f882 53c3 	strb.w	r5, [r2, #963]	; 0x3c3
}
 800d73c:	b00c      	add	sp, #48	; 0x30
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
		tim2clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d740:	f7f9 fdba 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d744:	4b04      	ldr	r3, [pc, #16]	; (800d758 <TIM_counter_ti_init+0x150>)
 800d746:	0040      	lsls	r0, r0, #1
 800d748:	6018      	str	r0, [r3, #0]
 800d74a:	e780      	b.n	800d64e <TIM_counter_ti_init+0x46>
 800d74c:	40021000 	.word	0x40021000
 800d750:	2000d13c 	.word	0x2000d13c
 800d754:	2000d208 	.word	0x2000d208
 800d758:	2000d248 	.word	0x2000d248
 800d75c:	20004848 	.word	0x20004848

0800d760 <TIM_etr_deinit>:
void TIM_etr_deinit(void){
 800d760:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800d762:	4804      	ldr	r0, [pc, #16]	; (800d774 <TIM_etr_deinit+0x14>)
 800d764:	f7fa f80c 	bl	8007780 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800d768:	4803      	ldr	r0, [pc, #12]	; (800d778 <TIM_etr_deinit+0x18>)
}
 800d76a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800d76e:	f7fa b807 	b.w	8007780 <HAL_TIM_Base_DeInit>
 800d772:	bf00      	nop
 800d774:	2000d208 	.word	0x2000d208
 800d778:	2000d13c 	.word	0x2000d13c

0800d77c <TIM_ref_deinit>:
 800d77c:	b508      	push	{r3, lr}
 800d77e:	4804      	ldr	r0, [pc, #16]	; (800d790 <TIM_ref_deinit+0x14>)
 800d780:	f7f9 fffe 	bl	8007780 <HAL_TIM_Base_DeInit>
 800d784:	4803      	ldr	r0, [pc, #12]	; (800d794 <TIM_ref_deinit+0x18>)
 800d786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d78a:	f7f9 bff9 	b.w	8007780 <HAL_TIM_Base_DeInit>
 800d78e:	bf00      	nop
 800d790:	2000d208 	.word	0x2000d208
 800d794:	2000d13c 	.word	0x2000d13c

0800d798 <TIM_ic_deinit>:
 800d798:	b508      	push	{r3, lr}
 800d79a:	4804      	ldr	r0, [pc, #16]	; (800d7ac <TIM_ic_deinit+0x14>)
 800d79c:	f7f9 fff0 	bl	8007780 <HAL_TIM_Base_DeInit>
 800d7a0:	4803      	ldr	r0, [pc, #12]	; (800d7b0 <TIM_ic_deinit+0x18>)
 800d7a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d7a6:	f7f9 bfeb 	b.w	8007780 <HAL_TIM_Base_DeInit>
 800d7aa:	bf00      	nop
 800d7ac:	2000d208 	.word	0x2000d208
 800d7b0:	2000d13c 	.word	0x2000d13c

0800d7b4 <TIM_ti_deinit>:
void TIM_ti_deinit(void){
 800d7b4:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800d7b6:	4811      	ldr	r0, [pc, #68]	; (800d7fc <TIM_ti_deinit+0x48>)
 800d7b8:	f7f9 ffe2 	bl	8007780 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800d7bc:	4810      	ldr	r0, [pc, #64]	; (800d800 <TIM_ti_deinit+0x4c>)
 800d7be:	f7f9 ffdf 	bl	8007780 <HAL_TIM_Base_DeInit>
 * @retval None
 */
void TIM_TI_Deinit(void)
{
	/* Disable capturing*/
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800d7c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7c6:	6a1a      	ldr	r2, [r3, #32]
 800d7c8:	f022 0201 	bic.w	r2, r2, #1
 800d7cc:	621a      	str	r2, [r3, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800d7ce:	6a1a      	ldr	r2, [r3, #32]
 800d7d0:	f022 0210 	bic.w	r2, r2, #16
 800d7d4:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7d6:	6a1a      	ldr	r2, [r3, #32]
 800d7d8:	f022 020a 	bic.w	r2, r2, #10
 800d7dc:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7de:	6a1a      	ldr	r2, [r3, #32]
 800d7e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d7e4:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800d7e6:	689a      	ldr	r2, [r3, #8]
 800d7e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d7ec:	609a      	str	r2, [r3, #8]
	/* Disable the slave mode controller */
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d7f4:	f022 0207 	bic.w	r2, r2, #7
 800d7f8:	609a      	str	r2, [r3, #8]
}
 800d7fa:	bd08      	pop	{r3, pc}
 800d7fc:	2000d208 	.word	0x2000d208
 800d800:	2000d13c 	.word	0x2000d13c

0800d804 <TIM_ETR_Start>:
{
 800d804:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim2);
 800d806:	480f      	ldr	r0, [pc, #60]	; (800d844 <TIM_ETR_Start+0x40>)
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&(TIM2->CCR1), (uint32_t)&counter.counterEtr.buffer, 1);
 800d808:	4c0f      	ldr	r4, [pc, #60]	; (800d848 <TIM_ETR_Start+0x44>)
	HAL_TIM_Base_Start(&htim2);
 800d80a:	f7f9 ffd7 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800d80e:	480f      	ldr	r0, [pc, #60]	; (800d84c <TIM_ETR_Start+0x48>)
 800d810:	f7f9 ffd4 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&(TIM2->CCR1), (uint32_t)&counter.counterEtr.buffer, 1);
 800d814:	4622      	mov	r2, r4
 800d816:	2301      	movs	r3, #1
 800d818:	490d      	ldr	r1, [pc, #52]	; (800d850 <TIM_ETR_Start+0x4c>)
 800d81a:	480e      	ldr	r0, [pc, #56]	; (800d854 <TIM_ETR_Start+0x50>)
 800d81c:	f7f8 fd20 	bl	8006260 <HAL_DMA_Start_IT>
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM4->EGR |= TIM_EGR_UG;
 800d824:	490c      	ldr	r1, [pc, #48]	; (800d858 <TIM_ETR_Start+0x54>)
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d826:	68da      	ldr	r2, [r3, #12]
 800d828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d82c:	60da      	str	r2, [r3, #12]
	TIM2->CCER |= TIM_CCER_CC1E;
 800d82e:	6a1a      	ldr	r2, [r3, #32]
 800d830:	f042 0201 	orr.w	r2, r2, #1
 800d834:	621a      	str	r2, [r3, #32]
	TIM4->EGR |= TIM_EGR_UG;
 800d836:	694b      	ldr	r3, [r1, #20]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d838:	2200      	movs	r2, #0
	TIM4->EGR |= TIM_EGR_UG;
 800d83a:	f043 0301 	orr.w	r3, r3, #1
 800d83e:	614b      	str	r3, [r1, #20]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d840:	7562      	strb	r2, [r4, #21]
}
 800d842:	bd10      	pop	{r4, pc}
 800d844:	2000d208 	.word	0x2000d208
 800d848:	20004bec 	.word	0x20004bec
 800d84c:	2000d13c 	.word	0x2000d13c
 800d850:	40000034 	.word	0x40000034
 800d854:	2000d17c 	.word	0x2000d17c
 800d858:	40000800 	.word	0x40000800

0800d85c <TIM_ETR_Stop>:
{
 800d85c:	b508      	push	{r3, lr}
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 800d85e:	4808      	ldr	r0, [pc, #32]	; (800d880 <TIM_ETR_Stop+0x24>)
 800d860:	f7f8 fd58 	bl	8006314 <HAL_DMA_Abort_IT>
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800d864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	HAL_TIM_Base_Stop(&htim2);
 800d868:	4806      	ldr	r0, [pc, #24]	; (800d884 <TIM_ETR_Stop+0x28>)
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800d86a:	68d3      	ldr	r3, [r2, #12]
 800d86c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d870:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Stop(&htim2);
 800d872:	f7f9 ffb3 	bl	80077dc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800d876:	4804      	ldr	r0, [pc, #16]	; (800d888 <TIM_ETR_Stop+0x2c>)
}
 800d878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim4);
 800d87c:	f7f9 bfae 	b.w	80077dc <HAL_TIM_Base_Stop>
 800d880:	2000d17c 	.word	0x2000d17c
 800d884:	2000d208 	.word	0x2000d208
 800d888:	2000d13c 	.word	0x2000d13c

0800d88c <TIM_IC_Start>:
{
 800d88c:	b538      	push	{r3, r4, r5, lr}
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d88e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d892:	4d13      	ldr	r5, [pc, #76]	; (800d8e0 <TIM_IC_Start+0x54>)
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d894:	68e3      	ldr	r3, [r4, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d896:	4913      	ldr	r1, [pc, #76]	; (800d8e4 <TIM_IC_Start+0x58>)
 800d898:	4813      	ldr	r0, [pc, #76]	; (800d8e8 <TIM_IC_Start+0x5c>)
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d89a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d89e:	60e3      	str	r3, [r4, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;
 800d8a0:	68e3      	ldr	r3, [r4, #12]
 800d8a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d8a6:	60e3      	str	r3, [r4, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d8a8:	88eb      	ldrh	r3, [r5, #6]
 800d8aa:	f105 0210 	add.w	r2, r5, #16
 800d8ae:	f7f8 fca5 	bl	80061fc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800d8b2:	892b      	ldrh	r3, [r5, #8]
 800d8b4:	490d      	ldr	r1, [pc, #52]	; (800d8ec <TIM_IC_Start+0x60>)
 800d8b6:	480e      	ldr	r0, [pc, #56]	; (800d8f0 <TIM_IC_Start+0x64>)
 800d8b8:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800d8bc:	f7f8 fc9e 	bl	80061fc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 800d8c0:	480c      	ldr	r0, [pc, #48]	; (800d8f4 <TIM_IC_Start+0x68>)
 800d8c2:	f7f9 ff7b 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800d8c6:	480c      	ldr	r0, [pc, #48]	; (800d8f8 <TIM_IC_Start+0x6c>)
 800d8c8:	f7f9 ffa0 	bl	800780c <HAL_TIM_Base_Start_IT>
	TIM2->CCER |= TIM_CCER_CC2E;
 800d8cc:	6a23      	ldr	r3, [r4, #32]
 800d8ce:	f043 0310 	orr.w	r3, r3, #16
 800d8d2:	6223      	str	r3, [r4, #32]
	TIM2->CCER |= TIM_CCER_CC1E;
 800d8d4:	6a23      	ldr	r3, [r4, #32]
 800d8d6:	f043 0301 	orr.w	r3, r3, #1
 800d8da:	6223      	str	r3, [r4, #32]
}
 800d8dc:	bd38      	pop	{r3, r4, r5, pc}
 800d8de:	bf00      	nop
 800d8e0:	20004848 	.word	0x20004848
 800d8e4:	40000034 	.word	0x40000034
 800d8e8:	2000d0f8 	.word	0x2000d0f8
 800d8ec:	40000038 	.word	0x40000038
 800d8f0:	2000d1c4 	.word	0x2000d1c4
 800d8f4:	2000d208 	.word	0x2000d208
 800d8f8:	2000d13c 	.word	0x2000d13c

0800d8fc <TIM_IC_Stop>:
{
 800d8fc:	b510      	push	{r4, lr}
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800d8fe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d902:	480f      	ldr	r0, [pc, #60]	; (800d940 <TIM_IC_Stop+0x44>)
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800d904:	6a23      	ldr	r3, [r4, #32]
 800d906:	f023 0301 	bic.w	r3, r3, #1
 800d90a:	6223      	str	r3, [r4, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800d90c:	6a23      	ldr	r3, [r4, #32]
 800d90e:	f023 0310 	bic.w	r3, r3, #16
 800d912:	6223      	str	r3, [r4, #32]
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d914:	f7f8 fce4 	bl	80062e0 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d918:	480a      	ldr	r0, [pc, #40]	; (800d944 <TIM_IC_Stop+0x48>)
 800d91a:	f7f8 fce1 	bl	80062e0 <HAL_DMA_Abort>
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800d91e:	68e3      	ldr	r3, [r4, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 800d920:	4809      	ldr	r0, [pc, #36]	; (800d948 <TIM_IC_Stop+0x4c>)
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800d922:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d926:	60e3      	str	r3, [r4, #12]
	TIM2->DIER &= ~TIM_DIER_CC2DE;
 800d928:	68e3      	ldr	r3, [r4, #12]
 800d92a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d92e:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 800d930:	f7f9 ff78 	bl	8007824 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800d934:	4805      	ldr	r0, [pc, #20]	; (800d94c <TIM_IC_Stop+0x50>)
}
 800d936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim2);
 800d93a:	f7f9 bf4f 	b.w	80077dc <HAL_TIM_Base_Stop>
 800d93e:	bf00      	nop
 800d940:	2000d0f8 	.word	0x2000d0f8
 800d944:	2000d1c4 	.word	0x2000d1c4
 800d948:	2000d13c 	.word	0x2000d13c
 800d94c:	2000d208 	.word	0x2000d208

0800d950 <TIM_TI_Start>:
{
 800d950:	b510      	push	{r4, lr}
	if(counter.abba == BIN1){
 800d952:	4c64      	ldr	r4, [pc, #400]	; (800dae4 <TIM_TI_Start+0x194>)
	xStartTime = xTaskGetTickCount();
 800d954:	f7fc f9ee 	bl	8009d34 <xTaskGetTickCount>
	if(counter.abba == BIN1){
 800d958:	f894 33c3 	ldrb.w	r3, [r4, #963]	; 0x3c3
	xStartTime = xTaskGetTickCount();
 800d95c:	4a62      	ldr	r2, [pc, #392]	; (800dae8 <TIM_TI_Start+0x198>)
	if(counter.abba == BIN1){
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b01      	cmp	r3, #1
	xStartTime = xTaskGetTickCount();
 800d962:	6010      	str	r0, [r2, #0]
	if(counter.abba == BIN1){
 800d964:	d05d      	beq.n	800da22 <TIM_TI_Start+0xd2>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d966:	2301      	movs	r3, #1
 800d968:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 800d96c:	495f      	ldr	r1, [pc, #380]	; (800daec <TIM_TI_Start+0x19c>)
 800d96e:	4860      	ldr	r0, [pc, #384]	; (800daf0 <TIM_TI_Start+0x1a0>)
 800d970:	f7f8 fc44 	bl	80061fc <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800d974:	f894 33bf 	ldrb.w	r3, [r4, #959]	; 0x3bf
 800d978:	b1db      	cbz	r3, 800d9b2 <TIM_TI_Start+0x62>
	HAL_TIM_Base_Start(&htim2);
 800d97a:	485e      	ldr	r0, [pc, #376]	; (800daf4 <TIM_TI_Start+0x1a4>)
 800d97c:	f7f9 ff1e 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800d980:	485d      	ldr	r0, [pc, #372]	; (800daf8 <TIM_TI_Start+0x1a8>)
 800d982:	f7f9 ff43 	bl	800780c <HAL_TIM_Base_Start_IT>
	TIM2->DIER |= TIM_DIER_CC1DE;
 800d986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d98a:	68da      	ldr	r2, [r3, #12]
 800d98c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d990:	60da      	str	r2, [r3, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;
 800d992:	68da      	ldr	r2, [r3, #12]
 800d994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d998:	60da      	str	r2, [r3, #12]
	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 800d99a:	f894 23bf 	ldrb.w	r2, [r4, #959]	; 0x3bf
 800d99e:	b13a      	cbz	r2, 800d9b0 <TIM_TI_Start+0x60>
		TIM2->CCER |= TIM_CCER_CC1E;
 800d9a0:	6a1a      	ldr	r2, [r3, #32]
 800d9a2:	f042 0201 	orr.w	r2, r2, #1
 800d9a6:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= TIM_CCER_CC2E;
 800d9a8:	6a1a      	ldr	r2, [r3, #32]
 800d9aa:	f042 0210 	orr.w	r2, r2, #16
 800d9ae:	621a      	str	r2, [r3, #32]
}
 800d9b0:	bd10      	pop	{r4, pc}
 800d9b2:	4a52      	ldr	r2, [pc, #328]	; (800dafc <TIM_TI_Start+0x1ac>)
			if(counter.eventChan2==EVENT_FALLING){
 800d9b4:	f894 13c1 	ldrb.w	r1, [r4, #961]	; 0x3c1
 800d9b8:	6813      	ldr	r3, [r2, #0]
 800d9ba:	2901      	cmp	r1, #1
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
	if(counter.eventChan1==EVENT_RISING){
 800d9bc:	f894 13c0 	ldrb.w	r1, [r4, #960]	; 0x3c0
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 800d9c0:	bf0c      	ite	eq
 800d9c2:	f043 0320 	orreq.w	r3, r3, #32
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 800d9c6:	f023 0320 	bicne.w	r3, r3, #32
 800d9ca:	6013      	str	r3, [r2, #0]
	if(counter.eventChan1==EVENT_RISING){
 800d9cc:	2900      	cmp	r1, #0
 800d9ce:	d066      	beq.n	800da9e <TIM_TI_Start+0x14e>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
	}else{
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d9d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9d4:	6a1a      	ldr	r2, [r3, #32]
 800d9d6:	f022 0208 	bic.w	r2, r2, #8
 800d9da:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d9dc:	6a1a      	ldr	r2, [r3, #32]
 800d9de:	f042 0202 	orr.w	r2, r2, #2
 800d9e2:	621a      	str	r2, [r3, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 800d9e4:	f894 33c1 	ldrb.w	r3, [r4, #961]	; 0x3c1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d062      	beq.n	800dab2 <TIM_TI_Start+0x162>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
	}else{
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d9ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9f0:	6a1a      	ldr	r2, [r3, #32]
 800d9f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9f6:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d9f8:	6a1a      	ldr	r2, [r3, #32]
 800d9fa:	f042 0220 	orr.w	r2, r2, #32
 800d9fe:	621a      	str	r2, [r3, #32]
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)TIM2_CCER_ADDR, 1);
 800da00:	2301      	movs	r3, #1
 800da02:	4a3f      	ldr	r2, [pc, #252]	; (800db00 <TIM_TI_Start+0x1b0>)
 800da04:	493d      	ldr	r1, [pc, #244]	; (800dafc <TIM_TI_Start+0x1ac>)
 800da06:	483f      	ldr	r0, [pc, #252]	; (800db04 <TIM_TI_Start+0x1b4>)
 800da08:	f7f8 fbf8 	bl	80061fc <HAL_DMA_Start>
			TIM2->CCER &= ~TIM_CCER_CC2E;
 800da0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da10:	6a1a      	ldr	r2, [r3, #32]
 800da12:	f022 0210 	bic.w	r2, r2, #16
 800da16:	621a      	str	r2, [r3, #32]
			TIM2->CCER |= TIM_CCER_CC1E;
 800da18:	6a1a      	ldr	r2, [r3, #32]
 800da1a:	f042 0201 	orr.w	r2, r2, #1
 800da1e:	621a      	str	r2, [r3, #32]
 800da20:	e7ab      	b.n	800d97a <TIM_TI_Start+0x2a>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800da22:	f104 0210 	add.w	r2, r4, #16
 800da26:	4938      	ldr	r1, [pc, #224]	; (800db08 <TIM_TI_Start+0x1b8>)
 800da28:	4836      	ldr	r0, [pc, #216]	; (800db04 <TIM_TI_Start+0x1b4>)
 800da2a:	f7f8 fbe7 	bl	80061fc <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800da2e:	f894 33bf 	ldrb.w	r3, [r4, #959]	; 0x3bf
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1a1      	bne.n	800d97a <TIM_TI_Start+0x2a>
 800da36:	4a35      	ldr	r2, [pc, #212]	; (800db0c <TIM_TI_Start+0x1bc>)
			if(counter.eventChan1==EVENT_FALLING){
 800da38:	f894 13c0 	ldrb.w	r1, [r4, #960]	; 0x3c0
 800da3c:	6813      	ldr	r3, [r2, #0]
 800da3e:	2901      	cmp	r1, #1
	if(counter.eventChan1==EVENT_RISING){
 800da40:	f894 13c0 	ldrb.w	r1, [r4, #960]	; 0x3c0
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 800da44:	bf0c      	ite	eq
 800da46:	f043 0302 	orreq.w	r3, r3, #2
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 800da4a:	f023 0302 	bicne.w	r3, r3, #2
 800da4e:	6013      	str	r3, [r2, #0]
	if(counter.eventChan1==EVENT_RISING){
 800da50:	2900      	cmp	r1, #0
 800da52:	d135      	bne.n	800dac0 <TIM_TI_Start+0x170>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800da58:	6a13      	ldr	r3, [r2, #32]
 800da5a:	f023 030a 	bic.w	r3, r3, #10
 800da5e:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 800da60:	f894 33c1 	ldrb.w	r3, [r4, #961]	; 0x3c1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d036      	beq.n	800dad6 <TIM_TI_Start+0x186>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800da68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da6c:	6a1a      	ldr	r2, [r3, #32]
 800da6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da72:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800da74:	6a1a      	ldr	r2, [r3, #32]
 800da76:	f042 0220 	orr.w	r2, r2, #32
 800da7a:	621a      	str	r2, [r3, #32]
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)TIM2_CCER_ADDR, 1);
 800da7c:	2301      	movs	r3, #1
 800da7e:	4a20      	ldr	r2, [pc, #128]	; (800db00 <TIM_TI_Start+0x1b0>)
 800da80:	4922      	ldr	r1, [pc, #136]	; (800db0c <TIM_TI_Start+0x1bc>)
 800da82:	481b      	ldr	r0, [pc, #108]	; (800daf0 <TIM_TI_Start+0x1a0>)
 800da84:	f7f8 fbba 	bl	80061fc <HAL_DMA_Start>
			TIM2->CCER &= ~TIM_CCER_CC1E;
 800da88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da8c:	6a1a      	ldr	r2, [r3, #32]
 800da8e:	f022 0201 	bic.w	r2, r2, #1
 800da92:	621a      	str	r2, [r3, #32]
			TIM2->CCER |= TIM_CCER_CC2E;
 800da94:	6a1a      	ldr	r2, [r3, #32]
 800da96:	f042 0210 	orr.w	r2, r2, #16
 800da9a:	621a      	str	r2, [r3, #32]
 800da9c:	e76d      	b.n	800d97a <TIM_TI_Start+0x2a>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800daa2:	6a13      	ldr	r3, [r2, #32]
 800daa4:	f023 030a 	bic.w	r3, r3, #10
 800daa8:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 800daaa:	f894 33c1 	ldrb.w	r3, [r4, #961]	; 0x3c1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d19c      	bne.n	800d9ec <TIM_TI_Start+0x9c>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dab6:	6a13      	ldr	r3, [r2, #32]
 800dab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dabc:	6213      	str	r3, [r2, #32]
 800dabe:	e79f      	b.n	800da00 <TIM_TI_Start+0xb0>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800dac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dac4:	6a1a      	ldr	r2, [r3, #32]
 800dac6:	f022 0208 	bic.w	r2, r2, #8
 800daca:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800dacc:	6a1a      	ldr	r2, [r3, #32]
 800dace:	f042 0202 	orr.w	r2, r2, #2
 800dad2:	621a      	str	r2, [r3, #32]
 800dad4:	e7c4      	b.n	800da60 <TIM_TI_Start+0x110>
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dada:	6a13      	ldr	r3, [r2, #32]
 800dadc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dae0:	6213      	str	r3, [r2, #32]
 800dae2:	e7cb      	b.n	800da7c <TIM_TI_Start+0x12c>
 800dae4:	20004848 	.word	0x20004848
 800dae8:	20004840 	.word	0x20004840
 800daec:	40000038 	.word	0x40000038
 800daf0:	2000d1c4 	.word	0x2000d1c4
 800daf4:	2000d208 	.word	0x2000d208
 800daf8:	2000d13c 	.word	0x2000d13c
 800dafc:	2000000c 	.word	0x2000000c
 800db00:	40000020 	.word	0x40000020
 800db04:	2000d0f8 	.word	0x2000d0f8
 800db08:	40000034 	.word	0x40000034
 800db0c:	20000008 	.word	0x20000008

0800db10 <TIM_TI_Stop>:
{
 800db10:	b508      	push	{r3, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800db12:	480f      	ldr	r0, [pc, #60]	; (800db50 <TIM_TI_Stop+0x40>)
 800db14:	f7f8 fbe4 	bl	80062e0 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800db18:	480e      	ldr	r0, [pc, #56]	; (800db54 <TIM_TI_Stop+0x44>)
 800db1a:	f7f8 fbe1 	bl	80062e0 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop_IT(&htim4);
 800db1e:	480e      	ldr	r0, [pc, #56]	; (800db58 <TIM_TI_Stop+0x48>)
 800db20:	f7f9 fe80 	bl	8007824 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800db24:	480d      	ldr	r0, [pc, #52]	; (800db5c <TIM_TI_Stop+0x4c>)
 800db26:	f7f9 fe59 	bl	80077dc <HAL_TIM_Base_Stop>
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800db2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db2e:	6a1a      	ldr	r2, [r3, #32]
 800db30:	f022 0201 	bic.w	r2, r2, #1
 800db34:	621a      	str	r2, [r3, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800db36:	6a1a      	ldr	r2, [r3, #32]
 800db38:	f022 0210 	bic.w	r2, r2, #16
 800db3c:	621a      	str	r2, [r3, #32]
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800db3e:	68da      	ldr	r2, [r3, #12]
 800db40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800db44:	60da      	str	r2, [r3, #12]
	TIM2->DIER &= ~TIM_DIER_CC2DE;
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db4c:	60da      	str	r2, [r3, #12]
}
 800db4e:	bd08      	pop	{r3, pc}
 800db50:	2000d0f8 	.word	0x2000d0f8
 800db54:	2000d1c4 	.word	0x2000d1c4
 800db58:	2000d13c 	.word	0x2000d13c
 800db5c:	2000d208 	.word	0x2000d208

0800db60 <TIM_IC_DutyCycleDmaRestart>:
{
 800db60:	b570      	push	{r4, r5, r6, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800db62:	4e0c      	ldr	r6, [pc, #48]	; (800db94 <TIM_IC_DutyCycleDmaRestart+0x34>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800db64:	4c0c      	ldr	r4, [pc, #48]	; (800db98 <TIM_IC_DutyCycleDmaRestart+0x38>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800db66:	4d0d      	ldr	r5, [pc, #52]	; (800db9c <TIM_IC_DutyCycleDmaRestart+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800db68:	4630      	mov	r0, r6
 800db6a:	f7f8 fbb9 	bl	80062e0 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800db6e:	4620      	mov	r0, r4
 800db70:	f7f8 fbb6 	bl	80062e0 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800db74:	462a      	mov	r2, r5
 800db76:	4630      	mov	r0, r6
 800db78:	2301      	movs	r3, #1
 800db7a:	4909      	ldr	r1, [pc, #36]	; (800dba0 <TIM_IC_DutyCycleDmaRestart+0x40>)
 800db7c:	f7f8 fb3e 	bl	80061fc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800db80:	f505 72dc 	add.w	r2, r5, #440	; 0x1b8
 800db84:	4620      	mov	r0, r4
 800db86:	2301      	movs	r3, #1
 800db88:	4906      	ldr	r1, [pc, #24]	; (800dba4 <TIM_IC_DutyCycleDmaRestart+0x44>)
}
 800db8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800db8e:	f7f8 bb35 	b.w	80061fc <HAL_DMA_Start>
 800db92:	bf00      	nop
 800db94:	2000d0f8 	.word	0x2000d0f8
 800db98:	2000d1c4 	.word	0x2000d1c4
 800db9c:	20004858 	.word	0x20004858
 800dba0:	40000034 	.word	0x40000034
 800dba4:	40000038 	.word	0x40000038

0800dba8 <TIM_IC_DutyCycle_Init>:
{
 800dba8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 800dbaa:	4837      	ldr	r0, [pc, #220]	; (800dc88 <TIM_IC_DutyCycle_Init+0xe0>)
 800dbac:	f7f9 fe3a 	bl	8007824 <HAL_TIM_Base_Stop_IT>
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800dbb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800dbb4:	4935      	ldr	r1, [pc, #212]	; (800dc8c <TIM_IC_DutyCycle_Init+0xe4>)
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800dbb6:	6a1a      	ldr	r2, [r3, #32]
 800dbb8:	f022 0201 	bic.w	r2, r2, #1
 800dbbc:	621a      	str	r2, [r3, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800dbbe:	6a1a      	ldr	r2, [r3, #32]
 800dbc0:	f022 0210 	bic.w	r2, r2, #16
 800dbc4:	621a      	str	r2, [r3, #32]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800dbc6:	f891 23bd 	ldrb.w	r2, [r1, #957]	; 0x3bd
 800dbca:	2a01      	cmp	r2, #1
		TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dbcc:	699a      	ldr	r2, [r3, #24]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800dbce:	d033      	beq.n	800dc38 <TIM_IC_DutyCycle_Init+0x90>
		TIM2->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dbd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dbd4:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 800dbd6:	699a      	ldr	r2, [r3, #24]
 800dbd8:	f022 0203 	bic.w	r2, r2, #3
 800dbdc:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_CC1S_1;
 800dbde:	699a      	ldr	r2, [r3, #24]
 800dbe0:	f042 0202 	orr.w	r2, r2, #2
 800dbe4:	619a      	str	r2, [r3, #24]
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800dbe6:	6a1a      	ldr	r2, [r3, #32]
 800dbe8:	f022 0208 	bic.w	r2, r2, #8
 800dbec:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800dbee:	6a1a      	ldr	r2, [r3, #32]
 800dbf0:	f042 0202 	orr.w	r2, r2, #2
 800dbf4:	621a      	str	r2, [r3, #32]
		TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;
 800dbf6:	699a      	ldr	r2, [r3, #24]
 800dbf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dbfc:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;
 800dbfe:	699a      	ldr	r2, [r3, #24]
 800dc00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc04:	619a      	str	r2, [r3, #24]
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc06:	6a1a      	ldr	r2, [r3, #32]
 800dc08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dc0c:	621a      	str	r2, [r3, #32]
		TIM2->SMCR &= ~TIM_SMCR_TS;
 800dc0e:	689a      	ldr	r2, [r3, #8]
 800dc10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dc14:	609a      	str	r2, [r3, #8]
		TIM2->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800dc16:	689a      	ldr	r2, [r3, #8]
 800dc18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800dc1c:	609a      	str	r2, [r3, #8]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800dc1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc22:	6893      	ldr	r3, [r2, #8]
 800dc24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc28:	f023 0307 	bic.w	r3, r3, #7
 800dc2c:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_2;
 800dc2e:	6893      	ldr	r3, [r2, #8]
 800dc30:	f043 0304 	orr.w	r3, r3, #4
 800dc34:	6093      	str	r3, [r2, #8]
}
 800dc36:	bd08      	pop	{r3, pc}
		TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dc38:	f022 020c 	bic.w	r2, r2, #12
 800dc3c:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 800dc3e:	699a      	ldr	r2, [r3, #24]
 800dc40:	f022 0203 	bic.w	r2, r2, #3
 800dc44:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 800dc46:	699a      	ldr	r2, [r3, #24]
 800dc48:	f042 0201 	orr.w	r2, r2, #1
 800dc4c:	619a      	str	r2, [r3, #24]
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc4e:	6a1a      	ldr	r2, [r3, #32]
 800dc50:	f022 020a 	bic.w	r2, r2, #10
 800dc54:	621a      	str	r2, [r3, #32]
		TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;
 800dc56:	699a      	ldr	r2, [r3, #24]
 800dc58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dc5c:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_CC2S_1;
 800dc5e:	699a      	ldr	r2, [r3, #24]
 800dc60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc64:	619a      	str	r2, [r3, #24]
		TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800dc66:	6a1a      	ldr	r2, [r3, #32]
 800dc68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc6c:	621a      	str	r2, [r3, #32]
		TIM2->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800dc6e:	6a1a      	ldr	r2, [r3, #32]
 800dc70:	f042 0220 	orr.w	r2, r2, #32
 800dc74:	621a      	str	r2, [r3, #32]
		TIM2->SMCR &= ~TIM_SMCR_TS;
 800dc76:	689a      	ldr	r2, [r3, #8]
 800dc78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dc7c:	609a      	str	r2, [r3, #8]
		TIM2->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800dc7e:	689a      	ldr	r2, [r3, #8]
 800dc80:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800dc84:	609a      	str	r2, [r3, #8]
 800dc86:	e7ca      	b.n	800dc1e <TIM_IC_DutyCycle_Init+0x76>
 800dc88:	2000d13c 	.word	0x2000d13c
 800dc8c:	20004848 	.word	0x20004848

0800dc90 <TIM_IC_DutyCycle_Deinit>:
{
 800dc90:	b538      	push	{r3, r4, r5, lr}
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 800dc92:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800dc96:	4d22      	ldr	r5, [pc, #136]	; (800dd20 <TIM_IC_DutyCycle_Deinit+0x90>)
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 800dc98:	69a3      	ldr	r3, [r4, #24]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800dc9a:	4922      	ldr	r1, [pc, #136]	; (800dd24 <TIM_IC_DutyCycle_Deinit+0x94>)
 800dc9c:	4822      	ldr	r0, [pc, #136]	; (800dd28 <TIM_IC_DutyCycle_Deinit+0x98>)
	TIM2->CCMR1 &= ~TIM_CCMR1_CC1S;
 800dc9e:	f023 0303 	bic.w	r3, r3, #3
 800dca2:	61a3      	str	r3, [r4, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0;
 800dca4:	69a3      	ldr	r3, [r4, #24]
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	61a3      	str	r3, [r4, #24]
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcac:	6a23      	ldr	r3, [r4, #32]
 800dcae:	f023 030a 	bic.w	r3, r3, #10
 800dcb2:	6223      	str	r3, [r4, #32]
	TIM2->CCMR1 &= ~TIM_CCMR1_CC2S;
 800dcb4:	69a3      	ldr	r3, [r4, #24]
 800dcb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcba:	61a3      	str	r3, [r4, #24]
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;
 800dcbc:	69a3      	ldr	r3, [r4, #24]
 800dcbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcc2:	61a3      	str	r3, [r4, #24]
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcc4:	6a23      	ldr	r3, [r4, #32]
 800dcc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dcca:	6223      	str	r3, [r4, #32]
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800dccc:	68a3      	ldr	r3, [r4, #8]
 800dcce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcd2:	60a3      	str	r3, [r4, #8]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800dcd4:	68a3      	ldr	r3, [r4, #8]
 800dcd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcda:	f023 0307 	bic.w	r3, r3, #7
 800dcde:	60a3      	str	r3, [r4, #8]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800dce0:	88eb      	ldrh	r3, [r5, #6]
 800dce2:	f105 0210 	add.w	r2, r5, #16
 800dce6:	f7f8 fa89 	bl	80061fc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800dcea:	892b      	ldrh	r3, [r5, #8]
 800dcec:	490f      	ldr	r1, [pc, #60]	; (800dd2c <TIM_IC_DutyCycle_Deinit+0x9c>)
 800dcee:	4810      	ldr	r0, [pc, #64]	; (800dd30 <TIM_IC_DutyCycle_Deinit+0xa0>)
 800dcf0:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800dcf4:	f7f8 fa82 	bl	80061fc <HAL_DMA_Start>
	TIM2->DIER |= TIM_DIER_CC1DE;
 800dcf8:	68e3      	ldr	r3, [r4, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 800dcfa:	480e      	ldr	r0, [pc, #56]	; (800dd34 <TIM_IC_DutyCycle_Deinit+0xa4>)
	TIM2->DIER |= TIM_DIER_CC1DE;
 800dcfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd00:	60e3      	str	r3, [r4, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;
 800dd02:	68e3      	ldr	r3, [r4, #12]
 800dd04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd08:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 800dd0a:	f7f9 fd7f 	bl	800780c <HAL_TIM_Base_Start_IT>
	TIM2->CCER |= TIM_CCER_CC1E;
 800dd0e:	6a23      	ldr	r3, [r4, #32]
 800dd10:	f043 0301 	orr.w	r3, r3, #1
 800dd14:	6223      	str	r3, [r4, #32]
	TIM2->CCER |= TIM_CCER_CC2E;
 800dd16:	6a23      	ldr	r3, [r4, #32]
 800dd18:	f043 0310 	orr.w	r3, r3, #16
 800dd1c:	6223      	str	r3, [r4, #32]
}
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	20004848 	.word	0x20004848
 800dd24:	40000034 	.word	0x40000034
 800dd28:	2000d0f8 	.word	0x2000d0f8
 800dd2c:	40000038 	.word	0x40000038
 800dd30:	2000d1c4 	.word	0x2000d1c4
 800dd34:	2000d13c 	.word	0x2000d13c

0800dd38 <TIM_IC_DutyCycle_Start>:
{
 800dd38:	b510      	push	{r4, lr}
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800dd3a:	4c15      	ldr	r4, [pc, #84]	; (800dd90 <TIM_IC_DutyCycle_Start+0x58>)
 800dd3c:	4915      	ldr	r1, [pc, #84]	; (800dd94 <TIM_IC_DutyCycle_Start+0x5c>)
 800dd3e:	4816      	ldr	r0, [pc, #88]	; (800dd98 <TIM_IC_DutyCycle_Start+0x60>)
 800dd40:	4622      	mov	r2, r4
 800dd42:	2301      	movs	r3, #1
 800dd44:	f7f8 fa5a 	bl	80061fc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800dd48:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	4913      	ldr	r1, [pc, #76]	; (800dd9c <TIM_IC_DutyCycle_Start+0x64>)
 800dd50:	4813      	ldr	r0, [pc, #76]	; (800dda0 <TIM_IC_DutyCycle_Start+0x68>)
 800dd52:	f7f8 fa53 	bl	80061fc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 800dd56:	4813      	ldr	r0, [pc, #76]	; (800dda4 <TIM_IC_DutyCycle_Start+0x6c>)
 800dd58:	f7f9 fd30 	bl	80077bc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800dd5c:	4812      	ldr	r0, [pc, #72]	; (800dda8 <TIM_IC_DutyCycle_Start+0x70>)
 800dd5e:	f7f9 fd55 	bl	800780c <HAL_TIM_Base_Start_IT>
	TIM2->DIER |= TIM_DIER_CC1DE;
 800dd62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	counter.bin = BIN0;
 800dd66:	2100      	movs	r1, #0
	TIM2->DIER |= TIM_DIER_CC1DE;
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd6e:	60da      	str	r2, [r3, #12]
	TIM2->DIER |= TIM_DIER_CC2DE;
 800dd70:	68da      	ldr	r2, [r3, #12]
 800dd72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd76:	60da      	str	r2, [r3, #12]
	TIM2->CCER |= TIM_CCER_CC2E;
 800dd78:	6a1a      	ldr	r2, [r3, #32]
 800dd7a:	f042 0210 	orr.w	r2, r2, #16
 800dd7e:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC1E;
 800dd80:	6a1a      	ldr	r2, [r3, #32]
 800dd82:	f042 0201 	orr.w	r2, r2, #1
 800dd86:	621a      	str	r2, [r3, #32]
	counter.bin = BIN0;
 800dd88:	f884 13b2 	strb.w	r1, [r4, #946]	; 0x3b2
}
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	bf00      	nop
 800dd90:	20004858 	.word	0x20004858
 800dd94:	40000034 	.word	0x40000034
 800dd98:	2000d0f8 	.word	0x2000d0f8
 800dd9c:	40000038 	.word	0x40000038
 800dda0:	2000d1c4 	.word	0x2000d1c4
 800dda4:	2000d208 	.word	0x2000d208
 800dda8:	2000d13c 	.word	0x2000d13c

0800ddac <TIM_IC_DutyCycle_Stop>:
{
 800ddac:	b508      	push	{r3, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800ddae:	480c      	ldr	r0, [pc, #48]	; (800dde0 <TIM_IC_DutyCycle_Stop+0x34>)
 800ddb0:	f7f8 fa96 	bl	80062e0 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800ddb4:	480b      	ldr	r0, [pc, #44]	; (800dde4 <TIM_IC_DutyCycle_Stop+0x38>)
 800ddb6:	f7f8 fa93 	bl	80062e0 <HAL_DMA_Abort>
	TIM2->CCER &= ~TIM_CCER_CC1E;
 800ddba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ddbe:	6a1a      	ldr	r2, [r3, #32]
 800ddc0:	f022 0201 	bic.w	r2, r2, #1
 800ddc4:	621a      	str	r2, [r3, #32]
	TIM2->CCER &= ~TIM_CCER_CC2E;
 800ddc6:	6a1a      	ldr	r2, [r3, #32]
 800ddc8:	f022 0210 	bic.w	r2, r2, #16
 800ddcc:	621a      	str	r2, [r3, #32]
	TIM2->DIER &= ~TIM_DIER_CC1DE;
 800ddce:	68da      	ldr	r2, [r3, #12]
 800ddd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ddd4:	60da      	str	r2, [r3, #12]
	TIM2->DIER &= ~TIM_DIER_CC2DE;
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dddc:	60da      	str	r2, [r3, #12]
}
 800ddde:	bd08      	pop	{r3, pc}
 800dde0:	2000d0f8 	.word	0x2000d0f8
 800dde4:	2000d1c4 	.word	0x2000d1c4

0800dde8 <TIM_ETRP_Config>:
{
 800dde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(freq < (tim2clk / 4)){
 800ddec:	4b34      	ldr	r3, [pc, #208]	; (800dec0 <TIM_ETRP_Config+0xd8>)
 800ddee:	681f      	ldr	r7, [r3, #0]
{
 800ddf0:	b082      	sub	sp, #8
	if(freq < (tim2clk / 4)){
 800ddf2:	08b8      	lsrs	r0, r7, #2
{
 800ddf4:	ec55 4b10 	vmov	r4, r5, d0
	if(freq < (tim2clk / 4)){
 800ddf8:	f7f2 fb3c 	bl	8000474 <__aeabi_ui2d>
	uint32_t smcr = TIM2 -> SMCR;
 800ddfc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	if(freq < (tim2clk / 4)){
 800de00:	4622      	mov	r2, r4
 800de02:	462b      	mov	r3, r5
	uint32_t smcr = TIM2 -> SMCR;
 800de04:	f8d6 a008 	ldr.w	sl, [r6, #8]
	if(freq < (tim2clk / 4)){
 800de08:	4680      	mov	r8, r0
 800de0a:	4689      	mov	r9, r1
 800de0c:	f7f2 fe3c 	bl	8000a88 <__aeabi_dcmpgt>
 800de10:	2800      	cmp	r0, #0
 800de12:	d140      	bne.n	800de96 <TIM_ETRP_Config+0xae>
 800de14:	0878      	lsrs	r0, r7, #1
 800de16:	f7f2 fb2d 	bl	8000474 <__aeabi_ui2d>
	} else if ((freq >= (tim2clk / 4)) && freq < ((tim2clk / 2))){
 800de1a:	4622      	mov	r2, r4
 800de1c:	e9cd 0100 	strd	r0, r1, [sp]
 800de20:	462b      	mov	r3, r5
 800de22:	4640      	mov	r0, r8
 800de24:	4649      	mov	r1, r9
 800de26:	f40a 5a40 	and.w	sl, sl, #12288	; 0x3000
 800de2a:	f7f2 fe19 	bl	8000a60 <__aeabi_dcmple>
 800de2e:	b9f0      	cbnz	r0, 800de6e <TIM_ETRP_Config+0x86>
	} else if ((freq >= (tim2clk / 2)) && (freq < (tim2clk))) {
 800de30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de34:	4620      	mov	r0, r4
 800de36:	4629      	mov	r1, r5
 800de38:	f7f2 fe1c 	bl	8000a74 <__aeabi_dcmpge>
 800de3c:	b138      	cbz	r0, 800de4e <TIM_ETRP_Config+0x66>
 800de3e:	4638      	mov	r0, r7
 800de40:	f7f2 fb18 	bl	8000474 <__aeabi_ui2d>
 800de44:	4622      	mov	r2, r4
 800de46:	462b      	mov	r3, r5
 800de48:	f7f2 fe1e 	bl	8000a88 <__aeabi_dcmpgt>
 800de4c:	bb50      	cbnz	r0, 800dea4 <TIM_ETRP_Config+0xbc>
		if ((smcr & 0x3000) != TIM_SMCR_ETPS){
 800de4e:	f5ba 5f40 	cmp.w	sl, #12288	; 0x3000
 800de52:	d009      	beq.n	800de68 <TIM_ETRP_Config+0x80>
			TIM2 -> SMCR &= ~TIM_SMCR_ETPS;
 800de54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de58:	689a      	ldr	r2, [r3, #8]
 800de5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800de5e:	609a      	str	r2, [r3, #8]
			TIM2 -> SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800de66:	609a      	str	r2, [r3, #8]
}
 800de68:	b002      	add	sp, #8
 800de6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if ((freq >= (tim2clk / 4)) && freq < ((tim2clk / 2))){
 800de6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de72:	4620      	mov	r0, r4
 800de74:	4629      	mov	r1, r5
 800de76:	f7f2 fde9 	bl	8000a4c <__aeabi_dcmplt>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0d8      	beq.n	800de30 <TIM_ETRP_Config+0x48>
		if ((smcr & 0x3000) != TIM_SMCR_ETPS_0){
 800de7e:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
 800de82:	d0f1      	beq.n	800de68 <TIM_ETRP_Config+0x80>
			TIM2 -> SMCR &= ~TIM_SMCR_ETPS;
 800de84:	68b3      	ldr	r3, [r6, #8]
 800de86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800de8a:	60b3      	str	r3, [r6, #8]
			TIM2 -> SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 800de8c:	68b3      	ldr	r3, [r6, #8]
 800de8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de92:	60b3      	str	r3, [r6, #8]
 800de94:	e7e8      	b.n	800de68 <TIM_ETRP_Config+0x80>
		TIM2 -> SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 800de96:	68b3      	ldr	r3, [r6, #8]
 800de98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800de9c:	60b3      	str	r3, [r6, #8]
}
 800de9e:	b002      	add	sp, #8
 800dea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((smcr & 0x3000) != TIM_SMCR_ETPS_1){
 800dea4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 800dea8:	d0de      	beq.n	800de68 <TIM_ETRP_Config+0x80>
			TIM2 -> SMCR &= ~TIM_SMCR_ETPS;
 800deaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800deae:	689a      	ldr	r2, [r3, #8]
 800deb0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800deb4:	609a      	str	r2, [r3, #8]
			TIM2 -> SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 800deb6:	689a      	ldr	r2, [r3, #8]
 800deb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800debc:	609a      	str	r2, [r3, #8]
 800debe:	e7d3      	b.n	800de68 <TIM_ETRP_Config+0x80>
 800dec0:	2000d248 	.word	0x2000d248

0800dec4 <TIM_IC1_PSC_Config>:
	TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	switch(prescVal){
 800dec8:	2804      	cmp	r0, #4
	TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800deca:	699a      	ldr	r2, [r3, #24]
 800decc:	f022 020c 	bic.w	r2, r2, #12
 800ded0:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800ded2:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800ded4:	d00f      	beq.n	800def6 <TIM_IC1_PSC_Config+0x32>
 800ded6:	2808      	cmp	r0, #8
 800ded8:	d009      	beq.n	800deee <TIM_IC1_PSC_Config+0x2a>
 800deda:	2802      	cmp	r0, #2
 800dedc:	d003      	beq.n	800dee6 <TIM_IC1_PSC_Config+0x22>
		TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 800dede:	f022 020c 	bic.w	r2, r2, #12
 800dee2:	619a      	str	r2, [r3, #24]
}
 800dee4:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 800dee6:	f042 0204 	orr.w	r2, r2, #4
 800deea:	619a      	str	r2, [r3, #24]
 800deec:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 800deee:	f042 020c 	orr.w	r2, r2, #12
 800def2:	619a      	str	r2, [r3, #24]
 800def4:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800def6:	f042 0208 	orr.w	r2, r2, #8
 800defa:	619a      	str	r2, [r3, #24]
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop

0800df00 <TIM_IC2_PSC_Config>:
	TIM2->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800df00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	switch(prescVal){
 800df04:	2804      	cmp	r0, #4
	TIM2->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800df06:	699a      	ldr	r2, [r3, #24]
 800df08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800df0c:	619a      	str	r2, [r3, #24]
		TIM2->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800df0e:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800df10:	d00f      	beq.n	800df32 <TIM_IC2_PSC_Config+0x32>
 800df12:	2808      	cmp	r0, #8
 800df14:	d009      	beq.n	800df2a <TIM_IC2_PSC_Config+0x2a>
 800df16:	2802      	cmp	r0, #2
 800df18:	d003      	beq.n	800df22 <TIM_IC2_PSC_Config+0x22>
		TIM2->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 800df1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800df1e:	619a      	str	r2, [r3, #24]
}
 800df20:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 800df22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df26:	619a      	str	r2, [r3, #24]
 800df28:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 800df2a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 800df2e:	619a      	str	r2, [r3, #24]
 800df30:	4770      	bx	lr
		TIM2->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800df32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df36:	619a      	str	r2, [r3, #24]
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop

0800df3c <TIM_IC1_RisingFalling>:
	TIM2->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df40:	6a13      	ldr	r3, [r2, #32]
 800df42:	f043 030a 	orr.w	r3, r3, #10
 800df46:	6213      	str	r3, [r2, #32]
}
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop

0800df4c <TIM_IC1_RisingOnly>:
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df50:	6a13      	ldr	r3, [r2, #32]
 800df52:	f023 030a 	bic.w	r3, r3, #10
 800df56:	6213      	str	r3, [r2, #32]
}
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop

0800df5c <TIM_IC1_FallingOnly>:
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800df5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df60:	6a1a      	ldr	r2, [r3, #32]
 800df62:	f022 0208 	bic.w	r2, r2, #8
 800df66:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800df68:	6a1a      	ldr	r2, [r3, #32]
 800df6a:	f042 0202 	orr.w	r2, r2, #2
 800df6e:	621a      	str	r2, [r3, #32]
}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <TIM_IC2_RisingFalling>:
	TIM2->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df78:	6a13      	ldr	r3, [r2, #32]
 800df7a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800df7e:	6213      	str	r3, [r2, #32]
}
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop

0800df84 <TIM_IC2_RisingOnly>:
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df88:	6a13      	ldr	r3, [r2, #32]
 800df8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df8e:	6213      	str	r3, [r2, #32]
}
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop

0800df94 <TIM_IC2_FallingOnly>:
	TIM2->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800df94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df98:	6a1a      	ldr	r2, [r3, #32]
 800df9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df9e:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800dfa0:	6a1a      	ldr	r2, [r3, #32]
 800dfa2:	f042 0220 	orr.w	r2, r2, #32
 800dfa6:	621a      	str	r2, [r3, #32]
}
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop

0800dfac <TIM_TI_Sequence_AB>:
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800dfac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	counter.abba = BIN0;
 800dfb0:	490b      	ldr	r1, [pc, #44]	; (800dfe0 <TIM_TI_Sequence_AB+0x34>)
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800dfb2:	689a      	ldr	r2, [r3, #8]
 800dfb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dfb8:	609a      	str	r2, [r3, #8]
	TIM2->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800dfba:	689a      	ldr	r2, [r3, #8]
 800dfbc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800dfc0:	609a      	str	r2, [r3, #8]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800dfc2:	689a      	ldr	r2, [r3, #8]
 800dfc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dfc8:	f022 0207 	bic.w	r2, r2, #7
 800dfcc:	609a      	str	r2, [r3, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_3;
 800dfce:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN0;
 800dfd0:	2000      	movs	r0, #0
	TIM2->SMCR |= TIM_SMCR_SMS_3;
 800dfd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dfd6:	609a      	str	r2, [r3, #8]
	counter.abba = BIN0;
 800dfd8:	f881 03c3 	strb.w	r0, [r1, #963]	; 0x3c3
}
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	20004848 	.word	0x20004848

0800dfe4 <TIM_TI_Sequence_BA>:
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800dfe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	counter.abba = BIN1;
 800dfe8:	490b      	ldr	r1, [pc, #44]	; (800e018 <TIM_TI_Sequence_BA+0x34>)
	TIM2->SMCR &= ~TIM_SMCR_TS;
 800dfea:	689a      	ldr	r2, [r3, #8]
 800dfec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dff0:	609a      	str	r2, [r3, #8]
	TIM2->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800dff8:	609a      	str	r2, [r3, #8]
	TIM2->SMCR &= ~TIM_SMCR_SMS;
 800dffa:	689a      	ldr	r2, [r3, #8]
 800dffc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e000:	f022 0207 	bic.w	r2, r2, #7
 800e004:	609a      	str	r2, [r3, #8]
	TIM2->SMCR |= TIM_SMCR_SMS_3;
 800e006:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN1;
 800e008:	2001      	movs	r0, #1
	TIM2->SMCR |= TIM_SMCR_SMS_3;
 800e00a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e00e:	609a      	str	r2, [r3, #8]
	counter.abba = BIN1;
 800e010:	f881 03c3 	strb.w	r0, [r1, #963]	; 0x3c3
}
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	20004848 	.word	0x20004848

0800e01c <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(uint16_t arr, uint16_t psc)
{
 800e01c:	b538      	push	{r3, r4, r5, lr}
	TIM4->ARR = arr;
 800e01e:	4c0c      	ldr	r4, [pc, #48]	; (800e050 <TIM_ARR_PSC_Config+0x34>)
	TIM4->PSC = psc;

	if(counter.state!=COUNTER_IC){
 800e020:	4d0c      	ldr	r5, [pc, #48]	; (800e054 <TIM_ARR_PSC_Config+0x38>)
	TIM4->ARR = arr;
 800e022:	62e0      	str	r0, [r4, #44]	; 0x2c
	TIM4->PSC = psc;
 800e024:	62a1      	str	r1, [r4, #40]	; 0x28
	if(counter.state!=COUNTER_IC){
 800e026:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d00a      	beq.n	800e044 <TIM_ARR_PSC_Config+0x28>
		xStartTime = xTaskGetTickCount();
 800e02e:	f7fb fe81 	bl	8009d34 <xTaskGetTickCount>
 800e032:	4b09      	ldr	r3, [pc, #36]	; (800e058 <TIM_ARR_PSC_Config+0x3c>)
 800e034:	6018      	str	r0, [r3, #0]
		TIM4->CR1 |= TIM_CR1_CEN;
 800e036:	6823      	ldr	r3, [r4, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800e038:	2200      	movs	r2, #0
		TIM4->CR1 |= TIM_CR1_CEN;
 800e03a:	f043 0301 	orr.w	r3, r3, #1
 800e03e:	6023      	str	r3, [r4, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800e040:	f885 23b9 	strb.w	r2, [r5, #953]	; 0x3b9
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	TIM4->EGR |= TIM_EGR_UG;
 800e044:	4a02      	ldr	r2, [pc, #8]	; (800e050 <TIM_ARR_PSC_Config+0x34>)
 800e046:	6953      	ldr	r3, [r2, #20]
 800e048:	f043 0301 	orr.w	r3, r3, #1
 800e04c:	6153      	str	r3, [r2, #20]
}
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	40000800 	.word	0x40000800
 800e054:	20004848 	.word	0x20004848
 800e058:	20004840 	.word	0x20004840

0800e05c <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
	TIM4->CR1 &= ~TIM_CR1_CEN;
 800e05c:	4a02      	ldr	r2, [pc, #8]	; (800e068 <TIM_REF_SecondInputDisable+0xc>)
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	f023 0301 	bic.w	r3, r3, #1
 800e064:	6013      	str	r3, [r2, #0]
}
 800e066:	4770      	bx	lr
 800e068:	40000800 	.word	0x40000800

0800e06c <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	4680      	mov	r8, r0
	uint32_t dummy;
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock
 800e074:	f7f8 ffa2 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 800e078:	4607      	mov	r7, r0

	xStartTime = xTaskGetTickCount();
 800e07a:	f7fb fe5b 	bl	8009d34 <xTaskGetTickCount>
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800e07e:	4c0a      	ldr	r4, [pc, #40]	; (800e0a8 <TIM_REF_Reconfig_cnt+0x3c>)
	xStartTime = xTaskGetTickCount();
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <TIM_REF_Reconfig_cnt+0x40>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800e082:	4e0b      	ldr	r6, [pc, #44]	; (800e0b0 <TIM_REF_Reconfig_cnt+0x44>)
	xStartTime = xTaskGetTickCount();
 800e084:	6018      	str	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800e086:	2500      	movs	r5, #0
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800e088:	4642      	mov	r2, r8
 800e08a:	0079      	lsls	r1, r7, #1
 800e08c:	ab03      	add	r3, sp, #12
 800e08e:	4620      	mov	r0, r4
 800e090:	9500      	str	r5, [sp, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800e092:	f886 53b9 	strb.w	r5, [r6, #953]	; 0x3b9
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800e096:	f7fe ff49 	bl	800cf2c <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 800e09a:	4620      	mov	r0, r4
 800e09c:	f7f9 fb8e 	bl	80077bc <HAL_TIM_Base_Start>
}
 800e0a0:	b004      	add	sp, #16
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a6:	bf00      	nop
 800e0a8:	2000d13c 	.word	0x2000d13c
 800e0ac:	20004840 	.word	0x20004840
 800e0b0:	20004848 	.word	0x20004848

0800e0b4 <TIM_ETPS_GetPrescaler>:
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
	uint16_t etpsRegVal = ((TIM2->SMCR) & 0x3000) >> 12;			/* ETR prescaler register value */
 800e0b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0b8:	689b      	ldr	r3, [r3, #8]
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 800e0ba:	f3c3 3301 	ubfx	r3, r3, #12, #2
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d006      	beq.n	800e0d0 <TIM_ETPS_GetPrescaler+0x1c>
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d006      	beq.n	800e0d4 <TIM_ETPS_GetPrescaler+0x20>
 800e0c6:	2b01      	cmp	r3, #1
	case 0:
		presc = 1; break;
 800e0c8:	bf0c      	ite	eq
 800e0ca:	2002      	moveq	r0, #2
 800e0cc:	2001      	movne	r0, #1
 800e0ce:	4770      	bx	lr
	case 1:
		presc = 2; break;
	case 2:
		presc = 4; break;
 800e0d0:	2004      	movs	r0, #4
 800e0d2:	4770      	bx	lr
	case 3:
		presc = 8; break;
 800e0d4:	2008      	movs	r0, #8
}
 800e0d6:	4770      	bx	lr

0800e0d8 <TIM_IC1PSC_GetPrescaler>:
	uint32_t ic1psc = ((TIM2->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 800e0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	f3c3 0381 	ubfx	r3, r3, #2, #2
	switch(regPrescValue){
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d006      	beq.n	800e0f4 <TIM_IC1PSC_GetPrescaler+0x1c>
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d006      	beq.n	800e0f8 <TIM_IC1PSC_GetPrescaler+0x20>
 800e0ea:	2b01      	cmp	r3, #1
		presc = 1; break;
 800e0ec:	bf0c      	ite	eq
 800e0ee:	2002      	moveq	r0, #2
 800e0f0:	2001      	movne	r0, #1
 800e0f2:	4770      	bx	lr
		presc = 4; break;
 800e0f4:	2004      	movs	r0, #4
 800e0f6:	4770      	bx	lr
		presc = 8; break;
 800e0f8:	2008      	movs	r0, #8
}
 800e0fa:	4770      	bx	lr

0800e0fc <TIM_IC2PSC_GetPrescaler>:
	uint32_t ic2psc = ((TIM2->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 800e0fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	f3c3 2381 	ubfx	r3, r3, #10, #2
	switch(regPrescValue){
 800e106:	2b02      	cmp	r3, #2
 800e108:	d006      	beq.n	800e118 <TIM_IC2PSC_GetPrescaler+0x1c>
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d006      	beq.n	800e11c <TIM_IC2PSC_GetPrescaler+0x20>
 800e10e:	2b01      	cmp	r3, #1
		presc = 1; break;
 800e110:	bf0c      	ite	eq
 800e112:	2002      	moveq	r0, #2
 800e114:	2001      	movne	r0, #1
 800e116:	4770      	bx	lr
		presc = 4; break;
 800e118:	2004      	movs	r0, #4
 800e11a:	4770      	bx	lr
		presc = 8; break;
 800e11c:	2008      	movs	r0, #8
}
 800e11e:	4770      	bx	lr

0800e120 <DMA_TransferComplete>:
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800e120:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800e124:	2302      	movs	r3, #2
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 800e126:	6810      	ldr	r0, [r2, #0]
	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800e128:	408b      	lsls	r3, r1
 800e12a:	4018      	ands	r0, r3
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 800e12c:	bf1c      	itt	ne
 800e12e:	6053      	strne	r3, [r2, #4]
		//		}
		return true;
 800e130:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 800e132:	4770      	bx	lr

0800e134 <DMA_Restart>:
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
	if(dmah == &hdma_tim2_ch1){
 800e134:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <DMA_Restart+0x3c>)
 800e136:	4298      	cmp	r0, r3
{
 800e138:	b510      	push	{r4, lr}
	if(dmah == &hdma_tim2_ch1){
 800e13a:	d00c      	beq.n	800e156 <DMA_Restart+0x22>
		HAL_DMA_Abort(&hdma_tim2_ch1);
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800e13c:	480d      	ldr	r0, [pc, #52]	; (800e174 <DMA_Restart+0x40>)
 800e13e:	f7f8 f8cf 	bl	80062e0 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800e142:	4a0d      	ldr	r2, [pc, #52]	; (800e178 <DMA_Restart+0x44>)
 800e144:	490d      	ldr	r1, [pc, #52]	; (800e17c <DMA_Restart+0x48>)
 800e146:	8913      	ldrh	r3, [r2, #8]
 800e148:	480a      	ldr	r0, [pc, #40]	; (800e174 <DMA_Restart+0x40>)
 800e14a:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
	}
}
 800e14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(TIM2->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800e152:	f7f8 b853 	b.w	80061fc <HAL_DMA_Start>
 800e156:	4604      	mov	r4, r0
		HAL_DMA_Abort(&hdma_tim2_ch1);
 800e158:	f7f8 f8c2 	bl	80062e0 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800e15c:	4a06      	ldr	r2, [pc, #24]	; (800e178 <DMA_Restart+0x44>)
 800e15e:	4908      	ldr	r1, [pc, #32]	; (800e180 <DMA_Restart+0x4c>)
 800e160:	88d3      	ldrh	r3, [r2, #6]
 800e162:	4620      	mov	r0, r4
 800e164:	3210      	adds	r2, #16
}
 800e166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(TIM2->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800e16a:	f7f8 b847 	b.w	80061fc <HAL_DMA_Start>
 800e16e:	bf00      	nop
 800e170:	2000d0f8 	.word	0x2000d0f8
 800e174:	2000d1c4 	.word	0x2000d1c4
 800e178:	20004848 	.word	0x20004848
 800e17c:	40000038 	.word	0x40000038
 800e180:	40000034 	.word	0x40000034

0800e184 <TIM1_LOG_ANLYS_MspInit>:
void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e184:	4b21      	ldr	r3, [pc, #132]	; (800e20c <TIM1_LOG_ANLYS_MspInit+0x88>)
{
 800e186:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e188:	699a      	ldr	r2, [r3, #24]
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 800e18a:	4c21      	ldr	r4, [pc, #132]	; (800e210 <TIM1_LOG_ANLYS_MspInit+0x8c>)
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e18c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e190:	619a      	str	r2, [r3, #24]
 800e192:	699b      	ldr	r3, [r3, #24]
{
 800e194:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e19a:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800e19c:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e1a0:	2500      	movs	r5, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e1a2:	2303      	movs	r3, #3
{
 800e1a4:	4606      	mov	r6, r0
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e1a6:	2201      	movs	r2, #1
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e1a8:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800e1aa:	9101      	str	r1, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1ac:	4819      	ldr	r0, [pc, #100]	; (800e214 <TIM1_LOG_ANLYS_MspInit+0x90>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e1ae:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1b0:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e1b2:	e9cd 5202 	strd	r5, r2, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1b6:	f7f8 f977 	bl	80064a8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	2109      	movs	r1, #9
 800e1be:	2017      	movs	r0, #23
 800e1c0:	f7f7 fde8 	bl	8005d94 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 800e1c4:	462a      	mov	r2, r5
 800e1c6:	2109      	movs	r1, #9
 800e1c8:	2028      	movs	r0, #40	; 0x28
 800e1ca:	f7f7 fde3 	bl	8005d94 <HAL_NVIC_SetPriority>
	hdma_tim1_up.Instance = DMA1_Channel5;
 800e1ce:	4a12      	ldr	r2, [pc, #72]	; (800e218 <TIM1_LOG_ANLYS_MspInit+0x94>)
 800e1d0:	6022      	str	r2, [r4, #0]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800e1d2:	2380      	movs	r3, #128	; 0x80
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e1d4:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e1d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800e1dc:	2220      	movs	r2, #32
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800e1de:	60e3      	str	r3, [r4, #12]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e1e0:	6120      	str	r0, [r4, #16]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e1e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim1_up);
 800e1e6:	4620      	mov	r0, r4
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800e1e8:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e1ec:	61e3      	str	r3, [r4, #28]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1ee:	6065      	str	r5, [r4, #4]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1f0:	60a5      	str	r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim1_up);
 800e1f2:	f7f7 ff7b 	bl	80060ec <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	//		TIM1->DIER |= TIM_DIER_UDE;
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 800e1f6:	4b09      	ldr	r3, [pc, #36]	; (800e21c <TIM1_LOG_ANLYS_MspInit+0x98>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	68d3      	ldr	r3, [r2, #12]
 800e1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e200:	60d3      	str	r3, [r2, #12]

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800e202:	6234      	str	r4, [r6, #32]
 800e204:	6266      	str	r6, [r4, #36]	; 0x24
}
 800e206:	b006      	add	sp, #24
 800e208:	bd70      	pop	{r4, r5, r6, pc}
 800e20a:	bf00      	nop
 800e20c:	40021000 	.word	0x40021000
 800e210:	2000d24c 	.word	0x2000d24c
 800e214:	48000400 	.word	0x48000400
 800e218:	40020058 	.word	0x40020058
 800e21c:	2000d078 	.word	0x2000d078

0800e220 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e220:	4b0e      	ldr	r3, [pc, #56]	; (800e25c <TIM4_LOG_ANLYS_MspInit+0x3c>)

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800e222:	490f      	ldr	r1, [pc, #60]	; (800e260 <TIM4_LOG_ANLYS_MspInit+0x40>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e224:	69da      	ldr	r2, [r3, #28]
{
 800e226:	b500      	push	{lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e228:	f042 0204 	orr.w	r2, r2, #4
 800e22c:	61da      	str	r2, [r3, #28]
 800e22e:	69db      	ldr	r3, [r3, #28]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800e230:	680a      	ldr	r2, [r1, #0]
{
 800e232:	b083      	sub	sp, #12
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	9b01      	ldr	r3, [sp, #4]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800e23c:	68d3      	ldr	r3, [r2, #12]
 800e23e:	f043 0301 	orr.w	r3, r3, #1
 800e242:	60d3      	str	r3, [r2, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800e244:	2109      	movs	r1, #9
 800e246:	2200      	movs	r2, #0
 800e248:	201e      	movs	r0, #30
 800e24a:	f7f7 fda3 	bl	8005d94 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e24e:	201e      	movs	r0, #30
}
 800e250:	b003      	add	sp, #12
 800e252:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e256:	f7f7 bdd3 	b.w	8005e00 <HAL_NVIC_EnableIRQ>
 800e25a:	bf00      	nop
 800e25c:	40021000 	.word	0x40021000
 800e260:	2000d13c 	.word	0x2000d13c

0800e264 <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e264:	4a08      	ldr	r2, [pc, #32]	; (800e288 <TIM4_LOG_ANLYS_MspDeinit+0x24>)
{
 800e266:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e268:	69d3      	ldr	r3, [r2, #28]
 800e26a:	f023 0304 	bic.w	r3, r3, #4
 800e26e:	61d3      	str	r3, [r2, #28]
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800e270:	201e      	movs	r0, #30
 800e272:	f7f7 fdd1 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e276:	2017      	movs	r0, #23
 800e278:	f7f7 fdce 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e27c:	2028      	movs	r0, #40	; 0x28
}
 800e27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e282:	f7f7 bdc9 	b.w	8005e18 <HAL_NVIC_DisableIRQ>
 800e286:	bf00      	nop
 800e288:	40021000 	.word	0x40021000

0800e28c <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e28c:	4a03      	ldr	r2, [pc, #12]	; (800e29c <TIM1_LOG_ANLYS_MspDeinit+0x10>)
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e28e:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e290:	6993      	ldr	r3, [r2, #24]
 800e292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e296:	6193      	str	r3, [r2, #24]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e298:	f7f7 bf72 	b.w	8006180 <HAL_DMA_DeInit>
 800e29c:	40021000 	.word	0x40021000

0800e2a0 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2a0:	b508      	push	{r3, lr}
	//  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
	//  {
	//    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2a2:	6803      	ldr	r3, [r0, #0]

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	TIM4->CR1 &= ~(TIM_CR1_CEN);
 800e2a4:	4a0d      	ldr	r2, [pc, #52]	; (800e2dc <LOG_ANLYS_PeriodElapsedCallback+0x3c>)
	HAL_DMA_Abort(&hdma_tim1_up);
 800e2a6:	480e      	ldr	r0, [pc, #56]	; (800e2e0 <LOG_ANLYS_PeriodElapsedCallback+0x40>)
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2a8:	f06f 0101 	mvn.w	r1, #1
 800e2ac:	6119      	str	r1, [r3, #16]
	TIM4->CR1 &= ~(TIM_CR1_CEN);
 800e2ae:	6813      	ldr	r3, [r2, #0]
 800e2b0:	400b      	ands	r3, r1
 800e2b2:	6013      	str	r3, [r2, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 800e2b4:	f7f8 f814 	bl	80062e0 <HAL_DMA_Abort>
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 800e2b8:	4b0a      	ldr	r3, [pc, #40]	; (800e2e4 <LOG_ANLYS_PeriodElapsedCallback+0x44>)
 800e2ba:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800e2be:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e2c0:	2017      	movs	r0, #23
 800e2c2:	f7f7 fda9 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e2c6:	2028      	movs	r0, #40	; 0x28
 800e2c8:	f7f7 fda6 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 800e2cc:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <LOG_ANLYS_PeriodElapsedCallback+0x48>)
 800e2ce:	7ddb      	ldrb	r3, [r3, #23]
 800e2d0:	b103      	cbz	r3, 800e2d4 <LOG_ANLYS_PeriodElapsedCallback+0x34>
}
 800e2d2:	bd08      	pop	{r3, pc}
 800e2d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logAnlysPeriodElapsedCallback();
 800e2d8:	f7f5 be90 	b.w	8003ffc <logAnlysPeriodElapsedCallback>
 800e2dc:	40000800 	.word	0x40000800
 800e2e0:	2000d24c 	.word	0x2000d24c
 800e2e4:	40010400 	.word	0x40010400
 800e2e8:	20005418 	.word	0x20005418

0800e2ec <LOG_ANLYS_TriggerEventOccured>:
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 800e2ec:	4a03      	ldr	r2, [pc, #12]	; (800e2fc <LOG_ANLYS_TriggerEventOccured+0x10>)
 800e2ee:	4b04      	ldr	r3, [pc, #16]	; (800e300 <LOG_ANLYS_TriggerEventOccured+0x14>)
 800e2f0:	6811      	ldr	r1, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 800e2f2:	2200      	movs	r2, #0
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 800e2f4:	6849      	ldr	r1, [r1, #4]
 800e2f6:	6019      	str	r1, [r3, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 800e2f8:	75da      	strb	r2, [r3, #23]
}
 800e2fa:	4770      	bx	lr
 800e2fc:	2000d24c 	.word	0x2000d24c
 800e300:	20005418 	.word	0x20005418

0800e304 <TIM_LogAnlys_Init>:
{
 800e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	htim1.State = HAL_TIM_STATE_RESET;
 800e308:	4d27      	ldr	r5, [pc, #156]	; (800e3a8 <TIM_LogAnlys_Init+0xa4>)
	htim4.State = HAL_TIM_STATE_RESET;
 800e30a:	4e28      	ldr	r6, [pc, #160]	; (800e3ac <TIM_LogAnlys_Init+0xa8>)
	htim1.Instance = TIM1;
 800e30c:	4b28      	ldr	r3, [pc, #160]	; (800e3b0 <TIM_LogAnlys_Init+0xac>)
 800e30e:	602b      	str	r3, [r5, #0]
{
 800e310:	b08c      	sub	sp, #48	; 0x30
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e312:	af0c      	add	r7, sp, #48	; 0x30
	htim1.State = HAL_TIM_STATE_RESET;
 800e314:	2400      	movs	r4, #0
	htim1.Init.Period = 14399;   //14399
 800e316:	f643 033f 	movw	r3, #14399	; 0x383f
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e31a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	HAL_TIM_Base_Init(&htim1);
 800e31e:	4628      	mov	r0, r5
	htim1.Init.Period = 14399;   //14399
 800e320:	60eb      	str	r3, [r5, #12]
	htim1.State = HAL_TIM_STATE_RESET;
 800e322:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e326:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 800e32a:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e32e:	61ac      	str	r4, [r5, #24]
	htim4.State = HAL_TIM_STATE_RESET;
 800e330:	f886 403d 	strb.w	r4, [r6, #61]	; 0x3d
	HAL_TIM_Base_Init(&htim1);
 800e334:	f7f9 f98a 	bl	800764c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e338:	f847 8d24 	str.w	r8, [r7, #-36]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800e33c:	4628      	mov	r0, r5
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f9 fe40 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e344:	2204      	movs	r2, #4
 800e346:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e348:	a907      	add	r1, sp, #28
 800e34a:	4628      	mov	r0, r5
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e34c:	e9cd 2307 	strd	r2, r3, [sp, #28]
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e350:	f7f9 ff02 	bl	8008158 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e354:	4669      	mov	r1, sp
 800e356:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e358:	e9cd 4400 	strd	r4, r4, [sp]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e35c:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e35e:	f7fa fa6f 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
	htim4.Instance = TIM4;
 800e362:	4914      	ldr	r1, [pc, #80]	; (800e3b4 <TIM_LogAnlys_Init+0xb0>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e364:	60b4      	str	r4, [r6, #8]
	htim4.Init.Prescaler = 1199;
 800e366:	f240 42af 	movw	r2, #1199	; 0x4af
	htim4.Init.Period = 59999;
 800e36a:	f64e 235f 	movw	r3, #59999	; 0xea5f
	HAL_TIM_Base_Init(&htim4);
 800e36e:	4630      	mov	r0, r6
	htim4.Init.Prescaler = 1199;
 800e370:	e9c6 1200 	strd	r1, r2, [r6]
	htim4.Init.Period = 59999;
 800e374:	60f3      	str	r3, [r6, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e376:	6134      	str	r4, [r6, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e378:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim4);
 800e37a:	f7f9 f967 	bl	800764c <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800e37e:	a907      	add	r1, sp, #28
 800e380:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e382:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800e386:	f7f9 fe1d 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 800e38a:	4630      	mov	r0, r6
 800e38c:	2108      	movs	r1, #8
 800e38e:	f7f9 fcaf 	bl	8007cf0 <HAL_TIM_OnePulse_Init>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e392:	2380      	movs	r3, #128	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e394:	4639      	mov	r1, r7
 800e396:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e398:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e39a:	9305      	str	r3, [sp, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e39c:	f7fa fa50 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
}
 800e3a0:	b00c      	add	sp, #48	; 0x30
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a6:	bf00      	nop
 800e3a8:	2000d078 	.word	0x2000d078
 800e3ac:	2000d13c 	.word	0x2000d13c
 800e3b0:	40012c00 	.word	0x40012c00
 800e3b4:	40000800 	.word	0x40000800

0800e3b8 <TIM_LogAnlys_Start>:
{
 800e3b8:	b508      	push	{r3, lr}
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 800e3ba:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <TIM_LogAnlys_Start+0x20>)
 800e3bc:	4907      	ldr	r1, [pc, #28]	; (800e3dc <TIM_LogAnlys_Start+0x24>)
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	8a1b      	ldrh	r3, [r3, #16]
 800e3c2:	4807      	ldr	r0, [pc, #28]	; (800e3e0 <TIM_LogAnlys_Start+0x28>)
 800e3c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e3c8:	f7f7 ff18 	bl	80061fc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim1);
 800e3cc:	4805      	ldr	r0, [pc, #20]	; (800e3e4 <TIM_LogAnlys_Start+0x2c>)
}
 800e3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim1);
 800e3d2:	f7f9 b9f3 	b.w	80077bc <HAL_TIM_Base_Start>
 800e3d6:	bf00      	nop
 800e3d8:	20005418 	.word	0x20005418
 800e3dc:	48000410 	.word	0x48000410
 800e3e0:	2000d24c 	.word	0x2000d24c
 800e3e4:	2000d078 	.word	0x2000d078

0800e3e8 <TIM_LogAnlys_Stop>:
{
 800e3e8:	b510      	push	{r4, lr}
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
	HAL_TIM_Base_Stop(&htim1);
 800e3ea:	480d      	ldr	r0, [pc, #52]	; (800e420 <TIM_LogAnlys_Stop+0x38>)
	HAL_TIM_Base_Stop(&htim4);
 800e3ec:	4c0d      	ldr	r4, [pc, #52]	; (800e424 <TIM_LogAnlys_Stop+0x3c>)
	HAL_TIM_Base_Stop(&htim1);
 800e3ee:	f7f9 f9f5 	bl	80077dc <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 800e3f2:	480d      	ldr	r0, [pc, #52]	; (800e428 <TIM_LogAnlys_Stop+0x40>)
 800e3f4:	f7f7 ff74 	bl	80062e0 <HAL_DMA_Abort>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 800e3f8:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <TIM_LogAnlys_Stop+0x44>)
 800e3fa:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800e3fe:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e400:	2017      	movs	r0, #23
 800e402:	f7f7 fd09 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e406:	2028      	movs	r0, #40	; 0x28
 800e408:	f7f7 fd06 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop(&htim4);
 800e40c:	4620      	mov	r0, r4
 800e40e:	f7f9 f9e5 	bl	80077dc <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 800e412:	6821      	ldr	r1, [r4, #0]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e414:	4b06      	ldr	r3, [pc, #24]	; (800e430 <TIM_LogAnlys_Stop+0x48>)
	__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 800e416:	2000      	movs	r0, #0
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e418:	2201      	movs	r2, #1
	__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 800e41a:	6248      	str	r0, [r1, #36]	; 0x24
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e41c:	75da      	strb	r2, [r3, #23]
}
 800e41e:	bd10      	pop	{r4, pc}
 800e420:	2000d078 	.word	0x2000d078
 800e424:	2000d13c 	.word	0x2000d13c
 800e428:	2000d24c 	.word	0x2000d24c
 800e42c:	40010400 	.word	0x40010400
 800e430:	20005418 	.word	0x20005418

0800e434 <TIM_PostTrigger_ARR_PSC_Reconfig>:
	__HAL_TIM_SET_AUTORELOAD(&htim4, arr);
 800e434:	4909      	ldr	r1, [pc, #36]	; (800e45c <TIM_PostTrigger_ARR_PSC_Reconfig+0x28>)
	TIM4->EGR |= TIM_EGR_UG;
 800e436:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <TIM_PostTrigger_ARR_PSC_Reconfig+0x2c>)
	__HAL_TIM_SET_AUTORELOAD(&htim4, arr);
 800e438:	680a      	ldr	r2, [r1, #0]
{
 800e43a:	b410      	push	{r4}
 800e43c:	b284      	uxth	r4, r0
	uint16_t psc = (uint16_t)(arrPsc >> 16);
 800e43e:	0c00      	lsrs	r0, r0, #16
	__HAL_TIM_SET_AUTORELOAD(&htim4, arr);
 800e440:	62d4      	str	r4, [r2, #44]	; 0x2c
	__HAL_TIM_SET_PRESCALER(&htim4, psc);
 800e442:	6290      	str	r0, [r2, #40]	; 0x28
	TIM4->EGR |= TIM_EGR_UG;
 800e444:	695a      	ldr	r2, [r3, #20]
	__HAL_TIM_SET_AUTORELOAD(&htim4, arr);
 800e446:	60cc      	str	r4, [r1, #12]
	TIM4->EGR |= TIM_EGR_UG;
 800e448:	f042 0201 	orr.w	r2, r2, #1
 800e44c:	615a      	str	r2, [r3, #20]
	TIM4->CR1 &= ~(TIM_CR1_CEN);
 800e44e:	681a      	ldr	r2, [r3, #0]
}
 800e450:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM4->CR1 &= ~(TIM_CR1_CEN);
 800e454:	f022 0201 	bic.w	r2, r2, #1
 800e458:	601a      	str	r2, [r3, #0]
}
 800e45a:	4770      	bx	lr
 800e45c:	2000d13c 	.word	0x2000d13c
 800e460:	40000800 	.word	0x40000800

0800e464 <TIM_SamplingFreq_ARR_PSC_Reconfig>:
{
 800e464:	b470      	push	{r4, r5, r6}
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800e466:	4d08      	ldr	r5, [pc, #32]	; (800e488 <TIM_SamplingFreq_ARR_PSC_Reconfig+0x24>)
	logAnlys.samplingFreq = LOG_ANLYS_TIMEBASE_PERIPH_CLOCK / ((arr + 1) * (psc + 1));
 800e468:	4e08      	ldr	r6, [pc, #32]	; (800e48c <TIM_SamplingFreq_ARR_PSC_Reconfig+0x28>)
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800e46a:	6829      	ldr	r1, [r5, #0]
	logAnlys.samplingFreq = LOG_ANLYS_TIMEBASE_PERIPH_CLOCK / ((arr + 1) * (psc + 1));
 800e46c:	4a08      	ldr	r2, [pc, #32]	; (800e490 <TIM_SamplingFreq_ARR_PSC_Reconfig+0x2c>)
	uint16_t psc = (uint16_t)(arrPsc >> 16);
 800e46e:	0c04      	lsrs	r4, r0, #16
	logAnlys.samplingFreq = LOG_ANLYS_TIMEBASE_PERIPH_CLOCK / ((arr + 1) * (psc + 1));
 800e470:	1c63      	adds	r3, r4, #1
 800e472:	b280      	uxth	r0, r0
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800e474:	60e8      	str	r0, [r5, #12]
	logAnlys.samplingFreq = LOG_ANLYS_TIMEBASE_PERIPH_CLOCK / ((arr + 1) * (psc + 1));
 800e476:	fb00 3303 	mla	r3, r0, r3, r3
 800e47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47e:	6073      	str	r3, [r6, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800e480:	62c8      	str	r0, [r1, #44]	; 0x2c
	__HAL_TIM_SET_PRESCALER(&htim1, psc);
 800e482:	628c      	str	r4, [r1, #40]	; 0x28
}
 800e484:	bc70      	pop	{r4, r5, r6}
 800e486:	4770      	bx	lr
 800e488:	2000d078 	.word	0x2000d078
 800e48c:	20005418 	.word	0x20005418
 800e490:	08954400 	.word	0x08954400

0800e494 <TIM_PostTrigger_SoftwareStart>:
	__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 800e494:	4b04      	ldr	r3, [pc, #16]	; (800e4a8 <TIM_PostTrigger_SoftwareStart+0x14>)
	TIM4->CR1 |= TIM_CR1_CEN;
 800e496:	4a05      	ldr	r2, [pc, #20]	; (800e4ac <TIM_PostTrigger_SoftwareStart+0x18>)
	__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2100      	movs	r1, #0
 800e49c:	6259      	str	r1, [r3, #36]	; 0x24
	TIM4->CR1 |= TIM_CR1_CEN;
 800e49e:	6813      	ldr	r3, [r2, #0]
 800e4a0:	f043 0301 	orr.w	r3, r3, #1
 800e4a4:	6013      	str	r3, [r2, #0]
}
 800e4a6:	4770      	bx	lr
 800e4a8:	2000d13c 	.word	0x2000d13c
 800e4ac:	40000800 	.word	0x40000800

0800e4b0 <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 800e4b0:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e4b2:	2017      	movs	r0, #23
{
 800e4b4:	b087      	sub	sp, #28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e4b6:	f7f7 fcaf 	bl	8005e18 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e4ba:	2028      	movs	r0, #40	; 0x28
 800e4bc:	f7f7 fcac 	bl	8005e18 <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800e4c0:	4a28      	ldr	r2, [pc, #160]	; (800e564 <GPIO_EnableTrigger+0xb4>)

	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e4c2:	4829      	ldr	r0, [pc, #164]	; (800e568 <GPIO_EnableTrigger+0xb8>)
	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800e4c4:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800e4c8:	9301      	str	r3, [sp, #4]
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800e4ca:	6813      	ldr	r3, [r2, #0]
 800e4cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800e4d0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e4d2:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e4d4:	2201      	movs	r2, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e4d6:	2303      	movs	r3, #3
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e4d8:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e4da:	e9cd 5202 	strd	r5, r2, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e4de:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e4e0:	f7f7 ffe2 	bl	80064a8 <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800e4e4:	4a21      	ldr	r2, [pc, #132]	; (800e56c <GPIO_EnableTrigger+0xbc>)
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e4e6:	4b22      	ldr	r3, [pc, #136]	; (800e570 <GPIO_EnableTrigger+0xc0>)
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800e4e8:	7d90      	ldrb	r0, [r2, #22]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e4ea:	4922      	ldr	r1, [pc, #136]	; (800e574 <GPIO_EnableTrigger+0xc4>)
	}

	switch(logAnlys.trigConfig){
 800e4ec:	7d52      	ldrb	r2, [r2, #21]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e4ee:	2801      	cmp	r0, #1
 800e4f0:	bf18      	it	ne
 800e4f2:	460b      	movne	r3, r1
 800e4f4:	9302      	str	r3, [sp, #8]
	switch(logAnlys.trigConfig){
 800e4f6:	2a07      	cmp	r2, #7
 800e4f8:	d809      	bhi.n	800e50e <GPIO_EnableTrigger+0x5e>
 800e4fa:	e8df f002 	tbb	[pc, r2]
 800e4fe:	1511      	.short	0x1511
 800e500:	28231e19 	.word	0x28231e19
 800e504:	042d      	.short	0x042d
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
		ExtiLine = EXTI15_10_IRQn;
		break;
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 800e506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e50a:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e50c:	2428      	movs	r4, #40	; 0x28
		break;
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e50e:	a901      	add	r1, sp, #4
 800e510:	4815      	ldr	r0, [pc, #84]	; (800e568 <GPIO_EnableTrigger+0xb8>)
 800e512:	f7f7 ffc9 	bl	80064a8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 800e516:	4620      	mov	r0, r4
 800e518:	f7f7 fc72 	bl	8005e00 <HAL_NVIC_EnableIRQ>
}
 800e51c:	b007      	add	sp, #28
 800e51e:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 800e520:	2340      	movs	r3, #64	; 0x40
 800e522:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e524:	2417      	movs	r4, #23
		break;
 800e526:	e7f2      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 800e528:	2380      	movs	r3, #128	; 0x80
 800e52a:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e52c:	2417      	movs	r4, #23
		break;
 800e52e:	e7ee      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 800e530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e534:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e536:	2417      	movs	r4, #23
		break;
 800e538:	e7e9      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 800e53a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e53e:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e540:	2417      	movs	r4, #23
		break;
 800e542:	e7e4      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 800e544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e548:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e54a:	2428      	movs	r4, #40	; 0x28
		break;
 800e54c:	e7df      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 800e54e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e552:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e554:	2428      	movs	r4, #40	; 0x28
		break;
 800e556:	e7da      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 800e558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e55c:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e55e:	2428      	movs	r4, #40	; 0x28
		break;
 800e560:	e7d5      	b.n	800e50e <GPIO_EnableTrigger+0x5e>
 800e562:	bf00      	nop
 800e564:	40010400 	.word	0x40010400
 800e568:	48000400 	.word	0x48000400
 800e56c:	20005418 	.word	0x20005418
 800e570:	10210000 	.word	0x10210000
 800e574:	10110000 	.word	0x10110000

0800e578 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800e578:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 800e57a:	4c0e      	ldr	r4, [pc, #56]	; (800e5b4 <MX_TIM15_Init+0x3c>)
 800e57c:	4b0e      	ldr	r3, [pc, #56]	; (800e5b8 <MX_TIM15_Init+0x40>)
 800e57e:	6023      	str	r3, [r4, #0]
{
 800e580:	b089      	sub	sp, #36	; 0x24
	htim_scope.Init.Prescaler = 0;
 800e582:	2500      	movs	r5, #0
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_scope.Init.Period = 0;
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init(&htim_scope);
 800e584:	4620      	mov	r0, r4
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e586:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e58a:	e9c4 5503 	strd	r5, r5, [r4, #12]
	HAL_TIM_Base_Init(&htim_scope);
 800e58e:	f7f9 f85d 	bl	800764c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e592:	a908      	add	r1, sp, #32
 800e594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e598:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 800e59c:	4620      	mov	r0, r4
 800e59e:	f7f9 fd11 	bl	8007fc4 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e5a2:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5a8:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e5aa:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800e5ac:	f7fa f948 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>

}
 800e5b0:	b009      	add	sp, #36	; 0x24
 800e5b2:	bd30      	pop	{r4, r5, pc}
 800e5b4:	2000d2d4 	.word	0x2000d2d4
 800e5b8:	40014000 	.word	0x40014000

0800e5bc <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
	__TIM15_CLK_ENABLE();
 800e5bc:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <TIM15_SCOPE_MspInit+0x1c>)
 800e5be:	699a      	ldr	r2, [r3, #24]
 800e5c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e5c4:	619a      	str	r2, [r3, #24]
 800e5c6:	699b      	ldr	r3, [r3, #24]
{
 800e5c8:	b082      	sub	sp, #8
	__TIM15_CLK_ENABLE();
 800e5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	9b01      	ldr	r3, [sp, #4]
}
 800e5d2:	b002      	add	sp, #8
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	40021000 	.word	0x40021000

0800e5dc <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM15_CLK_DISABLE();
 800e5dc:	4a02      	ldr	r2, [pc, #8]	; (800e5e8 <TIM15_SCOPE_MspDeinit+0xc>)
 800e5de:	6993      	ldr	r3, [r2, #24]
 800e5e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5e4:	6193      	str	r3, [r2, #24]
}
 800e5e6:	4770      	bx	lr
 800e5e8:	40021000 	.word	0x40021000

0800e5ec <TIMScopeEnable>:
/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */

void TIMScopeEnable(){
	HAL_TIM_Base_Start(&htim_scope);
 800e5ec:	4801      	ldr	r0, [pc, #4]	; (800e5f4 <TIMScopeEnable+0x8>)
 800e5ee:	f7f9 b8e5 	b.w	80077bc <HAL_TIM_Base_Start>
 800e5f2:	bf00      	nop
 800e5f4:	2000d2d4 	.word	0x2000d2d4

0800e5f8 <TIMScopeDisable>:
}

void TIMScopeDisable(){
	HAL_TIM_Base_Stop(&htim_scope);
 800e5f8:	4801      	ldr	r0, [pc, #4]	; (800e600 <TIMScopeDisable+0x8>)
 800e5fa:	f7f9 b8ef 	b.w	80077dc <HAL_TIM_Base_Stop>
 800e5fe:	bf00      	nop
 800e600:	2000d2d4 	.word	0x2000d2d4

0800e604 <TIM_Reconfig_scope>:
}

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800e604:	b570      	push	{r4, r5, r6, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	460e      	mov	r6, r1
 800e60a:	4605      	mov	r5, r0
	uint32_t periphClock = HAL_RCC_GetHCLKFreq();
 800e60c:	f7f8 fcd0 	bl	8006fb0 <HAL_RCC_GetHCLKFreq>
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 800e610:	2401      	movs	r4, #1
 800e612:	4601      	mov	r1, r0
 800e614:	4633      	mov	r3, r6
 800e616:	462a      	mov	r2, r5
 800e618:	9400      	str	r4, [sp, #0]
 800e61a:	4802      	ldr	r0, [pc, #8]	; (800e624 <TIM_Reconfig_scope+0x20>)
 800e61c:	f7fe fc86 	bl	800cf2c <TIM_Reconfig>
}
 800e620:	b002      	add	sp, #8
 800e622:	bd70      	pop	{r4, r5, r6, pc}
 800e624:	2000d2d4 	.word	0x2000d2d4

0800e628 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
	if(ADCRes==12){
 800e628:	280c      	cmp	r0, #12
 800e62a:	d00b      	beq.n	800e644 <getMaxScopeSamplingFreq+0x1c>
		return MAX_SAMPLING_FREQ_12B;
	}else if(ADCRes==8){
 800e62c:	2808      	cmp	r0, #8
 800e62e:	d007      	beq.n	800e640 <getMaxScopeSamplingFreq+0x18>
uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 800e630:	b510      	push	{r4, lr}
 800e632:	4604      	mov	r4, r0
		return MAX_SAMPLING_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800e634:	f7f8 fcda 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
 800e638:	3402      	adds	r4, #2
 800e63a:	fbb0 f0f4 	udiv	r0, r0, r4
}
 800e63e:	bd10      	pop	{r4, pc}
		return MAX_SAMPLING_FREQ_8B;
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <getMaxScopeSamplingFreq+0x20>)
}
 800e642:	4770      	bx	lr
		return MAX_SAMPLING_FREQ_12B;
 800e644:	4801      	ldr	r0, [pc, #4]	; (800e64c <getMaxScopeSamplingFreq+0x24>)
 800e646:	4770      	bx	lr
 800e648:	00493e00 	.word	0x00493e00
 800e64c:	003d0900 	.word	0x003d0900

0800e650 <MX_USART2_UART_Init>:
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 800e650:	4b09      	ldr	r3, [pc, #36]	; (800e678 <MX_USART2_UART_Init+0x28>)
 800e652:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <MX_USART2_UART_Init+0x2c>)
{
 800e654:	b410      	push	{r4}
  huart2.Init.BaudRate = UART_SPEED;
 800e656:	f44f 24e1 	mov.w	r4, #460800	; 0x70800
  huart2.Instance = USART2;
 800e65a:	601a      	str	r2, [r3, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e65c:	210c      	movs	r1, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e65e:	2200      	movs	r2, #0
  huart2.Init.BaudRate = UART_SPEED;
 800e660:	605c      	str	r4, [r3, #4]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 800e662:	4618      	mov	r0, r3

}
 800e664:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e668:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e66a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e66e:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e670:	e9c3 2206 	strd	r2, r2, [r3, #24]
  HAL_UART_Init(&huart2);
 800e674:	f7fa ba2a 	b.w	8008acc <HAL_UART_Init>
 800e678:	2000d39c 	.word	0x2000d39c
 800e67c:	40004400 	.word	0x40004400

0800e680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e680:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800e682:	4b17      	ldr	r3, [pc, #92]	; (800e6e0 <HAL_UART_MspInit+0x60>)
 800e684:	6804      	ldr	r4, [r0, #0]
 800e686:	429c      	cmp	r4, r3
{
 800e688:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800e68a:	d001      	beq.n	800e690 <HAL_UART_MspInit+0x10>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800e68c:	b006      	add	sp, #24
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
    __USART2_CLK_ENABLE();
 800e690:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 800e694:	210c      	movs	r1, #12
    __USART2_CLK_ENABLE();
 800e696:	69da      	ldr	r2, [r3, #28]
 800e698:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e69c:	61da      	str	r2, [r3, #28]
 800e69e:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 800e6a0:	9101      	str	r1, [sp, #4]
    __USART2_CLK_ENABLE();
 800e6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6a6:	2002      	movs	r0, #2
    __USART2_CLK_ENABLE();
 800e6a8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6aa:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e6ac:	2307      	movs	r3, #7
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800e6ae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6b0:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;   // GPIO_PULLUP
 800e6b2:	2501      	movs	r5, #1
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800e6b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6b8:	e9cd 5203 	strd	r5, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e6bc:	9305      	str	r3, [sp, #20]
    __USART2_CLK_ENABLE();
 800e6be:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800e6c0:	f7f7 fef2 	bl	80064a8 <HAL_GPIO_Init>
		USART2->CR1 |= USART_CR1_RXNEIE;
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	f043 0320 	orr.w	r3, r3, #32
 800e6ca:	6023      	str	r3, [r4, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2106      	movs	r1, #6
 800e6d0:	2026      	movs	r0, #38	; 0x26
 800e6d2:	f7f7 fb5f 	bl	8005d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e6d6:	2026      	movs	r0, #38	; 0x26
 800e6d8:	f7f7 fb92 	bl	8005e00 <HAL_NVIC_EnableIRQ>
}
 800e6dc:	b006      	add	sp, #24
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
 800e6e0:	40004400 	.word	0x40004400

0800e6e4 <UARTsendChar>:
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
	while (!(USART2->ISR & USART_ISR_TXE));
 800e6e4:	4a03      	ldr	r2, [pc, #12]	; (800e6f4 <UARTsendChar+0x10>)
 800e6e6:	69d3      	ldr	r3, [r2, #28]
 800e6e8:	061b      	lsls	r3, r3, #24
 800e6ea:	d5fc      	bpl.n	800e6e6 <UARTsendChar+0x2>
	return (USART2->TDR = chr);	
 800e6ec:	b283      	uxth	r3, r0
 800e6ee:	8513      	strh	r3, [r2, #40]	; 0x28
}
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	40004400 	.word	0x40004400

0800e6f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e6f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e730 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e6fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e6fe:	e003      	b.n	800e708 <LoopCopyDataInit>

0800e700 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e700:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e702:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e704:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e706:	3104      	adds	r1, #4

0800e708 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e708:	480b      	ldr	r0, [pc, #44]	; (800e738 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e70a:	4b0c      	ldr	r3, [pc, #48]	; (800e73c <LoopForever+0xe>)
	adds	r2, r0, r1
 800e70c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e70e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e710:	d3f6      	bcc.n	800e700 <CopyDataInit>
	ldr	r2, =_sbss
 800e712:	4a0b      	ldr	r2, [pc, #44]	; (800e740 <LoopForever+0x12>)
	b	LoopFillZerobss
 800e714:	e002      	b.n	800e71c <LoopFillZerobss>

0800e716 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e716:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e718:	f842 3b04 	str.w	r3, [r2], #4

0800e71c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e71c:	4b09      	ldr	r3, [pc, #36]	; (800e744 <LoopForever+0x16>)
	cmp	r2, r3
 800e71e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e720:	d3f9      	bcc.n	800e716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e722:	f7fd fc35 	bl	800bf90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e726:	f000 f817 	bl	800e758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e72a:	f7fd fa05 	bl	800bb38 <main>

0800e72e <LoopForever>:

LoopForever:
    b LoopForever
 800e72e:	e7fe      	b.n	800e72e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e730:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800e734:	08011ca8 	.word	0x08011ca8
	ldr	r0, =_sdata
 800e738:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e73c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800e740:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 800e744:	2000d410 	.word	0x2000d410

0800e748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e748:	e7fe      	b.n	800e748 <ADC1_2_IRQHandler>
	...

0800e74c <__errno>:
 800e74c:	4b01      	ldr	r3, [pc, #4]	; (800e754 <__errno+0x8>)
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	20000010 	.word	0x20000010

0800e758 <__libc_init_array>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	4e0d      	ldr	r6, [pc, #52]	; (800e790 <__libc_init_array+0x38>)
 800e75c:	4c0d      	ldr	r4, [pc, #52]	; (800e794 <__libc_init_array+0x3c>)
 800e75e:	1ba4      	subs	r4, r4, r6
 800e760:	10a4      	asrs	r4, r4, #2
 800e762:	2500      	movs	r5, #0
 800e764:	42a5      	cmp	r5, r4
 800e766:	d109      	bne.n	800e77c <__libc_init_array+0x24>
 800e768:	4e0b      	ldr	r6, [pc, #44]	; (800e798 <__libc_init_array+0x40>)
 800e76a:	4c0c      	ldr	r4, [pc, #48]	; (800e79c <__libc_init_array+0x44>)
 800e76c:	f002 fe52 	bl	8011414 <_init>
 800e770:	1ba4      	subs	r4, r4, r6
 800e772:	10a4      	asrs	r4, r4, #2
 800e774:	2500      	movs	r5, #0
 800e776:	42a5      	cmp	r5, r4
 800e778:	d105      	bne.n	800e786 <__libc_init_array+0x2e>
 800e77a:	bd70      	pop	{r4, r5, r6, pc}
 800e77c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e780:	4798      	blx	r3
 800e782:	3501      	adds	r5, #1
 800e784:	e7ee      	b.n	800e764 <__libc_init_array+0xc>
 800e786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e78a:	4798      	blx	r3
 800e78c:	3501      	adds	r5, #1
 800e78e:	e7f2      	b.n	800e776 <__libc_init_array+0x1e>
 800e790:	08011ca0 	.word	0x08011ca0
 800e794:	08011ca0 	.word	0x08011ca0
 800e798:	08011ca0 	.word	0x08011ca0
 800e79c:	08011ca4 	.word	0x08011ca4

0800e7a0 <memcpy>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	1e43      	subs	r3, r0, #1
 800e7a4:	440a      	add	r2, r1
 800e7a6:	4291      	cmp	r1, r2
 800e7a8:	d100      	bne.n	800e7ac <memcpy+0xc>
 800e7aa:	bd10      	pop	{r4, pc}
 800e7ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7b4:	e7f7      	b.n	800e7a6 <memcpy+0x6>

0800e7b6 <memset>:
 800e7b6:	4402      	add	r2, r0
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d100      	bne.n	800e7c0 <memset+0xa>
 800e7be:	4770      	bx	lr
 800e7c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c4:	e7f9      	b.n	800e7ba <memset+0x4>
	...

0800e7c8 <_malloc_r>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	1ccd      	adds	r5, r1, #3
 800e7cc:	f025 0503 	bic.w	r5, r5, #3
 800e7d0:	3508      	adds	r5, #8
 800e7d2:	2d0c      	cmp	r5, #12
 800e7d4:	bf38      	it	cc
 800e7d6:	250c      	movcc	r5, #12
 800e7d8:	2d00      	cmp	r5, #0
 800e7da:	4606      	mov	r6, r0
 800e7dc:	db01      	blt.n	800e7e2 <_malloc_r+0x1a>
 800e7de:	42a9      	cmp	r1, r5
 800e7e0:	d903      	bls.n	800e7ea <_malloc_r+0x22>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	6033      	str	r3, [r6, #0]
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ea:	f001 fa63 	bl	800fcb4 <__malloc_lock>
 800e7ee:	4a21      	ldr	r2, [pc, #132]	; (800e874 <_malloc_r+0xac>)
 800e7f0:	6814      	ldr	r4, [r2, #0]
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	b991      	cbnz	r1, 800e81c <_malloc_r+0x54>
 800e7f6:	4c20      	ldr	r4, [pc, #128]	; (800e878 <_malloc_r+0xb0>)
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	b91b      	cbnz	r3, 800e804 <_malloc_r+0x3c>
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f000 fbef 	bl	800efe0 <_sbrk_r>
 800e802:	6020      	str	r0, [r4, #0]
 800e804:	4629      	mov	r1, r5
 800e806:	4630      	mov	r0, r6
 800e808:	f000 fbea 	bl	800efe0 <_sbrk_r>
 800e80c:	1c43      	adds	r3, r0, #1
 800e80e:	d124      	bne.n	800e85a <_malloc_r+0x92>
 800e810:	230c      	movs	r3, #12
 800e812:	6033      	str	r3, [r6, #0]
 800e814:	4630      	mov	r0, r6
 800e816:	f001 fa4e 	bl	800fcb6 <__malloc_unlock>
 800e81a:	e7e4      	b.n	800e7e6 <_malloc_r+0x1e>
 800e81c:	680b      	ldr	r3, [r1, #0]
 800e81e:	1b5b      	subs	r3, r3, r5
 800e820:	d418      	bmi.n	800e854 <_malloc_r+0x8c>
 800e822:	2b0b      	cmp	r3, #11
 800e824:	d90f      	bls.n	800e846 <_malloc_r+0x7e>
 800e826:	600b      	str	r3, [r1, #0]
 800e828:	50cd      	str	r5, [r1, r3]
 800e82a:	18cc      	adds	r4, r1, r3
 800e82c:	4630      	mov	r0, r6
 800e82e:	f001 fa42 	bl	800fcb6 <__malloc_unlock>
 800e832:	f104 000b 	add.w	r0, r4, #11
 800e836:	1d23      	adds	r3, r4, #4
 800e838:	f020 0007 	bic.w	r0, r0, #7
 800e83c:	1ac3      	subs	r3, r0, r3
 800e83e:	d0d3      	beq.n	800e7e8 <_malloc_r+0x20>
 800e840:	425a      	negs	r2, r3
 800e842:	50e2      	str	r2, [r4, r3]
 800e844:	e7d0      	b.n	800e7e8 <_malloc_r+0x20>
 800e846:	428c      	cmp	r4, r1
 800e848:	684b      	ldr	r3, [r1, #4]
 800e84a:	bf16      	itet	ne
 800e84c:	6063      	strne	r3, [r4, #4]
 800e84e:	6013      	streq	r3, [r2, #0]
 800e850:	460c      	movne	r4, r1
 800e852:	e7eb      	b.n	800e82c <_malloc_r+0x64>
 800e854:	460c      	mov	r4, r1
 800e856:	6849      	ldr	r1, [r1, #4]
 800e858:	e7cc      	b.n	800e7f4 <_malloc_r+0x2c>
 800e85a:	1cc4      	adds	r4, r0, #3
 800e85c:	f024 0403 	bic.w	r4, r4, #3
 800e860:	42a0      	cmp	r0, r4
 800e862:	d005      	beq.n	800e870 <_malloc_r+0xa8>
 800e864:	1a21      	subs	r1, r4, r0
 800e866:	4630      	mov	r0, r6
 800e868:	f000 fbba 	bl	800efe0 <_sbrk_r>
 800e86c:	3001      	adds	r0, #1
 800e86e:	d0cf      	beq.n	800e810 <_malloc_r+0x48>
 800e870:	6025      	str	r5, [r4, #0]
 800e872:	e7db      	b.n	800e82c <_malloc_r+0x64>
 800e874:	200047c0 	.word	0x200047c0
 800e878:	200047c4 	.word	0x200047c4

0800e87c <__cvt>:
 800e87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e880:	ec55 4b10 	vmov	r4, r5, d0
 800e884:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e886:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e88a:	2d00      	cmp	r5, #0
 800e88c:	460e      	mov	r6, r1
 800e88e:	4691      	mov	r9, r2
 800e890:	4619      	mov	r1, r3
 800e892:	bfb8      	it	lt
 800e894:	4622      	movlt	r2, r4
 800e896:	462b      	mov	r3, r5
 800e898:	f027 0720 	bic.w	r7, r7, #32
 800e89c:	bfbb      	ittet	lt
 800e89e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8a2:	461d      	movlt	r5, r3
 800e8a4:	2300      	movge	r3, #0
 800e8a6:	232d      	movlt	r3, #45	; 0x2d
 800e8a8:	bfb8      	it	lt
 800e8aa:	4614      	movlt	r4, r2
 800e8ac:	2f46      	cmp	r7, #70	; 0x46
 800e8ae:	700b      	strb	r3, [r1, #0]
 800e8b0:	d004      	beq.n	800e8bc <__cvt+0x40>
 800e8b2:	2f45      	cmp	r7, #69	; 0x45
 800e8b4:	d100      	bne.n	800e8b8 <__cvt+0x3c>
 800e8b6:	3601      	adds	r6, #1
 800e8b8:	2102      	movs	r1, #2
 800e8ba:	e000      	b.n	800e8be <__cvt+0x42>
 800e8bc:	2103      	movs	r1, #3
 800e8be:	ab03      	add	r3, sp, #12
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	ab02      	add	r3, sp, #8
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	4632      	mov	r2, r6
 800e8c8:	4653      	mov	r3, sl
 800e8ca:	ec45 4b10 	vmov	d0, r4, r5
 800e8ce:	f000 fc23 	bl	800f118 <_dtoa_r>
 800e8d2:	2f47      	cmp	r7, #71	; 0x47
 800e8d4:	4680      	mov	r8, r0
 800e8d6:	d102      	bne.n	800e8de <__cvt+0x62>
 800e8d8:	f019 0f01 	tst.w	r9, #1
 800e8dc:	d026      	beq.n	800e92c <__cvt+0xb0>
 800e8de:	2f46      	cmp	r7, #70	; 0x46
 800e8e0:	eb08 0906 	add.w	r9, r8, r6
 800e8e4:	d111      	bne.n	800e90a <__cvt+0x8e>
 800e8e6:	f898 3000 	ldrb.w	r3, [r8]
 800e8ea:	2b30      	cmp	r3, #48	; 0x30
 800e8ec:	d10a      	bne.n	800e904 <__cvt+0x88>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	f7f2 f89f 	bl	8000a38 <__aeabi_dcmpeq>
 800e8fa:	b918      	cbnz	r0, 800e904 <__cvt+0x88>
 800e8fc:	f1c6 0601 	rsb	r6, r6, #1
 800e900:	f8ca 6000 	str.w	r6, [sl]
 800e904:	f8da 3000 	ldr.w	r3, [sl]
 800e908:	4499      	add	r9, r3
 800e90a:	2200      	movs	r2, #0
 800e90c:	2300      	movs	r3, #0
 800e90e:	4620      	mov	r0, r4
 800e910:	4629      	mov	r1, r5
 800e912:	f7f2 f891 	bl	8000a38 <__aeabi_dcmpeq>
 800e916:	b938      	cbnz	r0, 800e928 <__cvt+0xac>
 800e918:	2230      	movs	r2, #48	; 0x30
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	454b      	cmp	r3, r9
 800e91e:	d205      	bcs.n	800e92c <__cvt+0xb0>
 800e920:	1c59      	adds	r1, r3, #1
 800e922:	9103      	str	r1, [sp, #12]
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e7f8      	b.n	800e91a <__cvt+0x9e>
 800e928:	f8cd 900c 	str.w	r9, [sp, #12]
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e930:	eba3 0308 	sub.w	r3, r3, r8
 800e934:	4640      	mov	r0, r8
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	b004      	add	sp, #16
 800e93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e93e <__exponent>:
 800e93e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e940:	2900      	cmp	r1, #0
 800e942:	4604      	mov	r4, r0
 800e944:	bfba      	itte	lt
 800e946:	4249      	neglt	r1, r1
 800e948:	232d      	movlt	r3, #45	; 0x2d
 800e94a:	232b      	movge	r3, #43	; 0x2b
 800e94c:	2909      	cmp	r1, #9
 800e94e:	f804 2b02 	strb.w	r2, [r4], #2
 800e952:	7043      	strb	r3, [r0, #1]
 800e954:	dd20      	ble.n	800e998 <__exponent+0x5a>
 800e956:	f10d 0307 	add.w	r3, sp, #7
 800e95a:	461f      	mov	r7, r3
 800e95c:	260a      	movs	r6, #10
 800e95e:	fb91 f5f6 	sdiv	r5, r1, r6
 800e962:	fb06 1115 	mls	r1, r6, r5, r1
 800e966:	3130      	adds	r1, #48	; 0x30
 800e968:	2d09      	cmp	r5, #9
 800e96a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e96e:	f103 32ff 	add.w	r2, r3, #4294967295
 800e972:	4629      	mov	r1, r5
 800e974:	dc09      	bgt.n	800e98a <__exponent+0x4c>
 800e976:	3130      	adds	r1, #48	; 0x30
 800e978:	3b02      	subs	r3, #2
 800e97a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e97e:	42bb      	cmp	r3, r7
 800e980:	4622      	mov	r2, r4
 800e982:	d304      	bcc.n	800e98e <__exponent+0x50>
 800e984:	1a10      	subs	r0, r2, r0
 800e986:	b003      	add	sp, #12
 800e988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98a:	4613      	mov	r3, r2
 800e98c:	e7e7      	b.n	800e95e <__exponent+0x20>
 800e98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e992:	f804 2b01 	strb.w	r2, [r4], #1
 800e996:	e7f2      	b.n	800e97e <__exponent+0x40>
 800e998:	2330      	movs	r3, #48	; 0x30
 800e99a:	4419      	add	r1, r3
 800e99c:	7083      	strb	r3, [r0, #2]
 800e99e:	1d02      	adds	r2, r0, #4
 800e9a0:	70c1      	strb	r1, [r0, #3]
 800e9a2:	e7ef      	b.n	800e984 <__exponent+0x46>

0800e9a4 <_printf_float>:
 800e9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	b08d      	sub	sp, #52	; 0x34
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e9b0:	4616      	mov	r6, r2
 800e9b2:	461f      	mov	r7, r3
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	f001 f967 	bl	800fc88 <_localeconv_r>
 800e9ba:	6803      	ldr	r3, [r0, #0]
 800e9bc:	9304      	str	r3, [sp, #16]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f1 fc0e 	bl	80001e0 <strlen>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9cc:	9005      	str	r0, [sp, #20]
 800e9ce:	3307      	adds	r3, #7
 800e9d0:	f023 0307 	bic.w	r3, r3, #7
 800e9d4:	f103 0208 	add.w	r2, r3, #8
 800e9d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e9dc:	f8d4 b000 	ldr.w	fp, [r4]
 800e9e0:	f8c8 2000 	str.w	r2, [r8]
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e9ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e9f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9f4:	9307      	str	r3, [sp, #28]
 800e9f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fe:	4ba7      	ldr	r3, [pc, #668]	; (800ec9c <_printf_float+0x2f8>)
 800ea00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea04:	f7f2 f84a 	bl	8000a9c <__aeabi_dcmpun>
 800ea08:	bb70      	cbnz	r0, 800ea68 <_printf_float+0xc4>
 800ea0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0e:	4ba3      	ldr	r3, [pc, #652]	; (800ec9c <_printf_float+0x2f8>)
 800ea10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea14:	f7f2 f824 	bl	8000a60 <__aeabi_dcmple>
 800ea18:	bb30      	cbnz	r0, 800ea68 <_printf_float+0xc4>
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4640      	mov	r0, r8
 800ea20:	4649      	mov	r1, r9
 800ea22:	f7f2 f813 	bl	8000a4c <__aeabi_dcmplt>
 800ea26:	b110      	cbz	r0, 800ea2e <_printf_float+0x8a>
 800ea28:	232d      	movs	r3, #45	; 0x2d
 800ea2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea2e:	4a9c      	ldr	r2, [pc, #624]	; (800eca0 <_printf_float+0x2fc>)
 800ea30:	4b9c      	ldr	r3, [pc, #624]	; (800eca4 <_printf_float+0x300>)
 800ea32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ea36:	bf8c      	ite	hi
 800ea38:	4690      	movhi	r8, r2
 800ea3a:	4698      	movls	r8, r3
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	f02b 0204 	bic.w	r2, fp, #4
 800ea42:	6123      	str	r3, [r4, #16]
 800ea44:	6022      	str	r2, [r4, #0]
 800ea46:	f04f 0900 	mov.w	r9, #0
 800ea4a:	9700      	str	r7, [sp, #0]
 800ea4c:	4633      	mov	r3, r6
 800ea4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea50:	4621      	mov	r1, r4
 800ea52:	4628      	mov	r0, r5
 800ea54:	f000 f9e6 	bl	800ee24 <_printf_common>
 800ea58:	3001      	adds	r0, #1
 800ea5a:	f040 808d 	bne.w	800eb78 <_printf_float+0x1d4>
 800ea5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea62:	b00d      	add	sp, #52	; 0x34
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	4642      	mov	r2, r8
 800ea6a:	464b      	mov	r3, r9
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	4649      	mov	r1, r9
 800ea70:	f7f2 f814 	bl	8000a9c <__aeabi_dcmpun>
 800ea74:	b110      	cbz	r0, 800ea7c <_printf_float+0xd8>
 800ea76:	4a8c      	ldr	r2, [pc, #560]	; (800eca8 <_printf_float+0x304>)
 800ea78:	4b8c      	ldr	r3, [pc, #560]	; (800ecac <_printf_float+0x308>)
 800ea7a:	e7da      	b.n	800ea32 <_printf_float+0x8e>
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	1c4b      	adds	r3, r1, #1
 800ea80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ea84:	a80a      	add	r0, sp, #40	; 0x28
 800ea86:	d13e      	bne.n	800eb06 <_printf_float+0x162>
 800ea88:	2306      	movs	r3, #6
 800ea8a:	6063      	str	r3, [r4, #4]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ea92:	ab09      	add	r3, sp, #36	; 0x24
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	ec49 8b10 	vmov	d0, r8, r9
 800ea9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea9e:	6022      	str	r2, [r4, #0]
 800eaa0:	f8cd a004 	str.w	sl, [sp, #4]
 800eaa4:	6861      	ldr	r1, [r4, #4]
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f7ff fee8 	bl	800e87c <__cvt>
 800eaac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800eab0:	2b47      	cmp	r3, #71	; 0x47
 800eab2:	4680      	mov	r8, r0
 800eab4:	d109      	bne.n	800eaca <_printf_float+0x126>
 800eab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab8:	1cd8      	adds	r0, r3, #3
 800eaba:	db02      	blt.n	800eac2 <_printf_float+0x11e>
 800eabc:	6862      	ldr	r2, [r4, #4]
 800eabe:	4293      	cmp	r3, r2
 800eac0:	dd47      	ble.n	800eb52 <_printf_float+0x1ae>
 800eac2:	f1aa 0a02 	sub.w	sl, sl, #2
 800eac6:	fa5f fa8a 	uxtb.w	sl, sl
 800eaca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eace:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ead0:	d824      	bhi.n	800eb1c <_printf_float+0x178>
 800ead2:	3901      	subs	r1, #1
 800ead4:	4652      	mov	r2, sl
 800ead6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eada:	9109      	str	r1, [sp, #36]	; 0x24
 800eadc:	f7ff ff2f 	bl	800e93e <__exponent>
 800eae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eae2:	1813      	adds	r3, r2, r0
 800eae4:	2a01      	cmp	r2, #1
 800eae6:	4681      	mov	r9, r0
 800eae8:	6123      	str	r3, [r4, #16]
 800eaea:	dc02      	bgt.n	800eaf2 <_printf_float+0x14e>
 800eaec:	6822      	ldr	r2, [r4, #0]
 800eaee:	07d1      	lsls	r1, r2, #31
 800eaf0:	d501      	bpl.n	800eaf6 <_printf_float+0x152>
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	6123      	str	r3, [r4, #16]
 800eaf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d0a5      	beq.n	800ea4a <_printf_float+0xa6>
 800eafe:	232d      	movs	r3, #45	; 0x2d
 800eb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb04:	e7a1      	b.n	800ea4a <_printf_float+0xa6>
 800eb06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800eb0a:	f000 8177 	beq.w	800edfc <_printf_float+0x458>
 800eb0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800eb12:	d1bb      	bne.n	800ea8c <_printf_float+0xe8>
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d1b9      	bne.n	800ea8c <_printf_float+0xe8>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e7b6      	b.n	800ea8a <_printf_float+0xe6>
 800eb1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800eb20:	d119      	bne.n	800eb56 <_printf_float+0x1b2>
 800eb22:	2900      	cmp	r1, #0
 800eb24:	6863      	ldr	r3, [r4, #4]
 800eb26:	dd0c      	ble.n	800eb42 <_printf_float+0x19e>
 800eb28:	6121      	str	r1, [r4, #16]
 800eb2a:	b913      	cbnz	r3, 800eb32 <_printf_float+0x18e>
 800eb2c:	6822      	ldr	r2, [r4, #0]
 800eb2e:	07d2      	lsls	r2, r2, #31
 800eb30:	d502      	bpl.n	800eb38 <_printf_float+0x194>
 800eb32:	3301      	adds	r3, #1
 800eb34:	440b      	add	r3, r1
 800eb36:	6123      	str	r3, [r4, #16]
 800eb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb3a:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb3c:	f04f 0900 	mov.w	r9, #0
 800eb40:	e7d9      	b.n	800eaf6 <_printf_float+0x152>
 800eb42:	b913      	cbnz	r3, 800eb4a <_printf_float+0x1a6>
 800eb44:	6822      	ldr	r2, [r4, #0]
 800eb46:	07d0      	lsls	r0, r2, #31
 800eb48:	d501      	bpl.n	800eb4e <_printf_float+0x1aa>
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	e7f3      	b.n	800eb36 <_printf_float+0x192>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e7f1      	b.n	800eb36 <_printf_float+0x192>
 800eb52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800eb56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	db05      	blt.n	800eb6a <_printf_float+0x1c6>
 800eb5e:	6822      	ldr	r2, [r4, #0]
 800eb60:	6123      	str	r3, [r4, #16]
 800eb62:	07d1      	lsls	r1, r2, #31
 800eb64:	d5e8      	bpl.n	800eb38 <_printf_float+0x194>
 800eb66:	3301      	adds	r3, #1
 800eb68:	e7e5      	b.n	800eb36 <_printf_float+0x192>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	bfd4      	ite	le
 800eb6e:	f1c3 0302 	rsble	r3, r3, #2
 800eb72:	2301      	movgt	r3, #1
 800eb74:	4413      	add	r3, r2
 800eb76:	e7de      	b.n	800eb36 <_printf_float+0x192>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	055a      	lsls	r2, r3, #21
 800eb7c:	d407      	bmi.n	800eb8e <_printf_float+0x1ea>
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	4642      	mov	r2, r8
 800eb82:	4631      	mov	r1, r6
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b8      	blx	r7
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d12b      	bne.n	800ebe4 <_printf_float+0x240>
 800eb8c:	e767      	b.n	800ea5e <_printf_float+0xba>
 800eb8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eb92:	f240 80dc 	bls.w	800ed4e <_printf_float+0x3aa>
 800eb96:	2200      	movs	r2, #0
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb9e:	f7f1 ff4b 	bl	8000a38 <__aeabi_dcmpeq>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d033      	beq.n	800ec0e <_printf_float+0x26a>
 800eba6:	2301      	movs	r3, #1
 800eba8:	4a41      	ldr	r2, [pc, #260]	; (800ecb0 <_printf_float+0x30c>)
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4628      	mov	r0, r5
 800ebae:	47b8      	blx	r7
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f43f af54 	beq.w	800ea5e <_printf_float+0xba>
 800ebb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	db02      	blt.n	800ebc4 <_printf_float+0x220>
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	07d8      	lsls	r0, r3, #31
 800ebc2:	d50f      	bpl.n	800ebe4 <_printf_float+0x240>
 800ebc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebc8:	4631      	mov	r1, r6
 800ebca:	4628      	mov	r0, r5
 800ebcc:	47b8      	blx	r7
 800ebce:	3001      	adds	r0, #1
 800ebd0:	f43f af45 	beq.w	800ea5e <_printf_float+0xba>
 800ebd4:	f04f 0800 	mov.w	r8, #0
 800ebd8:	f104 091a 	add.w	r9, r4, #26
 800ebdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	4543      	cmp	r3, r8
 800ebe2:	dc09      	bgt.n	800ebf8 <_printf_float+0x254>
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	079b      	lsls	r3, r3, #30
 800ebe8:	f100 8103 	bmi.w	800edf2 <_printf_float+0x44e>
 800ebec:	68e0      	ldr	r0, [r4, #12]
 800ebee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebf0:	4298      	cmp	r0, r3
 800ebf2:	bfb8      	it	lt
 800ebf4:	4618      	movlt	r0, r3
 800ebf6:	e734      	b.n	800ea62 <_printf_float+0xbe>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	464a      	mov	r2, r9
 800ebfc:	4631      	mov	r1, r6
 800ebfe:	4628      	mov	r0, r5
 800ec00:	47b8      	blx	r7
 800ec02:	3001      	adds	r0, #1
 800ec04:	f43f af2b 	beq.w	800ea5e <_printf_float+0xba>
 800ec08:	f108 0801 	add.w	r8, r8, #1
 800ec0c:	e7e6      	b.n	800ebdc <_printf_float+0x238>
 800ec0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	dc2b      	bgt.n	800ec6c <_printf_float+0x2c8>
 800ec14:	2301      	movs	r3, #1
 800ec16:	4a26      	ldr	r2, [pc, #152]	; (800ecb0 <_printf_float+0x30c>)
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b8      	blx	r7
 800ec1e:	3001      	adds	r0, #1
 800ec20:	f43f af1d 	beq.w	800ea5e <_printf_float+0xba>
 800ec24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec26:	b923      	cbnz	r3, 800ec32 <_printf_float+0x28e>
 800ec28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2a:	b913      	cbnz	r3, 800ec32 <_printf_float+0x28e>
 800ec2c:	6823      	ldr	r3, [r4, #0]
 800ec2e:	07d9      	lsls	r1, r3, #31
 800ec30:	d5d8      	bpl.n	800ebe4 <_printf_float+0x240>
 800ec32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec36:	4631      	mov	r1, r6
 800ec38:	4628      	mov	r0, r5
 800ec3a:	47b8      	blx	r7
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	f43f af0e 	beq.w	800ea5e <_printf_float+0xba>
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	f104 0a1a 	add.w	sl, r4, #26
 800ec4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec4c:	425b      	negs	r3, r3
 800ec4e:	454b      	cmp	r3, r9
 800ec50:	dc01      	bgt.n	800ec56 <_printf_float+0x2b2>
 800ec52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec54:	e794      	b.n	800eb80 <_printf_float+0x1dc>
 800ec56:	2301      	movs	r3, #1
 800ec58:	4652      	mov	r2, sl
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b8      	blx	r7
 800ec60:	3001      	adds	r0, #1
 800ec62:	f43f aefc 	beq.w	800ea5e <_printf_float+0xba>
 800ec66:	f109 0901 	add.w	r9, r9, #1
 800ec6a:	e7ee      	b.n	800ec4a <_printf_float+0x2a6>
 800ec6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec70:	429a      	cmp	r2, r3
 800ec72:	bfa8      	it	ge
 800ec74:	461a      	movge	r2, r3
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	4691      	mov	r9, r2
 800ec7a:	dd07      	ble.n	800ec8c <_printf_float+0x2e8>
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	4631      	mov	r1, r6
 800ec80:	4642      	mov	r2, r8
 800ec82:	4628      	mov	r0, r5
 800ec84:	47b8      	blx	r7
 800ec86:	3001      	adds	r0, #1
 800ec88:	f43f aee9 	beq.w	800ea5e <_printf_float+0xba>
 800ec8c:	f104 031a 	add.w	r3, r4, #26
 800ec90:	f04f 0b00 	mov.w	fp, #0
 800ec94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec98:	9306      	str	r3, [sp, #24]
 800ec9a:	e015      	b.n	800ecc8 <_printf_float+0x324>
 800ec9c:	7fefffff 	.word	0x7fefffff
 800eca0:	08011a34 	.word	0x08011a34
 800eca4:	08011a30 	.word	0x08011a30
 800eca8:	08011a3c 	.word	0x08011a3c
 800ecac:	08011a38 	.word	0x08011a38
 800ecb0:	08011a40 	.word	0x08011a40
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	9a06      	ldr	r2, [sp, #24]
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	47b8      	blx	r7
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f43f aecd 	beq.w	800ea5e <_printf_float+0xba>
 800ecc4:	f10b 0b01 	add.w	fp, fp, #1
 800ecc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eccc:	ebaa 0309 	sub.w	r3, sl, r9
 800ecd0:	455b      	cmp	r3, fp
 800ecd2:	dcef      	bgt.n	800ecb4 <_printf_float+0x310>
 800ecd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	44d0      	add	r8, sl
 800ecdc:	db15      	blt.n	800ed0a <_printf_float+0x366>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	07da      	lsls	r2, r3, #31
 800ece2:	d412      	bmi.n	800ed0a <_printf_float+0x366>
 800ece4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ece8:	eba3 020a 	sub.w	r2, r3, sl
 800ecec:	eba3 0a01 	sub.w	sl, r3, r1
 800ecf0:	4592      	cmp	sl, r2
 800ecf2:	bfa8      	it	ge
 800ecf4:	4692      	movge	sl, r2
 800ecf6:	f1ba 0f00 	cmp.w	sl, #0
 800ecfa:	dc0e      	bgt.n	800ed1a <_printf_float+0x376>
 800ecfc:	f04f 0800 	mov.w	r8, #0
 800ed00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed04:	f104 091a 	add.w	r9, r4, #26
 800ed08:	e019      	b.n	800ed3e <_printf_float+0x39a>
 800ed0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed0e:	4631      	mov	r1, r6
 800ed10:	4628      	mov	r0, r5
 800ed12:	47b8      	blx	r7
 800ed14:	3001      	adds	r0, #1
 800ed16:	d1e5      	bne.n	800ece4 <_printf_float+0x340>
 800ed18:	e6a1      	b.n	800ea5e <_printf_float+0xba>
 800ed1a:	4653      	mov	r3, sl
 800ed1c:	4642      	mov	r2, r8
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4628      	mov	r0, r5
 800ed22:	47b8      	blx	r7
 800ed24:	3001      	adds	r0, #1
 800ed26:	d1e9      	bne.n	800ecfc <_printf_float+0x358>
 800ed28:	e699      	b.n	800ea5e <_printf_float+0xba>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	464a      	mov	r2, r9
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4628      	mov	r0, r5
 800ed32:	47b8      	blx	r7
 800ed34:	3001      	adds	r0, #1
 800ed36:	f43f ae92 	beq.w	800ea5e <_printf_float+0xba>
 800ed3a:	f108 0801 	add.w	r8, r8, #1
 800ed3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed42:	1a9b      	subs	r3, r3, r2
 800ed44:	eba3 030a 	sub.w	r3, r3, sl
 800ed48:	4543      	cmp	r3, r8
 800ed4a:	dcee      	bgt.n	800ed2a <_printf_float+0x386>
 800ed4c:	e74a      	b.n	800ebe4 <_printf_float+0x240>
 800ed4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed50:	2a01      	cmp	r2, #1
 800ed52:	dc01      	bgt.n	800ed58 <_printf_float+0x3b4>
 800ed54:	07db      	lsls	r3, r3, #31
 800ed56:	d53a      	bpl.n	800edce <_printf_float+0x42a>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	4642      	mov	r2, r8
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	47b8      	blx	r7
 800ed62:	3001      	adds	r0, #1
 800ed64:	f43f ae7b 	beq.w	800ea5e <_printf_float+0xba>
 800ed68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4628      	mov	r0, r5
 800ed70:	47b8      	blx	r7
 800ed72:	3001      	adds	r0, #1
 800ed74:	f108 0801 	add.w	r8, r8, #1
 800ed78:	f43f ae71 	beq.w	800ea5e <_printf_float+0xba>
 800ed7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f103 3aff 	add.w	sl, r3, #4294967295
 800ed84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f7f1 fe55 	bl	8000a38 <__aeabi_dcmpeq>
 800ed8e:	b9c8      	cbnz	r0, 800edc4 <_printf_float+0x420>
 800ed90:	4653      	mov	r3, sl
 800ed92:	4642      	mov	r2, r8
 800ed94:	4631      	mov	r1, r6
 800ed96:	4628      	mov	r0, r5
 800ed98:	47b8      	blx	r7
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	d10e      	bne.n	800edbc <_printf_float+0x418>
 800ed9e:	e65e      	b.n	800ea5e <_printf_float+0xba>
 800eda0:	2301      	movs	r3, #1
 800eda2:	4652      	mov	r2, sl
 800eda4:	4631      	mov	r1, r6
 800eda6:	4628      	mov	r0, r5
 800eda8:	47b8      	blx	r7
 800edaa:	3001      	adds	r0, #1
 800edac:	f43f ae57 	beq.w	800ea5e <_printf_float+0xba>
 800edb0:	f108 0801 	add.w	r8, r8, #1
 800edb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb6:	3b01      	subs	r3, #1
 800edb8:	4543      	cmp	r3, r8
 800edba:	dcf1      	bgt.n	800eda0 <_printf_float+0x3fc>
 800edbc:	464b      	mov	r3, r9
 800edbe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800edc2:	e6de      	b.n	800eb82 <_printf_float+0x1de>
 800edc4:	f04f 0800 	mov.w	r8, #0
 800edc8:	f104 0a1a 	add.w	sl, r4, #26
 800edcc:	e7f2      	b.n	800edb4 <_printf_float+0x410>
 800edce:	2301      	movs	r3, #1
 800edd0:	e7df      	b.n	800ed92 <_printf_float+0x3ee>
 800edd2:	2301      	movs	r3, #1
 800edd4:	464a      	mov	r2, r9
 800edd6:	4631      	mov	r1, r6
 800edd8:	4628      	mov	r0, r5
 800edda:	47b8      	blx	r7
 800eddc:	3001      	adds	r0, #1
 800edde:	f43f ae3e 	beq.w	800ea5e <_printf_float+0xba>
 800ede2:	f108 0801 	add.w	r8, r8, #1
 800ede6:	68e3      	ldr	r3, [r4, #12]
 800ede8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	4543      	cmp	r3, r8
 800edee:	dcf0      	bgt.n	800edd2 <_printf_float+0x42e>
 800edf0:	e6fc      	b.n	800ebec <_printf_float+0x248>
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	f104 0919 	add.w	r9, r4, #25
 800edfa:	e7f4      	b.n	800ede6 <_printf_float+0x442>
 800edfc:	2900      	cmp	r1, #0
 800edfe:	f43f ae8b 	beq.w	800eb18 <_printf_float+0x174>
 800ee02:	2300      	movs	r3, #0
 800ee04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ee08:	ab09      	add	r3, sp, #36	; 0x24
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	ec49 8b10 	vmov	d0, r8, r9
 800ee10:	6022      	str	r2, [r4, #0]
 800ee12:	f8cd a004 	str.w	sl, [sp, #4]
 800ee16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f7ff fd2e 	bl	800e87c <__cvt>
 800ee20:	4680      	mov	r8, r0
 800ee22:	e648      	b.n	800eab6 <_printf_float+0x112>

0800ee24 <_printf_common>:
 800ee24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee28:	4691      	mov	r9, r2
 800ee2a:	461f      	mov	r7, r3
 800ee2c:	688a      	ldr	r2, [r1, #8]
 800ee2e:	690b      	ldr	r3, [r1, #16]
 800ee30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	bfb8      	it	lt
 800ee38:	4613      	movlt	r3, r2
 800ee3a:	f8c9 3000 	str.w	r3, [r9]
 800ee3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee42:	4606      	mov	r6, r0
 800ee44:	460c      	mov	r4, r1
 800ee46:	b112      	cbz	r2, 800ee4e <_printf_common+0x2a>
 800ee48:	3301      	adds	r3, #1
 800ee4a:	f8c9 3000 	str.w	r3, [r9]
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	0699      	lsls	r1, r3, #26
 800ee52:	bf42      	ittt	mi
 800ee54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ee58:	3302      	addmi	r3, #2
 800ee5a:	f8c9 3000 	strmi.w	r3, [r9]
 800ee5e:	6825      	ldr	r5, [r4, #0]
 800ee60:	f015 0506 	ands.w	r5, r5, #6
 800ee64:	d107      	bne.n	800ee76 <_printf_common+0x52>
 800ee66:	f104 0a19 	add.w	sl, r4, #25
 800ee6a:	68e3      	ldr	r3, [r4, #12]
 800ee6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	42ab      	cmp	r3, r5
 800ee74:	dc28      	bgt.n	800eec8 <_printf_common+0xa4>
 800ee76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ee7a:	6822      	ldr	r2, [r4, #0]
 800ee7c:	3300      	adds	r3, #0
 800ee7e:	bf18      	it	ne
 800ee80:	2301      	movne	r3, #1
 800ee82:	0692      	lsls	r2, r2, #26
 800ee84:	d42d      	bmi.n	800eee2 <_printf_common+0xbe>
 800ee86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	47c0      	blx	r8
 800ee90:	3001      	adds	r0, #1
 800ee92:	d020      	beq.n	800eed6 <_printf_common+0xb2>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	68e5      	ldr	r5, [r4, #12]
 800ee98:	f8d9 2000 	ldr.w	r2, [r9]
 800ee9c:	f003 0306 	and.w	r3, r3, #6
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	bf08      	it	eq
 800eea4:	1aad      	subeq	r5, r5, r2
 800eea6:	68a3      	ldr	r3, [r4, #8]
 800eea8:	6922      	ldr	r2, [r4, #16]
 800eeaa:	bf0c      	ite	eq
 800eeac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eeb0:	2500      	movne	r5, #0
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	bfc4      	itt	gt
 800eeb6:	1a9b      	subgt	r3, r3, r2
 800eeb8:	18ed      	addgt	r5, r5, r3
 800eeba:	f04f 0900 	mov.w	r9, #0
 800eebe:	341a      	adds	r4, #26
 800eec0:	454d      	cmp	r5, r9
 800eec2:	d11a      	bne.n	800eefa <_printf_common+0xd6>
 800eec4:	2000      	movs	r0, #0
 800eec6:	e008      	b.n	800eeda <_printf_common+0xb6>
 800eec8:	2301      	movs	r3, #1
 800eeca:	4652      	mov	r2, sl
 800eecc:	4639      	mov	r1, r7
 800eece:	4630      	mov	r0, r6
 800eed0:	47c0      	blx	r8
 800eed2:	3001      	adds	r0, #1
 800eed4:	d103      	bne.n	800eede <_printf_common+0xba>
 800eed6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eede:	3501      	adds	r5, #1
 800eee0:	e7c3      	b.n	800ee6a <_printf_common+0x46>
 800eee2:	18e1      	adds	r1, r4, r3
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	2030      	movs	r0, #48	; 0x30
 800eee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eeec:	4422      	add	r2, r4
 800eeee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eef6:	3302      	adds	r3, #2
 800eef8:	e7c5      	b.n	800ee86 <_printf_common+0x62>
 800eefa:	2301      	movs	r3, #1
 800eefc:	4622      	mov	r2, r4
 800eefe:	4639      	mov	r1, r7
 800ef00:	4630      	mov	r0, r6
 800ef02:	47c0      	blx	r8
 800ef04:	3001      	adds	r0, #1
 800ef06:	d0e6      	beq.n	800eed6 <_printf_common+0xb2>
 800ef08:	f109 0901 	add.w	r9, r9, #1
 800ef0c:	e7d8      	b.n	800eec0 <_printf_common+0x9c>

0800ef0e <cleanup_glue>:
 800ef0e:	b538      	push	{r3, r4, r5, lr}
 800ef10:	460c      	mov	r4, r1
 800ef12:	6809      	ldr	r1, [r1, #0]
 800ef14:	4605      	mov	r5, r0
 800ef16:	b109      	cbz	r1, 800ef1c <cleanup_glue+0xe>
 800ef18:	f7ff fff9 	bl	800ef0e <cleanup_glue>
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4628      	mov	r0, r5
 800ef20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef24:	f001 b9b2 	b.w	801028c <_free_r>

0800ef28 <_reclaim_reent>:
 800ef28:	4b2c      	ldr	r3, [pc, #176]	; (800efdc <_reclaim_reent+0xb4>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4283      	cmp	r3, r0
 800ef2e:	b570      	push	{r4, r5, r6, lr}
 800ef30:	4604      	mov	r4, r0
 800ef32:	d051      	beq.n	800efd8 <_reclaim_reent+0xb0>
 800ef34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef36:	b143      	cbz	r3, 800ef4a <_reclaim_reent+0x22>
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d14a      	bne.n	800efd4 <_reclaim_reent+0xac>
 800ef3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef40:	6819      	ldr	r1, [r3, #0]
 800ef42:	b111      	cbz	r1, 800ef4a <_reclaim_reent+0x22>
 800ef44:	4620      	mov	r0, r4
 800ef46:	f001 f9a1 	bl	801028c <_free_r>
 800ef4a:	6961      	ldr	r1, [r4, #20]
 800ef4c:	b111      	cbz	r1, 800ef54 <_reclaim_reent+0x2c>
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f001 f99c 	bl	801028c <_free_r>
 800ef54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef56:	b111      	cbz	r1, 800ef5e <_reclaim_reent+0x36>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f001 f997 	bl	801028c <_free_r>
 800ef5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef60:	b111      	cbz	r1, 800ef68 <_reclaim_reent+0x40>
 800ef62:	4620      	mov	r0, r4
 800ef64:	f001 f992 	bl	801028c <_free_r>
 800ef68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef6a:	b111      	cbz	r1, 800ef72 <_reclaim_reent+0x4a>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f001 f98d 	bl	801028c <_free_r>
 800ef72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef74:	b111      	cbz	r1, 800ef7c <_reclaim_reent+0x54>
 800ef76:	4620      	mov	r0, r4
 800ef78:	f001 f988 	bl	801028c <_free_r>
 800ef7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ef7e:	b111      	cbz	r1, 800ef86 <_reclaim_reent+0x5e>
 800ef80:	4620      	mov	r0, r4
 800ef82:	f001 f983 	bl	801028c <_free_r>
 800ef86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ef88:	b111      	cbz	r1, 800ef90 <_reclaim_reent+0x68>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f001 f97e 	bl	801028c <_free_r>
 800ef90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef92:	b111      	cbz	r1, 800ef9a <_reclaim_reent+0x72>
 800ef94:	4620      	mov	r0, r4
 800ef96:	f001 f979 	bl	801028c <_free_r>
 800ef9a:	69a3      	ldr	r3, [r4, #24]
 800ef9c:	b1e3      	cbz	r3, 800efd8 <_reclaim_reent+0xb0>
 800ef9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efa0:	4620      	mov	r0, r4
 800efa2:	4798      	blx	r3
 800efa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efa6:	b1b9      	cbz	r1, 800efd8 <_reclaim_reent+0xb0>
 800efa8:	4620      	mov	r0, r4
 800efaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efae:	f7ff bfae 	b.w	800ef0e <cleanup_glue>
 800efb2:	5949      	ldr	r1, [r1, r5]
 800efb4:	b941      	cbnz	r1, 800efc8 <_reclaim_reent+0xa0>
 800efb6:	3504      	adds	r5, #4
 800efb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efba:	2d80      	cmp	r5, #128	; 0x80
 800efbc:	68d9      	ldr	r1, [r3, #12]
 800efbe:	d1f8      	bne.n	800efb2 <_reclaim_reent+0x8a>
 800efc0:	4620      	mov	r0, r4
 800efc2:	f001 f963 	bl	801028c <_free_r>
 800efc6:	e7ba      	b.n	800ef3e <_reclaim_reent+0x16>
 800efc8:	680e      	ldr	r6, [r1, #0]
 800efca:	4620      	mov	r0, r4
 800efcc:	f001 f95e 	bl	801028c <_free_r>
 800efd0:	4631      	mov	r1, r6
 800efd2:	e7ef      	b.n	800efb4 <_reclaim_reent+0x8c>
 800efd4:	2500      	movs	r5, #0
 800efd6:	e7ef      	b.n	800efb8 <_reclaim_reent+0x90>
 800efd8:	bd70      	pop	{r4, r5, r6, pc}
 800efda:	bf00      	nop
 800efdc:	20000010 	.word	0x20000010

0800efe0 <_sbrk_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4c06      	ldr	r4, [pc, #24]	; (800effc <_sbrk_r+0x1c>)
 800efe4:	2300      	movs	r3, #0
 800efe6:	4605      	mov	r5, r0
 800efe8:	4608      	mov	r0, r1
 800efea:	6023      	str	r3, [r4, #0]
 800efec:	f7fc ffb2 	bl	800bf54 <_sbrk>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d102      	bne.n	800effa <_sbrk_r+0x1a>
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	b103      	cbz	r3, 800effa <_sbrk_r+0x1a>
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	2000d40c 	.word	0x2000d40c

0800f000 <quorem>:
 800f000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	6903      	ldr	r3, [r0, #16]
 800f006:	690c      	ldr	r4, [r1, #16]
 800f008:	42a3      	cmp	r3, r4
 800f00a:	4680      	mov	r8, r0
 800f00c:	f2c0 8082 	blt.w	800f114 <quorem+0x114>
 800f010:	3c01      	subs	r4, #1
 800f012:	f101 0714 	add.w	r7, r1, #20
 800f016:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f01a:	f100 0614 	add.w	r6, r0, #20
 800f01e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f022:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f026:	eb06 030c 	add.w	r3, r6, ip
 800f02a:	3501      	adds	r5, #1
 800f02c:	eb07 090c 	add.w	r9, r7, ip
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	fbb0 f5f5 	udiv	r5, r0, r5
 800f036:	b395      	cbz	r5, 800f09e <quorem+0x9e>
 800f038:	f04f 0a00 	mov.w	sl, #0
 800f03c:	4638      	mov	r0, r7
 800f03e:	46b6      	mov	lr, r6
 800f040:	46d3      	mov	fp, sl
 800f042:	f850 2b04 	ldr.w	r2, [r0], #4
 800f046:	b293      	uxth	r3, r2
 800f048:	fb05 a303 	mla	r3, r5, r3, sl
 800f04c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f050:	b29b      	uxth	r3, r3
 800f052:	ebab 0303 	sub.w	r3, fp, r3
 800f056:	0c12      	lsrs	r2, r2, #16
 800f058:	f8de b000 	ldr.w	fp, [lr]
 800f05c:	fb05 a202 	mla	r2, r5, r2, sl
 800f060:	fa13 f38b 	uxtah	r3, r3, fp
 800f064:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f068:	fa1f fb82 	uxth.w	fp, r2
 800f06c:	f8de 2000 	ldr.w	r2, [lr]
 800f070:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f078:	b29b      	uxth	r3, r3
 800f07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f07e:	4581      	cmp	r9, r0
 800f080:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f084:	f84e 3b04 	str.w	r3, [lr], #4
 800f088:	d2db      	bcs.n	800f042 <quorem+0x42>
 800f08a:	f856 300c 	ldr.w	r3, [r6, ip]
 800f08e:	b933      	cbnz	r3, 800f09e <quorem+0x9e>
 800f090:	9b01      	ldr	r3, [sp, #4]
 800f092:	3b04      	subs	r3, #4
 800f094:	429e      	cmp	r6, r3
 800f096:	461a      	mov	r2, r3
 800f098:	d330      	bcc.n	800f0fc <quorem+0xfc>
 800f09a:	f8c8 4010 	str.w	r4, [r8, #16]
 800f09e:	4640      	mov	r0, r8
 800f0a0:	f001 f820 	bl	80100e4 <__mcmp>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	db25      	blt.n	800f0f4 <quorem+0xf4>
 800f0a8:	3501      	adds	r5, #1
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f04f 0c00 	mov.w	ip, #0
 800f0b0:	f857 2b04 	ldr.w	r2, [r7], #4
 800f0b4:	f8d0 e000 	ldr.w	lr, [r0]
 800f0b8:	b293      	uxth	r3, r2
 800f0ba:	ebac 0303 	sub.w	r3, ip, r3
 800f0be:	0c12      	lsrs	r2, r2, #16
 800f0c0:	fa13 f38e 	uxtah	r3, r3, lr
 800f0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0d2:	45b9      	cmp	r9, r7
 800f0d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0d8:	f840 3b04 	str.w	r3, [r0], #4
 800f0dc:	d2e8      	bcs.n	800f0b0 <quorem+0xb0>
 800f0de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f0e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f0e6:	b92a      	cbnz	r2, 800f0f4 <quorem+0xf4>
 800f0e8:	3b04      	subs	r3, #4
 800f0ea:	429e      	cmp	r6, r3
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	d30b      	bcc.n	800f108 <quorem+0x108>
 800f0f0:	f8c8 4010 	str.w	r4, [r8, #16]
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	b003      	add	sp, #12
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fc:	6812      	ldr	r2, [r2, #0]
 800f0fe:	3b04      	subs	r3, #4
 800f100:	2a00      	cmp	r2, #0
 800f102:	d1ca      	bne.n	800f09a <quorem+0x9a>
 800f104:	3c01      	subs	r4, #1
 800f106:	e7c5      	b.n	800f094 <quorem+0x94>
 800f108:	6812      	ldr	r2, [r2, #0]
 800f10a:	3b04      	subs	r3, #4
 800f10c:	2a00      	cmp	r2, #0
 800f10e:	d1ef      	bne.n	800f0f0 <quorem+0xf0>
 800f110:	3c01      	subs	r4, #1
 800f112:	e7ea      	b.n	800f0ea <quorem+0xea>
 800f114:	2000      	movs	r0, #0
 800f116:	e7ee      	b.n	800f0f6 <quorem+0xf6>

0800f118 <_dtoa_r>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	ec57 6b10 	vmov	r6, r7, d0
 800f120:	b097      	sub	sp, #92	; 0x5c
 800f122:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f124:	9106      	str	r1, [sp, #24]
 800f126:	4604      	mov	r4, r0
 800f128:	920b      	str	r2, [sp, #44]	; 0x2c
 800f12a:	9312      	str	r3, [sp, #72]	; 0x48
 800f12c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f130:	e9cd 6700 	strd	r6, r7, [sp]
 800f134:	b93d      	cbnz	r5, 800f146 <_dtoa_r+0x2e>
 800f136:	2010      	movs	r0, #16
 800f138:	f000 fdb4 	bl	800fca4 <malloc>
 800f13c:	6260      	str	r0, [r4, #36]	; 0x24
 800f13e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f142:	6005      	str	r5, [r0, #0]
 800f144:	60c5      	str	r5, [r0, #12]
 800f146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f148:	6819      	ldr	r1, [r3, #0]
 800f14a:	b151      	cbz	r1, 800f162 <_dtoa_r+0x4a>
 800f14c:	685a      	ldr	r2, [r3, #4]
 800f14e:	604a      	str	r2, [r1, #4]
 800f150:	2301      	movs	r3, #1
 800f152:	4093      	lsls	r3, r2
 800f154:	608b      	str	r3, [r1, #8]
 800f156:	4620      	mov	r0, r4
 800f158:	f000 fde2 	bl	800fd20 <_Bfree>
 800f15c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	1e3b      	subs	r3, r7, #0
 800f164:	bfbb      	ittet	lt
 800f166:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f16a:	9301      	strlt	r3, [sp, #4]
 800f16c:	2300      	movge	r3, #0
 800f16e:	2201      	movlt	r2, #1
 800f170:	bfac      	ite	ge
 800f172:	f8c8 3000 	strge.w	r3, [r8]
 800f176:	f8c8 2000 	strlt.w	r2, [r8]
 800f17a:	4baf      	ldr	r3, [pc, #700]	; (800f438 <_dtoa_r+0x320>)
 800f17c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f180:	ea33 0308 	bics.w	r3, r3, r8
 800f184:	d114      	bne.n	800f1b0 <_dtoa_r+0x98>
 800f186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f188:	f242 730f 	movw	r3, #9999	; 0x270f
 800f18c:	6013      	str	r3, [r2, #0]
 800f18e:	9b00      	ldr	r3, [sp, #0]
 800f190:	b923      	cbnz	r3, 800f19c <_dtoa_r+0x84>
 800f192:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f196:	2800      	cmp	r0, #0
 800f198:	f000 8542 	beq.w	800fc20 <_dtoa_r+0xb08>
 800f19c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f19e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f44c <_dtoa_r+0x334>
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 8544 	beq.w	800fc30 <_dtoa_r+0xb18>
 800f1a8:	f10b 0303 	add.w	r3, fp, #3
 800f1ac:	f000 bd3e 	b.w	800fc2c <_dtoa_r+0xb14>
 800f1b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	4639      	mov	r1, r7
 800f1bc:	f7f1 fc3c 	bl	8000a38 <__aeabi_dcmpeq>
 800f1c0:	4681      	mov	r9, r0
 800f1c2:	b168      	cbz	r0, 800f1e0 <_dtoa_r+0xc8>
 800f1c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f000 8524 	beq.w	800fc1a <_dtoa_r+0xb02>
 800f1d2:	4b9a      	ldr	r3, [pc, #616]	; (800f43c <_dtoa_r+0x324>)
 800f1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1d6:	f103 3bff 	add.w	fp, r3, #4294967295
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	f000 bd28 	b.w	800fc30 <_dtoa_r+0xb18>
 800f1e0:	aa14      	add	r2, sp, #80	; 0x50
 800f1e2:	a915      	add	r1, sp, #84	; 0x54
 800f1e4:	ec47 6b10 	vmov	d0, r6, r7
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f000 fff2 	bl	80101d2 <__d2b>
 800f1ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f1f2:	9004      	str	r0, [sp, #16]
 800f1f4:	2d00      	cmp	r5, #0
 800f1f6:	d07c      	beq.n	800f2f2 <_dtoa_r+0x1da>
 800f1f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f200:	46b2      	mov	sl, r6
 800f202:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f20a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f20e:	2200      	movs	r2, #0
 800f210:	4b8b      	ldr	r3, [pc, #556]	; (800f440 <_dtoa_r+0x328>)
 800f212:	4650      	mov	r0, sl
 800f214:	4659      	mov	r1, fp
 800f216:	f7f0 ffef 	bl	80001f8 <__aeabi_dsub>
 800f21a:	a381      	add	r3, pc, #516	; (adr r3, 800f420 <_dtoa_r+0x308>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f1 f9a2 	bl	8000568 <__aeabi_dmul>
 800f224:	a380      	add	r3, pc, #512	; (adr r3, 800f428 <_dtoa_r+0x310>)
 800f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22a:	f7f0 ffe7 	bl	80001fc <__adddf3>
 800f22e:	4606      	mov	r6, r0
 800f230:	4628      	mov	r0, r5
 800f232:	460f      	mov	r7, r1
 800f234:	f7f1 f92e 	bl	8000494 <__aeabi_i2d>
 800f238:	a37d      	add	r3, pc, #500	; (adr r3, 800f430 <_dtoa_r+0x318>)
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	f7f1 f993 	bl	8000568 <__aeabi_dmul>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	f7f0 ffd7 	bl	80001fc <__adddf3>
 800f24e:	4606      	mov	r6, r0
 800f250:	460f      	mov	r7, r1
 800f252:	f7f1 fc39 	bl	8000ac8 <__aeabi_d2iz>
 800f256:	2200      	movs	r2, #0
 800f258:	4682      	mov	sl, r0
 800f25a:	2300      	movs	r3, #0
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 fbf4 	bl	8000a4c <__aeabi_dcmplt>
 800f264:	b148      	cbz	r0, 800f27a <_dtoa_r+0x162>
 800f266:	4650      	mov	r0, sl
 800f268:	f7f1 f914 	bl	8000494 <__aeabi_i2d>
 800f26c:	4632      	mov	r2, r6
 800f26e:	463b      	mov	r3, r7
 800f270:	f7f1 fbe2 	bl	8000a38 <__aeabi_dcmpeq>
 800f274:	b908      	cbnz	r0, 800f27a <_dtoa_r+0x162>
 800f276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f27a:	f1ba 0f16 	cmp.w	sl, #22
 800f27e:	d859      	bhi.n	800f334 <_dtoa_r+0x21c>
 800f280:	4970      	ldr	r1, [pc, #448]	; (800f444 <_dtoa_r+0x32c>)
 800f282:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f28e:	f7f1 fbfb 	bl	8000a88 <__aeabi_dcmpgt>
 800f292:	2800      	cmp	r0, #0
 800f294:	d050      	beq.n	800f338 <_dtoa_r+0x220>
 800f296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f29a:	2300      	movs	r3, #0
 800f29c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2a0:	1b5d      	subs	r5, r3, r5
 800f2a2:	f1b5 0801 	subs.w	r8, r5, #1
 800f2a6:	bf49      	itett	mi
 800f2a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800f2ac:	2300      	movpl	r3, #0
 800f2ae:	9305      	strmi	r3, [sp, #20]
 800f2b0:	f04f 0800 	movmi.w	r8, #0
 800f2b4:	bf58      	it	pl
 800f2b6:	9305      	strpl	r3, [sp, #20]
 800f2b8:	f1ba 0f00 	cmp.w	sl, #0
 800f2bc:	db3e      	blt.n	800f33c <_dtoa_r+0x224>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	44d0      	add	r8, sl
 800f2c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f2c6:	9307      	str	r3, [sp, #28]
 800f2c8:	9b06      	ldr	r3, [sp, #24]
 800f2ca:	2b09      	cmp	r3, #9
 800f2cc:	f200 8090 	bhi.w	800f3f0 <_dtoa_r+0x2d8>
 800f2d0:	2b05      	cmp	r3, #5
 800f2d2:	bfc4      	itt	gt
 800f2d4:	3b04      	subgt	r3, #4
 800f2d6:	9306      	strgt	r3, [sp, #24]
 800f2d8:	9b06      	ldr	r3, [sp, #24]
 800f2da:	f1a3 0302 	sub.w	r3, r3, #2
 800f2de:	bfcc      	ite	gt
 800f2e0:	2500      	movgt	r5, #0
 800f2e2:	2501      	movle	r5, #1
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	f200 808f 	bhi.w	800f408 <_dtoa_r+0x2f0>
 800f2ea:	e8df f003 	tbb	[pc, r3]
 800f2ee:	7f7d      	.short	0x7f7d
 800f2f0:	7131      	.short	0x7131
 800f2f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f2f6:	441d      	add	r5, r3
 800f2f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f2fc:	2820      	cmp	r0, #32
 800f2fe:	dd13      	ble.n	800f328 <_dtoa_r+0x210>
 800f300:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f304:	9b00      	ldr	r3, [sp, #0]
 800f306:	fa08 f800 	lsl.w	r8, r8, r0
 800f30a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f30e:	fa23 f000 	lsr.w	r0, r3, r0
 800f312:	ea48 0000 	orr.w	r0, r8, r0
 800f316:	f7f1 f8ad 	bl	8000474 <__aeabi_ui2d>
 800f31a:	2301      	movs	r3, #1
 800f31c:	4682      	mov	sl, r0
 800f31e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f322:	3d01      	subs	r5, #1
 800f324:	9313      	str	r3, [sp, #76]	; 0x4c
 800f326:	e772      	b.n	800f20e <_dtoa_r+0xf6>
 800f328:	9b00      	ldr	r3, [sp, #0]
 800f32a:	f1c0 0020 	rsb	r0, r0, #32
 800f32e:	fa03 f000 	lsl.w	r0, r3, r0
 800f332:	e7f0      	b.n	800f316 <_dtoa_r+0x1fe>
 800f334:	2301      	movs	r3, #1
 800f336:	e7b1      	b.n	800f29c <_dtoa_r+0x184>
 800f338:	900f      	str	r0, [sp, #60]	; 0x3c
 800f33a:	e7b0      	b.n	800f29e <_dtoa_r+0x186>
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	eba3 030a 	sub.w	r3, r3, sl
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	f1ca 0300 	rsb	r3, sl, #0
 800f348:	9307      	str	r3, [sp, #28]
 800f34a:	2300      	movs	r3, #0
 800f34c:	930e      	str	r3, [sp, #56]	; 0x38
 800f34e:	e7bb      	b.n	800f2c8 <_dtoa_r+0x1b0>
 800f350:	2301      	movs	r3, #1
 800f352:	930a      	str	r3, [sp, #40]	; 0x28
 800f354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	dd59      	ble.n	800f40e <_dtoa_r+0x2f6>
 800f35a:	9302      	str	r3, [sp, #8]
 800f35c:	4699      	mov	r9, r3
 800f35e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f360:	2200      	movs	r2, #0
 800f362:	6072      	str	r2, [r6, #4]
 800f364:	2204      	movs	r2, #4
 800f366:	f102 0014 	add.w	r0, r2, #20
 800f36a:	4298      	cmp	r0, r3
 800f36c:	6871      	ldr	r1, [r6, #4]
 800f36e:	d953      	bls.n	800f418 <_dtoa_r+0x300>
 800f370:	4620      	mov	r0, r4
 800f372:	f000 fca1 	bl	800fcb8 <_Balloc>
 800f376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f378:	6030      	str	r0, [r6, #0]
 800f37a:	f1b9 0f0e 	cmp.w	r9, #14
 800f37e:	f8d3 b000 	ldr.w	fp, [r3]
 800f382:	f200 80e6 	bhi.w	800f552 <_dtoa_r+0x43a>
 800f386:	2d00      	cmp	r5, #0
 800f388:	f000 80e3 	beq.w	800f552 <_dtoa_r+0x43a>
 800f38c:	ed9d 7b00 	vldr	d7, [sp]
 800f390:	f1ba 0f00 	cmp.w	sl, #0
 800f394:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f398:	dd74      	ble.n	800f484 <_dtoa_r+0x36c>
 800f39a:	4a2a      	ldr	r2, [pc, #168]	; (800f444 <_dtoa_r+0x32c>)
 800f39c:	f00a 030f 	and.w	r3, sl, #15
 800f3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f3a4:	ed93 7b00 	vldr	d7, [r3]
 800f3a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f3ac:	06f0      	lsls	r0, r6, #27
 800f3ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f3b2:	d565      	bpl.n	800f480 <_dtoa_r+0x368>
 800f3b4:	4b24      	ldr	r3, [pc, #144]	; (800f448 <_dtoa_r+0x330>)
 800f3b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f3ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3be:	f7f1 f9fd 	bl	80007bc <__aeabi_ddiv>
 800f3c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f3c6:	f006 060f 	and.w	r6, r6, #15
 800f3ca:	2503      	movs	r5, #3
 800f3cc:	4f1e      	ldr	r7, [pc, #120]	; (800f448 <_dtoa_r+0x330>)
 800f3ce:	e04c      	b.n	800f46a <_dtoa_r+0x352>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3d6:	4453      	add	r3, sl
 800f3d8:	f103 0901 	add.w	r9, r3, #1
 800f3dc:	9302      	str	r3, [sp, #8]
 800f3de:	464b      	mov	r3, r9
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	bfb8      	it	lt
 800f3e4:	2301      	movlt	r3, #1
 800f3e6:	e7ba      	b.n	800f35e <_dtoa_r+0x246>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e7b2      	b.n	800f352 <_dtoa_r+0x23a>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e7f0      	b.n	800f3d2 <_dtoa_r+0x2ba>
 800f3f0:	2501      	movs	r5, #1
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	9306      	str	r3, [sp, #24]
 800f3f6:	950a      	str	r5, [sp, #40]	; 0x28
 800f3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fc:	9302      	str	r3, [sp, #8]
 800f3fe:	4699      	mov	r9, r3
 800f400:	2200      	movs	r2, #0
 800f402:	2312      	movs	r3, #18
 800f404:	920b      	str	r2, [sp, #44]	; 0x2c
 800f406:	e7aa      	b.n	800f35e <_dtoa_r+0x246>
 800f408:	2301      	movs	r3, #1
 800f40a:	930a      	str	r3, [sp, #40]	; 0x28
 800f40c:	e7f4      	b.n	800f3f8 <_dtoa_r+0x2e0>
 800f40e:	2301      	movs	r3, #1
 800f410:	9302      	str	r3, [sp, #8]
 800f412:	4699      	mov	r9, r3
 800f414:	461a      	mov	r2, r3
 800f416:	e7f5      	b.n	800f404 <_dtoa_r+0x2ec>
 800f418:	3101      	adds	r1, #1
 800f41a:	6071      	str	r1, [r6, #4]
 800f41c:	0052      	lsls	r2, r2, #1
 800f41e:	e7a2      	b.n	800f366 <_dtoa_r+0x24e>
 800f420:	636f4361 	.word	0x636f4361
 800f424:	3fd287a7 	.word	0x3fd287a7
 800f428:	8b60c8b3 	.word	0x8b60c8b3
 800f42c:	3fc68a28 	.word	0x3fc68a28
 800f430:	509f79fb 	.word	0x509f79fb
 800f434:	3fd34413 	.word	0x3fd34413
 800f438:	7ff00000 	.word	0x7ff00000
 800f43c:	08011a41 	.word	0x08011a41
 800f440:	3ff80000 	.word	0x3ff80000
 800f444:	08011a78 	.word	0x08011a78
 800f448:	08011a50 	.word	0x08011a50
 800f44c:	08011a4b 	.word	0x08011a4b
 800f450:	07f1      	lsls	r1, r6, #31
 800f452:	d508      	bpl.n	800f466 <_dtoa_r+0x34e>
 800f454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f45c:	f7f1 f884 	bl	8000568 <__aeabi_dmul>
 800f460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f464:	3501      	adds	r5, #1
 800f466:	1076      	asrs	r6, r6, #1
 800f468:	3708      	adds	r7, #8
 800f46a:	2e00      	cmp	r6, #0
 800f46c:	d1f0      	bne.n	800f450 <_dtoa_r+0x338>
 800f46e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f472:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f476:	f7f1 f9a1 	bl	80007bc <__aeabi_ddiv>
 800f47a:	e9cd 0100 	strd	r0, r1, [sp]
 800f47e:	e01a      	b.n	800f4b6 <_dtoa_r+0x39e>
 800f480:	2502      	movs	r5, #2
 800f482:	e7a3      	b.n	800f3cc <_dtoa_r+0x2b4>
 800f484:	f000 80a0 	beq.w	800f5c8 <_dtoa_r+0x4b0>
 800f488:	f1ca 0600 	rsb	r6, sl, #0
 800f48c:	4b9f      	ldr	r3, [pc, #636]	; (800f70c <_dtoa_r+0x5f4>)
 800f48e:	4fa0      	ldr	r7, [pc, #640]	; (800f710 <_dtoa_r+0x5f8>)
 800f490:	f006 020f 	and.w	r2, r6, #15
 800f494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4a0:	f7f1 f862 	bl	8000568 <__aeabi_dmul>
 800f4a4:	e9cd 0100 	strd	r0, r1, [sp]
 800f4a8:	1136      	asrs	r6, r6, #4
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	2502      	movs	r5, #2
 800f4ae:	2e00      	cmp	r6, #0
 800f4b0:	d17f      	bne.n	800f5b2 <_dtoa_r+0x49a>
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e1      	bne.n	800f47a <_dtoa_r+0x362>
 800f4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 8087 	beq.w	800f5cc <_dtoa_r+0x4b4>
 800f4be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	4b93      	ldr	r3, [pc, #588]	; (800f714 <_dtoa_r+0x5fc>)
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	f7f1 fabf 	bl	8000a4c <__aeabi_dcmplt>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d07c      	beq.n	800f5cc <_dtoa_r+0x4b4>
 800f4d2:	f1b9 0f00 	cmp.w	r9, #0
 800f4d6:	d079      	beq.n	800f5cc <_dtoa_r+0x4b4>
 800f4d8:	9b02      	ldr	r3, [sp, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	dd35      	ble.n	800f54a <_dtoa_r+0x432>
 800f4de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4e2:	9308      	str	r3, [sp, #32]
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	4b8b      	ldr	r3, [pc, #556]	; (800f718 <_dtoa_r+0x600>)
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f7f1 f83c 	bl	8000568 <__aeabi_dmul>
 800f4f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f4f4:	9f02      	ldr	r7, [sp, #8]
 800f4f6:	3501      	adds	r5, #1
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	f7f0 ffcb 	bl	8000494 <__aeabi_i2d>
 800f4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f502:	f7f1 f831 	bl	8000568 <__aeabi_dmul>
 800f506:	2200      	movs	r2, #0
 800f508:	4b84      	ldr	r3, [pc, #528]	; (800f71c <_dtoa_r+0x604>)
 800f50a:	f7f0 fe77 	bl	80001fc <__adddf3>
 800f50e:	4605      	mov	r5, r0
 800f510:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f514:	2f00      	cmp	r7, #0
 800f516:	d15d      	bne.n	800f5d4 <_dtoa_r+0x4bc>
 800f518:	2200      	movs	r2, #0
 800f51a:	4b81      	ldr	r3, [pc, #516]	; (800f720 <_dtoa_r+0x608>)
 800f51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f520:	f7f0 fe6a 	bl	80001f8 <__aeabi_dsub>
 800f524:	462a      	mov	r2, r5
 800f526:	4633      	mov	r3, r6
 800f528:	e9cd 0100 	strd	r0, r1, [sp]
 800f52c:	f7f1 faac 	bl	8000a88 <__aeabi_dcmpgt>
 800f530:	2800      	cmp	r0, #0
 800f532:	f040 8288 	bne.w	800fa46 <_dtoa_r+0x92e>
 800f536:	462a      	mov	r2, r5
 800f538:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f540:	f7f1 fa84 	bl	8000a4c <__aeabi_dcmplt>
 800f544:	2800      	cmp	r0, #0
 800f546:	f040 827c 	bne.w	800fa42 <_dtoa_r+0x92a>
 800f54a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f54e:	e9cd 2300 	strd	r2, r3, [sp]
 800f552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f554:	2b00      	cmp	r3, #0
 800f556:	f2c0 8150 	blt.w	800f7fa <_dtoa_r+0x6e2>
 800f55a:	f1ba 0f0e 	cmp.w	sl, #14
 800f55e:	f300 814c 	bgt.w	800f7fa <_dtoa_r+0x6e2>
 800f562:	4b6a      	ldr	r3, [pc, #424]	; (800f70c <_dtoa_r+0x5f4>)
 800f564:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f568:	ed93 7b00 	vldr	d7, [r3]
 800f56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f56e:	2b00      	cmp	r3, #0
 800f570:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f574:	f280 80d8 	bge.w	800f728 <_dtoa_r+0x610>
 800f578:	f1b9 0f00 	cmp.w	r9, #0
 800f57c:	f300 80d4 	bgt.w	800f728 <_dtoa_r+0x610>
 800f580:	f040 825e 	bne.w	800fa40 <_dtoa_r+0x928>
 800f584:	2200      	movs	r2, #0
 800f586:	4b66      	ldr	r3, [pc, #408]	; (800f720 <_dtoa_r+0x608>)
 800f588:	ec51 0b17 	vmov	r0, r1, d7
 800f58c:	f7f0 ffec 	bl	8000568 <__aeabi_dmul>
 800f590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f594:	f7f1 fa6e 	bl	8000a74 <__aeabi_dcmpge>
 800f598:	464f      	mov	r7, r9
 800f59a:	464e      	mov	r6, r9
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f040 8234 	bne.w	800fa0a <_dtoa_r+0x8f2>
 800f5a2:	2331      	movs	r3, #49	; 0x31
 800f5a4:	f10b 0501 	add.w	r5, fp, #1
 800f5a8:	f88b 3000 	strb.w	r3, [fp]
 800f5ac:	f10a 0a01 	add.w	sl, sl, #1
 800f5b0:	e22f      	b.n	800fa12 <_dtoa_r+0x8fa>
 800f5b2:	07f2      	lsls	r2, r6, #31
 800f5b4:	d505      	bpl.n	800f5c2 <_dtoa_r+0x4aa>
 800f5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5ba:	f7f0 ffd5 	bl	8000568 <__aeabi_dmul>
 800f5be:	3501      	adds	r5, #1
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	1076      	asrs	r6, r6, #1
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	e772      	b.n	800f4ae <_dtoa_r+0x396>
 800f5c8:	2502      	movs	r5, #2
 800f5ca:	e774      	b.n	800f4b6 <_dtoa_r+0x39e>
 800f5cc:	f8cd a020 	str.w	sl, [sp, #32]
 800f5d0:	464f      	mov	r7, r9
 800f5d2:	e791      	b.n	800f4f8 <_dtoa_r+0x3e0>
 800f5d4:	4b4d      	ldr	r3, [pc, #308]	; (800f70c <_dtoa_r+0x5f4>)
 800f5d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d047      	beq.n	800f674 <_dtoa_r+0x55c>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	494e      	ldr	r1, [pc, #312]	; (800f724 <_dtoa_r+0x60c>)
 800f5ec:	f7f1 f8e6 	bl	80007bc <__aeabi_ddiv>
 800f5f0:	462a      	mov	r2, r5
 800f5f2:	4633      	mov	r3, r6
 800f5f4:	f7f0 fe00 	bl	80001f8 <__aeabi_dsub>
 800f5f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f5fc:	465d      	mov	r5, fp
 800f5fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f602:	f7f1 fa61 	bl	8000ac8 <__aeabi_d2iz>
 800f606:	4606      	mov	r6, r0
 800f608:	f7f0 ff44 	bl	8000494 <__aeabi_i2d>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f614:	f7f0 fdf0 	bl	80001f8 <__aeabi_dsub>
 800f618:	3630      	adds	r6, #48	; 0x30
 800f61a:	f805 6b01 	strb.w	r6, [r5], #1
 800f61e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f622:	e9cd 0100 	strd	r0, r1, [sp]
 800f626:	f7f1 fa11 	bl	8000a4c <__aeabi_dcmplt>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d163      	bne.n	800f6f6 <_dtoa_r+0x5de>
 800f62e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f632:	2000      	movs	r0, #0
 800f634:	4937      	ldr	r1, [pc, #220]	; (800f714 <_dtoa_r+0x5fc>)
 800f636:	f7f0 fddf 	bl	80001f8 <__aeabi_dsub>
 800f63a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f63e:	f7f1 fa05 	bl	8000a4c <__aeabi_dcmplt>
 800f642:	2800      	cmp	r0, #0
 800f644:	f040 80b7 	bne.w	800f7b6 <_dtoa_r+0x69e>
 800f648:	eba5 030b 	sub.w	r3, r5, fp
 800f64c:	429f      	cmp	r7, r3
 800f64e:	f77f af7c 	ble.w	800f54a <_dtoa_r+0x432>
 800f652:	2200      	movs	r2, #0
 800f654:	4b30      	ldr	r3, [pc, #192]	; (800f718 <_dtoa_r+0x600>)
 800f656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f65a:	f7f0 ff85 	bl	8000568 <__aeabi_dmul>
 800f65e:	2200      	movs	r2, #0
 800f660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f664:	4b2c      	ldr	r3, [pc, #176]	; (800f718 <_dtoa_r+0x600>)
 800f666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f66a:	f7f0 ff7d 	bl	8000568 <__aeabi_dmul>
 800f66e:	e9cd 0100 	strd	r0, r1, [sp]
 800f672:	e7c4      	b.n	800f5fe <_dtoa_r+0x4e6>
 800f674:	462a      	mov	r2, r5
 800f676:	4633      	mov	r3, r6
 800f678:	f7f0 ff76 	bl	8000568 <__aeabi_dmul>
 800f67c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f680:	eb0b 0507 	add.w	r5, fp, r7
 800f684:	465e      	mov	r6, fp
 800f686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f68a:	f7f1 fa1d 	bl	8000ac8 <__aeabi_d2iz>
 800f68e:	4607      	mov	r7, r0
 800f690:	f7f0 ff00 	bl	8000494 <__aeabi_i2d>
 800f694:	3730      	adds	r7, #48	; 0x30
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f69e:	f7f0 fdab 	bl	80001f8 <__aeabi_dsub>
 800f6a2:	f806 7b01 	strb.w	r7, [r6], #1
 800f6a6:	42ae      	cmp	r6, r5
 800f6a8:	e9cd 0100 	strd	r0, r1, [sp]
 800f6ac:	f04f 0200 	mov.w	r2, #0
 800f6b0:	d126      	bne.n	800f700 <_dtoa_r+0x5e8>
 800f6b2:	4b1c      	ldr	r3, [pc, #112]	; (800f724 <_dtoa_r+0x60c>)
 800f6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6b8:	f7f0 fda0 	bl	80001fc <__adddf3>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6c4:	f7f1 f9e0 	bl	8000a88 <__aeabi_dcmpgt>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d174      	bne.n	800f7b6 <_dtoa_r+0x69e>
 800f6cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	4914      	ldr	r1, [pc, #80]	; (800f724 <_dtoa_r+0x60c>)
 800f6d4:	f7f0 fd90 	bl	80001f8 <__aeabi_dsub>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6e0:	f7f1 f9b4 	bl	8000a4c <__aeabi_dcmplt>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	f43f af30 	beq.w	800f54a <_dtoa_r+0x432>
 800f6ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6ee:	2b30      	cmp	r3, #48	; 0x30
 800f6f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800f6f4:	d002      	beq.n	800f6fc <_dtoa_r+0x5e4>
 800f6f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f6fa:	e04a      	b.n	800f792 <_dtoa_r+0x67a>
 800f6fc:	4615      	mov	r5, r2
 800f6fe:	e7f4      	b.n	800f6ea <_dtoa_r+0x5d2>
 800f700:	4b05      	ldr	r3, [pc, #20]	; (800f718 <_dtoa_r+0x600>)
 800f702:	f7f0 ff31 	bl	8000568 <__aeabi_dmul>
 800f706:	e9cd 0100 	strd	r0, r1, [sp]
 800f70a:	e7bc      	b.n	800f686 <_dtoa_r+0x56e>
 800f70c:	08011a78 	.word	0x08011a78
 800f710:	08011a50 	.word	0x08011a50
 800f714:	3ff00000 	.word	0x3ff00000
 800f718:	40240000 	.word	0x40240000
 800f71c:	401c0000 	.word	0x401c0000
 800f720:	40140000 	.word	0x40140000
 800f724:	3fe00000 	.word	0x3fe00000
 800f728:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f72c:	465d      	mov	r5, fp
 800f72e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f732:	4630      	mov	r0, r6
 800f734:	4639      	mov	r1, r7
 800f736:	f7f1 f841 	bl	80007bc <__aeabi_ddiv>
 800f73a:	f7f1 f9c5 	bl	8000ac8 <__aeabi_d2iz>
 800f73e:	4680      	mov	r8, r0
 800f740:	f7f0 fea8 	bl	8000494 <__aeabi_i2d>
 800f744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f748:	f7f0 ff0e 	bl	8000568 <__aeabi_dmul>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	4630      	mov	r0, r6
 800f752:	4639      	mov	r1, r7
 800f754:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f758:	f7f0 fd4e 	bl	80001f8 <__aeabi_dsub>
 800f75c:	f805 6b01 	strb.w	r6, [r5], #1
 800f760:	eba5 060b 	sub.w	r6, r5, fp
 800f764:	45b1      	cmp	r9, r6
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	d139      	bne.n	800f7e0 <_dtoa_r+0x6c8>
 800f76c:	f7f0 fd46 	bl	80001fc <__adddf3>
 800f770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f774:	4606      	mov	r6, r0
 800f776:	460f      	mov	r7, r1
 800f778:	f7f1 f986 	bl	8000a88 <__aeabi_dcmpgt>
 800f77c:	b9c8      	cbnz	r0, 800f7b2 <_dtoa_r+0x69a>
 800f77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f782:	4630      	mov	r0, r6
 800f784:	4639      	mov	r1, r7
 800f786:	f7f1 f957 	bl	8000a38 <__aeabi_dcmpeq>
 800f78a:	b110      	cbz	r0, 800f792 <_dtoa_r+0x67a>
 800f78c:	f018 0f01 	tst.w	r8, #1
 800f790:	d10f      	bne.n	800f7b2 <_dtoa_r+0x69a>
 800f792:	9904      	ldr	r1, [sp, #16]
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fac3 	bl	800fd20 <_Bfree>
 800f79a:	2300      	movs	r3, #0
 800f79c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f79e:	702b      	strb	r3, [r5, #0]
 800f7a0:	f10a 0301 	add.w	r3, sl, #1
 800f7a4:	6013      	str	r3, [r2, #0]
 800f7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 8241 	beq.w	800fc30 <_dtoa_r+0xb18>
 800f7ae:	601d      	str	r5, [r3, #0]
 800f7b0:	e23e      	b.n	800fc30 <_dtoa_r+0xb18>
 800f7b2:	f8cd a020 	str.w	sl, [sp, #32]
 800f7b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f7ba:	2a39      	cmp	r2, #57	; 0x39
 800f7bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800f7c0:	d108      	bne.n	800f7d4 <_dtoa_r+0x6bc>
 800f7c2:	459b      	cmp	fp, r3
 800f7c4:	d10a      	bne.n	800f7dc <_dtoa_r+0x6c4>
 800f7c6:	9b08      	ldr	r3, [sp, #32]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	9308      	str	r3, [sp, #32]
 800f7cc:	2330      	movs	r3, #48	; 0x30
 800f7ce:	f88b 3000 	strb.w	r3, [fp]
 800f7d2:	465b      	mov	r3, fp
 800f7d4:	781a      	ldrb	r2, [r3, #0]
 800f7d6:	3201      	adds	r2, #1
 800f7d8:	701a      	strb	r2, [r3, #0]
 800f7da:	e78c      	b.n	800f6f6 <_dtoa_r+0x5de>
 800f7dc:	461d      	mov	r5, r3
 800f7de:	e7ea      	b.n	800f7b6 <_dtoa_r+0x69e>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	4b9b      	ldr	r3, [pc, #620]	; (800fa50 <_dtoa_r+0x938>)
 800f7e4:	f7f0 fec0 	bl	8000568 <__aeabi_dmul>
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	460f      	mov	r7, r1
 800f7f0:	f7f1 f922 	bl	8000a38 <__aeabi_dcmpeq>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d09a      	beq.n	800f72e <_dtoa_r+0x616>
 800f7f8:	e7cb      	b.n	800f792 <_dtoa_r+0x67a>
 800f7fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7fc:	2a00      	cmp	r2, #0
 800f7fe:	f000 808b 	beq.w	800f918 <_dtoa_r+0x800>
 800f802:	9a06      	ldr	r2, [sp, #24]
 800f804:	2a01      	cmp	r2, #1
 800f806:	dc6e      	bgt.n	800f8e6 <_dtoa_r+0x7ce>
 800f808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f80a:	2a00      	cmp	r2, #0
 800f80c:	d067      	beq.n	800f8de <_dtoa_r+0x7c6>
 800f80e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f812:	9f07      	ldr	r7, [sp, #28]
 800f814:	9d05      	ldr	r5, [sp, #20]
 800f816:	9a05      	ldr	r2, [sp, #20]
 800f818:	2101      	movs	r1, #1
 800f81a:	441a      	add	r2, r3
 800f81c:	4620      	mov	r0, r4
 800f81e:	9205      	str	r2, [sp, #20]
 800f820:	4498      	add	r8, r3
 800f822:	f000 fb1d 	bl	800fe60 <__i2b>
 800f826:	4606      	mov	r6, r0
 800f828:	2d00      	cmp	r5, #0
 800f82a:	dd0c      	ble.n	800f846 <_dtoa_r+0x72e>
 800f82c:	f1b8 0f00 	cmp.w	r8, #0
 800f830:	dd09      	ble.n	800f846 <_dtoa_r+0x72e>
 800f832:	4545      	cmp	r5, r8
 800f834:	9a05      	ldr	r2, [sp, #20]
 800f836:	462b      	mov	r3, r5
 800f838:	bfa8      	it	ge
 800f83a:	4643      	movge	r3, r8
 800f83c:	1ad2      	subs	r2, r2, r3
 800f83e:	9205      	str	r2, [sp, #20]
 800f840:	1aed      	subs	r5, r5, r3
 800f842:	eba8 0803 	sub.w	r8, r8, r3
 800f846:	9b07      	ldr	r3, [sp, #28]
 800f848:	b1eb      	cbz	r3, 800f886 <_dtoa_r+0x76e>
 800f84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d067      	beq.n	800f920 <_dtoa_r+0x808>
 800f850:	b18f      	cbz	r7, 800f876 <_dtoa_r+0x75e>
 800f852:	4631      	mov	r1, r6
 800f854:	463a      	mov	r2, r7
 800f856:	4620      	mov	r0, r4
 800f858:	f000 fba2 	bl	800ffa0 <__pow5mult>
 800f85c:	9a04      	ldr	r2, [sp, #16]
 800f85e:	4601      	mov	r1, r0
 800f860:	4606      	mov	r6, r0
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fb05 	bl	800fe72 <__multiply>
 800f868:	9904      	ldr	r1, [sp, #16]
 800f86a:	9008      	str	r0, [sp, #32]
 800f86c:	4620      	mov	r0, r4
 800f86e:	f000 fa57 	bl	800fd20 <_Bfree>
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	9b07      	ldr	r3, [sp, #28]
 800f878:	1bda      	subs	r2, r3, r7
 800f87a:	d004      	beq.n	800f886 <_dtoa_r+0x76e>
 800f87c:	9904      	ldr	r1, [sp, #16]
 800f87e:	4620      	mov	r0, r4
 800f880:	f000 fb8e 	bl	800ffa0 <__pow5mult>
 800f884:	9004      	str	r0, [sp, #16]
 800f886:	2101      	movs	r1, #1
 800f888:	4620      	mov	r0, r4
 800f88a:	f000 fae9 	bl	800fe60 <__i2b>
 800f88e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f890:	4607      	mov	r7, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	f000 81d0 	beq.w	800fc38 <_dtoa_r+0xb20>
 800f898:	461a      	mov	r2, r3
 800f89a:	4601      	mov	r1, r0
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fb7f 	bl	800ffa0 <__pow5mult>
 800f8a2:	9b06      	ldr	r3, [sp, #24]
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	dc40      	bgt.n	800f92c <_dtoa_r+0x814>
 800f8aa:	9b00      	ldr	r3, [sp, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d139      	bne.n	800f924 <_dtoa_r+0x80c>
 800f8b0:	9b01      	ldr	r3, [sp, #4]
 800f8b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d136      	bne.n	800f928 <_dtoa_r+0x810>
 800f8ba:	9b01      	ldr	r3, [sp, #4]
 800f8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8c0:	0d1b      	lsrs	r3, r3, #20
 800f8c2:	051b      	lsls	r3, r3, #20
 800f8c4:	b12b      	cbz	r3, 800f8d2 <_dtoa_r+0x7ba>
 800f8c6:	9b05      	ldr	r3, [sp, #20]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	9305      	str	r3, [sp, #20]
 800f8cc:	f108 0801 	add.w	r8, r8, #1
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	9307      	str	r3, [sp, #28]
 800f8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d12a      	bne.n	800f930 <_dtoa_r+0x818>
 800f8da:	2001      	movs	r0, #1
 800f8dc:	e030      	b.n	800f940 <_dtoa_r+0x828>
 800f8de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f8e4:	e795      	b.n	800f812 <_dtoa_r+0x6fa>
 800f8e6:	9b07      	ldr	r3, [sp, #28]
 800f8e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f8ec:	42bb      	cmp	r3, r7
 800f8ee:	bfbf      	itttt	lt
 800f8f0:	9b07      	ldrlt	r3, [sp, #28]
 800f8f2:	9707      	strlt	r7, [sp, #28]
 800f8f4:	1afa      	sublt	r2, r7, r3
 800f8f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f8f8:	bfbb      	ittet	lt
 800f8fa:	189b      	addlt	r3, r3, r2
 800f8fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f8fe:	1bdf      	subge	r7, r3, r7
 800f900:	2700      	movlt	r7, #0
 800f902:	f1b9 0f00 	cmp.w	r9, #0
 800f906:	bfb5      	itete	lt
 800f908:	9b05      	ldrlt	r3, [sp, #20]
 800f90a:	9d05      	ldrge	r5, [sp, #20]
 800f90c:	eba3 0509 	sublt.w	r5, r3, r9
 800f910:	464b      	movge	r3, r9
 800f912:	bfb8      	it	lt
 800f914:	2300      	movlt	r3, #0
 800f916:	e77e      	b.n	800f816 <_dtoa_r+0x6fe>
 800f918:	9f07      	ldr	r7, [sp, #28]
 800f91a:	9d05      	ldr	r5, [sp, #20]
 800f91c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f91e:	e783      	b.n	800f828 <_dtoa_r+0x710>
 800f920:	9a07      	ldr	r2, [sp, #28]
 800f922:	e7ab      	b.n	800f87c <_dtoa_r+0x764>
 800f924:	2300      	movs	r3, #0
 800f926:	e7d4      	b.n	800f8d2 <_dtoa_r+0x7ba>
 800f928:	9b00      	ldr	r3, [sp, #0]
 800f92a:	e7d2      	b.n	800f8d2 <_dtoa_r+0x7ba>
 800f92c:	2300      	movs	r3, #0
 800f92e:	9307      	str	r3, [sp, #28]
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f936:	6918      	ldr	r0, [r3, #16]
 800f938:	f000 fa44 	bl	800fdc4 <__hi0bits>
 800f93c:	f1c0 0020 	rsb	r0, r0, #32
 800f940:	4440      	add	r0, r8
 800f942:	f010 001f 	ands.w	r0, r0, #31
 800f946:	d047      	beq.n	800f9d8 <_dtoa_r+0x8c0>
 800f948:	f1c0 0320 	rsb	r3, r0, #32
 800f94c:	2b04      	cmp	r3, #4
 800f94e:	dd3b      	ble.n	800f9c8 <_dtoa_r+0x8b0>
 800f950:	9b05      	ldr	r3, [sp, #20]
 800f952:	f1c0 001c 	rsb	r0, r0, #28
 800f956:	4403      	add	r3, r0
 800f958:	9305      	str	r3, [sp, #20]
 800f95a:	4405      	add	r5, r0
 800f95c:	4480      	add	r8, r0
 800f95e:	9b05      	ldr	r3, [sp, #20]
 800f960:	2b00      	cmp	r3, #0
 800f962:	dd05      	ble.n	800f970 <_dtoa_r+0x858>
 800f964:	461a      	mov	r2, r3
 800f966:	9904      	ldr	r1, [sp, #16]
 800f968:	4620      	mov	r0, r4
 800f96a:	f000 fb67 	bl	801003c <__lshift>
 800f96e:	9004      	str	r0, [sp, #16]
 800f970:	f1b8 0f00 	cmp.w	r8, #0
 800f974:	dd05      	ble.n	800f982 <_dtoa_r+0x86a>
 800f976:	4639      	mov	r1, r7
 800f978:	4642      	mov	r2, r8
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 fb5e 	bl	801003c <__lshift>
 800f980:	4607      	mov	r7, r0
 800f982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f984:	b353      	cbz	r3, 800f9dc <_dtoa_r+0x8c4>
 800f986:	4639      	mov	r1, r7
 800f988:	9804      	ldr	r0, [sp, #16]
 800f98a:	f000 fbab 	bl	80100e4 <__mcmp>
 800f98e:	2800      	cmp	r0, #0
 800f990:	da24      	bge.n	800f9dc <_dtoa_r+0x8c4>
 800f992:	2300      	movs	r3, #0
 800f994:	220a      	movs	r2, #10
 800f996:	9904      	ldr	r1, [sp, #16]
 800f998:	4620      	mov	r0, r4
 800f99a:	f000 f9d8 	bl	800fd4e <__multadd>
 800f99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a0:	9004      	str	r0, [sp, #16]
 800f9a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 814d 	beq.w	800fc46 <_dtoa_r+0xb2e>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4631      	mov	r1, r6
 800f9b0:	220a      	movs	r2, #10
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 f9cb 	bl	800fd4e <__multadd>
 800f9b8:	9b02      	ldr	r3, [sp, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	4606      	mov	r6, r0
 800f9be:	dc4f      	bgt.n	800fa60 <_dtoa_r+0x948>
 800f9c0:	9b06      	ldr	r3, [sp, #24]
 800f9c2:	2b02      	cmp	r3, #2
 800f9c4:	dd4c      	ble.n	800fa60 <_dtoa_r+0x948>
 800f9c6:	e011      	b.n	800f9ec <_dtoa_r+0x8d4>
 800f9c8:	d0c9      	beq.n	800f95e <_dtoa_r+0x846>
 800f9ca:	9a05      	ldr	r2, [sp, #20]
 800f9cc:	331c      	adds	r3, #28
 800f9ce:	441a      	add	r2, r3
 800f9d0:	9205      	str	r2, [sp, #20]
 800f9d2:	441d      	add	r5, r3
 800f9d4:	4498      	add	r8, r3
 800f9d6:	e7c2      	b.n	800f95e <_dtoa_r+0x846>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	e7f6      	b.n	800f9ca <_dtoa_r+0x8b2>
 800f9dc:	f1b9 0f00 	cmp.w	r9, #0
 800f9e0:	dc38      	bgt.n	800fa54 <_dtoa_r+0x93c>
 800f9e2:	9b06      	ldr	r3, [sp, #24]
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	dd35      	ble.n	800fa54 <_dtoa_r+0x93c>
 800f9e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f9ec:	9b02      	ldr	r3, [sp, #8]
 800f9ee:	b963      	cbnz	r3, 800fa0a <_dtoa_r+0x8f2>
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	2205      	movs	r2, #5
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f000 f9aa 	bl	800fd4e <__multadd>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	9804      	ldr	r0, [sp, #16]
 800fa00:	f000 fb70 	bl	80100e4 <__mcmp>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	f73f adcc 	bgt.w	800f5a2 <_dtoa_r+0x48a>
 800fa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0c:	465d      	mov	r5, fp
 800fa0e:	ea6f 0a03 	mvn.w	sl, r3
 800fa12:	f04f 0900 	mov.w	r9, #0
 800fa16:	4639      	mov	r1, r7
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f000 f981 	bl	800fd20 <_Bfree>
 800fa1e:	2e00      	cmp	r6, #0
 800fa20:	f43f aeb7 	beq.w	800f792 <_dtoa_r+0x67a>
 800fa24:	f1b9 0f00 	cmp.w	r9, #0
 800fa28:	d005      	beq.n	800fa36 <_dtoa_r+0x91e>
 800fa2a:	45b1      	cmp	r9, r6
 800fa2c:	d003      	beq.n	800fa36 <_dtoa_r+0x91e>
 800fa2e:	4649      	mov	r1, r9
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 f975 	bl	800fd20 <_Bfree>
 800fa36:	4631      	mov	r1, r6
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f000 f971 	bl	800fd20 <_Bfree>
 800fa3e:	e6a8      	b.n	800f792 <_dtoa_r+0x67a>
 800fa40:	2700      	movs	r7, #0
 800fa42:	463e      	mov	r6, r7
 800fa44:	e7e1      	b.n	800fa0a <_dtoa_r+0x8f2>
 800fa46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa4a:	463e      	mov	r6, r7
 800fa4c:	e5a9      	b.n	800f5a2 <_dtoa_r+0x48a>
 800fa4e:	bf00      	nop
 800fa50:	40240000 	.word	0x40240000
 800fa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa56:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f000 80fa 	beq.w	800fc54 <_dtoa_r+0xb3c>
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	dd05      	ble.n	800fa70 <_dtoa_r+0x958>
 800fa64:	4631      	mov	r1, r6
 800fa66:	462a      	mov	r2, r5
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 fae7 	bl	801003c <__lshift>
 800fa6e:	4606      	mov	r6, r0
 800fa70:	9b07      	ldr	r3, [sp, #28]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d04c      	beq.n	800fb10 <_dtoa_r+0x9f8>
 800fa76:	6871      	ldr	r1, [r6, #4]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 f91d 	bl	800fcb8 <_Balloc>
 800fa7e:	6932      	ldr	r2, [r6, #16]
 800fa80:	3202      	adds	r2, #2
 800fa82:	4605      	mov	r5, r0
 800fa84:	0092      	lsls	r2, r2, #2
 800fa86:	f106 010c 	add.w	r1, r6, #12
 800fa8a:	300c      	adds	r0, #12
 800fa8c:	f7fe fe88 	bl	800e7a0 <memcpy>
 800fa90:	2201      	movs	r2, #1
 800fa92:	4629      	mov	r1, r5
 800fa94:	4620      	mov	r0, r4
 800fa96:	f000 fad1 	bl	801003c <__lshift>
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	f8cd b014 	str.w	fp, [sp, #20]
 800faa0:	f003 0301 	and.w	r3, r3, #1
 800faa4:	46b1      	mov	r9, r6
 800faa6:	9307      	str	r3, [sp, #28]
 800faa8:	4606      	mov	r6, r0
 800faaa:	4639      	mov	r1, r7
 800faac:	9804      	ldr	r0, [sp, #16]
 800faae:	f7ff faa7 	bl	800f000 <quorem>
 800fab2:	4649      	mov	r1, r9
 800fab4:	4605      	mov	r5, r0
 800fab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800faba:	9804      	ldr	r0, [sp, #16]
 800fabc:	f000 fb12 	bl	80100e4 <__mcmp>
 800fac0:	4632      	mov	r2, r6
 800fac2:	9000      	str	r0, [sp, #0]
 800fac4:	4639      	mov	r1, r7
 800fac6:	4620      	mov	r0, r4
 800fac8:	f000 fb26 	bl	8010118 <__mdiff>
 800facc:	68c3      	ldr	r3, [r0, #12]
 800face:	4602      	mov	r2, r0
 800fad0:	bb03      	cbnz	r3, 800fb14 <_dtoa_r+0x9fc>
 800fad2:	4601      	mov	r1, r0
 800fad4:	9008      	str	r0, [sp, #32]
 800fad6:	9804      	ldr	r0, [sp, #16]
 800fad8:	f000 fb04 	bl	80100e4 <__mcmp>
 800fadc:	9a08      	ldr	r2, [sp, #32]
 800fade:	4603      	mov	r3, r0
 800fae0:	4611      	mov	r1, r2
 800fae2:	4620      	mov	r0, r4
 800fae4:	9308      	str	r3, [sp, #32]
 800fae6:	f000 f91b 	bl	800fd20 <_Bfree>
 800faea:	9b08      	ldr	r3, [sp, #32]
 800faec:	b9a3      	cbnz	r3, 800fb18 <_dtoa_r+0xa00>
 800faee:	9a06      	ldr	r2, [sp, #24]
 800faf0:	b992      	cbnz	r2, 800fb18 <_dtoa_r+0xa00>
 800faf2:	9a07      	ldr	r2, [sp, #28]
 800faf4:	b982      	cbnz	r2, 800fb18 <_dtoa_r+0xa00>
 800faf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fafa:	d029      	beq.n	800fb50 <_dtoa_r+0xa38>
 800fafc:	9b00      	ldr	r3, [sp, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	dd01      	ble.n	800fb06 <_dtoa_r+0x9ee>
 800fb02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fb06:	9b05      	ldr	r3, [sp, #20]
 800fb08:	1c5d      	adds	r5, r3, #1
 800fb0a:	f883 8000 	strb.w	r8, [r3]
 800fb0e:	e782      	b.n	800fa16 <_dtoa_r+0x8fe>
 800fb10:	4630      	mov	r0, r6
 800fb12:	e7c2      	b.n	800fa9a <_dtoa_r+0x982>
 800fb14:	2301      	movs	r3, #1
 800fb16:	e7e3      	b.n	800fae0 <_dtoa_r+0x9c8>
 800fb18:	9a00      	ldr	r2, [sp, #0]
 800fb1a:	2a00      	cmp	r2, #0
 800fb1c:	db04      	blt.n	800fb28 <_dtoa_r+0xa10>
 800fb1e:	d125      	bne.n	800fb6c <_dtoa_r+0xa54>
 800fb20:	9a06      	ldr	r2, [sp, #24]
 800fb22:	bb1a      	cbnz	r2, 800fb6c <_dtoa_r+0xa54>
 800fb24:	9a07      	ldr	r2, [sp, #28]
 800fb26:	bb0a      	cbnz	r2, 800fb6c <_dtoa_r+0xa54>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	ddec      	ble.n	800fb06 <_dtoa_r+0x9ee>
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	9904      	ldr	r1, [sp, #16]
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 fa83 	bl	801003c <__lshift>
 800fb36:	4639      	mov	r1, r7
 800fb38:	9004      	str	r0, [sp, #16]
 800fb3a:	f000 fad3 	bl	80100e4 <__mcmp>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	dc03      	bgt.n	800fb4a <_dtoa_r+0xa32>
 800fb42:	d1e0      	bne.n	800fb06 <_dtoa_r+0x9ee>
 800fb44:	f018 0f01 	tst.w	r8, #1
 800fb48:	d0dd      	beq.n	800fb06 <_dtoa_r+0x9ee>
 800fb4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb4e:	d1d8      	bne.n	800fb02 <_dtoa_r+0x9ea>
 800fb50:	9b05      	ldr	r3, [sp, #20]
 800fb52:	9a05      	ldr	r2, [sp, #20]
 800fb54:	1c5d      	adds	r5, r3, #1
 800fb56:	2339      	movs	r3, #57	; 0x39
 800fb58:	7013      	strb	r3, [r2, #0]
 800fb5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb5e:	2b39      	cmp	r3, #57	; 0x39
 800fb60:	f105 32ff 	add.w	r2, r5, #4294967295
 800fb64:	d04f      	beq.n	800fc06 <_dtoa_r+0xaee>
 800fb66:	3301      	adds	r3, #1
 800fb68:	7013      	strb	r3, [r2, #0]
 800fb6a:	e754      	b.n	800fa16 <_dtoa_r+0x8fe>
 800fb6c:	9a05      	ldr	r2, [sp, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f102 0501 	add.w	r5, r2, #1
 800fb74:	dd06      	ble.n	800fb84 <_dtoa_r+0xa6c>
 800fb76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb7a:	d0e9      	beq.n	800fb50 <_dtoa_r+0xa38>
 800fb7c:	f108 0801 	add.w	r8, r8, #1
 800fb80:	9b05      	ldr	r3, [sp, #20]
 800fb82:	e7c2      	b.n	800fb0a <_dtoa_r+0x9f2>
 800fb84:	9a02      	ldr	r2, [sp, #8]
 800fb86:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fb8a:	eba5 030b 	sub.w	r3, r5, fp
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d021      	beq.n	800fbd6 <_dtoa_r+0xabe>
 800fb92:	2300      	movs	r3, #0
 800fb94:	220a      	movs	r2, #10
 800fb96:	9904      	ldr	r1, [sp, #16]
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 f8d8 	bl	800fd4e <__multadd>
 800fb9e:	45b1      	cmp	r9, r6
 800fba0:	9004      	str	r0, [sp, #16]
 800fba2:	f04f 0300 	mov.w	r3, #0
 800fba6:	f04f 020a 	mov.w	r2, #10
 800fbaa:	4649      	mov	r1, r9
 800fbac:	4620      	mov	r0, r4
 800fbae:	d105      	bne.n	800fbbc <_dtoa_r+0xaa4>
 800fbb0:	f000 f8cd 	bl	800fd4e <__multadd>
 800fbb4:	4681      	mov	r9, r0
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	9505      	str	r5, [sp, #20]
 800fbba:	e776      	b.n	800faaa <_dtoa_r+0x992>
 800fbbc:	f000 f8c7 	bl	800fd4e <__multadd>
 800fbc0:	4631      	mov	r1, r6
 800fbc2:	4681      	mov	r9, r0
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	220a      	movs	r2, #10
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 f8c0 	bl	800fd4e <__multadd>
 800fbce:	4606      	mov	r6, r0
 800fbd0:	e7f2      	b.n	800fbb8 <_dtoa_r+0xaa0>
 800fbd2:	f04f 0900 	mov.w	r9, #0
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	9904      	ldr	r1, [sp, #16]
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 fa2e 	bl	801003c <__lshift>
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	9004      	str	r0, [sp, #16]
 800fbe4:	f000 fa7e 	bl	80100e4 <__mcmp>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	dcb6      	bgt.n	800fb5a <_dtoa_r+0xa42>
 800fbec:	d102      	bne.n	800fbf4 <_dtoa_r+0xadc>
 800fbee:	f018 0f01 	tst.w	r8, #1
 800fbf2:	d1b2      	bne.n	800fb5a <_dtoa_r+0xa42>
 800fbf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbf8:	2b30      	cmp	r3, #48	; 0x30
 800fbfa:	f105 32ff 	add.w	r2, r5, #4294967295
 800fbfe:	f47f af0a 	bne.w	800fa16 <_dtoa_r+0x8fe>
 800fc02:	4615      	mov	r5, r2
 800fc04:	e7f6      	b.n	800fbf4 <_dtoa_r+0xadc>
 800fc06:	4593      	cmp	fp, r2
 800fc08:	d105      	bne.n	800fc16 <_dtoa_r+0xafe>
 800fc0a:	2331      	movs	r3, #49	; 0x31
 800fc0c:	f10a 0a01 	add.w	sl, sl, #1
 800fc10:	f88b 3000 	strb.w	r3, [fp]
 800fc14:	e6ff      	b.n	800fa16 <_dtoa_r+0x8fe>
 800fc16:	4615      	mov	r5, r2
 800fc18:	e79f      	b.n	800fb5a <_dtoa_r+0xa42>
 800fc1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fc80 <_dtoa_r+0xb68>
 800fc1e:	e007      	b.n	800fc30 <_dtoa_r+0xb18>
 800fc20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc22:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fc84 <_dtoa_r+0xb6c>
 800fc26:	b11b      	cbz	r3, 800fc30 <_dtoa_r+0xb18>
 800fc28:	f10b 0308 	add.w	r3, fp, #8
 800fc2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc2e:	6013      	str	r3, [r2, #0]
 800fc30:	4658      	mov	r0, fp
 800fc32:	b017      	add	sp, #92	; 0x5c
 800fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc38:	9b06      	ldr	r3, [sp, #24]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	f77f ae35 	ble.w	800f8aa <_dtoa_r+0x792>
 800fc40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc42:	9307      	str	r3, [sp, #28]
 800fc44:	e649      	b.n	800f8da <_dtoa_r+0x7c2>
 800fc46:	9b02      	ldr	r3, [sp, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dc03      	bgt.n	800fc54 <_dtoa_r+0xb3c>
 800fc4c:	9b06      	ldr	r3, [sp, #24]
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	f73f aecc 	bgt.w	800f9ec <_dtoa_r+0x8d4>
 800fc54:	465d      	mov	r5, fp
 800fc56:	4639      	mov	r1, r7
 800fc58:	9804      	ldr	r0, [sp, #16]
 800fc5a:	f7ff f9d1 	bl	800f000 <quorem>
 800fc5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc62:	f805 8b01 	strb.w	r8, [r5], #1
 800fc66:	9a02      	ldr	r2, [sp, #8]
 800fc68:	eba5 030b 	sub.w	r3, r5, fp
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	ddb0      	ble.n	800fbd2 <_dtoa_r+0xaba>
 800fc70:	2300      	movs	r3, #0
 800fc72:	220a      	movs	r2, #10
 800fc74:	9904      	ldr	r1, [sp, #16]
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 f869 	bl	800fd4e <__multadd>
 800fc7c:	9004      	str	r0, [sp, #16]
 800fc7e:	e7ea      	b.n	800fc56 <_dtoa_r+0xb3e>
 800fc80:	08011a40 	.word	0x08011a40
 800fc84:	08011a42 	.word	0x08011a42

0800fc88 <_localeconv_r>:
 800fc88:	4b04      	ldr	r3, [pc, #16]	; (800fc9c <_localeconv_r+0x14>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	6a18      	ldr	r0, [r3, #32]
 800fc8e:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <_localeconv_r+0x18>)
 800fc90:	2800      	cmp	r0, #0
 800fc92:	bf08      	it	eq
 800fc94:	4618      	moveq	r0, r3
 800fc96:	30f0      	adds	r0, #240	; 0xf0
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	20000010 	.word	0x20000010
 800fca0:	20000074 	.word	0x20000074

0800fca4 <malloc>:
 800fca4:	4b02      	ldr	r3, [pc, #8]	; (800fcb0 <malloc+0xc>)
 800fca6:	4601      	mov	r1, r0
 800fca8:	6818      	ldr	r0, [r3, #0]
 800fcaa:	f7fe bd8d 	b.w	800e7c8 <_malloc_r>
 800fcae:	bf00      	nop
 800fcb0:	20000010 	.word	0x20000010

0800fcb4 <__malloc_lock>:
 800fcb4:	4770      	bx	lr

0800fcb6 <__malloc_unlock>:
 800fcb6:	4770      	bx	lr

0800fcb8 <_Balloc>:
 800fcb8:	b570      	push	{r4, r5, r6, lr}
 800fcba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	460e      	mov	r6, r1
 800fcc0:	b93d      	cbnz	r5, 800fcd2 <_Balloc+0x1a>
 800fcc2:	2010      	movs	r0, #16
 800fcc4:	f7ff ffee 	bl	800fca4 <malloc>
 800fcc8:	6260      	str	r0, [r4, #36]	; 0x24
 800fcca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcce:	6005      	str	r5, [r0, #0]
 800fcd0:	60c5      	str	r5, [r0, #12]
 800fcd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fcd4:	68eb      	ldr	r3, [r5, #12]
 800fcd6:	b183      	cbz	r3, 800fcfa <_Balloc+0x42>
 800fcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fce0:	b9b8      	cbnz	r0, 800fd12 <_Balloc+0x5a>
 800fce2:	2101      	movs	r1, #1
 800fce4:	fa01 f506 	lsl.w	r5, r1, r6
 800fce8:	1d6a      	adds	r2, r5, #5
 800fcea:	0092      	lsls	r2, r2, #2
 800fcec:	4620      	mov	r0, r4
 800fcee:	f000 fabf 	bl	8010270 <_calloc_r>
 800fcf2:	b160      	cbz	r0, 800fd0e <_Balloc+0x56>
 800fcf4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fcf8:	e00e      	b.n	800fd18 <_Balloc+0x60>
 800fcfa:	2221      	movs	r2, #33	; 0x21
 800fcfc:	2104      	movs	r1, #4
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 fab6 	bl	8010270 <_calloc_r>
 800fd04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd06:	60e8      	str	r0, [r5, #12]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e4      	bne.n	800fcd8 <_Balloc+0x20>
 800fd0e:	2000      	movs	r0, #0
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	6802      	ldr	r2, [r0, #0]
 800fd14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd1e:	e7f7      	b.n	800fd10 <_Balloc+0x58>

0800fd20 <_Bfree>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd24:	4606      	mov	r6, r0
 800fd26:	460d      	mov	r5, r1
 800fd28:	b93c      	cbnz	r4, 800fd3a <_Bfree+0x1a>
 800fd2a:	2010      	movs	r0, #16
 800fd2c:	f7ff ffba 	bl	800fca4 <malloc>
 800fd30:	6270      	str	r0, [r6, #36]	; 0x24
 800fd32:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd36:	6004      	str	r4, [r0, #0]
 800fd38:	60c4      	str	r4, [r0, #12]
 800fd3a:	b13d      	cbz	r5, 800fd4c <_Bfree+0x2c>
 800fd3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd3e:	686a      	ldr	r2, [r5, #4]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd46:	6029      	str	r1, [r5, #0]
 800fd48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fd4c:	bd70      	pop	{r4, r5, r6, pc}

0800fd4e <__multadd>:
 800fd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	690d      	ldr	r5, [r1, #16]
 800fd54:	461f      	mov	r7, r3
 800fd56:	4606      	mov	r6, r0
 800fd58:	460c      	mov	r4, r1
 800fd5a:	f101 0c14 	add.w	ip, r1, #20
 800fd5e:	2300      	movs	r3, #0
 800fd60:	f8dc 0000 	ldr.w	r0, [ip]
 800fd64:	b281      	uxth	r1, r0
 800fd66:	fb02 7101 	mla	r1, r2, r1, r7
 800fd6a:	0c0f      	lsrs	r7, r1, #16
 800fd6c:	0c00      	lsrs	r0, r0, #16
 800fd6e:	fb02 7000 	mla	r0, r2, r0, r7
 800fd72:	b289      	uxth	r1, r1
 800fd74:	3301      	adds	r3, #1
 800fd76:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fd7a:	429d      	cmp	r5, r3
 800fd7c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fd80:	f84c 1b04 	str.w	r1, [ip], #4
 800fd84:	dcec      	bgt.n	800fd60 <__multadd+0x12>
 800fd86:	b1d7      	cbz	r7, 800fdbe <__multadd+0x70>
 800fd88:	68a3      	ldr	r3, [r4, #8]
 800fd8a:	42ab      	cmp	r3, r5
 800fd8c:	dc12      	bgt.n	800fdb4 <__multadd+0x66>
 800fd8e:	6861      	ldr	r1, [r4, #4]
 800fd90:	4630      	mov	r0, r6
 800fd92:	3101      	adds	r1, #1
 800fd94:	f7ff ff90 	bl	800fcb8 <_Balloc>
 800fd98:	6922      	ldr	r2, [r4, #16]
 800fd9a:	3202      	adds	r2, #2
 800fd9c:	f104 010c 	add.w	r1, r4, #12
 800fda0:	4680      	mov	r8, r0
 800fda2:	0092      	lsls	r2, r2, #2
 800fda4:	300c      	adds	r0, #12
 800fda6:	f7fe fcfb 	bl	800e7a0 <memcpy>
 800fdaa:	4621      	mov	r1, r4
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff ffb7 	bl	800fd20 <_Bfree>
 800fdb2:	4644      	mov	r4, r8
 800fdb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdb8:	3501      	adds	r5, #1
 800fdba:	615f      	str	r7, [r3, #20]
 800fdbc:	6125      	str	r5, [r4, #16]
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdc4 <__hi0bits>:
 800fdc4:	0c02      	lsrs	r2, r0, #16
 800fdc6:	0412      	lsls	r2, r2, #16
 800fdc8:	4603      	mov	r3, r0
 800fdca:	b9b2      	cbnz	r2, 800fdfa <__hi0bits+0x36>
 800fdcc:	0403      	lsls	r3, r0, #16
 800fdce:	2010      	movs	r0, #16
 800fdd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fdd4:	bf04      	itt	eq
 800fdd6:	021b      	lsleq	r3, r3, #8
 800fdd8:	3008      	addeq	r0, #8
 800fdda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fdde:	bf04      	itt	eq
 800fde0:	011b      	lsleq	r3, r3, #4
 800fde2:	3004      	addeq	r0, #4
 800fde4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fde8:	bf04      	itt	eq
 800fdea:	009b      	lsleq	r3, r3, #2
 800fdec:	3002      	addeq	r0, #2
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	db06      	blt.n	800fe00 <__hi0bits+0x3c>
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	d503      	bpl.n	800fdfe <__hi0bits+0x3a>
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	4770      	bx	lr
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	e7e8      	b.n	800fdd0 <__hi0bits+0xc>
 800fdfe:	2020      	movs	r0, #32
 800fe00:	4770      	bx	lr

0800fe02 <__lo0bits>:
 800fe02:	6803      	ldr	r3, [r0, #0]
 800fe04:	f013 0207 	ands.w	r2, r3, #7
 800fe08:	4601      	mov	r1, r0
 800fe0a:	d00b      	beq.n	800fe24 <__lo0bits+0x22>
 800fe0c:	07da      	lsls	r2, r3, #31
 800fe0e:	d423      	bmi.n	800fe58 <__lo0bits+0x56>
 800fe10:	0798      	lsls	r0, r3, #30
 800fe12:	bf49      	itett	mi
 800fe14:	085b      	lsrmi	r3, r3, #1
 800fe16:	089b      	lsrpl	r3, r3, #2
 800fe18:	2001      	movmi	r0, #1
 800fe1a:	600b      	strmi	r3, [r1, #0]
 800fe1c:	bf5c      	itt	pl
 800fe1e:	600b      	strpl	r3, [r1, #0]
 800fe20:	2002      	movpl	r0, #2
 800fe22:	4770      	bx	lr
 800fe24:	b298      	uxth	r0, r3
 800fe26:	b9a8      	cbnz	r0, 800fe54 <__lo0bits+0x52>
 800fe28:	0c1b      	lsrs	r3, r3, #16
 800fe2a:	2010      	movs	r0, #16
 800fe2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fe30:	bf04      	itt	eq
 800fe32:	0a1b      	lsreq	r3, r3, #8
 800fe34:	3008      	addeq	r0, #8
 800fe36:	071a      	lsls	r2, r3, #28
 800fe38:	bf04      	itt	eq
 800fe3a:	091b      	lsreq	r3, r3, #4
 800fe3c:	3004      	addeq	r0, #4
 800fe3e:	079a      	lsls	r2, r3, #30
 800fe40:	bf04      	itt	eq
 800fe42:	089b      	lsreq	r3, r3, #2
 800fe44:	3002      	addeq	r0, #2
 800fe46:	07da      	lsls	r2, r3, #31
 800fe48:	d402      	bmi.n	800fe50 <__lo0bits+0x4e>
 800fe4a:	085b      	lsrs	r3, r3, #1
 800fe4c:	d006      	beq.n	800fe5c <__lo0bits+0x5a>
 800fe4e:	3001      	adds	r0, #1
 800fe50:	600b      	str	r3, [r1, #0]
 800fe52:	4770      	bx	lr
 800fe54:	4610      	mov	r0, r2
 800fe56:	e7e9      	b.n	800fe2c <__lo0bits+0x2a>
 800fe58:	2000      	movs	r0, #0
 800fe5a:	4770      	bx	lr
 800fe5c:	2020      	movs	r0, #32
 800fe5e:	4770      	bx	lr

0800fe60 <__i2b>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	460c      	mov	r4, r1
 800fe64:	2101      	movs	r1, #1
 800fe66:	f7ff ff27 	bl	800fcb8 <_Balloc>
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	6144      	str	r4, [r0, #20]
 800fe6e:	6102      	str	r2, [r0, #16]
 800fe70:	bd10      	pop	{r4, pc}

0800fe72 <__multiply>:
 800fe72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe76:	4614      	mov	r4, r2
 800fe78:	690a      	ldr	r2, [r1, #16]
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	bfb8      	it	lt
 800fe80:	460b      	movlt	r3, r1
 800fe82:	4688      	mov	r8, r1
 800fe84:	bfbc      	itt	lt
 800fe86:	46a0      	movlt	r8, r4
 800fe88:	461c      	movlt	r4, r3
 800fe8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe9a:	eb07 0609 	add.w	r6, r7, r9
 800fe9e:	42b3      	cmp	r3, r6
 800fea0:	bfb8      	it	lt
 800fea2:	3101      	addlt	r1, #1
 800fea4:	f7ff ff08 	bl	800fcb8 <_Balloc>
 800fea8:	f100 0514 	add.w	r5, r0, #20
 800feac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800feb0:	462b      	mov	r3, r5
 800feb2:	2200      	movs	r2, #0
 800feb4:	4573      	cmp	r3, lr
 800feb6:	d316      	bcc.n	800fee6 <__multiply+0x74>
 800feb8:	f104 0214 	add.w	r2, r4, #20
 800febc:	f108 0114 	add.w	r1, r8, #20
 800fec0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fec4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	9b00      	ldr	r3, [sp, #0]
 800fecc:	9201      	str	r2, [sp, #4]
 800fece:	4293      	cmp	r3, r2
 800fed0:	d80c      	bhi.n	800feec <__multiply+0x7a>
 800fed2:	2e00      	cmp	r6, #0
 800fed4:	dd03      	ble.n	800fede <__multiply+0x6c>
 800fed6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d05d      	beq.n	800ff9a <__multiply+0x128>
 800fede:	6106      	str	r6, [r0, #16]
 800fee0:	b003      	add	sp, #12
 800fee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee6:	f843 2b04 	str.w	r2, [r3], #4
 800feea:	e7e3      	b.n	800feb4 <__multiply+0x42>
 800feec:	f8b2 b000 	ldrh.w	fp, [r2]
 800fef0:	f1bb 0f00 	cmp.w	fp, #0
 800fef4:	d023      	beq.n	800ff3e <__multiply+0xcc>
 800fef6:	4689      	mov	r9, r1
 800fef8:	46ac      	mov	ip, r5
 800fefa:	f04f 0800 	mov.w	r8, #0
 800fefe:	f859 4b04 	ldr.w	r4, [r9], #4
 800ff02:	f8dc a000 	ldr.w	sl, [ip]
 800ff06:	b2a3      	uxth	r3, r4
 800ff08:	fa1f fa8a 	uxth.w	sl, sl
 800ff0c:	fb0b a303 	mla	r3, fp, r3, sl
 800ff10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ff14:	f8dc 4000 	ldr.w	r4, [ip]
 800ff18:	4443      	add	r3, r8
 800ff1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ff1e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ff22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ff26:	46e2      	mov	sl, ip
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ff2e:	454f      	cmp	r7, r9
 800ff30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ff34:	f84a 3b04 	str.w	r3, [sl], #4
 800ff38:	d82b      	bhi.n	800ff92 <__multiply+0x120>
 800ff3a:	f8cc 8004 	str.w	r8, [ip, #4]
 800ff3e:	9b01      	ldr	r3, [sp, #4]
 800ff40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ff44:	3204      	adds	r2, #4
 800ff46:	f1ba 0f00 	cmp.w	sl, #0
 800ff4a:	d020      	beq.n	800ff8e <__multiply+0x11c>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	4689      	mov	r9, r1
 800ff50:	46a8      	mov	r8, r5
 800ff52:	f04f 0b00 	mov.w	fp, #0
 800ff56:	f8b9 c000 	ldrh.w	ip, [r9]
 800ff5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ff5e:	fb0a 440c 	mla	r4, sl, ip, r4
 800ff62:	445c      	add	r4, fp
 800ff64:	46c4      	mov	ip, r8
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ff6c:	f84c 3b04 	str.w	r3, [ip], #4
 800ff70:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ff78:	0c1b      	lsrs	r3, r3, #16
 800ff7a:	fb0a b303 	mla	r3, sl, r3, fp
 800ff7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ff82:	454f      	cmp	r7, r9
 800ff84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ff88:	d805      	bhi.n	800ff96 <__multiply+0x124>
 800ff8a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ff8e:	3504      	adds	r5, #4
 800ff90:	e79b      	b.n	800feca <__multiply+0x58>
 800ff92:	46d4      	mov	ip, sl
 800ff94:	e7b3      	b.n	800fefe <__multiply+0x8c>
 800ff96:	46e0      	mov	r8, ip
 800ff98:	e7dd      	b.n	800ff56 <__multiply+0xe4>
 800ff9a:	3e01      	subs	r6, #1
 800ff9c:	e799      	b.n	800fed2 <__multiply+0x60>
	...

0800ffa0 <__pow5mult>:
 800ffa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffa4:	4615      	mov	r5, r2
 800ffa6:	f012 0203 	ands.w	r2, r2, #3
 800ffaa:	4606      	mov	r6, r0
 800ffac:	460f      	mov	r7, r1
 800ffae:	d007      	beq.n	800ffc0 <__pow5mult+0x20>
 800ffb0:	3a01      	subs	r2, #1
 800ffb2:	4c21      	ldr	r4, [pc, #132]	; (8010038 <__pow5mult+0x98>)
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffba:	f7ff fec8 	bl	800fd4e <__multadd>
 800ffbe:	4607      	mov	r7, r0
 800ffc0:	10ad      	asrs	r5, r5, #2
 800ffc2:	d035      	beq.n	8010030 <__pow5mult+0x90>
 800ffc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ffc6:	b93c      	cbnz	r4, 800ffd8 <__pow5mult+0x38>
 800ffc8:	2010      	movs	r0, #16
 800ffca:	f7ff fe6b 	bl	800fca4 <malloc>
 800ffce:	6270      	str	r0, [r6, #36]	; 0x24
 800ffd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffd4:	6004      	str	r4, [r0, #0]
 800ffd6:	60c4      	str	r4, [r0, #12]
 800ffd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ffdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffe0:	b94c      	cbnz	r4, 800fff6 <__pow5mult+0x56>
 800ffe2:	f240 2171 	movw	r1, #625	; 0x271
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f7ff ff3a 	bl	800fe60 <__i2b>
 800ffec:	2300      	movs	r3, #0
 800ffee:	f8c8 0008 	str.w	r0, [r8, #8]
 800fff2:	4604      	mov	r4, r0
 800fff4:	6003      	str	r3, [r0, #0]
 800fff6:	f04f 0800 	mov.w	r8, #0
 800fffa:	07eb      	lsls	r3, r5, #31
 800fffc:	d50a      	bpl.n	8010014 <__pow5mult+0x74>
 800fffe:	4639      	mov	r1, r7
 8010000:	4622      	mov	r2, r4
 8010002:	4630      	mov	r0, r6
 8010004:	f7ff ff35 	bl	800fe72 <__multiply>
 8010008:	4639      	mov	r1, r7
 801000a:	4681      	mov	r9, r0
 801000c:	4630      	mov	r0, r6
 801000e:	f7ff fe87 	bl	800fd20 <_Bfree>
 8010012:	464f      	mov	r7, r9
 8010014:	106d      	asrs	r5, r5, #1
 8010016:	d00b      	beq.n	8010030 <__pow5mult+0x90>
 8010018:	6820      	ldr	r0, [r4, #0]
 801001a:	b938      	cbnz	r0, 801002c <__pow5mult+0x8c>
 801001c:	4622      	mov	r2, r4
 801001e:	4621      	mov	r1, r4
 8010020:	4630      	mov	r0, r6
 8010022:	f7ff ff26 	bl	800fe72 <__multiply>
 8010026:	6020      	str	r0, [r4, #0]
 8010028:	f8c0 8000 	str.w	r8, [r0]
 801002c:	4604      	mov	r4, r0
 801002e:	e7e4      	b.n	800fffa <__pow5mult+0x5a>
 8010030:	4638      	mov	r0, r7
 8010032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010036:	bf00      	nop
 8010038:	08011b40 	.word	0x08011b40

0801003c <__lshift>:
 801003c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010040:	460c      	mov	r4, r1
 8010042:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	6849      	ldr	r1, [r1, #4]
 801004a:	eb0a 0903 	add.w	r9, sl, r3
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	4607      	mov	r7, r0
 8010052:	4616      	mov	r6, r2
 8010054:	f109 0501 	add.w	r5, r9, #1
 8010058:	42ab      	cmp	r3, r5
 801005a:	db32      	blt.n	80100c2 <__lshift+0x86>
 801005c:	4638      	mov	r0, r7
 801005e:	f7ff fe2b 	bl	800fcb8 <_Balloc>
 8010062:	2300      	movs	r3, #0
 8010064:	4680      	mov	r8, r0
 8010066:	f100 0114 	add.w	r1, r0, #20
 801006a:	461a      	mov	r2, r3
 801006c:	4553      	cmp	r3, sl
 801006e:	db2b      	blt.n	80100c8 <__lshift+0x8c>
 8010070:	6920      	ldr	r0, [r4, #16]
 8010072:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010076:	f104 0314 	add.w	r3, r4, #20
 801007a:	f016 021f 	ands.w	r2, r6, #31
 801007e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010082:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010086:	d025      	beq.n	80100d4 <__lshift+0x98>
 8010088:	f1c2 0e20 	rsb	lr, r2, #32
 801008c:	2000      	movs	r0, #0
 801008e:	681e      	ldr	r6, [r3, #0]
 8010090:	468a      	mov	sl, r1
 8010092:	4096      	lsls	r6, r2
 8010094:	4330      	orrs	r0, r6
 8010096:	f84a 0b04 	str.w	r0, [sl], #4
 801009a:	f853 0b04 	ldr.w	r0, [r3], #4
 801009e:	459c      	cmp	ip, r3
 80100a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80100a4:	d814      	bhi.n	80100d0 <__lshift+0x94>
 80100a6:	6048      	str	r0, [r1, #4]
 80100a8:	b108      	cbz	r0, 80100ae <__lshift+0x72>
 80100aa:	f109 0502 	add.w	r5, r9, #2
 80100ae:	3d01      	subs	r5, #1
 80100b0:	4638      	mov	r0, r7
 80100b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80100b6:	4621      	mov	r1, r4
 80100b8:	f7ff fe32 	bl	800fd20 <_Bfree>
 80100bc:	4640      	mov	r0, r8
 80100be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c2:	3101      	adds	r1, #1
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	e7c7      	b.n	8010058 <__lshift+0x1c>
 80100c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80100cc:	3301      	adds	r3, #1
 80100ce:	e7cd      	b.n	801006c <__lshift+0x30>
 80100d0:	4651      	mov	r1, sl
 80100d2:	e7dc      	b.n	801008e <__lshift+0x52>
 80100d4:	3904      	subs	r1, #4
 80100d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100da:	f841 2f04 	str.w	r2, [r1, #4]!
 80100de:	459c      	cmp	ip, r3
 80100e0:	d8f9      	bhi.n	80100d6 <__lshift+0x9a>
 80100e2:	e7e4      	b.n	80100ae <__lshift+0x72>

080100e4 <__mcmp>:
 80100e4:	6903      	ldr	r3, [r0, #16]
 80100e6:	690a      	ldr	r2, [r1, #16]
 80100e8:	1a9b      	subs	r3, r3, r2
 80100ea:	b530      	push	{r4, r5, lr}
 80100ec:	d10c      	bne.n	8010108 <__mcmp+0x24>
 80100ee:	0092      	lsls	r2, r2, #2
 80100f0:	3014      	adds	r0, #20
 80100f2:	3114      	adds	r1, #20
 80100f4:	1884      	adds	r4, r0, r2
 80100f6:	4411      	add	r1, r2
 80100f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010100:	4295      	cmp	r5, r2
 8010102:	d003      	beq.n	801010c <__mcmp+0x28>
 8010104:	d305      	bcc.n	8010112 <__mcmp+0x2e>
 8010106:	2301      	movs	r3, #1
 8010108:	4618      	mov	r0, r3
 801010a:	bd30      	pop	{r4, r5, pc}
 801010c:	42a0      	cmp	r0, r4
 801010e:	d3f3      	bcc.n	80100f8 <__mcmp+0x14>
 8010110:	e7fa      	b.n	8010108 <__mcmp+0x24>
 8010112:	f04f 33ff 	mov.w	r3, #4294967295
 8010116:	e7f7      	b.n	8010108 <__mcmp+0x24>

08010118 <__mdiff>:
 8010118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	460d      	mov	r5, r1
 801011e:	4607      	mov	r7, r0
 8010120:	4611      	mov	r1, r2
 8010122:	4628      	mov	r0, r5
 8010124:	4614      	mov	r4, r2
 8010126:	f7ff ffdd 	bl	80100e4 <__mcmp>
 801012a:	1e06      	subs	r6, r0, #0
 801012c:	d108      	bne.n	8010140 <__mdiff+0x28>
 801012e:	4631      	mov	r1, r6
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff fdc1 	bl	800fcb8 <_Balloc>
 8010136:	2301      	movs	r3, #1
 8010138:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801013c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010140:	bfa4      	itt	ge
 8010142:	4623      	movge	r3, r4
 8010144:	462c      	movge	r4, r5
 8010146:	4638      	mov	r0, r7
 8010148:	6861      	ldr	r1, [r4, #4]
 801014a:	bfa6      	itte	ge
 801014c:	461d      	movge	r5, r3
 801014e:	2600      	movge	r6, #0
 8010150:	2601      	movlt	r6, #1
 8010152:	f7ff fdb1 	bl	800fcb8 <_Balloc>
 8010156:	692b      	ldr	r3, [r5, #16]
 8010158:	60c6      	str	r6, [r0, #12]
 801015a:	6926      	ldr	r6, [r4, #16]
 801015c:	f105 0914 	add.w	r9, r5, #20
 8010160:	f104 0214 	add.w	r2, r4, #20
 8010164:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010168:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801016c:	f100 0514 	add.w	r5, r0, #20
 8010170:	f04f 0e00 	mov.w	lr, #0
 8010174:	f852 ab04 	ldr.w	sl, [r2], #4
 8010178:	f859 4b04 	ldr.w	r4, [r9], #4
 801017c:	fa1e f18a 	uxtah	r1, lr, sl
 8010180:	b2a3      	uxth	r3, r4
 8010182:	1ac9      	subs	r1, r1, r3
 8010184:	0c23      	lsrs	r3, r4, #16
 8010186:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801018a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801018e:	b289      	uxth	r1, r1
 8010190:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010194:	45c8      	cmp	r8, r9
 8010196:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801019a:	4694      	mov	ip, r2
 801019c:	f845 3b04 	str.w	r3, [r5], #4
 80101a0:	d8e8      	bhi.n	8010174 <__mdiff+0x5c>
 80101a2:	45bc      	cmp	ip, r7
 80101a4:	d304      	bcc.n	80101b0 <__mdiff+0x98>
 80101a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80101aa:	b183      	cbz	r3, 80101ce <__mdiff+0xb6>
 80101ac:	6106      	str	r6, [r0, #16]
 80101ae:	e7c5      	b.n	801013c <__mdiff+0x24>
 80101b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80101b4:	fa1e f381 	uxtah	r3, lr, r1
 80101b8:	141a      	asrs	r2, r3, #16
 80101ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101be:	b29b      	uxth	r3, r3
 80101c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80101c8:	f845 3b04 	str.w	r3, [r5], #4
 80101cc:	e7e9      	b.n	80101a2 <__mdiff+0x8a>
 80101ce:	3e01      	subs	r6, #1
 80101d0:	e7e9      	b.n	80101a6 <__mdiff+0x8e>

080101d2 <__d2b>:
 80101d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101d6:	460e      	mov	r6, r1
 80101d8:	2101      	movs	r1, #1
 80101da:	ec59 8b10 	vmov	r8, r9, d0
 80101de:	4615      	mov	r5, r2
 80101e0:	f7ff fd6a 	bl	800fcb8 <_Balloc>
 80101e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80101e8:	4607      	mov	r7, r0
 80101ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101ee:	bb34      	cbnz	r4, 801023e <__d2b+0x6c>
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	f1b8 0300 	subs.w	r3, r8, #0
 80101f6:	d027      	beq.n	8010248 <__d2b+0x76>
 80101f8:	a802      	add	r0, sp, #8
 80101fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80101fe:	f7ff fe00 	bl	800fe02 <__lo0bits>
 8010202:	9900      	ldr	r1, [sp, #0]
 8010204:	b1f0      	cbz	r0, 8010244 <__d2b+0x72>
 8010206:	9a01      	ldr	r2, [sp, #4]
 8010208:	f1c0 0320 	rsb	r3, r0, #32
 801020c:	fa02 f303 	lsl.w	r3, r2, r3
 8010210:	430b      	orrs	r3, r1
 8010212:	40c2      	lsrs	r2, r0
 8010214:	617b      	str	r3, [r7, #20]
 8010216:	9201      	str	r2, [sp, #4]
 8010218:	9b01      	ldr	r3, [sp, #4]
 801021a:	61bb      	str	r3, [r7, #24]
 801021c:	2b00      	cmp	r3, #0
 801021e:	bf14      	ite	ne
 8010220:	2102      	movne	r1, #2
 8010222:	2101      	moveq	r1, #1
 8010224:	6139      	str	r1, [r7, #16]
 8010226:	b1c4      	cbz	r4, 801025a <__d2b+0x88>
 8010228:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801022c:	4404      	add	r4, r0
 801022e:	6034      	str	r4, [r6, #0]
 8010230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010234:	6028      	str	r0, [r5, #0]
 8010236:	4638      	mov	r0, r7
 8010238:	b003      	add	sp, #12
 801023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801023e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010242:	e7d5      	b.n	80101f0 <__d2b+0x1e>
 8010244:	6179      	str	r1, [r7, #20]
 8010246:	e7e7      	b.n	8010218 <__d2b+0x46>
 8010248:	a801      	add	r0, sp, #4
 801024a:	f7ff fdda 	bl	800fe02 <__lo0bits>
 801024e:	9b01      	ldr	r3, [sp, #4]
 8010250:	617b      	str	r3, [r7, #20]
 8010252:	2101      	movs	r1, #1
 8010254:	6139      	str	r1, [r7, #16]
 8010256:	3020      	adds	r0, #32
 8010258:	e7e5      	b.n	8010226 <__d2b+0x54>
 801025a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801025e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010262:	6030      	str	r0, [r6, #0]
 8010264:	6918      	ldr	r0, [r3, #16]
 8010266:	f7ff fdad 	bl	800fdc4 <__hi0bits>
 801026a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801026e:	e7e1      	b.n	8010234 <__d2b+0x62>

08010270 <_calloc_r>:
 8010270:	b538      	push	{r3, r4, r5, lr}
 8010272:	fb02 f401 	mul.w	r4, r2, r1
 8010276:	4621      	mov	r1, r4
 8010278:	f7fe faa6 	bl	800e7c8 <_malloc_r>
 801027c:	4605      	mov	r5, r0
 801027e:	b118      	cbz	r0, 8010288 <_calloc_r+0x18>
 8010280:	4622      	mov	r2, r4
 8010282:	2100      	movs	r1, #0
 8010284:	f7fe fa97 	bl	800e7b6 <memset>
 8010288:	4628      	mov	r0, r5
 801028a:	bd38      	pop	{r3, r4, r5, pc}

0801028c <_free_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4605      	mov	r5, r0
 8010290:	2900      	cmp	r1, #0
 8010292:	d045      	beq.n	8010320 <_free_r+0x94>
 8010294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010298:	1f0c      	subs	r4, r1, #4
 801029a:	2b00      	cmp	r3, #0
 801029c:	bfb8      	it	lt
 801029e:	18e4      	addlt	r4, r4, r3
 80102a0:	f7ff fd08 	bl	800fcb4 <__malloc_lock>
 80102a4:	4a1f      	ldr	r2, [pc, #124]	; (8010324 <_free_r+0x98>)
 80102a6:	6813      	ldr	r3, [r2, #0]
 80102a8:	4610      	mov	r0, r2
 80102aa:	b933      	cbnz	r3, 80102ba <_free_r+0x2e>
 80102ac:	6063      	str	r3, [r4, #4]
 80102ae:	6014      	str	r4, [r2, #0]
 80102b0:	4628      	mov	r0, r5
 80102b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102b6:	f7ff bcfe 	b.w	800fcb6 <__malloc_unlock>
 80102ba:	42a3      	cmp	r3, r4
 80102bc:	d90c      	bls.n	80102d8 <_free_r+0x4c>
 80102be:	6821      	ldr	r1, [r4, #0]
 80102c0:	1862      	adds	r2, r4, r1
 80102c2:	4293      	cmp	r3, r2
 80102c4:	bf04      	itt	eq
 80102c6:	681a      	ldreq	r2, [r3, #0]
 80102c8:	685b      	ldreq	r3, [r3, #4]
 80102ca:	6063      	str	r3, [r4, #4]
 80102cc:	bf04      	itt	eq
 80102ce:	1852      	addeq	r2, r2, r1
 80102d0:	6022      	streq	r2, [r4, #0]
 80102d2:	6004      	str	r4, [r0, #0]
 80102d4:	e7ec      	b.n	80102b0 <_free_r+0x24>
 80102d6:	4613      	mov	r3, r2
 80102d8:	685a      	ldr	r2, [r3, #4]
 80102da:	b10a      	cbz	r2, 80102e0 <_free_r+0x54>
 80102dc:	42a2      	cmp	r2, r4
 80102de:	d9fa      	bls.n	80102d6 <_free_r+0x4a>
 80102e0:	6819      	ldr	r1, [r3, #0]
 80102e2:	1858      	adds	r0, r3, r1
 80102e4:	42a0      	cmp	r0, r4
 80102e6:	d10b      	bne.n	8010300 <_free_r+0x74>
 80102e8:	6820      	ldr	r0, [r4, #0]
 80102ea:	4401      	add	r1, r0
 80102ec:	1858      	adds	r0, r3, r1
 80102ee:	4282      	cmp	r2, r0
 80102f0:	6019      	str	r1, [r3, #0]
 80102f2:	d1dd      	bne.n	80102b0 <_free_r+0x24>
 80102f4:	6810      	ldr	r0, [r2, #0]
 80102f6:	6852      	ldr	r2, [r2, #4]
 80102f8:	605a      	str	r2, [r3, #4]
 80102fa:	4401      	add	r1, r0
 80102fc:	6019      	str	r1, [r3, #0]
 80102fe:	e7d7      	b.n	80102b0 <_free_r+0x24>
 8010300:	d902      	bls.n	8010308 <_free_r+0x7c>
 8010302:	230c      	movs	r3, #12
 8010304:	602b      	str	r3, [r5, #0]
 8010306:	e7d3      	b.n	80102b0 <_free_r+0x24>
 8010308:	6820      	ldr	r0, [r4, #0]
 801030a:	1821      	adds	r1, r4, r0
 801030c:	428a      	cmp	r2, r1
 801030e:	bf04      	itt	eq
 8010310:	6811      	ldreq	r1, [r2, #0]
 8010312:	6852      	ldreq	r2, [r2, #4]
 8010314:	6062      	str	r2, [r4, #4]
 8010316:	bf04      	itt	eq
 8010318:	1809      	addeq	r1, r1, r0
 801031a:	6021      	streq	r1, [r4, #0]
 801031c:	605c      	str	r4, [r3, #4]
 801031e:	e7c7      	b.n	80102b0 <_free_r+0x24>
 8010320:	bd38      	pop	{r3, r4, r5, pc}
 8010322:	bf00      	nop
 8010324:	200047c0 	.word	0x200047c0

08010328 <__ascii_mbtowc>:
 8010328:	b082      	sub	sp, #8
 801032a:	b901      	cbnz	r1, 801032e <__ascii_mbtowc+0x6>
 801032c:	a901      	add	r1, sp, #4
 801032e:	b142      	cbz	r2, 8010342 <__ascii_mbtowc+0x1a>
 8010330:	b14b      	cbz	r3, 8010346 <__ascii_mbtowc+0x1e>
 8010332:	7813      	ldrb	r3, [r2, #0]
 8010334:	600b      	str	r3, [r1, #0]
 8010336:	7812      	ldrb	r2, [r2, #0]
 8010338:	1c10      	adds	r0, r2, #0
 801033a:	bf18      	it	ne
 801033c:	2001      	movne	r0, #1
 801033e:	b002      	add	sp, #8
 8010340:	4770      	bx	lr
 8010342:	4610      	mov	r0, r2
 8010344:	e7fb      	b.n	801033e <__ascii_mbtowc+0x16>
 8010346:	f06f 0001 	mvn.w	r0, #1
 801034a:	e7f8      	b.n	801033e <__ascii_mbtowc+0x16>

0801034c <__ascii_wctomb>:
 801034c:	b149      	cbz	r1, 8010362 <__ascii_wctomb+0x16>
 801034e:	2aff      	cmp	r2, #255	; 0xff
 8010350:	bf85      	ittet	hi
 8010352:	238a      	movhi	r3, #138	; 0x8a
 8010354:	6003      	strhi	r3, [r0, #0]
 8010356:	700a      	strbls	r2, [r1, #0]
 8010358:	f04f 30ff 	movhi.w	r0, #4294967295
 801035c:	bf98      	it	ls
 801035e:	2001      	movls	r0, #1
 8010360:	4770      	bx	lr
 8010362:	4608      	mov	r0, r1
 8010364:	4770      	bx	lr
	...

08010368 <pow>:
 8010368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036c:	ed2d 8b04 	vpush	{d8-d9}
 8010370:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010644 <pow+0x2dc>
 8010374:	b08d      	sub	sp, #52	; 0x34
 8010376:	ec57 6b10 	vmov	r6, r7, d0
 801037a:	ec55 4b11 	vmov	r4, r5, d1
 801037e:	f000 f963 	bl	8010648 <__ieee754_pow>
 8010382:	f999 3000 	ldrsb.w	r3, [r9]
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	3301      	adds	r3, #1
 801038a:	eeb0 8a40 	vmov.f32	s16, s0
 801038e:	eef0 8a60 	vmov.f32	s17, s1
 8010392:	46c8      	mov	r8, r9
 8010394:	d05f      	beq.n	8010456 <pow+0xee>
 8010396:	4622      	mov	r2, r4
 8010398:	462b      	mov	r3, r5
 801039a:	4620      	mov	r0, r4
 801039c:	4629      	mov	r1, r5
 801039e:	f7f0 fb7d 	bl	8000a9c <__aeabi_dcmpun>
 80103a2:	4683      	mov	fp, r0
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d156      	bne.n	8010456 <pow+0xee>
 80103a8:	4632      	mov	r2, r6
 80103aa:	463b      	mov	r3, r7
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7f0 fb74 	bl	8000a9c <__aeabi_dcmpun>
 80103b4:	9001      	str	r0, [sp, #4]
 80103b6:	b1e8      	cbz	r0, 80103f4 <pow+0x8c>
 80103b8:	2200      	movs	r2, #0
 80103ba:	2300      	movs	r3, #0
 80103bc:	4620      	mov	r0, r4
 80103be:	4629      	mov	r1, r5
 80103c0:	f7f0 fb3a 	bl	8000a38 <__aeabi_dcmpeq>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d046      	beq.n	8010456 <pow+0xee>
 80103c8:	2301      	movs	r3, #1
 80103ca:	9302      	str	r3, [sp, #8]
 80103cc:	4b96      	ldr	r3, [pc, #600]	; (8010628 <pow+0x2c0>)
 80103ce:	9303      	str	r3, [sp, #12]
 80103d0:	4b96      	ldr	r3, [pc, #600]	; (801062c <pow+0x2c4>)
 80103d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80103d6:	2200      	movs	r2, #0
 80103d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103dc:	9b00      	ldr	r3, [sp, #0]
 80103de:	2b02      	cmp	r3, #2
 80103e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80103e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80103e8:	d033      	beq.n	8010452 <pow+0xea>
 80103ea:	a802      	add	r0, sp, #8
 80103ec:	f000 fefb 	bl	80111e6 <matherr>
 80103f0:	bb48      	cbnz	r0, 8010446 <pow+0xde>
 80103f2:	e05d      	b.n	80104b0 <pow+0x148>
 80103f4:	f04f 0a00 	mov.w	sl, #0
 80103f8:	f04f 0b00 	mov.w	fp, #0
 80103fc:	4652      	mov	r2, sl
 80103fe:	465b      	mov	r3, fp
 8010400:	4630      	mov	r0, r6
 8010402:	4639      	mov	r1, r7
 8010404:	f7f0 fb18 	bl	8000a38 <__aeabi_dcmpeq>
 8010408:	ec4b ab19 	vmov	d9, sl, fp
 801040c:	2800      	cmp	r0, #0
 801040e:	d054      	beq.n	80104ba <pow+0x152>
 8010410:	4652      	mov	r2, sl
 8010412:	465b      	mov	r3, fp
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7f0 fb0e 	bl	8000a38 <__aeabi_dcmpeq>
 801041c:	4680      	mov	r8, r0
 801041e:	b318      	cbz	r0, 8010468 <pow+0x100>
 8010420:	2301      	movs	r3, #1
 8010422:	9302      	str	r3, [sp, #8]
 8010424:	4b80      	ldr	r3, [pc, #512]	; (8010628 <pow+0x2c0>)
 8010426:	9303      	str	r3, [sp, #12]
 8010428:	9b01      	ldr	r3, [sp, #4]
 801042a:	930a      	str	r3, [sp, #40]	; 0x28
 801042c:	9b00      	ldr	r3, [sp, #0]
 801042e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010432:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010436:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d0d5      	beq.n	80103ea <pow+0x82>
 801043e:	4b7b      	ldr	r3, [pc, #492]	; (801062c <pow+0x2c4>)
 8010440:	2200      	movs	r2, #0
 8010442:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010448:	b11b      	cbz	r3, 8010452 <pow+0xea>
 801044a:	f7fe f97f 	bl	800e74c <__errno>
 801044e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010450:	6003      	str	r3, [r0, #0]
 8010452:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010456:	eeb0 0a48 	vmov.f32	s0, s16
 801045a:	eef0 0a68 	vmov.f32	s1, s17
 801045e:	b00d      	add	sp, #52	; 0x34
 8010460:	ecbd 8b04 	vpop	{d8-d9}
 8010464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010468:	ec45 4b10 	vmov	d0, r4, r5
 801046c:	f000 feb3 	bl	80111d6 <finite>
 8010470:	2800      	cmp	r0, #0
 8010472:	d0f0      	beq.n	8010456 <pow+0xee>
 8010474:	4652      	mov	r2, sl
 8010476:	465b      	mov	r3, fp
 8010478:	4620      	mov	r0, r4
 801047a:	4629      	mov	r1, r5
 801047c:	f7f0 fae6 	bl	8000a4c <__aeabi_dcmplt>
 8010480:	2800      	cmp	r0, #0
 8010482:	d0e8      	beq.n	8010456 <pow+0xee>
 8010484:	2301      	movs	r3, #1
 8010486:	9302      	str	r3, [sp, #8]
 8010488:	4b67      	ldr	r3, [pc, #412]	; (8010628 <pow+0x2c0>)
 801048a:	9303      	str	r3, [sp, #12]
 801048c:	f999 3000 	ldrsb.w	r3, [r9]
 8010490:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010494:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010498:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801049c:	b913      	cbnz	r3, 80104a4 <pow+0x13c>
 801049e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80104a2:	e7a2      	b.n	80103ea <pow+0x82>
 80104a4:	4962      	ldr	r1, [pc, #392]	; (8010630 <pow+0x2c8>)
 80104a6:	2000      	movs	r0, #0
 80104a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104ac:	2b02      	cmp	r3, #2
 80104ae:	d19c      	bne.n	80103ea <pow+0x82>
 80104b0:	f7fe f94c 	bl	800e74c <__errno>
 80104b4:	2321      	movs	r3, #33	; 0x21
 80104b6:	6003      	str	r3, [r0, #0]
 80104b8:	e7c5      	b.n	8010446 <pow+0xde>
 80104ba:	eeb0 0a48 	vmov.f32	s0, s16
 80104be:	eef0 0a68 	vmov.f32	s1, s17
 80104c2:	f000 fe88 	bl	80111d6 <finite>
 80104c6:	9000      	str	r0, [sp, #0]
 80104c8:	2800      	cmp	r0, #0
 80104ca:	f040 8081 	bne.w	80105d0 <pow+0x268>
 80104ce:	ec47 6b10 	vmov	d0, r6, r7
 80104d2:	f000 fe80 	bl	80111d6 <finite>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d07a      	beq.n	80105d0 <pow+0x268>
 80104da:	ec45 4b10 	vmov	d0, r4, r5
 80104de:	f000 fe7a 	bl	80111d6 <finite>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d074      	beq.n	80105d0 <pow+0x268>
 80104e6:	ec53 2b18 	vmov	r2, r3, d8
 80104ea:	ee18 0a10 	vmov	r0, s16
 80104ee:	4619      	mov	r1, r3
 80104f0:	f7f0 fad4 	bl	8000a9c <__aeabi_dcmpun>
 80104f4:	f999 9000 	ldrsb.w	r9, [r9]
 80104f8:	4b4b      	ldr	r3, [pc, #300]	; (8010628 <pow+0x2c0>)
 80104fa:	b1b0      	cbz	r0, 801052a <pow+0x1c2>
 80104fc:	2201      	movs	r2, #1
 80104fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010502:	9b00      	ldr	r3, [sp, #0]
 8010504:	930a      	str	r3, [sp, #40]	; 0x28
 8010506:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801050a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801050e:	f1b9 0f00 	cmp.w	r9, #0
 8010512:	d0c4      	beq.n	801049e <pow+0x136>
 8010514:	4652      	mov	r2, sl
 8010516:	465b      	mov	r3, fp
 8010518:	4650      	mov	r0, sl
 801051a:	4659      	mov	r1, fp
 801051c:	f7f0 f94e 	bl	80007bc <__aeabi_ddiv>
 8010520:	f1b9 0f02 	cmp.w	r9, #2
 8010524:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010528:	e7c1      	b.n	80104ae <pow+0x146>
 801052a:	2203      	movs	r2, #3
 801052c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010530:	900a      	str	r0, [sp, #40]	; 0x28
 8010532:	4629      	mov	r1, r5
 8010534:	4620      	mov	r0, r4
 8010536:	2200      	movs	r2, #0
 8010538:	4b3e      	ldr	r3, [pc, #248]	; (8010634 <pow+0x2cc>)
 801053a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801053e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010542:	f7f0 f811 	bl	8000568 <__aeabi_dmul>
 8010546:	4604      	mov	r4, r0
 8010548:	460d      	mov	r5, r1
 801054a:	f1b9 0f00 	cmp.w	r9, #0
 801054e:	d124      	bne.n	801059a <pow+0x232>
 8010550:	4b39      	ldr	r3, [pc, #228]	; (8010638 <pow+0x2d0>)
 8010552:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801055a:	4630      	mov	r0, r6
 801055c:	4652      	mov	r2, sl
 801055e:	465b      	mov	r3, fp
 8010560:	4639      	mov	r1, r7
 8010562:	f7f0 fa73 	bl	8000a4c <__aeabi_dcmplt>
 8010566:	2800      	cmp	r0, #0
 8010568:	d056      	beq.n	8010618 <pow+0x2b0>
 801056a:	ec45 4b10 	vmov	d0, r4, r5
 801056e:	f000 fe47 	bl	8011200 <rint>
 8010572:	4622      	mov	r2, r4
 8010574:	462b      	mov	r3, r5
 8010576:	ec51 0b10 	vmov	r0, r1, d0
 801057a:	f7f0 fa5d 	bl	8000a38 <__aeabi_dcmpeq>
 801057e:	b920      	cbnz	r0, 801058a <pow+0x222>
 8010580:	4b2e      	ldr	r3, [pc, #184]	; (801063c <pow+0x2d4>)
 8010582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010586:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801058a:	f998 3000 	ldrsb.w	r3, [r8]
 801058e:	2b02      	cmp	r3, #2
 8010590:	d142      	bne.n	8010618 <pow+0x2b0>
 8010592:	f7fe f8db 	bl	800e74c <__errno>
 8010596:	2322      	movs	r3, #34	; 0x22
 8010598:	e78d      	b.n	80104b6 <pow+0x14e>
 801059a:	4b29      	ldr	r3, [pc, #164]	; (8010640 <pow+0x2d8>)
 801059c:	2200      	movs	r2, #0
 801059e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80105a2:	4630      	mov	r0, r6
 80105a4:	4652      	mov	r2, sl
 80105a6:	465b      	mov	r3, fp
 80105a8:	4639      	mov	r1, r7
 80105aa:	f7f0 fa4f 	bl	8000a4c <__aeabi_dcmplt>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d0eb      	beq.n	801058a <pow+0x222>
 80105b2:	ec45 4b10 	vmov	d0, r4, r5
 80105b6:	f000 fe23 	bl	8011200 <rint>
 80105ba:	4622      	mov	r2, r4
 80105bc:	462b      	mov	r3, r5
 80105be:	ec51 0b10 	vmov	r0, r1, d0
 80105c2:	f7f0 fa39 	bl	8000a38 <__aeabi_dcmpeq>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d1df      	bne.n	801058a <pow+0x222>
 80105ca:	2200      	movs	r2, #0
 80105cc:	4b18      	ldr	r3, [pc, #96]	; (8010630 <pow+0x2c8>)
 80105ce:	e7da      	b.n	8010586 <pow+0x21e>
 80105d0:	2200      	movs	r2, #0
 80105d2:	2300      	movs	r3, #0
 80105d4:	ec51 0b18 	vmov	r0, r1, d8
 80105d8:	f7f0 fa2e 	bl	8000a38 <__aeabi_dcmpeq>
 80105dc:	2800      	cmp	r0, #0
 80105de:	f43f af3a 	beq.w	8010456 <pow+0xee>
 80105e2:	ec47 6b10 	vmov	d0, r6, r7
 80105e6:	f000 fdf6 	bl	80111d6 <finite>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	f43f af33 	beq.w	8010456 <pow+0xee>
 80105f0:	ec45 4b10 	vmov	d0, r4, r5
 80105f4:	f000 fdef 	bl	80111d6 <finite>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	f43f af2c 	beq.w	8010456 <pow+0xee>
 80105fe:	2304      	movs	r3, #4
 8010600:	9302      	str	r3, [sp, #8]
 8010602:	4b09      	ldr	r3, [pc, #36]	; (8010628 <pow+0x2c0>)
 8010604:	9303      	str	r3, [sp, #12]
 8010606:	2300      	movs	r3, #0
 8010608:	930a      	str	r3, [sp, #40]	; 0x28
 801060a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801060e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010612:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010616:	e7b8      	b.n	801058a <pow+0x222>
 8010618:	a802      	add	r0, sp, #8
 801061a:	f000 fde4 	bl	80111e6 <matherr>
 801061e:	2800      	cmp	r0, #0
 8010620:	f47f af11 	bne.w	8010446 <pow+0xde>
 8010624:	e7b5      	b.n	8010592 <pow+0x22a>
 8010626:	bf00      	nop
 8010628:	08011c57 	.word	0x08011c57
 801062c:	3ff00000 	.word	0x3ff00000
 8010630:	fff00000 	.word	0xfff00000
 8010634:	3fe00000 	.word	0x3fe00000
 8010638:	47efffff 	.word	0x47efffff
 801063c:	c7efffff 	.word	0xc7efffff
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	200001e0 	.word	0x200001e0

08010648 <__ieee754_pow>:
 8010648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064c:	b091      	sub	sp, #68	; 0x44
 801064e:	ed8d 1b00 	vstr	d1, [sp]
 8010652:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010656:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801065a:	ea58 0302 	orrs.w	r3, r8, r2
 801065e:	ec57 6b10 	vmov	r6, r7, d0
 8010662:	f000 84be 	beq.w	8010fe2 <__ieee754_pow+0x99a>
 8010666:	4b7a      	ldr	r3, [pc, #488]	; (8010850 <__ieee754_pow+0x208>)
 8010668:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801066c:	429c      	cmp	r4, r3
 801066e:	463d      	mov	r5, r7
 8010670:	ee10 aa10 	vmov	sl, s0
 8010674:	dc09      	bgt.n	801068a <__ieee754_pow+0x42>
 8010676:	d103      	bne.n	8010680 <__ieee754_pow+0x38>
 8010678:	b93e      	cbnz	r6, 801068a <__ieee754_pow+0x42>
 801067a:	45a0      	cmp	r8, r4
 801067c:	dc0d      	bgt.n	801069a <__ieee754_pow+0x52>
 801067e:	e001      	b.n	8010684 <__ieee754_pow+0x3c>
 8010680:	4598      	cmp	r8, r3
 8010682:	dc02      	bgt.n	801068a <__ieee754_pow+0x42>
 8010684:	4598      	cmp	r8, r3
 8010686:	d10e      	bne.n	80106a6 <__ieee754_pow+0x5e>
 8010688:	b16a      	cbz	r2, 80106a6 <__ieee754_pow+0x5e>
 801068a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801068e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010692:	ea54 030a 	orrs.w	r3, r4, sl
 8010696:	f000 84a4 	beq.w	8010fe2 <__ieee754_pow+0x99a>
 801069a:	486e      	ldr	r0, [pc, #440]	; (8010854 <__ieee754_pow+0x20c>)
 801069c:	b011      	add	sp, #68	; 0x44
 801069e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a2:	f000 bda5 	b.w	80111f0 <nan>
 80106a6:	2d00      	cmp	r5, #0
 80106a8:	da53      	bge.n	8010752 <__ieee754_pow+0x10a>
 80106aa:	4b6b      	ldr	r3, [pc, #428]	; (8010858 <__ieee754_pow+0x210>)
 80106ac:	4598      	cmp	r8, r3
 80106ae:	dc4d      	bgt.n	801074c <__ieee754_pow+0x104>
 80106b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80106b4:	4598      	cmp	r8, r3
 80106b6:	dd4c      	ble.n	8010752 <__ieee754_pow+0x10a>
 80106b8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80106bc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106c0:	2b14      	cmp	r3, #20
 80106c2:	dd26      	ble.n	8010712 <__ieee754_pow+0xca>
 80106c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80106c8:	fa22 f103 	lsr.w	r1, r2, r3
 80106cc:	fa01 f303 	lsl.w	r3, r1, r3
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d13e      	bne.n	8010752 <__ieee754_pow+0x10a>
 80106d4:	f001 0101 	and.w	r1, r1, #1
 80106d8:	f1c1 0b02 	rsb	fp, r1, #2
 80106dc:	2a00      	cmp	r2, #0
 80106de:	d15b      	bne.n	8010798 <__ieee754_pow+0x150>
 80106e0:	4b5b      	ldr	r3, [pc, #364]	; (8010850 <__ieee754_pow+0x208>)
 80106e2:	4598      	cmp	r8, r3
 80106e4:	d124      	bne.n	8010730 <__ieee754_pow+0xe8>
 80106e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80106ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80106ee:	ea53 030a 	orrs.w	r3, r3, sl
 80106f2:	f000 8476 	beq.w	8010fe2 <__ieee754_pow+0x99a>
 80106f6:	4b59      	ldr	r3, [pc, #356]	; (801085c <__ieee754_pow+0x214>)
 80106f8:	429c      	cmp	r4, r3
 80106fa:	dd2d      	ble.n	8010758 <__ieee754_pow+0x110>
 80106fc:	f1b9 0f00 	cmp.w	r9, #0
 8010700:	f280 8473 	bge.w	8010fea <__ieee754_pow+0x9a2>
 8010704:	2000      	movs	r0, #0
 8010706:	2100      	movs	r1, #0
 8010708:	ec41 0b10 	vmov	d0, r0, r1
 801070c:	b011      	add	sp, #68	; 0x44
 801070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010712:	2a00      	cmp	r2, #0
 8010714:	d13e      	bne.n	8010794 <__ieee754_pow+0x14c>
 8010716:	f1c3 0314 	rsb	r3, r3, #20
 801071a:	fa48 f103 	asr.w	r1, r8, r3
 801071e:	fa01 f303 	lsl.w	r3, r1, r3
 8010722:	4543      	cmp	r3, r8
 8010724:	f040 8469 	bne.w	8010ffa <__ieee754_pow+0x9b2>
 8010728:	f001 0101 	and.w	r1, r1, #1
 801072c:	f1c1 0b02 	rsb	fp, r1, #2
 8010730:	4b4b      	ldr	r3, [pc, #300]	; (8010860 <__ieee754_pow+0x218>)
 8010732:	4598      	cmp	r8, r3
 8010734:	d118      	bne.n	8010768 <__ieee754_pow+0x120>
 8010736:	f1b9 0f00 	cmp.w	r9, #0
 801073a:	f280 845a 	bge.w	8010ff2 <__ieee754_pow+0x9aa>
 801073e:	4948      	ldr	r1, [pc, #288]	; (8010860 <__ieee754_pow+0x218>)
 8010740:	4632      	mov	r2, r6
 8010742:	463b      	mov	r3, r7
 8010744:	2000      	movs	r0, #0
 8010746:	f7f0 f839 	bl	80007bc <__aeabi_ddiv>
 801074a:	e7dd      	b.n	8010708 <__ieee754_pow+0xc0>
 801074c:	f04f 0b02 	mov.w	fp, #2
 8010750:	e7c4      	b.n	80106dc <__ieee754_pow+0x94>
 8010752:	f04f 0b00 	mov.w	fp, #0
 8010756:	e7c1      	b.n	80106dc <__ieee754_pow+0x94>
 8010758:	f1b9 0f00 	cmp.w	r9, #0
 801075c:	dad2      	bge.n	8010704 <__ieee754_pow+0xbc>
 801075e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010766:	e7cf      	b.n	8010708 <__ieee754_pow+0xc0>
 8010768:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801076c:	d106      	bne.n	801077c <__ieee754_pow+0x134>
 801076e:	4632      	mov	r2, r6
 8010770:	463b      	mov	r3, r7
 8010772:	4610      	mov	r0, r2
 8010774:	4619      	mov	r1, r3
 8010776:	f7ef fef7 	bl	8000568 <__aeabi_dmul>
 801077a:	e7c5      	b.n	8010708 <__ieee754_pow+0xc0>
 801077c:	4b39      	ldr	r3, [pc, #228]	; (8010864 <__ieee754_pow+0x21c>)
 801077e:	4599      	cmp	r9, r3
 8010780:	d10a      	bne.n	8010798 <__ieee754_pow+0x150>
 8010782:	2d00      	cmp	r5, #0
 8010784:	db08      	blt.n	8010798 <__ieee754_pow+0x150>
 8010786:	ec47 6b10 	vmov	d0, r6, r7
 801078a:	b011      	add	sp, #68	; 0x44
 801078c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010790:	f000 bc68 	b.w	8011064 <__ieee754_sqrt>
 8010794:	f04f 0b00 	mov.w	fp, #0
 8010798:	ec47 6b10 	vmov	d0, r6, r7
 801079c:	f000 fd12 	bl	80111c4 <fabs>
 80107a0:	ec51 0b10 	vmov	r0, r1, d0
 80107a4:	f1ba 0f00 	cmp.w	sl, #0
 80107a8:	d127      	bne.n	80107fa <__ieee754_pow+0x1b2>
 80107aa:	b124      	cbz	r4, 80107b6 <__ieee754_pow+0x16e>
 80107ac:	4b2c      	ldr	r3, [pc, #176]	; (8010860 <__ieee754_pow+0x218>)
 80107ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d121      	bne.n	80107fa <__ieee754_pow+0x1b2>
 80107b6:	f1b9 0f00 	cmp.w	r9, #0
 80107ba:	da05      	bge.n	80107c8 <__ieee754_pow+0x180>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	2000      	movs	r0, #0
 80107c2:	4927      	ldr	r1, [pc, #156]	; (8010860 <__ieee754_pow+0x218>)
 80107c4:	f7ef fffa 	bl	80007bc <__aeabi_ddiv>
 80107c8:	2d00      	cmp	r5, #0
 80107ca:	da9d      	bge.n	8010708 <__ieee754_pow+0xc0>
 80107cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80107d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80107d4:	ea54 030b 	orrs.w	r3, r4, fp
 80107d8:	d108      	bne.n	80107ec <__ieee754_pow+0x1a4>
 80107da:	4602      	mov	r2, r0
 80107dc:	460b      	mov	r3, r1
 80107de:	4610      	mov	r0, r2
 80107e0:	4619      	mov	r1, r3
 80107e2:	f7ef fd09 	bl	80001f8 <__aeabi_dsub>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	e7ac      	b.n	8010746 <__ieee754_pow+0xfe>
 80107ec:	f1bb 0f01 	cmp.w	fp, #1
 80107f0:	d18a      	bne.n	8010708 <__ieee754_pow+0xc0>
 80107f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107f6:	4619      	mov	r1, r3
 80107f8:	e786      	b.n	8010708 <__ieee754_pow+0xc0>
 80107fa:	0fed      	lsrs	r5, r5, #31
 80107fc:	1e6b      	subs	r3, r5, #1
 80107fe:	930d      	str	r3, [sp, #52]	; 0x34
 8010800:	ea5b 0303 	orrs.w	r3, fp, r3
 8010804:	d102      	bne.n	801080c <__ieee754_pow+0x1c4>
 8010806:	4632      	mov	r2, r6
 8010808:	463b      	mov	r3, r7
 801080a:	e7e8      	b.n	80107de <__ieee754_pow+0x196>
 801080c:	4b16      	ldr	r3, [pc, #88]	; (8010868 <__ieee754_pow+0x220>)
 801080e:	4598      	cmp	r8, r3
 8010810:	f340 80fe 	ble.w	8010a10 <__ieee754_pow+0x3c8>
 8010814:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010818:	4598      	cmp	r8, r3
 801081a:	dd0a      	ble.n	8010832 <__ieee754_pow+0x1ea>
 801081c:	4b0f      	ldr	r3, [pc, #60]	; (801085c <__ieee754_pow+0x214>)
 801081e:	429c      	cmp	r4, r3
 8010820:	dc0d      	bgt.n	801083e <__ieee754_pow+0x1f6>
 8010822:	f1b9 0f00 	cmp.w	r9, #0
 8010826:	f6bf af6d 	bge.w	8010704 <__ieee754_pow+0xbc>
 801082a:	a307      	add	r3, pc, #28	; (adr r3, 8010848 <__ieee754_pow+0x200>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	e79f      	b.n	8010772 <__ieee754_pow+0x12a>
 8010832:	4b0e      	ldr	r3, [pc, #56]	; (801086c <__ieee754_pow+0x224>)
 8010834:	429c      	cmp	r4, r3
 8010836:	ddf4      	ble.n	8010822 <__ieee754_pow+0x1da>
 8010838:	4b09      	ldr	r3, [pc, #36]	; (8010860 <__ieee754_pow+0x218>)
 801083a:	429c      	cmp	r4, r3
 801083c:	dd18      	ble.n	8010870 <__ieee754_pow+0x228>
 801083e:	f1b9 0f00 	cmp.w	r9, #0
 8010842:	dcf2      	bgt.n	801082a <__ieee754_pow+0x1e2>
 8010844:	e75e      	b.n	8010704 <__ieee754_pow+0xbc>
 8010846:	bf00      	nop
 8010848:	8800759c 	.word	0x8800759c
 801084c:	7e37e43c 	.word	0x7e37e43c
 8010850:	7ff00000 	.word	0x7ff00000
 8010854:	08011b55 	.word	0x08011b55
 8010858:	433fffff 	.word	0x433fffff
 801085c:	3fefffff 	.word	0x3fefffff
 8010860:	3ff00000 	.word	0x3ff00000
 8010864:	3fe00000 	.word	0x3fe00000
 8010868:	41e00000 	.word	0x41e00000
 801086c:	3feffffe 	.word	0x3feffffe
 8010870:	2200      	movs	r2, #0
 8010872:	4b63      	ldr	r3, [pc, #396]	; (8010a00 <__ieee754_pow+0x3b8>)
 8010874:	f7ef fcc0 	bl	80001f8 <__aeabi_dsub>
 8010878:	a355      	add	r3, pc, #340	; (adr r3, 80109d0 <__ieee754_pow+0x388>)
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	4604      	mov	r4, r0
 8010880:	460d      	mov	r5, r1
 8010882:	f7ef fe71 	bl	8000568 <__aeabi_dmul>
 8010886:	a354      	add	r3, pc, #336	; (adr r3, 80109d8 <__ieee754_pow+0x390>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	4606      	mov	r6, r0
 801088e:	460f      	mov	r7, r1
 8010890:	4620      	mov	r0, r4
 8010892:	4629      	mov	r1, r5
 8010894:	f7ef fe68 	bl	8000568 <__aeabi_dmul>
 8010898:	2200      	movs	r2, #0
 801089a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801089e:	4b59      	ldr	r3, [pc, #356]	; (8010a04 <__ieee754_pow+0x3bc>)
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef fe60 	bl	8000568 <__aeabi_dmul>
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	a14c      	add	r1, pc, #304	; (adr r1, 80109e0 <__ieee754_pow+0x398>)
 80108ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108b2:	f7ef fca1 	bl	80001f8 <__aeabi_dsub>
 80108b6:	4622      	mov	r2, r4
 80108b8:	462b      	mov	r3, r5
 80108ba:	f7ef fe55 	bl	8000568 <__aeabi_dmul>
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	2000      	movs	r0, #0
 80108c4:	4950      	ldr	r1, [pc, #320]	; (8010a08 <__ieee754_pow+0x3c0>)
 80108c6:	f7ef fc97 	bl	80001f8 <__aeabi_dsub>
 80108ca:	4622      	mov	r2, r4
 80108cc:	462b      	mov	r3, r5
 80108ce:	4680      	mov	r8, r0
 80108d0:	4689      	mov	r9, r1
 80108d2:	4620      	mov	r0, r4
 80108d4:	4629      	mov	r1, r5
 80108d6:	f7ef fe47 	bl	8000568 <__aeabi_dmul>
 80108da:	4602      	mov	r2, r0
 80108dc:	460b      	mov	r3, r1
 80108de:	4640      	mov	r0, r8
 80108e0:	4649      	mov	r1, r9
 80108e2:	f7ef fe41 	bl	8000568 <__aeabi_dmul>
 80108e6:	a340      	add	r3, pc, #256	; (adr r3, 80109e8 <__ieee754_pow+0x3a0>)
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	f7ef fe3c 	bl	8000568 <__aeabi_dmul>
 80108f0:	4602      	mov	r2, r0
 80108f2:	460b      	mov	r3, r1
 80108f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108f8:	f7ef fc7e 	bl	80001f8 <__aeabi_dsub>
 80108fc:	4602      	mov	r2, r0
 80108fe:	460b      	mov	r3, r1
 8010900:	4604      	mov	r4, r0
 8010902:	460d      	mov	r5, r1
 8010904:	4630      	mov	r0, r6
 8010906:	4639      	mov	r1, r7
 8010908:	f7ef fc78 	bl	80001fc <__adddf3>
 801090c:	2000      	movs	r0, #0
 801090e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010912:	4632      	mov	r2, r6
 8010914:	463b      	mov	r3, r7
 8010916:	f7ef fc6f 	bl	80001f8 <__aeabi_dsub>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4620      	mov	r0, r4
 8010920:	4629      	mov	r1, r5
 8010922:	f7ef fc69 	bl	80001f8 <__aeabi_dsub>
 8010926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010928:	f10b 33ff 	add.w	r3, fp, #4294967295
 801092c:	4313      	orrs	r3, r2
 801092e:	4606      	mov	r6, r0
 8010930:	460f      	mov	r7, r1
 8010932:	f040 81eb 	bne.w	8010d0c <__ieee754_pow+0x6c4>
 8010936:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80109f0 <__ieee754_pow+0x3a8>
 801093a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801093e:	2400      	movs	r4, #0
 8010940:	4622      	mov	r2, r4
 8010942:	462b      	mov	r3, r5
 8010944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010948:	ed8d 7b02 	vstr	d7, [sp, #8]
 801094c:	f7ef fc54 	bl	80001f8 <__aeabi_dsub>
 8010950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010954:	f7ef fe08 	bl	8000568 <__aeabi_dmul>
 8010958:	e9dd 2300 	ldrd	r2, r3, [sp]
 801095c:	4680      	mov	r8, r0
 801095e:	4689      	mov	r9, r1
 8010960:	4630      	mov	r0, r6
 8010962:	4639      	mov	r1, r7
 8010964:	f7ef fe00 	bl	8000568 <__aeabi_dmul>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4640      	mov	r0, r8
 801096e:	4649      	mov	r1, r9
 8010970:	f7ef fc44 	bl	80001fc <__adddf3>
 8010974:	4622      	mov	r2, r4
 8010976:	462b      	mov	r3, r5
 8010978:	4680      	mov	r8, r0
 801097a:	4689      	mov	r9, r1
 801097c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010980:	f7ef fdf2 	bl	8000568 <__aeabi_dmul>
 8010984:	460b      	mov	r3, r1
 8010986:	4604      	mov	r4, r0
 8010988:	460d      	mov	r5, r1
 801098a:	4602      	mov	r2, r0
 801098c:	4649      	mov	r1, r9
 801098e:	4640      	mov	r0, r8
 8010990:	e9cd 4500 	strd	r4, r5, [sp]
 8010994:	f7ef fc32 	bl	80001fc <__adddf3>
 8010998:	4b1c      	ldr	r3, [pc, #112]	; (8010a0c <__ieee754_pow+0x3c4>)
 801099a:	4299      	cmp	r1, r3
 801099c:	4606      	mov	r6, r0
 801099e:	460f      	mov	r7, r1
 80109a0:	468b      	mov	fp, r1
 80109a2:	f340 82f7 	ble.w	8010f94 <__ieee754_pow+0x94c>
 80109a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80109aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80109ae:	4303      	orrs	r3, r0
 80109b0:	f000 81ea 	beq.w	8010d88 <__ieee754_pow+0x740>
 80109b4:	a310      	add	r3, pc, #64	; (adr r3, 80109f8 <__ieee754_pow+0x3b0>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109be:	f7ef fdd3 	bl	8000568 <__aeabi_dmul>
 80109c2:	a30d      	add	r3, pc, #52	; (adr r3, 80109f8 <__ieee754_pow+0x3b0>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	e6d5      	b.n	8010776 <__ieee754_pow+0x12e>
 80109ca:	bf00      	nop
 80109cc:	f3af 8000 	nop.w
 80109d0:	60000000 	.word	0x60000000
 80109d4:	3ff71547 	.word	0x3ff71547
 80109d8:	f85ddf44 	.word	0xf85ddf44
 80109dc:	3e54ae0b 	.word	0x3e54ae0b
 80109e0:	55555555 	.word	0x55555555
 80109e4:	3fd55555 	.word	0x3fd55555
 80109e8:	652b82fe 	.word	0x652b82fe
 80109ec:	3ff71547 	.word	0x3ff71547
 80109f0:	00000000 	.word	0x00000000
 80109f4:	bff00000 	.word	0xbff00000
 80109f8:	8800759c 	.word	0x8800759c
 80109fc:	7e37e43c 	.word	0x7e37e43c
 8010a00:	3ff00000 	.word	0x3ff00000
 8010a04:	3fd00000 	.word	0x3fd00000
 8010a08:	3fe00000 	.word	0x3fe00000
 8010a0c:	408fffff 	.word	0x408fffff
 8010a10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010a14:	f04f 0200 	mov.w	r2, #0
 8010a18:	da05      	bge.n	8010a26 <__ieee754_pow+0x3de>
 8010a1a:	4bd3      	ldr	r3, [pc, #844]	; (8010d68 <__ieee754_pow+0x720>)
 8010a1c:	f7ef fda4 	bl	8000568 <__aeabi_dmul>
 8010a20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010a24:	460c      	mov	r4, r1
 8010a26:	1523      	asrs	r3, r4, #20
 8010a28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a2c:	4413      	add	r3, r2
 8010a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a30:	4bce      	ldr	r3, [pc, #824]	; (8010d6c <__ieee754_pow+0x724>)
 8010a32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010a36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010a3a:	429c      	cmp	r4, r3
 8010a3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010a40:	dd08      	ble.n	8010a54 <__ieee754_pow+0x40c>
 8010a42:	4bcb      	ldr	r3, [pc, #812]	; (8010d70 <__ieee754_pow+0x728>)
 8010a44:	429c      	cmp	r4, r3
 8010a46:	f340 815e 	ble.w	8010d06 <__ieee754_pow+0x6be>
 8010a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010a54:	f04f 0a00 	mov.w	sl, #0
 8010a58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8010a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a60:	4bc4      	ldr	r3, [pc, #784]	; (8010d74 <__ieee754_pow+0x72c>)
 8010a62:	4413      	add	r3, r2
 8010a64:	ed93 7b00 	vldr	d7, [r3]
 8010a68:	4629      	mov	r1, r5
 8010a6a:	ec53 2b17 	vmov	r2, r3, d7
 8010a6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010a72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010a76:	f7ef fbbf 	bl	80001f8 <__aeabi_dsub>
 8010a7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010a7e:	4606      	mov	r6, r0
 8010a80:	460f      	mov	r7, r1
 8010a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a86:	f7ef fbb9 	bl	80001fc <__adddf3>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	2000      	movs	r0, #0
 8010a90:	49b9      	ldr	r1, [pc, #740]	; (8010d78 <__ieee754_pow+0x730>)
 8010a92:	f7ef fe93 	bl	80007bc <__aeabi_ddiv>
 8010a96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fd61 	bl	8000568 <__aeabi_dmul>
 8010aa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010aaa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010aae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	9302      	str	r3, [sp, #8]
 8010ab6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010aba:	106d      	asrs	r5, r5, #1
 8010abc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010ac0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010aca:	4640      	mov	r0, r8
 8010acc:	4649      	mov	r1, r9
 8010ace:	4614      	mov	r4, r2
 8010ad0:	461d      	mov	r5, r3
 8010ad2:	f7ef fd49 	bl	8000568 <__aeabi_dmul>
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	460b      	mov	r3, r1
 8010ada:	4630      	mov	r0, r6
 8010adc:	4639      	mov	r1, r7
 8010ade:	f7ef fb8b 	bl	80001f8 <__aeabi_dsub>
 8010ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	460f      	mov	r7, r1
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ef fb83 	bl	80001f8 <__aeabi_dsub>
 8010af2:	4602      	mov	r2, r0
 8010af4:	460b      	mov	r3, r1
 8010af6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010afa:	f7ef fb7d 	bl	80001f8 <__aeabi_dsub>
 8010afe:	4642      	mov	r2, r8
 8010b00:	464b      	mov	r3, r9
 8010b02:	f7ef fd31 	bl	8000568 <__aeabi_dmul>
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4630      	mov	r0, r6
 8010b0c:	4639      	mov	r1, r7
 8010b0e:	f7ef fb73 	bl	80001f8 <__aeabi_dsub>
 8010b12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010b16:	f7ef fd27 	bl	8000568 <__aeabi_dmul>
 8010b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010b22:	4610      	mov	r0, r2
 8010b24:	4619      	mov	r1, r3
 8010b26:	f7ef fd1f 	bl	8000568 <__aeabi_dmul>
 8010b2a:	a37b      	add	r3, pc, #492	; (adr r3, 8010d18 <__ieee754_pow+0x6d0>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	4604      	mov	r4, r0
 8010b32:	460d      	mov	r5, r1
 8010b34:	f7ef fd18 	bl	8000568 <__aeabi_dmul>
 8010b38:	a379      	add	r3, pc, #484	; (adr r3, 8010d20 <__ieee754_pow+0x6d8>)
 8010b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b3e:	f7ef fb5d 	bl	80001fc <__adddf3>
 8010b42:	4622      	mov	r2, r4
 8010b44:	462b      	mov	r3, r5
 8010b46:	f7ef fd0f 	bl	8000568 <__aeabi_dmul>
 8010b4a:	a377      	add	r3, pc, #476	; (adr r3, 8010d28 <__ieee754_pow+0x6e0>)
 8010b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b50:	f7ef fb54 	bl	80001fc <__adddf3>
 8010b54:	4622      	mov	r2, r4
 8010b56:	462b      	mov	r3, r5
 8010b58:	f7ef fd06 	bl	8000568 <__aeabi_dmul>
 8010b5c:	a374      	add	r3, pc, #464	; (adr r3, 8010d30 <__ieee754_pow+0x6e8>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	f7ef fb4b 	bl	80001fc <__adddf3>
 8010b66:	4622      	mov	r2, r4
 8010b68:	462b      	mov	r3, r5
 8010b6a:	f7ef fcfd 	bl	8000568 <__aeabi_dmul>
 8010b6e:	a372      	add	r3, pc, #456	; (adr r3, 8010d38 <__ieee754_pow+0x6f0>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	f7ef fb42 	bl	80001fc <__adddf3>
 8010b78:	4622      	mov	r2, r4
 8010b7a:	462b      	mov	r3, r5
 8010b7c:	f7ef fcf4 	bl	8000568 <__aeabi_dmul>
 8010b80:	a36f      	add	r3, pc, #444	; (adr r3, 8010d40 <__ieee754_pow+0x6f8>)
 8010b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b86:	f7ef fb39 	bl	80001fc <__adddf3>
 8010b8a:	4622      	mov	r2, r4
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	460f      	mov	r7, r1
 8010b90:	462b      	mov	r3, r5
 8010b92:	4620      	mov	r0, r4
 8010b94:	4629      	mov	r1, r5
 8010b96:	f7ef fce7 	bl	8000568 <__aeabi_dmul>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	f7ef fce1 	bl	8000568 <__aeabi_dmul>
 8010ba6:	4642      	mov	r2, r8
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	464b      	mov	r3, r9
 8010bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb2:	f7ef fb23 	bl	80001fc <__adddf3>
 8010bb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bba:	f7ef fcd5 	bl	8000568 <__aeabi_dmul>
 8010bbe:	4622      	mov	r2, r4
 8010bc0:	462b      	mov	r3, r5
 8010bc2:	f7ef fb1b 	bl	80001fc <__adddf3>
 8010bc6:	4642      	mov	r2, r8
 8010bc8:	4606      	mov	r6, r0
 8010bca:	460f      	mov	r7, r1
 8010bcc:	464b      	mov	r3, r9
 8010bce:	4640      	mov	r0, r8
 8010bd0:	4649      	mov	r1, r9
 8010bd2:	f7ef fcc9 	bl	8000568 <__aeabi_dmul>
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	4b68      	ldr	r3, [pc, #416]	; (8010d7c <__ieee754_pow+0x734>)
 8010bda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010bde:	f7ef fb0d 	bl	80001fc <__adddf3>
 8010be2:	4632      	mov	r2, r6
 8010be4:	463b      	mov	r3, r7
 8010be6:	f7ef fb09 	bl	80001fc <__adddf3>
 8010bea:	9802      	ldr	r0, [sp, #8]
 8010bec:	460d      	mov	r5, r1
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	f7ef fcb6 	bl	8000568 <__aeabi_dmul>
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	4680      	mov	r8, r0
 8010c00:	4689      	mov	r9, r1
 8010c02:	4b5e      	ldr	r3, [pc, #376]	; (8010d7c <__ieee754_pow+0x734>)
 8010c04:	4620      	mov	r0, r4
 8010c06:	4629      	mov	r1, r5
 8010c08:	f7ef faf6 	bl	80001f8 <__aeabi_dsub>
 8010c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010c10:	f7ef faf2 	bl	80001f8 <__aeabi_dsub>
 8010c14:	4602      	mov	r2, r0
 8010c16:	460b      	mov	r3, r1
 8010c18:	4630      	mov	r0, r6
 8010c1a:	4639      	mov	r1, r7
 8010c1c:	f7ef faec 	bl	80001f8 <__aeabi_dsub>
 8010c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c24:	f7ef fca0 	bl	8000568 <__aeabi_dmul>
 8010c28:	4622      	mov	r2, r4
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	460f      	mov	r7, r1
 8010c2e:	462b      	mov	r3, r5
 8010c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c34:	f7ef fc98 	bl	8000568 <__aeabi_dmul>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4639      	mov	r1, r7
 8010c40:	f7ef fadc 	bl	80001fc <__adddf3>
 8010c44:	4606      	mov	r6, r0
 8010c46:	460f      	mov	r7, r1
 8010c48:	4602      	mov	r2, r0
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	4640      	mov	r0, r8
 8010c4e:	4649      	mov	r1, r9
 8010c50:	f7ef fad4 	bl	80001fc <__adddf3>
 8010c54:	9802      	ldr	r0, [sp, #8]
 8010c56:	a33c      	add	r3, pc, #240	; (adr r3, 8010d48 <__ieee754_pow+0x700>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	460d      	mov	r5, r1
 8010c60:	f7ef fc82 	bl	8000568 <__aeabi_dmul>
 8010c64:	4642      	mov	r2, r8
 8010c66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c6a:	464b      	mov	r3, r9
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	4629      	mov	r1, r5
 8010c70:	f7ef fac2 	bl	80001f8 <__aeabi_dsub>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4630      	mov	r0, r6
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	f7ef fabc 	bl	80001f8 <__aeabi_dsub>
 8010c80:	a333      	add	r3, pc, #204	; (adr r3, 8010d50 <__ieee754_pow+0x708>)
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	f7ef fc6f 	bl	8000568 <__aeabi_dmul>
 8010c8a:	a333      	add	r3, pc, #204	; (adr r3, 8010d58 <__ieee754_pow+0x710>)
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	4606      	mov	r6, r0
 8010c92:	460f      	mov	r7, r1
 8010c94:	4620      	mov	r0, r4
 8010c96:	4629      	mov	r1, r5
 8010c98:	f7ef fc66 	bl	8000568 <__aeabi_dmul>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	4639      	mov	r1, r7
 8010ca4:	f7ef faaa 	bl	80001fc <__adddf3>
 8010ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010caa:	4b35      	ldr	r3, [pc, #212]	; (8010d80 <__ieee754_pow+0x738>)
 8010cac:	4413      	add	r3, r2
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	f7ef faa3 	bl	80001fc <__adddf3>
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cba:	460d      	mov	r5, r1
 8010cbc:	f7ef fbea 	bl	8000494 <__aeabi_i2d>
 8010cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cc2:	4b30      	ldr	r3, [pc, #192]	; (8010d84 <__ieee754_pow+0x73c>)
 8010cc4:	4413      	add	r3, r2
 8010cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cca:	4606      	mov	r6, r0
 8010ccc:	460f      	mov	r7, r1
 8010cce:	4622      	mov	r2, r4
 8010cd0:	462b      	mov	r3, r5
 8010cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cd6:	f7ef fa91 	bl	80001fc <__adddf3>
 8010cda:	4642      	mov	r2, r8
 8010cdc:	464b      	mov	r3, r9
 8010cde:	f7ef fa8d 	bl	80001fc <__adddf3>
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	463b      	mov	r3, r7
 8010ce6:	f7ef fa89 	bl	80001fc <__adddf3>
 8010cea:	9802      	ldr	r0, [sp, #8]
 8010cec:	4632      	mov	r2, r6
 8010cee:	463b      	mov	r3, r7
 8010cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cf4:	f7ef fa80 	bl	80001f8 <__aeabi_dsub>
 8010cf8:	4642      	mov	r2, r8
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f7ef fa7c 	bl	80001f8 <__aeabi_dsub>
 8010d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d04:	e607      	b.n	8010916 <__ieee754_pow+0x2ce>
 8010d06:	f04f 0a01 	mov.w	sl, #1
 8010d0a:	e6a5      	b.n	8010a58 <__ieee754_pow+0x410>
 8010d0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010d60 <__ieee754_pow+0x718>
 8010d10:	e613      	b.n	801093a <__ieee754_pow+0x2f2>
 8010d12:	bf00      	nop
 8010d14:	f3af 8000 	nop.w
 8010d18:	4a454eef 	.word	0x4a454eef
 8010d1c:	3fca7e28 	.word	0x3fca7e28
 8010d20:	93c9db65 	.word	0x93c9db65
 8010d24:	3fcd864a 	.word	0x3fcd864a
 8010d28:	a91d4101 	.word	0xa91d4101
 8010d2c:	3fd17460 	.word	0x3fd17460
 8010d30:	518f264d 	.word	0x518f264d
 8010d34:	3fd55555 	.word	0x3fd55555
 8010d38:	db6fabff 	.word	0xdb6fabff
 8010d3c:	3fdb6db6 	.word	0x3fdb6db6
 8010d40:	33333303 	.word	0x33333303
 8010d44:	3fe33333 	.word	0x3fe33333
 8010d48:	e0000000 	.word	0xe0000000
 8010d4c:	3feec709 	.word	0x3feec709
 8010d50:	dc3a03fd 	.word	0xdc3a03fd
 8010d54:	3feec709 	.word	0x3feec709
 8010d58:	145b01f5 	.word	0x145b01f5
 8010d5c:	be3e2fe0 	.word	0xbe3e2fe0
 8010d60:	00000000 	.word	0x00000000
 8010d64:	3ff00000 	.word	0x3ff00000
 8010d68:	43400000 	.word	0x43400000
 8010d6c:	0003988e 	.word	0x0003988e
 8010d70:	000bb679 	.word	0x000bb679
 8010d74:	08011c60 	.word	0x08011c60
 8010d78:	3ff00000 	.word	0x3ff00000
 8010d7c:	40080000 	.word	0x40080000
 8010d80:	08011c80 	.word	0x08011c80
 8010d84:	08011c70 	.word	0x08011c70
 8010d88:	a3b4      	add	r3, pc, #720	; (adr r3, 801105c <__ieee754_pow+0xa14>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	4640      	mov	r0, r8
 8010d90:	4649      	mov	r1, r9
 8010d92:	f7ef fa33 	bl	80001fc <__adddf3>
 8010d96:	4622      	mov	r2, r4
 8010d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d9c:	462b      	mov	r3, r5
 8010d9e:	4630      	mov	r0, r6
 8010da0:	4639      	mov	r1, r7
 8010da2:	f7ef fa29 	bl	80001f8 <__aeabi_dsub>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dae:	f7ef fe6b 	bl	8000a88 <__aeabi_dcmpgt>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f47f adfe 	bne.w	80109b4 <__ieee754_pow+0x36c>
 8010db8:	4aa3      	ldr	r2, [pc, #652]	; (8011048 <__ieee754_pow+0xa00>)
 8010dba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	f340 810a 	ble.w	8010fd8 <__ieee754_pow+0x990>
 8010dc4:	151b      	asrs	r3, r3, #20
 8010dc6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010dca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010dce:	fa4a f303 	asr.w	r3, sl, r3
 8010dd2:	445b      	add	r3, fp
 8010dd4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010dd8:	4e9c      	ldr	r6, [pc, #624]	; (801104c <__ieee754_pow+0xa04>)
 8010dda:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010dde:	4116      	asrs	r6, r2
 8010de0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010de4:	2000      	movs	r0, #0
 8010de6:	ea23 0106 	bic.w	r1, r3, r6
 8010dea:	f1c2 0214 	rsb	r2, r2, #20
 8010dee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010df2:	fa4a fa02 	asr.w	sl, sl, r2
 8010df6:	f1bb 0f00 	cmp.w	fp, #0
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	bfb8      	it	lt
 8010e04:	f1ca 0a00 	rsblt	sl, sl, #0
 8010e08:	f7ef f9f6 	bl	80001f8 <__aeabi_dsub>
 8010e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8010e10:	4642      	mov	r2, r8
 8010e12:	464b      	mov	r3, r9
 8010e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e18:	f7ef f9f0 	bl	80001fc <__adddf3>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	a378      	add	r3, pc, #480	; (adr r3, 8011000 <__ieee754_pow+0x9b8>)
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	4604      	mov	r4, r0
 8010e26:	460d      	mov	r5, r1
 8010e28:	f7ef fb9e 	bl	8000568 <__aeabi_dmul>
 8010e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e30:	4606      	mov	r6, r0
 8010e32:	460f      	mov	r7, r1
 8010e34:	4620      	mov	r0, r4
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ef f9de 	bl	80001f8 <__aeabi_dsub>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	4640      	mov	r0, r8
 8010e42:	4649      	mov	r1, r9
 8010e44:	f7ef f9d8 	bl	80001f8 <__aeabi_dsub>
 8010e48:	a36f      	add	r3, pc, #444	; (adr r3, 8011008 <__ieee754_pow+0x9c0>)
 8010e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4e:	f7ef fb8b 	bl	8000568 <__aeabi_dmul>
 8010e52:	a36f      	add	r3, pc, #444	; (adr r3, 8011010 <__ieee754_pow+0x9c8>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	4680      	mov	r8, r0
 8010e5a:	4689      	mov	r9, r1
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	4629      	mov	r1, r5
 8010e60:	f7ef fb82 	bl	8000568 <__aeabi_dmul>
 8010e64:	4602      	mov	r2, r0
 8010e66:	460b      	mov	r3, r1
 8010e68:	4640      	mov	r0, r8
 8010e6a:	4649      	mov	r1, r9
 8010e6c:	f7ef f9c6 	bl	80001fc <__adddf3>
 8010e70:	4604      	mov	r4, r0
 8010e72:	460d      	mov	r5, r1
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	4630      	mov	r0, r6
 8010e7a:	4639      	mov	r1, r7
 8010e7c:	f7ef f9be 	bl	80001fc <__adddf3>
 8010e80:	4632      	mov	r2, r6
 8010e82:	463b      	mov	r3, r7
 8010e84:	4680      	mov	r8, r0
 8010e86:	4689      	mov	r9, r1
 8010e88:	f7ef f9b6 	bl	80001f8 <__aeabi_dsub>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	460b      	mov	r3, r1
 8010e90:	4620      	mov	r0, r4
 8010e92:	4629      	mov	r1, r5
 8010e94:	f7ef f9b0 	bl	80001f8 <__aeabi_dsub>
 8010e98:	4642      	mov	r2, r8
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	464b      	mov	r3, r9
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	f7ef fb60 	bl	8000568 <__aeabi_dmul>
 8010ea8:	a35b      	add	r3, pc, #364	; (adr r3, 8011018 <__ieee754_pow+0x9d0>)
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	4604      	mov	r4, r0
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	f7ef fb59 	bl	8000568 <__aeabi_dmul>
 8010eb6:	a35a      	add	r3, pc, #360	; (adr r3, 8011020 <__ieee754_pow+0x9d8>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef f99c 	bl	80001f8 <__aeabi_dsub>
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	f7ef fb50 	bl	8000568 <__aeabi_dmul>
 8010ec8:	a357      	add	r3, pc, #348	; (adr r3, 8011028 <__ieee754_pow+0x9e0>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef f995 	bl	80001fc <__adddf3>
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	f7ef fb47 	bl	8000568 <__aeabi_dmul>
 8010eda:	a355      	add	r3, pc, #340	; (adr r3, 8011030 <__ieee754_pow+0x9e8>)
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	f7ef f98a 	bl	80001f8 <__aeabi_dsub>
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	f7ef fb3e 	bl	8000568 <__aeabi_dmul>
 8010eec:	a352      	add	r3, pc, #328	; (adr r3, 8011038 <__ieee754_pow+0x9f0>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	f7ef f983 	bl	80001fc <__adddf3>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	462b      	mov	r3, r5
 8010efa:	f7ef fb35 	bl	8000568 <__aeabi_dmul>
 8010efe:	4602      	mov	r2, r0
 8010f00:	460b      	mov	r3, r1
 8010f02:	4640      	mov	r0, r8
 8010f04:	4649      	mov	r1, r9
 8010f06:	f7ef f977 	bl	80001f8 <__aeabi_dsub>
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	460d      	mov	r5, r1
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4640      	mov	r0, r8
 8010f14:	4649      	mov	r1, r9
 8010f16:	f7ef fb27 	bl	8000568 <__aeabi_dmul>
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8010f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010f24:	4620      	mov	r0, r4
 8010f26:	4629      	mov	r1, r5
 8010f28:	f7ef f966 	bl	80001f8 <__aeabi_dsub>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f34:	f7ef fc42 	bl	80007bc <__aeabi_ddiv>
 8010f38:	4632      	mov	r2, r6
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	463b      	mov	r3, r7
 8010f40:	4640      	mov	r0, r8
 8010f42:	4649      	mov	r1, r9
 8010f44:	f7ef fb10 	bl	8000568 <__aeabi_dmul>
 8010f48:	4632      	mov	r2, r6
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	f7ef f956 	bl	80001fc <__adddf3>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4620      	mov	r0, r4
 8010f56:	4629      	mov	r1, r5
 8010f58:	f7ef f94e 	bl	80001f8 <__aeabi_dsub>
 8010f5c:	4642      	mov	r2, r8
 8010f5e:	464b      	mov	r3, r9
 8010f60:	f7ef f94a 	bl	80001f8 <__aeabi_dsub>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	2000      	movs	r0, #0
 8010f6a:	4939      	ldr	r1, [pc, #228]	; (8011050 <__ieee754_pow+0xa08>)
 8010f6c:	f7ef f944 	bl	80001f8 <__aeabi_dsub>
 8010f70:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010f74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010f78:	4602      	mov	r2, r0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	da2f      	bge.n	8010fde <__ieee754_pow+0x996>
 8010f7e:	4650      	mov	r0, sl
 8010f80:	ec43 2b10 	vmov	d0, r2, r3
 8010f84:	f000 f9c0 	bl	8011308 <scalbn>
 8010f88:	ec51 0b10 	vmov	r0, r1, d0
 8010f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f90:	f7ff bbf1 	b.w	8010776 <__ieee754_pow+0x12e>
 8010f94:	4b2f      	ldr	r3, [pc, #188]	; (8011054 <__ieee754_pow+0xa0c>)
 8010f96:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010f9a:	429e      	cmp	r6, r3
 8010f9c:	f77f af0c 	ble.w	8010db8 <__ieee754_pow+0x770>
 8010fa0:	4b2d      	ldr	r3, [pc, #180]	; (8011058 <__ieee754_pow+0xa10>)
 8010fa2:	440b      	add	r3, r1
 8010fa4:	4303      	orrs	r3, r0
 8010fa6:	d00b      	beq.n	8010fc0 <__ieee754_pow+0x978>
 8010fa8:	a325      	add	r3, pc, #148	; (adr r3, 8011040 <__ieee754_pow+0x9f8>)
 8010faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fb2:	f7ef fad9 	bl	8000568 <__aeabi_dmul>
 8010fb6:	a322      	add	r3, pc, #136	; (adr r3, 8011040 <__ieee754_pow+0x9f8>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ff bbdb 	b.w	8010776 <__ieee754_pow+0x12e>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	f7ef f918 	bl	80001f8 <__aeabi_dsub>
 8010fc8:	4642      	mov	r2, r8
 8010fca:	464b      	mov	r3, r9
 8010fcc:	f7ef fd52 	bl	8000a74 <__aeabi_dcmpge>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	f43f aef1 	beq.w	8010db8 <__ieee754_pow+0x770>
 8010fd6:	e7e7      	b.n	8010fa8 <__ieee754_pow+0x960>
 8010fd8:	f04f 0a00 	mov.w	sl, #0
 8010fdc:	e718      	b.n	8010e10 <__ieee754_pow+0x7c8>
 8010fde:	4621      	mov	r1, r4
 8010fe0:	e7d4      	b.n	8010f8c <__ieee754_pow+0x944>
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	491a      	ldr	r1, [pc, #104]	; (8011050 <__ieee754_pow+0xa08>)
 8010fe6:	f7ff bb8f 	b.w	8010708 <__ieee754_pow+0xc0>
 8010fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fee:	f7ff bb8b 	b.w	8010708 <__ieee754_pow+0xc0>
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	f7ff bb87 	b.w	8010708 <__ieee754_pow+0xc0>
 8010ffa:	4693      	mov	fp, r2
 8010ffc:	f7ff bb98 	b.w	8010730 <__ieee754_pow+0xe8>
 8011000:	00000000 	.word	0x00000000
 8011004:	3fe62e43 	.word	0x3fe62e43
 8011008:	fefa39ef 	.word	0xfefa39ef
 801100c:	3fe62e42 	.word	0x3fe62e42
 8011010:	0ca86c39 	.word	0x0ca86c39
 8011014:	be205c61 	.word	0xbe205c61
 8011018:	72bea4d0 	.word	0x72bea4d0
 801101c:	3e663769 	.word	0x3e663769
 8011020:	c5d26bf1 	.word	0xc5d26bf1
 8011024:	3ebbbd41 	.word	0x3ebbbd41
 8011028:	af25de2c 	.word	0xaf25de2c
 801102c:	3f11566a 	.word	0x3f11566a
 8011030:	16bebd93 	.word	0x16bebd93
 8011034:	3f66c16c 	.word	0x3f66c16c
 8011038:	5555553e 	.word	0x5555553e
 801103c:	3fc55555 	.word	0x3fc55555
 8011040:	c2f8f359 	.word	0xc2f8f359
 8011044:	01a56e1f 	.word	0x01a56e1f
 8011048:	3fe00000 	.word	0x3fe00000
 801104c:	000fffff 	.word	0x000fffff
 8011050:	3ff00000 	.word	0x3ff00000
 8011054:	4090cbff 	.word	0x4090cbff
 8011058:	3f6f3400 	.word	0x3f6f3400
 801105c:	652b82fe 	.word	0x652b82fe
 8011060:	3c971547 	.word	0x3c971547

08011064 <__ieee754_sqrt>:
 8011064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011068:	4955      	ldr	r1, [pc, #340]	; (80111c0 <__ieee754_sqrt+0x15c>)
 801106a:	ec55 4b10 	vmov	r4, r5, d0
 801106e:	43a9      	bics	r1, r5
 8011070:	462b      	mov	r3, r5
 8011072:	462a      	mov	r2, r5
 8011074:	d112      	bne.n	801109c <__ieee754_sqrt+0x38>
 8011076:	ee10 2a10 	vmov	r2, s0
 801107a:	ee10 0a10 	vmov	r0, s0
 801107e:	4629      	mov	r1, r5
 8011080:	f7ef fa72 	bl	8000568 <__aeabi_dmul>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4620      	mov	r0, r4
 801108a:	4629      	mov	r1, r5
 801108c:	f7ef f8b6 	bl	80001fc <__adddf3>
 8011090:	4604      	mov	r4, r0
 8011092:	460d      	mov	r5, r1
 8011094:	ec45 4b10 	vmov	d0, r4, r5
 8011098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109c:	2d00      	cmp	r5, #0
 801109e:	ee10 0a10 	vmov	r0, s0
 80110a2:	4621      	mov	r1, r4
 80110a4:	dc0f      	bgt.n	80110c6 <__ieee754_sqrt+0x62>
 80110a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110aa:	4330      	orrs	r0, r6
 80110ac:	d0f2      	beq.n	8011094 <__ieee754_sqrt+0x30>
 80110ae:	b155      	cbz	r5, 80110c6 <__ieee754_sqrt+0x62>
 80110b0:	ee10 2a10 	vmov	r2, s0
 80110b4:	4620      	mov	r0, r4
 80110b6:	4629      	mov	r1, r5
 80110b8:	f7ef f89e 	bl	80001f8 <__aeabi_dsub>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	f7ef fb7c 	bl	80007bc <__aeabi_ddiv>
 80110c4:	e7e4      	b.n	8011090 <__ieee754_sqrt+0x2c>
 80110c6:	151b      	asrs	r3, r3, #20
 80110c8:	d073      	beq.n	80111b2 <__ieee754_sqrt+0x14e>
 80110ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80110ce:	07dd      	lsls	r5, r3, #31
 80110d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80110d4:	bf48      	it	mi
 80110d6:	0fc8      	lsrmi	r0, r1, #31
 80110d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80110dc:	bf44      	itt	mi
 80110de:	0049      	lslmi	r1, r1, #1
 80110e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80110e4:	2500      	movs	r5, #0
 80110e6:	1058      	asrs	r0, r3, #1
 80110e8:	0fcb      	lsrs	r3, r1, #31
 80110ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80110ee:	0049      	lsls	r1, r1, #1
 80110f0:	2316      	movs	r3, #22
 80110f2:	462c      	mov	r4, r5
 80110f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80110f8:	19a7      	adds	r7, r4, r6
 80110fa:	4297      	cmp	r7, r2
 80110fc:	bfde      	ittt	le
 80110fe:	19bc      	addle	r4, r7, r6
 8011100:	1bd2      	suble	r2, r2, r7
 8011102:	19ad      	addle	r5, r5, r6
 8011104:	0fcf      	lsrs	r7, r1, #31
 8011106:	3b01      	subs	r3, #1
 8011108:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801110c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011110:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011114:	d1f0      	bne.n	80110f8 <__ieee754_sqrt+0x94>
 8011116:	f04f 0c20 	mov.w	ip, #32
 801111a:	469e      	mov	lr, r3
 801111c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011120:	42a2      	cmp	r2, r4
 8011122:	eb06 070e 	add.w	r7, r6, lr
 8011126:	dc02      	bgt.n	801112e <__ieee754_sqrt+0xca>
 8011128:	d112      	bne.n	8011150 <__ieee754_sqrt+0xec>
 801112a:	428f      	cmp	r7, r1
 801112c:	d810      	bhi.n	8011150 <__ieee754_sqrt+0xec>
 801112e:	2f00      	cmp	r7, #0
 8011130:	eb07 0e06 	add.w	lr, r7, r6
 8011134:	da42      	bge.n	80111bc <__ieee754_sqrt+0x158>
 8011136:	f1be 0f00 	cmp.w	lr, #0
 801113a:	db3f      	blt.n	80111bc <__ieee754_sqrt+0x158>
 801113c:	f104 0801 	add.w	r8, r4, #1
 8011140:	1b12      	subs	r2, r2, r4
 8011142:	428f      	cmp	r7, r1
 8011144:	bf88      	it	hi
 8011146:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801114a:	1bc9      	subs	r1, r1, r7
 801114c:	4433      	add	r3, r6
 801114e:	4644      	mov	r4, r8
 8011150:	0052      	lsls	r2, r2, #1
 8011152:	f1bc 0c01 	subs.w	ip, ip, #1
 8011156:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801115a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801115e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011162:	d1dd      	bne.n	8011120 <__ieee754_sqrt+0xbc>
 8011164:	430a      	orrs	r2, r1
 8011166:	d006      	beq.n	8011176 <__ieee754_sqrt+0x112>
 8011168:	1c5c      	adds	r4, r3, #1
 801116a:	bf13      	iteet	ne
 801116c:	3301      	addne	r3, #1
 801116e:	3501      	addeq	r5, #1
 8011170:	4663      	moveq	r3, ip
 8011172:	f023 0301 	bicne.w	r3, r3, #1
 8011176:	106a      	asrs	r2, r5, #1
 8011178:	085b      	lsrs	r3, r3, #1
 801117a:	07e9      	lsls	r1, r5, #31
 801117c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011180:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011184:	bf48      	it	mi
 8011186:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801118a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801118e:	461c      	mov	r4, r3
 8011190:	e780      	b.n	8011094 <__ieee754_sqrt+0x30>
 8011192:	0aca      	lsrs	r2, r1, #11
 8011194:	3815      	subs	r0, #21
 8011196:	0549      	lsls	r1, r1, #21
 8011198:	2a00      	cmp	r2, #0
 801119a:	d0fa      	beq.n	8011192 <__ieee754_sqrt+0x12e>
 801119c:	02d6      	lsls	r6, r2, #11
 801119e:	d50a      	bpl.n	80111b6 <__ieee754_sqrt+0x152>
 80111a0:	f1c3 0420 	rsb	r4, r3, #32
 80111a4:	fa21 f404 	lsr.w	r4, r1, r4
 80111a8:	1e5d      	subs	r5, r3, #1
 80111aa:	4099      	lsls	r1, r3
 80111ac:	4322      	orrs	r2, r4
 80111ae:	1b43      	subs	r3, r0, r5
 80111b0:	e78b      	b.n	80110ca <__ieee754_sqrt+0x66>
 80111b2:	4618      	mov	r0, r3
 80111b4:	e7f0      	b.n	8011198 <__ieee754_sqrt+0x134>
 80111b6:	0052      	lsls	r2, r2, #1
 80111b8:	3301      	adds	r3, #1
 80111ba:	e7ef      	b.n	801119c <__ieee754_sqrt+0x138>
 80111bc:	46a0      	mov	r8, r4
 80111be:	e7bf      	b.n	8011140 <__ieee754_sqrt+0xdc>
 80111c0:	7ff00000 	.word	0x7ff00000

080111c4 <fabs>:
 80111c4:	ec51 0b10 	vmov	r0, r1, d0
 80111c8:	ee10 2a10 	vmov	r2, s0
 80111cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111d0:	ec43 2b10 	vmov	d0, r2, r3
 80111d4:	4770      	bx	lr

080111d6 <finite>:
 80111d6:	ee10 3a90 	vmov	r3, s1
 80111da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80111de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80111e2:	0fc0      	lsrs	r0, r0, #31
 80111e4:	4770      	bx	lr

080111e6 <matherr>:
 80111e6:	2000      	movs	r0, #0
 80111e8:	4770      	bx	lr
 80111ea:	0000      	movs	r0, r0
 80111ec:	0000      	movs	r0, r0
	...

080111f0 <nan>:
 80111f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111f8 <nan+0x8>
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	00000000 	.word	0x00000000
 80111fc:	7ff80000 	.word	0x7ff80000

08011200 <rint>:
 8011200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011202:	ec51 0b10 	vmov	r0, r1, d0
 8011206:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801120a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801120e:	2e13      	cmp	r6, #19
 8011210:	460b      	mov	r3, r1
 8011212:	ee10 4a10 	vmov	r4, s0
 8011216:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801121a:	dc56      	bgt.n	80112ca <rint+0xca>
 801121c:	2e00      	cmp	r6, #0
 801121e:	da2b      	bge.n	8011278 <rint+0x78>
 8011220:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011224:	4302      	orrs	r2, r0
 8011226:	d023      	beq.n	8011270 <rint+0x70>
 8011228:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801122c:	4302      	orrs	r2, r0
 801122e:	4254      	negs	r4, r2
 8011230:	4314      	orrs	r4, r2
 8011232:	0c4b      	lsrs	r3, r1, #17
 8011234:	0b24      	lsrs	r4, r4, #12
 8011236:	045b      	lsls	r3, r3, #17
 8011238:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801123c:	ea44 0103 	orr.w	r1, r4, r3
 8011240:	460b      	mov	r3, r1
 8011242:	492f      	ldr	r1, [pc, #188]	; (8011300 <rint+0x100>)
 8011244:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011248:	e9d1 6700 	ldrd	r6, r7, [r1]
 801124c:	4602      	mov	r2, r0
 801124e:	4639      	mov	r1, r7
 8011250:	4630      	mov	r0, r6
 8011252:	f7ee ffd3 	bl	80001fc <__adddf3>
 8011256:	e9cd 0100 	strd	r0, r1, [sp]
 801125a:	463b      	mov	r3, r7
 801125c:	4632      	mov	r2, r6
 801125e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011262:	f7ee ffc9 	bl	80001f8 <__aeabi_dsub>
 8011266:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801126a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801126e:	4639      	mov	r1, r7
 8011270:	ec41 0b10 	vmov	d0, r0, r1
 8011274:	b003      	add	sp, #12
 8011276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011278:	4a22      	ldr	r2, [pc, #136]	; (8011304 <rint+0x104>)
 801127a:	4132      	asrs	r2, r6
 801127c:	ea01 0702 	and.w	r7, r1, r2
 8011280:	4307      	orrs	r7, r0
 8011282:	d0f5      	beq.n	8011270 <rint+0x70>
 8011284:	0852      	lsrs	r2, r2, #1
 8011286:	4011      	ands	r1, r2
 8011288:	430c      	orrs	r4, r1
 801128a:	d00b      	beq.n	80112a4 <rint+0xa4>
 801128c:	ea23 0202 	bic.w	r2, r3, r2
 8011290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011294:	2e13      	cmp	r6, #19
 8011296:	fa43 f306 	asr.w	r3, r3, r6
 801129a:	bf0c      	ite	eq
 801129c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80112a0:	2400      	movne	r4, #0
 80112a2:	4313      	orrs	r3, r2
 80112a4:	4916      	ldr	r1, [pc, #88]	; (8011300 <rint+0x100>)
 80112a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80112aa:	4622      	mov	r2, r4
 80112ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80112b0:	4620      	mov	r0, r4
 80112b2:	4629      	mov	r1, r5
 80112b4:	f7ee ffa2 	bl	80001fc <__adddf3>
 80112b8:	e9cd 0100 	strd	r0, r1, [sp]
 80112bc:	4622      	mov	r2, r4
 80112be:	462b      	mov	r3, r5
 80112c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112c4:	f7ee ff98 	bl	80001f8 <__aeabi_dsub>
 80112c8:	e7d2      	b.n	8011270 <rint+0x70>
 80112ca:	2e33      	cmp	r6, #51	; 0x33
 80112cc:	dd07      	ble.n	80112de <rint+0xde>
 80112ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80112d2:	d1cd      	bne.n	8011270 <rint+0x70>
 80112d4:	ee10 2a10 	vmov	r2, s0
 80112d8:	f7ee ff90 	bl	80001fc <__adddf3>
 80112dc:	e7c8      	b.n	8011270 <rint+0x70>
 80112de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80112e2:	f04f 32ff 	mov.w	r2, #4294967295
 80112e6:	40f2      	lsrs	r2, r6
 80112e8:	4210      	tst	r0, r2
 80112ea:	d0c1      	beq.n	8011270 <rint+0x70>
 80112ec:	0852      	lsrs	r2, r2, #1
 80112ee:	4210      	tst	r0, r2
 80112f0:	bf1f      	itttt	ne
 80112f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80112f6:	ea20 0202 	bicne.w	r2, r0, r2
 80112fa:	4134      	asrne	r4, r6
 80112fc:	4314      	orrne	r4, r2
 80112fe:	e7d1      	b.n	80112a4 <rint+0xa4>
 8011300:	08011c90 	.word	0x08011c90
 8011304:	000fffff 	.word	0x000fffff

08011308 <scalbn>:
 8011308:	b570      	push	{r4, r5, r6, lr}
 801130a:	ec55 4b10 	vmov	r4, r5, d0
 801130e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011312:	4606      	mov	r6, r0
 8011314:	462b      	mov	r3, r5
 8011316:	b9aa      	cbnz	r2, 8011344 <scalbn+0x3c>
 8011318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801131c:	4323      	orrs	r3, r4
 801131e:	d03b      	beq.n	8011398 <scalbn+0x90>
 8011320:	4b31      	ldr	r3, [pc, #196]	; (80113e8 <scalbn+0xe0>)
 8011322:	4629      	mov	r1, r5
 8011324:	2200      	movs	r2, #0
 8011326:	ee10 0a10 	vmov	r0, s0
 801132a:	f7ef f91d 	bl	8000568 <__aeabi_dmul>
 801132e:	4b2f      	ldr	r3, [pc, #188]	; (80113ec <scalbn+0xe4>)
 8011330:	429e      	cmp	r6, r3
 8011332:	4604      	mov	r4, r0
 8011334:	460d      	mov	r5, r1
 8011336:	da12      	bge.n	801135e <scalbn+0x56>
 8011338:	a327      	add	r3, pc, #156	; (adr r3, 80113d8 <scalbn+0xd0>)
 801133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133e:	f7ef f913 	bl	8000568 <__aeabi_dmul>
 8011342:	e009      	b.n	8011358 <scalbn+0x50>
 8011344:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011348:	428a      	cmp	r2, r1
 801134a:	d10c      	bne.n	8011366 <scalbn+0x5e>
 801134c:	ee10 2a10 	vmov	r2, s0
 8011350:	4620      	mov	r0, r4
 8011352:	4629      	mov	r1, r5
 8011354:	f7ee ff52 	bl	80001fc <__adddf3>
 8011358:	4604      	mov	r4, r0
 801135a:	460d      	mov	r5, r1
 801135c:	e01c      	b.n	8011398 <scalbn+0x90>
 801135e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011362:	460b      	mov	r3, r1
 8011364:	3a36      	subs	r2, #54	; 0x36
 8011366:	4432      	add	r2, r6
 8011368:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801136c:	428a      	cmp	r2, r1
 801136e:	dd0b      	ble.n	8011388 <scalbn+0x80>
 8011370:	ec45 4b11 	vmov	d1, r4, r5
 8011374:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80113e0 <scalbn+0xd8>
 8011378:	f000 f83c 	bl	80113f4 <copysign>
 801137c:	a318      	add	r3, pc, #96	; (adr r3, 80113e0 <scalbn+0xd8>)
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	ec51 0b10 	vmov	r0, r1, d0
 8011386:	e7da      	b.n	801133e <scalbn+0x36>
 8011388:	2a00      	cmp	r2, #0
 801138a:	dd08      	ble.n	801139e <scalbn+0x96>
 801138c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011398:	ec45 4b10 	vmov	d0, r4, r5
 801139c:	bd70      	pop	{r4, r5, r6, pc}
 801139e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80113a2:	da0d      	bge.n	80113c0 <scalbn+0xb8>
 80113a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80113a8:	429e      	cmp	r6, r3
 80113aa:	ec45 4b11 	vmov	d1, r4, r5
 80113ae:	dce1      	bgt.n	8011374 <scalbn+0x6c>
 80113b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80113d8 <scalbn+0xd0>
 80113b4:	f000 f81e 	bl	80113f4 <copysign>
 80113b8:	a307      	add	r3, pc, #28	; (adr r3, 80113d8 <scalbn+0xd0>)
 80113ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113be:	e7e0      	b.n	8011382 <scalbn+0x7a>
 80113c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113c4:	3236      	adds	r2, #54	; 0x36
 80113c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80113ce:	4620      	mov	r0, r4
 80113d0:	4629      	mov	r1, r5
 80113d2:	2200      	movs	r2, #0
 80113d4:	4b06      	ldr	r3, [pc, #24]	; (80113f0 <scalbn+0xe8>)
 80113d6:	e7b2      	b.n	801133e <scalbn+0x36>
 80113d8:	c2f8f359 	.word	0xc2f8f359
 80113dc:	01a56e1f 	.word	0x01a56e1f
 80113e0:	8800759c 	.word	0x8800759c
 80113e4:	7e37e43c 	.word	0x7e37e43c
 80113e8:	43500000 	.word	0x43500000
 80113ec:	ffff3cb0 	.word	0xffff3cb0
 80113f0:	3c900000 	.word	0x3c900000

080113f4 <copysign>:
 80113f4:	ec51 0b10 	vmov	r0, r1, d0
 80113f8:	ee11 0a90 	vmov	r0, s3
 80113fc:	ee10 2a10 	vmov	r2, s0
 8011400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011408:	ea41 0300 	orr.w	r3, r1, r0
 801140c:	ec43 2b10 	vmov	d0, r2, r3
 8011410:	4770      	bx	lr
	...

08011414 <_init>:
 8011414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011416:	bf00      	nop
 8011418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801141a:	bc08      	pop	{r3}
 801141c:	469e      	mov	lr, r3
 801141e:	4770      	bx	lr

08011420 <_fini>:
 8011420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011422:	bf00      	nop
 8011424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011426:	bc08      	pop	{r3}
 8011428:	469e      	mov	lr, r3
 801142a:	4770      	bx	lr
