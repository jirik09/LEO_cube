
F303RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08011878  08011878  00021878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012100  08012100  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08012100  08012100  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012100  08012100  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012100  08012100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012104  08012104  00022104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012108  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d250  200001e8  080122ec  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  2000d438  080122ec  0003d438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f57c  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008eb8  00000000  00000000  0007f790  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018afa  00000000  00000000  00088648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c58  00000000  00000000  000a1148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000045b8  00000000  00000000  000a2da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ec6  00000000  00000000  000a7358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009ea1  00000000  00000000  000bf21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c90bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a8  00000000  00000000  000c913c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801185c 	.word	0x0801185c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0801185c 	.word	0x0801185c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b082      	sub	sp, #8
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	2105      	movs	r1, #5
 8000c00:	f001 fb86 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c04:	2803      	cmp	r0, #3
 8000c06:	d802      	bhi.n	8000c0e <parseCounterCmd+0x16>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c08:	48b3      	ldr	r0, [pc, #716]	; (8000ed8 <parseCounterCmd+0x2e0>)
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	9b00      	ldr	r3, [sp, #0]
	switch(cmdIn){
 8000c10:	4ab2      	ldr	r2, [pc, #712]	; (8000edc <parseCounterCmd+0x2e4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f000 8101 	beq.w	8000e1a <parseCounterCmd+0x222>
 8000c18:	d824      	bhi.n	8000c64 <parseCounterCmd+0x6c>
 8000c1a:	4ab1      	ldr	r2, [pc, #708]	; (8000ee0 <parseCounterCmd+0x2e8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d061      	beq.n	8000ce4 <parseCounterCmd+0xec>
 8000c20:	d872      	bhi.n	8000d08 <parseCounterCmd+0x110>
 8000c22:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f000 810b 	beq.w	8000e42 <parseCounterCmd+0x24a>
 8000c2c:	4aad      	ldr	r2, [pc, #692]	; (8000ee4 <parseCounterCmd+0x2ec>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d03a      	beq.n	8000ca8 <parseCounterCmd+0xb0>
 8000c32:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d1e6      	bne.n	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	f001 fb67 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c42:	2803      	cmp	r0, #3
 8000c44:	d937      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000c46:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc1(cmdIn)){
 8000c48:	4ba7      	ldr	r3, [pc, #668]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f240 811b 	bls.w	8000e88 <parseCounterCmd+0x290>
 8000c52:	4ba6      	ldr	r3, [pc, #664]	; (8000eec <parseCounterCmd+0x2f4>)
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 81ec 	bne.w	8001032 <parseCounterCmd+0x43a>
				counterSetIc1Prescaler(4);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f002 fb84 	bl	8003368 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c60:	489d      	ldr	r0, [pc, #628]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c62:	e7d2      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000c64:	4aa2      	ldr	r2, [pc, #648]	; (8000ef0 <parseCounterCmd+0x2f8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d028      	beq.n	8000cbc <parseCounterCmd+0xc4>
 8000c6a:	d87b      	bhi.n	8000d64 <parseCounterCmd+0x16c>
 8000c6c:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8000c70:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8000c74:	3af1      	subs	r2, #241	; 0xf1
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f000 80bb 	beq.w	8000df2 <parseCounterCmd+0x1fa>
 8000c7c:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
 8000c80:	f602 22ff 	addw	r2, r2, #2815	; 0xaff
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00b      	beq.n	8000ca0 <parseCounterCmd+0xa8>
 8000c88:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 8000c8c:	f5a2 3203 	sub.w	r2, r2, #134144	; 0x20c00
 8000c90:	f2a2 320f 	subw	r2, r2, #783	; 0x30f
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d1b7      	bne.n	8000c08 <parseCounterCmd+0x10>
		counterDeinit();
 8000c98:	f002 fae8 	bl	800326c <counterDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c9c:	488e      	ldr	r0, [pc, #568]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c9e:	e7b4      	b.n	8000c0a <parseCounterCmd+0x12>
		counterSendStop();
 8000ca0:	f002 fad2 	bl	8003248 <counterSendStop>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ca4:	488c      	ldr	r0, [pc, #560]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ca6:	e7b0      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ca8:	4668      	mov	r0, sp
 8000caa:	2105      	movs	r1, #5
 8000cac:	f001 fb30 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cb0:	2803      	cmp	r0, #3
 8000cb2:	f200 80db 	bhi.w	8000e6c <parseCounterCmd+0x274>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cb6:	2096      	movs	r0, #150	; 0x96
}
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000cbc:	4668      	mov	r0, sp
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	f001 fb26 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cc4:	2803      	cmp	r0, #3
 8000cc6:	d9f6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cc8:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcTiEvent(cmdIn)){
 8000cca:	4a8a      	ldr	r2, [pc, #552]	; (8000ef4 <parseCounterCmd+0x2fc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	f000 80ff 	beq.w	8000ed0 <parseCounterCmd+0x2d8>
 8000cd2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8151 	bne.w	8000f7e <parseCounterCmd+0x386>
				counterSetIcTi2_RisingFalling();
 8000cdc:	f002 fbaa 	bl	8003434 <counterSetIcTi2_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ce0:	487d      	ldr	r0, [pc, #500]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ce2:	e792      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ce4:	4668      	mov	r0, sp
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	f001 fb12 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cec:	2803      	cmp	r0, #3
 8000cee:	d9e2      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf0:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000cf2:	4c79      	ldr	r4, [pc, #484]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	d0de      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf8:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <parseCounterCmd+0x300>)
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d0db      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 8000cfe:	b280      	uxth	r0, r0
 8000d00:	f002 fb14 	bl	800332c <counterSetIc2SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d04:	4620      	mov	r0, r4
 8000d06:	e780      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d08:	4a7c      	ldr	r2, [pc, #496]	; (8000efc <parseCounterCmd+0x304>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d05e      	beq.n	8000dcc <parseCounterCmd+0x1d4>
 8000d0e:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
 8000d12:	f202 52f9 	addw	r2, r2, #1529	; 0x5f9
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d010      	beq.n	8000d3c <parseCounterCmd+0x144>
 8000d1a:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <parseCounterCmd+0x308>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	f47f af73 	bne.w	8000c08 <parseCounterCmd+0x10>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d24:	4669      	mov	r1, sp
 8000d26:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_CNT_CONFIG;
 8000d28:	2405      	movs	r4, #5
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_CNT_CONFIG;
 8000d30:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d34:	f008 fa3c 	bl	80091b0 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d38:	4867      	ldr	r0, [pc, #412]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d3a:	e766      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d3c:	4668      	mov	r0, sp
 8000d3e:	2105      	movs	r1, #5
 8000d40:	f001 fae6 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d44:	2803      	cmp	r0, #3
 8000d46:	d9b6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d48:	9b00      	ldr	r3, [sp, #0]
		if(isCounterMode(cmdIn)){
 8000d4a:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <parseCounterCmd+0x310>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	f000 80ad 	beq.w	8000eac <parseCounterCmd+0x2b4>
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <parseCounterCmd+0x314>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 817e 	bne.w	8001056 <parseCounterCmd+0x45e>
				counterSetMode(IC);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f002 fa3a 	bl	80031d4 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d60:	485d      	ldr	r0, [pc, #372]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d62:	e752      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <parseCounterCmd+0x318>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01e      	beq.n	8000da8 <parseCounterCmd+0x1b0>
 8000d6a:	f102 62c0 	add.w	r2, r2, #100663296	; 0x6000000
 8000d6e:	f5a2 72f9 	sub.w	r2, r2, #498	; 0x1f2
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <parseCounterCmd+0x18e>
 8000d76:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <parseCounterCmd+0x31c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	f47f af45 	bne.w	8000c08 <parseCounterCmd+0x10>
		counterSendStart();
 8000d7e:	f002 fa4b 	bl	8003218 <counterSendStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d82:	4855      	ldr	r0, [pc, #340]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d84:	e741      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d86:	4668      	mov	r0, sp
 8000d88:	2105      	movs	r1, #5
 8000d8a:	f001 fac1 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d8e:	2803      	cmp	r0, #3
 8000d90:	d991      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d92:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d08d      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <parseCounterCmd+0x300>)
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d08a      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8000da0:	f002 fa8e 	bl	80032c0 <counterSetRefSampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000da4:	484c      	ldr	r0, [pc, #304]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000da6:	e730      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000da8:	4668      	mov	r0, sp
 8000daa:	2105      	movs	r1, #5
 8000dac:	f001 fab0 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000db0:	2803      	cmp	r0, #3
 8000db2:	d980      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000db4:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcDutyCycle(cmdIn)){
 8000db6:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <parseCounterCmd+0x320>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d07c      	beq.n	8000eb6 <parseCounterCmd+0x2be>
 8000dbc:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <parseCounterCmd+0x324>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f040 8113 	bne.w	8000fea <parseCounterCmd+0x3f2>
				counterIc2DutyCycleInit();
 8000dc4:	f002 fb06 	bl	80033d4 <counterIc2DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dc8:	4843      	ldr	r0, [pc, #268]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000dca:	e71e      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	2105      	movs	r1, #5
 8000dd0:	f001 fa9e 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dd4:	2803      	cmp	r0, #3
 8000dd6:	f67f af6e 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000dda:	9b00      	ldr	r3, [sp, #0]
		if(isCounterTiMode(cmdIn)){
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <parseCounterCmd+0x328>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d06d      	beq.n	8000ebe <parseCounterCmd+0x2c6>
 8000de2:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <parseCounterCmd+0x32c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	f47f af66 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiMode_Independent();
 8000dea:	f002 fb41 	bl	8003470 <counterSetTiMode_Independent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dee:	483a      	ldr	r0, [pc, #232]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000df0:	e70b      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000df2:	4668      	mov	r0, sp
 8000df4:	2105      	movs	r1, #5
 8000df6:	f001 fa8b 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dfa:	2803      	cmp	r0, #3
 8000dfc:	f67f af5b 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e00:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e02:	4c35      	ldr	r4, [pc, #212]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	f43f af56 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f43f af52 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetTiTimeout((uint32_t)cmdIn);
 8000e12:	f002 fb3d 	bl	8003490 <counterSetTiTimeout>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e16:	4620      	mov	r0, r4
 8000e18:	e6f7      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e1a:	4668      	mov	r0, sp
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	f001 fa77 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e22:	2803      	cmp	r0, #3
 8000e24:	f67f af47 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e28:	9b00      	ldr	r3, [sp, #0]
		if(isCounterEtrGate(cmdIn)){
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <parseCounterCmd+0x330>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d04a      	beq.n	8000ec6 <parseCounterCmd+0x2ce>
 8000e30:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <parseCounterCmd+0x334>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d17e      	bne.n	8000f34 <parseCounterCmd+0x33c>
				counterSetEtrGate(500);
 8000e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3a:	f002 fa29 	bl	8003290 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e40:	e6e3      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e42:	4668      	mov	r0, sp
 8000e44:	2105      	movs	r1, #5
 8000e46:	f001 fa63 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e4a:	2803      	cmp	r0, #3
 8000e4c:	f67f af33 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e50:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e52:	4c21      	ldr	r4, [pc, #132]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e54:	42a0      	cmp	r0, r4
 8000e56:	f43f af2e 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	f43f af2a 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 8000e62:	b280      	uxth	r0, r0
 8000e64:	f002 fa44 	bl	80032f0 <counterSetIc1SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e68:	4620      	mov	r0, r4
 8000e6a:	e6ce      	b.n	8000c0a <parseCounterCmd+0x12>
 8000e6c:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc2(cmdIn)){
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000e70:	4413      	add	r3, r2
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d911      	bls.n	8000e9a <parseCounterCmd+0x2a2>
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <parseCounterCmd+0x2f4>)
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 80e3 	bne.w	8001044 <parseCounterCmd+0x44c>
				counterSetIc2Prescaler(4);
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f002 fa84 	bl	800338c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e86:	e6c0      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC1_1x){
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <parseCounterCmd+0x338>)
 8000e8a:	429a      	cmp	r2, r3
				counterSetIc1Prescaler(1);
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2001      	moveq	r0, #1
				counterSetIc1Prescaler(2);
 8000e90:	2002      	movne	r0, #2
 8000e92:	f002 fa69 	bl	8003368 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e98:	e6b7      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC2_1x){
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <parseCounterCmd+0x338>)
 8000e9c:	429a      	cmp	r2, r3
				counterSetIc2Prescaler(1);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2001      	moveq	r0, #1
				counterSetIc2Prescaler(2);
 8000ea2:	2002      	movne	r0, #2
 8000ea4:	f002 fa72 	bl	800338c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eaa:	e6ae      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetMode(ETR);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f002 f991 	bl	80031d4 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eb4:	e6a9      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc1DutyCycleInit();
 8000eb6:	f002 fa7b 	bl	80033b0 <counterIc1DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ebc:	e6a5      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiMode_Dependent();
 8000ebe:	f002 fadf 	bl	8003480 <counterSetTiMode_Dependent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ec4:	e6a1      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f002 f9e2 	bl	8003290 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ece:	e69c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_RisingFalling();
 8000ed0:	f002 fa96 	bl	8003400 <counterSetIcTi1_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ed4:	4800      	ldr	r0, [pc, #0]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ed6:	e698      	b.n	8000c0a <parseCounterCmd+0x12>
 8000ed8:	5f444e45 	.word	0x5f444e45
 8000edc:	45544147 	.word	0x45544147
 8000ee0:	32465542 	.word	0x32465542
 8000ee4:	32455250 	.word	0x32455250
 8000ee8:	a0a087cf 	.word	0xa0a087cf
 8000eec:	5f5f7834 	.word	0x5f5f7834
 8000ef0:	544e5645 	.word	0x544e5645
 8000ef4:	5f314652 	.word	0x5f314652
 8000ef8:	5f525245 	.word	0x5f525245
 8000efc:	444d4954 	.word	0x444d4954
 8000f00:	3f474643 	.word	0x3f474643
 8000f04:	200047cc 	.word	0x200047cc
 8000f08:	5f525445 	.word	0x5f525445
 8000f0c:	5f5f4349 	.word	0x5f5f4349
 8000f10:	59435544 	.word	0x59435544
 8000f14:	54525453 	.word	0x54525453
 8000f18:	31494344 	.word	0x31494344
 8000f1c:	32494344 	.word	0x32494344
 8000f20:	44514553 	.word	0x44514553
 8000f24:	49514553 	.word	0x49514553
 8000f28:	6d303031 	.word	0x6d303031
 8000f2c:	6d303035 	.word	0x6d303035
 8000f30:	5f5f7831 	.word	0x5f5f7831
		if(isCounterEtrGate(cmdIn)){
 8000f34:	f102 4272 	add.w	r2, r2, #4060086272	; 0xf2000000
 8000f38:	f502 123d 	add.w	r2, r2, #3096576	; 0x2f4000
 8000f3c:	f502 723f 	add.w	r2, r2, #764	; 0x2fc
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d010      	beq.n	8000f66 <parseCounterCmd+0x36e>
 8000f44:	3204      	adds	r2, #4
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <parseCounterCmd+0x37a>
 8000f4a:	f502 129d 	add.w	r2, r2, #1286144	; 0x13a000
 8000f4e:	f502 52e7 	add.w	r2, r2, #7392	; 0x1ce0
 8000f52:	321c      	adds	r2, #28
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f47f aeae 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetEtrGate(10000);
 8000f5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f5e:	f002 f997 	bl	8003290 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f62:	4849      	ldr	r0, [pc, #292]	; (8001088 <parseCounterCmd+0x490>)
 8000f64:	e651      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(1000);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f002 f991 	bl	8003290 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f6e:	4846      	ldr	r0, [pc, #280]	; (8001088 <parseCounterCmd+0x490>)
 8000f70:	e64b      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(5000);
 8000f72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f76:	f002 f98b 	bl	8003290 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f7a:	4843      	ldr	r0, [pc, #268]	; (8001088 <parseCounterCmd+0x490>)
 8000f7c:	e645      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000f7e:	f5a2 4277 	sub.w	r2, r2, #63232	; 0xf700
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d010      	beq.n	8000fa8 <parseCounterCmd+0x3b0>
 8000f86:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d010      	beq.n	8000fb0 <parseCounterCmd+0x3b8>
 8000f8e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000f92:	3a0c      	subs	r2, #12
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00f      	beq.n	8000fb8 <parseCounterCmd+0x3c0>
 8000f98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d10f      	bne.n	8000fc0 <parseCounterCmd+0x3c8>
				counterSetIcTi2_Falling();
 8000fa0:	f002 fa5a 	bl	8003458 <counterSetIcTi2_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fa4:	4838      	ldr	r0, [pc, #224]	; (8001088 <parseCounterCmd+0x490>)
 8000fa6:	e630      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Rising();
 8000fa8:	f002 fa34 	bl	8003414 <counterSetIcTi1_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <parseCounterCmd+0x490>)
 8000fae:	e62c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi2_Rising();
 8000fb0:	f002 fa4a 	bl	8003448 <counterSetIcTi2_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fb4:	4834      	ldr	r0, [pc, #208]	; (8001088 <parseCounterCmd+0x490>)
 8000fb6:	e628      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Falling();
 8000fb8:	f002 fa34 	bl	8003424 <counterSetIcTi1_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fbc:	4832      	ldr	r0, [pc, #200]	; (8001088 <parseCounterCmd+0x490>)
 8000fbe:	e624      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000fc0:	f102 4263 	add.w	r2, r2, #3808428032	; 0xe3000000
 8000fc4:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
 8000fc8:	f202 220d 	addw	r2, r2, #525	; 0x20d
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d008      	beq.n	8000fe2 <parseCounterCmd+0x3ea>
 8000fd0:	f5a2 027f 	sub.w	r2, r2, #16711680	; 0xff0000
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f47f ae6e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiSequence_BA();
 8000fda:	f002 fa47 	bl	800346c <counterSetTiSequence_BA>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <parseCounterCmd+0x490>)
 8000fe0:	e613      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiSequence_AB();
 8000fe2:	f002 fa41 	bl	8003468 <counterSetTiSequence_AB>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <parseCounterCmd+0x490>)
 8000fe8:	e60f      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcDutyCycle(cmdIn)){
 8000fea:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8000fee:	f502 027b 	add.w	r2, r2, #16449536	; 0xfb0000
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d011      	beq.n	800101a <parseCounterCmd+0x422>
 8000ff6:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d011      	beq.n	8001022 <parseCounterCmd+0x42a>
 8000ffe:	f102 5234 	add.w	r2, r2, #754974720	; 0x2d000000
 8001002:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001006:	4293      	cmp	r3, r2
 8001008:	d00f      	beq.n	800102a <parseCounterCmd+0x432>
 800100a:	f502 1298 	add.w	r2, r2, #1245184	; 0x130000
 800100e:	4293      	cmp	r3, r2
 8001010:	f47f ae51 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterIcDutyCycleDisable();
 8001014:	f002 f9f2 	bl	80033fc <counterIcDutyCycleDisable>
 8001018:	e5f6      	b.n	8000c08 <parseCounterCmd+0x10>
				counterIc1DutyCycleDeinit();
 800101a:	f002 f9d1 	bl	80033c0 <counterIc1DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <parseCounterCmd+0x490>)
 8001020:	e5f3      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc2DutyCycleDeinit();
 8001022:	f002 f9df 	bl	80033e4 <counterIc2DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8001026:	4818      	ldr	r0, [pc, #96]	; (8001088 <parseCounterCmd+0x490>)
 8001028:	e5ef      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIcDutyCycleEnable();
 800102a:	f002 f9e5 	bl	80033f8 <counterIcDutyCycleEnable>
	cmdIn = (error > 0) ? error : CMD_END;
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <parseCounterCmd+0x490>)
 8001030:	e5eb      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc1(cmdIn)){
 8001032:	3304      	adds	r3, #4
 8001034:	429a      	cmp	r2, r3
 8001036:	f47f ae3e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc1Prescaler(8);
 800103a:	2008      	movs	r0, #8
 800103c:	f002 f994 	bl	8003368 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <parseCounterCmd+0x490>)
 8001042:	e5e2      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc2(cmdIn)){
 8001044:	3304      	adds	r3, #4
 8001046:	429a      	cmp	r2, r3
 8001048:	f47f ae35 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc2Prescaler(8);
 800104c:	2008      	movs	r0, #8
 800104e:	f002 f99d 	bl	800338c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <parseCounterCmd+0x490>)
 8001054:	e5d9      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001056:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 800105a:	f502 0267 	add.w	r2, r2, #15138816	; 0xe70000
 800105e:	f202 2209 	addw	r2, r2, #521	; 0x209
 8001062:	4293      	cmp	r3, r2
 8001064:	d104      	bne.n	8001070 <parseCounterCmd+0x478>
				counterSetMode(REF);
 8001066:	2003      	movs	r0, #3
 8001068:	f002 f8b4 	bl	80031d4 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <parseCounterCmd+0x490>)
 800106e:	e5cc      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001070:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8001074:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8001078:	4293      	cmp	r3, r2
 800107a:	f47f ae1c 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetMode(TI);
 800107e:	2002      	movs	r0, #2
 8001080:	f002 f8a8 	bl	80031d4 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8001084:	4800      	ldr	r0, [pc, #0]	; (8001088 <parseCounterCmd+0x490>)
 8001086:	e5c0      	b.n	8000c0a <parseCounterCmd+0x12>
 8001088:	5f444e45 	.word	0x5f444e45

0800108c <parseScopeCmd>:
command parseScopeCmd(void){
 800108c:	b510      	push	{r4, lr}
 800108e:	b082      	sub	sp, #8
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001090:	4668      	mov	r0, sp
 8001092:	2105      	movs	r1, #5
 8001094:	f001 f93c 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001098:	2803      	cmp	r0, #3
 800109a:	d806      	bhi.n	80010aa <parseScopeCmd+0x1e>
		cmdIn=CMD_END;
 800109c:	4bc1      	ldr	r3, [pc, #772]	; (80013a4 <parseScopeCmd+0x318>)
		return BUILD_CMD(cmdNext);
	}else if(bytesRead == 0){
 800109e:	2800      	cmp	r0, #0
		cmdIn=CMD_END;
 80010a0:	bf14      	ite	ne
 80010a2:	2032      	movne	r0, #50	; 0x32
 80010a4:	4618      	moveq	r0, r3
}
 80010a6:	b002      	add	sp, #8
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	9800      	ldr	r0, [sp, #0]
	switch(cmdIn){
 80010ac:	4bbe      	ldr	r3, [pc, #760]	; (80013a8 <parseScopeCmd+0x31c>)
 80010ae:	4298      	cmp	r0, r3
 80010b0:	f000 80cf 	beq.w	8001252 <parseScopeCmd+0x1c6>
 80010b4:	d82c      	bhi.n	8001110 <parseScopeCmd+0x84>
 80010b6:	f1a3 733f 	sub.w	r3, r3, #50069504	; 0x2fc0000
 80010ba:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80010be:	4298      	cmp	r0, r3
 80010c0:	d04d      	beq.n	800115e <parseScopeCmd+0xd2>
 80010c2:	f240 809b 	bls.w	80011fc <parseScopeCmd+0x170>
 80010c6:	4bb9      	ldr	r3, [pc, #740]	; (80013ac <parseScopeCmd+0x320>)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	f000 80f4 	beq.w	80012b6 <parseScopeCmd+0x22a>
 80010ce:	f240 813a 	bls.w	8001346 <parseScopeCmd+0x2ba>
 80010d2:	4bb7      	ldr	r3, [pc, #732]	; (80013b0 <parseScopeCmd+0x324>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d038      	beq.n	800114a <parseScopeCmd+0xbe>
 80010d8:	f503 239e 	add.w	r3, r3, #323584	; 0x4f000
 80010dc:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80010e0:	4298      	cmp	r0, r3
 80010e2:	f040 8095 	bne.w	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80010e6:	4668      	mov	r0, sp
 80010e8:	2105      	movs	r1, #5
 80010ea:	f001 f911 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80010ee:	2803      	cmp	r0, #3
 80010f0:	d932      	bls.n	8001158 <parseScopeCmd+0xcc>
 80010f2:	9a00      	ldr	r2, [sp, #0]
		if(isScopeNumOfSamples(cmdIn)){
 80010f4:	4baf      	ldr	r3, [pc, #700]	; (80013b4 <parseScopeCmd+0x328>)
 80010f6:	4413      	add	r3, r2
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	f240 8195 	bls.w	8001428 <parseScopeCmd+0x39c>
 80010fe:	4bae      	ldr	r3, [pc, #696]	; (80013b8 <parseScopeCmd+0x32c>)
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8222 	bne.w	800154a <parseScopeCmd+0x4be>
				error=scopeSetNumOfSamples(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f003 fdc5 	bl	8004c98 <scopeSetNumOfSamples>
 800110e:	e0d4      	b.n	80012ba <parseScopeCmd+0x22e>
	switch(cmdIn){
 8001110:	4baa      	ldr	r3, [pc, #680]	; (80013bc <parseScopeCmd+0x330>)
 8001112:	4298      	cmp	r0, r3
 8001114:	d036      	beq.n	8001184 <parseScopeCmd+0xf8>
 8001116:	d865      	bhi.n	80011e4 <parseScopeCmd+0x158>
 8001118:	f1a3 639d 	sub.w	r3, r3, #82313216	; 0x4e80000
 800111c:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
 8001120:	f2a3 43fa 	subw	r3, r3, #1274	; 0x4fa
 8001124:	4298      	cmp	r0, r3
 8001126:	f000 80b1 	beq.w	800128c <parseScopeCmd+0x200>
 800112a:	f240 8114 	bls.w	8001356 <parseScopeCmd+0x2ca>
 800112e:	4ba4      	ldr	r3, [pc, #656]	; (80013c0 <parseScopeCmd+0x334>)
 8001130:	4298      	cmp	r0, r3
 8001132:	d03c      	beq.n	80011ae <parseScopeCmd+0x122>
 8001134:	f103 7303 	add.w	r3, r3, #34340864	; 0x20c0000
 8001138:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800113c:	3310      	adds	r3, #16
 800113e:	4298      	cmp	r0, r3
 8001140:	d166      	bne.n	8001210 <parseScopeCmd+0x184>
		scopeStop();
 8001142:	f003 ff49 	bl	8004fd8 <scopeStop>
		cmdIn=CMD_END;
 8001146:	4897      	ldr	r0, [pc, #604]	; (80013a4 <parseScopeCmd+0x318>)
 8001148:	e7ad      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800114a:	4668      	mov	r0, sp
 800114c:	2105      	movs	r1, #5
 800114e:	f001 f8df 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001152:	2803      	cmp	r0, #3
 8001154:	f200 80d6 	bhi.w	8001304 <parseScopeCmd+0x278>
 8001158:	2036      	movs	r0, #54	; 0x36
}
 800115a:	b002      	add	sp, #8
 800115c:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800115e:	4668      	mov	r0, sp
 8001160:	2105      	movs	r1, #5
 8001162:	f001 f8d5 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001166:	2803      	cmp	r0, #3
 8001168:	d9f6      	bls.n	8001158 <parseScopeCmd+0xcc>
 800116a:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigEdge(cmdIn)){
 800116c:	4a95      	ldr	r2, [pc, #596]	; (80013c4 <parseScopeCmd+0x338>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f000 816b 	beq.w	800144a <parseScopeCmd+0x3be>
 8001174:	4a94      	ldr	r2, [pc, #592]	; (80013c8 <parseScopeCmd+0x33c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d1ee      	bne.n	8001158 <parseScopeCmd+0xcc>
				scopeSetTriggerEdge(EDGE_FALLING);
 800117a:	2001      	movs	r0, #1
 800117c:	f003 fcc0 	bl	8004b00 <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001180:	4888      	ldr	r0, [pc, #544]	; (80013a4 <parseScopeCmd+0x318>)
 8001182:	e790      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001184:	4668      	mov	r0, sp
 8001186:	2105      	movs	r1, #5
 8001188:	f001 f8c2 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800118c:	2803      	cmp	r0, #3
 800118e:	f200 80c7 	bhi.w	8001320 <parseScopeCmd+0x294>
 8001192:	4a84      	ldr	r2, [pc, #528]	; (80013a4 <parseScopeCmd+0x318>)
 8001194:	4b8d      	ldr	r3, [pc, #564]	; (80013cc <parseScopeCmd+0x340>)
 8001196:	2800      	cmp	r0, #0
 8001198:	bf0c      	ite	eq
 800119a:	4610      	moveq	r0, r2
 800119c:	4618      	movne	r0, r3
		if(isScopeFreq(cmdIn)){
 800119e:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <parseScopeCmd+0x344>)
 80011a0:	4298      	cmp	r0, r3
 80011a2:	d1d9      	bne.n	8001158 <parseScopeCmd+0xcc>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f003 fd20 	bl	8004bec <scopeSetSamplingFreq>
 80011ac:	e085      	b.n	80012ba <parseScopeCmd+0x22e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011ae:	4668      	mov	r0, sp
 80011b0:	2105      	movs	r1, #5
 80011b2:	f001 f8ad 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011b6:	2803      	cmp	r0, #3
 80011b8:	d9ce      	bls.n	8001158 <parseScopeCmd+0xcc>
 80011ba:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 80011bc:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <parseScopeCmd+0x348>)
 80011be:	4413      	add	r3, r2
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d8c9      	bhi.n	8001158 <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 80011c4:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <parseScopeCmd+0x34c>)
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f000 8152 	beq.w	8001470 <parseScopeCmd+0x3e4>
			}else if(cmdIn == CMD_CHANNELS_2){
 80011cc:	4b83      	ldr	r3, [pc, #524]	; (80013dc <parseScopeCmd+0x350>)
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f000 8156 	beq.w	8001480 <parseScopeCmd+0x3f4>
			}else if(cmdIn == CMD_CHANNELS_3){
 80011d4:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <parseScopeCmd+0x354>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f040 80e0 	bne.w	800139c <parseScopeCmd+0x310>
				error=scopeSetNumOfChannels(3);
 80011dc:	2003      	movs	r0, #3
 80011de:	f003 fd83 	bl	8004ce8 <scopeSetNumOfChannels>
 80011e2:	e06a      	b.n	80012ba <parseScopeCmd+0x22e>
	switch(cmdIn){
 80011e4:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <parseScopeCmd+0x358>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d06d      	beq.n	80012c6 <parseScopeCmd+0x23a>
 80011ea:	d970      	bls.n	80012ce <parseScopeCmd+0x242>
 80011ec:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <parseScopeCmd+0x35c>)
 80011ee:	4298      	cmp	r0, r3
 80011f0:	f040 8130 	bne.w	8001454 <parseScopeCmd+0x3c8>
		scopeRestart();
 80011f4:	f003 fecc 	bl	8004f90 <scopeRestart>
		cmdIn=CMD_END;
 80011f8:	486a      	ldr	r0, [pc, #424]	; (80013a4 <parseScopeCmd+0x318>)
 80011fa:	e754      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 80011fc:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <parseScopeCmd+0x360>)
 80011fe:	4298      	cmp	r0, r3
 8001200:	d019      	beq.n	8001236 <parseScopeCmd+0x1aa>
 8001202:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <parseScopeCmd+0x364>)
 8001204:	4298      	cmp	r0, r3
 8001206:	d005      	beq.n	8001214 <parseScopeCmd+0x188>
 8001208:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <parseScopeCmd+0x368>)
 800120a:	4298      	cmp	r0, r3
 800120c:	f000 8096 	beq.w	800133c <parseScopeCmd+0x2b0>
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	e748      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001214:	4668      	mov	r0, sp
 8001216:	2105      	movs	r1, #5
 8001218:	f001 f87a 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800121c:	2803      	cmp	r0, #3
 800121e:	d99b      	bls.n	8001158 <parseScopeCmd+0xcc>
 8001220:	9b00      	ldr	r3, [sp, #0]
		if(isScopeDataDepth(cmdIn)){
 8001222:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <parseScopeCmd+0x36c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	f000 8107 	beq.w	8001438 <parseScopeCmd+0x3ac>
 800122a:	4a74      	ldr	r2, [pc, #464]	; (80013fc <parseScopeCmd+0x370>)
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 812b 	bne.w	8001488 <parseScopeCmd+0x3fc>
 8001232:	2037      	movs	r0, #55	; 0x37
 8001234:	e737      	b.n	80010a6 <parseScopeCmd+0x1a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <parseScopeCmd+0x374>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	4669      	mov	r1, sp
		passMsg = MSG_SCOPE_INPUTS;
 800123c:	2410      	movs	r4, #16
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800123e:	2300      	movs	r3, #0
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SCOPE_INPUTS;
 8001244:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001248:	f007 ffb2 	bl	80091b0 <xQueueGenericSend>
		cmdIn=CMD_END;
 800124c:	4855      	ldr	r0, [pc, #340]	; (80013a4 <parseScopeCmd+0x318>)
}
 800124e:	b002      	add	sp, #8
 8001250:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001252:	4668      	mov	r0, sp
 8001254:	2105      	movs	r1, #5
 8001256:	f001 f85b 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800125a:	2803      	cmp	r0, #3
 800125c:	f67f af7c 	bls.w	8001158 <parseScopeCmd+0xcc>
 8001260:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <parseScopeCmd+0x348>)
 8001264:	4413      	add	r3, r2
 8001266:	2b03      	cmp	r3, #3
 8001268:	f63f af76 	bhi.w	8001158 <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 800126c:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <parseScopeCmd+0x34c>)
 800126e:	429a      	cmp	r2, r3
 8001270:	f000 80fa 	beq.w	8001468 <parseScopeCmd+0x3dc>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <parseScopeCmd+0x350>)
 8001276:	429a      	cmp	r2, r3
 8001278:	f000 80fe 	beq.w	8001478 <parseScopeCmd+0x3ec>
			}else if(cmdIn == CMD_CHANNELS_3){
 800127c:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <parseScopeCmd+0x354>)
 800127e:	429a      	cmp	r2, r3
 8001280:	f040 8088 	bne.w	8001394 <parseScopeCmd+0x308>
				error=scopeSetTrigChannel(3);
 8001284:	2003      	movs	r0, #3
 8001286:	f003 fda3 	bl	8004dd0 <scopeSetTrigChannel>
 800128a:	e016      	b.n	80012ba <parseScopeCmd+0x22e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800128c:	4668      	mov	r0, sp
 800128e:	2105      	movs	r1, #5
 8001290:	f001 f83e 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001294:	2803      	cmp	r0, #3
 8001296:	f67f af5f 	bls.w	8001158 <parseScopeCmd+0xcc>
 800129a:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800129c:	4c41      	ldr	r4, [pc, #260]	; (80013a4 <parseScopeCmd+0x318>)
 800129e:	42a0      	cmp	r0, r4
 80012a0:	f43f af5a 	beq.w	8001158 <parseScopeCmd+0xcc>
 80012a4:	4b49      	ldr	r3, [pc, #292]	; (80013cc <parseScopeCmd+0x340>)
 80012a6:	4298      	cmp	r0, r3
 80012a8:	f43f af56 	beq.w	8001158 <parseScopeCmd+0xcc>
			scopeSetTrigLevel((uint16_t)cmdIn);
 80012ac:	b280      	uxth	r0, r0
 80012ae:	f003 fccb 	bl	8004c48 <scopeSetTrigLevel>
		cmdIn=CMD_END;
 80012b2:	4620      	mov	r0, r4
 80012b4:	e6f7      	b.n	80010a6 <parseScopeCmd+0x1a>
		error=scopeSetADCInputChannelVref();
 80012b6:	f003 fe29 	bl	8004f0c <scopeSetADCInputChannelVref>
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <parseScopeCmd+0x318>)
 80012bc:	2800      	cmp	r0, #0
 80012be:	bf08      	it	eq
 80012c0:	4618      	moveq	r0, r3
}
 80012c2:	b002      	add	sp, #8
 80012c4:	bd10      	pop	{r4, pc}
		scopeStart();
 80012c6:	f003 fe75 	bl	8004fb4 <scopeStart>
		cmdIn=CMD_END;
 80012ca:	4836      	ldr	r0, [pc, #216]	; (80013a4 <parseScopeCmd+0x318>)
 80012cc:	e6eb      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 80012ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80012d2:	f2a3 2303 	subw	r3, r3, #515	; 0x203
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d19a      	bne.n	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80012da:	4668      	mov	r0, sp
 80012dc:	2105      	movs	r1, #5
 80012de:	f001 f817 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80012e2:	2803      	cmp	r0, #3
 80012e4:	f67f af38 	bls.w	8001158 <parseScopeCmd+0xcc>
 80012e8:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <parseScopeCmd+0x318>)
 80012ec:	4298      	cmp	r0, r3
 80012ee:	f43f af33 	beq.w	8001158 <parseScopeCmd+0xcc>
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <parseScopeCmd+0x340>)
 80012f4:	4298      	cmp	r0, r3
 80012f6:	f43f af2f 	beq.w	8001158 <parseScopeCmd+0xcc>
			scopeSetPretrigger((uint16_t)cmdIn);
 80012fa:	b280      	uxth	r0, r0
 80012fc:	f003 fcb8 	bl	8004c70 <scopeSetPretrigger>
		cmdIn=CMD_END;
 8001300:	4828      	ldr	r0, [pc, #160]	; (80013a4 <parseScopeCmd+0x318>)
 8001302:	e6d0      	b.n	80010a6 <parseScopeCmd+0x1a>
 8001304:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigMode(cmdIn)){
 8001306:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <parseScopeCmd+0x378>)
 8001308:	4293      	cmp	r3, r2
 800130a:	f000 8099 	beq.w	8001440 <parseScopeCmd+0x3b4>
 800130e:	4a3e      	ldr	r2, [pc, #248]	; (8001408 <parseScopeCmd+0x37c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 80c9 	bne.w	80014a8 <parseScopeCmd+0x41c>
				scopeSetTriggerMode(TRIG_AUTO);
 8001316:	2001      	movs	r0, #1
 8001318:	f003 fbde 	bl	8004ad8 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <parseScopeCmd+0x318>)
 800131e:	e6c2      	b.n	80010a6 <parseScopeCmd+0x1a>
 8001320:	9800      	ldr	r0, [sp, #0]
		if(isScopeFreq(cmdIn)){
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <parseScopeCmd+0x380>)
 8001324:	4403      	add	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d974      	bls.n	8001414 <parseScopeCmd+0x388>
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <parseScopeCmd+0x384>)
 800132c:	4298      	cmp	r0, r3
 800132e:	f040 80c4 	bne.w	80014ba <parseScopeCmd+0x42e>
				error=scopeSetSamplingFreq(5000);
 8001332:	f241 3088 	movw	r0, #5000	; 0x1388
 8001336:	f003 fc59 	bl	8004bec <scopeSetSamplingFreq>
 800133a:	e7be      	b.n	80012ba <parseScopeCmd+0x22e>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <parseScopeCmd+0x374>)
 800133e:	4669      	mov	r1, sp
 8001340:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SCOPE_CONFIG;
 8001342:	240f      	movs	r4, #15
 8001344:	e77b      	b.n	800123e <parseScopeCmd+0x1b2>
	switch(cmdIn){
 8001346:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 800134a:	4298      	cmp	r0, r3
 800134c:	f47f af60 	bne.w	8001210 <parseScopeCmd+0x184>
		error=scopeSetADCInputChannelDefault();
 8001350:	f003 fda0 	bl	8004e94 <scopeSetADCInputChannelDefault>
 8001354:	e7b1      	b.n	80012ba <parseScopeCmd+0x22e>
	switch(cmdIn){
 8001356:	f1a3 6382 	sub.w	r3, r3, #68157440	; 0x4100000
 800135a:	f5a3 3339 	sub.w	r3, r3, #189440	; 0x2e400
 800135e:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 8001362:	4298      	cmp	r0, r3
 8001364:	f47f af54 	bne.w	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001368:	4668      	mov	r0, sp
 800136a:	2105      	movs	r1, #5
 800136c:	f000 ffd0 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001370:	2803      	cmp	r0, #3
 8001372:	f67f aef1 	bls.w	8001158 <parseScopeCmd+0xcc>
 8001376:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <parseScopeCmd+0x318>)
 800137a:	4298      	cmp	r0, r3
 800137c:	f43f aeec 	beq.w	8001158 <parseScopeCmd+0xcc>
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <parseScopeCmd+0x340>)
 8001382:	4298      	cmp	r0, r3
 8001384:	f43f aee8 	beq.w	8001158 <parseScopeCmd+0xcc>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001388:	b2c1      	uxtb	r1, r0
 800138a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800138e:	f003 fd4d 	bl	8004e2c <scopeSetADCInputChannel>
 8001392:	e792      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetTrigChannel(4);
 8001394:	2004      	movs	r0, #4
 8001396:	f003 fd1b 	bl	8004dd0 <scopeSetTrigChannel>
 800139a:	e78e      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(4);
 800139c:	2004      	movs	r0, #4
 800139e:	f003 fca3 	bl	8004ce8 <scopeSetNumOfChannels>
 80013a2:	e78a      	b.n	80012ba <parseScopeCmd+0x22e>
 80013a4:	5f444e45 	.word	0x5f444e45
 80013a8:	48435254 	.word	0x48435254
 80013ac:	46455241 	.word	0x46455241
 80013b0:	47495254 	.word	0x47495254
 80013b4:	a0cfcfcf 	.word	0xa0cfcfcf
 80013b8:	5f303035 	.word	0x5f303035
 80013bc:	51455246 	.word	0x51455246
 80013c0:	4e414843 	.word	0x4e414843
 80013c4:	45534952 	.word	0x45534952
 80013c8:	4c4c4146 	.word	0x4c4c4146
 80013cc:	5f525245 	.word	0x5f525245
 80013d0:	5f58414d 	.word	0x5f58414d
 80013d4:	a0b7bccf 	.word	0xa0b7bccf
 80013d8:	5f484331 	.word	0x5f484331
 80013dc:	5f484332 	.word	0x5f484332
 80013e0:	5f484333 	.word	0x5f484333
 80013e4:	54525453 	.word	0x54525453
 80013e8:	5458454e 	.word	0x5458454e
 80013ec:	3f504e49 	.word	0x3f504e49
 80013f0:	41544144 	.word	0x41544144
 80013f4:	3f474643 	.word	0x3f474643
 80013f8:	5f423231 	.word	0x5f423231
 80013fc:	5f423031 	.word	0x5f423031
 8001400:	200047cc 	.word	0x200047cc
 8001404:	4d524f4e 	.word	0x4d524f4e
 8001408:	4f545541 	.word	0x4f545541
 800140c:	a0a0b4cf 	.word	0xa0a0b4cf
 8001410:	5f5f4b35 	.word	0x5f5f4b35
			if(cmdIn == CMD_FREQ_1K){
 8001414:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <parseScopeCmd+0x588>)
 8001416:	4298      	cmp	r0, r3
				error=scopeSetSamplingFreq(1000);
 8001418:	bf0c      	ite	eq
 800141a:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
				error=scopeSetSamplingFreq(2000);
 800141e:	f44f 60fa 	movne.w	r0, #2000	; 0x7d0
 8001422:	f003 fbe3 	bl	8004bec <scopeSetSamplingFreq>
 8001426:	e748      	b.n	80012ba <parseScopeCmd+0x22e>
			if(cmdIn == CMD_SAMPLES_100){
 8001428:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <parseScopeCmd+0x58c>)
 800142a:	429a      	cmp	r2, r3
				error=scopeSetNumOfSamples(100);
 800142c:	bf0c      	ite	eq
 800142e:	2064      	moveq	r0, #100	; 0x64
				error=scopeSetNumOfSamples(200);
 8001430:	20c8      	movne	r0, #200	; 0xc8
 8001432:	f003 fc31 	bl	8004c98 <scopeSetNumOfSamples>
 8001436:	e740      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetDataDepth(12);
 8001438:	200c      	movs	r0, #12
 800143a:	f003 fb85 	bl	8004b48 <scopeSetDataDepth>
 800143e:	e73c      	b.n	80012ba <parseScopeCmd+0x22e>
				scopeSetTriggerMode(TRIG_NORMAL);
 8001440:	2000      	movs	r0, #0
 8001442:	f003 fb49 	bl	8004ad8 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001446:	4875      	ldr	r0, [pc, #468]	; (800161c <parseScopeCmd+0x590>)
 8001448:	e62d      	b.n	80010a6 <parseScopeCmd+0x1a>
				scopeSetTriggerEdge(EDGE_RISING);
 800144a:	2000      	movs	r0, #0
 800144c:	f003 fb58 	bl	8004b00 <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001450:	4872      	ldr	r0, [pc, #456]	; (800161c <parseScopeCmd+0x590>)
 8001452:	e628      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001454:	f103 632e 	add.w	r3, r3, #182452224	; 0xae00000
 8001458:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 800145c:	f603 03f7 	addw	r3, r3, #2295	; 0x8f7
 8001460:	4298      	cmp	r0, r3
 8001462:	f43f ae20 	beq.w	80010a6 <parseScopeCmd+0x1a>
 8001466:	e6d3      	b.n	8001210 <parseScopeCmd+0x184>
				error=scopeSetTrigChannel(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f003 fcb1 	bl	8004dd0 <scopeSetTrigChannel>
 800146e:	e724      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f003 fc39 	bl	8004ce8 <scopeSetNumOfChannels>
 8001476:	e720      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetTrigChannel(2);
 8001478:	2002      	movs	r0, #2
 800147a:	f003 fca9 	bl	8004dd0 <scopeSetTrigChannel>
 800147e:	e71c      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfChannels(2);
 8001480:	2002      	movs	r0, #2
 8001482:	f003 fc31 	bl	8004ce8 <scopeSetNumOfChannels>
 8001486:	e718      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeDataDepth(cmdIn)){
 8001488:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 800148c:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 8001490:	3207      	adds	r2, #7
 8001492:	4293      	cmp	r3, r2
 8001494:	d004      	beq.n	80014a0 <parseScopeCmd+0x414>
 8001496:	3a02      	subs	r2, #2
 8001498:	4293      	cmp	r3, r2
 800149a:	f43f aeca 	beq.w	8001232 <parseScopeCmd+0x1a6>
 800149e:	e65b      	b.n	8001158 <parseScopeCmd+0xcc>
				error=scopeSetDataDepth(8);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f003 fb51 	bl	8004b48 <scopeSetDataDepth>
 80014a6:	e708      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeTrigMode(cmdIn)){
 80014a8:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <parseScopeCmd+0x594>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	f040 8091 	bne.w	80015d2 <parseScopeCmd+0x546>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f003 fb11 	bl	8004ad8 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 80014b6:	4859      	ldr	r0, [pc, #356]	; (800161c <parseScopeCmd+0x590>)
 80014b8:	e5f5      	b.n	80010a6 <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 80014ba:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 80014be:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 80014c2:	3b04      	subs	r3, #4
 80014c4:	4298      	cmp	r0, r3
 80014c6:	d010      	beq.n	80014ea <parseScopeCmd+0x45e>
 80014c8:	3301      	adds	r3, #1
 80014ca:	4298      	cmp	r0, r3
 80014cc:	d012      	beq.n	80014f4 <parseScopeCmd+0x468>
 80014ce:	3303      	adds	r3, #3
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d014      	beq.n	80014fe <parseScopeCmd+0x472>
 80014d4:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80014d8:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80014dc:	3b04      	subs	r3, #4
 80014de:	4298      	cmp	r0, r3
 80014e0:	d112      	bne.n	8001508 <parseScopeCmd+0x47c>
				error=scopeSetSamplingFreq(100000);
 80014e2:	4850      	ldr	r0, [pc, #320]	; (8001624 <parseScopeCmd+0x598>)
 80014e4:	f003 fb82 	bl	8004bec <scopeSetSamplingFreq>
 80014e8:	e6e7      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(10000);
 80014ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80014ee:	f003 fb7d 	bl	8004bec <scopeSetSamplingFreq>
 80014f2:	e6e2      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(20000);
 80014f4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80014f8:	f003 fb78 	bl	8004bec <scopeSetSamplingFreq>
 80014fc:	e6dd      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(50000);
 80014fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001502:	f003 fb73 	bl	8004bec <scopeSetSamplingFreq>
 8001506:	e6d8      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeFreq(cmdIn)){
 8001508:	3301      	adds	r3, #1
 800150a:	4298      	cmp	r0, r3
 800150c:	d00e      	beq.n	800152c <parseScopeCmd+0x4a0>
 800150e:	3303      	adds	r3, #3
 8001510:	4298      	cmp	r0, r3
 8001512:	d00f      	beq.n	8001534 <parseScopeCmd+0x4a8>
 8001514:	f103 53a1 	add.w	r3, r3, #337641472	; 0x14200000
 8001518:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
 800151c:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 8001520:	4298      	cmp	r0, r3
 8001522:	d10b      	bne.n	800153c <parseScopeCmd+0x4b0>
				error=scopeSetSamplingFreq(1000000);
 8001524:	4840      	ldr	r0, [pc, #256]	; (8001628 <parseScopeCmd+0x59c>)
 8001526:	f003 fb61 	bl	8004bec <scopeSetSamplingFreq>
 800152a:	e6c6      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(200000);
 800152c:	483f      	ldr	r0, [pc, #252]	; (800162c <parseScopeCmd+0x5a0>)
 800152e:	f003 fb5d 	bl	8004bec <scopeSetSamplingFreq>
 8001532:	e6c2      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(500000);
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <parseScopeCmd+0x5a4>)
 8001536:	f003 fb59 	bl	8004bec <scopeSetSamplingFreq>
 800153a:	e6be      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeFreq(cmdIn)){
 800153c:	3301      	adds	r3, #1
 800153e:	4298      	cmp	r0, r3
 8001540:	d155      	bne.n	80015ee <parseScopeCmd+0x562>
				error=scopeSetSamplingFreq(2000000);
 8001542:	483c      	ldr	r0, [pc, #240]	; (8001634 <parseScopeCmd+0x5a8>)
 8001544:	f003 fb52 	bl	8004bec <scopeSetSamplingFreq>
 8001548:	e6b7      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeNumOfSamples(cmdIn)){
 800154a:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 800154e:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 8001552:	331c      	adds	r3, #28
 8001554:	429a      	cmp	r2, r3
 8001556:	d011      	beq.n	800157c <parseScopeCmd+0x4f0>
 8001558:	3301      	adds	r3, #1
 800155a:	429a      	cmp	r2, r3
 800155c:	d013      	beq.n	8001586 <parseScopeCmd+0x4fa>
 800155e:	3303      	adds	r3, #3
 8001560:	429a      	cmp	r2, r3
 8001562:	d015      	beq.n	8001590 <parseScopeCmd+0x504>
 8001564:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 8001568:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 800156c:	3b04      	subs	r3, #4
 800156e:	429a      	cmp	r2, r3
 8001570:	d113      	bne.n	800159a <parseScopeCmd+0x50e>
				error=scopeSetNumOfSamples(10000);
 8001572:	f242 7010 	movw	r0, #10000	; 0x2710
 8001576:	f003 fb8f 	bl	8004c98 <scopeSetNumOfSamples>
 800157a:	e69e      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(1000);
 800157c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001580:	f003 fb8a 	bl	8004c98 <scopeSetNumOfSamples>
 8001584:	e699      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(2000);
 8001586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800158a:	f003 fb85 	bl	8004c98 <scopeSetNumOfSamples>
 800158e:	e694      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(5000);
 8001590:	f241 3088 	movw	r0, #5000	; 0x1388
 8001594:	f003 fb80 	bl	8004c98 <scopeSetNumOfSamples>
 8001598:	e68f      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeNumOfSamples(cmdIn)){
 800159a:	3301      	adds	r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	d00e      	beq.n	80015be <parseScopeCmd+0x532>
 80015a0:	3303      	adds	r3, #3
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d010      	beq.n	80015c8 <parseScopeCmd+0x53c>
 80015a6:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80015aa:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80015ae:	3b04      	subs	r3, #4
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f47f add1 	bne.w	8001158 <parseScopeCmd+0xcc>
				error=scopeSetNumOfSamples(100000);
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <parseScopeCmd+0x598>)
 80015b8:	f003 fb6e 	bl	8004c98 <scopeSetNumOfSamples>
 80015bc:	e67d      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(20000);
 80015be:	f644 6020 	movw	r0, #20000	; 0x4e20
 80015c2:	f003 fb69 	bl	8004c98 <scopeSetNumOfSamples>
 80015c6:	e678      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetNumOfSamples(50000);
 80015c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015cc:	f003 fb64 	bl	8004c98 <scopeSetNumOfSamples>
 80015d0:	e673      	b.n	80012ba <parseScopeCmd+0x22e>
		if(isScopeTrigMode(cmdIn)){
 80015d2:	f102 4268 	add.w	r2, r2, #3892314112	; 0xe8000000
 80015d6:	f502 224e 	add.w	r2, r2, #843776	; 0xce000
 80015da:	f602 220d 	addw	r2, r2, #2573	; 0xa0d
 80015de:	4293      	cmp	r3, r2
 80015e0:	f47f adba 	bne.w	8001158 <parseScopeCmd+0xcc>
				scopeSetTriggerMode(TRIG_SINGLE);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f003 fa77 	bl	8004ad8 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <parseScopeCmd+0x590>)
 80015ec:	e55b      	b.n	80010a6 <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 80015ee:	3303      	adds	r3, #3
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d00b      	beq.n	800160c <parseScopeCmd+0x580>
 80015f4:	f5a3 1390 	sub.w	r3, r3, #1179648	; 0x120000
 80015f8:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 80015fc:	3b04      	subs	r3, #4
 80015fe:	4298      	cmp	r0, r3
 8001600:	f47f adcd 	bne.w	800119e <parseScopeCmd+0x112>
				error=scopeSetSamplingFreq(10000000);
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <parseScopeCmd+0x5ac>)
 8001606:	f003 faf1 	bl	8004bec <scopeSetSamplingFreq>
 800160a:	e656      	b.n	80012ba <parseScopeCmd+0x22e>
				error=scopeSetSamplingFreq(5000000);
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <parseScopeCmd+0x5b0>)
 800160e:	f003 faed 	bl	8004bec <scopeSetSamplingFreq>
 8001612:	e652      	b.n	80012ba <parseScopeCmd+0x22e>
 8001614:	5f5f4b31 	.word	0x5f5f4b31
 8001618:	5f303031 	.word	0x5f303031
 800161c:	5f444e45 	.word	0x5f444e45
 8001620:	5f415f46 	.word	0x5f415f46
 8001624:	000186a0 	.word	0x000186a0
 8001628:	000f4240 	.word	0x000f4240
 800162c:	00030d40 	.word	0x00030d40
 8001630:	0007a120 	.word	0x0007a120
 8001634:	001e8480 	.word	0x001e8480
 8001638:	00989680 	.word	0x00989680
 800163c:	004c4b40 	.word	0x004c4b40

08001640 <parseSyncPwmCmd>:
command parseSyncPwmCmd(void){
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001644:	ad02      	add	r5, sp, #8
 8001646:	4628      	mov	r0, r5
 8001648:	2105      	movs	r1, #5
 800164a:	f000 fe61 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800164e:	2803      	cmp	r0, #3
 8001650:	d806      	bhi.n	8001660 <parseSyncPwmCmd+0x20>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <parseSyncPwmCmd+0x1d4>)
	}else if(bytesRead == 0){
 8001654:	2800      	cmp	r0, #0
	cmdIn = (error > 0) ? error : CMD_END;	
 8001656:	bf14      	ite	ne
 8001658:	2097      	movne	r0, #151	; 0x97
 800165a:	4618      	moveq	r0, r3
}
 800165c:	b004      	add	sp, #16
 800165e:	bd70      	pop	{r4, r5, r6, pc}
 8001660:	9802      	ldr	r0, [sp, #8]
	switch(cmdIn){
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <parseSyncPwmCmd+0x1d8>)
 8001664:	4298      	cmp	r0, r3
 8001666:	d069      	beq.n	800173c <parseSyncPwmCmd+0xfc>
 8001668:	d924      	bls.n	80016b4 <parseSyncPwmCmd+0x74>
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <parseSyncPwmCmd+0x1dc>)
 800166c:	4298      	cmp	r0, r3
 800166e:	d00f      	beq.n	8001690 <parseSyncPwmCmd+0x50>
 8001670:	d96d      	bls.n	800174e <parseSyncPwmCmd+0x10e>
 8001672:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <parseSyncPwmCmd+0x1e0>)
 8001674:	4298      	cmp	r0, r3
 8001676:	f040 80b1 	bne.w	80017dc <parseSyncPwmCmd+0x19c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800167a:	2105      	movs	r1, #5
 800167c:	4628      	mov	r0, r5
 800167e:	f000 fe47 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001682:	2803      	cmp	r0, #3
 8001684:	d87e      	bhi.n	8001784 <parseSyncPwmCmd+0x144>
		secondHalfOfDouble = commBufferReadUInt32();
 8001686:	f000 fe8b 	bl	80023a0 <commBufferReadUInt32>
	cmdIn = (error > 0) ? error : CMD_END;	
 800168a:	2097      	movs	r0, #151	; 0x97
}
 800168c:	b004      	add	sp, #16
 800168e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001690:	4628      	mov	r0, r5
 8001692:	2105      	movs	r1, #5
 8001694:	f000 fe3c 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001698:	2803      	cmp	r0, #3
 800169a:	d9f6      	bls.n	800168a <parseSyncPwmCmd+0x4a>
 800169c:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwmStepMode(cmdIn)){
 800169e:	4a61      	ldr	r2, [pc, #388]	; (8001824 <parseSyncPwmCmd+0x1e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	f000 8097 	beq.w	80017d4 <parseSyncPwmCmd+0x194>
 80016a6:	4a60      	ldr	r2, [pc, #384]	; (8001828 <parseSyncPwmCmd+0x1e8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d1ee      	bne.n	800168a <parseSyncPwmCmd+0x4a>
				syncPwmResetStepMode();
 80016ac:	f003 fd72 	bl	8005194 <syncPwmResetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016b0:	4858      	ldr	r0, [pc, #352]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 80016b2:	e7d3      	b.n	800165c <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 80016b4:	f103 4373 	add.w	r3, r3, #4076863488	; 0xf3000000
 80016b8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80016bc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80016c0:	4298      	cmp	r0, r3
 80016c2:	d027      	beq.n	8001714 <parseSyncPwmCmd+0xd4>
 80016c4:	f103 633f 	add.w	r3, r3, #200278016	; 0xbf00000
 80016c8:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80016cc:	4298      	cmp	r0, r3
 80016ce:	d010      	beq.n	80016f2 <parseSyncPwmCmd+0xb2>
 80016d0:	4b56      	ldr	r3, [pc, #344]	; (800182c <parseSyncPwmCmd+0x1ec>)
 80016d2:	4298      	cmp	r0, r3
 80016d4:	d1d9      	bne.n	800168a <parseSyncPwmCmd+0x4a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <parseSyncPwmCmd+0x1f0>)
 80016d8:	4629      	mov	r1, r5
 80016da:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SYNCPWM_CONFIG;
 80016dc:	242b      	movs	r4, #43	; 0x2b
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016de:	2300      	movs	r3, #0
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SYNCPWM_CONFIG;
 80016e4:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016e8:	f007 fd62 	bl	80091b0 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016ec:	4849      	ldr	r0, [pc, #292]	; (8001814 <parseSyncPwmCmd+0x1d4>)
}
 80016ee:	b004      	add	sp, #16
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016f2:	4628      	mov	r0, r5
 80016f4:	2105      	movs	r1, #5
 80016f6:	f000 fe0b 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016fa:	2803      	cmp	r0, #3
 80016fc:	d9c5      	bls.n	800168a <parseSyncPwmCmd+0x4a>
 80016fe:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwm(cmdIn)){
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <parseSyncPwmCmd+0x1f4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d062      	beq.n	80017cc <parseSyncPwmCmd+0x18c>
 8001706:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <parseSyncPwmCmd+0x1f8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d171      	bne.n	80017f0 <parseSyncPwmCmd+0x1b0>
				syncPwmSendDeinit();
 800170c:	f003 fce6 	bl	80050dc <syncPwmSendDeinit>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001710:	4840      	ldr	r0, [pc, #256]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 8001712:	e7a3      	b.n	800165c <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001714:	4628      	mov	r0, r5
 8001716:	2105      	movs	r1, #5
 8001718:	f000 fdfa 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800171c:	2803      	cmp	r0, #3
 800171e:	d9b4      	bls.n	800168a <parseSyncPwmCmd+0x4a>
 8001720:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001722:	4c3c      	ldr	r4, [pc, #240]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 8001724:	42a0      	cmp	r0, r4
 8001726:	d0b0      	beq.n	800168a <parseSyncPwmCmd+0x4a>
 8001728:	4b44      	ldr	r3, [pc, #272]	; (800183c <parseSyncPwmCmd+0x1fc>)
 800172a:	4298      	cmp	r0, r3
 800172c:	d0ad      	beq.n	800168a <parseSyncPwmCmd+0x4a>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 800172e:	b2c1      	uxtb	r1, r0
 8001730:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001734:	f003 fd2a 	bl	800518c <syncPwmSetChannelState>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001738:	4620      	mov	r0, r4
 800173a:	e78f      	b.n	800165c <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800173c:	4628      	mov	r0, r5
 800173e:	2105      	movs	r1, #5
 8001740:	f000 fde6 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001744:	2803      	cmp	r0, #3
 8001746:	d835      	bhi.n	80017b4 <parseSyncPwmCmd+0x174>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001748:	4832      	ldr	r0, [pc, #200]	; (8001814 <parseSyncPwmCmd+0x1d4>)
}
 800174a:	b004      	add	sp, #16
 800174c:	bd70      	pop	{r4, r5, r6, pc}
	switch(cmdIn){
 800174e:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8001752:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8001756:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 800175a:	4298      	cmp	r0, r3
 800175c:	d195      	bne.n	800168a <parseSyncPwmCmd+0x4a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800175e:	4628      	mov	r0, r5
 8001760:	2105      	movs	r1, #5
 8001762:	f000 fdd5 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001766:	2803      	cmp	r0, #3
 8001768:	d9ee      	bls.n	8001748 <parseSyncPwmCmd+0x108>
 800176a:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800176c:	4c29      	ldr	r4, [pc, #164]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 800176e:	42a0      	cmp	r0, r4
 8001770:	d0ea      	beq.n	8001748 <parseSyncPwmCmd+0x108>
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <parseSyncPwmCmd+0x1fc>)
 8001774:	4298      	cmp	r0, r3
 8001776:	d0e7      	beq.n	8001748 <parseSyncPwmCmd+0x108>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 8001778:	b281      	uxth	r1, r0
 800177a:	0c00      	lsrs	r0, r0, #16
 800177c:	f003 fcea 	bl	8005154 <syncPwmChannelConfig>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001780:	4620      	mov	r0, r4
 8001782:	e76b      	b.n	800165c <parseSyncPwmCmd+0x1c>
 8001784:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001786:	4c23      	ldr	r4, [pc, #140]	; (8001814 <parseSyncPwmCmd+0x1d4>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001788:	f000 fe0a 	bl	80023a0 <commBufferReadUInt32>
	}
}

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
	uint32_t makeArray[2];
	makeArray[0] = word1;
 800178c:	e9cd 0602 	strd	r0, r6, [sp, #8]
	makeArray[1] = word2;

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001794:	466b      	mov	r3, sp
 8001796:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800179a:	42a6      	cmp	r6, r4
	return doubleVal;
 800179c:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017a0:	f43f af73 	beq.w	800168a <parseSyncPwmCmd+0x4a>
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <parseSyncPwmCmd+0x1fc>)
 80017a6:	429e      	cmp	r6, r3
 80017a8:	f43f af6f 	beq.w	800168a <parseSyncPwmCmd+0x4a>
			syncPwmSetFreq(freq);
 80017ac:	f003 fcd6 	bl	800515c <syncPwmSetFreq>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017b0:	4620      	mov	r0, r4
 80017b2:	e753      	b.n	800165c <parseSyncPwmCmd+0x1c>
 80017b4:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017b6:	4c17      	ldr	r4, [pc, #92]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 80017b8:	42a0      	cmp	r0, r4
 80017ba:	d0c5      	beq.n	8001748 <parseSyncPwmCmd+0x108>
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <parseSyncPwmCmd+0x1fc>)
 80017be:	4298      	cmp	r0, r3
 80017c0:	d0c2      	beq.n	8001748 <parseSyncPwmCmd+0x108>
			syncPwmChannelNumber((uint8_t)cmdIn);
 80017c2:	b2c0      	uxtb	r0, r0
 80017c4:	f003 fcc0 	bl	8005148 <syncPwmChannelNumber>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017c8:	4620      	mov	r0, r4
 80017ca:	e747      	b.n	800165c <parseSyncPwmCmd+0x1c>
				syncPwmSendInit();
 80017cc:	f003 fc74 	bl	80050b8 <syncPwmSendInit>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 80017d2:	e743      	b.n	800165c <parseSyncPwmCmd+0x1c>
				syncPwmSetStepMode();
 80017d4:	f003 fcdc 	bl	8005190 <syncPwmSetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017d8:	480e      	ldr	r0, [pc, #56]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 80017da:	e73f      	b.n	800165c <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 80017dc:	f103 635f 	add.w	r3, r3, #233832448	; 0xdf00000
 80017e0:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80017e4:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 80017e8:	4298      	cmp	r0, r3
 80017ea:	f43f af37 	beq.w	800165c <parseSyncPwmCmd+0x1c>
 80017ee:	e74c      	b.n	800168a <parseSyncPwmCmd+0x4a>
		if(isSyncPwm(cmdIn)){
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <parseSyncPwmCmd+0x200>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d103      	bne.n	80017fe <parseSyncPwmCmd+0x1be>
				syncPwmSendStart();
 80017f6:	f003 fc83 	bl	8005100 <syncPwmSendStart>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <parseSyncPwmCmd+0x1d4>)
 80017fc:	e72e      	b.n	800165c <parseSyncPwmCmd+0x1c>
		if(isSyncPwm(cmdIn)){
 80017fe:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8001802:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 8001806:	4293      	cmp	r3, r2
 8001808:	f47f af3f 	bne.w	800168a <parseSyncPwmCmd+0x4a>
				syncPwmSendStop();
 800180c:	f003 fc8a 	bl	8005124 <syncPwmSendStop>
 8001810:	e79a      	b.n	8001748 <parseSyncPwmCmd+0x108>
 8001812:	bf00      	nop
 8001814:	5f444e45 	.word	0x5f444e45
 8001818:	4d554e43 	.word	0x4d554e43
 800181c:	50455453 	.word	0x50455453
 8001820:	51524653 	.word	0x51524653
 8001824:	45455453 	.word	0x45455453
 8001828:	44455453 	.word	0x44455453
 800182c:	3f474643 	.word	0x3f474643
 8001830:	200047cc 	.word	0x200047cc
 8001834:	54494e49 	.word	0x54494e49
 8001838:	494e4944 	.word	0x494e4944
 800183c:	5f525245 	.word	0x5f525245
 8001840:	54525453 	.word	0x54525453

08001844 <parseLogAnlysCmd>:
command parseLogAnlysCmd(void){
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001848:	ae02      	add	r6, sp, #8
 800184a:	4630      	mov	r0, r6
 800184c:	2105      	movs	r1, #5
 800184e:	f000 fd5f 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001852:	2803      	cmp	r0, #3
 8001854:	d852      	bhi.n	80018fc <parseLogAnlysCmd+0xb8>
		return CMD_END;
 8001856:	4db0      	ldr	r5, [pc, #704]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 8001858:	4bb0      	ldr	r3, [pc, #704]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 800185a:	2800      	cmp	r0, #0
 800185c:	bf08      	it	eq
 800185e:	461d      	moveq	r5, r3
 8001860:	4caf      	ldr	r4, [pc, #700]	; (8001b20 <parseLogAnlysCmd+0x2dc>)
	while(logAnlys.state == LOGA_DATA_SENDING);
 8001862:	7ca3      	ldrb	r3, [r4, #18]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d0fc      	beq.n	8001862 <parseLogAnlysCmd+0x1e>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 8001868:	7ca3      	ldrb	r3, [r4, #18]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d048      	beq.n	8001900 <parseLogAnlysCmd+0xbc>
	switch (cmdIn)
 800186e:	4bad      	ldr	r3, [pc, #692]	; (8001b24 <parseLogAnlysCmd+0x2e0>)
 8001870:	429d      	cmp	r5, r3
 8001872:	f000 80f0 	beq.w	8001a56 <parseLogAnlysCmd+0x212>
 8001876:	d824      	bhi.n	80018c2 <parseLogAnlysCmd+0x7e>
 8001878:	f103 4376 	add.w	r3, r3, #4127195136	; 0xf6000000
 800187c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001880:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8001884:	429d      	cmp	r5, r3
 8001886:	f000 80cc 	beq.w	8001a22 <parseLogAnlysCmd+0x1de>
 800188a:	d947      	bls.n	800191c <parseLogAnlysCmd+0xd8>
 800188c:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <parseLogAnlysCmd+0x2e4>)
 800188e:	429d      	cmp	r5, r3
 8001890:	f000 808a 	beq.w	80019a8 <parseLogAnlysCmd+0x164>
 8001894:	f103 63de 	add.w	r3, r3, #116391936	; 0x6f00000
 8001898:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800189c:	f203 5301 	addw	r3, r3, #1281	; 0x501
 80018a0:	429d      	cmp	r5, r3
 80018a2:	d123      	bne.n	80018ec <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80018a4:	4630      	mov	r0, r6
 80018a6:	2105      	movs	r1, #5
 80018a8:	f000 fd32 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80018ac:	2803      	cmp	r0, #3
 80018ae:	f200 8108 	bhi.w	8001ac2 <parseLogAnlysCmd+0x27e>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018b2:	7ca3      	ldrb	r3, [r4, #18]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d12b      	bne.n	8001910 <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 80018b8:	f002 fcc4 	bl	8004244 <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 80018bc:	4897      	ldr	r0, [pc, #604]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
}
 80018be:	b004      	add	sp, #16
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
	switch (cmdIn)
 80018c2:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <parseLogAnlysCmd+0x2e8>)
 80018c4:	429d      	cmp	r5, r3
 80018c6:	f000 8098 	beq.w	80019fa <parseLogAnlysCmd+0x1b6>
 80018ca:	d953      	bls.n	8001974 <parseLogAnlysCmd+0x130>
 80018cc:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <parseLogAnlysCmd+0x2ec>)
 80018ce:	429d      	cmp	r5, r3
 80018d0:	d042      	beq.n	8001958 <parseLogAnlysCmd+0x114>
 80018d2:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80018d6:	33fd      	adds	r3, #253	; 0xfd
 80018d8:	429d      	cmp	r5, r3
 80018da:	f000 8085 	beq.w	80019e8 <parseLogAnlysCmd+0x1a4>
 80018de:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 80018e2:	f46f 7283 	mvn.w	r2, #262	; 0x106
 80018e6:	4413      	add	r3, r2
 80018e8:	429d      	cmp	r5, r3
 80018ea:	d03d      	beq.n	8001968 <parseLogAnlysCmd+0x124>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018ec:	7ca3      	ldrb	r3, [r4, #18]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d101      	bne.n	80018f6 <parseLogAnlysCmd+0xb2>
		logAnlysStart();
 80018f2:	f002 fca7 	bl	8004244 <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 80018f6:	2098      	movs	r0, #152	; 0x98
}
 80018f8:	b004      	add	sp, #16
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	9d02      	ldr	r5, [sp, #8]
 80018fe:	e7af      	b.n	8001860 <parseLogAnlysCmd+0x1c>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 8001900:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <parseLogAnlysCmd+0x2f0>)
 8001902:	429d      	cmp	r5, r3
 8001904:	d107      	bne.n	8001916 <parseLogAnlysCmd+0xd2>
		logAnlysSendStop();
 8001906:	f002 fc79 	bl	80041fc <logAnlysSendStop>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 800190a:	7ca3      	ldrb	r3, [r4, #18]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d028      	beq.n	8001962 <parseLogAnlysCmd+0x11e>
	cmdIn = (error > 0) ? error : CMD_END;
 8001910:	4882      	ldr	r0, [pc, #520]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
}
 8001912:	b004      	add	sp, #16
 8001914:	bd70      	pop	{r4, r5, r6, pc}
		logAnlysStop(); 
 8001916:	f002 fcb1 	bl	800427c <logAnlysStop>
 800191a:	e7a8      	b.n	800186e <parseLogAnlysCmd+0x2a>
	switch (cmdIn)
 800191c:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001920:	f46f 6141 	mvn.w	r1, #3088	; 0xc10
 8001924:	440b      	add	r3, r1
 8001926:	429d      	cmp	r5, r3
 8001928:	d04f      	beq.n	80019ca <parseLogAnlysCmd+0x186>
 800192a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800192e:	f603 4311 	addw	r3, r3, #3089	; 0xc11
 8001932:	429d      	cmp	r5, r3
 8001934:	d1da      	bne.n	80018ec <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001936:	4630      	mov	r0, r6
 8001938:	2105      	movs	r1, #5
 800193a:	f000 fce9 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800193e:	2803      	cmp	r0, #3
 8001940:	d9d4      	bls.n	80018ec <parseLogAnlysCmd+0xa8>
 8001942:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001944:	4b75      	ldr	r3, [pc, #468]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 8001946:	429d      	cmp	r5, r3
 8001948:	d0d0      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 800194c:	429d      	cmp	r5, r3
 800194e:	d0cd      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 8001950:	4628      	mov	r0, r5
 8001952:	f002 fcd5 	bl	8004300 <logAnlysSetTriggerChannel>
 8001956:	e09b      	b.n	8001a90 <parseLogAnlysCmd+0x24c>
		logAnlysSendStart();
 8001958:	f002 fc3e 	bl	80041d8 <logAnlysSendStart>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 800195c:	7ca3      	ldrb	r3, [r4, #18]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d1d6      	bne.n	8001910 <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 8001962:	f002 fc6f 	bl	8004244 <logAnlysStart>
 8001966:	e7d3      	b.n	8001910 <parseLogAnlysCmd+0xcc>
		logAnlysSendInit();
 8001968:	f002 fc12 	bl	8004190 <logAnlysSendInit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 800196c:	7ca3      	ldrb	r3, [r4, #18]
 800196e:	2b04      	cmp	r3, #4
 8001970:	d1ce      	bne.n	8001910 <parseLogAnlysCmd+0xcc>
 8001972:	e7f6      	b.n	8001962 <parseLogAnlysCmd+0x11e>
	switch (cmdIn)
 8001974:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001978:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800197c:	f603 3303 	addw	r3, r3, #2819	; 0xb03
 8001980:	429d      	cmp	r5, r3
 8001982:	f040 80af 	bne.w	8001ae4 <parseLogAnlysCmd+0x2a0>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001986:	4630      	mov	r0, r6
 8001988:	2105      	movs	r1, #5
 800198a:	f000 fcc1 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800198e:	2803      	cmp	r0, #3
 8001990:	d9ac      	bls.n	80018ec <parseLogAnlysCmd+0xa8>
 8001992:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 8001996:	429d      	cmp	r5, r3
 8001998:	d0a8      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 800199c:	429d      	cmp	r5, r3
 800199e:	d0a5      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80019a0:	b2a8      	uxth	r0, r5
 80019a2:	f002 fc77 	bl	8004294 <logAnlysSetSamplesNum>
 80019a6:	e073      	b.n	8001a90 <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019a8:	4630      	mov	r0, r6
 80019aa:	2105      	movs	r1, #5
 80019ac:	f000 fcb0 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d99b      	bls.n	80018ec <parseLogAnlysCmd+0xa8>
 80019b4:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 80019b8:	429d      	cmp	r5, r3
 80019ba:	d097      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 80019be:	429d      	cmp	r5, r3
 80019c0:	d094      	beq.n	80018ec <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 80019c2:	4628      	mov	r0, r5
 80019c4:	f002 fc64 	bl	8004290 <logAnlysSetSamplingFreq>
 80019c8:	e062      	b.n	8001a90 <parseLogAnlysCmd+0x24c>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <parseLogAnlysCmd+0x2f4>)
 80019cc:	4631      	mov	r1, r6
 80019ce:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_LOGAN_CONFIG;
 80019d0:	2518      	movs	r5, #24
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019d2:	2300      	movs	r3, #0
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_LOGAN_CONFIG;
 80019d8:	f8ad 5008 	strh.w	r5, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019dc:	f007 fbe8 	bl	80091b0 <xQueueGenericSend>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019e0:	7ca3      	ldrb	r3, [r4, #18]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d194      	bne.n	8001910 <parseLogAnlysCmd+0xcc>
 80019e6:	e7bc      	b.n	8001962 <parseLogAnlysCmd+0x11e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019e8:	2105      	movs	r1, #5
 80019ea:	4630      	mov	r0, r6
 80019ec:	f000 fc90 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019f0:	2803      	cmp	r0, #3
 80019f2:	d837      	bhi.n	8001a64 <parseLogAnlysCmd+0x220>
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 80019f4:	f000 fcd4 	bl	80023a0 <commBufferReadUInt32>
 80019f8:	e778      	b.n	80018ec <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019fa:	4630      	mov	r0, r6
 80019fc:	2105      	movs	r1, #5
 80019fe:	f000 fc87 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a02:	2803      	cmp	r0, #3
 8001a04:	f67f af72 	bls.w	80018ec <parseLogAnlysCmd+0xa8>
 8001a08:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 8001a0c:	429d      	cmp	r5, r3
 8001a0e:	f43f af6d 	beq.w	80018ec <parseLogAnlysCmd+0xa8>
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 8001a14:	429d      	cmp	r5, r3
 8001a16:	f43f af69 	beq.w	80018ec <parseLogAnlysCmd+0xa8>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f002 fc4e 	bl	80042bc <logAnlysSetPretrigger>
 8001a20:	e036      	b.n	8001a90 <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a22:	4630      	mov	r0, r6
 8001a24:	2105      	movs	r1, #5
 8001a26:	f000 fc73 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a2a:	2803      	cmp	r0, #3
 8001a2c:	f67f af41 	bls.w	80018b2 <parseLogAnlysCmd+0x6e>
 8001a30:	9b02      	ldr	r3, [sp, #8]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8001a32:	4a42      	ldr	r2, [pc, #264]	; (8001b3c <parseLogAnlysCmd+0x2f8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d05d      	beq.n	8001af4 <parseLogAnlysCmd+0x2b0>
 8001a38:	f102 62df 	add.w	r2, r2, #116916224	; 0x6f80000
 8001a3c:	f502 4277 	add.w	r2, r2, #63232	; 0xf700
 8001a40:	32f4      	adds	r2, #244	; 0xf4
 8001a42:	4293      	cmp	r3, r2
 8001a44:	f47f af35 	bne.w	80018b2 <parseLogAnlysCmd+0x6e>
				logAnlysSetTriggerFalling();
 8001a48:	f002 fc54 	bl	80042f4 <logAnlysSetTriggerFalling>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a4c:	7ca3      	ldrb	r3, [r4, #18]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	f47f af5e 	bne.w	8001910 <parseLogAnlysCmd+0xcc>
 8001a54:	e730      	b.n	80018b8 <parseLogAnlysCmd+0x74>
		logAnlysSendDeinit();
 8001a56:	f002 fbad 	bl	80041b4 <logAnlysSendDeinit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a5a:	7ca3      	ldrb	r3, [r4, #18]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	f47f af57 	bne.w	8001910 <parseLogAnlysCmd+0xcc>
 8001a62:	e77e      	b.n	8001962 <parseLogAnlysCmd+0x11e>
 8001a64:	9d02      	ldr	r5, [sp, #8]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001a66:	f000 fc9b 	bl	80023a0 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001a6a:	e9cd 0502 	strd	r0, r5, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001a6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001a72:	466b      	mov	r3, sp
 8001a74:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <parseLogAnlysCmd+0x2d8>)
 8001a7a:	429d      	cmp	r5, r3
	return doubleVal;
 8001a7c:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a80:	f43f af34 	beq.w	80018ec <parseLogAnlysCmd+0xa8>
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <parseLogAnlysCmd+0x2d4>)
 8001a86:	429d      	cmp	r5, r3
 8001a88:	f43f af30 	beq.w	80018ec <parseLogAnlysCmd+0xa8>
			logAnlysSetPosttrigger(postTrigTime);
 8001a8c:	f002 fc2a 	bl	80042e4 <logAnlysSetPosttrigger>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a90:	7ca3      	ldrb	r3, [r4, #18]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	f43f af10 	beq.w	80018b8 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <parseLogAnlysCmd+0x2fc>)
 8001a9a:	429d      	cmp	r5, r3
 8001a9c:	f43f af0c 	beq.w	80018b8 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 8001aa0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001aa4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001aa8:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8001aac:	f025 6200 	bic.w	r2, r5, #134217728	; 0x8000000
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f43f af56 	beq.w	8001962 <parseLogAnlysCmd+0x11e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 8001ab6:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8001aba:	429d      	cmp	r5, r3
 8001abc:	f43f af51 	beq.w	8001962 <parseLogAnlysCmd+0x11e>
 8001ac0:	e726      	b.n	8001910 <parseLogAnlysCmd+0xcc>
 8001ac2:	9d02      	ldr	r5, [sp, #8]
		if(isLogAnlysTriggerMode(cmdIn)){
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <parseLogAnlysCmd+0x300>)
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	d009      	beq.n	8001ade <parseLogAnlysCmd+0x29a>
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <parseLogAnlysCmd+0x304>)
 8001acc:	429d      	cmp	r5, r3
 8001ace:	d114      	bne.n	8001afa <parseLogAnlysCmd+0x2b6>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ad4:	7ca3      	ldrb	r3, [r4, #18]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	f47f af1a 	bne.w	8001910 <parseLogAnlysCmd+0xcc>
 8001adc:	e6ec      	b.n	80018b8 <parseLogAnlysCmd+0x74>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	7523      	strb	r3, [r4, #20]
 8001ae2:	e6e6      	b.n	80018b2 <parseLogAnlysCmd+0x6e>
	switch (cmdIn)
 8001ae4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	f5a3 4379 	sub.w	r3, r3, #63744	; 0xf900
 8001aec:	429d      	cmp	r5, r3
 8001aee:	f47f aefd 	bne.w	80018ec <parseLogAnlysCmd+0xa8>
 8001af2:	e708      	b.n	8001906 <parseLogAnlysCmd+0xc2>
				logAnlysSetTriggerRising();
 8001af4:	f002 fbf8 	bl	80042e8 <logAnlysSetTriggerRising>
 8001af8:	e6db      	b.n	80018b2 <parseLogAnlysCmd+0x6e>
		if(isLogAnlysTriggerMode(cmdIn)){
 8001afa:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001afe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001b02:	f2a3 53fb 	subw	r3, r3, #1531	; 0x5fb
 8001b06:	429d      	cmp	r5, r3
 8001b08:	d1c2      	bne.n	8001a90 <parseLogAnlysCmd+0x24c>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b0e:	7ca3      	ldrb	r3, [r4, #18]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	f47f aefd 	bne.w	8001910 <parseLogAnlysCmd+0xcc>
 8001b16:	e6cf      	b.n	80018b8 <parseLogAnlysCmd+0x74>
 8001b18:	5f525245 	.word	0x5f525245
 8001b1c:	5f444e45 	.word	0x5f444e45
 8001b20:	20005438 	.word	0x20005438
 8001b24:	4e494544 	.word	0x4e494544
 8001b28:	46504d53 	.word	0x46504d53
 8001b2c:	54455250 	.word	0x54455250
 8001b30:	54525453 	.word	0x54525453
 8001b34:	504f5453 	.word	0x504f5453
 8001b38:	200047cc 	.word	0x200047cc
 8001b3c:	45534952 	.word	0x45534952
 8001b40:	54534f50 	.word	0x54534f50
 8001b44:	4f545541 	.word	0x4f545541
 8001b48:	4d524f4e 	.word	0x4d524f4e

08001b4c <parseGeneratorCmd>:
command parseGeneratorCmd(void){
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001b52:	ad02      	add	r5, sp, #8
 8001b54:	4628      	mov	r0, r5
 8001b56:	2105      	movs	r1, #5
 8001b58:	f000 fbda 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001b5c:	2803      	cmp	r0, #3
 8001b5e:	d807      	bhi.n	8001b70 <parseGeneratorCmd+0x24>
		cmdIn=CMD_END;
 8001b60:	4bc0      	ldr	r3, [pc, #768]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001b62:	2800      	cmp	r0, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2064      	movne	r0, #100	; 0x64
 8001b68:	4618      	moveq	r0, r3
}
 8001b6a:	b004      	add	sp, #16
 8001b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b70:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8001b72:	4abd      	ldr	r2, [pc, #756]	; (8001e68 <parseGeneratorCmd+0x31c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	f000 813e 	beq.w	8001df6 <parseGeneratorCmd+0x2aa>
 8001b7a:	d833      	bhi.n	8001be4 <parseGeneratorCmd+0x98>
 8001b7c:	4abb      	ldr	r2, [pc, #748]	; (8001e6c <parseGeneratorCmd+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	f000 812c 	beq.w	8001ddc <parseGeneratorCmd+0x290>
 8001b84:	d84c      	bhi.n	8001c20 <parseGeneratorCmd+0xd4>
 8001b86:	4aba      	ldr	r2, [pc, #744]	; (8001e70 <parseGeneratorCmd+0x324>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	f000 813c 	beq.w	8001e06 <parseGeneratorCmd+0x2ba>
 8001b8e:	f240 818b 	bls.w	8001ea8 <parseGeneratorCmd+0x35c>
 8001b92:	4ab8      	ldr	r2, [pc, #736]	; (8001e74 <parseGeneratorCmd+0x328>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f000 80b4 	beq.w	8001d02 <parseGeneratorCmd+0x1b6>
 8001b9a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8001b9e:	f202 22fb 	addw	r2, r2, #763	; 0x2fb
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f040 81e6 	bne.w	8001f74 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001ba8:	2105      	movs	r1, #5
 8001baa:	4628      	mov	r0, r5
 8001bac:	f000 fbb0 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001bb0:	2803      	cmp	r0, #3
 8001bb2:	f240 812e 	bls.w	8001e12 <parseGeneratorCmd+0x2c6>
 8001bb6:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bb8:	4caa      	ldr	r4, [pc, #680]	; (8001e64 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001bba:	f000 fbf1 	bl	80023a0 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001bbe:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001bc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bc6:	466b      	mov	r3, sp
 8001bc8:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bcc:	42a6      	cmp	r6, r4
	return doubleVal;
 8001bce:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bd2:	d021      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
 8001bd4:	4ba8      	ldr	r3, [pc, #672]	; (8001e78 <parseGeneratorCmd+0x32c>)
 8001bd6:	429e      	cmp	r6, r3
 8001bd8:	d01e      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f002 f814 	bl	8003c08 <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001be0:	4620      	mov	r0, r4
 8001be2:	e7c2      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001be4:	4aa5      	ldr	r2, [pc, #660]	; (8001e7c <parseGeneratorCmd+0x330>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d06f      	beq.n	8001cca <parseGeneratorCmd+0x17e>
 8001bea:	f200 809f 	bhi.w	8001d2c <parseGeneratorCmd+0x1e0>
 8001bee:	f1a2 7241 	sub.w	r2, r2, #50593792	; 0x3040000
 8001bf2:	f6a2 2203 	subw	r2, r2, #2563	; 0xa03
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	f000 80d0 	beq.w	8001d9c <parseGeneratorCmd+0x250>
 8001bfc:	f240 8172 	bls.w	8001ee4 <parseGeneratorCmd+0x398>
 8001c00:	4a9f      	ldr	r2, [pc, #636]	; (8001e80 <parseGeneratorCmd+0x334>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d079      	beq.n	8001cfa <parseGeneratorCmd+0x1ae>
 8001c06:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 8001c0a:	f6a2 22ef 	subw	r2, r2, #2799	; 0xaef
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f040 81b0 	bne.w	8001f74 <parseGeneratorCmd+0x428>
		genStop();
 8001c14:	f002 fa18 	bl	8004048 <genStop>
		cmdIn=CMD_END;
 8001c18:	4892      	ldr	r0, [pc, #584]	; (8001e64 <parseGeneratorCmd+0x318>)
}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch(cmdIn){
 8001c20:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <parseGeneratorCmd+0x338>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f000 80eb 	beq.w	8001dfe <parseGeneratorCmd+0x2b2>
 8001c28:	f240 8167 	bls.w	8001efa <parseGeneratorCmd+0x3ae>
 8001c2c:	4a96      	ldr	r2, [pc, #600]	; (8001e88 <parseGeneratorCmd+0x33c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <parseGeneratorCmd+0x11a>
 8001c32:	f102 727c 	add.w	r2, r2, #66060288	; 0x3f00000
 8001c36:	f602 6209 	addw	r2, r2, #3593	; 0xe09
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 819a 	bne.w	8001f74 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c40:	4628      	mov	r0, r5
 8001c42:	2105      	movs	r1, #5
 8001c44:	f000 fb64 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c48:	2803      	cmp	r0, #3
 8001c4a:	d9e5      	bls.n	8001c18 <parseGeneratorCmd+0xcc>
 8001c4c:	9b02      	ldr	r3, [sp, #8]
		if(isGeneratorMode(cmdIn)){
 8001c4e:	4a8f      	ldr	r2, [pc, #572]	; (8001e8c <parseGeneratorCmd+0x340>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f000 8177 	beq.w	8001f44 <parseGeneratorCmd+0x3f8>
 8001c56:	4a8e      	ldr	r2, [pc, #568]	; (8001e90 <parseGeneratorCmd+0x344>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d1dd      	bne.n	8001c18 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_DAC);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f001 ff9f 	bl	8003ba0 <genSetMode>
		cmdIn=CMD_END;
 8001c62:	4880      	ldr	r0, [pc, #512]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001c64:	e781      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c66:	2105      	movs	r1, #5
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f000 fb51 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c6e:	2803      	cmp	r0, #3
 8001c70:	f200 80d6 	bhi.w	8001e20 <parseGeneratorCmd+0x2d4>
	}else if(bytesRead == 0){
 8001c74:	2800      	cmp	r0, #0
 8001c76:	f244 534e 	movw	r3, #17742	; 0x454e
 8001c7a:	f244 5752 	movw	r7, #17746	; 0x4552
 8001c7e:	bf13      	iteet	ne
 8001c80:	f04f 0852 	movne.w	r8, #82	; 0x52
 8001c84:	461f      	moveq	r7, r3
 8001c86:	f04f 0844 	moveq.w	r8, #68	; 0x44
 8001c8a:	26a4      	movne	r6, #164	; 0xa4
 8001c8c:	bf08      	it	eq
 8001c8e:	2688      	moveq	r6, #136	; 0x88
 8001c90:	235f      	movs	r3, #95	; 0x5f
		chan=cmdIn>>24;
 8001c92:	f88d 3008 	strb.w	r3, [sp, #8]
 8001c96:	f241 3488 	movw	r4, #5000	; 0x1388
 8001c9a:	e004      	b.n	8001ca6 <parseGeneratorCmd+0x15a>
 8001c9c:	3c01      	subs	r4, #1
 8001c9e:	b2a4      	uxth	r4, r4
			osDelay(1);
 8001ca0:	f007 f9ec 	bl	800907c <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001ca4:	b12c      	cbz	r4, 8001cb2 <parseGeneratorCmd+0x166>
 8001ca6:	f000 fc2b 	bl	8002500 <getBytesAvailable>
 8001caa:	42b0      	cmp	r0, r6
			osDelay(1);
 8001cac:	f04f 0001 	mov.w	r0, #1
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001cb0:	ddf4      	ble.n	8001c9c <parseGeneratorCmd+0x150>
		if(getBytesAvailable()<length*2+1){
 8001cb2:	f000 fc25 	bl	8002500 <getBytesAvailable>
 8001cb6:	42b0      	cmp	r0, r6
 8001cb8:	f300 812a 	bgt.w	8001f10 <parseGeneratorCmd+0x3c4>
			while(commBufferReadByte(&chan)==0);
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	f000 fb05 	bl	80022cc <commBufferReadByte>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d0fa      	beq.n	8001cbc <parseGeneratorCmd+0x170>
 8001cc6:	2068      	movs	r0, #104	; 0x68
 8001cc8:	e74f      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001cca:	4628      	mov	r0, r5
 8001ccc:	2105      	movs	r1, #5
 8001cce:	f000 fb1f 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001cd2:	2803      	cmp	r0, #3
 8001cd4:	d9a0      	bls.n	8001c18 <parseGeneratorCmd+0xcc>
 8001cd6:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001cd8:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001cda:	4298      	cmp	r0, r3
 8001cdc:	d09c      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <parseGeneratorCmd+0x32c>)
 8001ce0:	4298      	cmp	r0, r3
 8001ce2:	d099      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001ce4:	b2c1      	uxtb	r1, r0
 8001ce6:	0a00      	lsrs	r0, r0, #8
 8001ce8:	f001 fffc 	bl	8003ce4 <genSetFrequency>
 8001cec:	4604      	mov	r4, r0
	if(error>0){
 8001cee:	2c00      	cmp	r4, #0
 8001cf0:	d092      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
 8001cf2:	4620      	mov	r0, r4
}
 8001cf4:	b004      	add	sp, #16
 8001cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		genSetOutputBuffer();
 8001cfa:	f002 f8c7 	bl	8003e8c <genSetOutputBuffer>
		cmdIn=CMD_END;
 8001cfe:	4859      	ldr	r0, [pc, #356]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001d00:	e733      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d02:	4628      	mov	r0, r5
 8001d04:	2105      	movs	r1, #5
 8001d06:	f000 fb03 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d0a:	2803      	cmp	r0, #3
 8001d0c:	d984      	bls.n	8001c18 <parseGeneratorCmd+0xcc>
 8001d0e:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d10:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001d12:	4298      	cmp	r0, r3
 8001d14:	d080      	beq.n	8001c18 <parseGeneratorCmd+0xcc>
 8001d16:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <parseGeneratorCmd+0x32c>)
 8001d18:	4298      	cmp	r0, r3
 8001d1a:	f43f af7d 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 2);
 8001d1e:	2102      	movs	r1, #2
 8001d20:	f002 f83c 	bl	8003d9c <genSetLength>
 8001d24:	4604      	mov	r4, r0
	if(error>0){
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	d1e3      	bne.n	8001cf2 <parseGeneratorCmd+0x1a6>
 8001d2a:	e775      	b.n	8001c18 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <parseGeneratorCmd+0x344>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01a      	beq.n	8001d68 <parseGeneratorCmd+0x21c>
 8001d32:	f200 8114 	bhi.w	8001f5e <parseGeneratorCmd+0x412>
 8001d36:	f102 4275 	add.w	r2, r2, #4110417920	; 0xf5000000
 8001d3a:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8001d3e:	f202 220e 	addw	r2, r2, #526	; 0x20e
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00c      	beq.n	8001d60 <parseGeneratorCmd+0x214>
 8001d46:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
 8001d4a:	f202 1201 	addw	r2, r2, #257	; 0x101
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f040 8110 	bne.w	8001f74 <parseGeneratorCmd+0x428>
		genStart();
 8001d54:	f002 f966 	bl	8004024 <genStart>
		genStatusOK();
 8001d58:	f002 f806 	bl	8003d68 <genStatusOK>
		cmdIn=CMD_END;
 8001d5c:	4841      	ldr	r0, [pc, #260]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001d5e:	e704      	b.n	8001b6a <parseGeneratorCmd+0x1e>
		genReset();
 8001d60:	f002 f984 	bl	800406c <genReset>
		cmdIn=CMD_END;
 8001d64:	483f      	ldr	r0, [pc, #252]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001d66:	e700      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d68:	4628      	mov	r0, r5
 8001d6a:	2105      	movs	r1, #5
 8001d6c:	f000 fad0 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d70:	2803      	cmp	r0, #3
 8001d72:	d851      	bhi.n	8001e18 <parseGeneratorCmd+0x2cc>
	}else if(bytesRead == 0){
 8001d74:	2800      	cmp	r0, #0
 8001d76:	f645 7244 	movw	r2, #24388	; 0x5f44
 8001d7a:	f644 6345 	movw	r3, #20037	; 0x4e45
 8001d7e:	f645 7152 	movw	r1, #24402	; 0x5f52
 8001d82:	f245 2045 	movw	r0, #21061	; 0x5245
 8001d86:	bf04      	itt	eq
 8001d88:	4611      	moveq	r1, r2
 8001d8a:	4618      	moveq	r0, r3
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001d8c:	f002 f882 	bl	8003e94 <genSetDAC>
 8001d90:	4604      	mov	r4, r0
		genStatusOK();
 8001d92:	f001 ffe9 	bl	8003d68 <genStatusOK>
	if(error>0){
 8001d96:	2c00      	cmp	r4, #0
 8001d98:	d1ab      	bne.n	8001cf2 <parseGeneratorCmd+0x1a6>
 8001d9a:	e73d      	b.n	8001c18 <parseGeneratorCmd+0xcc>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	2105      	movs	r1, #5
 8001da0:	f000 fab6 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001da4:	2803      	cmp	r0, #3
 8001da6:	f67f af37 	bls.w	8001c18 <parseGeneratorCmd+0xcc>
 8001daa:	9a02      	ldr	r2, [sp, #8]
		if(isChannel(cmdIn)){
 8001dac:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <parseGeneratorCmd+0x348>)
 8001dae:	4413      	add	r3, r2
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f63f af31 	bhi.w	8001c18 <parseGeneratorCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <parseGeneratorCmd+0x34c>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f000 80c8 	beq.w	8001f4e <parseGeneratorCmd+0x402>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <parseGeneratorCmd+0x350>)
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f000 80d9 	beq.w	8001f78 <parseGeneratorCmd+0x42c>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <parseGeneratorCmd+0x354>)
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 80b3 	bne.w	8001f34 <parseGeneratorCmd+0x3e8>
				error=genSetNumOfChannels(3);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f002 f818 	bl	8003e04 <genSetNumOfChannels>
 8001dd4:	4604      	mov	r4, r0
	if(error>0){
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	d18b      	bne.n	8001cf2 <parseGeneratorCmd+0x1a6>
 8001dda:	e71d      	b.n	8001c18 <parseGeneratorCmd+0xcc>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <parseGeneratorCmd+0x358>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	4629      	mov	r1, r5
		passMsg = MSG_GEN_PWM_CONFIG;
 8001de2:	2420      	movs	r4, #32
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001de4:	2300      	movs	r3, #0
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_GEN_PWM_CONFIG;
 8001dea:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001dee:	f007 f9df 	bl	80091b0 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001df2:	481c      	ldr	r0, [pc, #112]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001df4:	e711      	b.n	8001c1a <parseGeneratorCmd+0xce>
		genUnsetOutputBuffer();
 8001df6:	f002 f84b 	bl	8003e90 <genUnsetOutputBuffer>
		cmdIn=CMD_END;
 8001dfa:	481a      	ldr	r0, [pc, #104]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001dfc:	e6b5      	b.n	8001b6a <parseGeneratorCmd+0x1e>
		genSendRealSamplingFreq();
 8001dfe:	f001 ff8f 	bl	8003d20 <genSendRealSamplingFreq>
		cmdIn=CMD_END;
 8001e02:	4818      	ldr	r0, [pc, #96]	; (8001e64 <parseGeneratorCmd+0x318>)
 8001e04:	e6b1      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001e06:	2105      	movs	r1, #5
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f000 fa81 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001e0e:	2803      	cmp	r0, #3
 8001e10:	d80f      	bhi.n	8001e32 <parseGeneratorCmd+0x2e6>
		secondHalfOfDouble = commBufferReadUInt32();
 8001e12:	f000 fac5 	bl	80023a0 <commBufferReadUInt32>
 8001e16:	e6ff      	b.n	8001c18 <parseGeneratorCmd+0xcc>
 8001e18:	9902      	ldr	r1, [sp, #8]
 8001e1a:	b288      	uxth	r0, r1
 8001e1c:	0c09      	lsrs	r1, r1, #16
 8001e1e:	e7b5      	b.n	8001d8c <parseGeneratorCmd+0x240>
 8001e20:	9b02      	ldr	r3, [sp, #8]
 8001e22:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8001e26:	ba5f      	rev16	r7, r3
 8001e28:	004e      	lsls	r6, r1, #1
 8001e2a:	4688      	mov	r8, r1
 8001e2c:	b2bf      	uxth	r7, r7
 8001e2e:	0e1b      	lsrs	r3, r3, #24
 8001e30:	e72f      	b.n	8001c92 <parseGeneratorCmd+0x146>
 8001e32:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001e36:	f000 fab3 	bl	80023a0 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001e3a:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001e3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e42:	466b      	mov	r3, sp
 8001e44:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e48:	42a6      	cmp	r6, r4
	return doubleVal;
 8001e4a:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e4e:	f43f aee3 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <parseGeneratorCmd+0x32c>)
 8001e54:	429e      	cmp	r6, r3
 8001e56:	f43f aedf 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f001 fed4 	bl	8003c08 <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001e60:	4620      	mov	r0, r4
 8001e62:	e682      	b.n	8001b6a <parseGeneratorCmd+0x1e>
 8001e64:	5f444e45 	.word	0x5f444e45
 8001e68:	464f5f42 	.word	0x464f5f42
 8001e6c:	3f464350 	.word	0x3f464350
 8001e70:	31524647 	.word	0x31524647
 8001e74:	3248434c 	.word	0x3248434c
 8001e78:	5f525245 	.word	0x5f525245
 8001e7c:	51455246 	.word	0x51455246
 8001e80:	4e4f5f42 	.word	0x4e4f5f42
 8001e84:	3f515246 	.word	0x3f515246
 8001e88:	41544144 	.word	0x41544144
 8001e8c:	5f4d5750 	.word	0x5f4d5750
 8001e90:	5f434144 	.word	0x5f434144
 8001e94:	a0b7bccf 	.word	0xa0b7bccf
 8001e98:	5f484331 	.word	0x5f484331
 8001e9c:	5f484332 	.word	0x5f484332
 8001ea0:	5f484333 	.word	0x5f484333
 8001ea4:	200047cc 	.word	0x200047cc
	switch(cmdIn){
 8001ea8:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001eac:	f2a2 22fb 	subw	r2, r2, #763	; 0x2fb
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d15f      	bne.n	8001f74 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	2105      	movs	r1, #5
 8001eb8:	f000 fa2a 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001ebc:	2803      	cmp	r0, #3
 8001ebe:	f67f aeab 	bls.w	8001c18 <parseGeneratorCmd+0xcc>
 8001ec2:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <parseGeneratorCmd+0x444>)
 8001ec6:	4298      	cmp	r0, r3
 8001ec8:	f43f aea6 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <parseGeneratorCmd+0x448>)
 8001ece:	4298      	cmp	r0, r3
 8001ed0:	f43f aea2 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 1);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	f001 ff61 	bl	8003d9c <genSetLength>
 8001eda:	4604      	mov	r4, r0
	if(error>0){
 8001edc:	2c00      	cmp	r4, #0
 8001ede:	f47f af08 	bne.w	8001cf2 <parseGeneratorCmd+0x1a6>
 8001ee2:	e699      	b.n	8001c18 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001ee4:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8001ee8:	f502 3242 	add.w	r2, r2, #198656	; 0x30800
 8001eec:	3204      	adds	r2, #4
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d140      	bne.n	8001f74 <parseGeneratorCmd+0x428>
		generator_deinit();
 8001ef2:	f001 fe79 	bl	8003be8 <generator_deinit>
		cmdIn=CMD_END;
 8001ef6:	4826      	ldr	r0, [pc, #152]	; (8001f90 <parseGeneratorCmd+0x444>)
 8001ef8:	e637      	b.n	8001b6a <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001efa:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001efe:	f6a2 4203 	subw	r2, r2, #3075	; 0xc03
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d136      	bne.n	8001f74 <parseGeneratorCmd+0x428>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <parseGeneratorCmd+0x44c>)
 8001f08:	4629      	mov	r1, r5
 8001f0a:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_GEN_CONFIG;
 8001f0c:	241f      	movs	r4, #31
 8001f0e:	e769      	b.n	8001de4 <parseGeneratorCmd+0x298>
			error=genSetData(index,length*2,chan);
 8001f10:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8001f14:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001f18:	4638      	mov	r0, r7
 8001f1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f1e:	f001 fe99 	bl	8003c54 <genSetData>
			if (error){
 8001f22:	4604      	mov	r4, r0
 8001f24:	b380      	cbz	r0, 8001f88 <parseGeneratorCmd+0x43c>
				while(commBufferReadByte(&chan)==0);
 8001f26:	4628      	mov	r0, r5
 8001f28:	f000 f9d0 	bl	80022cc <commBufferReadByte>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d0fa      	beq.n	8001f26 <parseGeneratorCmd+0x3da>
 8001f30:	4620      	mov	r0, r4
 8001f32:	e6df      	b.n	8001cf4 <parseGeneratorCmd+0x1a8>
				error=genSetNumOfChannels(4);
 8001f34:	2004      	movs	r0, #4
 8001f36:	f001 ff65 	bl	8003e04 <genSetNumOfChannels>
 8001f3a:	4604      	mov	r4, r0
	if(error>0){
 8001f3c:	2c00      	cmp	r4, #0
 8001f3e:	f47f aed8 	bne.w	8001cf2 <parseGeneratorCmd+0x1a6>
 8001f42:	e669      	b.n	8001c18 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_PWM);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f001 fe2b 	bl	8003ba0 <genSetMode>
		cmdIn=CMD_END;
 8001f4a:	4811      	ldr	r0, [pc, #68]	; (8001f90 <parseGeneratorCmd+0x444>)
 8001f4c:	e60d      	b.n	8001b6a <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f001 ff58 	bl	8003e04 <genSetNumOfChannels>
 8001f54:	4604      	mov	r4, r0
	if(error>0){
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	f47f aecb 	bne.w	8001cf2 <parseGeneratorCmd+0x1a6>
 8001f5c:	e65c      	b.n	8001c18 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <parseGeneratorCmd+0x444>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	f43f ae59 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
 8001f66:	f502 221f 	add.w	r2, r2, #651264	; 0x9f000
 8001f6a:	f202 7202 	addw	r2, r2, #1794	; 0x702
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	f43f ae52 	beq.w	8001c18 <parseGeneratorCmd+0xcc>
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	e5f8      	b.n	8001b6a <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(2);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f001 ff43 	bl	8003e04 <genSetNumOfChannels>
 8001f7e:	4604      	mov	r4, r0
	if(error>0){
 8001f80:	2c00      	cmp	r4, #0
 8001f82:	f47f aeb6 	bne.w	8001cf2 <parseGeneratorCmd+0x1a6>
 8001f86:	e647      	b.n	8001c18 <parseGeneratorCmd+0xcc>
				genDataOKSendNext();
 8001f88:	f001 fedc 	bl	8003d44 <genDataOKSendNext>
		cmdIn=CMD_END;
 8001f8c:	4800      	ldr	r0, [pc, #0]	; (8001f90 <parseGeneratorCmd+0x444>)
 8001f8e:	e5ec      	b.n	8001b6a <parseGeneratorCmd+0x1e>
 8001f90:	5f444e45 	.word	0x5f444e45
 8001f94:	5f525245 	.word	0x5f525245
 8001f98:	200047cc 	.word	0x200047cc

08001f9c <CmdParserTask>:
void CmdParserTask(void const *argument){
 8001f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa0:	b085      	sub	sp, #20
	uint16_t message = 0xFFFF;
 8001fa2:	f10d 0910 	add.w	r9, sp, #16
 8001fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8001fb0:	f829 3d0a 	strh.w	r3, [r9, #-10]!
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001fb4:	f007 f8b8 	bl	8009128 <xQueueGenericCreate>
 8001fb8:	f8df a308 	ldr.w	sl, [pc, #776]	; 80022c4 <CmdParserTask+0x328>
				switch (BUILD_CMD(cmdIn)){
 8001fbc:	f8df b308 	ldr.w	fp, [pc, #776]	; 80022c8 <CmdParserTask+0x32c>
	cmdParserMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8001fc0:	f8ca 0000 	str.w	r0, [sl]
 8001fc4:	e001      	b.n	8001fca <CmdParserTask+0x2e>
 8001fc6:	f8da 0000 	ldr.w	r0, [sl]
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	f007 fb95 	bl	8009700 <xQueueGenericReceive>
		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8001fd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fda:	2b31      	cmp	r3, #49	; 0x31
 8001fdc:	d1f3      	bne.n	8001fc6 <CmdParserTask+0x2a>
 8001fde:	46a0      	mov	r8, r4
 8001fe0:	462c      	mov	r4, r5
 8001fe2:	4635      	mov	r5, r6
 8001fe4:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8001fe8:	e003      	b.n	8001ff2 <CmdParserTask+0x56>
 8001fea:	46a0      	mov	r8, r4
 8001fec:	462c      	mov	r4, r5
 8001fee:	4635      	mov	r5, r6
 8001ff0:	461e      	mov	r6, r3
				byteRead = commBufferReadByte(&chr);
 8001ff2:	f10d 0005 	add.w	r0, sp, #5
 8001ff6:	f000 f969 	bl	80022cc <commBufferReadByte>
			}while(byteRead==0 && chr != ':' && chr != ';');
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d1e3      	bne.n	8001fc6 <CmdParserTask+0x2a>
 8001ffe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002002:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 8002006:	2a01      	cmp	r2, #1
 8002008:	d8ef      	bhi.n	8001fea <CmdParserTask+0x4e>
				switch (BUILD_CMD(cmdIn)){
 800200a:	042b      	lsls	r3, r5, #16
 800200c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002010:	ea43 0808 	orr.w	r8, r3, r8
 8002014:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
 8002018:	45d8      	cmp	r8, fp
 800201a:	4607      	mov	r7, r0
 800201c:	f000 80be 	beq.w	800219c <CmdParserTask+0x200>
 8002020:	dc17      	bgt.n	8002052 <CmdParserTask+0xb6>
 8002022:	4b9a      	ldr	r3, [pc, #616]	; (800228c <CmdParserTask+0x2f0>)
 8002024:	4598      	cmp	r8, r3
 8002026:	f000 80f9 	beq.w	800221c <CmdParserTask+0x280>
 800202a:	dc3e      	bgt.n	80020aa <CmdParserTask+0x10e>
 800202c:	4b98      	ldr	r3, [pc, #608]	; (8002290 <CmdParserTask+0x2f4>)
 800202e:	4598      	cmp	r8, r3
 8002030:	f000 80f7 	beq.w	8002222 <CmdParserTask+0x286>
 8002034:	4b97      	ldr	r3, [pc, #604]	; (8002294 <CmdParserTask+0x2f8>)
 8002036:	4598      	cmp	r8, r3
 8002038:	f040 80d0 	bne.w	80021dc <CmdParserTask+0x240>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800203c:	463b      	mov	r3, r7
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800203e:	4896      	ldr	r0, [pc, #600]	; (8002298 <CmdParserTask+0x2fc>)
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	a902      	add	r1, sp, #8
 8002046:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SYSTEM_VERSION;
 8002048:	f8ad 7008 	strh.w	r7, [sp, #8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800204c:	f007 f8b0 	bl	80091b0 <xQueueGenericSend>
					break;
 8002050:	e7b9      	b.n	8001fc6 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <CmdParserTask+0x300>)
 8002054:	4598      	cmp	r8, r3
 8002056:	f000 80a9 	beq.w	80021ac <CmdParserTask+0x210>
 800205a:	dc6c      	bgt.n	8002136 <CmdParserTask+0x19a>
 800205c:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 8002060:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 8002064:	4598      	cmp	r8, r3
 8002066:	f000 8091 	beq.w	800218c <CmdParserTask+0x1f0>
 800206a:	f103 733f 	add.w	r3, r3, #50069504	; 0x2fc0000
 800206e:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8002072:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002076:	4598      	cmp	r8, r3
 8002078:	f040 80b0 	bne.w	80021dc <CmdParserTask+0x240>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800207c:	2105      	movs	r1, #5
 800207e:	a802      	add	r0, sp, #8
 8002080:	f000 f946 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8002084:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002086:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 8002088:	f200 80ed 	bhi.w	8002266 <CmdParserTask+0x2ca>
 800208c:	4a82      	ldr	r2, [pc, #520]	; (8002298 <CmdParserTask+0x2fc>)
 800208e:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 80d2 	bne.w	800223a <CmdParserTask+0x29e>
		uint16_t passMsg = MSG_ACK;
 8002096:	2734      	movs	r7, #52	; 0x34
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002098:	2300      	movs	r3, #0
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	a902      	add	r1, sp, #8
		uint16_t passMsg = MSG_ACK;
 80020a0:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020a4:	f007 f884 	bl	80091b0 <xQueueGenericSend>
 80020a8:	e78d      	b.n	8001fc6 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <CmdParserTask+0x304>)
 80020ac:	4598      	cmp	r8, r3
 80020ae:	f000 80aa 	beq.w	8002206 <CmdParserTask+0x26a>
 80020b2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80020b6:	f203 63f9 	addw	r3, r3, #1785	; 0x6f9
 80020ba:	4598      	cmp	r8, r3
 80020bc:	f040 808e 	bne.w	80021dc <CmdParserTask+0x240>
					tempCmd = parseLogAnlysCmd();
 80020c0:	f7ff fbc0 	bl	8001844 <parseLogAnlysCmd>
	if(cmd == CMD_END){
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <CmdParserTask+0x308>)
 80020c6:	4298      	cmp	r0, r3
 80020c8:	d065      	beq.n	8002196 <CmdParserTask+0x1fa>
		err[1]=(cmd/100)%10+48;
 80020ca:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <CmdParserTask+0x30c>)
 80020cc:	4977      	ldr	r1, [pc, #476]	; (80022ac <CmdParserTask+0x310>)
		err[4]=0;
 80020ce:	f88d 700c 	strb.w	r7, [sp, #12]
		err[1]=(cmd/100)%10+48;
 80020d2:	fba1 3100 	umull	r3, r1, r1, r0
		err[2]=(cmd/10)%10+48;
 80020d6:	fba2 c300 	umull	ip, r3, r2, r0
		err[1]=(cmd/100)%10+48;
 80020da:	0949      	lsrs	r1, r1, #5
		err[2]=(cmd/10)%10+48;
 80020dc:	08db      	lsrs	r3, r3, #3
		err[1]=(cmd/100)%10+48;
 80020de:	fba2 ec01 	umull	lr, ip, r2, r1
		err[2]=(cmd/10)%10+48;
 80020e2:	fba2 e203 	umull	lr, r2, r2, r3
		err[1]=(cmd/100)%10+48;
 80020e6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
		err[2]=(cmd/10)%10+48;
 80020ea:	08d2      	lsrs	r2, r2, #3
 80020ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
		err[1]=(cmd/100)%10+48;
 80020f0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
		err[3]=cmd%10+48;
 80020f4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
		err[1]=(cmd/100)%10+48;
 80020f8:	eba1 0c4c 	sub.w	ip, r1, ip, lsl #1
		err[2]=(cmd/10)%10+48;
 80020fc:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
		err[3]=cmd%10+48;
 8002100:	eba0 024e 	sub.w	r2, r0, lr, lsl #1
		err[2]=(cmd/10)%10+48;
 8002104:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8002108:	f88d 000a 	strb.w	r0, [sp, #10]
		err[1]=(cmd/100)%10+48;
 800210c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002110:	4861      	ldr	r0, [pc, #388]	; (8002298 <CmdParserTask+0x2fc>)
		err[1]=(cmd/100)%10+48;
 8002112:	f88d c009 	strb.w	ip, [sp, #9]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002116:	463b      	mov	r3, r7
		err[0]=ERROR_PREFIX;
 8002118:	f04f 0e45 	mov.w	lr, #69	; 0x45
		err[3]=cmd%10+48;
 800211c:	f102 0730 	add.w	r7, r2, #48	; 0x30
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002120:	6800      	ldr	r0, [r0, #0]
		err[3]=cmd%10+48;
 8002122:	f88d 700b 	strb.w	r7, [sp, #11]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002126:	f04f 32ff 	mov.w	r2, #4294967295
 800212a:	a902      	add	r1, sp, #8
		err[0]=ERROR_PREFIX;
 800212c:	f88d e008 	strb.w	lr, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002130:	f007 f83e 	bl	80091b0 <xQueueGenericSend>
 8002134:	e747      	b.n	8001fc6 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 8002136:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <CmdParserTask+0x314>)
 8002138:	4598      	cmp	r8, r3
 800213a:	d067      	beq.n	800220c <CmdParserTask+0x270>
 800213c:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 8002140:	33fc      	adds	r3, #252	; 0xfc
 8002142:	4598      	cmp	r8, r3
 8002144:	d14a      	bne.n	80021dc <CmdParserTask+0x240>
					tempCmd = parseCounterCmd();
 8002146:	f7fe fd57 	bl	8000bf8 <parseCounterCmd>
	if(cmd == CMD_END){
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <CmdParserTask+0x308>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d022      	beq.n	8002196 <CmdParserTask+0x1fa>
		err[1]=(cmd/100)%10+48;
 8002150:	4a56      	ldr	r2, [pc, #344]	; (80022ac <CmdParserTask+0x310>)
 8002152:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <CmdParserTask+0x30c>)
		err[4]=0;
 8002154:	f88d 700c 	strb.w	r7, [sp, #12]
		err[1]=(cmd/100)%10+48;
 8002158:	fba2 1200 	umull	r1, r2, r2, r0
 800215c:	0952      	lsrs	r2, r2, #5
		err[2]=(cmd/10)%10+48;
 800215e:	fba3 c100 	umull	ip, r1, r3, r0
 8002162:	08c9      	lsrs	r1, r1, #3
		err[1]=(cmd/100)%10+48;
 8002164:	fba3 ec02 	umull	lr, ip, r3, r2
 8002168:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
		err[2]=(cmd/10)%10+48;
 800216c:	fba3 e301 	umull	lr, r3, r3, r1
 8002170:	08db      	lsrs	r3, r3, #3
		err[1]=(cmd/100)%10+48;
 8002172:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
		err[2]=(cmd/10)%10+48;
 8002176:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		err[1]=(cmd/100)%10+48;
 800217a:	eba2 0c4c 	sub.w	ip, r2, ip, lsl #1
		err[3]=cmd%10+48;
 800217e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002182:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
		err[2]=(cmd/10)%10+48;
 8002186:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 800218a:	e7bb      	b.n	8002104 <CmdParserTask+0x168>
					tempCmd = parseSyncPwmCmd();
 800218c:	f7ff fa58 	bl	8001640 <parseSyncPwmCmd>
	if(cmd == CMD_END){
 8002190:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <CmdParserTask+0x308>)
 8002192:	4298      	cmp	r0, r3
 8002194:	d1dc      	bne.n	8002150 <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002196:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 8002198:	2734      	movs	r7, #52	; 0x34
 800219a:	e750      	b.n	800203e <CmdParserTask+0xa2>
					tempCmd = parseScopeCmd();
 800219c:	f7fe ff76 	bl	800108c <parseScopeCmd>
	if(cmd == CMD_END){
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <CmdParserTask+0x308>)
 80021a2:	4298      	cmp	r0, r3
 80021a4:	d1d4      	bne.n	8002150 <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021a6:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 80021a8:	2734      	movs	r7, #52	; 0x34
 80021aa:	e748      	b.n	800203e <CmdParserTask+0xa2>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80021ac:	2105      	movs	r1, #5
 80021ae:	a802      	add	r0, sp, #8
 80021b0:	f000 f8ae 	bl	8002310 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80021b4:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80021b6:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 80021b8:	d843      	bhi.n	8002242 <CmdParserTask+0x2a6>
 80021ba:	4a37      	ldr	r2, [pc, #220]	; (8002298 <CmdParserTask+0x2fc>)
 80021bc:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f43f af69 	beq.w	8002096 <CmdParserTask+0xfa>
		err[4]=0;
 80021c4:	2200      	movs	r2, #0
		err[0]=ERROR_PREFIX;
 80021c6:	4f3b      	ldr	r7, [pc, #236]	; (80022b4 <CmdParserTask+0x318>)
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021c8:	4613      	mov	r3, r2
		err[4]=0;
 80021ca:	f88d 200c 	strb.w	r2, [sp, #12]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021ce:	a902      	add	r1, sp, #8
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
		err[0]=ERROR_PREFIX;
 80021d4:	9702      	str	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80021d6:	f006 ffeb 	bl	80091b0 <xQueueGenericSend>
 80021da:	e6f4      	b.n	8001fc6 <CmdParserTask+0x2a>
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 80021dc:	482e      	ldr	r0, [pc, #184]	; (8002298 <CmdParserTask+0x2fc>)
 80021de:	4936      	ldr	r1, [pc, #216]	; (80022b8 <CmdParserTask+0x31c>)
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	f006 ffe2 	bl	80091b0 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80021ec:	e004      	b.n	80021f8 <CmdParserTask+0x25c>
 80021ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80021f2:	2b3b      	cmp	r3, #59	; 0x3b
 80021f4:	f43f aee7 	beq.w	8001fc6 <CmdParserTask+0x2a>
 80021f8:	f10d 0005 	add.w	r0, sp, #5
 80021fc:	f000 f866 	bl	80022cc <commBufferReadByte>
 8002200:	2800      	cmp	r0, #0
 8002202:	d0f4      	beq.n	80021ee <CmdParserTask+0x252>
 8002204:	e6df      	b.n	8001fc6 <CmdParserTask+0x2a>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002206:	463b      	mov	r3, r7
					passMsg = MSG_SHIELD_AVAIL;
 8002208:	2704      	movs	r7, #4
 800220a:	e718      	b.n	800203e <CmdParserTask+0xa2>
					tempCmd = parseGeneratorCmd();
 800220c:	f7ff fc9e 	bl	8001b4c <parseGeneratorCmd>
	if(cmd == CMD_END){
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <CmdParserTask+0x308>)
 8002212:	4298      	cmp	r0, r3
 8002214:	d19c      	bne.n	8002150 <CmdParserTask+0x1b4>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002216:	463b      	mov	r3, r7
		uint16_t passMsg = MSG_ACK;
 8002218:	2734      	movs	r7, #52	; 0x34
 800221a:	e710      	b.n	800203e <CmdParserTask+0xa2>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800221c:	463b      	mov	r3, r7
					passMsg = MSG_SYSTEM_VERSION;
 800221e:	2701      	movs	r7, #1
 8002220:	e70d      	b.n	800203e <CmdParserTask+0xa2>
					resetDevice();
 8002222:	f009 fbb7 	bl	800b994 <resetDevice>
					break;
 8002226:	e6ce      	b.n	8001fc6 <CmdParserTask+0x2a>
	switch(cmdIn){
 8002228:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 800222c:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 8002230:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002234:	4293      	cmp	r3, r2
 8002236:	f43f af2e 	beq.w	8002096 <CmdParserTask+0xfa>
		err[4]=0;
 800223a:	2200      	movs	r2, #0
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800223c:	4613      	mov	r3, r2
		err[0]=ERROR_PREFIX;
 800223e:	4f1f      	ldr	r7, [pc, #124]	; (80022bc <CmdParserTask+0x320>)
 8002240:	e7c3      	b.n	80021ca <CmdParserTask+0x22e>
 8002242:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8002244:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <CmdParserTask+0x324>)
 8002246:	4914      	ldr	r1, [pc, #80]	; (8002298 <CmdParserTask+0x2fc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	6808      	ldr	r0, [r1, #0]
 800224c:	d114      	bne.n	8002278 <CmdParserTask+0x2dc>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800224e:	463b      	mov	r3, r7
		passMsg = MSG_SYSTEM_CONFIG;
 8002250:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002252:	f04f 32ff 	mov.w	r2, #4294967295
 8002256:	a902      	add	r1, sp, #8
		passMsg = MSG_SYSTEM_CONFIG;
 8002258:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800225c:	f006 ffa8 	bl	80091b0 <xQueueGenericSend>
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <CmdParserTask+0x2fc>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	e717      	b.n	8002096 <CmdParserTask+0xfa>
 8002266:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <CmdParserTask+0x324>)
 800226a:	490b      	ldr	r1, [pc, #44]	; (8002298 <CmdParserTask+0x2fc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	6808      	ldr	r0, [r1, #0]
 8002270:	d1da      	bne.n	8002228 <CmdParserTask+0x28c>
		passMsg = MSG_SYSTEM_CONFIG;
 8002272:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002274:	2300      	movs	r3, #0
 8002276:	e7ec      	b.n	8002252 <CmdParserTask+0x2b6>
	switch(cmdIn){
 8002278:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 800227c:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 8002280:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002284:	4293      	cmp	r3, r2
 8002286:	f43f af06 	beq.w	8002096 <CmdParserTask+0xfa>
 800228a:	e79b      	b.n	80021c4 <CmdParserTask+0x228>
 800228c:	3f524556 	.word	0x3f524556
 8002290:	21534552 	.word	0x21534552
 8002294:	3f4e4449 	.word	0x3f4e4449
 8002298:	200047cc 	.word	0x200047cc
 800229c:	54535953 	.word	0x54535953
 80022a0:	3f5f4853 	.word	0x3f5f4853
 80022a4:	5f444e45 	.word	0x5f444e45
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	51eb851f 	.word	0x51eb851f
 80022b0:	5f4e4547 	.word	0x5f4e4547
 80022b4:	31303045 	.word	0x31303045
 80022b8:	08011968 	.word	0x08011968
 80022bc:	32303045 	.word	0x32303045
 80022c0:	3f474643 	.word	0x3f474643
 80022c4:	200047c8 	.word	0x200047c8
 80022c8:	5043534f 	.word	0x5043534f

080022cc <commBufferReadByte>:
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
	if(comm.state == BUFF_EMPTY){
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <commBufferReadByte+0x40>)
 80022ce:	7a9a      	ldrb	r2, [r3, #10]
 80022d0:	b172      	cbz	r2, 80022f0 <commBufferReadByte+0x24>
uint8_t commBufferReadByte(uint8_t *ret){
 80022d2:	b430      	push	{r4, r5}
		return 1;
	}else{
		*ret = *(comm.memory + comm.readPointer);
 80022d4:	891c      	ldrh	r4, [r3, #8]
 80022d6:	681d      	ldr	r5, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022d8:	1c61      	adds	r1, r4, #1
 80022da:	b2c9      	uxtb	r1, r1
		*ret = *(comm.memory + comm.readPointer);
 80022dc:	5d2c      	ldrb	r4, [r5, r4]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022de:	8119      	strh	r1, [r3, #8]
		if(comm.state == BUFF_FULL){
 80022e0:	2a02      	cmp	r2, #2
		*ret = *(comm.memory + comm.readPointer);
 80022e2:	7004      	strb	r4, [r0, #0]
		if(comm.state == BUFF_FULL){
 80022e4:	d006      	beq.n	80022f4 <commBufferReadByte+0x28>
			comm.state = BUFF_DATA;
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d009      	beq.n	80022fe <commBufferReadByte+0x32>
			comm.state = BUFF_EMPTY;
		}
		return 0;
 80022ea:	2000      	movs	r0, #0
	}
}
 80022ec:	bc30      	pop	{r4, r5}
 80022ee:	4770      	bx	lr
		return 1;
 80022f0:	2001      	movs	r0, #1
}
 80022f2:	4770      	bx	lr
			comm.state = BUFF_DATA;
 80022f4:	2201      	movs	r2, #1
		return 0;
 80022f6:	2000      	movs	r0, #0
			comm.state = BUFF_DATA;
 80022f8:	729a      	strb	r2, [r3, #10]
}
 80022fa:	bc30      	pop	{r4, r5}
 80022fc:	4770      	bx	lr
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022fe:	88da      	ldrh	r2, [r3, #6]
 8002300:	428a      	cmp	r2, r1
			comm.state = BUFF_EMPTY;
 8002302:	f04f 0000 	mov.w	r0, #0
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002306:	d1f1      	bne.n	80022ec <commBufferReadByte+0x20>
			comm.state = BUFF_EMPTY;
 8002308:	7298      	strb	r0, [r3, #10]
 800230a:	e7ef      	b.n	80022ec <commBufferReadByte+0x20>
 800230c:	20000204 	.word	0x20000204

08002310 <commBufferReadNBytes>:
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
	for(uint16_t i = 0; i < count; i++){
 8002310:	2900      	cmp	r1, #0
 8002312:	d03a      	beq.n	800238a <commBufferReadNBytes+0x7a>
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(comm.state == BUFF_EMPTY){
 8002316:	4e21      	ldr	r6, [pc, #132]	; (800239c <commBufferReadNBytes+0x8c>)
 8002318:	7ab2      	ldrb	r2, [r6, #10]
 800231a:	b1e2      	cbz	r2, 8002356 <commBufferReadNBytes+0x46>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800231c:	f04f 0c00 	mov.w	ip, #0
		*ret = *(comm.memory + comm.readPointer);
 8002320:	6837      	ldr	r7, [r6, #0]
 8002322:	8933      	ldrh	r3, [r6, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002324:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8002328:	1e44      	subs	r4, r0, #1
	for(uint16_t i = 0; i < count; i++){
 800232a:	4660      	mov	r0, ip
		*ret = *(comm.memory + comm.readPointer);
 800232c:	5cfd      	ldrb	r5, [r7, r3]
 800232e:	f804 5f01 	strb.w	r5, [r4, #1]!
 8002332:	3001      	adds	r0, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002334:	3301      	adds	r3, #1
		if(comm.state == BUFF_FULL){
 8002336:	2a02      	cmp	r2, #2
 8002338:	b280      	uxth	r0, r0
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800233a:	b2db      	uxtb	r3, r3
		if(comm.state == BUFF_FULL){
 800233c:	d00d      	beq.n	800235a <commBufferReadNBytes+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800233e:	2a01      	cmp	r2, #1
 8002340:	d011      	beq.n	8002366 <commBufferReadNBytes+0x56>
	for(uint16_t i = 0; i < count; i++){
 8002342:	4281      	cmp	r1, r0
 8002344:	d913      	bls.n	800236e <commBufferReadNBytes+0x5e>
	if(comm.state == BUFF_EMPTY){
 8002346:	2a00      	cmp	r2, #0
 8002348:	d1f0      	bne.n	800232c <commBufferReadNBytes+0x1c>
 800234a:	8133      	strh	r3, [r6, #8]
 800234c:	f1bc 0f00 	cmp.w	ip, #0
 8002350:	d11d      	bne.n	800238e <commBufferReadNBytes+0x7e>
 8002352:	b2c0      	uxtb	r0, r0
		if(commBufferReadByte(mem++) == 1){
			return i;
		}
	}
	return count;
}
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(comm.state == BUFF_EMPTY){
 8002356:	4610      	mov	r0, r2
}
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(uint16_t i = 0; i < count; i++){
 800235a:	4281      	cmp	r1, r0
 800235c:	d919      	bls.n	8002392 <commBufferReadNBytes+0x82>
 800235e:	f04f 0c01 	mov.w	ip, #1
	if(comm.state == BUFF_EMPTY){
 8002362:	4662      	mov	r2, ip
 8002364:	e7e2      	b.n	800232c <commBufferReadNBytes+0x1c>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002366:	4573      	cmp	r3, lr
 8002368:	d008      	beq.n	800237c <commBufferReadNBytes+0x6c>
	for(uint16_t i = 0; i < count; i++){
 800236a:	4281      	cmp	r1, r0
 800236c:	d8de      	bhi.n	800232c <commBufferReadNBytes+0x1c>
 800236e:	8133      	strh	r3, [r6, #8]
 8002370:	f1bc 0f00 	cmp.w	ip, #0
 8002374:	d000      	beq.n	8002378 <commBufferReadNBytes+0x68>
 8002376:	72b2      	strb	r2, [r6, #10]
	return count;
 8002378:	b2c8      	uxtb	r0, r1
}
 800237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			comm.state = BUFF_EMPTY;
 800237c:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < count; i++){
 800237e:	4281      	cmp	r1, r0
 8002380:	8133      	strh	r3, [r6, #8]
			comm.state = BUFF_EMPTY;
 8002382:	72b2      	strb	r2, [r6, #10]
	for(uint16_t i = 0; i < count; i++){
 8002384:	d9f8      	bls.n	8002378 <commBufferReadNBytes+0x68>
 8002386:	b2c0      	uxtb	r0, r0
 8002388:	e7e4      	b.n	8002354 <commBufferReadNBytes+0x44>
	return count;
 800238a:	b2c8      	uxtb	r0, r1
}
 800238c:	4770      	bx	lr
 800238e:	72b2      	strb	r2, [r6, #10]
 8002390:	e7df      	b.n	8002352 <commBufferReadNBytes+0x42>
 8002392:	2201      	movs	r2, #1
 8002394:	8133      	strh	r3, [r6, #8]
 8002396:	72b2      	strb	r2, [r6, #10]
 8002398:	e7ee      	b.n	8002378 <commBufferReadNBytes+0x68>
 800239a:	bf00      	nop
 800239c:	20000204 	.word	0x20000204

080023a0 <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 80023a0:	b470      	push	{r4, r5, r6}
		*ret = *(comm.memory + comm.readPointer);
 80023a2:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <commBufferReadUInt32+0xb8>)
 80023a4:	7a91      	ldrb	r1, [r2, #10]
 80023a6:	6814      	ldr	r4, [r2, #0]
 80023a8:	8910      	ldrh	r0, [r2, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023aa:	88d5      	ldrh	r5, [r2, #6]
uint32_t commBufferReadUInt32(void){
 80023ac:	b083      	sub	sp, #12
	if(comm.state == BUFF_EMPTY){
 80023ae:	b181      	cbz	r1, 80023d2 <commBufferReadUInt32+0x32>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	b2db      	uxtb	r3, r3
		*ret = *(comm.memory + comm.readPointer);
 80023b4:	5c20      	ldrb	r0, [r4, r0]
 80023b6:	f88d 0004 	strb.w	r0, [sp, #4]
		if(comm.state == BUFF_FULL){
 80023ba:	2902      	cmp	r1, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023bc:	b298      	uxth	r0, r3
		if(comm.state == BUFF_FULL){
 80023be:	d030      	beq.n	8002422 <commBufferReadUInt32+0x82>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023c0:	2901      	cmp	r1, #1
 80023c2:	d038      	beq.n	8002436 <commBufferReadUInt32+0x96>
		*ret = *(comm.memory + comm.readPointer);
 80023c4:	5ce0      	ldrb	r0, [r4, r3]
 80023c6:	f88d 0005 	strb.w	r0, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2db      	uxtb	r3, r3
	if(comm.state == BUFF_EMPTY){
 80023ce:	b921      	cbnz	r1, 80023da <commBufferReadUInt32+0x3a>
 80023d0:	8113      	strh	r3, [r2, #8]
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
	uint32_t finalVal = array[0] & 0xFF;
	finalVal |= (0xFF & array[1]) << 8;
	finalVal |= (0xFF & array[2]) << 16;
	finalVal |= (0xFF & array[3]) << 24;
 80023d2:	9801      	ldr	r0, [sp, #4]
	return finalVal;
}
 80023d4:	b003      	add	sp, #12
 80023d6:	bc70      	pop	{r4, r5, r6}
 80023d8:	4770      	bx	lr
	if(comm.state == BUFF_EMPTY){
 80023da:	2600      	movs	r6, #0
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023dc:	1c58      	adds	r0, r3, #1
 80023de:	b2c0      	uxtb	r0, r0
		*ret = *(comm.memory + comm.readPointer);
 80023e0:	5ce3      	ldrb	r3, [r4, r3]
 80023e2:	f88d 3006 	strb.w	r3, [sp, #6]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023e6:	2901      	cmp	r1, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023e8:	b283      	uxth	r3, r0
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023ea:	d00a      	beq.n	8002402 <commBufferReadUInt32+0x62>
		*ret = *(comm.memory + comm.readPointer);
 80023ec:	5c23      	ldrb	r3, [r4, r0]
 80023ee:	f88d 3007 	strb.w	r3, [sp, #7]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023f2:	3001      	adds	r0, #1
		if(comm.state == BUFF_FULL){
 80023f4:	2902      	cmp	r1, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023f6:	b2c0      	uxtb	r0, r0
		if(comm.state == BUFF_FULL){
 80023f8:	d10c      	bne.n	8002414 <commBufferReadUInt32+0x74>
 80023fa:	8110      	strh	r0, [r2, #8]
			comm.state = BUFF_DATA;
 80023fc:	2101      	movs	r1, #1
 80023fe:	7291      	strb	r1, [r2, #10]
 8002400:	e7e7      	b.n	80023d2 <commBufferReadUInt32+0x32>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002402:	429d      	cmp	r5, r3
 8002404:	d020      	beq.n	8002448 <commBufferReadUInt32+0xa8>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002406:	1c43      	adds	r3, r0, #1
		*ret = *(comm.memory + comm.readPointer);
 8002408:	5c20      	ldrb	r0, [r4, r0]
 800240a:	f88d 0007 	strb.w	r0, [sp, #7]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800240e:	b2d8      	uxtb	r0, r3
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002410:	4285      	cmp	r5, r0
 8002412:	d01d      	beq.n	8002450 <commBufferReadUInt32+0xb0>
 8002414:	8110      	strh	r0, [r2, #8]
 8002416:	2e00      	cmp	r6, #0
 8002418:	d1f1      	bne.n	80023fe <commBufferReadUInt32+0x5e>
	finalVal |= (0xFF & array[3]) << 24;
 800241a:	9801      	ldr	r0, [sp, #4]
}
 800241c:	b003      	add	sp, #12
 800241e:	bc70      	pop	{r4, r5, r6}
 8002420:	4770      	bx	lr
		*ret = *(comm.memory + comm.readPointer);
 8002422:	5ce1      	ldrb	r1, [r4, r3]
 8002424:	f88d 1005 	strb.w	r1, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002428:	3301      	adds	r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2601      	movs	r6, #1
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800242e:	429d      	cmp	r5, r3
 8002430:	d00a      	beq.n	8002448 <commBufferReadUInt32+0xa8>
 8002432:	2101      	movs	r1, #1
 8002434:	e7d2      	b.n	80023dc <commBufferReadUInt32+0x3c>
 8002436:	4285      	cmp	r5, r0
 8002438:	d006      	beq.n	8002448 <commBufferReadUInt32+0xa8>
		*ret = *(comm.memory + comm.readPointer);
 800243a:	5ce1      	ldrb	r1, [r4, r3]
 800243c:	f88d 1005 	strb.w	r1, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002440:	3301      	adds	r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2600      	movs	r6, #0
 8002446:	e7f2      	b.n	800242e <commBufferReadUInt32+0x8e>
 8002448:	2300      	movs	r3, #0
 800244a:	8115      	strh	r5, [r2, #8]
 800244c:	7293      	strb	r3, [r2, #10]
 800244e:	e7c0      	b.n	80023d2 <commBufferReadUInt32+0x32>
 8002450:	8115      	strh	r5, [r2, #8]
			comm.state = BUFF_EMPTY;
 8002452:	2100      	movs	r1, #0
 8002454:	e7d3      	b.n	80023fe <commBufferReadUInt32+0x5e>
 8002456:	bf00      	nop
 8002458:	20000204 	.word	0x20000204

0800245c <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 800245c:	b530      	push	{r4, r5, lr}
 800245e:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <commInputByte+0x9c>)
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
	if (chr==';'){
 8002460:	283b      	cmp	r0, #59	; 0x3b
uint8_t commInputByte(uint8_t chr){
 8002462:	b083      	sub	sp, #12
 8002464:	7a93      	ldrb	r3, [r2, #10]
	if (chr==';'){
 8002466:	d012      	beq.n	800248e <commInputByte+0x32>
	if(comm.state == BUFF_FULL){
 8002468:	2b02      	cmp	r3, #2
 800246a:	d00c      	beq.n	8002486 <commInputByte+0x2a>
		*(comm.memory + comm.writePointer) = chr;
 800246c:	88d4      	ldrh	r4, [r2, #6]
 800246e:	6815      	ldr	r5, [r2, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002470:	1c61      	adds	r1, r4, #1
 8002472:	b2c9      	uxtb	r1, r1
		*(comm.memory + comm.writePointer) = chr;
 8002474:	5528      	strb	r0, [r5, r4]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002476:	80d1      	strh	r1, [r2, #6]
		if(comm.state == BUFF_EMPTY){
 8002478:	b31b      	cbz	r3, 80024c2 <commInputByte+0x66>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800247a:	2b01      	cmp	r3, #1
 800247c:	d027      	beq.n	80024ce <commInputByte+0x72>
		return 0;
 800247e:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
		return result;
	}else{
		return commBufferStoreByte(chr);
	}
}
 8002480:	4620      	mov	r0, r4
 8002482:	b003      	add	sp, #12
 8002484:	bd30      	pop	{r4, r5, pc}
		return 1;
 8002486:	2401      	movs	r4, #1
}
 8002488:	4620      	mov	r0, r4
 800248a:	b003      	add	sp, #12
 800248c:	bd30      	pop	{r4, r5, pc}
	if(comm.state == BUFF_FULL){
 800248e:	2b02      	cmp	r3, #2
 8002490:	d028      	beq.n	80024e4 <commInputByte+0x88>
		*(comm.memory + comm.writePointer) = chr;
 8002492:	88d4      	ldrh	r4, [r2, #6]
 8002494:	6815      	ldr	r5, [r2, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002496:	1c61      	adds	r1, r4, #1
 8002498:	b2c9      	uxtb	r1, r1
		*(comm.memory + comm.writePointer) = chr;
 800249a:	5528      	strb	r0, [r5, r4]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 800249c:	80d1      	strh	r1, [r2, #6]
		if(comm.state == BUFF_EMPTY){
 800249e:	b1eb      	cbz	r3, 80024dc <commInputByte+0x80>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d021      	beq.n	80024e8 <commInputByte+0x8c>
		return 0;
 80024a4:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <commInputByte+0xa0>)
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 80024a8:	2331      	movs	r3, #49	; 0x31
 80024aa:	f8ad 3002 	strh.w	r3, [sp, #2]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80024ae:	6810      	ldr	r0, [r2, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	aa01      	add	r2, sp, #4
 80024b4:	f10d 0102 	add.w	r1, sp, #2
 80024b8:	f007 f88c 	bl	80095d4 <xQueueGenericSendFromISR>
}
 80024bc:	4620      	mov	r0, r4
 80024be:	b003      	add	sp, #12
 80024c0:	bd30      	pop	{r4, r5, pc}
		return 0;
 80024c2:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 80024c4:	2101      	movs	r1, #1
}
 80024c6:	4620      	mov	r0, r4
			comm.state = BUFF_DATA;
 80024c8:	7291      	strb	r1, [r2, #10]
}
 80024ca:	b003      	add	sp, #12
 80024cc:	bd30      	pop	{r4, r5, pc}
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024ce:	8913      	ldrh	r3, [r2, #8]
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d1d4      	bne.n	800247e <commInputByte+0x22>
			comm.state = BUFF_FULL;
 80024d4:	2302      	movs	r3, #2
 80024d6:	7293      	strb	r3, [r2, #10]
		return 0;
 80024d8:	2400      	movs	r4, #0
 80024da:	e7d5      	b.n	8002488 <commInputByte+0x2c>
			comm.state = BUFF_DATA;
 80024dc:	2101      	movs	r1, #1
		return 0;
 80024de:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 80024e0:	7291      	strb	r1, [r2, #10]
 80024e2:	e7e0      	b.n	80024a6 <commInputByte+0x4a>
		return 1;
 80024e4:	2401      	movs	r4, #1
 80024e6:	e7de      	b.n	80024a6 <commInputByte+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024e8:	8913      	ldrh	r3, [r2, #8]
 80024ea:	428b      	cmp	r3, r1
 80024ec:	d1da      	bne.n	80024a4 <commInputByte+0x48>
			comm.state = BUFF_FULL;
 80024ee:	2302      	movs	r3, #2
 80024f0:	7293      	strb	r3, [r2, #10]
		return 0;
 80024f2:	2400      	movs	r4, #0
 80024f4:	e7d7      	b.n	80024a6 <commInputByte+0x4a>
 80024f6:	bf00      	nop
 80024f8:	20000204 	.word	0x20000204
 80024fc:	200047c8 	.word	0x200047c8

08002500 <getBytesAvailable>:

uint16_t getBytesAvailable(){
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <getBytesAvailable+0x28>)
 8002502:	7a98      	ldrb	r0, [r3, #10]
 8002504:	2802      	cmp	r0, #2
 8002506:	d00c      	beq.n	8002522 <getBytesAvailable+0x22>
		return COMM_BUFFER_SIZE;
	}else if(comm.state==BUFF_EMPTY){
 8002508:	b168      	cbz	r0, 8002526 <getBytesAvailable+0x26>
		return 0;
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 800250a:	88d8      	ldrh	r0, [r3, #6]
 800250c:	891b      	ldrh	r3, [r3, #8]
 800250e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002512:	1ac0      	subs	r0, r0, r3
 8002514:	4243      	negs	r3, r0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b2c0      	uxtb	r0, r0
 800251a:	bf58      	it	pl
 800251c:	4258      	negpl	r0, r3
 800251e:	b280      	uxth	r0, r0
		return result;
 8002520:	4770      	bx	lr
		return COMM_BUFFER_SIZE;
 8002522:	f44f 7080 	mov.w	r0, #256	; 0x100
	}
}
 8002526:	4770      	bx	lr
 8002528:	20000204 	.word	0x20000204

0800252c <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 800252c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	commsSendString("OSCP");
 800252e:	4821      	ldr	r0, [pc, #132]	; (80025b4 <sendScopeConf+0x88>)
			break;
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
			break;
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 8002530:	4e21      	ldr	r6, [pc, #132]	; (80025b8 <sendScopeConf+0x8c>)
			break;
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 8002532:	4d22      	ldr	r5, [pc, #136]	; (80025bc <sendScopeConf+0x90>)
			commsSendString(SCOPE_CH2_PIN_STR);
 8002534:	4c22      	ldr	r4, [pc, #136]	; (80025c0 <sendScopeConf+0x94>)
void sendScopeConf(){
 8002536:	b082      	sub	sp, #8
	commsSendString("OSCP");
 8002538:	f009 fa5a 	bl	800b9f0 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 800253c:	4821      	ldr	r0, [pc, #132]	; (80025c4 <sendScopeConf+0x98>)
 800253e:	f009 fa33 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 8002542:	f247 5030 	movw	r0, #30000	; 0x7530
 8002546:	f009 fa2f 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 800254a:	2004      	movs	r0, #4
 800254c:	f009 fa2c 	bl	800b9a8 <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002550:	2300      	movs	r3, #0
 8002552:	f88d 3007 	strb.w	r3, [sp, #7]
 8002556:	e00e      	b.n	8002576 <sendScopeConf+0x4a>
		switch(i){
 8002558:	2b03      	cmp	r3, #3
			commsSendString(SCOPE_CH1_PIN_STR);
 800255a:	481b      	ldr	r0, [pc, #108]	; (80025c8 <sendScopeConf+0x9c>)
		switch(i){
 800255c:	d015      	beq.n	800258a <sendScopeConf+0x5e>
 800255e:	2b01      	cmp	r3, #1
 8002560:	d00f      	beq.n	8002582 <sendScopeConf+0x56>
			commsSendString(SCOPE_CH4_PIN_STR);
 8002562:	f009 fa45 	bl	800b9f0 <commsSendString>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002566:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b03      	cmp	r3, #3
 8002570:	f88d 3007 	strb.w	r3, [sp, #7]
 8002574:	d80b      	bhi.n	800258e <sendScopeConf+0x62>
		switch(i){
 8002576:	2b02      	cmp	r3, #2
 8002578:	d1ee      	bne.n	8002558 <sendScopeConf+0x2c>
			commsSendString(SCOPE_CH3_PIN_STR);
 800257a:	4630      	mov	r0, r6
 800257c:	f009 fa38 	bl	800b9f0 <commsSendString>
			break;
 8002580:	e7f1      	b.n	8002566 <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH2_PIN_STR);
 8002582:	4620      	mov	r0, r4
 8002584:	f009 fa34 	bl	800b9f0 <commsSendString>
			break;
 8002588:	e7ed      	b.n	8002566 <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH4_PIN_STR);
 800258a:	4628      	mov	r0, r5
 800258c:	e7e9      	b.n	8002562 <sendScopeConf+0x36>
			break;
		}
	}
	commsSendUint32(SCOPE_VREF);
 800258e:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002592:	f009 fa09 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <sendScopeConf+0xa0>)
 8002598:	8818      	ldrh	r0, [r3, #0]
 800259a:	f009 fa05 	bl	800b9a8 <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 800259e:	f10d 0007 	add.w	r0, sp, #7
 80025a2:	f002 fcef 	bl	8004f84 <scopeGetRanges>
 80025a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80025aa:	f009 fa17 	bl	800b9dc <commsSendBuff>
}
 80025ae:	b002      	add	sp, #8
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	bf00      	nop
 80025b4:	08011b54 	.word	0x08011b54
 80025b8:	08011b6c 	.word	0x08011b6c
 80025bc:	08011b74 	.word	0x08011b74
 80025c0:	08011b64 	.word	0x08011b64
 80025c4:	003d0900 	.word	0x003d0900
 80025c8:	08011b5c 	.word	0x08011b5c
 80025cc:	1ffff7ba 	.word	0x1ffff7ba

080025d0 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 80025d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	commsSendString("INP_");
 80025d4:	482b      	ldr	r0, [pc, #172]	; (8002684 <sendScopeInputs+0xb4>)
 80025d6:	4f2c      	ldr	r7, [pc, #176]	; (8002688 <sendScopeInputs+0xb8>)
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
		commsSendString("/");
 80025d8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002694 <sendScopeInputs+0xc4>
				break;
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
				break;
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 80025dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800269c <sendScopeInputs+0xcc>
				break;
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 80025e0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80026a0 <sendScopeInputs+0xd0>
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 80025e4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80026a4 <sendScopeInputs+0xd4>
	commsSendString("INP_");
 80025e8:	f009 fa02 	bl	800b9f0 <commsSendString>
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f009 f9d9 	bl	800b9a4 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 80025f2:	2004      	movs	r0, #4
 80025f4:	f009 f9d6 	bl	800b9a4 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 80025f8:	2002      	movs	r0, #2
 80025fa:	f009 f9d3 	bl	800b9a4 <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 80025fe:	2001      	movs	r0, #1
 8002600:	f009 f9d0 	bl	800b9a4 <commsSend>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002604:	2500      	movs	r5, #0
		commsSendString("/");
 8002606:	4658      	mov	r0, fp
 8002608:	f009 f9f2 	bl	800b9f0 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 800260c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002610:	b316      	cbz	r6, 8002658 <sendScopeInputs+0x88>
 8002612:	2400      	movs	r4, #0
 8002614:	1c63      	adds	r3, r4, #1
			switch(i){
 8002616:	2d02      	cmp	r5, #2
 8002618:	4622      	mov	r2, r4
 800261a:	b2dc      	uxtb	r4, r3
 800261c:	d016      	beq.n	800264c <sendScopeInputs+0x7c>
 800261e:	2d03      	cmp	r5, #3
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <sendScopeInputs+0xbc>)
			switch(i){
 8002622:	d025      	beq.n	8002670 <sendScopeInputs+0xa0>
 8002624:	2d01      	cmp	r5, #1
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002626:	bf14      	ite	ne
 8002628:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 800262c:	f858 0022 	ldreq.w	r0, [r8, r2, lsl #2]
 8002630:	f009 f9de 	bl	800b9f0 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002634:	42a6      	cmp	r6, r4
 8002636:	d90f      	bls.n	8002658 <sendScopeInputs+0x88>
			if(j>0){
 8002638:	2c00      	cmp	r4, #0
 800263a:	d0eb      	beq.n	8002614 <sendScopeInputs+0x44>
				commsSendString(":");
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <sendScopeInputs+0xc0>)
 800263e:	f009 f9d7 	bl	800b9f0 <commsSendString>
 8002642:	1c63      	adds	r3, r4, #1
			switch(i){
 8002644:	2d02      	cmp	r5, #2
 8002646:	4622      	mov	r2, r4
 8002648:	b2dc      	uxtb	r4, r3
 800264a:	d1e8      	bne.n	800261e <sendScopeInputs+0x4e>
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 800264c:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 8002650:	f009 f9ce 	bl	800b9f0 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002654:	42a6      	cmp	r6, r4
 8002656:	d8ef      	bhi.n	8002638 <sendScopeInputs+0x68>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002658:	3501      	adds	r5, #1
 800265a:	b2ed      	uxtb	r5, r5
 800265c:	2d04      	cmp	r5, #4
 800265e:	d1d2      	bne.n	8002606 <sendScopeInputs+0x36>
				break;
			}
		}
	}
	commsSendString("/");
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <sendScopeInputs+0xc4>)
 8002662:	f009 f9c5 	bl	800b9f0 <commsSendString>
	commsSendString(";");
 8002666:	480c      	ldr	r0, [pc, #48]	; (8002698 <sendScopeInputs+0xc8>)
}
 8002668:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	commsSendString(";");
 800266c:	f009 b9c0 	b.w	800b9f0 <commsSendString>
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002670:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8002674:	f009 f9bc 	bl	800b9f0 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002678:	42a6      	cmp	r6, r4
 800267a:	d9f1      	bls.n	8002660 <sendScopeInputs+0x90>
			if(j>0){
 800267c:	2c00      	cmp	r4, #0
 800267e:	d0c9      	beq.n	8002614 <sendScopeInputs+0x44>
 8002680:	e7dc      	b.n	800263c <sendScopeInputs+0x6c>
 8002682:	bf00      	nop
 8002684:	08011b7c 	.word	0x08011b7c
 8002688:	08011aa0 	.word	0x08011aa0
 800268c:	08011970 	.word	0x08011970
 8002690:	08011b88 	.word	0x08011b88
 8002694:	08011b84 	.word	0x08011b84
 8002698:	08011b8c 	.word	0x08011b8c
 800269c:	080119bc 	.word	0x080119bc
 80026a0:	080119cc 	.word	0x080119cc
 80026a4:	08011994 	.word	0x08011994

080026a8 <sendLogAnlysConf>:
}
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 80026a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	commsSendString("LOGA");
 80026ac:	4823      	ldr	r0, [pc, #140]	; (800273c <sendLogAnlysConf+0x94>)
			break;
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
			break;
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 80026ae:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002768 <sendLogAnlysConf+0xc0>
			commsSendString(LOG_ANLYS_PIN_CH6);
 80026b2:	4f23      	ldr	r7, [pc, #140]	; (8002740 <sendLogAnlysConf+0x98>)
			commsSendString(LOG_ANLYS_PIN_CH5);
 80026b4:	4e23      	ldr	r6, [pc, #140]	; (8002744 <sendLogAnlysConf+0x9c>)
	commsSendString("LOGA");
 80026b6:	f009 f99b 	bl	800b9f0 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 80026ba:	4823      	ldr	r0, [pc, #140]	; (8002748 <sendLogAnlysConf+0xa0>)
 80026bc:	f009 f974 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 80026c0:	4822      	ldr	r0, [pc, #136]	; (800274c <sendLogAnlysConf+0xa4>)
 80026c2:	f009 f971 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 80026c6:	4822      	ldr	r0, [pc, #136]	; (8002750 <sendLogAnlysConf+0xa8>)
 80026c8:	f009 f96e 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 80026cc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80026d0:	f009 f96a 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 80026d4:	2008      	movs	r0, #8
 80026d6:	f009 f967 	bl	800b9a8 <commsSendUint32>
 80026da:	2400      	movs	r4, #0
 80026dc:	b2e5      	uxtb	r5, r4
		switch(i){
 80026de:	1e6b      	subs	r3, r5, #1
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d805      	bhi.n	80026f0 <sendLogAnlysConf+0x48>
 80026e4:	e8df f003 	tbb	[pc, r3]
 80026e8:	13171b1f 	.word	0x13171b1f
 80026ec:	0b0f      	.short	0x0b0f
 80026ee:	23          	.byte	0x23
 80026ef:	00          	.byte	0x00
			commsSendString(LOG_ANLYS_PIN_CH1);
 80026f0:	4818      	ldr	r0, [pc, #96]	; (8002754 <sendLogAnlysConf+0xac>)
 80026f2:	f009 f97d 	bl	800b9f0 <commsSendString>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 80026f6:	2d07      	cmp	r5, #7
 80026f8:	d01e      	beq.n	8002738 <sendLogAnlysConf+0x90>
 80026fa:	3401      	adds	r4, #1
 80026fc:	e7ee      	b.n	80026dc <sendLogAnlysConf+0x34>
			commsSendString(LOG_ANLYS_PIN_CH7);
 80026fe:	4640      	mov	r0, r8
 8002700:	f009 f976 	bl	800b9f0 <commsSendString>
			break;
 8002704:	e7f9      	b.n	80026fa <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH6);
 8002706:	4638      	mov	r0, r7
 8002708:	f009 f972 	bl	800b9f0 <commsSendString>
			break;
 800270c:	e7f5      	b.n	80026fa <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH5);
 800270e:	4630      	mov	r0, r6
 8002710:	f009 f96e 	bl	800b9f0 <commsSendString>
			break;
 8002714:	e7f1      	b.n	80026fa <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH4);
 8002716:	4810      	ldr	r0, [pc, #64]	; (8002758 <sendLogAnlysConf+0xb0>)
 8002718:	f009 f96a 	bl	800b9f0 <commsSendString>
			break;
 800271c:	e7ed      	b.n	80026fa <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH3);
 800271e:	480f      	ldr	r0, [pc, #60]	; (800275c <sendLogAnlysConf+0xb4>)
 8002720:	f009 f966 	bl	800b9f0 <commsSendString>
			break;
 8002724:	e7e9      	b.n	80026fa <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH2);
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <sendLogAnlysConf+0xb8>)
 8002728:	f009 f962 	bl	800b9f0 <commsSendString>
			break;
 800272c:	e7e5      	b.n	80026fa <sendLogAnlysConf+0x52>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <sendLogAnlysConf+0xbc>)
			break;
		}
	}	
}
 8002730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			commsSendString(LOG_ANLYS_PIN_CH8);
 8002734:	f009 b95c 	b.w	800b9f0 <commsSendString>
}
 8002738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800273c:	08011b0c 	.word	0x08011b0c
 8002740:	08011b3c 	.word	0x08011b3c
 8002744:	08011b34 	.word	0x08011b34
 8002748:	044aa200 	.word	0x044aa200
 800274c:	08954400 	.word	0x08954400
 8002750:	02255100 	.word	0x02255100
 8002754:	08011b14 	.word	0x08011b14
 8002758:	08011b2c 	.word	0x08011b2c
 800275c:	08011b24 	.word	0x08011b24
 8002760:	08011b1c 	.word	0x08011b1c
 8002764:	08011b4c 	.word	0x08011b4c
 8002768:	08011b44 	.word	0x08011b44

0800276c <CommTask>:
void CommTask(void const *argument){
 800276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002770:	b08f      	sub	sp, #60	; 0x3c
	uint16_t message = 0xFFFF;
 8002772:	f64f 73ff 	movw	r3, #65535	; 0xffff
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002776:	2200      	movs	r2, #0
 8002778:	2102      	movs	r1, #2
 800277a:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 800277c:	f8ad 3018 	strh.w	r3, [sp, #24]
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002780:	f006 fcd2 	bl	8009128 <xQueueGenericCreate>
 8002784:	f8df a368 	ldr.w	sl, [pc, #872]	; 8002af0 <CommTask+0x384>
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002788:	4fbc      	ldr	r7, [pc, #752]	; (8002a7c <CommTask+0x310>)
	messageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800278a:	f8ca 0000 	str.w	r0, [sl]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 800278e:	2004      	movs	r0, #4
 8002790:	f006 fecc 	bl	800952c <xQueueCreateMutex>
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002798:	6038      	str	r0, [r7, #0]
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 800279a:	f007 f939 	bl	8009a10 <xQueueTakeMutexRecursive>
	MX_USART2_UART_Init();
 800279e:	f00c f979 	bl	800ea94 <MX_USART2_UART_Init>
	comm.memory = commBuffMem;
 80027a2:	4bb7      	ldr	r3, [pc, #732]	; (8002a80 <CommTask+0x314>)
 80027a4:	4ab7      	ldr	r2, [pc, #732]	; (8002a84 <CommTask+0x318>)
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80027a6:	4cb8      	ldr	r4, [pc, #736]	; (8002a88 <CommTask+0x31c>)
	comm.memory = commBuffMem;
 80027a8:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 80027aa:	f44f 7180 	mov.w	r1, #256	; 0x100
	comm.readPointer = 0;
 80027ae:	2200      	movs	r2, #0
	comm.bufferSize = COMM_BUFFER_SIZE;
 80027b0:	6059      	str	r1, [r3, #4]
	xSemaphoreGiveRecursive(commsMutex);
 80027b2:	6838      	ldr	r0, [r7, #0]
	comm.readPointer = 0;
 80027b4:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 80027b6:	729a      	strb	r2, [r3, #10]
	xSemaphoreGiveRecursive(commsMutex);
 80027b8:	f006 feec 	bl	8009594 <xQueueGiveMutexRecursive>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80027bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027c0:	ad0a      	add	r5, sp, #40	; 0x28
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 80027c2:	3414      	adds	r4, #20
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80027c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 80027c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027cc:	ab07      	add	r3, sp, #28
 80027ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027d2:	f8df b320 	ldr.w	fp, [pc, #800]	; 8002af4 <CommTask+0x388>
 80027d6:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8002af8 <CommTask+0x38c>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 80027da:	f8da 0000 	ldr.w	r0, [sl]
 80027de:	2300      	movs	r3, #0
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	a906      	add	r1, sp, #24
 80027e6:	f006 ff8b 	bl	8009700 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80027ea:	f04f 31ff 	mov.w	r1, #4294967295
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	f007 f90e 	bl	8009a10 <xQueueTakeMutexRecursive>
		switch(message){
 80027f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80027f8:	2b34      	cmp	r3, #52	; 0x34
 80027fa:	f200 82f3 	bhi.w	8002de4 <CommTask+0x678>
 80027fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002802:	02e0      	.short	0x02e0
 8002804:	029702a9 	.word	0x029702a9
 8002808:	02f10282 	.word	0x02f10282
 800280c:	02f1025d 	.word	0x02f1025d
 8002810:	02f102f1 	.word	0x02f102f1
 8002814:	02f102f1 	.word	0x02f102f1
 8002818:	02f102f1 	.word	0x02f102f1
 800281c:	003502f1 	.word	0x003502f1
 8002820:	02510257 	.word	0x02510257
 8002824:	02f102f1 	.word	0x02f102f1
 8002828:	02f102f1 	.word	0x02f102f1
 800282c:	0184018b 	.word	0x0184018b
 8002830:	0136017d 	.word	0x0136017d
 8002834:	02f102f1 	.word	0x02f102f1
 8002838:	02f102f1 	.word	0x02f102f1
 800283c:	010d02f1 	.word	0x010d02f1
 8002840:	00d400e4 	.word	0x00d400e4
 8002844:	02f102f1 	.word	0x02f102f1
 8002848:	00bc00c8 	.word	0x00bc00c8
 800284c:	02f102f1 	.word	0x02f102f1
 8002850:	009402f1 	.word	0x009402f1
 8002854:	0086008d 	.word	0x0086008d
 8002858:	02f1006a 	.word	0x02f1006a
 800285c:	02f102f1 	.word	0x02f102f1
 8002860:	005e02f1 	.word	0x005e02f1
 8002864:	005a02f1 	.word	0x005a02f1
 8002868:	02ea02f1 	.word	0x02ea02f1
			if(counter.state==COUNTER_ETR){
 800286c:	f89b 33b8 	ldrb.w	r3, [fp, #952]	; 0x3b8
 8002870:	2b01      	cmp	r3, #1
 8002872:	f000 8311 	beq.w	8002e98 <CommTask+0x72c>
			}else if(counter.state==COUNTER_REF){
 8002876:	f89b 33b8 	ldrb.w	r3, [fp, #952]	; 0x3b8
 800287a:	2b04      	cmp	r3, #4
 800287c:	f000 82c4 	beq.w	8002e08 <CommTask+0x69c>
			}else if(counter.state==COUNTER_IC){
 8002880:	f89b 33b8 	ldrb.w	r3, [fp, #952]	; 0x3b8
 8002884:	2b02      	cmp	r3, #2
 8002886:	f000 8312 	beq.w	8002eae <CommTask+0x742>
			}else if(counter.state==COUNTER_TI){						
 800288a:	f89b 33b8 	ldrb.w	r3, [fp, #952]	; 0x3b8
 800288e:	2b03      	cmp	r3, #3
 8002890:	d111      	bne.n	80028b6 <CommTask+0x14a>
				switch(counter.tiState){
 8002892:	f89b 33c9 	ldrb.w	r3, [fp, #969]	; 0x3c9
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	f000 8367 	beq.w	8002f6c <CommTask+0x800>
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d106      	bne.n	80028b0 <CommTask+0x144>
					commsSendString(STR_CNT_TI_DATA);
 80028a2:	487a      	ldr	r0, [pc, #488]	; (8002a8c <CommTask+0x320>)
 80028a4:	f009 f8a4 	bl	800b9f0 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 80028a8:	ed9b 0be0 	vldr	d0, [fp, #896]	; 0x380
 80028ac:	f009 f8ba 	bl	800ba24 <commsSendDouble>
				counter.tiState = CLEAR;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f88b 33c9 	strb.w	r3, [fp, #969]	; 0x3c9
		xSemaphoreGiveRecursive(commsMutex);
 80028b6:	6838      	ldr	r0, [r7, #0]
 80028b8:	f006 fe6c 	bl	8009594 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 80028bc:	e78d      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 80028be:	4874      	ldr	r0, [pc, #464]	; (8002a90 <CommTask+0x324>)
 80028c0:	f009 f896 	bl	800b9f0 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 80028c4:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <CommTask+0x328>)
 80028c6:	ed93 0b06 	vldr	d0, [r3, #24]
 80028ca:	f009 f8ab 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f006 fe60 	bl	8009594 <xQueueGiveMutexRecursive>
 80028d4:	e781      	b.n	80027da <CommTask+0x6e>
	commsSendString("SYNP");		
 80028d6:	4870      	ldr	r0, [pc, #448]	; (8002a98 <CommTask+0x32c>)
 80028d8:	f009 f88a 	bl	800b9f0 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 80028dc:	486f      	ldr	r0, [pc, #444]	; (8002a9c <CommTask+0x330>)
 80028de:	f009 f863 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 80028e2:	486f      	ldr	r0, [pc, #444]	; (8002aa0 <CommTask+0x334>)
 80028e4:	f009 f860 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 80028e8:	2004      	movs	r0, #4
 80028ea:	f009 f85d 	bl	800b9a8 <commsSendUint32>
			commsSendString(SYNC_PWM_CH1_PIN);
 80028ee:	486d      	ldr	r0, [pc, #436]	; (8002aa4 <CommTask+0x338>)
 80028f0:	f009 f87e 	bl	800b9f0 <commsSendString>
			commsSendString(SYNC_PWM_CH2_PIN);
 80028f4:	486c      	ldr	r0, [pc, #432]	; (8002aa8 <CommTask+0x33c>)
 80028f6:	f009 f87b 	bl	800b9f0 <commsSendString>
			commsSendString(SYNC_PWM_CH3_PIN);
 80028fa:	486c      	ldr	r0, [pc, #432]	; (8002aac <CommTask+0x340>)
 80028fc:	f009 f878 	bl	800b9f0 <commsSendString>
			commsSendString(SYNC_PWM_CH4_PIN);
 8002900:	486b      	ldr	r0, [pc, #428]	; (8002ab0 <CommTask+0x344>)
 8002902:	f009 f875 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f006 fe44 	bl	8009594 <xQueueGiveMutexRecursive>
 800290c:	e765      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_GEN_OK);
 800290e:	4869      	ldr	r0, [pc, #420]	; (8002ab4 <CommTask+0x348>)
 8002910:	f009 f86e 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f006 fe3d 	bl	8009594 <xQueueGiveMutexRecursive>
 800291a:	e75e      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_GEN_NEXT);
 800291c:	4866      	ldr	r0, [pc, #408]	; (8002ab8 <CommTask+0x34c>)
 800291e:	f009 f867 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002922:	6838      	ldr	r0, [r7, #0]
 8002924:	f006 fe36 	bl	8009594 <xQueueGiveMutexRecursive>
 8002928:	e757      	b.n	80027da <CommTask+0x6e>
				header_gen[4]=i+1+48;
 800292a:	2331      	movs	r3, #49	; 0x31
				j=genGetRealSmplFreq(i+1);
 800292c:	2001      	movs	r0, #1
				header_gen[4]=i+1+48;
 800292e:	f88d 3020 	strb.w	r3, [sp, #32]
				j=genGetRealSmplFreq(i+1);
 8002932:	f001 fa2b 	bl	8003d8c <genGetRealSmplFreq>
				commsSendBuff(header_gen,12);
 8002936:	210c      	movs	r1, #12
				header_gen[9]=(uint8_t)(j>>16);
 8002938:	0c02      	lsrs	r2, r0, #16
				header_gen[10]=(uint8_t)(j>>8);
 800293a:	0a03      	lsrs	r3, r0, #8
				header_gen[11]=(uint8_t)(j);
 800293c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				commsSendBuff(header_gen,12);
 8002940:	a807      	add	r0, sp, #28
				header_gen[9]=(uint8_t)(j>>16);
 8002942:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
				header_gen[10]=(uint8_t)(j>>8);
 8002946:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				commsSendBuff(header_gen,12);
 800294a:	f009 f847 	bl	800b9dc <commsSendBuff>
				header_gen[4]=i+1+48;
 800294e:	2332      	movs	r3, #50	; 0x32
				j=genGetRealSmplFreq(i+1);
 8002950:	2002      	movs	r0, #2
				header_gen[4]=i+1+48;
 8002952:	f88d 3020 	strb.w	r3, [sp, #32]
				j=genGetRealSmplFreq(i+1);
 8002956:	f001 fa19 	bl	8003d8c <genGetRealSmplFreq>
				commsSendBuff(header_gen,12);
 800295a:	210c      	movs	r1, #12
				header_gen[9]=(uint8_t)(j>>16);
 800295c:	0c02      	lsrs	r2, r0, #16
				header_gen[10]=(uint8_t)(j>>8);
 800295e:	0a03      	lsrs	r3, r0, #8
				header_gen[11]=(uint8_t)(j);
 8002960:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				commsSendBuff(header_gen,12);
 8002964:	a807      	add	r0, sp, #28
				header_gen[9]=(uint8_t)(j>>16);
 8002966:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
				header_gen[10]=(uint8_t)(j>>8);
 800296a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				commsSendBuff(header_gen,12);
 800296e:	f009 f835 	bl	800b9dc <commsSendBuff>
		xSemaphoreGiveRecursive(commsMutex);
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f006 fe0e 	bl	8009594 <xQueueGiveMutexRecursive>
 8002978:	e72f      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 800297a:	4850      	ldr	r0, [pc, #320]	; (8002abc <CommTask+0x350>)
 800297c:	f009 f838 	bl	800b9f0 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <CommTask+0x354>)
 8002982:	ed93 0b08 	vldr	d0, [r3, #32]
 8002986:	f009 f84d 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f006 fe02 	bl	8009594 <xQueueGiveMutexRecursive>
 8002990:	e723      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002992:	484c      	ldr	r0, [pc, #304]	; (8002ac4 <CommTask+0x358>)
 8002994:	f009 f82c 	bl	800b9f0 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <CommTask+0x354>)
 800299a:	ed93 0b06 	vldr	d0, [r3, #24]
 800299e:	f009 f841 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f006 fdf6 	bl	8009594 <xQueueGiveMutexRecursive>
 80029a8:	e717      	b.n	80027da <CommTask+0x6e>
	commsSendString("GENP");		
 80029aa:	4847      	ldr	r0, [pc, #284]	; (8002ac8 <CommTask+0x35c>)
 80029ac:	f009 f820 	bl	800b9f0 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f008 fff9 	bl	800b9a8 <commsSendUint32>
			commsSendString(GEN_PWM_CH1_PIN);
 80029b6:	4845      	ldr	r0, [pc, #276]	; (8002acc <CommTask+0x360>)
 80029b8:	f009 f81a 	bl	800b9f0 <commsSendString>
			commsSendString(GEN_PWM_CH2_PIN);
 80029bc:	4844      	ldr	r0, [pc, #272]	; (8002ad0 <CommTask+0x364>)
 80029be:	f009 f817 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f006 fde6 	bl	8009594 <xQueueGiveMutexRecursive>
 80029c8:	e707      	b.n	80027da <CommTask+0x6e>
	commsSendString("GEN_");
 80029ca:	4842      	ldr	r0, [pc, #264]	; (8002ad4 <CommTask+0x368>)
 80029cc:	f009 f810 	bl	800b9f0 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 80029d0:	4841      	ldr	r0, [pc, #260]	; (8002ad8 <CommTask+0x36c>)
 80029d2:	f008 ffe9 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 80029d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029da:	f008 ffe5 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 80029de:	200c      	movs	r0, #12
 80029e0:	f008 ffe2 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 80029e4:	2002      	movs	r0, #2
 80029e6:	f008 ffdf 	bl	800b9a8 <commsSendUint32>
			commsSendString(GEN_CH1_PIN_STR);
 80029ea:	483c      	ldr	r0, [pc, #240]	; (8002adc <CommTask+0x370>)
 80029ec:	f009 f800 	bl	800b9f0 <commsSendString>
			commsSendString(GEN_CH2_PIN_STR);
 80029f0:	483b      	ldr	r0, [pc, #236]	; (8002ae0 <CommTask+0x374>)
 80029f2:	f008 fffd 	bl	800b9f0 <commsSendString>
	commsSendUint32(0);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f008 ffd6 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(GEN_VREF);
 80029fc:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002a00:	f008 ffd2 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(GEN_VDDA);
 8002a04:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002a08:	f008 ffce 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 8002a0c:	f240 40ba 	movw	r0, #1210	; 0x4ba
 8002a10:	f008 ffca 	bl	800b9a8 <commsSendUint32>
		xSemaphoreGiveRecursive(commsMutex);
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f006 fdbd 	bl	8009594 <xQueueGiveMutexRecursive>
 8002a1a:	e6de      	b.n	80027da <CommTask+0x6e>
			logAnlys.state = LOGA_DATA_SENDING;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f888 3012 	strb.w	r3, [r8, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8002a22:	f898 3017 	ldrb.w	r3, [r8, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 81e3 	beq.w	8002df2 <CommTask+0x686>
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 8002a2c:	482d      	ldr	r0, [pc, #180]	; (8002ae4 <CommTask+0x378>)
 8002a2e:	f008 ffdf 	bl	800b9f0 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 8002a32:	f8b8 0010 	ldrh.w	r0, [r8, #16]
 8002a36:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8002a3a:	0040      	lsls	r0, r0, #1
 8002a3c:	f008 ffb4 	bl	800b9a8 <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 8002a40:	4829      	ldr	r0, [pc, #164]	; (8002ae8 <CommTask+0x37c>)
 8002a42:	f008 ffd5 	bl	800b9f0 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 8002a46:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8002a4a:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 8002a4e:	4827      	ldr	r0, [pc, #156]	; (8002aec <CommTask+0x380>)
 8002a50:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8002a54:	0052      	lsls	r2, r2, #1
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a5c:	f006 f890 	bl	8008b80 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8002a60:	2303      	movs	r3, #3
		xSemaphoreGiveRecursive(commsMutex);
 8002a62:	6838      	ldr	r0, [r7, #0]
			logAnlys.state = LOGA_DATA_SENT;
 8002a64:	f888 3012 	strb.w	r3, [r8, #18]
		xSemaphoreGiveRecursive(commsMutex);
 8002a68:	f006 fd94 	bl	8009594 <xQueueGiveMutexRecursive>
 8002a6c:	e6b5      	b.n	80027da <CommTask+0x6e>
			sendLogAnlysConf();
 8002a6e:	f7ff fe1b 	bl	80026a8 <sendLogAnlysConf>
		xSemaphoreGiveRecursive(commsMutex);
 8002a72:	6838      	ldr	r0, [r7, #0]
 8002a74:	f006 fd8e 	bl	8009594 <xQueueGiveMutexRecursive>
 8002a78:	e6af      	b.n	80027da <CommTask+0x6e>
 8002a7a:	bf00      	nop
 8002a7c:	20000310 	.word	0x20000310
 8002a80:	20000204 	.word	0x20000204
 8002a84:	20000210 	.word	0x20000210
 8002a88:	08011878 	.word	0x08011878
 8002a8c:	08011a50 	.word	0x08011a50
 8002a90:	08011a58 	.word	0x08011a58
 8002a94:	2000cb20 	.word	0x2000cb20
 8002a98:	08011b90 	.word	0x08011b90
 8002a9c:	044aa200 	.word	0x044aa200
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	08011b98 	.word	0x08011b98
 8002aa8:	08011ba0 	.word	0x08011ba0
 8002aac:	08011ba8 	.word	0x08011ba8
 8002ab0:	08011bb0 	.word	0x08011bb0
 8002ab4:	08011a80 	.word	0x08011a80
 8002ab8:	08011a78 	.word	0x08011a78
 8002abc:	08011a08 	.word	0x08011a08
 8002ac0:	20004c20 	.word	0x20004c20
 8002ac4:	08011a00 	.word	0x08011a00
 8002ac8:	08011af4 	.word	0x08011af4
 8002acc:	08011afc 	.word	0x08011afc
 8002ad0:	08011b04 	.word	0x08011b04
 8002ad4:	08011adc 	.word	0x08011adc
 8002ad8:	001e8480 	.word	0x001e8480
 8002adc:	08011ae4 	.word	0x08011ae4
 8002ae0:	08011aec 	.word	0x08011aec
 8002ae4:	08011a68 	.word	0x08011a68
 8002ae8:	08011a70 	.word	0x08011a70
 8002aec:	2000d3c4 	.word	0x2000d3c4
 8002af0:	200047cc 	.word	0x200047cc
 8002af4:	20004848 	.word	0x20004848
 8002af8:	20005438 	.word	0x20005438
			commsSendString(STR_SCOPE_SMPL);
 8002afc:	48ca      	ldr	r0, [pc, #808]	; (8002e28 <CommTask+0x6bc>)
 8002afe:	f008 ff77 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002b02:	6838      	ldr	r0, [r7, #0]
 8002b04:	f006 fd46 	bl	8009594 <xQueueGiveMutexRecursive>
 8002b08:	e667      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_SCOPE_TRIG);
 8002b0a:	48c8      	ldr	r0, [pc, #800]	; (8002e2c <CommTask+0x6c0>)
 8002b0c:	f008 ff70 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002b10:	6838      	ldr	r0, [r7, #0]
 8002b12:	f006 fd3f 	bl	8009594 <xQueueGiveMutexRecursive>
 8002b16:	e660      	b.n	80027da <CommTask+0x6e>
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002b18:	f001 ffd8 	bl	8004acc <getScopeState>
 8002b1c:	2804      	cmp	r0, #4
 8002b1e:	f47f aeca 	bne.w	80028b6 <CommTask+0x14a>
				oneChanMemSize=getOneChanMemSize();
 8002b22:	f001 ffb5 	bl	8004a90 <getOneChanMemSize>
 8002b26:	4605      	mov	r5, r0
				dataLength = getSamples();
 8002b28:	f001 ffbe 	bl	8004aa8 <getSamples>
 8002b2c:	9000      	str	r0, [sp, #0]
				adcRes = getADCRes();
 8002b2e:	f001 ffc1 	bl	8004ab4 <getADCRes>
 8002b32:	4604      	mov	r4, r0
				channels=GetNumOfChannels();
 8002b34:	f001 ff9e 	bl	8004a74 <GetNumOfChannels>
 8002b38:	9002      	str	r0, [sp, #8]
				j=scopeGetRealSmplFreq();
 8002b3a:	f002 f971 	bl	8004e20 <scopeGetRealSmplFreq>
				if(adcRes>8){
 8002b3e:	2c08      	cmp	r4, #8
				header[4]=(uint8_t)(j>>24);
 8002b40:	ea4f 6210 	mov.w	r2, r0, lsr #24
				header[5]=(uint8_t)(j>>16);
 8002b44:	ea4f 4310 	mov.w	r3, r0, lsr #16
				header[7]=(uint8_t)(j);
 8002b48:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
				header[6]=(uint8_t)(j>>8);
 8002b4c:	ea4f 2010 	mov.w	r0, r0, lsr #8
				header[4]=(uint8_t)(j>>24);
 8002b50:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
				header[5]=(uint8_t)(j>>16);
 8002b54:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
				header[6]=(uint8_t)(j>>8);
 8002b58:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
				if(adcRes>8){
 8002b5c:	f240 81f2 	bls.w	8002f44 <CommTask+0x7d8>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002b60:	f001 ff9c 	bl	8004a9c <getTriggerIndex>
 8002b64:	4606      	mov	r6, r0
 8002b66:	f001 ff9f 	bl	8004aa8 <getSamples>
 8002b6a:	4681      	mov	r9, r0
 8002b6c:	f001 ffa8 	bl	8004ac0 <getPretrigger>
 8002b70:	fb09 f000 	mul.w	r0, r9, r0
 8002b74:	eba6 4610 	sub.w	r6, r6, r0, lsr #16
					dataLength*=2;
 8002b78:	9a00      	ldr	r2, [sp, #0]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002b7a:	eb05 0346 	add.w	r3, r5, r6, lsl #1
					dataLength*=2;
 8002b7e:	0052      	lsls	r2, r2, #1
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002b80:	fbb3 f6f5 	udiv	r6, r3, r5
 8002b84:	fb05 3316 	mls	r3, r5, r6, r3
					dataLength*=2;
 8002b88:	9200      	str	r2, [sp, #0]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	4611      	mov	r1, r2
				header[15]=channels;
 8002b8e:	9802      	ldr	r0, [sp, #8]
 8002b90:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
				if(j+dataLength>oneChanMemSize){
 8002b94:	9803      	ldr	r0, [sp, #12]
				header[8]=(uint8_t)adcRes;	
 8002b96:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
				header[9]=(uint8_t)(dataLength >> 16);
 8002b9a:	0c0b      	lsrs	r3, r1, #16
 8002b9c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
				if(j+dataLength>oneChanMemSize){
 8002ba0:	180b      	adds	r3, r1, r0
				header[10]=(uint8_t)(dataLength >> 8);
 8002ba2:	0a0a      	lsrs	r2, r1, #8
				if(j+dataLength>oneChanMemSize){
 8002ba4:	42ab      	cmp	r3, r5
				header[11]=(uint8_t)dataLength;
 8002ba6:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
				header[10]=(uint8_t)(dataLength >> 8);
 8002baa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
				if(j+dataLength>oneChanMemSize){
 8002bae:	f240 81c6 	bls.w	8002f3e <CommTask+0x7d2>
					dataLenFirst=oneChanMemSize-j;
 8002bb2:	1a2d      	subs	r5, r5, r0
					dataLenSecond=dataLength-dataLenFirst;
 8002bb4:	1b4b      	subs	r3, r1, r5
					dataLenFirst=oneChanMemSize-j;
 8002bb6:	e9cd 5300 	strd	r5, r3, [sp]
				for(i=0;i<channels;i++){
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05e      	beq.n	8002c7e <CommTask+0x512>
						commsSendBuff(pointer + j, dataLenFirst);
 8002bc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8002bc4:	9305      	str	r3, [sp, #20]
				for(i=0;i<channels;i++){
 8002bc6:	2400      	movs	r4, #0
 8002bc8:	e00b      	b.n	8002be2 <CommTask+0x476>
					}else if(dataLenFirst>0){
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 8198 	bne.w	8002f00 <CommTask+0x794>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002bd0:	9b01      	ldr	r3, [sp, #4]
 8002bd2:	2bc8      	cmp	r3, #200	; 0xc8
 8002bd4:	d834      	bhi.n	8002c40 <CommTask+0x4d4>
					}else if(dataLenSecond>0){
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 818c 	bne.w	8002ef4 <CommTask+0x788>
				for(i=0;i<channels;i++){
 8002bdc:	9b02      	ldr	r3, [sp, #8]
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	d04d      	beq.n	8002c7e <CommTask+0x512>
					pointer = (uint8_t*)getDataPointer(i);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f001 ff4c 	bl	8004a80 <getDataPointer>
					header[14]=(i+1);
 8002be8:	3401      	adds	r4, #1
					pointer = (uint8_t*)getDataPointer(i);
 8002bea:	4605      	mov	r5, r0
					header[14]=(i+1);
 8002bec:	b2e4      	uxtb	r4, r4
					commsSendBuff(header,16);
 8002bee:	2110      	movs	r1, #16
 8002bf0:	a80a      	add	r0, sp, #40	; 0x28
					header[14]=(i+1);
 8002bf2:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
					commsSendBuff(header,16);
 8002bf6:	f008 fef1 	bl	800b9dc <commsSendBuff>
					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002bfa:	9b00      	ldr	r3, [sp, #0]
 8002bfc:	2bc8      	cmp	r3, #200	; 0xc8
 8002bfe:	d9e4      	bls.n	8002bca <CommTask+0x45e>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c00:	9404      	str	r4, [sp, #16]
 8002c02:	9c03      	ldr	r4, [sp, #12]
 8002c04:	461e      	mov	r6, r3
						k=0;
 8002c06:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c0a:	23c8      	movs	r3, #200	; 0xc8
 8002c0c:	fb13 4009 	smlabb	r0, r3, r9, r4
 8002c10:	21c8      	movs	r1, #200	; 0xc8
 8002c12:	4428      	add	r0, r5
							tmpToSend-=COMMS_BULK_SIZE;
 8002c14:	3ec8      	subs	r6, #200	; 0xc8
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c16:	f008 fee1 	bl	800b9dc <commsSendBuff>
							k++;
 8002c1a:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002c1e:	2ec8      	cmp	r6, #200	; 0xc8
							k++;
 8002c20:	fa5f f989 	uxtb.w	r9, r9
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c24:	f04f 01c8 	mov.w	r1, #200	; 0xc8
						while(tmpToSend>COMMS_BULK_SIZE){
 8002c28:	d8ef      	bhi.n	8002c0a <CommTask+0x49e>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002c2a:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8002c2e:	fb11 3309 	smlabb	r3, r1, r9, r3
 8002c32:	18e8      	adds	r0, r5, r3
 8002c34:	b2b1      	uxth	r1, r6
 8002c36:	f008 fed1 	bl	800b9dc <commsSendBuff>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002c3a:	9b01      	ldr	r3, [sp, #4]
 8002c3c:	2bc8      	cmp	r3, #200	; 0xc8
 8002c3e:	d9ca      	bls.n	8002bd6 <CommTask+0x46a>
 8002c40:	461e      	mov	r6, r3
						k=0;
 8002c42:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c46:	eb09 0089 	add.w	r0, r9, r9, lsl #2
 8002c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c4e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002c52:	21c8      	movs	r1, #200	; 0xc8
							tmpToSend-=COMMS_BULK_SIZE;
 8002c54:	3ec8      	subs	r6, #200	; 0xc8
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002c56:	f008 fec1 	bl	800b9dc <commsSendBuff>
							k++;
 8002c5a:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002c5e:	2ec8      	cmp	r6, #200	; 0xc8
							k++;
 8002c60:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 8002c64:	d8ef      	bhi.n	8002c46 <CommTask+0x4da>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002c66:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002c6a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002c6e:	eb05 00c9 	add.w	r0, r5, r9, lsl #3
 8002c72:	b2b1      	uxth	r1, r6
 8002c74:	f008 feb2 	bl	800b9dc <commsSendBuff>
				for(i=0;i<channels;i++){
 8002c78:	9b02      	ldr	r3, [sp, #8]
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	d1b1      	bne.n	8002be2 <CommTask+0x476>
				commsSendString(STR_SCOPE_OK);
 8002c7e:	486c      	ldr	r0, [pc, #432]	; (8002e30 <CommTask+0x6c4>)
 8002c80:	f008 feb6 	bl	800b9f0 <commsSendString>
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002c84:	486b      	ldr	r0, [pc, #428]	; (8002e34 <CommTask+0x6c8>)
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002c86:	2414      	movs	r4, #20
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	f10d 011a 	add.w	r1, sp, #26
 8002c92:	6800      	ldr	r0, [r0, #0]
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002c94:	f8ad 401a 	strh.w	r4, [sp, #26]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002c98:	f006 fa8a 	bl	80091b0 <xQueueGenericSend>
		xSemaphoreGiveRecursive(commsMutex);
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f006 fc79 	bl	8009594 <xQueueGiveMutexRecursive>
 8002ca2:	e59a      	b.n	80027da <CommTask+0x6e>
			sendScopeInputs();
 8002ca4:	f7ff fc94 	bl	80025d0 <sendScopeInputs>
		xSemaphoreGiveRecursive(commsMutex);
 8002ca8:	6838      	ldr	r0, [r7, #0]
 8002caa:	f006 fc73 	bl	8009594 <xQueueGiveMutexRecursive>
 8002cae:	e594      	b.n	80027da <CommTask+0x6e>
			sendScopeConf();
 8002cb0:	f7ff fc3c 	bl	800252c <sendScopeConf>
		xSemaphoreGiveRecursive(commsMutex);
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f006 fc6d 	bl	8009594 <xQueueGiveMutexRecursive>
 8002cba:	e58e      	b.n	80027da <CommTask+0x6e>
	commsSendString("CNT_");
 8002cbc:	485e      	ldr	r0, [pc, #376]	; (8002e38 <CommTask+0x6cc>)
 8002cbe:	f008 fe97 	bl	800b9f0 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 8002cc2:	485e      	ldr	r0, [pc, #376]	; (8002e3c <CommTask+0x6d0>)
 8002cc4:	f008 fe70 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 8002cc8:	485d      	ldr	r0, [pc, #372]	; (8002e40 <CommTask+0x6d4>)
 8002cca:	f008 fe6d 	bl	800b9a8 <commsSendUint32>
	commsSendString(COUNTER_MODES);
 8002cce:	485d      	ldr	r0, [pc, #372]	; (8002e44 <CommTask+0x6d8>)
 8002cd0:	f008 fe8e 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8002cd4:	485c      	ldr	r0, [pc, #368]	; (8002e48 <CommTask+0x6dc>)
 8002cd6:	f008 fe8b 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002cda:	485b      	ldr	r0, [pc, #364]	; (8002e48 <CommTask+0x6dc>)
 8002cdc:	f008 fe88 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002ce0:	485a      	ldr	r0, [pc, #360]	; (8002e4c <CommTask+0x6e0>)
 8002ce2:	f008 fe85 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8002ce6:	485a      	ldr	r0, [pc, #360]	; (8002e50 <CommTask+0x6e4>)
 8002ce8:	f008 fe82 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8002cec:	4856      	ldr	r0, [pc, #344]	; (8002e48 <CommTask+0x6dc>)
 8002cee:	f008 fe7f 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002cf2:	4855      	ldr	r0, [pc, #340]	; (8002e48 <CommTask+0x6dc>)
 8002cf4:	f008 fe7c 	bl	800b9f0 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002cf8:	4854      	ldr	r0, [pc, #336]	; (8002e4c <CommTask+0x6e0>)
 8002cfa:	f008 fe79 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002cfe:	6838      	ldr	r0, [r7, #0]
 8002d00:	f006 fc48 	bl	8009594 <xQueueGiveMutexRecursive>
 8002d04:	e569      	b.n	80027da <CommTask+0x6e>
	commsSendString("COMM");
 8002d06:	4853      	ldr	r0, [pc, #332]	; (8002e54 <CommTask+0x6e8>)
 8002d08:	f008 fe72 	bl	800b9f0 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8002d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d10:	f008 fe4a 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8002d14:	f44f 20e1 	mov.w	r0, #460800	; 0x70800
 8002d18:	f008 fe46 	bl	800b9a8 <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 8002d1c:	484e      	ldr	r0, [pc, #312]	; (8002e58 <CommTask+0x6ec>)
 8002d1e:	f008 fe67 	bl	800b9f0 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002d22:	484e      	ldr	r0, [pc, #312]	; (8002e5c <CommTask+0x6f0>)
 8002d24:	f008 fe64 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	f006 fc33 	bl	8009594 <xQueueGiveMutexRecursive>
 8002d2e:	e554      	b.n	80027da <CommTask+0x6e>
	commsSendString("SYST");
 8002d30:	484b      	ldr	r0, [pc, #300]	; (8002e60 <CommTask+0x6f4>)
 8002d32:	f008 fe5d 	bl	800b9f0 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 8002d36:	f004 fa67 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8002d3a:	f008 fe35 	bl	800b9a8 <commsSendUint32>
	commsSendUint32(HAL_RCC_GetPCLK2Freq()); //PCLK
 8002d3e:	f004 fa81 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 8002d42:	f008 fe31 	bl	800b9a8 <commsSendUint32>
	commsSendString(MCU);
 8002d46:	4847      	ldr	r0, [pc, #284]	; (8002e64 <CommTask+0x6f8>)
 8002d48:	f008 fe52 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f006 fc21 	bl	8009594 <xQueueGiveMutexRecursive>
 8002d52:	e542      	b.n	80027da <CommTask+0x6e>
	commsSendString("VER_");
 8002d54:	4844      	ldr	r0, [pc, #272]	; (8002e68 <CommTask+0x6fc>)
 8002d56:	f008 fe4b 	bl	800b9f0 <commsSendString>
	commsSendString("Instrulab FW"); 	//12
 8002d5a:	4844      	ldr	r0, [pc, #272]	; (8002e6c <CommTask+0x700>)
 8002d5c:	f008 fe48 	bl	800b9f0 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8002d60:	4843      	ldr	r0, [pc, #268]	; (8002e70 <CommTask+0x704>)
 8002d62:	f008 fe45 	bl	800b9f0 <commsSendString>
	commsSendString(BUILD);						//4
 8002d66:	4843      	ldr	r0, [pc, #268]	; (8002e74 <CommTask+0x708>)
 8002d68:	f008 fe42 	bl	800b9f0 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002d6c:	4842      	ldr	r0, [pc, #264]	; (8002e78 <CommTask+0x70c>)
 8002d6e:	f008 fe3f 	bl	800b9f0 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8002d72:	4842      	ldr	r0, [pc, #264]	; (8002e7c <CommTask+0x710>)
 8002d74:	f008 fe3c 	bl	800b9f0 <commsSendString>
	commsSendString("ST HAL");				//6
 8002d78:	4841      	ldr	r0, [pc, #260]	; (8002e80 <CommTask+0x714>)
 8002d7a:	f008 fe39 	bl	800b9f0 <commsSendString>
	commsSend('V');
 8002d7e:	2056      	movs	r0, #86	; 0x56
 8002d80:	f008 fe10 	bl	800b9a4 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8002d84:	f002 fa36 	bl	80051f4 <HAL_GetHalVersion>
 8002d88:	0e00      	lsrs	r0, r0, #24
 8002d8a:	3030      	adds	r0, #48	; 0x30
 8002d8c:	b2c0      	uxtb	r0, r0
 8002d8e:	f008 fe09 	bl	800b9a4 <commsSend>
	commsSend('.');
 8002d92:	202e      	movs	r0, #46	; 0x2e
 8002d94:	f008 fe06 	bl	800b9a4 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8002d98:	f002 fa2c 	bl	80051f4 <HAL_GetHalVersion>
 8002d9c:	0c00      	lsrs	r0, r0, #16
 8002d9e:	3030      	adds	r0, #48	; 0x30
 8002da0:	b2c0      	uxtb	r0, r0
 8002da2:	f008 fdff 	bl	800b9a4 <commsSend>
	commsSend('.');
 8002da6:	202e      	movs	r0, #46	; 0x2e
 8002da8:	f008 fdfc 	bl	800b9a4 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002dac:	f002 fa22 	bl	80051f4 <HAL_GetHalVersion>
 8002db0:	0a00      	lsrs	r0, r0, #8
 8002db2:	3030      	adds	r0, #48	; 0x30
 8002db4:	b2c0      	uxtb	r0, r0
 8002db6:	f008 fdf5 	bl	800b9a4 <commsSend>
		xSemaphoreGiveRecursive(commsMutex);
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f006 fbea 	bl	8009594 <xQueueGiveMutexRecursive>
 8002dc0:	e50b      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_ACK);
 8002dc2:	4830      	ldr	r0, [pc, #192]	; (8002e84 <CommTask+0x718>)
 8002dc4:	f008 fe14 	bl	800b9f0 <commsSendString>
			commsSendString(IDN_STRING);
 8002dc8:	482f      	ldr	r0, [pc, #188]	; (8002e88 <CommTask+0x71c>)
 8002dca:	f008 fe11 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f006 fbe0 	bl	8009594 <xQueueGiveMutexRecursive>
 8002dd4:	e501      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_ACK);
 8002dd6:	482b      	ldr	r0, [pc, #172]	; (8002e84 <CommTask+0x718>)
 8002dd8:	f008 fe0a 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f006 fbd9 	bl	8009594 <xQueueGiveMutexRecursive>
 8002de2:	e4fa      	b.n	80027da <CommTask+0x6e>
			commsSendString(STR_UNKNOWN_MSG);
 8002de4:	4829      	ldr	r0, [pc, #164]	; (8002e8c <CommTask+0x720>)
 8002de6:	f008 fe03 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f006 fbd2 	bl	8009594 <xQueueGiveMutexRecursive>
 8002df0:	e4f3      	b.n	80027da <CommTask+0x6e>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 8002df2:	4827      	ldr	r0, [pc, #156]	; (8002e90 <CommTask+0x724>)
 8002df4:	f008 fdfc 	bl	800b9f0 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 8002df8:	f8d8 0000 	ldr.w	r0, [r8]
 8002dfc:	f008 fdd4 	bl	800b9a8 <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f888 3017 	strb.w	r3, [r8, #23]
 8002e06:	e611      	b.n	8002a2c <CommTask+0x2c0>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002e08:	f89b 33c5 	ldrb.w	r3, [fp, #965]	; 0x3c5
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d17d      	bne.n	8002f0c <CommTask+0x7a0>
					commsSendString(STR_CNT_REF_DATA);
 8002e10:	4820      	ldr	r0, [pc, #128]	; (8002e94 <CommTask+0x728>)
 8002e12:	f008 fded 	bl	800b9f0 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002e16:	ed9b 0bec 	vldr	d0, [fp, #944]	; 0x3b0
 8002e1a:	f008 fe03 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 8002e1e:	6838      	ldr	r0, [r7, #0]
 8002e20:	f006 fbb8 	bl	8009594 <xQueueGiveMutexRecursive>
 8002e24:	e4d9      	b.n	80027da <CommTask+0x6e>
 8002e26:	bf00      	nop
 8002e28:	08011a90 	.word	0x08011a90
 8002e2c:	08011a88 	.word	0x08011a88
 8002e30:	080119f8 	.word	0x080119f8
 8002e34:	20005458 	.word	0x20005458
 8002e38:	08011abc 	.word	0x08011abc
 8002e3c:	08954400 	.word	0x08954400
 8002e40:	044aa200 	.word	0x044aa200
 8002e44:	08011ac4 	.word	0x08011ac4
 8002e48:	08011ad0 	.word	0x08011ad0
 8002e4c:	08011ad4 	.word	0x08011ad4
 8002e50:	08011ad8 	.word	0x08011ad8
 8002e54:	08011aa4 	.word	0x08011aa4
 8002e58:	08011aac 	.word	0x08011aac
 8002e5c:	08011ab4 	.word	0x08011ab4
 8002e60:	08011bb8 	.word	0x08011bb8
 8002e64:	08011bc0 	.word	0x08011bc0
 8002e68:	08011bcc 	.word	0x08011bcc
 8002e6c:	08011bd4 	.word	0x08011bd4
 8002e70:	08011be4 	.word	0x08011be4
 8002e74:	08011bec 	.word	0x08011bec
 8002e78:	08011bf4 	.word	0x08011bf4
 8002e7c:	08011c00 	.word	0x08011c00
 8002e80:	08011c08 	.word	0x08011c08
 8002e84:	080119dc 	.word	0x080119dc
 8002e88:	080119e4 	.word	0x080119e4
 8002e8c:	08011a98 	.word	0x08011a98
 8002e90:	08011a60 	.word	0x08011a60
 8002e94:	08011a18 	.word	0x08011a18
				commsSendString(STR_CNT_ETR_DATA);
 8002e98:	4836      	ldr	r0, [pc, #216]	; (8002f74 <CommTask+0x808>)
 8002e9a:	f008 fda9 	bl	800b9f0 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002e9e:	ed9b 0bec 	vldr	d0, [fp, #944]	; 0x3b0
 8002ea2:	f008 fdbf 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	f006 fb74 	bl	8009594 <xQueueGiveMutexRecursive>
 8002eac:	e495      	b.n	80027da <CommTask+0x6e>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002eae:	f89b 33c8 	ldrb.w	r3, [fp, #968]	; 0x3c8
 8002eb2:	bb93      	cbnz	r3, 8002f1a <CommTask+0x7ae>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002eb4:	f89b 33c6 	ldrb.w	r3, [fp, #966]	; 0x3c6
 8002eb8:	b94b      	cbnz	r3, 8002ece <CommTask+0x762>
						commsSendString(STR_CNT_IC1_DATA);
 8002eba:	482f      	ldr	r0, [pc, #188]	; (8002f78 <CommTask+0x80c>)
 8002ebc:	f008 fd98 	bl	800b9f0 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002ec0:	ed9b 0be0 	vldr	d0, [fp, #896]	; 0x380
 8002ec4:	f008 fdae 	bl	800ba24 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f88b 33c6 	strb.w	r3, [fp, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8002ece:	f89b 33c7 	ldrb.w	r3, [fp, #967]	; 0x3c7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f47f acef 	bne.w	80028b6 <CommTask+0x14a>
						commsSendString(STR_CNT_IC2_DATA);	
 8002ed8:	4828      	ldr	r0, [pc, #160]	; (8002f7c <CommTask+0x810>)
 8002eda:	f008 fd89 	bl	800b9f0 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8002ede:	ed9b 0be2 	vldr	d0, [fp, #904]	; 0x388
 8002ee2:	f008 fd9f 	bl	800ba24 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002ee6:	2301      	movs	r3, #1
		xSemaphoreGiveRecursive(commsMutex);
 8002ee8:	6838      	ldr	r0, [r7, #0]
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002eea:	f88b 33c7 	strb.w	r3, [fp, #967]	; 0x3c7
		xSemaphoreGiveRecursive(commsMutex);
 8002eee:	f006 fb51 	bl	8009594 <xQueueGiveMutexRecursive>
 8002ef2:	e472      	b.n	80027da <CommTask+0x6e>
						commsSendBuff(pointer, dataLenSecond);
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002efa:	f008 fd6f 	bl	800b9dc <commsSendBuff>
 8002efe:	e66d      	b.n	8002bdc <CommTask+0x470>
						commsSendBuff(pointer + j, dataLenFirst);
 8002f00:	9b03      	ldr	r3, [sp, #12]
 8002f02:	9905      	ldr	r1, [sp, #20]
 8002f04:	18e8      	adds	r0, r5, r3
 8002f06:	f008 fd69 	bl	800b9dc <commsSendBuff>
 8002f0a:	e661      	b.n	8002bd0 <CommTask+0x464>
					commsSendString(STR_CNT_REF_WARN);
 8002f0c:	481c      	ldr	r0, [pc, #112]	; (8002f80 <CommTask+0x814>)
 8002f0e:	f008 fd6f 	bl	800b9f0 <commsSendString>
		xSemaphoreGiveRecursive(commsMutex);
 8002f12:	6838      	ldr	r0, [r7, #0]
 8002f14:	f006 fb3e 	bl	8009594 <xQueueGiveMutexRecursive>
 8002f18:	e45f      	b.n	80027da <CommTask+0x6e>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8002f1a:	481a      	ldr	r0, [pc, #104]	; (8002f84 <CommTask+0x818>)
 8002f1c:	f008 fd68 	bl	800b9f0 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002f20:	ed9b 0be0 	vldr	d0, [fp, #896]	; 0x380
 8002f24:	f008 fd7e 	bl	800ba24 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 8002f28:	4817      	ldr	r0, [pc, #92]	; (8002f88 <CommTask+0x81c>)
 8002f2a:	f008 fd61 	bl	800b9f0 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 8002f2e:	ed9b 0be2 	vldr	d0, [fp, #904]	; 0x388
 8002f32:	f008 fd77 	bl	800ba24 <commsSendDouble>
		xSemaphoreGiveRecursive(commsMutex);
 8002f36:	6838      	ldr	r0, [r7, #0]
 8002f38:	f006 fb2c 	bl	8009594 <xQueueGiveMutexRecursive>
 8002f3c:	e44d      	b.n	80027da <CommTask+0x6e>
					dataLenSecond=0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	e63a      	b.n	8002bba <CommTask+0x44e>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002f44:	f001 fdaa 	bl	8004a9c <getTriggerIndex>
 8002f48:	4606      	mov	r6, r0
 8002f4a:	f001 fdad 	bl	8004aa8 <getSamples>
 8002f4e:	4681      	mov	r9, r0
 8002f50:	f001 fdb6 	bl	8004ac0 <getPretrigger>
 8002f54:	442e      	add	r6, r5
 8002f56:	fb09 f300 	mul.w	r3, r9, r0
 8002f5a:	eba6 4313 	sub.w	r3, r6, r3, lsr #16
 8002f5e:	fbb3 f6f5 	udiv	r6, r3, r5
 8002f62:	fb05 3316 	mls	r3, r5, r6, r3
 8002f66:	9303      	str	r3, [sp, #12]
 8002f68:	9900      	ldr	r1, [sp, #0]
 8002f6a:	e610      	b.n	8002b8e <CommTask+0x422>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8002f6c:	4807      	ldr	r0, [pc, #28]	; (8002f8c <CommTask+0x820>)
 8002f6e:	f008 fd3f 	bl	800b9f0 <commsSendString>
					break;
 8002f72:	e49d      	b.n	80028b0 <CommTask+0x144>
 8002f74:	08011a10 	.word	0x08011a10
 8002f78:	08011a28 	.word	0x08011a28
 8002f7c:	08011a30 	.word	0x08011a30
 8002f80:	08011a20 	.word	0x08011a20
 8002f84:	08011a38 	.word	0x08011a38
 8002f88:	08011a40 	.word	0x08011a40
 8002f8c:	08011a48 	.word	0x08011a48

08002f90 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8002f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8002f9e:	f8ad 3006 	strh.w	r3, [sp, #6]
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002fa2:	f006 f8c1 	bl	8009128 <xQueueGenericCreate>
 8002fa6:	4e88      	ldr	r6, [pc, #544]	; (80031c8 <CounterTask+0x238>)
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002fa8:	4c88      	ldr	r4, [pc, #544]	; (80031cc <CounterTask+0x23c>)
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002faa:	6030      	str	r0, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002fac:	2004      	movs	r0, #4
 8002fae:	f006 fabd 	bl	800952c <xQueueCreateMutex>

	if(counterMessageQueue == 0){
 8002fb2:	6833      	ldr	r3, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8002fb4:	6020      	str	r0, [r4, #0]
	if(counterMessageQueue == 0){
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8105 	beq.w	80031c6 <CounterTask+0x236>
 8002fbc:	4d84      	ldr	r5, [pc, #528]	; (80031d0 <CounterTask+0x240>)
	case 500: 													/* ----	gate time 00.50 second */
		counter.counterEtr.psc = 5999;
		counter.counterEtr.arr = 5999;
		break;
	case 1000: 													/* ----	gate time 01.00 second */
		counter.counterEtr.psc = 7199;
 8002fbe:	f641 471f 	movw	r7, #7199	; 0x1c1f
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f10d 0106 	add.w	r1, sp, #6
 8002fce:	f006 fb97 	bl	8009700 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	f006 fd1a 	bl	8009a10 <xQueueTakeMutexRecursive>
		switch(message){
 8002fdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002fe0:	3b06      	subs	r3, #6
 8002fe2:	2b07      	cmp	r3, #7
 8002fe4:	d820      	bhi.n	8003028 <CounterTask+0x98>
 8002fe6:	e8df f003 	tbb	[pc, r3]
 8002fea:	3f51      	.short	0x3f51
 8002fec:	2d36485a 	.word	0x2d36485a
 8002ff0:	0424      	.short	0x0424
			counterGateConfig(counter.counterEtr.gateTime);
 8002ff2:	f8b5 33ac 	ldrh.w	r3, [r5, #940]	; 0x3ac
 8002ff6:	b29b      	uxth	r3, r3
	switch(gateTime){
 8002ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffc:	f000 80dc 	beq.w	80031b8 <CounterTask+0x228>
 8003000:	f200 80b8 	bhi.w	8003174 <CounterTask+0x1e4>
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	f000 80c7 	beq.w	8003198 <CounterTask+0x208>
 800300a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800300e:	d105      	bne.n	800301c <CounterTask+0x8c>
		counter.counterEtr.psc = 5999;
 8003010:	f241 736f 	movw	r3, #5999	; 0x176f
 8003014:	f8a5 339a 	strh.w	r3, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 5999;
 8003018:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
		break;
	default:
		break;
	}

	TIM_ARR_PSC_Config(counter.counterEtr.arr, counter.counterEtr.psc);
 800301c:	f8b5 0398 	ldrh.w	r0, [r5, #920]	; 0x398
 8003020:	f8b5 139a 	ldrh.w	r1, [r5, #922]	; 0x39a
 8003024:	f00a fb42 	bl	800d6ac <TIM_ARR_PSC_Config>
		xSemaphoreGiveRecursive(counterMutex);
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	f006 fab3 	bl	8009594 <xQueueGiveMutexRecursive>
 800302e:	6833      	ldr	r3, [r6, #0]
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003030:	e7c7      	b.n	8002fc2 <CounterTask+0x32>
	switch(counter.state){
 8003032:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003036:	3b01      	subs	r3, #1
 8003038:	2b03      	cmp	r3, #3
 800303a:	d8f5      	bhi.n	8003028 <CounterTask+0x98>
 800303c:	e8df f003 	tbb	[pc, r3]
 8003040:	857c7f82 	.word	0x857c7f82
	switch(counter.state){
 8003044:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003048:	3b01      	subs	r3, #1
 800304a:	2b03      	cmp	r3, #3
 800304c:	d8ec      	bhi.n	8003028 <CounterTask+0x98>
 800304e:	e8df f003 	tbb	[pc, r3]
 8003052:	3532      	.short	0x3532
 8003054:	3238      	.short	0x3238
	switch(counter.state){
 8003056:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800305a:	3b01      	subs	r3, #1
 800305c:	2b03      	cmp	r3, #3
 800305e:	d8e3      	bhi.n	8003028 <CounterTask+0x98>
 8003060:	e8df f003 	tbb	[pc, r3]
 8003064:	26564b26 	.word	0x26564b26
	switch(counter.state){
 8003068:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800306c:	3b01      	subs	r3, #1
 800306e:	2b03      	cmp	r3, #3
 8003070:	d82c      	bhi.n	80030cc <CounterTask+0x13c>
 8003072:	e8df f003 	tbb	[pc, r3]
 8003076:	6d73      	.short	0x6d73
 8003078:	7029      	.short	0x7029
 800307a:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800307e:	3b01      	subs	r3, #1
 8003080:	2b03      	cmp	r3, #3
 8003082:	d83f      	bhi.n	8003104 <CounterTask+0x174>
 8003084:	e8df f003 	tbb	[pc, r3]
 8003088:	703c6d73 	.word	0x703c6d73
 800308c:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003090:	3b01      	subs	r3, #1
 8003092:	2b03      	cmp	r3, #3
 8003094:	d822      	bhi.n	80030dc <CounterTask+0x14c>
 8003096:	e8df f003 	tbb	[pc, r3]
 800309a:	272d      	.short	0x272d
 800309c:	2a1f      	.short	0x2a1f
 800309e:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80030a2:	3b01      	subs	r3, #1
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d838      	bhi.n	800311a <CounterTask+0x18a>
 80030a8:	e8df f003 	tbb	[pc, r3]
 80030ac:	40353d43 	.word	0x40353d43
		TIM_ETR_Start();
 80030b0:	f009 fefe 	bl	800ceb0 <TIM_ETR_Start>
 80030b4:	e7b8      	b.n	8003028 <CounterTask+0x98>
		TIM_ETR_Stop();
 80030b6:	f009 ff27 	bl	800cf08 <TIM_ETR_Stop>
 80030ba:	e7b5      	b.n	8003028 <CounterTask+0x98>
		TIM_IC_Stop();
 80030bc:	f009 ff6e 	bl	800cf9c <TIM_IC_Stop>
 80030c0:	e7b2      	b.n	8003028 <CounterTask+0x98>
		TIM_TI_Stop();
 80030c2:	f00a f855 	bl	800d170 <TIM_TI_Stop>
 80030c6:	e7af      	b.n	8003028 <CounterTask+0x98>
		TIM_ti_deinit();
 80030c8:	f009 feca 	bl	800ce60 <TIM_ti_deinit>
	counter.state = COUNTER_IC;
 80030cc:	2302      	movs	r3, #2
 80030ce:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ic_init();
 80030d2:	f009 fd5b 	bl	800cb8c <TIM_counter_ic_init>
 80030d6:	e7a7      	b.n	8003028 <CounterTask+0x98>
		TIM_ti_deinit();
 80030d8:	f009 fec2 	bl	800ce60 <TIM_ti_deinit>
	counter.state = COUNTER_ETR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_etr_init();
 80030e2:	f009 fc91 	bl	800ca08 <TIM_counter_etr_init>
 80030e6:	e79f      	b.n	8003028 <CounterTask+0x98>
		TIM_ic_deinit();
 80030e8:	f009 feac 	bl	800ce44 <TIM_ic_deinit>
 80030ec:	e7f6      	b.n	80030dc <CounterTask+0x14c>
		TIM_ref_deinit();
 80030ee:	f009 fe9b 	bl	800ce28 <TIM_ref_deinit>
 80030f2:	e7f3      	b.n	80030dc <CounterTask+0x14c>
		TIM_etr_deinit();
 80030f4:	f009 fe8a 	bl	800ce0c <TIM_etr_deinit>
 80030f8:	e7f0      	b.n	80030dc <CounterTask+0x14c>
		TIM_IC_Start();
 80030fa:	f009 ff1d 	bl	800cf38 <TIM_IC_Start>
 80030fe:	e793      	b.n	8003028 <CounterTask+0x98>
		TIM_ti_deinit();
 8003100:	f009 feae 	bl	800ce60 <TIM_ti_deinit>
	counter.state = COUNTER_TI;
 8003104:	2303      	movs	r3, #3
 8003106:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ti_init();
 800310a:	f009 fda1 	bl	800cc50 <TIM_counter_ti_init>
 800310e:	e78b      	b.n	8003028 <CounterTask+0x98>
		TIM_TI_Start();
 8003110:	f009 ff6a 	bl	800cfe8 <TIM_TI_Start>
 8003114:	e788      	b.n	8003028 <CounterTask+0x98>
		TIM_ti_deinit();
 8003116:	f009 fea3 	bl	800ce60 <TIM_ti_deinit>
	counter.state = COUNTER_REF;
 800311a:	2304      	movs	r3, #4
 800311c:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ref_init();
 8003120:	f009 fcde 	bl	800cae0 <TIM_counter_ref_init>
 8003124:	e780      	b.n	8003028 <CounterTask+0x98>
		TIM_ic_deinit();
 8003126:	f009 fe8d 	bl	800ce44 <TIM_ic_deinit>
 800312a:	e7f6      	b.n	800311a <CounterTask+0x18a>
		TIM_ref_deinit();
 800312c:	f009 fe7c 	bl	800ce28 <TIM_ref_deinit>
 8003130:	e7f3      	b.n	800311a <CounterTask+0x18a>
		TIM_etr_deinit();
 8003132:	f009 fe6b 	bl	800ce0c <TIM_etr_deinit>
 8003136:	e7f0      	b.n	800311a <CounterTask+0x18a>
		TIM_ti_deinit();
 8003138:	f009 fe92 	bl	800ce60 <TIM_ti_deinit>
 800313c:	e774      	b.n	8003028 <CounterTask+0x98>
		TIM_ic_deinit();
 800313e:	f009 fe81 	bl	800ce44 <TIM_ic_deinit>
 8003142:	e771      	b.n	8003028 <CounterTask+0x98>
		TIM_etr_deinit();
 8003144:	f009 fe62 	bl	800ce0c <TIM_etr_deinit>
 8003148:	e76e      	b.n	8003028 <CounterTask+0x98>
		TIM_ref_deinit();
 800314a:	f009 fe6d 	bl	800ce28 <TIM_ref_deinit>
 800314e:	e76b      	b.n	8003028 <CounterTask+0x98>
		TIM_ic_deinit();
 8003150:	f009 fe78 	bl	800ce44 <TIM_ic_deinit>
 8003154:	e7ba      	b.n	80030cc <CounterTask+0x13c>
		TIM_ref_deinit();
 8003156:	f009 fe67 	bl	800ce28 <TIM_ref_deinit>
 800315a:	e7b7      	b.n	80030cc <CounterTask+0x13c>
		TIM_etr_deinit();
 800315c:	f009 fe56 	bl	800ce0c <TIM_etr_deinit>
 8003160:	e7b4      	b.n	80030cc <CounterTask+0x13c>
		TIM_ic_deinit();
 8003162:	f009 fe6f 	bl	800ce44 <TIM_ic_deinit>
 8003166:	e7cd      	b.n	8003104 <CounterTask+0x174>
		TIM_ref_deinit();
 8003168:	f009 fe5e 	bl	800ce28 <TIM_ref_deinit>
 800316c:	e7ca      	b.n	8003104 <CounterTask+0x174>
		TIM_etr_deinit();
 800316e:	f009 fe4d 	bl	800ce0c <TIM_etr_deinit>
 8003172:	e7c7      	b.n	8003104 <CounterTask+0x174>
	switch(gateTime){
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d014      	beq.n	80031a6 <CounterTask+0x216>
 800317c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003180:	4293      	cmp	r3, r2
 8003182:	f47f af4b 	bne.w	800301c <CounterTask+0x8c>
		counter.counterEtr.psc = 35999;
 8003186:	f648 429f 	movw	r2, #35999	; 0x8c9f
		counter.counterEtr.arr = 19999;
 800318a:	f644 631f 	movw	r3, #19999	; 0x4e1f
		counter.counterEtr.psc = 35999;
 800318e:	f8a5 239a 	strh.w	r2, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 19999;
 8003192:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 8003196:	e741      	b.n	800301c <CounterTask+0x8c>
		counter.counterEtr.arr = 999;
 8003198:	f240 33e7 	movw	r3, #999	; 0x3e7
		counter.counterEtr.psc = 7199;
 800319c:	f8a5 739a 	strh.w	r7, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 999;
 80031a0:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 80031a4:	e73a      	b.n	800301c <CounterTask+0x8c>
		counter.counterEtr.psc = 59999;
 80031a6:	f64e 225f 	movw	r2, #59999	; 0xea5f
		counter.counterEtr.arr = 5999;
 80031aa:	f241 736f 	movw	r3, #5999	; 0x176f
		counter.counterEtr.psc = 59999;
 80031ae:	f8a5 239a 	strh.w	r2, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 5999;
 80031b2:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 80031b6:	e731      	b.n	800301c <CounterTask+0x8c>
		counter.counterEtr.arr = 9999;
 80031b8:	f242 730f 	movw	r3, #9999	; 0x270f
		counter.counterEtr.psc = 7199;
 80031bc:	f8a5 739a 	strh.w	r7, [r5, #922]	; 0x39a
		counter.counterEtr.arr = 9999;
 80031c0:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
 80031c4:	e72a      	b.n	800301c <CounterTask+0x8c>
 80031c6:	e7fe      	b.n	80031c6 <CounterTask+0x236>
 80031c8:	20004844 	.word	0x20004844
 80031cc:	20004c18 	.word	0x20004c18
 80031d0:	20004848 	.word	0x20004848

080031d4 <counterSetMode>:
void counterSetMode(uint8_t mode){
 80031d4:	b500      	push	{lr}
 80031d6:	b083      	sub	sp, #12
	switch(mode){
 80031d8:	2803      	cmp	r0, #3
 80031da:	d80e      	bhi.n	80031fa <counterSetMode+0x26>
 80031dc:	e8df f000 	tbb	[pc, r0]
 80031e0:	02101316 	.word	0x02101316
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 80031e4:	a902      	add	r1, sp, #8
 80031e6:	2308      	movs	r3, #8
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 80031e8:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <counterSetMode+0x40>)
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	f005 ffdb 	bl	80091b0 <xQueueGenericSend>
}
 80031fa:	b003      	add	sp, #12
 80031fc:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003200:	a902      	add	r1, sp, #8
 8003202:	2309      	movs	r3, #9
 8003204:	e7f0      	b.n	80031e8 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8003206:	a902      	add	r1, sp, #8
 8003208:	2307      	movs	r3, #7
 800320a:	e7ed      	b.n	80031e8 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 800320c:	a902      	add	r1, sp, #8
 800320e:	2306      	movs	r3, #6
 8003210:	e7ea      	b.n	80031e8 <counterSetMode+0x14>
 8003212:	bf00      	nop
 8003214:	20004844 	.word	0x20004844

08003218 <counterSendStart>:
void counterSendStart(void){	
 8003218:	b530      	push	{r4, r5, lr}
 800321a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_START;
 800321c:	a902      	add	r1, sp, #8
 800321e:	230a      	movs	r3, #10
 8003220:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <counterSendStart+0x28>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003226:	4d07      	ldr	r5, [pc, #28]	; (8003244 <counterSendStart+0x2c>)
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003228:	6818      	ldr	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800322a:	2400      	movs	r4, #0
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800322c:	4623      	mov	r3, r4
 800322e:	f04f 32ff 	mov.w	r2, #4294967295
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003232:	f885 43c4 	strb.w	r4, [r5, #964]	; 0x3c4
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003236:	f005 ffbb 	bl	80091b0 <xQueueGenericSend>
}
 800323a:	b003      	add	sp, #12
 800323c:	bd30      	pop	{r4, r5, pc}
 800323e:	bf00      	nop
 8003240:	20004844 	.word	0x20004844
 8003244:	20004848 	.word	0x20004848

08003248 <counterSendStop>:
void counterSendStop(void){	
 8003248:	b500      	push	{lr}
 800324a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_STOP;
 800324c:	a902      	add	r1, sp, #8
 800324e:	230b      	movs	r3, #11
 8003250:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <counterSendStop+0x20>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	f005 ffa7 	bl	80091b0 <xQueueGenericSend>
}
 8003262:	b003      	add	sp, #12
 8003264:	f85d fb04 	ldr.w	pc, [sp], #4
 8003268:	20004844 	.word	0x20004844

0800326c <counterDeinit>:
void counterDeinit(void){
 800326c:	b500      	push	{lr}
 800326e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_DEINIT;
 8003270:	a902      	add	r1, sp, #8
 8003272:	230c      	movs	r3, #12
 8003274:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <counterDeinit+0x20>)
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	f005 ff95 	bl	80091b0 <xQueueGenericSend>
}
 8003286:	b003      	add	sp, #12
 8003288:	f85d fb04 	ldr.w	pc, [sp], #4
 800328c:	20004844 	.word	0x20004844

08003290 <counterSetEtrGate>:
void counterSetEtrGate(uint16_t gateTime){
 8003290:	b510      	push	{r4, lr}
 8003292:	b082      	sub	sp, #8
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8003294:	a902      	add	r1, sp, #8
 8003296:	230d      	movs	r3, #13
 8003298:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800329c:	4c06      	ldr	r4, [pc, #24]	; (80032b8 <counterSetEtrGate+0x28>)
	counter.counterEtr.gateTime = gateTime;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <counterSetEtrGate+0x2c>)
void counterSetEtrGate(uint16_t gateTime){
 80032a0:	4602      	mov	r2, r0
	counter.counterEtr.gateTime = gateTime;
 80032a2:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80032a6:	6820      	ldr	r0, [r4, #0]
 80032a8:	2300      	movs	r3, #0
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295
 80032ae:	f005 ff7f 	bl	80091b0 <xQueueGenericSend>
}
 80032b2:	b002      	add	sp, #8
 80032b4:	bd10      	pop	{r4, pc}
 80032b6:	bf00      	nop
 80032b8:	20004844 	.word	0x20004844
 80032bc:	20004848 	.word	0x20004848

080032c0 <counterSetRefSampleCount>:
void counterSetRefSampleCount(uint32_t sampleCount){
 80032c0:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80032c2:	4d09      	ldr	r5, [pc, #36]	; (80032e8 <counterSetRefSampleCount+0x28>)
void counterSetRefSampleCount(uint32_t sampleCount){
 80032c4:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80032c6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ca:	6828      	ldr	r0, [r5, #0]
 80032cc:	f006 fba0 	bl	8009a10 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <counterSetRefSampleCount+0x2c>)
	xSemaphoreGiveRecursive(counterMutex);
 80032d2:	6828      	ldr	r0, [r5, #0]
	counter.counterEtr.refBuffer = sampleCount;
 80032d4:	f8c3 43a8 	str.w	r4, [r3, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 80032d8:	f006 f95c 	bl	8009594 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 80032dc:	4620      	mov	r0, r4
}
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TIM_REF_Reconfig_cnt(sampleCount);
 80032e2:	f00a ba19 	b.w	800d718 <TIM_REF_Reconfig_cnt>
 80032e6:	bf00      	nop
 80032e8:	20004c18 	.word	0x20004c18
 80032ec:	20004848 	.word	0x20004848

080032f0 <counterSetIc1SampleCount>:
void counterSetIc1SampleCount(uint16_t buffer){
 80032f0:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80032f2:	4d0b      	ldr	r5, [pc, #44]	; (8003320 <counterSetIc1SampleCount+0x30>)
void counterSetIc1SampleCount(uint16_t buffer){
 80032f4:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80032f6:	f04f 31ff 	mov.w	r1, #4294967295
 80032fa:	6828      	ldr	r0, [r5, #0]
 80032fc:	f006 fb88 	bl	8009a10 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003300:	3401      	adds	r4, #1
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <counterSetIc1SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch1);	
 8003304:	4808      	ldr	r0, [pc, #32]	; (8003328 <counterSetIc1SampleCount+0x38>)
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003306:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003308:	2200      	movs	r2, #0
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 800330a:	80dc      	strh	r4, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800330c:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 8003310:	f00a fa6e 	bl	800d7f0 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003314:	6828      	ldr	r0, [r5, #0]
}
 8003316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 800331a:	f006 b93b 	b.w	8009594 <xQueueGiveMutexRecursive>
 800331e:	bf00      	nop
 8003320:	20004c18 	.word	0x20004c18
 8003324:	20004848 	.word	0x20004848
 8003328:	2000ce50 	.word	0x2000ce50

0800332c <counterSetIc2SampleCount>:
void counterSetIc2SampleCount(uint16_t buffer){
 800332c:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800332e:	4d0b      	ldr	r5, [pc, #44]	; (800335c <counterSetIc2SampleCount+0x30>)
void counterSetIc2SampleCount(uint16_t buffer){
 8003330:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003332:	f04f 31ff 	mov.w	r1, #4294967295
 8003336:	6828      	ldr	r0, [r5, #0]
 8003338:	f006 fb6a 	bl	8009a10 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 800333c:	3401      	adds	r4, #1
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <counterSetIc2SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003340:	4808      	ldr	r0, [pc, #32]	; (8003364 <counterSetIc2SampleCount+0x38>)
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003342:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003344:	2200      	movs	r2, #0
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003346:	811c      	strh	r4, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003348:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800334c:	f00a fa50 	bl	800d7f0 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003350:	6828      	ldr	r0, [r5, #0]
}
 8003352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 8003356:	f006 b91d 	b.w	8009594 <xQueueGiveMutexRecursive>
 800335a:	bf00      	nop
 800335c:	20004c18 	.word	0x20004c18
 8003360:	20004848 	.word	0x20004848
 8003364:	2000cf18 	.word	0x2000cf18

08003368 <counterSetIc1Prescaler>:
void counterSetIc1Prescaler(uint16_t presc){
 8003368:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <counterSetIc1Prescaler+0x1c>)
	TIM_IC1_PSC_Config(presc);
 800336c:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800336e:	2200      	movs	r2, #0
 8003370:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 8003374:	f00a f8da 	bl	800d52c <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 8003378:	4803      	ldr	r0, [pc, #12]	; (8003388 <counterSetIc1Prescaler+0x20>)
}
 800337a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 800337e:	f00a ba37 	b.w	800d7f0 <DMA_Restart>
 8003382:	bf00      	nop
 8003384:	20004848 	.word	0x20004848
 8003388:	2000ce50 	.word	0x2000ce50

0800338c <counterSetIc2Prescaler>:
void counterSetIc2Prescaler(uint16_t presc){		
 800338c:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <counterSetIc2Prescaler+0x1c>)
	TIM_IC2_PSC_Config(presc);	
 8003390:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003392:	2200      	movs	r2, #0
 8003394:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 8003398:	f00a f8e8 	bl	800d56c <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800339c:	4803      	ldr	r0, [pc, #12]	; (80033ac <counterSetIc2Prescaler+0x20>)
}
 800339e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80033a2:	f00a ba25 	b.w	800d7f0 <DMA_Restart>
 80033a6:	bf00      	nop
 80033a8:	20004848 	.word	0x20004848
 80033ac:	2000cf18 	.word	0x2000cf18

080033b0 <counterIc1DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <counterIc1DutyCycleInit+0xc>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 80033b8:	f009 bf28 	b.w	800d20c <TIM_IC_DutyCycle_Init>
 80033bc:	20004848 	.word	0x20004848

080033c0 <counterIc1DutyCycleDeinit>:
void counterIc1DutyCycleDeinit(void){	
 80033c0:	b508      	push	{r3, lr}
	TIM_IC_DutyCycle_Deinit();		
 80033c2:	f009 ff97 	bl	800d2f4 <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 80033c6:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <counterIc1DutyCycleDeinit+0x10>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 80033ce:	bd08      	pop	{r3, pc}
 80033d0:	20004848 	.word	0x20004848

080033d4 <counterIc2DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <counterIc2DutyCycleInit+0xc>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 80033dc:	f009 bf16 	b.w	800d20c <TIM_IC_DutyCycle_Init>
 80033e0:	20004848 	.word	0x20004848

080033e4 <counterIc2DutyCycleDeinit>:
 80033e4:	b508      	push	{r3, lr}
 80033e6:	f009 ff85 	bl	800d2f4 <TIM_IC_DutyCycle_Deinit>
 80033ea:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <counterIc2DutyCycleDeinit+0x10>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 80033f2:	bd08      	pop	{r3, pc}
 80033f4:	20004848 	.word	0x20004848

080033f8 <counterIcDutyCycleEnable>:
	TIM_IC_DutyCycle_Start();
 80033f8:	f009 bfd2 	b.w	800d3a0 <TIM_IC_DutyCycle_Start>

080033fc <counterIcDutyCycleDisable>:
	TIM_IC_DutyCycle_Stop();
 80033fc:	f00a b808 	b.w	800d410 <TIM_IC_DutyCycle_Stop>

08003400 <counterSetIcTi1_RisingFalling>:
void counterSetIcTi1_RisingFalling(void){	
 8003400:	b508      	push	{r3, lr}
	TIM_IC1_RisingFalling();	
 8003402:	f00a f8d3 	bl	800d5ac <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 8003406:	4802      	ldr	r0, [pc, #8]	; (8003410 <counterSetIcTi1_RisingFalling+0x10>)
}	
 8003408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 800340c:	f00a b9f0 	b.w	800d7f0 <DMA_Restart>
 8003410:	2000ce50 	.word	0x2000ce50

08003414 <counterSetIcTi1_Rising>:
	counter.eventChan1 = EVENT_RISING;
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <counterSetIcTi1_Rising+0xc>)
 8003416:	2200      	movs	r2, #0
 8003418:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 800341c:	f00a b8d0 	b.w	800d5c0 <TIM_IC1_RisingOnly>
 8003420:	20004848 	.word	0x20004848

08003424 <counterSetIcTi1_Falling>:
	counter.eventChan1 = EVENT_FALLING;
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <counterSetIcTi1_Falling+0xc>)
 8003426:	2201      	movs	r2, #1
 8003428:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 800342c:	f00a b8d2 	b.w	800d5d4 <TIM_IC1_FallingOnly>
 8003430:	20004848 	.word	0x20004848

08003434 <counterSetIcTi2_RisingFalling>:
void counterSetIcTi2_RisingFalling(void){
 8003434:	b508      	push	{r3, lr}
	TIM_IC2_RisingFalling();
 8003436:	f00a f8db 	bl	800d5f0 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800343a:	4802      	ldr	r0, [pc, #8]	; (8003444 <counterSetIcTi2_RisingFalling+0x10>)
}	
 800343c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003440:	f00a b9d6 	b.w	800d7f0 <DMA_Restart>
 8003444:	2000cf18 	.word	0x2000cf18

08003448 <counterSetIcTi2_Rising>:
	counter.eventChan2 = EVENT_RISING;
 8003448:	4b02      	ldr	r3, [pc, #8]	; (8003454 <counterSetIcTi2_Rising+0xc>)
 800344a:	2200      	movs	r2, #0
 800344c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 8003450:	f00a b8d8 	b.w	800d604 <TIM_IC2_RisingOnly>
 8003454:	20004848 	.word	0x20004848

08003458 <counterSetIcTi2_Falling>:
	counter.eventChan2 = EVENT_FALLING;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <counterSetIcTi2_Falling+0xc>)
 800345a:	2201      	movs	r2, #1
 800345c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 8003460:	f00a b8da 	b.w	800d618 <TIM_IC2_FallingOnly>
 8003464:	20004848 	.word	0x20004848

08003468 <counterSetTiSequence_AB>:
	TIM_TI_Sequence_AB();
 8003468:	f00a b8e4 	b.w	800d634 <TIM_TI_Sequence_AB>

0800346c <counterSetTiSequence_BA>:
	TIM_TI_Sequence_BA();
 800346c:	f00a b900 	b.w	800d670 <TIM_TI_Sequence_BA>

08003470 <counterSetTiMode_Independent>:
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <counterSetTiMode_Independent+0xc>)
 8003472:	2200      	movs	r2, #0
 8003474:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20004848 	.word	0x20004848

08003480 <counterSetTiMode_Dependent>:
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <counterSetTiMode_Dependent+0xc>)
 8003482:	2201      	movs	r2, #1
 8003484:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20004848 	.word	0x20004848

08003490 <counterSetTiTimeout>:
	counter.counterIc.tiTimeout = timeout;				
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <counterSetTiTimeout+0x8>)
 8003492:	f8c3 0394 	str.w	r0, [r3, #916]	; 0x394
}
 8003496:	4770      	bx	lr
 8003498:	20004848 	.word	0x20004848

0800349c <COUNTER_ETR_DMA_CpltCallback>:
{			
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.state == COUNTER_ETR){
 80034a0:	4c54      	ldr	r4, [pc, #336]	; (80035f4 <COUNTER_ETR_DMA_CpltCallback+0x158>)
 80034a2:	f894 53b8 	ldrb.w	r5, [r4, #952]	; 0x3b8
{			
 80034a6:	b083      	sub	sp, #12
	if(counter.state == COUNTER_ETR){
 80034a8:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80034aa:	230e      	movs	r3, #14
	if(counter.state == COUNTER_ETR){
 80034ac:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80034ae:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.state == COUNTER_ETR){
 80034b2:	d017      	beq.n	80034e4 <COUNTER_ETR_DMA_CpltCallback+0x48>
	}else if(counter.state == COUNTER_REF){		
 80034b4:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d002      	beq.n	80034c2 <COUNTER_ETR_DMA_CpltCallback+0x26>
}
 80034bc:	b003      	add	sp, #12
 80034be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 80034c2:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d160      	bne.n	800358c <COUNTER_ETR_DMA_CpltCallback+0xf0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 80034ca:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 80034ce:	b11b      	cbz	r3, 80034d8 <COUNTER_ETR_DMA_CpltCallback+0x3c>
 80034d0:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d16e      	bne.n	80035b6 <COUNTER_ETR_DMA_CpltCallback+0x11a>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80034d8:	2301      	movs	r3, #1
 80034da:	f884 33c4 	strb.w	r3, [r4, #964]	; 0x3c4
}
 80034de:	b003      	add	sp, #12
 80034e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 80034e4:	f00a f93e 	bl	800d764 <TIM_ETPS_GetPrescaler>
 80034e8:	f884 03a0 	strb.w	r0, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 80034ec:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 80034f0:	f8b4 b398 	ldrh.w	fp, [r4, #920]	; 0x398
 80034f4:	f8b4 a39a 	ldrh.w	sl, [r4, #922]	; 0x39a
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 80034f8:	f8d4 73a4 	ldr.w	r7, [r4, #932]	; 0x3a4
 80034fc:	f894 63a0 	ldrb.w	r6, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8003500:	f7fc ffb8 	bl	8000474 <__aeabi_ui2d>
 8003504:	fa1f fa8a 	uxth.w	sl, sl
 8003508:	4680      	mov	r8, r0
 800350a:	fa1f fb8b 	uxth.w	fp, fp
 800350e:	f10a 0001 	add.w	r0, sl, #1
 8003512:	fb0b 0000 	mla	r0, fp, r0, r0
 8003516:	4689      	mov	r9, r1
 8003518:	f7fc ffbc 	bl	8000494 <__aeabi_i2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fd f94a 	bl	80007bc <__aeabi_ddiv>
 8003528:	f7fd fb16 	bl	8000b58 <__aeabi_d2f>
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 800352c:	f7fc ffc4 	bl	80004b8 <__aeabi_f2d>
 8003530:	4680      	mov	r8, r0
 8003532:	4638      	mov	r0, r7
 8003534:	4689      	mov	r9, r1
 8003536:	f7fc ff9d 	bl	8000474 <__aeabi_ui2d>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4640      	mov	r0, r8
 8003540:	4649      	mov	r1, r9
 8003542:	f7fd f811 	bl	8000568 <__aeabi_dmul>
 8003546:	b2f6      	uxtb	r6, r6
 8003548:	4680      	mov	r8, r0
 800354a:	4630      	mov	r0, r6
 800354c:	4689      	mov	r9, r1
 800354e:	f7fc ffa1 	bl	8000494 <__aeabi_i2d>
 8003552:	460b      	mov	r3, r1
 8003554:	4602      	mov	r2, r0
 8003556:	4649      	mov	r1, r9
 8003558:	4640      	mov	r0, r8
 800355a:	f7fd f805 	bl	8000568 <__aeabi_dmul>
 800355e:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		TIM_ETRP_Config(counter.counterEtr.freq);	
 8003562:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 8003566:	f009 ff73 	bl	800d450 <TIM_ETRP_Config>
		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 800356a:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 800356e:	b923      	cbnz	r3, 800357a <COUNTER_ETR_DMA_CpltCallback+0xde>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003570:	f884 53c4 	strb.w	r5, [r4, #964]	; 0x3c4
}
 8003574:	b003      	add	sp, #12
 8003576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800357a:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 800357c:	2300      	movs	r3, #0
 800357e:	6810      	ldr	r0, [r2, #0]
 8003580:	f10d 0102 	add.w	r1, sp, #2
 8003584:	aa01      	add	r2, sp, #4
 8003586:	f006 f825 	bl	80095d4 <xQueueGenericSendFromISR>
 800358a:	e797      	b.n	80034bc <COUNTER_ETR_DMA_CpltCallback+0x20>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 800358c:	f006 fcfe 	bl	8009f8c <xTaskGetTickCount>
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <COUNTER_ETR_DMA_CpltCallback+0x160>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1ac0      	subs	r0, r0, r3
 8003596:	2863      	cmp	r0, #99	; 0x63
 8003598:	d897      	bhi.n	80034ca <COUNTER_ETR_DMA_CpltCallback+0x2e>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800359a:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 800359c:	2300      	movs	r3, #0
 800359e:	6810      	ldr	r0, [r2, #0]
 80035a0:	f10d 0102 	add.w	r1, sp, #2
 80035a4:	aa01      	add	r2, sp, #4
 80035a6:	f006 f815 	bl	80095d4 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 80035aa:	f00a f8a1 	bl	800d6f0 <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 80035b4:	e782      	b.n	80034bc <COUNTER_ETR_DMA_CpltCallback+0x20>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 80035b6:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 80035ba:	f8d4 53a4 	ldr.w	r5, [r4, #932]	; 0x3a4
 80035be:	f7fc ff59 	bl	8000474 <__aeabi_ui2d>
 80035c2:	4606      	mov	r6, r0
 80035c4:	4628      	mov	r0, r5
 80035c6:	460f      	mov	r7, r1
 80035c8:	f7fc ff54 	bl	8000474 <__aeabi_ui2d>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f7fd f8f2 	bl	80007bc <__aeabi_ddiv>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 80035da:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80035de:	2300      	movs	r3, #0
 80035e0:	6810      	ldr	r0, [r2, #0]
 80035e2:	f10d 0102 	add.w	r1, sp, #2
 80035e6:	aa01      	add	r2, sp, #4
 80035e8:	f005 fff4 	bl	80095d4 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 80035f2:	e763      	b.n	80034bc <COUNTER_ETR_DMA_CpltCallback+0x20>
 80035f4:	20004848 	.word	0x20004848
 80035f8:	200047cc 	.word	0x200047cc
 80035fc:	20004840 	.word	0x20004840

08003600 <counterIcProcess>:
{	
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.bin != BIN0){
 8003604:	4c4f      	ldr	r4, [pc, #316]	; (8003744 <counterIcProcess+0x144>)
{	
 8003606:	b085      	sub	sp, #20
	if(counter.bin != BIN0){
 8003608:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800360c:	220e      	movs	r2, #14
 800360e:	f8ad 200a 	strh.w	r2, [sp, #10]
	if(counter.bin != BIN0){
 8003612:	b983      	cbnz	r3, 8003636 <counterIcProcess+0x36>
 8003614:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	}else if(counter.bin != BIN1){
 8003618:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 800361c:	2b01      	cmp	r3, #1
 800361e:	d007      	beq.n	8003630 <counterIcProcess+0x30>
		counter.bin = BIN1;
 8003620:	2301      	movs	r3, #1
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8003622:	4849      	ldr	r0, [pc, #292]	; (8003748 <counterIcProcess+0x148>)
		counter.bin = BIN1;
 8003624:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8003628:	f00a f8d8 	bl	800d7dc <DMA_TransferComplete>
 800362c:	2800      	cmp	r0, #0
 800362e:	d145      	bne.n	80036bc <counterIcProcess+0xbc>
}
 8003630:	b005      	add	sp, #20
 8003632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.bin = BIN0;
 8003636:	2500      	movs	r5, #0
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8003638:	4844      	ldr	r0, [pc, #272]	; (800374c <counterIcProcess+0x14c>)
		counter.bin = BIN0;
 800363a:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 800363e:	f00a f8cd 	bl	800d7dc <DMA_TransferComplete>
 8003642:	2800      	cmp	r0, #0
 8003644:	d0f4      	beq.n	8003630 <counterIcProcess+0x30>
			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 8003646:	f00a f8a1 	bl	800d78c <TIM_IC1PSC_GetPrescaler>
 800364a:	f884 0390 	strb.w	r0, [r4, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 800364e:	88e3      	ldrh	r3, [r4, #6]
 8003650:	3303      	adds	r3, #3
 8003652:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003656:	f8d4 b010 	ldr.w	fp, [r4, #16]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 800365a:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 800365e:	88a7      	ldrh	r7, [r4, #4]
 8003660:	f894 a390 	ldrb.w	sl, [r4, #912]	; 0x390
 8003664:	88e0      	ldrh	r0, [r4, #6]
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 8003666:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8003668:	3801      	subs	r0, #1
 800366a:	f7fc ff13 	bl	8000494 <__aeabi_i2d>
 800366e:	9b01      	ldr	r3, [sp, #4]
 8003670:	4680      	mov	r8, r0
 8003672:	eba3 000b 	sub.w	r0, r3, fp
 8003676:	4689      	mov	r9, r1
 8003678:	f7fc fefc 	bl	8000474 <__aeabi_ui2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4640      	mov	r0, r8
 8003682:	4649      	mov	r1, r9
 8003684:	f7fd f89a 	bl	80007bc <__aeabi_ddiv>
 8003688:	fa5f fa8a 	uxtb.w	sl, sl
 800368c:	4680      	mov	r8, r0
 800368e:	b2bf      	uxth	r7, r7
 8003690:	fb06 f00a 	mul.w	r0, r6, sl
 8003694:	fb07 0000 	mla	r0, r7, r0, r0
 8003698:	4689      	mov	r9, r1
 800369a:	f7fc feeb 	bl	8000474 <__aeabi_ui2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4640      	mov	r0, r8
 80036a4:	4649      	mov	r1, r9
 80036a6:	f7fc ff5f 	bl	8000568 <__aeabi_dmul>
 80036aa:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			DMA_Restart(&hdma_tim2_ch1);
 80036ae:	4827      	ldr	r0, [pc, #156]	; (800374c <counterIcProcess+0x14c>)
 80036b0:	f00a f89e 	bl	800d7f0 <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <counterIcProcess+0x150>)
			counter.icChannel1 = COUNTER_IRQ_IC;
 80036b6:	f884 53c6 	strb.w	r5, [r4, #966]	; 0x3c6
 80036ba:	e039      	b.n	8003730 <counterIcProcess+0x130>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 80036bc:	f00a f87a 	bl	800d7b4 <TIM_IC2PSC_GetPrescaler>
 80036c0:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 80036c4:	8923      	ldrh	r3, [r4, #8]
 80036c6:	3371      	adds	r3, #113	; 0x71
 80036c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80036cc:	f8d4 b1c8 	ldr.w	fp, [r4, #456]	; 0x1c8
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 80036d0:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 80036d4:	88a7      	ldrh	r7, [r4, #4]
 80036d6:	f894 a391 	ldrb.w	sl, [r4, #913]	; 0x391
 80036da:	8920      	ldrh	r0, [r4, #8]
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 80036dc:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 80036de:	3801      	subs	r0, #1
 80036e0:	f7fc fed8 	bl	8000494 <__aeabi_i2d>
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	4680      	mov	r8, r0
 80036e8:	eba3 000b 	sub.w	r0, r3, fp
 80036ec:	4689      	mov	r9, r1
 80036ee:	f7fc fec1 	bl	8000474 <__aeabi_ui2d>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4640      	mov	r0, r8
 80036f8:	4649      	mov	r1, r9
 80036fa:	f7fd f85f 	bl	80007bc <__aeabi_ddiv>
 80036fe:	fa5f fa8a 	uxtb.w	sl, sl
 8003702:	4680      	mov	r8, r0
 8003704:	b2bf      	uxth	r7, r7
 8003706:	fb06 f00a 	mul.w	r0, r6, sl
 800370a:	fb07 0000 	mla	r0, r7, r0, r0
 800370e:	4689      	mov	r9, r1
 8003710:	f7fc feb0 	bl	8000474 <__aeabi_ui2d>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fc ff24 	bl	8000568 <__aeabi_dmul>
 8003720:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 8003724:	4808      	ldr	r0, [pc, #32]	; (8003748 <counterIcProcess+0x148>)
 8003726:	f00a f863 	bl	800d7f0 <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <counterIcProcess+0x150>)
			counter.icChannel2 = COUNTER_IRQ_IC;
 800372c:	f884 53c7 	strb.w	r5, [r4, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003730:	462b      	mov	r3, r5
 8003732:	6810      	ldr	r0, [r2, #0]
 8003734:	f10d 010a 	add.w	r1, sp, #10
 8003738:	aa03      	add	r2, sp, #12
 800373a:	f005 ff4b 	bl	80095d4 <xQueueGenericSendFromISR>
}
 800373e:	b005      	add	sp, #20
 8003740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003744:	20004848 	.word	0x20004848
 8003748:	2000cf18 	.word	0x2000cf18
 800374c:	2000ce50 	.word	0x2000ce50
 8003750:	200047cc 	.word	0x200047cc

08003754 <counterPeriodElapsedCallback>:
{
 8003754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 8003758:	4c7b      	ldr	r4, [pc, #492]	; (8003948 <counterPeriodElapsedCallback+0x1f4>)
 800375a:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
{
 800375e:	b083      	sub	sp, #12
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 8003760:	2b00      	cmp	r3, #0
 8003762:	d142      	bne.n	80037ea <counterPeriodElapsedCallback+0x96>
 8003764:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		if(counter.state == COUNTER_IC){
 8003768:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 800376c:	2b02      	cmp	r3, #2
 800376e:	d037      	beq.n	80037e0 <counterPeriodElapsedCallback+0x8c>
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003770:	230e      	movs	r3, #14
 8003772:	f8ad 3002 	strh.w	r3, [sp, #2]
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 8003776:	f006 fc0f 	bl	8009f98 <xTaskGetTickCountFromISR>
 800377a:	4b74      	ldr	r3, [pc, #464]	; (800394c <counterPeriodElapsedCallback+0x1f8>)
 800377c:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1ac0      	subs	r0, r0, r3
 8003784:	4290      	cmp	r0, r2
 8003786:	f200 808f 	bhi.w	80038a8 <counterPeriodElapsedCallback+0x154>
		if(counter.abba == BIN0){			
 800378a:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
 800378e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003792:	2b00      	cmp	r3, #0
 8003794:	d16c      	bne.n	8003870 <counterPeriodElapsedCallback+0x11c>
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 8003796:	486e      	ldr	r0, [pc, #440]	; (8003950 <counterPeriodElapsedCallback+0x1fc>)
 8003798:	f00a f820 	bl	800d7dc <DMA_TransferComplete>
 800379c:	b310      	cbz	r0, 80037e4 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800379e:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 80037a2:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 80037a6:	f7fc fe65 	bl	8000474 <__aeabi_ui2d>
 80037aa:	4680      	mov	r8, r0
 80037ac:	4628      	mov	r0, r5
 80037ae:	4689      	mov	r9, r1
 80037b0:	f7fc fe60 	bl	8000474 <__aeabi_ui2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4640      	mov	r0, r8
 80037ba:	4649      	mov	r1, r9
 80037bc:	f7fc fffe 	bl	80007bc <__aeabi_ddiv>
 80037c0:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();		
 80037c4:	f009 fcd4 	bl	800d170 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80037c8:	4a62      	ldr	r2, [pc, #392]	; (8003954 <counterPeriodElapsedCallback+0x200>)
 80037ca:	4633      	mov	r3, r6
				counter.tiState = SEND_TI_DATA;						
 80037cc:	2502      	movs	r5, #2
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80037ce:	6810      	ldr	r0, [r2, #0]
				counter.tiState = SEND_TI_DATA;						
 80037d0:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80037d4:	aa01      	add	r2, sp, #4
 80037d6:	eb0d 0105 	add.w	r1, sp, r5
 80037da:	f005 fefb 	bl	80095d4 <xQueueGenericSendFromISR>
 80037de:	e001      	b.n	80037e4 <counterPeriodElapsedCallback+0x90>
			counterIcProcess();
 80037e0:	f7ff ff0e 	bl	8003600 <counterIcProcess>
}
 80037e4:	b003      	add	sp, #12
 80037e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 80037ea:	f894 53c8 	ldrb.w	r5, [r4, #968]	; 0x3c8
 80037ee:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80037f0:	230e      	movs	r3, #14
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 80037f2:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80037f4:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 80037f8:	d066      	beq.n	80038c8 <counterPeriodElapsedCallback+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 80037fa:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d1f0      	bne.n	80037e4 <counterPeriodElapsedCallback+0x90>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 8003802:	4853      	ldr	r0, [pc, #332]	; (8003950 <counterPeriodElapsedCallback+0x1fc>)
 8003804:	f009 ffea 	bl	800d7dc <DMA_TransferComplete>
 8003808:	2800      	cmp	r0, #0
 800380a:	d0eb      	beq.n	80037e4 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 800380c:	6920      	ldr	r0, [r4, #16]
 800380e:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
 8003812:	f7fc fe2f 	bl	8000474 <__aeabi_ui2d>
 8003816:	4606      	mov	r6, r0
 8003818:	4628      	mov	r0, r5
 800381a:	460f      	mov	r7, r1
 800381c:	f7fc fe2a 	bl	8000474 <__aeabi_ui2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4630      	mov	r0, r6
 8003826:	4639      	mov	r1, r7
 8003828:	f7fc ffc8 	bl	80007bc <__aeabi_ddiv>
 800382c:	2200      	movs	r2, #0
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <counterPeriodElapsedCallback+0x204>)
 8003830:	f7fc fe9a 	bl	8000568 <__aeabi_dmul>
 8003834:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8003838:	6920      	ldr	r0, [r4, #16]
 800383a:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 800383e:	f7fc fe19 	bl	8000474 <__aeabi_ui2d>
 8003842:	4606      	mov	r6, r0
 8003844:	4628      	mov	r0, r5
 8003846:	460f      	mov	r7, r1
 8003848:	f7fc fe14 	bl	8000474 <__aeabi_ui2d>
 800384c:	460b      	mov	r3, r1
 800384e:	4602      	mov	r2, r0
 8003850:	4639      	mov	r1, r7
 8003852:	4630      	mov	r0, r6
 8003854:	f7fc ffb2 	bl	80007bc <__aeabi_ddiv>
 8003858:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 800385c:	f009 fcb0 	bl	800d1c0 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8003860:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 8003864:	2b00      	cmp	r3, #0
 8003866:	d166      	bne.n	8003936 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 8003868:	2301      	movs	r3, #1
 800386a:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
 800386e:	e7b9      	b.n	80037e4 <counterPeriodElapsedCallback+0x90>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 8003870:	483a      	ldr	r0, [pc, #232]	; (800395c <counterPeriodElapsedCallback+0x208>)
 8003872:	f009 ffb3 	bl	800d7dc <DMA_TransferComplete>
 8003876:	2800      	cmp	r0, #0
 8003878:	d0b4      	beq.n	80037e4 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 800387a:	6920      	ldr	r0, [r4, #16]
 800387c:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 8003880:	f7fc fdf8 	bl	8000474 <__aeabi_ui2d>
 8003884:	4606      	mov	r6, r0
 8003886:	4640      	mov	r0, r8
 8003888:	460f      	mov	r7, r1
 800388a:	f7fc fdf3 	bl	8000474 <__aeabi_ui2d>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4630      	mov	r0, r6
 8003894:	4639      	mov	r1, r7
 8003896:	f7fc ff91 	bl	80007bc <__aeabi_ddiv>
 800389a:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();					
 800389e:	f009 fc67 	bl	800d170 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <counterPeriodElapsedCallback+0x200>)
 80038a4:	462b      	mov	r3, r5
 80038a6:	e791      	b.n	80037cc <counterPeriodElapsedCallback+0x78>
		TIM_TI_Stop();					
 80038a8:	f009 fc62 	bl	800d170 <TIM_TI_Stop>
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <counterPeriodElapsedCallback+0x200>)
 80038ae:	462b      	mov	r3, r5
 80038b0:	6810      	ldr	r0, [r2, #0]
		counter.tiState = TIMEOUT;	
 80038b2:	2501      	movs	r5, #1
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038b4:	aa01      	add	r2, sp, #4
 80038b6:	f10d 0102 	add.w	r1, sp, #2
		counter.tiState = TIMEOUT;	
 80038ba:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038be:	f005 fe89 	bl	80095d4 <xQueueGenericSendFromISR>
}
 80038c2:	b003      	add	sp, #12
 80038c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 80038c8:	4824      	ldr	r0, [pc, #144]	; (800395c <counterPeriodElapsedCallback+0x208>)
 80038ca:	f009 ff87 	bl	800d7dc <DMA_TransferComplete>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d088      	beq.n	80037e4 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 80038d2:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 80038d6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80038da:	f7fc fdcb 	bl	8000474 <__aeabi_ui2d>
 80038de:	4606      	mov	r6, r0
 80038e0:	4640      	mov	r0, r8
 80038e2:	460f      	mov	r7, r1
 80038e4:	f7fc fdc6 	bl	8000474 <__aeabi_ui2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4630      	mov	r0, r6
 80038ee:	4639      	mov	r1, r7
 80038f0:	f7fc ff64 	bl	80007bc <__aeabi_ddiv>
 80038f4:	2200      	movs	r2, #0
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <counterPeriodElapsedCallback+0x204>)
 80038f8:	f7fc fe36 	bl	8000568 <__aeabi_dmul>
 80038fc:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 8003900:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003904:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 8003908:	f7fc fdb4 	bl	8000474 <__aeabi_ui2d>
 800390c:	4606      	mov	r6, r0
 800390e:	4640      	mov	r0, r8
 8003910:	460f      	mov	r7, r1
 8003912:	f7fc fdaf 	bl	8000474 <__aeabi_ui2d>
 8003916:	460b      	mov	r3, r1
 8003918:	4602      	mov	r2, r0
 800391a:	4639      	mov	r1, r7
 800391c:	4630      	mov	r0, r6
 800391e:	f7fc ff4d 	bl	80007bc <__aeabi_ddiv>
 8003922:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();		
 8003926:	f009 fc4b 	bl	800d1c0 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 800392a:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 800392e:	b913      	cbnz	r3, 8003936 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 8003930:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
 8003934:	e756      	b.n	80037e4 <counterPeriodElapsedCallback+0x90>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <counterPeriodElapsedCallback+0x200>)
 8003938:	2300      	movs	r3, #0
 800393a:	6810      	ldr	r0, [r2, #0]
 800393c:	f10d 0102 	add.w	r1, sp, #2
 8003940:	aa01      	add	r2, sp, #4
 8003942:	f005 fe47 	bl	80095d4 <xQueueGenericSendFromISR>
}
 8003946:	e74d      	b.n	80037e4 <counterPeriodElapsedCallback+0x90>
 8003948:	20004848 	.word	0x20004848
 800394c:	20004840 	.word	0x20004840
 8003950:	2000cf18 	.word	0x2000cf18
 8003954:	200047cc 	.word	0x200047cc
 8003958:	40590000 	.word	0x40590000
 800395c:	2000ce50 	.word	0x2000ce50

08003960 <counterEtrRefSetDefault>:
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
	if(counter.state==COUNTER_ETR){
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <counterEtrRefSetDefault+0x54>)
 8003962:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 8003966:	2a01      	cmp	r2, #1
 8003968:	d017      	beq.n	800399a <counterEtrRefSetDefault+0x3a>
		counter.counterEtr.psc = TIM4_PSC;	
		counter.counterEtr.arr = TIM4_ARR;
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
	}else{
		counter.counterEtr.psc = 59999;	
 800396a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800396e:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8003972:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8003976:	f8b3 139a 	ldrh.w	r1, [r3, #922]	; 0x39a
 800397a:	f8b3 2398 	ldrh.w	r2, [r3, #920]	; 0x398
 800397e:	3201      	adds	r2, #1
 8003980:	fb02 2201 	mla	r2, r2, r1, r2
 8003984:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
	counter.counterEtr.buffer = 0;
 8003988:	2200      	movs	r2, #0
	counter.counterEtr.etrp = 1;
 800398a:	2101      	movs	r1, #1
 800398c:	f883 13a0 	strb.w	r1, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 8003990:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8003994:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 8003998:	4770      	bx	lr
		counter.counterEtr.psc = TIM4_PSC;	
 800399a:	f641 401f 	movw	r0, #7199	; 0x1c1f
		counter.counterEtr.arr = TIM4_ARR;
 800399e:	f240 31e7 	movw	r1, #999	; 0x3e7
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 80039a2:	2264      	movs	r2, #100	; 0x64
		counter.counterEtr.psc = TIM4_PSC;	
 80039a4:	f8a3 039a 	strh.w	r0, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 80039a8:	f8a3 1398 	strh.w	r1, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 80039ac:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 80039b0:	e7ea      	b.n	8003988 <counterEtrRefSetDefault+0x28>
 80039b2:	bf00      	nop
 80039b4:	20004848 	.word	0x20004848

080039b8 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 80039b8:	b538      	push	{r3, r4, r5, lr}
	if(counter.state == COUNTER_IC){
 80039ba:	4c15      	ldr	r4, [pc, #84]	; (8003a10 <counterIcTiSetDefault+0x58>)
 80039bc:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
		counter.counterIc.ic2BufferSize = 2;
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 80039c4:	f04f 0201 	mov.w	r2, #1
	if(counter.state == COUNTER_IC){
 80039c8:	d01b      	beq.n	8003a02 <counterIcTiSetDefault+0x4a>
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
		counter.counterIc.ic2BufferSize = 1;
		counter.counterIc.tiTimeout = 10000;
		counter.eventChan1 = EVENT_RISING;
 80039ca:	2300      	movs	r3, #0
		counter.counterIc.tiTimeout = 10000;
 80039cc:	f242 7110 	movw	r1, #10000	; 0x2710
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 80039d0:	80e2      	strh	r2, [r4, #6]
		counter.counterIc.ic2BufferSize = 1;
 80039d2:	8122      	strh	r2, [r4, #8]
		counter.counterIc.tiTimeout = 10000;
 80039d4:	f8c4 1394 	str.w	r1, [r4, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 80039d8:	f884 33cb 	strb.w	r3, [r4, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 80039dc:	f884 33cc 	strb.w	r3, [r4, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 80039e0:	2501      	movs	r5, #1
	counter.counterIc.ic2psc = 1;
	TIM_IC1_PSC_Config(1);
 80039e2:	4628      	mov	r0, r5
	counter.counterIc.ic1psc = 1;
 80039e4:	f884 5390 	strb.w	r5, [r4, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 80039e8:	f884 5391 	strb.w	r5, [r4, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 80039ec:	f009 fd9e 	bl	800d52c <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 80039f0:	4628      	mov	r0, r5
 80039f2:	f009 fdbb 	bl	800d56c <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 80039f6:	2200      	movs	r2, #0
	counter.counterIc.arr = 0xFFFFFFFF;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
	counter.counterIc.psc = 0;		
 80039fc:	80a2      	strh	r2, [r4, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 80039fe:	6023      	str	r3, [r4, #0]
}
 8003a00:	bd38      	pop	{r3, r4, r5, pc}
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8003a02:	80e3      	strh	r3, [r4, #6]
		counter.counterIc.ic2BufferSize = 2;
 8003a04:	8123      	strh	r3, [r4, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003a06:	f884 23c6 	strb.w	r2, [r4, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 8003a0a:	f884 23c7 	strb.w	r2, [r4, #967]	; 0x3c7
 8003a0e:	e7e7      	b.n	80039e0 <counterIcTiSetDefault+0x28>
 8003a10:	20004848 	.word	0x20004848

08003a14 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8003a18:	ae02      	add	r6, sp, #8
 8003a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2102      	movs	r1, #2
 8003a22:	2005      	movs	r0, #5
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
	generator.bufferMemory=generatorBuffer;
 8003a24:	4c5b      	ldr	r4, [pc, #364]	; (8003b94 <GeneratorTask+0x180>)
	uint16_t message = 0xFFFF;
 8003a26:	f826 3d02 	strh.w	r3, [r6, #-2]!
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8003a2a:	f005 fb7d 	bl	8009128 <xQueueGenericCreate>
 8003a2e:	4d5a      	ldr	r5, [pc, #360]	; (8003b98 <GeneratorTask+0x184>)
	generator.bufferMemory=generatorBuffer;
 8003a30:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <GeneratorTask+0x188>)
 8003a32:	6022      	str	r2, [r4, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
	}

	generator.numOfChannles=1;
 8003a38:	2701      	movs	r7, #1
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003a3a:	6063      	str	r3, [r4, #4]
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
	generator.pChanMem[0]=generatorBuffer;
	generator.state=GENERATOR_IDLE;
 8003a3c:	f04f 0800 	mov.w	r8, #0
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003a40:	60e3      	str	r3, [r4, #12]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003a42:	60a3      	str	r3, [r4, #8]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003a44:	6123      	str	r3, [r4, #16]
	generator.numOfChannles=1;
 8003a46:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003a4a:	63a3      	str	r3, [r4, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8003a4c:	86a3      	strh	r3, [r4, #52]	; 0x34
	generator.DAC_res=DAC_DATA_DEPTH;
 8003a4e:	230c      	movs	r3, #12
	generator.pChanMem[0]=generatorBuffer;
 8003a50:	62e2      	str	r2, [r4, #44]	; 0x2c
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8003a52:	6028      	str	r0, [r5, #0]
	generator.state=GENERATOR_IDLE;
 8003a54:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8003a58:	87a3      	strh	r3, [r4, #60]	; 0x3c
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	4631      	mov	r1, r6
 8003a62:	f005 fe4d 	bl	8009700 <xQueueGenericReceive>
		switch(message){
 8003a66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003a6a:	3b21      	subs	r3, #33	; 0x21
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d80d      	bhi.n	8003a8c <GeneratorTask+0x78>
 8003a70:	e8df f003 	tbb	[pc, r3]
 8003a74:	0c0c3f3a 	.word	0x0c0c3f3a
 8003a78:	0c0e1928 	.word	0x0c0e1928
 8003a7c:	0c0c0c0c 	.word	0x0c0c0c0c
 8003a80:	0c0c0c0c 	.word	0x0c0c0c0c
 8003a84:	0c0c      	.short	0x0c0c
 8003a86:	0a          	.byte	0x0a
 8003a87:	00          	.byte	0x00
			if(generator.state==GENERATOR_IDLE){}
 8003a88:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003a8c:	6828      	ldr	r0, [r5, #0]
 8003a8e:	e7e4      	b.n	8003a5a <GeneratorTask+0x46>
			if(generator.modeState==GENERATOR_DAC){				
 8003a90:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d058      	beq.n	8003b4a <GeneratorTask+0x136>
			}else if(generator.modeState==GENERATOR_PWM){
 8003a98:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f5      	bne.n	8003a8c <GeneratorTask+0x78>
				TIMGenPwmDeinit();
 8003aa0:	f00a fa28 	bl	800def4 <TIMGenPwmDeinit>
 8003aa4:	e7f2      	b.n	8003a8c <GeneratorTask+0x78>
			if(generator.state==GENERATOR_RUN){
 8003aa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d1ee      	bne.n	8003a8c <GeneratorTask+0x78>
				if(generator.modeState==GENERATOR_DAC){
 8003aae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d063      	beq.n	8003b7e <GeneratorTask+0x16a>
				}else if(generator.modeState==GENERATOR_PWM){
 8003ab6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d05c      	beq.n	8003b78 <GeneratorTask+0x164>
				generator.state=GENERATOR_IDLE;
 8003abe:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
 8003ac2:	e7e3      	b.n	8003a8c <GeneratorTask+0x78>
			if(generator.state==GENERATOR_IDLE){
 8003ac4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003ac8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1dd      	bne.n	8003a8c <GeneratorTask+0x78>
				if(generator.modeState==GENERATOR_DAC){
 8003ad0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d013      	beq.n	8003b00 <GeneratorTask+0xec>
				}else if(generator.modeState==GENERATOR_PWM){
 8003ad8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003adc:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8003ae0:	b3b3      	cbz	r3, 8003b50 <GeneratorTask+0x13c>
				generator.state=GENERATOR_RUN;
 8003ae2:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 8003ae6:	e7d1      	b.n	8003a8c <GeneratorTask+0x78>
	generator.modeState = GENERATOR_DAC;
 8003ae8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
			TIMGenInit();
 8003aec:	f00a f85c 	bl	800dba8 <TIMGenInit>
			break;
 8003af0:	e7cc      	b.n	8003a8c <GeneratorTask+0x78>
	generator.modeState = GENERATOR_PWM;
 8003af2:	f884 8029 	strb.w	r8, [r4, #41]	; 0x29
			TIMGenPwmInit();
 8003af6:	f00a f943 	bl	800dd80 <TIMGenPwmInit>
			break;
 8003afa:	e7c7      	b.n	8003a8c <GeneratorTask+0x78>
 * @param  None
 * @retval None
 */
void genInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003afc:	f04f 0901 	mov.w	r9, #1
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003b00:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8003b04:	fa5f fa89 	uxtb.w	sl, r9
 8003b08:	6858      	ldr	r0, [r3, #4]
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f009 ffd1 	bl	800dab4 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003b12:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003b16:	f109 020a 	add.w	r2, r9, #10
 8003b1a:	f109 0318 	add.w	r3, r9, #24
 8003b1e:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8003b22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if(generator.numOfChannles>i){
 8003b26:	458a      	cmp	sl, r1
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4611      	mov	r1, r2
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003b2e:	4650      	mov	r0, sl
 8003b30:	bf3a      	itte	cc
 8003b32:	f8dc 1004 	ldrcc.w	r1, [ip, #4]
 8003b36:	889a      	ldrhcc	r2, [r3, #4]
			DAC_DMA_Reconfig(i,NULL,0);
 8003b38:	4650      	movcs	r0, sl
 8003b3a:	f008 f83f 	bl	800bbbc <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003b3e:	f1b9 0f00 	cmp.w	r9, #0
 8003b42:	d0db      	beq.n	8003afc <GeneratorTask+0xe8>
					GeneratingEnable();
 8003b44:	f008 f85e 	bl	800bc04 <GeneratingEnable>
 8003b48:	e7cb      	b.n	8003ae2 <GeneratorTask+0xce>
				TIMGenDacDeinit();
 8003b4a:	f00a f863 	bl	800dc14 <TIMGenDacDeinit>
 8003b4e:	e79d      	b.n	8003a8c <GeneratorTask+0x78>
 * @retval None
 */
void genPwmInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003b50:	6860      	ldr	r0, [r4, #4]
 8003b52:	464a      	mov	r2, r9
 8003b54:	4649      	mov	r1, r9
 8003b56:	f009 ffad 	bl	800dab4 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003b5a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003b5e:	b9ab      	cbnz	r3, 8003b8c <GeneratorTask+0x178>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003b60:	68a0      	ldr	r0, [r4, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2101      	movs	r1, #1
 8003b66:	f009 ffa5 	bl	800dab4 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003b6a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d808      	bhi.n	8003b84 <GeneratorTask+0x170>
					PWMGeneratingEnable();
 8003b72:	f00a f897 	bl	800dca4 <PWMGeneratingEnable>
 8003b76:	e7b4      	b.n	8003ae2 <GeneratorTask+0xce>
					PWMGeneratingDisable();
 8003b78:	f00a f8d4 	bl	800dd24 <PWMGeneratingDisable>
 8003b7c:	e79f      	b.n	8003abe <GeneratorTask+0xaa>
					GeneratingDisable();
 8003b7e:	f008 f86f 	bl	800bc60 <GeneratingDisable>
 8003b82:	e79c      	b.n	8003abe <GeneratorTask+0xaa>
			TIM_DMA_Reconfig(i);			
 8003b84:	2001      	movs	r0, #1
 8003b86:	f00a f861 	bl	800dc4c <TIM_DMA_Reconfig>
 8003b8a:	e7f2      	b.n	8003b72 <GeneratorTask+0x15e>
 8003b8c:	4648      	mov	r0, r9
 8003b8e:	f00a f85d 	bl	800dc4c <TIM_DMA_Reconfig>
 8003b92:	e7e5      	b.n	8003b60 <GeneratorTask+0x14c>
 8003b94:	20004c20 	.word	0x20004c20
 8003b98:	20004c60 	.word	0x20004c60
 8003b9c:	20004c64 	.word	0x20004c64

08003ba0 <genSetMode>:
{
 8003ba0:	b500      	push	{lr}
 8003ba2:	b083      	sub	sp, #12
	switch(mode){
 8003ba4:	b178      	cbz	r0, 8003bc6 <genSetMode+0x26>
 8003ba6:	2801      	cmp	r0, #1
 8003ba8:	d10a      	bne.n	8003bc0 <genSetMode+0x20>
		passMsg = MSG_GEN_DAC_MODE;
 8003baa:	a902      	add	r1, sp, #8
 8003bac:	2321      	movs	r3, #33	; 0x21
 8003bae:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <genSetMode+0x44>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f005 faf8 	bl	80091b0 <xQueueGenericSend>
}
 8003bc0:	b003      	add	sp, #12
 8003bc2:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_GEN_PWM_MODE;
 8003bc6:	a902      	add	r1, sp, #8
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <genSetMode+0x44>)
		passMsg = MSG_GEN_PWM_MODE;
 8003bca:	2322      	movs	r3, #34	; 0x22
 8003bcc:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	6810      	ldr	r0, [r2, #0]
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	f005 faea 	bl	80091b0 <xQueueGenericSend>
}
 8003bdc:	b003      	add	sp, #12
 8003bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be2:	bf00      	nop
 8003be4:	20004c60 	.word	0x20004c60

08003be8 <generator_deinit>:
	switch(generator.modeState){
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <generator_deinit+0x1c>)
 8003bea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bf2:	b123      	cbz	r3, 8003bfe <generator_deinit+0x16>
 8003bf4:	2a01      	cmp	r2, #1
 8003bf6:	d101      	bne.n	8003bfc <generator_deinit+0x14>
		TIMGenDacDeinit();
 8003bf8:	f00a b80c 	b.w	800dc14 <TIMGenDacDeinit>
 8003bfc:	4770      	bx	lr
		TIMGenPwmDeinit();
 8003bfe:	f00a b979 	b.w	800def4 <TIMGenPwmDeinit>
 8003c02:	bf00      	nop
 8003c04:	20004c20 	.word	0x20004c20

08003c08 <genPwmSetFrequency>:
		}
	}
}

void genPwmSetFrequency(double freq, uint8_t channel){
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	b082      	sub	sp, #8
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8003c0e:	f009 ff77 	bl	800db00 <TIM_Reconfig_GenPwm>

	uint16_t passMsg;
	if(channel == 0){
 8003c12:	b19c      	cbz	r4, 8003c3c <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
		generator.realPwmFreqCh1 = realPwmFrq;
	}else if(channel == 1){
 8003c14:	2c01      	cmp	r4, #1
 8003c16:	d00a      	beq.n	8003c2e <genPwmSetFrequency+0x26>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
		generator.realPwmFreqCh2 = realPwmFrq;
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <genPwmSetFrequency+0x44>)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6810      	ldr	r0, [r2, #0]
 8003c1e:	f10d 0106 	add.w	r1, sp, #6
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	f005 fac3 	bl	80091b0 <xQueueGenericSend>
}
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd10      	pop	{r4, pc}
		generator.realPwmFreqCh2 = realPwmFrq;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <genPwmSetFrequency+0x48>)
 8003c30:	ed83 0b08 	vstr	d0, [r3, #32]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8003c34:	2324      	movs	r3, #36	; 0x24
 8003c36:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003c3a:	e7ed      	b.n	8003c18 <genPwmSetFrequency+0x10>
		generator.realPwmFreqCh1 = realPwmFrq;
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <genPwmSetFrequency+0x48>)
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003c3e:	2323      	movs	r3, #35	; 0x23
		generator.realPwmFreqCh1 = realPwmFrq;
 8003c40:	ed82 0b06 	vstr	d0, [r2, #24]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003c44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003c48:	e7e6      	b.n	8003c18 <genPwmSetFrequency+0x10>
 8003c4a:	bf00      	nop
 8003c4c:	200047cc 	.word	0x200047cc
 8003c50:	20004c20 	.word	0x20004c20

08003c54 <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003c54:	b530      	push	{r4, r5, lr}
	uint8_t result = GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE ){
 8003c56:	4c21      	ldr	r4, [pc, #132]	; (8003cdc <genSetData+0x88>)
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003c58:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE ){
 8003c5a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
	uint8_t result = GEN_INVALID_STATE;
 8003c5e:	2365      	movs	r3, #101	; 0x65
 8003c60:	f88d 3005 	strb.w	r3, [sp, #5]
	if(generator.state==GENERATOR_IDLE ){
 8003c64:	b9e5      	cbnz	r5, 8003ca0 <genSetData+0x4c>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003c66:	f102 0317 	add.w	r3, r2, #23
 8003c6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003c6e:	0040      	lsls	r0, r0, #1
 8003c70:	889b      	ldrh	r3, [r3, #4]
 8003c72:	180d      	adds	r5, r1, r0
 8003c74:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
 8003c78:	da02      	bge.n	8003c80 <genSetData+0x2c>
 8003c7a:	2066      	movs	r0, #102	; 0x66
		}else{
			result = GEN_OUT_OF_MEMORY;
		}
	}
	return result;
}
 8003c7c:	b003      	add	sp, #12
 8003c7e:	bd30      	pop	{r4, r5, pc}
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003c80:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d3f8      	bcc.n	8003c7a <genSetData+0x26>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003c88:	3209      	adds	r2, #9
 8003c8a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003c8e:	460d      	mov	r5, r1
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	4418      	add	r0, r3
 8003c94:	f7fe fb3c 	bl	8002310 <commBufferReadNBytes>
 8003c98:	42a8      	cmp	r0, r5
 8003c9a:	d004      	beq.n	8003ca6 <genSetData+0x52>
 8003c9c:	206d      	movs	r0, #109	; 0x6d
 8003c9e:	e7ed      	b.n	8003c7c <genSetData+0x28>
 8003ca0:	4618      	mov	r0, r3
}
 8003ca2:	b003      	add	sp, #12
 8003ca4:	bd30      	pop	{r4, r5, pc}
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003ca6:	f10d 0005 	add.w	r0, sp, #5
 8003caa:	f7fe fb0f 	bl	80022cc <commBufferReadByte>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d1f4      	bne.n	8003c9c <genSetData+0x48>
 8003cb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003cb6:	2b3b      	cmp	r3, #59	; 0x3b
 8003cb8:	d1f0      	bne.n	8003c9c <genSetData+0x48>
				uint16_t passMsg = MSG_INVALIDATE;
 8003cba:	a902      	add	r1, sp, #8
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003cbc:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <genSetData+0x8c>)
				result = 0;
 8003cbe:	f88d 0005 	strb.w	r0, [sp, #5]
				uint16_t passMsg = MSG_INVALIDATE;
 8003cc2:	2333      	movs	r3, #51	; 0x33
 8003cc4:	f821 3d02 	strh.w	r3, [r1, #-2]!
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003cc8:	4603      	mov	r3, r0
 8003cca:	6810      	ldr	r0, [r2, #0]
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	f005 fa6e 	bl	80091b0 <xQueueGenericSend>
 8003cd4:	f89d 0005 	ldrb.w	r0, [sp, #5]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003cd8:	e7d0      	b.n	8003c7c <genSetData+0x28>
 8003cda:	bf00      	nop
 8003cdc:	20004c20 	.word	0x20004c20
 8003ce0:	20004c60 	.word	0x20004c60

08003ce4 <genSetFrequency>:
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
	uint8_t result = GEN_TO_HIGH_FREQ;
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <genSetFrequency+0x34>)
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	d813      	bhi.n	8003d12 <genSetFrequency+0x2e>
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003cea:	b530      	push	{r4, r5, lr}
		generator.generatingFrequency[chan-1] = freq;
 8003cec:	4d0b      	ldr	r5, [pc, #44]	; (8003d1c <genSetFrequency+0x38>)
 8003cee:	460c      	mov	r4, r1
 8003cf0:	3901      	subs	r1, #1
 8003cf2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003cf6:	b083      	sub	sp, #12
		generator.generatingFrequency[chan-1] = freq;
 8003cf8:	6058      	str	r0, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003cfa:	b2c9      	uxtb	r1, r1
 8003cfc:	6858      	ldr	r0, [r3, #4]
 8003cfe:	aa01      	add	r2, sp, #4
 8003d00:	f009 fed8 	bl	800dab4 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003d04:	3401      	adds	r4, #1
 8003d06:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	6063      	str	r3, [r4, #4]
	}
	return result;
}
 8003d0e:	b003      	add	sp, #12
 8003d10:	bd30      	pop	{r4, r5, pc}
	uint8_t result = GEN_TO_HIGH_FREQ;
 8003d12:	2069      	movs	r0, #105	; 0x69
}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	001e8480 	.word	0x001e8480
 8003d1c:	20004c20 	.word	0x20004c20

08003d20 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8003d20:	b500      	push	{lr}
 8003d22:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_SEND_FREQ;
 8003d24:	a902      	add	r1, sp, #8
 8003d26:	2328      	movs	r3, #40	; 0x28
 8003d28:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <genSendRealSamplingFreq+0x20>)
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	f005 fa3b 	bl	80091b0 <xQueueGenericSend>
}
 8003d3a:	b003      	add	sp, #12
 8003d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d40:	200047cc 	.word	0x200047cc

08003d44 <genDataOKSendNext>:

void genDataOKSendNext(void){
 8003d44:	b500      	push	{lr}
 8003d46:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_NEXT;
 8003d48:	a902      	add	r1, sp, #8
 8003d4a:	2329      	movs	r3, #41	; 0x29
 8003d4c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <genDataOKSendNext+0x20>)
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f005 fa29 	bl	80091b0 <xQueueGenericSend>
}
 8003d5e:	b003      	add	sp, #12
 8003d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d64:	200047cc 	.word	0x200047cc

08003d68 <genStatusOK>:

void genStatusOK(void){
 8003d68:	b500      	push	{lr}
 8003d6a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_OK;
 8003d6c:	a902      	add	r1, sp, #8
 8003d6e:	232a      	movs	r3, #42	; 0x2a
 8003d70:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <genStatusOK+0x20>)
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f005 fa17 	bl	80091b0 <xQueueGenericSend>
}
 8003d82:	b003      	add	sp, #12
 8003d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d88:	200047cc 	.word	0x200047cc

08003d8c <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
	return generator.realGenFrequency[chan-1];
 8003d8c:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <genGetRealSmplFreq+0xc>)
 8003d8e:	3001      	adds	r0, #1
 8003d90:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003d94:	6858      	ldr	r0, [r3, #4]
}
 8003d96:	4770      	bx	lr
 8003d98:	20004c20 	.word	0x20004c20

08003d9c <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003d9c:	b530      	push	{r4, r5, lr}
	uint8_t result=GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE){
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <genSetLength+0x5c>)
 8003da0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003da4:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE){
 8003da6:	bb12      	cbnz	r2, 8003dee <genSetLength+0x52>
 8003da8:	f002 05ff 	and.w	r5, r2, #255	; 0xff
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8003dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db0:	4290      	cmp	r0, r2
 8003db2:	d90e      	bls.n	8003dd2 <genSetLength+0x36>
			generator.oneChanSamples[chan-1]=length;
			clearGenBuffer();
			result=0;
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8003db4:	2467      	movs	r4, #103	; 0x67
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8003db6:	a902      	add	r1, sp, #8
 8003db8:	2333      	movs	r3, #51	; 0x33
 8003dba:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <genSetLength+0x60>)
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f005 f9f2 	bl	80091b0 <xQueueGenericSend>
	}
	return result;
}
 8003dcc:	4620      	mov	r0, r4
 8003dce:	b003      	add	sp, #12
 8003dd0:	bd30      	pop	{r4, r5, pc}
			generator.oneChanSamples[chan-1]=length;
 8003dd2:	f101 0217 	add.w	r2, r1, #23
 8003dd6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003dda:	b284      	uxth	r4, r0
 8003ddc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003de0:	4629      	mov	r1, r5
 8003de2:	4807      	ldr	r0, [pc, #28]	; (8003e00 <genSetLength+0x64>)
 8003de4:	809c      	strh	r4, [r3, #4]
			result=0;
 8003de6:	462c      	mov	r4, r5
 8003de8:	f00a ff07 	bl	800ebfa <memset>
 8003dec:	e7e3      	b.n	8003db6 <genSetLength+0x1a>
	uint8_t result=GEN_INVALID_STATE;
 8003dee:	2465      	movs	r4, #101	; 0x65
}
 8003df0:	4620      	mov	r0, r4
 8003df2:	b003      	add	sp, #12
 8003df4:	bd30      	pop	{r4, r5, pc}
 8003df6:	bf00      	nop
 8003df8:	20004c20 	.word	0x20004c20
 8003dfc:	20004c60 	.word	0x20004c60
 8003e00:	20004c64 	.word	0x20004c64

08003e04 <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
	uint8_t result=GEN_INVALID_STATE;
	uint8_t chanTmp=generator.numOfChannles;
 8003e04:	491e      	ldr	r1, [pc, #120]	; (8003e80 <genSetNumOfChannels+0x7c>)
 8003e06:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8003e0a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8003e0e:	b9ca      	cbnz	r2, 8003e44 <genSetNumOfChannels+0x40>
		if(chan<=MAX_DAC_CHANNELS){
 8003e10:	2802      	cmp	r0, #2
 8003e12:	d817      	bhi.n	8003e44 <genSetNumOfChannels+0x40>
uint8_t genSetNumOfChannels(uint8_t chan){
 8003e14:	b510      	push	{r4, lr}
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	fb94 f4f0 	sdiv	r4, r4, r0
			while(chanTmp>0){
 8003e22:	b18b      	cbz	r3, 8003e48 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e002      	b.n	8003e30 <genSetNumOfChannels+0x2c>
 8003e2a:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 8003e2c:	b163      	cbz	r3, 8003e48 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003e2e:	b2d3      	uxtb	r3, r2
 8003e30:	f103 0218 	add.w	r2, r3, #24
 8003e34:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003e38:	8892      	ldrh	r2, [r2, #4]
 8003e3a:	4294      	cmp	r4, r2
 8003e3c:	daf5      	bge.n	8003e2a <genSetNumOfChannels+0x26>
					return GEN_BUFFER_SIZE_ERR;
 8003e3e:	2067      	movs	r0, #103	; 0x67
			uint16_t passMsg = MSG_INVALIDATE;
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		}
	}
	return result;
}
 8003e40:	b002      	add	sp, #8
 8003e42:	bd10      	pop	{r4, pc}
	uint8_t result=GEN_INVALID_STATE;
 8003e44:	2065      	movs	r0, #101	; 0x65
}
 8003e46:	4770      	bx	lr
			generator.numOfChannles=chan;
 8003e48:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003e4c:	638c      	str	r4, [r1, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8003e4e:	b140      	cbz	r0, 8003e62 <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <genSetNumOfChannels+0x80>)
 8003e52:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8003e54:	62cb      	str	r3, [r1, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8003e56:	2802      	cmp	r0, #2
 8003e58:	d103      	bne.n	8003e62 <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003e5a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8003e5c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003e60:	630b      	str	r3, [r1, #48]	; 0x30
			uint16_t passMsg = MSG_INVALIDATE;
 8003e62:	a902      	add	r1, sp, #8
 8003e64:	2333      	movs	r3, #51	; 0x33
 8003e66:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <genSetNumOfChannels+0x84>)
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	2300      	movs	r3, #0
 8003e74:	f005 f99c 	bl	80091b0 <xQueueGenericSend>
 8003e78:	2000      	movs	r0, #0
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	bf00      	nop
 8003e80:	20004c20 	.word	0x20004c20
 8003e84:	20004c64 	.word	0x20004c64
 8003e88:	20004c60 	.word	0x20004c60

08003e8c <genSetOutputBuffer>:
		generatorBuffer[i]=0;
	}
}

void genSetOutputBuffer(void){
	DACSetOutputBuffer();
 8003e8c:	f007 beae 	b.w	800bbec <DACSetOutputBuffer>

08003e90 <genUnsetOutputBuffer>:
}

void genUnsetOutputBuffer(void){
	DACUnsetOutputBuffer();
 8003e90:	f007 beb2 	b.w	800bbf8 <DACUnsetOutputBuffer>

08003e94 <genSetDAC>:
}

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t result=0;
	if(generator.state==GENERATOR_IDLE){
 8003e98:	4c5f      	ldr	r4, [pc, #380]	; (8004018 <genSetDAC+0x184>)
 8003e9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	4681      	mov	r9, r0
 8003ea2:	4688      	mov	r8, r1
	if(generator.state==GENERATOR_IDLE){
 8003ea4:	bb5b      	cbnz	r3, 8003efe <genSetDAC+0x6a>
	if(generator.state==GENERATOR_IDLE){
 8003ea6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003eaa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d055      	beq.n	8003f5e <genSetDAC+0xca>
 8003eb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003eb6:	4f59      	ldr	r7, [pc, #356]	; (800401c <genSetDAC+0x188>)
 8003eb8:	2565      	movs	r5, #101	; 0x65
 8003eba:	ae01      	add	r6, sp, #4
 8003ebc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d063      	beq.n	8003f8c <genSetDAC+0xf8>
	uint8_t chanTmp=generator.numOfChannles;
 8003ec4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8003ec8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003ecc:	3565      	adds	r5, #101	; 0x65
 8003ece:	b2ed      	uxtb	r5, r5
	uint8_t chanTmp=generator.numOfChannles;
 8003ed0:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	d177      	bne.n	8003fc6 <genSetDAC+0x132>
			while(chanTmp>0){
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d078      	beq.n	8003fcc <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e003      	b.n	8003ee8 <genSetDAC+0x54>
 8003ee0:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d072      	beq.n	8003fcc <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003ee6:	b2d3      	uxtb	r3, r2
 8003ee8:	f103 0218 	add.w	r2, r3, #24
 8003eec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003ef0:	8892      	ldrh	r2, [r2, #4]
 8003ef2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8003ef6:	d9f3      	bls.n	8003ee0 <genSetDAC+0x4c>
 8003ef8:	3567      	adds	r5, #103	; 0x67
 8003efa:	b2ed      	uxtb	r5, r5
 8003efc:	e002      	b.n	8003f04 <genSetDAC+0x70>
 8003efe:	4f47      	ldr	r7, [pc, #284]	; (800401c <genSetDAC+0x188>)
	uint8_t result=0;
 8003f00:	2500      	movs	r5, #0
 8003f02:	ae01      	add	r6, sp, #4
			result+=genSetLength(1,i+1);
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 8003f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		generator.generatingFrequency[chan-1] = freq;
 8003f06:	f04f 0a64 	mov.w	sl, #100	; 0x64
		*generator.pChanMem[0]=chann1;
 8003f0a:	f8a3 9000 	strh.w	r9, [r3]
		generator.generatingFrequency[chan-1] = freq;
 8003f0e:	f8c4 a004 	str.w	sl, [r4, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003f12:	4632      	mov	r2, r6
 8003f14:	6860      	ldr	r0, [r4, #4]
 8003f16:	2100      	movs	r1, #0
 8003f18:	f009 fdcc 	bl	800dab4 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003f1c:	9b01      	ldr	r3, [sp, #4]
 8003f1e:	60e3      	str	r3, [r4, #12]
		result+=genSetFrequency(100,1);
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 8003f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f22:	f8a3 8000 	strh.w	r8, [r3]
		generator.generatingFrequency[chan-1] = freq;
 8003f26:	f8c4 a008 	str.w	sl, [r4, #8]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003f2a:	68a3      	ldr	r3, [r4, #8]
 8003f2c:	4632      	mov	r2, r6
		result+=genSetFrequency(100,1);
 8003f2e:	4405      	add	r5, r0
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f009 fdbe 	bl	800dab4 <TIM_Reconfig_gen>
		result+=genSetFrequency(100,1);
 8003f38:	b2ed      	uxtb	r5, r5
		generator.realGenFrequency[chan-1] = realFreq;
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	6123      	str	r3, [r4, #16]
		result+=genSetFrequency(100,2);
 8003f3e:	4405      	add	r5, r0
 * @param  None
 * @retval None
 */
void genStart(void){
	uint16_t passMsg = MSG_GEN_START;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f40:	4631      	mov	r1, r6
 8003f42:	6838      	ldr	r0, [r7, #0]
	uint16_t passMsg = MSG_GEN_START;
 8003f44:	2425      	movs	r4, #37	; 0x25
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f46:	2300      	movs	r3, #0
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
	uint16_t passMsg = MSG_GEN_START;
 8003f4c:	f8ad 4004 	strh.w	r4, [sp, #4]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f50:	f005 f92e 	bl	80091b0 <xQueueGenericSend>
		result+=genSetFrequency(100,2);
 8003f54:	b2ed      	uxtb	r5, r5
}
 8003f56:	4628      	mov	r0, r5
 8003f58:	b002      	add	sp, #8
 8003f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8003f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d14b      	bne.n	8003ffe <genSetDAC+0x16a>
 8003f66:	2567      	movs	r5, #103	; 0x67
		uint16_t passMsg = MSG_INVALIDATE;
 8003f68:	ae02      	add	r6, sp, #8
 8003f6a:	2333      	movs	r3, #51	; 0x33
 8003f6c:	f826 3d04 	strh.w	r3, [r6, #-4]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f70:	4f2a      	ldr	r7, [pc, #168]	; (800401c <genSetDAC+0x188>)
 8003f72:	4631      	mov	r1, r6
 8003f74:	2300      	movs	r3, #0
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	f005 f918 	bl	80091b0 <xQueueGenericSend>
	if(generator.state==GENERATOR_IDLE){
 8003f80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003f84:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d19b      	bne.n	8003ec4 <genSetDAC+0x30>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8003f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d03d      	beq.n	8004010 <genSetDAC+0x17c>
			generator.oneChanSamples[chan-1]=length;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f9a:	4821      	ldr	r0, [pc, #132]	; (8004020 <genSetDAC+0x18c>)
 8003f9c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003f9e:	f00a fe2c 	bl	800ebfa <memset>
		uint16_t passMsg = MSG_INVALIDATE;
 8003fa2:	f04f 0c33 	mov.w	ip, #51	; 0x33
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	4631      	mov	r1, r6
 8003fae:	6838      	ldr	r0, [r7, #0]
		uint16_t passMsg = MSG_INVALIDATE;
 8003fb0:	f8ad c004 	strh.w	ip, [sp, #4]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003fb4:	f005 f8fc 	bl	80091b0 <xQueueGenericSend>
	uint8_t chanTmp=generator.numOfChannles;
 8003fb8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8003fbc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	uint8_t chanTmp=generator.numOfChannles;
 8003fc0:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d087      	beq.n	8003ed6 <genSetDAC+0x42>
 8003fc6:	3565      	adds	r5, #101	; 0x65
 8003fc8:	b2ed      	uxtb	r5, r5
 8003fca:	e79b      	b.n	8003f04 <genSetDAC+0x70>
			generator.numOfChannles=chan;
 8003fcc:	2302      	movs	r3, #2
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003fce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
			generator.numOfChannles=chan;
 8003fd2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003fd6:	63a2      	str	r2, [r4, #56]	; 0x38
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <genSetDAC+0x18c>)
 8003fda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003fe0:	6838      	ldr	r0, [r7, #0]
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003fe2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
			uint16_t passMsg = MSG_INVALIDATE;
 8003fe6:	f04f 0c33 	mov.w	ip, #51	; 0x33
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003fea:	6321      	str	r1, [r4, #48]	; 0x30
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003fec:	2300      	movs	r3, #0
 8003fee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff2:	4631      	mov	r1, r6
			uint16_t passMsg = MSG_INVALIDATE;
 8003ff4:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003ff8:	f005 f8da 	bl	80091b0 <xQueueGenericSend>
 8003ffc:	e782      	b.n	8003f04 <genSetDAC+0x70>
			generator.oneChanSamples[chan-1]=length;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004004:	4806      	ldr	r0, [pc, #24]	; (8004020 <genSetDAC+0x18c>)
 8004006:	86a3      	strh	r3, [r4, #52]	; 0x34
	uint8_t result=0;
 8004008:	460d      	mov	r5, r1
 800400a:	f00a fdf6 	bl	800ebfa <memset>
 800400e:	e7ab      	b.n	8003f68 <genSetDAC+0xd4>
 8004010:	3567      	adds	r5, #103	; 0x67
 8004012:	b2ed      	uxtb	r5, r5
 8004014:	e7c5      	b.n	8003fa2 <genSetDAC+0x10e>
 8004016:	bf00      	nop
 8004018:	20004c20 	.word	0x20004c20
 800401c:	20004c60 	.word	0x20004c60
 8004020:	20004c64 	.word	0x20004c64

08004024 <genStart>:
void genStart(void){
 8004024:	b500      	push	{lr}
 8004026:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_START;
 8004028:	a902      	add	r1, sp, #8
 800402a:	2325      	movs	r3, #37	; 0x25
 800402c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <genStart+0x20>)
 8004032:	f04f 32ff 	mov.w	r2, #4294967295
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	2300      	movs	r3, #0
 800403a:	f005 f8b9 	bl	80091b0 <xQueueGenericSend>
}
 800403e:	b003      	add	sp, #12
 8004040:	f85d fb04 	ldr.w	pc, [sp], #4
 8004044:	20004c60 	.word	0x20004c60

08004048 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8004048:	b500      	push	{lr}
 800404a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_STOP;
 800404c:	a902      	add	r1, sp, #8
 800404e:	2326      	movs	r3, #38	; 0x26
 8004050:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <genStop+0x20>)
 8004056:	f04f 32ff 	mov.w	r2, #4294967295
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	f005 f8a7 	bl	80091b0 <xQueueGenericSend>
}
 8004062:	b003      	add	sp, #12
 8004064:	f85d fb04 	ldr.w	pc, [sp], #4
 8004068:	20004c60 	.word	0x20004c60

0800406c <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 800406c:	b500      	push	{lr}
 800406e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_DEINIT;
 8004070:	a902      	add	r1, sp, #8
 8004072:	2327      	movs	r3, #39	; 0x27
 8004074:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <genReset+0x20>)
 800407a:	f04f 32ff 	mov.w	r2, #4294967295
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	f005 f895 	bl	80091b0 <xQueueGenericSend>
}
 8004086:	b003      	add	sp, #12
 8004088:	f85d fb04 	ldr.w	pc, [sp], #4
 800408c:	20004c60 	.word	0x20004c60

08004090 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8004094:	ae02      	add	r6, sp, #8
 8004096:	f64f 73ff 	movw	r3, #65535	; 0xffff
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 800409a:	2200      	movs	r2, #0
 800409c:	2104      	movs	r1, #4
 800409e:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 80040a0:	f826 3d04 	strh.w	r3, [r6, #-4]!
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 80040a4:	f005 f840 	bl	8009128 <xQueueGenericCreate>
 80040a8:	4f33      	ldr	r7, [pc, #204]	; (8004178 <LogAnlysTask+0xe8>)
 */
void logAnlysSetDefault(void){
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 80040aa:	4d34      	ldr	r5, [pc, #208]	; (800417c <LogAnlysTask+0xec>)
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 80040ac:	6038      	str	r0, [r7, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 80040ae:	2004      	movs	r0, #4
 80040b0:	f005 fa3c 	bl	800952c <xQueueCreateMutex>
 80040b4:	4c32      	ldr	r4, [pc, #200]	; (8004180 <LogAnlysTask+0xf0>)
	logAnlys.samplesNumber = 1000;
	logAnlys.trigConfig = TRIG_CHAN1;
	logAnlys.trigEdge = TRIG_EDGE_RISING;
	logAnlys.triggerMode = LOGA_MODE_AUTO;
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <LogAnlysTask+0xf4>)
 80040b8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004188 <LogAnlysTask+0xf8>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 80040bc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800418c <LogAnlysTask+0xfc>
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 80040c0:	6020      	str	r0, [r4, #0]
	logAnlys.samplesNumber = 1000;
 80040c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	logAnlys.preTriggerTime = 50;
 80040c6:	2132      	movs	r1, #50	; 0x32
 80040c8:	8129      	strh	r1, [r5, #8]
	logAnlys.trigConfig = TRIG_CHAN1;
 80040ca:	f04f 0800 	mov.w	r8, #0
	logAnlys.samplesNumber = 1000;
 80040ce:	822a      	strh	r2, [r5, #16]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80040d0:	2201      	movs	r2, #1
	logAnlys.trigConfig = TRIG_CHAN1;
 80040d2:	f885 8015 	strb.w	r8, [r5, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80040d6:	f885 8016 	strb.w	r8, [r5, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 80040da:	f885 8014 	strb.w	r8, [r5, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80040de:	75ea      	strb	r2, [r5, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 80040e0:	60eb      	str	r3, [r5, #12]
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 80040e2:	2300      	movs	r3, #0
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	4631      	mov	r1, r6
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f005 fb08 	bl	8009700 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80040f0:	f04f 31ff 	mov.w	r1, #4294967295
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	f005 fc8b 	bl	8009a10 <xQueueTakeMutexRecursive>
		switch(message){
 80040fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80040fe:	3b19      	subs	r3, #25
 8004100:	2b04      	cmp	r3, #4
 8004102:	d811      	bhi.n	8004128 <LogAnlysTask+0x98>
 8004104:	e8df f003 	tbb	[pc, r3]
 8004108:	1419322d 	.word	0x1419322d
 800410c:	03          	.byte	0x03
 800410d:	00          	.byte	0x00
			passMsg = MSG_LOGAN_SEND_DATA;
 800410e:	f04f 0c1e 	mov.w	ip, #30
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004112:	2300      	movs	r3, #0
 8004114:	f04f 32ff 	mov.w	r2, #4294967295
 8004118:	f10d 0106 	add.w	r1, sp, #6
 800411c:	f8da 0000 	ldr.w	r0, [sl]
			passMsg = MSG_LOGAN_SEND_DATA;
 8004120:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004124:	f005 f844 	bl	80091b0 <xQueueGenericSend>
		xSemaphoreGiveRecursive(logAnlysMutex);
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	f005 fa33 	bl	8009594 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 800412e:	e7d8      	b.n	80040e2 <LogAnlysTask+0x52>
	TIM_LogAnlys_Stop();
 8004130:	f00a f87c 	bl	800e22c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8004134:	2304      	movs	r3, #4
 8004136:	74ab      	strb	r3, [r5, #18]
 8004138:	e7f6      	b.n	8004128 <LogAnlysTask+0x98>
	TIM_LogAnlys_Start();		
 800413a:	f00a f85f 	bl	800e1fc <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 800413e:	2301      	movs	r3, #1
 8004140:	74ab      	strb	r3, [r5, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8004142:	8928      	ldrh	r0, [r5, #8]
 8004144:	f006 f866 	bl	800a214 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8004148:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800414c:	f8c9 3014 	str.w	r3, [r9, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8004150:	7d2b      	ldrb	r3, [r5, #20]
 8004152:	b91b      	cbnz	r3, 800415c <LogAnlysTask+0xcc>
		LOG_ANLYS_TriggerEventOccured();		
 8004154:	f009 ffb4 	bl	800e0c0 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8004158:	f00a f8cc 	bl	800e2f4 <TIM_PostTrigger_SoftwareStart>
	GPIO_EnableTrigger();	
 800415c:	f00a f8d6 	bl	800e30c <GPIO_EnableTrigger>
 8004160:	e7e2      	b.n	8004128 <LogAnlysTask+0x98>
	logAnlys.enable = LOGA_ENABLED;
 8004162:	2301      	movs	r3, #1
 8004164:	74eb      	strb	r3, [r5, #19]
	TIM_LogAnlys_Init();
 8004166:	f009 ffb7 	bl	800e0d8 <TIM_LogAnlys_Init>
 800416a:	e7dd      	b.n	8004128 <LogAnlysTask+0x98>
	TIM_LogAnlys_Deinit();
 800416c:	f00a f820 	bl	800e1b0 <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 8004170:	f885 8013 	strb.w	r8, [r5, #19]
 8004174:	e7d8      	b.n	8004128 <LogAnlysTask+0x98>
 8004176:	bf00      	nop
 8004178:	20005434 	.word	0x20005434
 800417c:	20005438 	.word	0x20005438
 8004180:	20005450 	.word	0x20005450
 8004184:	2000545c 	.word	0x2000545c
 8004188:	200047cc 	.word	0x200047cc
 800418c:	40010400 	.word	0x40010400

08004190 <logAnlysSendInit>:
void logAnlysSendInit(void){
 8004190:	b500      	push	{lr}
 8004192:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_INIT;
 8004194:	a902      	add	r1, sp, #8
 8004196:	2319      	movs	r3, #25
 8004198:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <logAnlysSendInit+0x20>)
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	f005 f803 	bl	80091b0 <xQueueGenericSend>
}
 80041aa:	b003      	add	sp, #12
 80041ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80041b0:	20005434 	.word	0x20005434

080041b4 <logAnlysSendDeinit>:
void logAnlysSendDeinit(void){
 80041b4:	b500      	push	{lr}
 80041b6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 80041b8:	a902      	add	r1, sp, #8
 80041ba:	231a      	movs	r3, #26
 80041bc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <logAnlysSendDeinit+0x20>)
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	f004 fff1 	bl	80091b0 <xQueueGenericSend>
}
 80041ce:	b003      	add	sp, #12
 80041d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80041d4:	20005434 	.word	0x20005434

080041d8 <logAnlysSendStart>:
void logAnlysSendStart(void){
 80041d8:	b500      	push	{lr}
 80041da:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_START;
 80041dc:	a902      	add	r1, sp, #8
 80041de:	231b      	movs	r3, #27
 80041e0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <logAnlysSendStart+0x20>)
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	f004 ffdf 	bl	80091b0 <xQueueGenericSend>
}
 80041f2:	b003      	add	sp, #12
 80041f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f8:	20005434 	.word	0x20005434

080041fc <logAnlysSendStop>:
void logAnlysSendStop(void){
 80041fc:	b500      	push	{lr}
 80041fe:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_STOP;
 8004200:	a902      	add	r1, sp, #8
 8004202:	231c      	movs	r3, #28
 8004204:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <logAnlysSendStop+0x20>)
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	f004 ffcd 	bl	80091b0 <xQueueGenericSend>
}
 8004216:	b003      	add	sp, #12
 8004218:	f85d fb04 	ldr.w	pc, [sp], #4
 800421c:	20005434 	.word	0x20005434

08004220 <logAnlysPeriodElapsedCallback>:
void logAnlysPeriodElapsedCallback(void){
 8004220:	b500      	push	{lr}
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <logAnlysPeriodElapsedCallback+0x20>)
void logAnlysPeriodElapsedCallback(void){
 8004224:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 8004226:	231d      	movs	r3, #29
 8004228:	f8ad 3002 	strh.w	r3, [sp, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800422c:	6810      	ldr	r0, [r2, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	aa01      	add	r2, sp, #4
 8004232:	f10d 0102 	add.w	r1, sp, #2
 8004236:	f005 f9cd 	bl	80095d4 <xQueueGenericSendFromISR>
}
 800423a:	b003      	add	sp, #12
 800423c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004240:	20005434 	.word	0x20005434

08004244 <logAnlysStart>:
void logAnlysStart(void){
 8004244:	b510      	push	{r4, lr}
	logAnlys.state = LOGA_SAMPLING;			
 8004246:	4c0b      	ldr	r4, [pc, #44]	; (8004274 <logAnlysStart+0x30>)
	TIM_LogAnlys_Start();		
 8004248:	f009 ffd8 	bl	800e1fc <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 800424c:	2301      	movs	r3, #1
 800424e:	74a3      	strb	r3, [r4, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8004250:	8920      	ldrh	r0, [r4, #8]
 8004252:	f005 ffdf 	bl	800a214 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <logAnlysStart+0x34>)
 8004258:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800425c:	615a      	str	r2, [r3, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 800425e:	7d23      	ldrb	r3, [r4, #20]
 8004260:	b91b      	cbnz	r3, 800426a <logAnlysStart+0x26>
		LOG_ANLYS_TriggerEventOccured();		
 8004262:	f009 ff2d 	bl	800e0c0 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8004266:	f00a f845 	bl	800e2f4 <TIM_PostTrigger_SoftwareStart>
}	
 800426a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_EnableTrigger();	
 800426e:	f00a b84d 	b.w	800e30c <GPIO_EnableTrigger>
 8004272:	bf00      	nop
 8004274:	20005438 	.word	0x20005438
 8004278:	40010400 	.word	0x40010400

0800427c <logAnlysStop>:
void logAnlysStop(void){
 800427c:	b508      	push	{r3, lr}
	TIM_LogAnlys_Stop();
 800427e:	f009 ffd5 	bl	800e22c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8004282:	4b02      	ldr	r3, [pc, #8]	; (800428c <logAnlysStop+0x10>)
 8004284:	2204      	movs	r2, #4
 8004286:	749a      	strb	r2, [r3, #18]
}
 8004288:	bd08      	pop	{r3, pc}
 800428a:	bf00      	nop
 800428c:	20005438 	.word	0x20005438

08004290 <logAnlysSetSamplingFreq>:
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 8004290:	f00a b814 	b.w	800e2bc <TIM_LogAnlys_SamplingFreq_Reconfig>

08004294 <logAnlysSetSamplesNum>:
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8004294:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004296:	4c07      	ldr	r4, [pc, #28]	; (80042b4 <logAnlysSetSamplesNum+0x20>)
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8004298:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800429a:	f04f 31ff 	mov.w	r1, #4294967295
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	f005 fbb6 	bl	8009a10 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <logAnlysSetSamplesNum+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 80042a6:	6820      	ldr	r0, [r4, #0]
	logAnlys.samplesNumber = samplesNum;
 80042a8:	821d      	strh	r5, [r3, #16]
}
 80042aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 80042ae:	f005 b971 	b.w	8009594 <xQueueGiveMutexRecursive>
 80042b2:	bf00      	nop
 80042b4:	20005450 	.word	0x20005450
 80042b8:	20005438 	.word	0x20005438

080042bc <logAnlysSetPretrigger>:
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 80042bc:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80042be:	4d07      	ldr	r5, [pc, #28]	; (80042dc <logAnlysSetPretrigger+0x20>)
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 80042c0:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80042c2:	f04f 31ff 	mov.w	r1, #4294967295
 80042c6:	6828      	ldr	r0, [r5, #0]
 80042c8:	f005 fba2 	bl	8009a10 <xQueueTakeMutexRecursive>
	logAnlys.preTriggerTime = pretrigMillisec;
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <logAnlysSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 80042ce:	6828      	ldr	r0, [r5, #0]
	logAnlys.preTriggerTime = pretrigMillisec;
 80042d0:	b2a4      	uxth	r4, r4
 80042d2:	811c      	strh	r4, [r3, #8]
}
 80042d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 80042d8:	f005 b95c 	b.w	8009594 <xQueueGiveMutexRecursive>
 80042dc:	20005450 	.word	0x20005450
 80042e0:	20005438 	.word	0x20005438

080042e4 <logAnlysSetPosttrigger>:
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 80042e4:	f009 bfc8 	b.w	800e278 <TIM_LogAnlys_PostTrigger_Reconfig>

080042e8 <logAnlysSetTriggerRising>:
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <logAnlysSetTriggerRising+0x8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	759a      	strb	r2, [r3, #22]
}
 80042ee:	4770      	bx	lr
 80042f0:	20005438 	.word	0x20005438

080042f4 <logAnlysSetTriggerFalling>:
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 80042f4:	4b01      	ldr	r3, [pc, #4]	; (80042fc <logAnlysSetTriggerFalling+0x8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	759a      	strb	r2, [r3, #22]
}
 80042fa:	4770      	bx	lr
 80042fc:	20005438 	.word	0x20005438

08004300 <logAnlysSetTriggerChannel>:
	switch(chan){
 8004300:	3801      	subs	r0, #1
 8004302:	2807      	cmp	r0, #7
 8004304:	d808      	bhi.n	8004318 <logAnlysSetTriggerChannel+0x18>
 8004306:	e8df f000 	tbb	[pc, r0]
 800430a:	0c08      	.short	0x0c08
 800430c:	1c181410 	.word	0x1c181410
 8004310:	0420      	.short	0x0420
		logAnlys.trigConfig = TRIG_CHAN8;
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 8004314:	2207      	movs	r2, #7
 8004316:	755a      	strb	r2, [r3, #21]
}
 8004318:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN1;
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 800431c:	2200      	movs	r2, #0
 800431e:	755a      	strb	r2, [r3, #21]
		break;
 8004320:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN2;
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 8004324:	2201      	movs	r2, #1
 8004326:	755a      	strb	r2, [r3, #21]
		break;
 8004328:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN3;
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 800432c:	2202      	movs	r2, #2
 800432e:	755a      	strb	r2, [r3, #21]
		break;
 8004330:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN4;
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 8004334:	2203      	movs	r2, #3
 8004336:	755a      	strb	r2, [r3, #21]
		break;
 8004338:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN5;
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 800433c:	2204      	movs	r2, #4
 800433e:	755a      	strb	r2, [r3, #21]
		break;
 8004340:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN6;
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 8004344:	2205      	movs	r2, #5
 8004346:	755a      	strb	r2, [r3, #21]
		break;
 8004348:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN7;
 800434a:	4b02      	ldr	r3, [pc, #8]	; (8004354 <logAnlysSetTriggerChannel+0x54>)
 800434c:	2206      	movs	r2, #6
 800434e:	755a      	strb	r2, [r3, #21]
		break;
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20005438 	.word	0x20005438

08004358 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when osciloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8004358:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800435c:	4cc2      	ldr	r4, [pc, #776]	; (8004668 <ScopeTriggerTask+0x310>)
 800435e:	4ec3      	ldr	r6, [pc, #780]	; (800466c <ScopeTriggerTask+0x314>)
 8004360:	4dc3      	ldr	r5, [pc, #780]	; (8004670 <ScopeTriggerTask+0x318>)
 8004362:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8004698 <ScopeTriggerTask+0x340>
 8004366:	f8df b334 	ldr.w	fp, [pc, #820]	; 800469c <ScopeTriggerTask+0x344>
 800436a:	f8df 8334 	ldr.w	r8, [pc, #820]	; 80046a0 <ScopeTriggerTask+0x348>
 800436e:	b085      	sub	sp, #20

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004370:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d013      	beq.n	80043a0 <ScopeTriggerTask+0x48>
 8004378:	f894 3020 	ldrb.w	r3, [r4, #32]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d00f      	beq.n	80043a0 <ScopeTriggerTask+0x48>
 8004380:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d00b      	beq.n	80043a0 <ScopeTriggerTask+0x48>
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
		}else{
			taskYIELD();
 8004388:	4aba      	ldr	r2, [pc, #744]	; (8004674 <ScopeTriggerTask+0x31c>)
 800438a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004398:	f894 3020 	ldrb.w	r3, [r4, #32]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d1eb      	bne.n	8004378 <ScopeTriggerTask+0x20>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	6830      	ldr	r0, [r6, #0]
 80043a6:	f005 fb33 	bl	8009a10 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 80043aa:	4ab3      	ldr	r2, [pc, #716]	; (8004678 <ScopeTriggerTask+0x320>)
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80043ac:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
			lastWritingIndex = writingIndex;
 80043b0:	682b      	ldr	r3, [r5, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80043b2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
			lastWritingIndex = writingIndex;
 80043b6:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80043b8:	f006 fec6 	bl	800b148 <DMA_GetCurrDataCounter>
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80043bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80043c0:	f894 1020 	ldrb.w	r1, [r4, #32]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80043c4:	ebaa 0000 	sub.w	r0, sl, r0
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4403      	add	r3, r0
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80043cc:	2901      	cmp	r1, #1
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80043ce:	fbb3 fcf2 	udiv	ip, r3, r2
 80043d2:	fb02 321c 	mls	r2, r2, ip, r3
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80043d6:	6028      	str	r0, [r5, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80043d8:	f8c9 2000 	str.w	r2, [r9]
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80043dc:	d00c      	beq.n	80043f8 <ScopeTriggerTask+0xa0>
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 80043de:	f894 3020 	ldrb.w	r3, [r4, #32]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d065      	beq.n	80044b2 <ScopeTriggerTask+0x15a>
			}else if(scope.state == SCOPE_SAMPLING){
 80043e6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	f000 80c8 	beq.w	8004580 <ScopeTriggerTask+0x228>
			xSemaphoreGiveRecursive(scopeMutex);
 80043f0:	6830      	ldr	r0, [r6, #0]
 80043f2:	f005 f8cf 	bl	8009594 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 80043f6:	e7bb      	b.n	8004370 <ScopeTriggerTask+0x18>
				if(scope.settings.adcRes<=8){
 80043f8:	8b63      	ldrh	r3, [r4, #26]
 80043fa:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80043fc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004400:	f103 0307 	add.w	r3, r3, #7
 8004404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 8004408:	f200 80a5 	bhi.w	8004556 <ScopeTriggerTask+0x1fe>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	685b      	ldr	r3, [r3, #4]
					data = data & 0x00ff;
 8004412:	f813 c002 	ldrb.w	ip, [r3, r2]
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004416:	8ae1      	ldrh	r1, [r4, #22]
 8004418:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	8b23      	ldrh	r3, [r4, #24]
 8004420:	4f96      	ldr	r7, [pc, #600]	; (800467c <ScopeTriggerTask+0x324>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004422:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004426:	f8a7 c000 	strh.w	ip, [r7]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800442a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800442e:	33ff      	adds	r3, #255	; 0xff
 8004430:	fb02 f303 	mul.w	r3, r2, r3
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004434:	4f90      	ldr	r7, [pc, #576]	; (8004678 <ScopeTriggerTask+0x320>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004436:	8b22      	ldrh	r2, [r4, #24]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004438:	fb0a f101 	mul.w	r1, sl, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800443c:	fb0e f202 	mul.w	r2, lr, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004440:	f8b7 a000 	ldrh.w	sl, [r7]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004444:	4f8e      	ldr	r7, [pc, #568]	; (8004680 <ScopeTriggerTask+0x328>)
 8004446:	0c12      	lsrs	r2, r2, #16
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004448:	0c1b      	lsrs	r3, r3, #16
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800444a:	b280      	uxth	r0, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800444c:	3301      	adds	r3, #1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800444e:	603a      	str	r2, [r7, #0]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004450:	4f8c      	ldr	r7, [pc, #560]	; (8004684 <ScopeTriggerTask+0x32c>)
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004452:	f8cb 3000 	str.w	r3, [fp]
	if(index < lastIndex){
 8004456:	4550      	cmp	r0, sl
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004458:	ea4f 4321 	mov.w	r3, r1, asr #16
 800445c:	803b      	strh	r3, [r7, #0]
		result= index + scope.oneChanSamples - lastIndex;
 800445e:	bf3d      	ittte	cc
 8004460:	6be3      	ldrcc	r3, [r4, #60]	; 0x3c
 8004462:	eba3 030a 	subcc.w	r3, r3, sl
 8004466:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 8004468:	eba0 000a 	subcs.w	r0, r0, sl
 800446c:	b283      	uxth	r3, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800446e:	f8d8 0000 	ldr.w	r0, [r8]
 8004472:	4403      	add	r3, r0
				if (samplesTaken > samplesToStart)    
 8004474:	4293      	cmp	r3, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004476:	f8c8 3000 	str.w	r3, [r8]
				if (samplesTaken > samplesToStart)    
 800447a:	d9b9      	bls.n	80043f0 <ScopeTriggerTask+0x98>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 800447c:	7d22      	ldrb	r2, [r4, #20]
 800447e:	2a00      	cmp	r2, #0
 8004480:	f040 8110 	bne.w	80046a4 <ScopeTriggerTask+0x34c>
 8004484:	f10c 0210 	add.w	r2, ip, #16
 8004488:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 800448c:	f280 810a 	bge.w	80046a4 <ScopeTriggerTask+0x34c>
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8004490:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8004492:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004496:	2300      	movs	r3, #0
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
					scope.state = SCOPE_SAMPLING;
 800449c:	f884 0020 	strb.w	r0, [r4, #32]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80044a0:	4879      	ldr	r0, [pc, #484]	; (8004688 <ScopeTriggerTask+0x330>)
					passMsg = MSG_SCOPE_TRIGGER;
 80044a2:	f8ad c00e 	strh.w	ip, [sp, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80044a6:	f10d 010e 	add.w	r1, sp, #14
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	f004 fe80 	bl	80091b0 <xQueueGenericSend>
 80044b0:	e79e      	b.n	80043f0 <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80044b2:	4b71      	ldr	r3, [pc, #452]	; (8004678 <ScopeTriggerTask+0x320>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b280      	uxth	r0, r0
	if(index < lastIndex){
 80044b8:	4298      	cmp	r0, r3
		result= index + scope.oneChanSamples - lastIndex;
 80044ba:	bf3d      	ittte	cc
 80044bc:	6be1      	ldrcc	r1, [r4, #60]	; 0x3c
 80044be:	1acb      	subcc	r3, r1, r3
 80044c0:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 80044c2:	1ac0      	subcs	r0, r0, r3
				if(scope.settings.adcRes<=8){
 80044c4:	8b63      	ldrh	r3, [r4, #26]
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80044c6:	f8d8 1000 	ldr.w	r1, [r8]
				if(scope.settings.adcRes<=8){
 80044ca:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80044cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		result= index - lastIndex;
 80044d0:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80044d2:	eb00 0a01 	add.w	sl, r0, r1
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80044d6:	f103 0307 	add.w	r3, r3, #7
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80044da:	f8c8 a000 	str.w	sl, [r8]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80044de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 80044e2:	f200 80ee 	bhi.w	80046c2 <ScopeTriggerTask+0x36a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80044e6:	f022 0101 	bic.w	r1, r2, #1
 80044ea:	6858      	ldr	r0, [r3, #4]
					data = data & 0x00ff;
 80044ec:	f810 c001 	ldrb.w	ip, [r0, r1]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80044f0:	8ae1      	ldrh	r1, [r4, #22]
 80044f2:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80044f6:	6920      	ldr	r0, [r4, #16]
 80044f8:	8b23      	ldrh	r3, [r4, #24]
 80044fa:	4f60      	ldr	r7, [pc, #384]	; (800467c <ScopeTriggerTask+0x324>)
 80044fc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004500:	33ff      	adds	r3, #255	; 0xff
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	f8a7 c000 	strh.w	ip, [r7]
 800450a:	0c1b      	lsrs	r3, r3, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800450c:	6927      	ldr	r7, [r4, #16]
 800450e:	8b20      	ldrh	r0, [r4, #24]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004510:	3301      	adds	r3, #1
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004512:	fb0e f101 	mul.w	r1, lr, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004516:	fb07 f000 	mul.w	r0, r7, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800451a:	f8cb 3000 	str.w	r3, [fp]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800451e:	4f59      	ldr	r7, [pc, #356]	; (8004684 <ScopeTriggerTask+0x32c>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004520:	4b57      	ldr	r3, [pc, #348]	; (8004680 <ScopeTriggerTask+0x328>)
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8004522:	f894 e014 	ldrb.w	lr, [r4, #20]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004526:	0c09      	lsrs	r1, r1, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004528:	0c00      	lsrs	r0, r0, #16
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800452a:	8039      	strh	r1, [r7, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800452c:	6018      	str	r0, [r3, #0]
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 800452e:	f1be 0f00 	cmp.w	lr, #0
 8004532:	d114      	bne.n	800455e <ScopeTriggerTask+0x206>
 8004534:	4561      	cmp	r1, ip
 8004536:	d212      	bcs.n	800455e <ScopeTriggerTask+0x206>
					totalSmpTaken = samplesTaken;
 8004538:	4f54      	ldr	r7, [pc, #336]	; (800468c <ScopeTriggerTask+0x334>)
 800453a:	f8c7 a000 	str.w	sl, [r7]
					triggerIndex = actualIndex;
 800453e:	4f54      	ldr	r7, [pc, #336]	; (8004690 <ScopeTriggerTask+0x338>)
					samplesTaken = 0;
 8004540:	2100      	movs	r1, #0
					triggerIndex = actualIndex;
 8004542:	603a      	str	r2, [r7, #0]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004544:	460b      	mov	r3, r1
					scope.state = SCOPE_SAMPLING;
 8004546:	2003      	movs	r0, #3
					passMsg = MSG_SCOPE_TRIGGER;
 8004548:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 8004550:	f8c8 1000 	str.w	r1, [r8]
 8004554:	e7a2      	b.n	800449c <ScopeTriggerTask+0x144>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 800455c:	e75b      	b.n	8004416 <ScopeTriggerTask+0xbe>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel)
 800455e:	7d23      	ldrb	r3, [r4, #20]
 8004560:	2b01      	cmp	r3, #1
 8004562:	f000 80b2 	beq.w	80046ca <ScopeTriggerTask+0x372>
						|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004566:	7d63      	ldrb	r3, [r4, #21]
 8004568:	2b01      	cmp	r3, #1
 800456a:	f000 80b5 	beq.w	80046d8 <ScopeTriggerTask+0x380>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){
 800456e:	7d63      	ldrb	r3, [r4, #21]
 8004570:	2b02      	cmp	r3, #2
 8004572:	f47f af3d 	bne.w	80043f0 <ScopeTriggerTask+0x98>
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	459a      	cmp	sl, r3
 800457a:	f67f af39 	bls.w	80043f0 <ScopeTriggerTask+0x98>
 800457e:	e7db      	b.n	8004538 <ScopeTriggerTask+0x1e0>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <ScopeTriggerTask+0x320>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b280      	uxth	r0, r0
	if(index < lastIndex){
 8004586:	4298      	cmp	r0, r3
		result= index + scope.oneChanSamples - lastIndex;
 8004588:	bf3d      	ittte	cc
 800458a:	6be2      	ldrcc	r2, [r4, #60]	; 0x3c
 800458c:	1ad3      	subcc	r3, r2, r3
 800458e:	18c0      	addcc	r0, r0, r3
		result= index - lastIndex;
 8004590:	1ac0      	subcs	r0, r0, r3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004592:	f8d8 2000 	ldr.w	r2, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004596:	f894 3020 	ldrb.w	r3, [r4, #32]
		result= index - lastIndex;
 800459a:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 800459c:	4410      	add	r0, r2
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 800459e:	2b03      	cmp	r3, #3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 80045a0:	f8c8 0000 	str.w	r0, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 80045a4:	f47f af24 	bne.w	80043f0 <ScopeTriggerTask+0x98>
 80045a8:	f8db 3000 	ldr.w	r3, [fp]
 80045ac:	4298      	cmp	r0, r3
 80045ae:	f4ff af1f 	bcc.w	80043f0 <ScopeTriggerTask+0x98>
					samplingDisable();
 80045b2:	f006 ff2d 	bl	800b410 <samplingDisable>
					if (scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){	
 80045b6:	7d63      	ldrb	r3, [r4, #21]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f000 80a2 	beq.w	8004702 <ScopeTriggerTask+0x3aa>
 80045be:	7d63      	ldrb	r3, [r4, #21]
 80045c0:	4a33      	ldr	r2, [pc, #204]	; (8004690 <ScopeTriggerTask+0x338>)
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	d02a      	beq.n	800461e <ScopeTriggerTask+0x2c6>
						if(scope.settings.adcRes>8){
 80045c8:	8b63      	ldrh	r3, [r4, #26]
 80045ca:	492e      	ldr	r1, [pc, #184]	; (8004684 <ScopeTriggerTask+0x32c>)
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	8809      	ldrh	r1, [r1, #0]
 80045d0:	f240 809a 	bls.w	8004708 <ScopeTriggerTask+0x3b0>
							if(scope.settings.triggerEdge == EDGE_RISING){
 80045d4:	7d20      	ldrb	r0, [r4, #20]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80045d6:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 80045da:	f10c 0c07 	add.w	ip, ip, #7
 80045de:	0053      	lsls	r3, r2, #1
 80045e0:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
							if(scope.settings.triggerEdge == EDGE_RISING){
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f000 80a9 	beq.w	800473c <ScopeTriggerTask+0x3e4>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 80045ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80045ee:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80045f2:	4288      	cmp	r0, r1
 80045f4:	d210      	bcs.n	8004618 <ScopeTriggerTask+0x2c0>
 80045f6:	3a01      	subs	r2, #1
 80045f8:	3b02      	subs	r3, #2
 80045fa:	e000      	b.n	80045fe <ScopeTriggerTask+0x2a6>
 80045fc:	4662      	mov	r2, ip
 80045fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8004602:	3007      	adds	r0, #7
 8004604:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004608:	f102 3cff 	add.w	ip, r2, #4294967295
 800460c:	6840      	ldr	r0, [r0, #4]
 800460e:	5ac0      	ldrh	r0, [r0, r3]
 8004610:	4288      	cmp	r0, r1
 8004612:	f1a3 0302 	sub.w	r3, r3, #2
 8004616:	d3f1      	bcc.n	80045fc <ScopeTriggerTask+0x2a4>
						triggerIndex++;
 8004618:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <ScopeTriggerTask+0x338>)
 800461a:	3201      	adds	r2, #1
 800461c:	601a      	str	r2, [r3, #0]
					SmpBeforeTrig = totalSmpTaken;
 800461e:	4f1b      	ldr	r7, [pc, #108]	; (800468c <ScopeTriggerTask+0x334>)
					SmpAfterTrig=samplesTaken;
 8004620:	f8d8 0000 	ldr.w	r0, [r8]
 8004624:	9001      	str	r0, [sp, #4]
					SmpBeforeTrig = totalSmpTaken;
 8004626:	f240 3c18 	movw	ip, #792	; 0x318
 800462a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	f8cc 0000 	str.w	r0, [ip]
					SmpAfterTrig=samplesTaken;
 8004634:	4817      	ldr	r0, [pc, #92]	; (8004694 <ScopeTriggerTask+0x33c>)
					scope.triggerIndex = triggerIndex;
 8004636:	6062      	str	r2, [r4, #4]
					SmpAfterTrig=samplesTaken;
 8004638:	9a01      	ldr	r2, [sp, #4]
 800463a:	6002      	str	r2, [r0, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 800463c:	4812      	ldr	r0, [pc, #72]	; (8004688 <ScopeTriggerTask+0x330>)
					samplesTaken = 0;
 800463e:	2100      	movs	r1, #0
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004640:	460b      	mov	r3, r1
					passMsg = MSG_SCOPE_DATA_READY;
 8004642:	f04f 0e15 	mov.w	lr, #21
					scope.state = SCOPE_DATA_SENDING;
 8004646:	f04f 0c04 	mov.w	ip, #4
					samplesTaken = 0;
 800464a:	f8c8 1000 	str.w	r1, [r8]
					totalSmpTaken = 0;
 800464e:	6039      	str	r1, [r7, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	f10d 010e 	add.w	r1, sp, #14
 8004658:	6800      	ldr	r0, [r0, #0]
					scope.state = SCOPE_DATA_SENDING;
 800465a:	f884 c020 	strb.w	ip, [r4, #32]
					passMsg = MSG_SCOPE_DATA_READY;
 800465e:	f8ad e00e 	strh.w	lr, [sp, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004662:	f004 fda5 	bl	80091b0 <xQueueGenericSend>
 8004666:	e6c3      	b.n	80043f0 <ScopeTriggerTask+0x98>
 8004668:	20000334 	.word	0x20000334
 800466c:	20000378 	.word	0x20000378
 8004670:	20000388 	.word	0x20000388
 8004674:	e000ed04 	.word	0xe000ed04
 8004678:	20000324 	.word	0x20000324
 800467c:	20000320 	.word	0x20000320
 8004680:	2000032c 	.word	0x2000032c
 8004684:	20000384 	.word	0x20000384
 8004688:	200047cc 	.word	0x200047cc
 800468c:	2000037c 	.word	0x2000037c
 8004690:	20000380 	.word	0x20000380
 8004694:	20000314 	.word	0x20000314
 8004698:	2000031c 	.word	0x2000031c
 800469c:	20000330 	.word	0x20000330
 80046a0:	20000328 	.word	0x20000328
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel)
 80046a4:	7d22      	ldrb	r2, [r4, #20]
 80046a6:	2a01      	cmp	r2, #1
 80046a8:	d01c      	beq.n	80046e4 <ScopeTriggerTask+0x38c>
							|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80046aa:	7d62      	ldrb	r2, [r4, #21]
 80046ac:	2a01      	cmp	r2, #1
 80046ae:	d022      	beq.n	80046f6 <ScopeTriggerTask+0x39e>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 80046b0:	7d62      	ldrb	r2, [r4, #21]
 80046b2:	2a02      	cmp	r2, #2
 80046b4:	f47f ae9c 	bne.w	80043f0 <ScopeTriggerTask+0x98>
 80046b8:	6922      	ldr	r2, [r4, #16]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f67f ae98 	bls.w	80043f0 <ScopeTriggerTask+0x98>
 80046c0:	e6e6      	b.n	8004490 <ScopeTriggerTask+0x138>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80046c8:	e712      	b.n	80044f0 <ScopeTriggerTask+0x198>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel)
 80046ca:	4561      	cmp	r1, ip
 80046cc:	f63f af34 	bhi.w	8004538 <ScopeTriggerTask+0x1e0>
						|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80046d0:	7d63      	ldrb	r3, [r4, #21]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	f47f af4b 	bne.w	800456e <ScopeTriggerTask+0x216>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	ebba 0f83 	cmp.w	sl, r3, lsl #2
 80046de:	f63f af2b 	bhi.w	8004538 <ScopeTriggerTask+0x1e0>
 80046e2:	e744      	b.n	800456e <ScopeTriggerTask+0x216>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel)
 80046e4:	f1ac 0c10 	sub.w	ip, ip, #16
 80046e8:	ebbc 4f11 	cmp.w	ip, r1, lsr #16
 80046ec:	f73f aed0 	bgt.w	8004490 <ScopeTriggerTask+0x138>
							|| (scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80046f0:	7d62      	ldrb	r2, [r4, #21]
 80046f2:	2a01      	cmp	r2, #1
 80046f4:	d1dc      	bne.n	80046b0 <ScopeTriggerTask+0x358>
 80046f6:	6922      	ldr	r2, [r4, #16]
 80046f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046fc:	f63f aec8 	bhi.w	8004490 <ScopeTriggerTask+0x138>
 8004700:	e7d6      	b.n	80046b0 <ScopeTriggerTask+0x358>
 8004702:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <ScopeTriggerTask+0x448>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	e78a      	b.n	800461e <ScopeTriggerTask+0x2c6>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8004708:	7d23      	ldrb	r3, [r4, #20]
 800470a:	b383      	cbz	r3, 800476e <ScopeTriggerTask+0x416>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 800470c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004710:	3307      	adds	r3, #7
 8004712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	5c9b      	ldrb	r3, [r3, r2]
 800471a:	428b      	cmp	r3, r1
 800471c:	f4bf af7c 	bcs.w	8004618 <ScopeTriggerTask+0x2c0>
 8004720:	3a01      	subs	r2, #1
 8004722:	e000      	b.n	8004726 <ScopeTriggerTask+0x3ce>
 8004724:	4602      	mov	r2, r0
 8004726:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800472a:	3307      	adds	r3, #7
 800472c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004730:	1e50      	subs	r0, r2, #1
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	428b      	cmp	r3, r1
 8004738:	d3f4      	bcc.n	8004724 <ScopeTriggerTask+0x3cc>
 800473a:	e76d      	b.n	8004618 <ScopeTriggerTask+0x2c0>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800473c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004740:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8004744:	4288      	cmp	r0, r1
 8004746:	f67f af67 	bls.w	8004618 <ScopeTriggerTask+0x2c0>
 800474a:	3a01      	subs	r2, #1
 800474c:	1e98      	subs	r0, r3, #2
 800474e:	e000      	b.n	8004752 <ScopeTriggerTask+0x3fa>
 8004750:	4662      	mov	r2, ip
 8004752:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004756:	3307      	adds	r3, #7
 8004758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800475c:	f102 3cff 	add.w	ip, r2, #4294967295
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	5a1b      	ldrh	r3, [r3, r0]
 8004764:	428b      	cmp	r3, r1
 8004766:	f1a0 0002 	sub.w	r0, r0, #2
 800476a:	d8f1      	bhi.n	8004750 <ScopeTriggerTask+0x3f8>
 800476c:	e754      	b.n	8004618 <ScopeTriggerTask+0x2c0>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800476e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004772:	3307      	adds	r3, #7
 8004774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	428b      	cmp	r3, r1
 800477e:	f67f af4b 	bls.w	8004618 <ScopeTriggerTask+0x2c0>
 8004782:	3a01      	subs	r2, #1
 8004784:	e000      	b.n	8004788 <ScopeTriggerTask+0x430>
 8004786:	4602      	mov	r2, r0
 8004788:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800478c:	3307      	adds	r3, #7
 800478e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004792:	1e50      	subs	r0, r2, #1
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	5c9b      	ldrb	r3, [r3, r2]
 8004798:	428b      	cmp	r3, r1
 800479a:	d8f4      	bhi.n	8004786 <ScopeTriggerTask+0x42e>
 800479c:	e73c      	b.n	8004618 <ScopeTriggerTask+0x2c0>
 800479e:	bf00      	nop
 80047a0:	20000380 	.word	0x20000380

080047a4 <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 80047a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	scope.bufferMemory = scopeBuffer;
 80047a6:	4c2a      	ldr	r4, [pc, #168]	; (8004850 <scopeSetDefault+0xac>)
 80047a8:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <scopeSetDefault+0xb0>)
 80047aa:	6023      	str	r3, [r4, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 80047ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 80047b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 80047b4:	2000      	movs	r0, #0
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 80047b6:	2101      	movs	r1, #1
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 80047b8:	60a5      	str	r5, [r4, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 80047ba:	7520      	strb	r0, [r4, #20]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 80047bc:	250c      	movs	r5, #12
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 80047be:	7561      	strb	r1, [r4, #21]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 80047c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 80047c4:	82e2      	strh	r2, [r4, #22]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 80047c6:	2164      	movs	r1, #100	; 0x64
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 80047c8:	8322      	strh	r2, [r4, #24]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 80047ca:	f247 5294 	movw	r2, #30100	; 0x7594
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 80047ce:	8365      	strh	r5, [r4, #26]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 80047d0:	83a0      	strh	r0, [r4, #28]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 80047d2:	6121      	str	r1, [r4, #16]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 80047d4:	6263      	str	r3, [r4, #36]	; 0x24
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 80047d6:	63a2      	str	r2, [r4, #56]	; 0x38
	if(scope.settings.adcRes>8){
 80047d8:	8b63      	ldrh	r3, [r4, #26]
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80047da:	4f1f      	ldr	r7, [pc, #124]	; (8004858 <scopeSetDefault+0xb4>)
	if(scope.settings.adcRes>8){
 80047dc:	2b08      	cmp	r3, #8
		scope.oneChanSamples = scope.oneChanMemSize/2;
 80047de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80047e0:	6838      	ldr	r0, [r7, #0]
void scopeSetDefault(void){
 80047e2:	b083      	sub	sp, #12
		scope.oneChanSamples = scope.oneChanMemSize/2;
 80047e4:	bf88      	it	hi
 80047e6:	085b      	lsrhi	r3, r3, #1
	scope.numOfChannles = 1;
 80047e8:	2501      	movs	r5, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80047ea:	2602      	movs	r6, #2
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80047ec:	f04f 31ff 	mov.w	r1, #4294967295
		scope.oneChanSamples = scope.oneChanMemSize;
 80047f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	scope.numOfChannles = 1;
 80047f2:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	scope.triggerChannel = 1;
 80047f6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80047fa:	f005 f909 	bl	8009a10 <xQueueTakeMutexRecursive>
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80047fe:	4631      	mov	r1, r6
 8004800:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004802:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004806:	f006 fe05 	bl	800b414 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 800480a:	2304      	movs	r3, #4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 800480c:	4619      	mov	r1, r3
 800480e:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004810:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004814:	f006 fdfe 	bl	800b414 <adcSetInputChannel>
 8004818:	4631      	mov	r1, r6
 800481a:	4630      	mov	r0, r6
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 800481c:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004820:	f006 fdf8 	bl	800b414 <adcSetInputChannel>
 8004824:	4629      	mov	r1, r5
 8004826:	2003      	movs	r0, #3
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004828:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 800482c:	f006 fdf2 	bl	800b414 <adcSetInputChannel>
		result = 0;
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f004 feaf 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004836:	a902      	add	r1, sp, #8
 8004838:	2333      	movs	r3, #51	; 0x33
 800483a:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <scopeSetDefault+0xb8>)
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	2300      	movs	r3, #0
 8004848:	f004 fcb2 	bl	80091b0 <xQueueGenericSend>
}
 800484c:	b003      	add	sp, #12
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	20000334 	.word	0x20000334
 8004854:	2000545c 	.word	0x2000545c
 8004858:	20000378 	.word	0x20000378
 800485c:	20005458 	.word	0x20005458

08004860 <ScopeTask>:
void ScopeTask(void const *argument){
 8004860:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004864:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 8004866:	ae02      	add	r6, sp, #8
 8004868:	f64f 73ff 	movw	r3, #65535	; 0xffff
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800486c:	2200      	movs	r2, #0
 800486e:	2102      	movs	r1, #2
 8004870:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8004872:	f826 3d06 	strh.w	r3, [r6, #-6]!
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004876:	f004 fc57 	bl	8009128 <xQueueGenericCreate>
 800487a:	4f78      	ldr	r7, [pc, #480]	; (8004a5c <ScopeTask+0x1fc>)
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 800487c:	4d78      	ldr	r5, [pc, #480]	; (8004a60 <ScopeTask+0x200>)
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800487e:	6038      	str	r0, [r7, #0]
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004880:	2004      	movs	r0, #4
 8004882:	f004 fe53 	bl	800952c <xQueueCreateMutex>
 8004886:	4c77      	ldr	r4, [pc, #476]	; (8004a64 <ScopeTask+0x204>)
 8004888:	6028      	str	r0, [r5, #0]
 800488a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8004a6c <ScopeTask+0x20c>
 800488e:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8004a70 <ScopeTask+0x210>
	scopeSetDefault();
 8004892:	f7ff ff87 	bl	80047a4 <scopeSetDefault>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004896:	f04f 0800 	mov.w	r8, #0
			scope.state=SCOPE_SAMPLING_WAITING;
 800489a:	f04f 0a01 	mov.w	sl, #1
 800489e:	e04a      	b.n	8004936 <ScopeTask+0xd6>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 80048a0:	2b33      	cmp	r3, #51	; 0x33
 80048a2:	d060      	beq.n	8004966 <ScopeTask+0x106>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	f040 8097 	bne.w	80049d8 <ScopeTask+0x178>
 80048aa:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d03e      	beq.n	8004930 <ScopeTask+0xd0>
 80048b2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d03a      	beq.n	8004930 <ScopeTask+0xd0>
 80048ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d036      	beq.n	8004930 <ScopeTask+0xd0>
 80048c2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d032      	beq.n	8004930 <ScopeTask+0xd0>
	writingIndex = 0;
 80048ca:	f8c9 8000 	str.w	r8, [r9]
	uint32_t realfreq=0;
 80048ce:	f8cd 8004 	str.w	r8, [sp, #4]
	ADC_DMA_Stop();
 80048d2:	f006 fc0d 	bl	800b0f0 <ADC_DMA_Stop>
	TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 80048d6:	a901      	add	r1, sp, #4
 80048d8:	68a0      	ldr	r0, [r4, #8]
 80048da:	f009 fdc1 	bl	800e460 <TIM_Reconfig_scope>
	ADC_set_sampling_time(realfreq);	
 80048de:	9801      	ldr	r0, [sp, #4]
 80048e0:	f006 fc62 	bl	800b1a8 <ADC_set_sampling_time>
		if(scope.numOfChannles>i){
 80048e4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 80b1 	bne.w	8004a50 <ScopeTask+0x1f0>
 80048ee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	f200 80a6 	bhi.w	8004a44 <ScopeTask+0x1e4>
 80048f8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	f200 809b 	bhi.w	8004a38 <ScopeTask+0x1d8>
 8004902:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004906:	2b03      	cmp	r3, #3
 8004908:	f200 8090 	bhi.w	8004a2c <ScopeTask+0x1cc>
	scope.settings.realSamplingFreq=realfreq;
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	60e3      	str	r3, [r4, #12]
			scope.state=SCOPE_SAMPLING_WAITING;
 8004910:	f884 a020 	strb.w	sl, [r4, #32]
			samplingEnable();
 8004914:	f006 fd7a 	bl	800b40c <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004918:	f04f 0c17 	mov.w	ip, #23
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800491c:	2300      	movs	r3, #0
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	a901      	add	r1, sp, #4
 8004924:	f8db 0000 	ldr.w	r0, [fp]
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004928:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800492c:	f004 fc40 	bl	80091b0 <xQueueGenericSend>
		xSemaphoreGiveRecursive(scopeMutex);
 8004930:	6828      	ldr	r0, [r5, #0]
 8004932:	f004 fe2f 	bl	8009594 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004936:	2300      	movs	r3, #0
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	4631      	mov	r1, r6
 800493e:	6838      	ldr	r0, [r7, #0]
 8004940:	f004 fede 	bl	8009700 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004944:	f04f 31ff 	mov.w	r1, #4294967295
 8004948:	6828      	ldr	r0, [r5, #0]
 800494a:	f005 f861 	bl	8009a10 <xQueueTakeMutexRecursive>
		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 800494e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004952:	2b14      	cmp	r3, #20
 8004954:	d1a4      	bne.n	80048a0 <ScopeTask+0x40>
 8004956:	f894 3020 	ldrb.w	r3, [r4, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0e8      	beq.n	8004930 <ScopeTask+0xd0>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 800495e:	2306      	movs	r3, #6
 8004960:	f884 3020 	strb.w	r3, [r4, #32]
 8004964:	e7e4      	b.n	8004930 <ScopeTask+0xd0>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8004966:	f894 3020 	ldrb.w	r3, [r4, #32]
 800496a:	2b05      	cmp	r3, #5
 800496c:	d0e0      	beq.n	8004930 <ScopeTask+0xd0>
 800496e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0dc      	beq.n	8004930 <ScopeTask+0xd0>
				samplingDisable();
 8004976:	f006 fd4b 	bl	800b410 <samplingDisable>
	writingIndex = 0;
 800497a:	f8c9 8000 	str.w	r8, [r9]
	uint32_t realfreq=0;
 800497e:	f8cd 8004 	str.w	r8, [sp, #4]
	ADC_DMA_Stop();
 8004982:	f006 fbb5 	bl	800b0f0 <ADC_DMA_Stop>
	TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8004986:	a901      	add	r1, sp, #4
 8004988:	68a0      	ldr	r0, [r4, #8]
 800498a:	f009 fd69 	bl	800e460 <TIM_Reconfig_scope>
	ADC_set_sampling_time(realfreq);	
 800498e:	9801      	ldr	r0, [sp, #4]
 8004990:	f006 fc0a 	bl	800b1a8 <ADC_set_sampling_time>
		if(scope.numOfChannles>i){
 8004994:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004998:	2b00      	cmp	r3, #0
 800499a:	d141      	bne.n	8004a20 <ScopeTask+0x1c0>
 800499c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d837      	bhi.n	8004a14 <ScopeTask+0x1b4>
 80049a4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d82d      	bhi.n	8004a08 <ScopeTask+0x1a8>
 80049ac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d823      	bhi.n	80049fc <ScopeTask+0x19c>
	scope.settings.realSamplingFreq=realfreq;
 80049b4:	9b01      	ldr	r3, [sp, #4]
 80049b6:	60e3      	str	r3, [r4, #12]
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 80049b8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049bc:	2b06      	cmp	r3, #6
 80049be:	d0b7      	beq.n	8004930 <ScopeTask+0xd0>
 80049c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d0b3      	beq.n	8004930 <ScopeTask+0xd0>
					samplesTaken=0;
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <ScopeTask+0x208>)
					scope.state=SCOPE_SAMPLING_WAITING;
 80049ca:	f884 a020 	strb.w	sl, [r4, #32]
					samplesTaken=0;
 80049ce:	f8c3 8000 	str.w	r8, [r3]
					samplingEnable();
 80049d2:	f006 fd1b 	bl	800b40c <samplingEnable>
 80049d6:	e7ab      	b.n	8004930 <ScopeTask+0xd0>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 80049d8:	2b13      	cmp	r3, #19
 80049da:	d104      	bne.n	80049e6 <ScopeTask+0x186>
			samplingDisable();
 80049dc:	f006 fd18 	bl	800b410 <samplingDisable>
			scope.state = SCOPE_IDLE;
 80049e0:	f884 8020 	strb.w	r8, [r4, #32]
 80049e4:	e7a4      	b.n	8004930 <ScopeTask+0xd0>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 80049e6:	2b11      	cmp	r3, #17
 80049e8:	d1a2      	bne.n	8004930 <ScopeTask+0xd0>
 80049ea:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d19e      	bne.n	8004930 <ScopeTask+0xd0>
			samplingEnable();
 80049f2:	f006 fd0b 	bl	800b40c <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 80049f6:	f884 a020 	strb.w	sl, [r4, #32]
 80049fa:	e799      	b.n	8004930 <ScopeTask+0xd0>
			ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 80049fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a00:	2003      	movs	r0, #3
 8004a02:	f006 fb41 	bl	800b088 <ADC_DMA_Reconfig>
 8004a06:	e7d5      	b.n	80049b4 <ScopeTask+0x154>
 8004a08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	f006 fb3b 	bl	800b088 <ADC_DMA_Reconfig>
 8004a12:	e7cb      	b.n	80049ac <ScopeTask+0x14c>
 8004a14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f006 fb35 	bl	800b088 <ADC_DMA_Reconfig>
 8004a1e:	e7c1      	b.n	80049a4 <ScopeTask+0x144>
 8004a20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a24:	2000      	movs	r0, #0
 8004a26:	f006 fb2f 	bl	800b088 <ADC_DMA_Reconfig>
 8004a2a:	e7b7      	b.n	800499c <ScopeTask+0x13c>
 8004a2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a30:	2003      	movs	r0, #3
 8004a32:	f006 fb29 	bl	800b088 <ADC_DMA_Reconfig>
 8004a36:	e769      	b.n	800490c <ScopeTask+0xac>
 8004a38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f006 fb23 	bl	800b088 <ADC_DMA_Reconfig>
 8004a42:	e75e      	b.n	8004902 <ScopeTask+0xa2>
 8004a44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f006 fb1d 	bl	800b088 <ADC_DMA_Reconfig>
 8004a4e:	e753      	b.n	80048f8 <ScopeTask+0x98>
 8004a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a54:	2000      	movs	r0, #0
 8004a56:	f006 fb17 	bl	800b088 <ADC_DMA_Reconfig>
 8004a5a:	e748      	b.n	80048ee <ScopeTask+0x8e>
 8004a5c:	20005458 	.word	0x20005458
 8004a60:	20000378 	.word	0x20000378
 8004a64:	20000334 	.word	0x20000334
 8004a68:	20000328 	.word	0x20000328
 8004a6c:	20000388 	.word	0x20000388
 8004a70:	200047cc 	.word	0x200047cc

08004a74 <GetNumOfChannels>:
	return scope.numOfChannles;
 8004a74:	4b01      	ldr	r3, [pc, #4]	; (8004a7c <GetNumOfChannels+0x8>)
 8004a76:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000334 	.word	0x20000334

08004a80 <getDataPointer>:
	return scope.pChanMem[chan];
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <getDataPointer+0xc>)
 8004a82:	3008      	adds	r0, #8
 8004a84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004a88:	6858      	ldr	r0, [r3, #4]
}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000334 	.word	0x20000334

08004a90 <getOneChanMemSize>:
	return scope.oneChanMemSize;
 8004a90:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <getOneChanMemSize+0x8>)
 8004a92:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000334 	.word	0x20000334

08004a9c <getTriggerIndex>:
	return triggerIndex;
 8004a9c:	4b01      	ldr	r3, [pc, #4]	; (8004aa4 <getTriggerIndex+0x8>)
}
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000380 	.word	0x20000380

08004aa8 <getSamples>:
	return scope.settings.samplesToSend;
 8004aa8:	4b01      	ldr	r3, [pc, #4]	; (8004ab0 <getSamples+0x8>)
 8004aaa:	6918      	ldr	r0, [r3, #16]
}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000334 	.word	0x20000334

08004ab4 <getADCRes>:
	return scope.settings.adcRes;
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <getADCRes+0x8>)
 8004ab6:	8b58      	ldrh	r0, [r3, #26]
}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000334 	.word	0x20000334

08004ac0 <getPretrigger>:
	return scope.settings.pretrigger;
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <getPretrigger+0x8>)
 8004ac2:	8b18      	ldrh	r0, [r3, #24]
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000334 	.word	0x20000334

08004acc <getScopeState>:
	return scope.state;
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <getScopeState+0x8>)
 8004ace:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 8004ad2:	4770      	bx	lr
 8004ad4:	20000334 	.word	0x20000334

08004ad8 <scopeSetTriggerMode>:
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004ad8:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ada:	4c07      	ldr	r4, [pc, #28]	; (8004af8 <scopeSetTriggerMode+0x20>)
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004adc:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ade:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	f004 ff94 	bl	8009a10 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <scopeSetTriggerMode+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004aea:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerMode = mode;
 8004aec:	755d      	strb	r5, [r3, #21]
}
 8004aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004af2:	f004 bd4f 	b.w	8009594 <xQueueGiveMutexRecursive>
 8004af6:	bf00      	nop
 8004af8:	20000378 	.word	0x20000378
 8004afc:	20000334 	.word	0x20000334

08004b00 <scopeSetTriggerEdge>:
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004b00:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b02:	4c0d      	ldr	r4, [pc, #52]	; (8004b38 <scopeSetTriggerEdge+0x38>)
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004b04:	b083      	sub	sp, #12
 8004b06:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b08:	f04f 31ff 	mov.w	r1, #4294967295
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	f004 ff7f 	bl	8009a10 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <scopeSetTriggerEdge+0x3c>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004b14:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerEdge = edge;
 8004b16:	751d      	strb	r5, [r3, #20]
	xSemaphoreGiveRecursive(scopeMutex);
 8004b18:	f004 fd3c 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004b1c:	a902      	add	r1, sp, #8
 8004b1e:	2333      	movs	r3, #51	; 0x33
 8004b20:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <scopeSetTriggerEdge+0x40>)
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f004 fb3f 	bl	80091b0 <xQueueGenericSend>
}
 8004b32:	b003      	add	sp, #12
 8004b34:	bd30      	pop	{r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	20000378 	.word	0x20000378
 8004b3c:	20000334 	.word	0x20000334
 8004b40:	20005458 	.word	0x20005458
 8004b44:	00000000 	.word	0x00000000

08004b48 <scopeSetDataDepth>:
uint8_t scopeSetDataDepth(uint16_t res){
 8004b48:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b4a:	4e25      	ldr	r6, [pc, #148]	; (8004be0 <scopeSetDataDepth+0x98>)
	scope.settings.adcRes = res;
 8004b4c:	4c25      	ldr	r4, [pc, #148]	; (8004be4 <scopeSetDataDepth+0x9c>)
uint8_t scopeSetDataDepth(uint16_t res){
 8004b4e:	4605      	mov	r5, r0
 8004b50:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b52:	f04f 31ff 	mov.w	r1, #4294967295
 8004b56:	6830      	ldr	r0, [r6, #0]
 8004b58:	f004 ff5a 	bl	8009a10 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8004b5c:	8365      	strh	r5, [r4, #26]
	uint32_t data_len=scope.settings.samplesToSend;
 8004b5e:	6923      	ldr	r3, [r4, #16]
	if(scope.settings.adcRes>8){
 8004b60:	8b62      	ldrh	r2, [r4, #26]
 8004b62:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004b64:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
		data_len=data_len*2;
 8004b68:	bf88      	it	hi
 8004b6a:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004b6c:	fb03 f302 	mul.w	r3, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004b70:	f247 5230 	movw	r2, #30000	; 0x7530
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d829      	bhi.n	8004bcc <scopeSetDataDepth+0x84>
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8004b78:	8b60      	ldrh	r0, [r4, #26]
 8004b7a:	f7fb fc7b 	bl	8000474 <__aeabi_ui2d>
 8004b7e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004bd8 <scopeSetDataDepth+0x90>
 8004b82:	ec41 0b11 	vmov	d1, r0, r1
 8004b86:	f00b fe13 	bl	80107b0 <pow>
 8004b8a:	ec51 0b10 	vmov	r0, r1, d0
 8004b8e:	f7fb ffc3 	bl	8000b18 <__aeabi_d2uiz>
 8004b92:	b280      	uxth	r0, r0
 8004b94:	83a0      	strh	r0, [r4, #28]
		if(scope.settings.adcRes>8){
 8004b96:	8b63      	ldrh	r3, [r4, #26]
 8004b98:	2b08      	cmp	r3, #8
			scope.oneChanSamples=scope.oneChanMemSize/2;
 8004b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b9c:	bf88      	it	hi
 8004b9e:	085b      	lsrhi	r3, r3, #1
			scope.oneChanSamples=scope.oneChanMemSize;
 8004ba0:	63e3      	str	r3, [r4, #60]	; 0x3c
		adcSetResolution(res);
 8004ba2:	b2e8      	uxtb	r0, r5
 8004ba4:	f006 fd62 	bl	800b66c <adcSetResolution>
		result=0;
 8004ba8:	2400      	movs	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004baa:	6830      	ldr	r0, [r6, #0]
 8004bac:	f004 fcf2 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004bb0:	a902      	add	r1, sp, #8
 8004bb2:	2333      	movs	r3, #51	; 0x33
 8004bb4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <scopeSetDataDepth+0xa0>)
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f004 faf5 	bl	80091b0 <xQueueGenericSend>
}
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	b2ed      	uxtb	r5, r5
		scope.settings.adcRes = resTmp;
 8004bce:	8365      	strh	r5, [r4, #26]
	uint8_t result=BUFFER_SIZE_ERR;
 8004bd0:	243a      	movs	r4, #58	; 0x3a
 8004bd2:	e7ea      	b.n	8004baa <scopeSetDataDepth+0x62>
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	00000000 	.word	0x00000000
 8004bdc:	40000000 	.word	0x40000000
 8004be0:	20000378 	.word	0x20000378
 8004be4:	20000334 	.word	0x20000334
 8004be8:	20005458 	.word	0x20005458

08004bec <scopeSetSamplingFreq>:
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004bec:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004bee:	4c12      	ldr	r4, [pc, #72]	; (8004c38 <scopeSetSamplingFreq+0x4c>)
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	f004 ff09 	bl	8009a10 <xQueueTakeMutexRecursive>
	if (freq<=MAX_SAMPLING_FREQ_12B){
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <scopeSetSamplingFreq+0x50>)
 8004c00:	429d      	cmp	r5, r3
 8004c02:	d812      	bhi.n	8004c2a <scopeSetSamplingFreq+0x3e>
		scope.settings.samplingFrequency = freq;
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <scopeSetSamplingFreq+0x54>)
 8004c06:	609d      	str	r5, [r3, #8]
	xSemaphoreGiveRecursive(scopeMutex);
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	f004 fcc3 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004c0e:	a902      	add	r1, sp, #8
 8004c10:	2333      	movs	r3, #51	; 0x33
 8004c12:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <scopeSetSamplingFreq+0x58>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f004 fac6 	bl	80091b0 <xQueueGenericSend>
}
 8004c24:	2000      	movs	r0, #0
 8004c26:	b003      	add	sp, #12
 8004c28:	bd30      	pop	{r4, r5, pc}
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004c2a:	4d05      	ldr	r5, [pc, #20]	; (8004c40 <scopeSetSamplingFreq+0x54>)
 8004c2c:	8b68      	ldrh	r0, [r5, #26]
 8004c2e:	b2c0      	uxtb	r0, r0
 8004c30:	f009 fc2a 	bl	800e488 <getMaxScopeSamplingFreq>
 8004c34:	60a8      	str	r0, [r5, #8]
 8004c36:	e7e7      	b.n	8004c08 <scopeSetSamplingFreq+0x1c>
 8004c38:	20000378 	.word	0x20000378
 8004c3c:	003d0900 	.word	0x003d0900
 8004c40:	20000334 	.word	0x20000334
 8004c44:	20005458 	.word	0x20005458

08004c48 <scopeSetTrigLevel>:
void scopeSetTrigLevel(uint16_t level){
 8004c48:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c4a:	4c07      	ldr	r4, [pc, #28]	; (8004c68 <scopeSetTrigLevel+0x20>)
void scopeSetTrigLevel(uint16_t level){
 8004c4c:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f004 fedc 	bl	8009a10 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <scopeSetTrigLevel+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004c5a:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerLevel = level;
 8004c5c:	82dd      	strh	r5, [r3, #22]
}
 8004c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004c62:	f004 bc97 	b.w	8009594 <xQueueGiveMutexRecursive>
 8004c66:	bf00      	nop
 8004c68:	20000378 	.word	0x20000378
 8004c6c:	20000334 	.word	0x20000334

08004c70 <scopeSetPretrigger>:
void scopeSetPretrigger(uint16_t pretrig){
 8004c70:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c72:	4c07      	ldr	r4, [pc, #28]	; (8004c90 <scopeSetPretrigger+0x20>)
void scopeSetPretrigger(uint16_t pretrig){
 8004c74:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c76:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	f004 fec8 	bl	8009a10 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <scopeSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004c82:	6820      	ldr	r0, [r4, #0]
	scope.settings.pretrigger = pretrig;
 8004c84:	831d      	strh	r5, [r3, #24]
}
 8004c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004c8a:	f004 bc83 	b.w	8009594 <xQueueGiveMutexRecursive>
 8004c8e:	bf00      	nop
 8004c90:	20000378 	.word	0x20000378
 8004c94:	20000334 	.word	0x20000334

08004c98 <scopeSetNumOfSamples>:
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004c98:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c9a:	4d10      	ldr	r5, [pc, #64]	; (8004cdc <scopeSetNumOfSamples+0x44>)
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004c9c:	4c10      	ldr	r4, [pc, #64]	; (8004ce0 <scopeSetNumOfSamples+0x48>)
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca6:	6828      	ldr	r0, [r5, #0]
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004ca8:	6923      	ldr	r3, [r4, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004caa:	f004 feb1 	bl	8009a10 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8004cae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	xSemaphoreGiveRecursive(scopeMutex);
 8004cb0:	6828      	ldr	r0, [r5, #0]
	if(smp<scope.oneChanSamples){
 8004cb2:	42b3      	cmp	r3, r6
		scope.settings.samplesToSend = smp;
 8004cb4:	bf8a      	itet	hi
 8004cb6:	6126      	strhi	r6, [r4, #16]
	uint8_t result=BUFFER_SIZE_ERR;
 8004cb8:	243a      	movls	r4, #58	; 0x3a
		result=0;
 8004cba:	2400      	movhi	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004cbc:	f004 fc6a 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004cc0:	a902      	add	r1, sp, #8
 8004cc2:	2333      	movs	r3, #51	; 0x33
 8004cc4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <scopeSetNumOfSamples+0x4c>)
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f004 fa6d 	bl	80091b0 <xQueueGenericSend>
}
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	20000378 	.word	0x20000378
 8004ce0:	20000334 	.word	0x20000334
 8004ce4:	20005458 	.word	0x20005458

08004ce8 <scopeSetNumOfChannels>:
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t chanTmp=scope.numOfChannles;
 8004cea:	4c35      	ldr	r4, [pc, #212]	; (8004dc0 <scopeSetNumOfChannels+0xd8>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cec:	4e35      	ldr	r6, [pc, #212]	; (8004dc4 <scopeSetNumOfChannels+0xdc>)
	uint8_t chanTmp=scope.numOfChannles;
 8004cee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8004cfa:	6830      	ldr	r0, [r6, #0]
	uint8_t chanTmp=scope.numOfChannles;
 8004cfc:	b2df      	uxtb	r7, r3
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cfe:	f004 fe87 	bl	8009a10 <xQueueTakeMutexRecursive>
	if(chan<=MAX_ADC_CHANNELS){
 8004d02:	2d04      	cmp	r5, #4
 8004d04:	d858      	bhi.n	8004db8 <scopeSetNumOfChannels+0xd0>
		scope.numOfChannles=chan;
 8004d06:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	uint32_t data_len=scope.settings.samplesToSend;
 8004d0a:	6923      	ldr	r3, [r4, #16]
	if(scope.settings.adcRes>8){
 8004d0c:	8b62      	ldrh	r2, [r4, #26]
 8004d0e:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004d10:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
		data_len=data_len*2;
 8004d14:	bf88      	it	hi
 8004d16:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004d18:	fb03 f202 	mul.w	r2, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004d1c:	f247 5330 	movw	r3, #30000	; 0x7530
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d835      	bhi.n	8004d90 <scopeSetNumOfChannels+0xa8>
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 8004d24:	fb93 f3f5 	sdiv	r3, r3, r5
 8004d28:	3364      	adds	r3, #100	; 0x64
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	63a3      	str	r3, [r4, #56]	; 0x38
			if(scope.settings.adcRes>8){
 8004d30:	8b63      	ldrh	r3, [r4, #26]
 8004d32:	2b08      	cmp	r3, #8
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d36:	bf88      	it	hi
 8004d38:	085b      	lsrhi	r3, r3, #1
 8004d3a:	63e3      	str	r3, [r4, #60]	; 0x3c
			for(uint8_t i=0;i<chan;i++){
 8004d3c:	b335      	cbz	r5, 8004d8c <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d3e:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <scopeSetNumOfChannels+0xe0>)
 8004d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d44:	f002 0301 	and.w	r3, r2, #1
 8004d48:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004d4a:	2d01      	cmp	r5, #1
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d4c:	6263      	str	r3, [r4, #36]	; 0x24
			for(uint8_t i=0;i<chan;i++){
 8004d4e:	d01d      	beq.n	8004d8c <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d54:	4413      	add	r3, r2
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	440b      	add	r3, r1
 8004d5c:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004d5e:	2d02      	cmp	r5, #2
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d60:	62a3      	str	r3, [r4, #40]	; 0x28
			for(uint8_t i=0;i<chan;i++){
 8004d62:	d013      	beq.n	8004d8c <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d68:	f002 0301 	and.w	r3, r2, #1
 8004d6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004d70:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004d72:	2d04      	cmp	r5, #4
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d74:	62e3      	str	r3, [r4, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8004d76:	d109      	bne.n	8004d8c <scopeSetNumOfChannels+0xa4>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004d78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d7c:	4413      	add	r3, r2
 8004d7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	440b      	add	r3, r1
 8004d88:	441a      	add	r2, r3
 8004d8a:	6322      	str	r2, [r4, #48]	; 0x30
			result=0;
 8004d8c:	2400      	movs	r4, #0
 8004d8e:	e002      	b.n	8004d96 <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 8004d90:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
	uint8_t result=BUFFER_SIZE_ERR;
 8004d94:	243a      	movs	r4, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
 8004d96:	6830      	ldr	r0, [r6, #0]
 8004d98:	f004 fbfc 	bl	8009594 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004d9c:	a902      	add	r1, sp, #8
 8004d9e:	2333      	movs	r3, #51	; 0x33
 8004da0:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <scopeSetNumOfChannels+0xe4>)
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	f004 f9ff 	bl	80091b0 <xQueueGenericSend>
}
 8004db2:	4620      	mov	r0, r4
 8004db4:	b003      	add	sp, #12
 8004db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t result=BUFFER_SIZE_ERR;
 8004db8:	243a      	movs	r4, #58	; 0x3a
}
 8004dba:	4620      	mov	r0, r4
 8004dbc:	b003      	add	sp, #12
 8004dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc0:	20000334 	.word	0x20000334
 8004dc4:	20000378 	.word	0x20000378
 8004dc8:	2000545c 	.word	0x2000545c
 8004dcc:	20005458 	.word	0x20005458

08004dd0 <scopeSetTrigChannel>:
	if(chan<=MAX_ADC_CHANNELS){
 8004dd0:	2804      	cmp	r0, #4
 8004dd2:	d81c      	bhi.n	8004e0e <scopeSetTrigChannel+0x3e>
uint8_t scopeSetTrigChannel(uint8_t chan){
 8004dd4:	b530      	push	{r4, r5, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004dd6:	4d0f      	ldr	r5, [pc, #60]	; (8004e14 <scopeSetTrigChannel+0x44>)
uint8_t scopeSetTrigChannel(uint8_t chan){
 8004dd8:	b083      	sub	sp, #12
 8004dda:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8004de0:	6828      	ldr	r0, [r5, #0]
 8004de2:	f004 fe15 	bl	8009a10 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <scopeSetTrigChannel+0x48>)
		xSemaphoreGiveRecursive(scopeMutex);
 8004de8:	6828      	ldr	r0, [r5, #0]
		scope.triggerChannel=chan;
 8004dea:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
		xSemaphoreGiveRecursive(scopeMutex);
 8004dee:	f004 fbd1 	bl	8009594 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004df2:	a902      	add	r1, sp, #8
 8004df4:	2333      	movs	r3, #51	; 0x33
 8004df6:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <scopeSetTrigChannel+0x4c>)
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	f004 f9d4 	bl	80091b0 <xQueueGenericSend>
		result=0;
 8004e08:	2000      	movs	r0, #0
}
 8004e0a:	b003      	add	sp, #12
 8004e0c:	bd30      	pop	{r4, r5, pc}
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 8004e0e:	2038      	movs	r0, #56	; 0x38
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000378 	.word	0x20000378
 8004e18:	20000334 	.word	0x20000334
 8004e1c:	20005458 	.word	0x20005458

08004e20 <scopeGetRealSmplFreq>:
	return scope.settings.realSamplingFreq;
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <scopeGetRealSmplFreq+0x8>)
 8004e22:	68d8      	ldr	r0, [r3, #12]
}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000334 	.word	0x20000334

08004e2c <scopeSetADCInputChannel>:
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8004e2c:	2803      	cmp	r0, #3
 8004e2e:	d826      	bhi.n	8004e7e <scopeSetADCInputChannel+0x52>
 8004e30:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <scopeSetADCInputChannel+0x58>)
 8004e32:	5c1b      	ldrb	r3, [r3, r0]
 8004e34:	428b      	cmp	r3, r1
 8004e36:	d922      	bls.n	8004e7e <scopeSetADCInputChannel+0x52>
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004e38:	b570      	push	{r4, r5, r6, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e3a:	4e13      	ldr	r6, [pc, #76]	; (8004e88 <scopeSetADCInputChannel+0x5c>)
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	460d      	mov	r5, r1
 8004e40:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e42:	f04f 31ff 	mov.w	r1, #4294967295
 8004e46:	6830      	ldr	r0, [r6, #0]
 8004e48:	f004 fde2 	bl	8009a10 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <scopeSetADCInputChannel+0x60>)
 8004e4e:	4423      	add	r3, r4
		adcSetInputChannel(adc, chann);
 8004e50:	4629      	mov	r1, r5
 8004e52:	4620      	mov	r0, r4
		scope.adcChannel[adc] = chann;
 8004e54:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
		adcSetInputChannel(adc, chann);
 8004e58:	f006 fadc 	bl	800b414 <adcSetInputChannel>
		xSemaphoreGiveRecursive(scopeMutex);
 8004e5c:	6830      	ldr	r0, [r6, #0]
 8004e5e:	f004 fb99 	bl	8009594 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004e62:	a902      	add	r1, sp, #8
 8004e64:	2333      	movs	r3, #51	; 0x33
 8004e66:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <scopeSetADCInputChannel+0x64>)
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	f004 f99c 	bl	80091b0 <xQueueGenericSend>
		result = 0;
 8004e78:	2000      	movs	r0, #0
}
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8004e7e:	203d      	movs	r0, #61	; 0x3d
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	08011c5c 	.word	0x08011c5c
 8004e88:	20000378 	.word	0x20000378
 8004e8c:	20000334 	.word	0x20000334
 8004e90:	20005458 	.word	0x20005458

08004e94 <scopeSetADCInputChannelDefault>:
uint8_t scopeSetADCInputChannelDefault(){
 8004e94:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e96:	4e1a      	ldr	r6, [pc, #104]	; (8004f00 <scopeSetADCInputChannelDefault+0x6c>)
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004e98:	4c1a      	ldr	r4, [pc, #104]	; (8004f04 <scopeSetADCInputChannelDefault+0x70>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e9a:	6830      	ldr	r0, [r6, #0]
uint8_t scopeSetADCInputChannelDefault(){
 8004e9c:	b082      	sub	sp, #8
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004e9e:	2502      	movs	r5, #2
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea4:	f004 fdb4 	bl	8009a10 <xQueueTakeMutexRecursive>
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004eac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004eb0:	f006 fab0 	bl	800b414 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004eb4:	2304      	movs	r3, #4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	2001      	movs	r0, #1
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004eba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ebe:	f006 faa9 	bl	800b414 <adcSetInputChannel>
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ec6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004eca:	f006 faa3 	bl	800b414 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ece:	2301      	movs	r3, #1
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	2003      	movs	r0, #3
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ed4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ed8:	f006 fa9c 	bl	800b414 <adcSetInputChannel>
	xSemaphoreGiveRecursive(scopeMutex);
 8004edc:	6830      	ldr	r0, [r6, #0]
 8004ede:	f004 fb59 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004ee2:	a902      	add	r1, sp, #8
 8004ee4:	2333      	movs	r3, #51	; 0x33
 8004ee6:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <scopeSetADCInputChannelDefault+0x74>)
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f004 f95c 	bl	80091b0 <xQueueGenericSend>
	return result;
}
 8004ef8:	2000      	movs	r0, #0
 8004efa:	b002      	add	sp, #8
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	bf00      	nop
 8004f00:	20000378 	.word	0x20000378
 8004f04:	20000334 	.word	0x20000334
 8004f08:	20005458 	.word	0x20005458

08004f0c <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 8004f0c:	b570      	push	{r4, r5, r6, lr}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f0e:	4e1a      	ldr	r6, [pc, #104]	; (8004f78 <scopeSetADCInputChannelVref+0x6c>)
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f10:	4c1a      	ldr	r4, [pc, #104]	; (8004f7c <scopeSetADCInputChannelVref+0x70>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f12:	6830      	ldr	r0, [r6, #0]
uint8_t scopeSetADCInputChannelVref(){
 8004f14:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f16:	f04f 31ff 	mov.w	r1, #4294967295
 8004f1a:	f004 fd79 	bl	8009a10 <xQueueTakeMutexRecursive>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f1e:	2308      	movs	r3, #8
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f20:	4619      	mov	r1, r3
 8004f22:	2000      	movs	r0, #0
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f28:	f006 fa74 	bl	800b414 <adcSetInputChannel>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f2c:	2309      	movs	r3, #9
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f2e:	4619      	mov	r1, r3
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f30:	2503      	movs	r5, #3
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f32:	2001      	movs	r0, #1
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f38:	f006 fa6c 	bl	800b414 <adcSetInputChannel>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	2002      	movs	r0, #2
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f40:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f44:	f006 fa66 	bl	800b414 <adcSetInputChannel>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4628      	mov	r0, r5
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004f4c:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004f50:	f006 fa60 	bl	800b414 <adcSetInputChannel>
		result = 0;
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8004f54:	6830      	ldr	r0, [r6, #0]
 8004f56:	f004 fb1d 	bl	8009594 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004f5a:	a902      	add	r1, sp, #8
 8004f5c:	2333      	movs	r3, #51	; 0x33
 8004f5e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <scopeSetADCInputChannelVref+0x74>)
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f004 f920 	bl	80091b0 <xQueueGenericSend>
	return result;
}
 8004f70:	2000      	movs	r0, #0
 8004f72:	b002      	add	sp, #8
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
 8004f76:	bf00      	nop
 8004f78:	20000378 	.word	0x20000378
 8004f7c:	20000334 	.word	0x20000334
 8004f80:	20005458 	.word	0x20005458

08004f84 <scopeGetRanges>:
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 8004f84:	2310      	movs	r3, #16
 8004f86:	7003      	strb	r3, [r0, #0]
	return RANGES;	
#endif


}
 8004f88:	4800      	ldr	r0, [pc, #0]	; (8004f8c <scopeGetRanges+0x8>)
 8004f8a:	4770      	bx	lr
 8004f8c:	08011c60 	.word	0x08011c60

08004f90 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8004f90:	b500      	push	{lr}
 8004f92:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_RESTART;
 8004f94:	a902      	add	r1, sp, #8
 8004f96:	2311      	movs	r3, #17
 8004f98:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <scopeRestart+0x20>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f004 f903 	bl	80091b0 <xQueueGenericSend>
}
 8004faa:	b003      	add	sp, #12
 8004fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fb0:	20005458 	.word	0x20005458

08004fb4 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 8004fb4:	b500      	push	{lr}
 8004fb6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_START;
 8004fb8:	a902      	add	r1, sp, #8
 8004fba:	2312      	movs	r3, #18
 8004fbc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <scopeStart+0x20>)
 8004fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f004 f8f1 	bl	80091b0 <xQueueGenericSend>
}
 8004fce:	b003      	add	sp, #12
 8004fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd4:	20005458 	.word	0x20005458

08004fd8 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 8004fd8:	b500      	push	{lr}
 8004fda:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_STOP;
 8004fdc:	a902      	add	r1, sp, #8
 8004fde:	2313      	movs	r3, #19
 8004fe0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <scopeStop+0x20>)
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	f004 f8df 	bl	80091b0 <xQueueGenericSend>
}
 8004ff2:	b003      	add	sp, #12
 8004ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ff8:	20005458 	.word	0x20005458

08004ffc <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8005000:	f64f 73ff 	movw	r3, #65535	; 0xffff
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8005004:	2200      	movs	r2, #0
 8005006:	2102      	movs	r1, #2
 8005008:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 800500a:	f8ad 3006 	strh.w	r3, [sp, #6]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800500e:	f004 f88b 	bl	8009128 <xQueueGenericCreate>
 8005012:	4d26      	ldr	r5, [pc, #152]	; (80050ac <SyncPwmTask+0xb0>)
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8005014:	4c26      	ldr	r4, [pc, #152]	; (80050b0 <SyncPwmTask+0xb4>)
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8005016:	6028      	str	r0, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8005018:	2004      	movs	r0, #4
 800501a:	f004 fa87 	bl	800952c <xQueueCreateMutex>

	if(syncPwmMessageQueue == 0){
 800501e:	682b      	ldr	r3, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8005020:	6020      	str	r0, [r4, #0]
	if(syncPwmMessageQueue == 0){
 8005022:	2b00      	cmp	r3, #0
 8005024:	d030      	beq.n	8005088 <SyncPwmTask+0x8c>
}

void syncPwmSetDefault(void)
{
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 8005026:	4a23      	ldr	r2, [pc, #140]	; (80050b4 <SyncPwmTask+0xb8>)
 8005028:	2101      	movs	r1, #1
	syncPwm.chan2 = CHAN_ENABLE;
	syncPwm.chan3 = CHAN_ENABLE;
	syncPwm.chan4 = CHAN_ENABLE;

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 800502a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
	syncPwm.dataEdgeChan1[1] = 0;
	syncPwm.dataEdgeChan2[0] = 7200;
 800502e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
	syncPwm.dataEdgeChan1[1] = 0;
 8005032:	2700      	movs	r7, #0
	syncPwm.chan1 = CHAN_ENABLE;
 8005034:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 8005038:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 800503c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8005040:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	syncPwm.dataEdgeChan1[0] = 3600;
 8005044:	8016      	strh	r6, [r2, #0]
	syncPwm.dataEdgeChan2[1] = 3600;			
	syncPwm.dataEdgeChan3[0] = 10400;
 8005046:	f642 01a0 	movw	r1, #10400	; 0x28a0
	syncPwm.dataEdgeChan1[1] = 0;
 800504a:	8057      	strh	r7, [r2, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 800504c:	8090      	strh	r0, [r2, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 800504e:	80d6      	strh	r6, [r2, #6]
	syncPwm.dataEdgeChan3[1] = 7200;			
	syncPwm.dataEdgeChan4[0] = 14000;
 8005050:	f243 66b0 	movw	r6, #14000	; 0x36b0
	syncPwm.dataEdgeChan3[0] = 10400;
 8005054:	8111      	strh	r1, [r2, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 8005056:	8150      	strh	r0, [r2, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8005058:	8196      	strh	r6, [r2, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 800505a:	81d1      	strh	r1, [r2, #14]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 800505c:	4618      	mov	r0, r3
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	2300      	movs	r3, #0
 8005064:	f10d 0106 	add.w	r1, sp, #6
 8005068:	f004 fb4a 	bl	8009700 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 800506c:	f04f 31ff 	mov.w	r1, #4294967295
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	f004 fccd 	bl	8009a10 <xQueueTakeMutexRecursive>
		switch(message){
 8005076:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800507a:	3b2c      	subs	r3, #44	; 0x2c
 800507c:	2b03      	cmp	r3, #3
 800507e:	d806      	bhi.n	800508e <SyncPwmTask+0x92>
 8005080:	e8df f003 	tbb	[pc, r3]
 8005084:	030a100d 	.word	0x030a100d
 8005088:	e7fe      	b.n	8005088 <SyncPwmTask+0x8c>
	TIM_SYNC_PWM_Stop();
 800508a:	f009 fc03 	bl	800e894 <TIM_SYNC_PWM_Stop>
		xSemaphoreGiveRecursive(syncPwmMutex);
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	f004 fa80 	bl	8009594 <xQueueGiveMutexRecursive>
 8005094:	682b      	ldr	r3, [r5, #0]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8005096:	e7e1      	b.n	800505c <SyncPwmTask+0x60>
	TIM_SYNC_PWM_Start();
 8005098:	f009 fb78 	bl	800e78c <TIM_SYNC_PWM_Start>
 800509c:	e7f7      	b.n	800508e <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Init();
 800509e:	f009 fb33 	bl	800e708 <TIM_SYNC_PWM_Init>
 80050a2:	e7f4      	b.n	800508e <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Deinit();
 80050a4:	f009 fb32 	bl	800e70c <TIM_SYNC_PWM_Deinit>
 80050a8:	e7f1      	b.n	800508e <SyncPwmTask+0x92>
 80050aa:	bf00      	nop
 80050ac:	2000cb48 	.word	0x2000cb48
 80050b0:	2000cb4c 	.word	0x2000cb4c
 80050b4:	2000cb20 	.word	0x2000cb20

080050b8 <syncPwmSendInit>:
void syncPwmSendInit(void){
 80050b8:	b500      	push	{lr}
 80050ba:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 80050bc:	a902      	add	r1, sp, #8
 80050be:	232c      	movs	r3, #44	; 0x2c
 80050c0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <syncPwmSendInit+0x20>)
 80050c6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	2300      	movs	r3, #0
 80050ce:	f004 f86f 	bl	80091b0 <xQueueGenericSend>
}
 80050d2:	b003      	add	sp, #12
 80050d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80050d8:	2000cb48 	.word	0x2000cb48

080050dc <syncPwmSendDeinit>:
void syncPwmSendDeinit(void){
 80050dc:	b500      	push	{lr}
 80050de:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 80050e0:	a902      	add	r1, sp, #8
 80050e2:	232d      	movs	r3, #45	; 0x2d
 80050e4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <syncPwmSendDeinit+0x20>)
 80050ea:	f04f 32ff 	mov.w	r2, #4294967295
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	f004 f85d 	bl	80091b0 <xQueueGenericSend>
}
 80050f6:	b003      	add	sp, #12
 80050f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050fc:	2000cb48 	.word	0x2000cb48

08005100 <syncPwmSendStart>:
void syncPwmSendStart(void){
 8005100:	b500      	push	{lr}
 8005102:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_START;
 8005104:	a902      	add	r1, sp, #8
 8005106:	232e      	movs	r3, #46	; 0x2e
 8005108:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <syncPwmSendStart+0x20>)
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	f004 f84b 	bl	80091b0 <xQueueGenericSend>
}
 800511a:	b003      	add	sp, #12
 800511c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005120:	2000cb48 	.word	0x2000cb48

08005124 <syncPwmSendStop>:
void syncPwmSendStop(void){
 8005124:	b500      	push	{lr}
 8005126:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 8005128:	a902      	add	r1, sp, #8
 800512a:	232f      	movs	r3, #47	; 0x2f
 800512c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <syncPwmSendStop+0x20>)
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	f004 f839 	bl	80091b0 <xQueueGenericSend>
}
 800513e:	b003      	add	sp, #12
 8005140:	f85d fb04 	ldr.w	pc, [sp], #4
 8005144:	2000cb48 	.word	0x2000cb48

08005148 <syncPwmChannelNumber>:
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 8005148:	4b01      	ldr	r3, [pc, #4]	; (8005150 <syncPwmChannelNumber+0x8>)
 800514a:	f883 0020 	strb.w	r0, [r3, #32]
}
 800514e:	4770      	bx	lr
 8005150:	2000cb20 	.word	0x2000cb20

08005154 <syncPwmChannelConfig>:
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8005154:	b280      	uxth	r0, r0
 8005156:	f009 bc4b 	b.w	800e9f0 <TIM_SYNC_PWM_DMA_ChanConfig>
 800515a:	bf00      	nop

0800515c <syncPwmSetFreq>:
{
 800515c:	b510      	push	{r4, lr}
 800515e:	b082      	sub	sp, #8
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005160:	f009 fc7e 	bl	800ea60 <TIM_Reconfig_SyncPwm>
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 8005164:	a902      	add	r1, sp, #8
 8005166:	2330      	movs	r3, #48	; 0x30
 8005168:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <syncPwmSetFreq+0x28>)
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 800516e:	4c06      	ldr	r4, [pc, #24]	; (8005188 <syncPwmSetFreq+0x2c>)
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	2300      	movs	r3, #0
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005178:	ed84 0b06 	vstr	d0, [r4, #24]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800517c:	f004 f818 	bl	80091b0 <xQueueGenericSend>
}
 8005180:	b002      	add	sp, #8
 8005182:	bd10      	pop	{r4, pc}
 8005184:	200047cc 	.word	0x200047cc
 8005188:	2000cb20 	.word	0x2000cb20

0800518c <syncPwmSetChannelState>:
	TIM_SYNC_PWM_ChannelState(channel, state);
 800518c:	f009 bad0 	b.w	800e730 <TIM_SYNC_PWM_ChannelState>

08005190 <syncPwmSetStepMode>:
	TIM_SYNC_PWM_StepMode_Enable();
 8005190:	f009 bc46 	b.w	800ea20 <TIM_SYNC_PWM_StepMode_Enable>

08005194 <syncPwmResetStepMode>:
	TIM_SYNC_PWM_StepMode_Disable();
 8005194:	f009 bc54 	b.w	800ea40 <TIM_SYNC_PWM_StepMode_Disable>

08005198 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_InitTick+0x24>)
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_InitTick+0x28>)
 800519c:	681b      	ldr	r3, [r3, #0]
{
 800519e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
{
 80051a4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80051a6:	0998      	lsrs	r0, r3, #6
 80051a8:	f000 ff70 	bl	800608c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80051ac:	4621      	mov	r1, r4
 80051ae:	2200      	movs	r2, #0
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f000 ff1a 	bl	8005fec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80051b8:	2000      	movs	r0, #0
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	20000004 	.word	0x20000004
 80051c0:	10624dd3 	.word	0x10624dd3

080051c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051c4:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <HAL_Init+0x20>)
{
 80051c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	f043 0310 	orr.w	r3, r3, #16
 80051ce:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051d0:	2003      	movs	r0, #3
 80051d2:	f000 fef9 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80051d6:	200f      	movs	r0, #15
 80051d8:	f7ff ffde 	bl	8005198 <HAL_InitTick>
  HAL_MspInit();
 80051dc:	f006 fe76 	bl	800becc <HAL_MspInit>
}
 80051e0:	2000      	movs	r0, #0
 80051e2:	bd08      	pop	{r3, pc}
 80051e4:	40022000 	.word	0x40022000

080051e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80051e8:	4b01      	ldr	r3, [pc, #4]	; (80051f0 <HAL_GetTick+0x8>)
 80051ea:	6818      	ldr	r0, [r3, #0]
}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	2000cb50 	.word	0x2000cb50

080051f4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F3xx_HAL_VERSION;
}
 80051f4:	f04f 7082 	mov.w	r0, #17039360	; 0x1040000
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <HAL_ADC_MspDeInit>:
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop

08005200 <HAL_ADC_ConvCpltCallback>:
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop

08005204 <HAL_ADC_ConvHalfCpltCallback>:
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <HAL_ADC_ErrorCallback>:
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop

0800520c <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800520c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800520e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005214:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005216:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800521e:	f7ff bff3 	b.w	8005208 <HAL_ADC_ErrorCallback>
 8005222:	bf00      	nop

08005224 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005224:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005226:	f7ff bfed 	b.w	8005204 <HAL_ADC_ConvHalfCpltCallback>
 800522a:	bf00      	nop

0800522c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800522c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800522e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005230:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005234:	d002      	beq.n	800523c <ADC_DMAConvCplt+0x10>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800523c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800523e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005246:	68ca      	ldr	r2, [r1, #12]
 8005248:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800524c:	d10c      	bne.n	8005268 <ADC_DMAConvCplt+0x3c>
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	b952      	cbnz	r2, 8005268 <ADC_DMAConvCplt+0x3c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800525a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525c:	04d2      	lsls	r2, r2, #19
 800525e:	d403      	bmi.n	8005268 <ADC_DMAConvCplt+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff bfc9 	b.w	8005200 <HAL_ADC_ConvCpltCallback>
 800526e:	bf00      	nop

08005270 <HAL_ADC_Init>:
{
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005278:	2800      	cmp	r0, #0
 800527a:	f000 809b 	beq.w	80053b4 <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800527e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005280:	f013 0310 	ands.w	r3, r3, #16
 8005284:	4604      	mov	r4, r0
 8005286:	d118      	bne.n	80052ba <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005288:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800528a:	2d00      	cmp	r5, #0
 800528c:	f000 8095 	beq.w	80053ba <HAL_ADC_Init+0x14a>
 8005290:	6801      	ldr	r1, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005292:	688a      	ldr	r2, [r1, #8]
 8005294:	00d2      	lsls	r2, r2, #3
 8005296:	f140 8081 	bpl.w	800539c <HAL_ADC_Init+0x12c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800529a:	688a      	ldr	r2, [r1, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800529c:	0096      	lsls	r6, r2, #2
 800529e:	d47d      	bmi.n	800539c <HAL_ADC_Init+0x12c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80052a2:	06d0      	lsls	r0, r2, #27
 80052a4:	f140 8097 	bpl.w	80053d6 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 80052a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052aa:	f023 0312 	bic.w	r3, r3, #18
 80052ae:	f043 0310 	orr.w	r3, r3, #16
 80052b2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80052b4:	2001      	movs	r0, #1
}
 80052b6:	b002      	add	sp, #8
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80052bc:	06dd      	lsls	r5, r3, #27
 80052be:	d4f3      	bmi.n	80052a8 <HAL_ADC_Init+0x38>
 80052c0:	6801      	ldr	r1, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80052c2:	688b      	ldr	r3, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80052c4:	f013 0304 	ands.w	r3, r3, #4
 80052c8:	d1ee      	bne.n	80052a8 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 80052ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80052cc:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80052d0:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052d4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80052d8:	6462      	str	r2, [r4, #68]	; 0x44
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052da:	f000 80e8 	beq.w	80054ae <HAL_ADC_Init+0x23e>
 80052de:	4aa4      	ldr	r2, [pc, #656]	; (8005570 <HAL_ADC_Init+0x300>)
 80052e0:	4291      	cmp	r1, r2
 80052e2:	d07c      	beq.n	80053de <HAL_ADC_Init+0x16e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80052e4:	48a3      	ldr	r0, [pc, #652]	; (8005574 <HAL_ADC_Init+0x304>)
 80052e6:	4281      	cmp	r1, r0
 80052e8:	f000 80e4 	beq.w	80054b4 <HAL_ADC_Init+0x244>
 80052ec:	4aa2      	ldr	r2, [pc, #648]	; (8005578 <HAL_ADC_Init+0x308>)
 80052ee:	4291      	cmp	r1, r2
 80052f0:	f000 80e1 	beq.w	80054b6 <HAL_ADC_Init+0x246>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80052f4:	688a      	ldr	r2, [r1, #8]
 80052f6:	f002 0203 	and.w	r2, r2, #3
 80052fa:	2a01      	cmp	r2, #1
 80052fc:	f000 8132 	beq.w	8005564 <HAL_ADC_Init+0x2f4>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005300:	4d9e      	ldr	r5, [pc, #632]	; (800557c <HAL_ADC_Init+0x30c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005302:	68aa      	ldr	r2, [r5, #8]
 8005304:	6860      	ldr	r0, [r4, #4]
 8005306:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800530a:	4302      	orrs	r2, r0
 800530c:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800530e:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
 8005312:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005314:	69e0      	ldr	r0, [r4, #28]
 8005316:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005318:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800531a:	2e01      	cmp	r6, #1
 800531c:	bf18      	it	ne
 800531e:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8005322:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005326:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8005328:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800532c:	f000 8095 	beq.w	800545a <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005330:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005332:	2a01      	cmp	r2, #1
 8005334:	d00d      	beq.n	8005352 <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005336:	488f      	ldr	r0, [pc, #572]	; (8005574 <HAL_ADC_Init+0x304>)
 8005338:	4281      	cmp	r1, r0
 800533a:	f000 80a3 	beq.w	8005484 <HAL_ADC_Init+0x214>
 800533e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005342:	4281      	cmp	r1, r0
 8005344:	f000 809e 	beq.w	8005484 <HAL_ADC_Init+0x214>
 8005348:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800534c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800534e:	4303      	orrs	r3, r0
 8005350:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005352:	688a      	ldr	r2, [r1, #8]
 8005354:	f012 0f0c 	tst.w	r2, #12
 8005358:	d10b      	bne.n	8005372 <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800535a:	68c8      	ldr	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800535c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800535e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005360:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005364:	0052      	lsls	r2, r2, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005366:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800536a:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800536e:	60c8      	str	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005370:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8005372:	68cd      	ldr	r5, [r1, #12]
 8005374:	4a82      	ldr	r2, [pc, #520]	; (8005580 <HAL_ADC_Init+0x310>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005376:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005378:	402a      	ands	r2, r5
 800537a:	4313      	orrs	r3, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800537c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800537e:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005380:	d073      	beq.n	800546a <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005382:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005384:	f023 030f 	bic.w	r3, r3, #15
 8005388:	630b      	str	r3, [r1, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800538a:	2000      	movs	r0, #0
 800538c:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800538e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6463      	str	r3, [r4, #68]	; 0x44
 800539a:	e78c      	b.n	80052b6 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800539c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800539e:	f023 0312 	bic.w	r3, r3, #18
 80053a2:	f043 0310 	orr.w	r3, r3, #16
 80053a6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80053b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053b2:	e779      	b.n	80052a8 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 80053b4:	2001      	movs	r0, #1
}
 80053b6:	b002      	add	sp, #8
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80053ba:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ContextQueue = 0U;
 80053bc:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80053c0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80053c4:	f005 fd12 	bl	800adec <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	688a      	ldr	r2, [r1, #8]
 80053cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80053d0:	d016      	beq.n	8005400 <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d2:	462b      	mov	r3, r5
 80053d4:	e75d      	b.n	8005292 <HAL_ADC_Init+0x22>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f47f af66 	bne.w	80052a8 <HAL_ADC_Init+0x38>
 80053dc:	e771      	b.n	80052c2 <HAL_ADC_Init+0x52>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053de:	4d69      	ldr	r5, [pc, #420]	; (8005584 <HAL_ADC_Init+0x314>)
 80053e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	f002 0203 	and.w	r2, r2, #3
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	d045      	beq.n	800547a <HAL_ADC_Init+0x20a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80053ee:	6882      	ldr	r2, [r0, #8]
 80053f0:	f002 0203 	and.w	r2, r2, #3
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	d184      	bne.n	8005302 <HAL_ADC_Init+0x92>
 80053f8:	6802      	ldr	r2, [r0, #0]
 80053fa:	07d2      	lsls	r2, r2, #31
 80053fc:	d487      	bmi.n	800530e <HAL_ADC_Init+0x9e>
 80053fe:	e780      	b.n	8005302 <HAL_ADC_Init+0x92>
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005400:	6888      	ldr	r0, [r1, #8]
 8005402:	f000 0003 	and.w	r0, r0, #3
 8005406:	2801      	cmp	r0, #1
 8005408:	d062      	beq.n	80054d0 <HAL_ADC_Init+0x260>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800540a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800540c:	06dd      	lsls	r5, r3, #27
 800540e:	d473      	bmi.n	80054f8 <HAL_ADC_Init+0x288>
          ADC_STATE_CLR_SET(hadc->State,
 8005410:	6c62      	ldr	r2, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005412:	4b5d      	ldr	r3, [pc, #372]	; (8005588 <HAL_ADC_Init+0x318>)
 8005414:	485d      	ldr	r0, [pc, #372]	; (800558c <HAL_ADC_Init+0x31c>)
 8005416:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005418:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800541c:	f022 0202 	bic.w	r2, r2, #2
 8005420:	f042 0202 	orr.w	r2, r2, #2
 8005424:	6462      	str	r2, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005426:	688a      	ldr	r2, [r1, #8]
 8005428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800542c:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800542e:	fba0 2303 	umull	r2, r3, r0, r3
 8005432:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005434:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005436:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800543a:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800543c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005440:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005442:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f43f af23 	beq.w	8005292 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800544c:	9b01      	ldr	r3, [sp, #4]
 800544e:	3b01      	subs	r3, #1
 8005450:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f9      	bne.n	800544c <HAL_ADC_Init+0x1dc>
 8005458:	e71b      	b.n	8005292 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800545a:	bb70      	cbnz	r0, 80054ba <HAL_ADC_Init+0x24a>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800545c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800545e:	3a01      	subs	r2, #1
 8005460:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005468:	e762      	b.n	8005330 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800546a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800546c:	6a23      	ldr	r3, [r4, #32]
 800546e:	f022 020f 	bic.w	r2, r2, #15
 8005472:	3b01      	subs	r3, #1
 8005474:	4313      	orrs	r3, r2
 8005476:	630b      	str	r3, [r1, #48]	; 0x30
 8005478:	e787      	b.n	800538a <HAL_ADC_Init+0x11a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800547a:	680a      	ldr	r2, [r1, #0]
 800547c:	07d6      	lsls	r6, r2, #31
 800547e:	f53f af46 	bmi.w	800530e <HAL_ADC_Init+0x9e>
 8005482:	e7b4      	b.n	80053ee <HAL_ADC_Init+0x17e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005484:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8005488:	d038      	beq.n	80054fc <HAL_ADC_Init+0x28c>
 800548a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800548e:	d051      	beq.n	8005534 <HAL_ADC_Init+0x2c4>
 8005490:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8005494:	d051      	beq.n	800553a <HAL_ADC_Init+0x2ca>
 8005496:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 800549a:	d051      	beq.n	8005540 <HAL_ADC_Init+0x2d0>
 800549c:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80054a0:	d051      	beq.n	8005546 <HAL_ADC_Init+0x2d6>
 80054a2:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80054a6:	bf08      	it	eq
 80054a8:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80054ac:	e74e      	b.n	800534c <HAL_ADC_Init+0xdc>
 80054ae:	4830      	ldr	r0, [pc, #192]	; (8005570 <HAL_ADC_Init+0x300>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054b0:	4d34      	ldr	r5, [pc, #208]	; (8005584 <HAL_ADC_Init+0x314>)
 80054b2:	e797      	b.n	80053e4 <HAL_ADC_Init+0x174>
 80054b4:	4830      	ldr	r0, [pc, #192]	; (8005578 <HAL_ADC_Init+0x308>)
 80054b6:	4d31      	ldr	r5, [pc, #196]	; (800557c <HAL_ADC_Init+0x30c>)
 80054b8:	e794      	b.n	80053e4 <HAL_ADC_Init+0x174>
        ADC_STATE_CLR_SET(hadc->State,
 80054ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80054bc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80054c0:	f042 0220 	orr.w	r2, r2, #32
 80054c4:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	64a2      	str	r2, [r4, #72]	; 0x48
 80054ce:	e72f      	b.n	8005330 <HAL_ADC_Init+0xc0>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80054d0:	680b      	ldr	r3, [r1, #0]
 80054d2:	f013 0301 	ands.w	r3, r3, #1
 80054d6:	d028      	beq.n	800552a <HAL_ADC_Init+0x2ba>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80054d8:	688b      	ldr	r3, [r1, #8]
 80054da:	f003 030d 	and.w	r3, r3, #13
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d00f      	beq.n	8005502 <HAL_ADC_Init+0x292>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054e4:	f043 0310 	orr.w	r3, r3, #16
 80054e8:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80054f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
      
      return HAL_ERROR;
 80054f4:	4603      	mov	r3, r0
 80054f6:	e6cc      	b.n	8005292 <HAL_ADC_Init+0x22>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80054f8:	4613      	mov	r3, r2
 80054fa:	e6ca      	b.n	8005292 <HAL_ADC_Init+0x22>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80054fc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005500:	e724      	b.n	800534c <HAL_ADC_Init+0xdc>
      __HAL_ADC_DISABLE(hadc);
 8005502:	688b      	ldr	r3, [r1, #8]
 8005504:	2203      	movs	r2, #3
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	608b      	str	r3, [r1, #8]
 800550c:	600a      	str	r2, [r1, #0]
    tickstart = HAL_GetTick();
 800550e:	f7ff fe6b 	bl	80051e8 <HAL_GetTick>
 8005512:	4605      	mov	r5, r0
 8005514:	e004      	b.n	8005520 <HAL_ADC_Init+0x2b0>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005516:	f7ff fe67 	bl	80051e8 <HAL_GetTick>
 800551a:	1b40      	subs	r0, r0, r5
 800551c:	2802      	cmp	r0, #2
 800551e:	d815      	bhi.n	800554c <HAL_ADC_Init+0x2dc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	688b      	ldr	r3, [r1, #8]
 8005524:	f013 0301 	ands.w	r3, r3, #1
 8005528:	d1f5      	bne.n	8005516 <HAL_ADC_Init+0x2a6>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800552a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800552c:	06d0      	lsls	r0, r2, #27
 800552e:	f53f aeb0 	bmi.w	8005292 <HAL_ADC_Init+0x22>
 8005532:	e76d      	b.n	8005410 <HAL_ADC_Init+0x1a0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005534:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8005538:	e708      	b.n	800534c <HAL_ADC_Init+0xdc>
 800553a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553e:	e705      	b.n	800534c <HAL_ADC_Init+0xdc>
 8005540:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8005544:	e702      	b.n	800534c <HAL_ADC_Init+0xdc>
 8005546:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800554a:	e6ff      	b.n	800534c <HAL_ADC_Init+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800554c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	f043 0310 	orr.w	r3, r3, #16
 8005554:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800555e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005560:	2301      	movs	r3, #1
 8005562:	e696      	b.n	8005292 <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005564:	680a      	ldr	r2, [r1, #0]
 8005566:	07d2      	lsls	r2, r2, #31
 8005568:	f53f aed1 	bmi.w	800530e <HAL_ADC_Init+0x9e>
 800556c:	e6c8      	b.n	8005300 <HAL_ADC_Init+0x90>
 800556e:	bf00      	nop
 8005570:	50000100 	.word	0x50000100
 8005574:	50000400 	.word	0x50000400
 8005578:	50000500 	.word	0x50000500
 800557c:	50000700 	.word	0x50000700
 8005580:	fff0c007 	.word	0xfff0c007
 8005584:	50000300 	.word	0x50000300
 8005588:	20000004 	.word	0x20000004
 800558c:	431bde83 	.word	0x431bde83

08005590 <HAL_ADC_DeInit>:
  if(hadc == NULL)
 8005590:	2800      	cmp	r0, #0
 8005592:	f000 80b7 	beq.w	8005704 <HAL_ADC_DeInit+0x174>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005596:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800559a:	f042 0202 	orr.w	r2, r2, #2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800559e:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80055a0:	6442      	str	r2, [r0, #68]	; 0x44
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	f012 0f0c 	tst.w	r2, #12
 80055a8:	4604      	mov	r4, r0
 80055aa:	d020      	beq.n	80055ee <HAL_ADC_DeInit+0x5e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	0191      	lsls	r1, r2, #6
 80055b0:	d506      	bpl.n	80055c0 <HAL_ADC_DeInit+0x30>
 80055b2:	69c2      	ldr	r2, [r0, #28]
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	d103      	bne.n	80055c0 <HAL_ADC_DeInit+0x30>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80055b8:	6982      	ldr	r2, [r0, #24]
 80055ba:	2a01      	cmp	r2, #1
 80055bc:	f000 8103 	beq.w	80057c6 <HAL_ADC_DeInit+0x236>
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	0750      	lsls	r0, r2, #29
 80055c4:	f100 80a0 	bmi.w	8005708 <HAL_ADC_DeInit+0x178>

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	0715      	lsls	r5, r2, #28
 80055cc:	f100 80a5 	bmi.w	800571a <HAL_ADC_DeInit+0x18a>

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80055d0:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80055d2:	f7ff fe09 	bl	80051e8 <HAL_GetTick>
 80055d6:	4606      	mov	r6, r0
 80055d8:	e005      	b.n	80055e6 <HAL_ADC_DeInit+0x56>
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80055da:	f7ff fe05 	bl	80051e8 <HAL_GetTick>
 80055de:	1b80      	subs	r0, r0, r6
 80055e0:	280b      	cmp	r0, #11
 80055e2:	f200 80b6 	bhi.w	8005752 <HAL_ADC_DeInit+0x1c2>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	422a      	tst	r2, r5
 80055ec:	d1f5      	bne.n	80055da <HAL_ADC_DeInit+0x4a>
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80055f4:	60da      	str	r2, [r3, #12]
  if (ADC_IS_ENABLE(hadc) != RESET )
 80055f6:	6898      	ldr	r0, [r3, #8]
 80055f8:	f000 0003 	and.w	r0, r0, #3
 80055fc:	2801      	cmp	r0, #1
 80055fe:	f000 80c9 	beq.w	8005794 <HAL_ADC_DeInit+0x204>
      hadc->State = HAL_ADC_STATE_READY;
 8005602:	2201      	movs	r2, #1
 8005604:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005606:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005608:	497e      	ldr	r1, [pc, #504]	; (8005804 <HAL_ADC_DeInit+0x274>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 800560a:	4f7f      	ldr	r7, [pc, #508]	; (8005808 <HAL_ADC_DeInit+0x278>)
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 800560c:	487f      	ldr	r0, [pc, #508]	; (800580c <HAL_ADC_DeInit+0x27c>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 800560e:	4e80      	ldr	r6, [pc, #512]	; (8005810 <HAL_ADC_DeInit+0x280>)
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005610:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005614:	f022 0207 	bic.w	r2, r2, #7
 8005618:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800561a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800561e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 8005620:	689d      	ldr	r5, [r3, #8]
 8005622:	f025 45e0 	bic.w	r5, r5, #1879048192	; 0x70000000
 8005626:	609d      	str	r5, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 8005628:	689d      	ldr	r5, [r3, #8]
 800562a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800562e:	609d      	str	r5, [r3, #8]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	4011      	ands	r1, r2
 8005634:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005636:	695a      	ldr	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005638:	4976      	ldr	r1, [pc, #472]	; (8005814 <HAL_ADC_DeInit+0x284>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 800563a:	403a      	ands	r2, r7
 800563c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8005644:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8005646:	6a1d      	ldr	r5, [r3, #32]
 8005648:	f005 25f0 	and.w	r5, r5, #4026593280	; 0xf000f000
 800564c:	621d      	str	r5, [r3, #32]
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 800564e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005650:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005654:	625d      	str	r5, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8005656:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005658:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 800565c:	629d      	str	r5, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 800565e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005660:	4010      	ands	r0, r2
 8005662:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005664:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005666:	486c      	ldr	r0, [pc, #432]	; (8005818 <HAL_ADC_DeInit+0x288>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005668:	4035      	ands	r5, r6
 800566a:	635d      	str	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 800566c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566e:	4032      	ands	r2, r6
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8005672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005674:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8005678:	f022 0207 	bic.w	r2, r2, #7
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800567e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005680:	400a      	ands	r2, r1
 8005682:	661a      	str	r2, [r3, #96]	; 0x60
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8005684:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005686:	400a      	ands	r2, r1
 8005688:	665a      	str	r2, [r3, #100]	; 0x64
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 800568a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800568c:	400a      	ands	r2, r1
 800568e:	669a      	str	r2, [r3, #104]	; 0x68
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8005690:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005692:	4011      	ands	r1, r2
 8005694:	66d9      	str	r1, [r3, #108]	; 0x6c
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005696:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800569a:	4002      	ands	r2, r0
 800569c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80056a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80056a4:	4002      	ands	r2, r0
 80056a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80056aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80056ae:	4002      	ands	r2, r0
 80056b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80056b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80056bc:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 80056c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056c4:	d052      	beq.n	800576c <HAL_ADC_DeInit+0x1dc>
 80056c6:	4a55      	ldr	r2, [pc, #340]	; (800581c <HAL_ADC_DeInit+0x28c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d078      	beq.n	80057be <HAL_ADC_DeInit+0x22e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80056cc:	4954      	ldr	r1, [pc, #336]	; (8005820 <HAL_ADC_DeInit+0x290>)
 80056ce:	428b      	cmp	r3, r1
 80056d0:	d072      	beq.n	80057b8 <HAL_ADC_DeInit+0x228>
 80056d2:	4a54      	ldr	r2, [pc, #336]	; (8005824 <HAL_ADC_DeInit+0x294>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d070      	beq.n	80057ba <HAL_ADC_DeInit+0x22a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	f002 0203 	and.w	r2, r2, #3
 80056de:	2a01      	cmp	r2, #1
 80056e0:	f000 808a 	beq.w	80057f8 <HAL_ADC_DeInit+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056e4:	4850      	ldr	r0, [pc, #320]	; (8005828 <HAL_ADC_DeInit+0x298>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 80056e6:	6882      	ldr	r2, [r0, #8]
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_ADC_DeInit+0x29c>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	6083      	str	r3, [r0, #8]
    HAL_ADC_MspDeInit(hadc);
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff fd84 	bl	80051fc <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80056f4:	2300      	movs	r3, #0
 80056f6:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET;
 80056f8:	4618      	mov	r0, r3
 80056fa:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80056fc:	2300      	movs	r3, #0
 80056fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 8005704:	2001      	movs	r0, #1
}
 8005706:	4770      	bx	lr
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005708:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800570a:	0792      	lsls	r2, r2, #30
 800570c:	f53f af5c 	bmi.w	80055c8 <HAL_ADC_DeInit+0x38>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	f042 0210 	orr.w	r2, r2, #16
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	e756      	b.n	80055c8 <HAL_ADC_DeInit+0x38>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800571a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800571c:	0790      	lsls	r0, r2, #30
 800571e:	f53f af57 	bmi.w	80055d0 <HAL_ADC_DeInit+0x40>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	f042 0220 	orr.w	r2, r2, #32
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	e751      	b.n	80055d0 <HAL_ADC_DeInit+0x40>
      __HAL_ADC_DISABLE(hadc);
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	2103      	movs	r1, #3
 8005730:	f042 0202 	orr.w	r2, r2, #2
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005738:	f7ff fd56 	bl	80051e8 <HAL_GetTick>
 800573c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	07d2      	lsls	r2, r2, #31
 8005744:	f57f af5d 	bpl.w	8005602 <HAL_ADC_DeInit+0x72>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005748:	f7ff fd4e 	bl	80051e8 <HAL_GetTick>
 800574c:	1b40      	subs	r0, r0, r5
 800574e:	2802      	cmp	r0, #2
 8005750:	d9f5      	bls.n	800573e <HAL_ADC_DeInit+0x1ae>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005752:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005754:	f043 0310 	orr.w	r3, r3, #16
 8005758:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 8005762:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8005764:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005766:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	492b      	ldr	r1, [pc, #172]	; (800581c <HAL_ADC_DeInit+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800576e:	4830      	ldr	r0, [pc, #192]	; (8005830 <HAL_ADC_DeInit+0x2a0>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	f002 0203 	and.w	r2, r2, #3
 8005776:	2a01      	cmp	r2, #1
 8005778:	d008      	beq.n	800578c <HAL_ADC_DeInit+0x1fc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 800577a:	688b      	ldr	r3, [r1, #8]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d1b0      	bne.n	80056e6 <HAL_ADC_DeInit+0x156>
 8005784:	680b      	ldr	r3, [r1, #0]
 8005786:	07dd      	lsls	r5, r3, #31
 8005788:	d4b1      	bmi.n	80056ee <HAL_ADC_DeInit+0x15e>
 800578a:	e7ac      	b.n	80056e6 <HAL_ADC_DeInit+0x156>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	07de      	lsls	r6, r3, #31
 8005790:	d4ad      	bmi.n	80056ee <HAL_ADC_DeInit+0x15e>
 8005792:	e7f2      	b.n	800577a <HAL_ADC_DeInit+0x1ea>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	07d1      	lsls	r1, r2, #31
 8005798:	f57f af33 	bpl.w	8005602 <HAL_ADC_DeInit+0x72>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	f002 020d 	and.w	r2, r2, #13
 80057a2:	2a01      	cmp	r2, #1
 80057a4:	d0c2      	beq.n	800572c <HAL_ADC_DeInit+0x19c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057a8:	f043 0310 	orr.w	r3, r3, #16
 80057ac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80057b6:	e7a1      	b.n	80056fc <HAL_ADC_DeInit+0x16c>
 80057b8:	491a      	ldr	r1, [pc, #104]	; (8005824 <HAL_ADC_DeInit+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ba:	481b      	ldr	r0, [pc, #108]	; (8005828 <HAL_ADC_DeInit+0x298>)
 80057bc:	e7d8      	b.n	8005770 <HAL_ADC_DeInit+0x1e0>
 80057be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80057c2:	481b      	ldr	r0, [pc, #108]	; (8005830 <HAL_ADC_DeInit+0x2a0>)
 80057c4:	e7d4      	b.n	8005770 <HAL_ADC_DeInit+0x1e0>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	0652      	lsls	r2, r2, #25
 80057ca:	d406      	bmi.n	80057da <HAL_ADC_DeInit+0x24a>
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_ADC_DeInit+0x2a4>)
 80057ce:	e001      	b.n	80057d4 <HAL_ADC_DeInit+0x244>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80057d0:	3a01      	subs	r2, #1
 80057d2:	d0be      	beq.n	8005752 <HAL_ADC_DeInit+0x1c2>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80057d4:	6819      	ldr	r1, [r3, #0]
 80057d6:	064f      	lsls	r7, r1, #25
 80057d8:	d5fa      	bpl.n	80057d0 <HAL_ADC_DeInit+0x240>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80057da:	2240      	movs	r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	0756      	lsls	r6, r2, #29
 80057e2:	d502      	bpl.n	80057ea <HAL_ADC_DeInit+0x25a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80057e4:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80057e6:	0791      	lsls	r1, r2, #30
 80057e8:	d501      	bpl.n	80057ee <HAL_ADC_DeInit+0x25e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80057ea:	2504      	movs	r5, #4
 80057ec:	e6f1      	b.n	80055d2 <HAL_ADC_DeInit+0x42>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	f042 0210 	orr.w	r2, r2, #16
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	e7f8      	b.n	80057ea <HAL_ADC_DeInit+0x25a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	07df      	lsls	r7, r3, #31
 80057fc:	f53f af77 	bmi.w	80056ee <HAL_ADC_DeInit+0x15e>
 8005800:	e770      	b.n	80056e4 <HAL_ADC_DeInit+0x154>
 8005802:	bf00      	nop
 8005804:	80008004 	.word	0x80008004
 8005808:	c0000007 	.word	0xc0000007
 800580c:	e0820830 	.word	0xe0820830
 8005810:	e0820820 	.word	0xe0820820
 8005814:	03fff000 	.word	0x03fff000
 8005818:	fff80000 	.word	0xfff80000
 800581c:	50000100 	.word	0x50000100
 8005820:	50000400 	.word	0x50000400
 8005824:	50000500 	.word	0x50000500
 8005828:	50000700 	.word	0x50000700
 800582c:	fe3c10e0 	.word	0xfe3c10e0
 8005830:	50000300 	.word	0x50000300
 8005834:	00099400 	.word	0x00099400

08005838 <HAL_ADC_Start_DMA>:
{
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800583c:	6805      	ldr	r5, [r0, #0]
 800583e:	68ac      	ldr	r4, [r5, #8]
 8005840:	0767      	lsls	r7, r4, #29
 8005842:	d43b      	bmi.n	80058bc <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 8005844:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005848:	2b01      	cmp	r3, #1
 800584a:	d037      	beq.n	80058bc <HAL_ADC_Start_DMA+0x84>
 800584c:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800584e:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 8005852:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005856:	d013      	beq.n	8005880 <HAL_ADC_Start_DMA+0x48>
 8005858:	4b57      	ldr	r3, [pc, #348]	; (80059b8 <HAL_ADC_Start_DMA+0x180>)
 800585a:	429d      	cmp	r5, r3
 800585c:	d010      	beq.n	8005880 <HAL_ADC_Start_DMA+0x48>
 800585e:	4b57      	ldr	r3, [pc, #348]	; (80059bc <HAL_ADC_Start_DMA+0x184>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f013 0f1f 	tst.w	r3, #31
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	4690      	mov	r8, r2
 800586e:	460f      	mov	r7, r1
 8005870:	4604      	mov	r4, r0
 8005872:	b98b      	cbnz	r3, 8005898 <HAL_ADC_Start_DMA+0x60>
        __HAL_UNLOCK(hadc);
 8005874:	2300      	movs	r3, #0
 8005876:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800587a:	2001      	movs	r0, #1
}
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005880:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <HAL_ADC_Start_DMA+0x188>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f013 0f1f 	tst.w	r3, #31
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	4690      	mov	r8, r2
 8005890:	460f      	mov	r7, r1
 8005892:	4604      	mov	r4, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ed      	beq.n	8005874 <HAL_ADC_Start_DMA+0x3c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005898:	68ab      	ldr	r3, [r5, #8]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d00f      	beq.n	80058c2 <HAL_ADC_Start_DMA+0x8a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80058a2:	68aa      	ldr	r2, [r5, #8]
 80058a4:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_ADC_Start_DMA+0x18c>)
 80058a6:	421a      	tst	r2, r3
 80058a8:	d05a      	beq.n	8005960 <HAL_ADC_Start_DMA+0x128>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058ac:	f043 0310 	orr.w	r3, r3, #16
 80058b0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80058ba:	e7db      	b.n	8005874 <HAL_ADC_Start_DMA+0x3c>
    tmp_hal_status = HAL_BUSY;
 80058bc:	2002      	movs	r0, #2
}
 80058be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	07de      	lsls	r6, r3, #31
 80058c6:	d5ec      	bpl.n	80058a2 <HAL_ADC_Start_DMA+0x6a>
        ADC_STATE_CLR_SET(hadc->State,
 80058c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80058d6:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 80058da:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80058dc:	d061      	beq.n	80059a2 <HAL_ADC_Start_DMA+0x16a>
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_ADC_Start_DMA+0x180>)
 80058e0:	429d      	cmp	r5, r3
 80058e2:	d04f      	beq.n	8005984 <HAL_ADC_Start_DMA+0x14c>
 80058e4:	4b35      	ldr	r3, [pc, #212]	; (80059bc <HAL_ADC_Start_DMA+0x184>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	06da      	lsls	r2, r3, #27
 80058ea:	d05c      	beq.n	80059a6 <HAL_ADC_Start_DMA+0x16e>
 80058ec:	4a36      	ldr	r2, [pc, #216]	; (80059c8 <HAL_ADC_Start_DMA+0x190>)
 80058ee:	4295      	cmp	r5, r2
 80058f0:	d059      	beq.n	80059a6 <HAL_ADC_Start_DMA+0x16e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f8:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80058fa:	68d3      	ldr	r3, [r2, #12]
 80058fc:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8005900:	b12b      	cbz	r3, 800590e <HAL_ADC_Start_DMA+0xd6>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800590c:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800590e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005910:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005912:	492e      	ldr	r1, [pc, #184]	; (80059cc <HAL_ADC_Start_DMA+0x194>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005914:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_ADC_Start_DMA+0x198>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005916:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800591a:	bf1c      	itt	ne
 800591c:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 800591e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005922:	64a3      	str	r3, [r4, #72]	; 0x48
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_ADC_Start_DMA+0x19c>)
        __HAL_UNLOCK(hadc);
 8005926:	2600      	movs	r6, #0
 8005928:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800592c:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005930:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005932:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005934:	602b      	str	r3, [r5, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005936:	686b      	ldr	r3, [r5, #4]
 8005938:	f043 0310 	orr.w	r3, r3, #16
 800593c:	606b      	str	r3, [r5, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800593e:	68e9      	ldr	r1, [r5, #12]
 8005940:	f041 0101 	orr.w	r1, r1, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005944:	4643      	mov	r3, r8
 8005946:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005948:	60e9      	str	r1, [r5, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800594a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800594e:	f000 fdb3 	bl	80064b8 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005952:	6822      	ldr	r2, [r4, #0]
 8005954:	6893      	ldr	r3, [r2, #8]
 8005956:	f043 0304 	orr.w	r3, r3, #4
      tmp_hal_status = ADC_Enable(hadc);
 800595a:	4630      	mov	r0, r6
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800595c:	6093      	str	r3, [r2, #8]
 800595e:	e78d      	b.n	800587c <HAL_ADC_Start_DMA+0x44>
    __HAL_ADC_ENABLE(hadc);
 8005960:	68ab      	ldr	r3, [r5, #8]
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8005968:	f7ff fc3e 	bl	80051e8 <HAL_GetTick>
 800596c:	4606      	mov	r6, r0
 800596e:	e004      	b.n	800597a <HAL_ADC_Start_DMA+0x142>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005970:	f7ff fc3a 	bl	80051e8 <HAL_GetTick>
 8005974:	1b80      	subs	r0, r0, r6
 8005976:	2802      	cmp	r0, #2
 8005978:	d897      	bhi.n	80058aa <HAL_ADC_Start_DMA+0x72>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	07d8      	lsls	r0, r3, #31
 8005980:	d5f6      	bpl.n	8005970 <HAL_ADC_Start_DMA+0x138>
 8005982:	e7a1      	b.n	80058c8 <HAL_ADC_Start_DMA+0x90>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005984:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	06d9      	lsls	r1, r3, #27
 800598c:	d00b      	beq.n	80059a6 <HAL_ADC_Start_DMA+0x16e>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800598e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005990:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005998:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800599a:	68d3      	ldr	r3, [r2, #12]
 800599c:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80059a0:	e7ae      	b.n	8005900 <HAL_ADC_Start_DMA+0xc8>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_ADC_Start_DMA+0x188>)
 80059a4:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059ac:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80059ae:	68eb      	ldr	r3, [r5, #12]
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	d5ac      	bpl.n	800590e <HAL_ADC_Start_DMA+0xd6>
 80059b4:	e7a5      	b.n	8005902 <HAL_ADC_Start_DMA+0xca>
 80059b6:	bf00      	nop
 80059b8:	50000100 	.word	0x50000100
 80059bc:	50000700 	.word	0x50000700
 80059c0:	50000300 	.word	0x50000300
 80059c4:	8000003f 	.word	0x8000003f
 80059c8:	50000400 	.word	0x50000400
 80059cc:	0800522d 	.word	0x0800522d
 80059d0:	0800520d 	.word	0x0800520d
 80059d4:	08005225 	.word	0x08005225

080059d8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80059d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059dc:	2b01      	cmp	r3, #1
{  
 80059de:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80059e0:	d04d      	beq.n	8005a7e <HAL_ADC_Stop_DMA+0xa6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80059e2:	6803      	ldr	r3, [r0, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80059e6:	2101      	movs	r1, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80059e8:	f012 0f0c 	tst.w	r2, #12
 80059ec:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80059ee:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80059f2:	d024      	beq.n	8005a3e <HAL_ADC_Stop_DMA+0x66>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	0195      	lsls	r5, r2, #6
 80059f8:	d506      	bpl.n	8005a08 <HAL_ADC_Stop_DMA+0x30>
 80059fa:	69c2      	ldr	r2, [r0, #28]
 80059fc:	428a      	cmp	r2, r1
 80059fe:	d103      	bne.n	8005a08 <HAL_ADC_Stop_DMA+0x30>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005a00:	6982      	ldr	r2, [r0, #24]
 8005a02:	428a      	cmp	r2, r1
 8005a04:	f000 8081 	beq.w	8005b0a <HAL_ADC_Stop_DMA+0x132>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	0750      	lsls	r0, r2, #29
 8005a0c:	d506      	bpl.n	8005a1c <HAL_ADC_Stop_DMA+0x44>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005a0e:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005a10:	0792      	lsls	r2, r2, #30
 8005a12:	d403      	bmi.n	8005a1c <HAL_ADC_Stop_DMA+0x44>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	f042 0210 	orr.w	r2, r2, #16
 8005a1a:	609a      	str	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	0716      	lsls	r6, r2, #28
 8005a20:	d430      	bmi.n	8005a84 <HAL_ADC_Stop_DMA+0xac>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005a22:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8005a24:	f7ff fbe0 	bl	80051e8 <HAL_GetTick>
 8005a28:	4606      	mov	r6, r0
 8005a2a:	e004      	b.n	8005a36 <HAL_ADC_Stop_DMA+0x5e>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a2c:	f7ff fbdc 	bl	80051e8 <HAL_GetTick>
 8005a30:	1b80      	subs	r0, r0, r6
 8005a32:	280b      	cmp	r0, #11
 8005a34:	d85f      	bhi.n	8005af6 <HAL_ADC_Stop_DMA+0x11e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	422a      	tst	r2, r5
 8005a3c:	d1f6      	bne.n	8005a2c <HAL_ADC_Stop_DMA+0x54>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005a3e:	68da      	ldr	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005a40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	60da      	str	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005a48:	f000 fd76 	bl	8006538 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	bb08      	cbnz	r0, 8005a94 <HAL_ADC_Stop_DMA+0xbc>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	f022 0210 	bic.w	r2, r2, #16
 8005a58:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	f002 0203 	and.w	r2, r2, #3
 8005a60:	2a01      	cmp	r2, #1
 8005a62:	d063      	beq.n	8005b2c <HAL_ADC_Stop_DMA+0x154>
      ADC_STATE_CLR_SET(hadc->State,
 8005a64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005a74:	2300      	movs	r3, #0
 8005a76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8005a7e:	2502      	movs	r5, #2
}
 8005a80:	4628      	mov	r0, r5
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005a84:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005a86:	0795      	lsls	r5, r2, #30
 8005a88:	d4cb      	bmi.n	8005a22 <HAL_ADC_Stop_DMA+0x4a>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	f042 0220 	orr.w	r2, r2, #32
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	e7c6      	b.n	8005a22 <HAL_ADC_Stop_DMA+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005a94:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a96:	6823      	ldr	r3, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9c:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	f022 0210 	bic.w	r2, r2, #16
 8005aa4:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	f002 0203 	and.w	r2, r2, #3
 8005aac:	2a01      	cmp	r2, #1
 8005aae:	d1e1      	bne.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d5de      	bpl.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	f002 020d 	and.w	r2, r2, #13
 8005abc:	2a01      	cmp	r2, #1
 8005abe:	d047      	beq.n	8005b50 <HAL_ADC_Stop_DMA+0x178>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ac2:	f043 0310 	orr.w	r3, r3, #16
 8005ac6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ad0:	e7d0      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
      __HAL_ADC_DISABLE(hadc);
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	2103      	movs	r1, #3
 8005ad6:	f042 0202 	orr.w	r2, r2, #2
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005ade:	f7ff fb83 	bl	80051e8 <HAL_GetTick>
 8005ae2:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	07d9      	lsls	r1, r3, #31
 8005aea:	d5bb      	bpl.n	8005a64 <HAL_ADC_Stop_DMA+0x8c>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005aec:	f7ff fb7c 	bl	80051e8 <HAL_GetTick>
 8005af0:	1b80      	subs	r0, r0, r6
 8005af2:	2802      	cmp	r0, #2
 8005af4:	d9f6      	bls.n	8005ae4 <HAL_ADC_Stop_DMA+0x10c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005af8:	f043 0310 	orr.w	r3, r3, #16
 8005afc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b06:	2501      	movs	r5, #1
 8005b08:	e7b4      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	0650      	lsls	r0, r2, #25
 8005b0e:	d406      	bmi.n	8005b1e <HAL_ADC_Stop_DMA+0x146>
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_ADC_Stop_DMA+0x1b0>)
 8005b12:	e001      	b.n	8005b18 <HAL_ADC_Stop_DMA+0x140>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005b14:	3a01      	subs	r2, #1
 8005b16:	d0ee      	beq.n	8005af6 <HAL_ADC_Stop_DMA+0x11e>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	0649      	lsls	r1, r1, #25
 8005b1c:	d5fa      	bpl.n	8005b14 <HAL_ADC_Stop_DMA+0x13c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b1e:	2240      	movs	r2, #64	; 0x40
 8005b20:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	0752      	lsls	r2, r2, #29
 8005b26:	d427      	bmi.n	8005b78 <HAL_ADC_Stop_DMA+0x1a0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005b28:	2504      	movs	r5, #4
 8005b2a:	e77b      	b.n	8005a24 <HAL_ADC_Stop_DMA+0x4c>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005b2c:	6819      	ldr	r1, [r3, #0]
 8005b2e:	07c8      	lsls	r0, r1, #31
 8005b30:	d598      	bpl.n	8005a64 <HAL_ADC_Stop_DMA+0x8c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	f001 010d 	and.w	r1, r1, #13
 8005b38:	2901      	cmp	r1, #1
 8005b3a:	d0ca      	beq.n	8005ad2 <HAL_ADC_Stop_DMA+0xfa>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b3e:	f043 0310 	orr.w	r3, r3, #16
 8005b42:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b46:	f043 0301 	orr.w	r3, r3, #1
      return HAL_ERROR;
 8005b4a:	4615      	mov	r5, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b4e:	e791      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
      __HAL_ADC_DISABLE(hadc);
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	2103      	movs	r1, #3
 8005b54:	f042 0202 	orr.w	r2, r2, #2
 8005b58:	609a      	str	r2, [r3, #8]
 8005b5a:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005b5c:	f7ff fb44 	bl	80051e8 <HAL_GetTick>
 8005b60:	4606      	mov	r6, r0
 8005b62:	e004      	b.n	8005b6e <HAL_ADC_Stop_DMA+0x196>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b64:	f7ff fb40 	bl	80051e8 <HAL_GetTick>
 8005b68:	1b80      	subs	r0, r0, r6
 8005b6a:	2802      	cmp	r0, #2
 8005b6c:	d8a8      	bhi.n	8005ac0 <HAL_ADC_Stop_DMA+0xe8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d4f6      	bmi.n	8005b64 <HAL_ADC_Stop_DMA+0x18c>
 8005b76:	e77d      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x9c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005b78:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b7a:	0791      	lsls	r1, r2, #30
 8005b7c:	d4d4      	bmi.n	8005b28 <HAL_ADC_Stop_DMA+0x150>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	f042 0210 	orr.w	r2, r2, #16
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	e7cf      	b.n	8005b28 <HAL_ADC_Stop_DMA+0x150>
 8005b88:	00099400 	.word	0x00099400

08005b8c <HAL_ADCEx_Calibration_Start>:
  __HAL_LOCK(hadc);
 8005b8c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d044      	beq.n	8005c1e <HAL_ADCEx_Calibration_Start+0x92>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005b94:	6803      	ldr	r3, [r0, #0]
{
 8005b96:	b570      	push	{r4, r5, r6, lr}
 8005b98:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005b9a:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 8005b9c:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005b9e:	f000 0003 	and.w	r0, r0, #3
 8005ba2:	4290      	cmp	r0, r2
 8005ba4:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8005ba6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005baa:	d027      	beq.n	8005bfc <HAL_ADCEx_Calibration_Start+0x70>
    hadc->State = HAL_ADC_STATE_READY;
 8005bac:	2201      	movs	r2, #1
 8005bae:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005bb0:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bb2:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005bb4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005bb8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bba:	d103      	bne.n	8005bc4 <HAL_ADCEx_Calibration_Start+0x38>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005bca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005bcc:	f7ff fb0c 	bl	80051e8 <HAL_GetTick>
 8005bd0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005bd2:	e004      	b.n	8005bde <HAL_ADCEx_Calibration_Start+0x52>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005bd4:	f7ff fb08 	bl	80051e8 <HAL_GetTick>
 8005bd8:	1b40      	subs	r0, r0, r5
 8005bda:	280a      	cmp	r0, #10
 8005bdc:	d821      	bhi.n	8005c22 <HAL_ADCEx_Calibration_Start+0x96>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dbf6      	blt.n	8005bd4 <HAL_ADCEx_Calibration_Start+0x48>
    ADC_STATE_CLR_SET(hadc->State,
 8005be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	6463      	str	r3, [r4, #68]	; 0x44
  tmp_hal_status = ADC_Disable(hadc);
 8005bf2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	07d1      	lsls	r1, r2, #31
 8005c00:	d5d4      	bpl.n	8005bac <HAL_ADCEx_Calibration_Start+0x20>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	f002 020d 	and.w	r2, r2, #13
 8005c08:	2a01      	cmp	r2, #1
 8005c0a:	d015      	beq.n	8005c38 <HAL_ADCEx_Calibration_Start+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c0e:	f043 0310 	orr.w	r3, r3, #16
 8005c12:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005c1c:	e7ea      	b.n	8005bf4 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8005c1e:	2002      	movs	r0, #2
}
 8005c20:	4770      	bx	lr
        ADC_STATE_CLR_SET(hadc->State,
 8005c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c24:	f023 0312 	bic.w	r3, r3, #18
 8005c28:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8005c2c:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8005c2e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8005c30:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
}
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_DISABLE(hadc);
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	2103      	movs	r1, #3
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005c44:	f7ff fad0 	bl	80051e8 <HAL_GetTick>
 8005c48:	4606      	mov	r6, r0
 8005c4a:	e004      	b.n	8005c56 <HAL_ADCEx_Calibration_Start+0xca>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c4c:	f7ff facc 	bl	80051e8 <HAL_GetTick>
 8005c50:	1b80      	subs	r0, r0, r6
 8005c52:	2802      	cmp	r0, #2
 8005c54:	d804      	bhi.n	8005c60 <HAL_ADCEx_Calibration_Start+0xd4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	07d2      	lsls	r2, r2, #31
 8005c5c:	d4f6      	bmi.n	8005c4c <HAL_ADCEx_Calibration_Start+0xc0>
 8005c5e:	e7a5      	b.n	8005bac <HAL_ADCEx_Calibration_Start+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c62:	f043 0310 	orr.w	r3, r3, #16
 8005c66:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	64a3      	str	r3, [r4, #72]	; 0x48
    tmp_hal_status = HAL_ERROR;
 8005c70:	2001      	movs	r0, #1
 8005c72:	e7bf      	b.n	8005bf4 <HAL_ADCEx_Calibration_Start+0x68>

08005c74 <HAL_ADC_ConfigChannel>:
{
 8005c74:	b4f0      	push	{r4, r5, r6, r7}
 8005c76:	4602      	mov	r2, r0
 8005c78:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8005c7a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8005c7e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8005c80:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8005c82:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005c84:	f000 80de 	beq.w	8005e44 <HAL_ADC_ConfigChannel+0x1d0>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c88:	6813      	ldr	r3, [r2, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005c8a:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c8c:	689d      	ldr	r5, [r3, #8]
  __HAL_LOCK(hadc);
 8005c8e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c90:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8005c92:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c96:	d437      	bmi.n	8005d08 <HAL_ADC_ConfigChannel+0x94>
 8005c98:	e9d1 5600 	ldrd	r5, r6, [r1]
 8005c9c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    if (sConfig->Rank < 5U)
 8005ca0:	2e04      	cmp	r6, #4
 8005ca2:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8005ca6:	f200 80a3 	bhi.w	8005df0 <HAL_ADC_ConfigChannel+0x17c>
      MODIFY_REG(hadc->Instance->SQR1,
 8005caa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8005cac:	271f      	movs	r7, #31
 8005cae:	4087      	lsls	r7, r0
 8005cb0:	ea26 0607 	bic.w	r6, r6, r7
 8005cb4:	fa05 f000 	lsl.w	r0, r5, r0
 8005cb8:	4330      	orrs	r0, r6
 8005cba:	6318      	str	r0, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005cbc:	6898      	ldr	r0, [r3, #8]
 8005cbe:	f010 0f0c 	tst.w	r0, #12
 8005cc2:	d14f      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cc4:	2d09      	cmp	r5, #9
 8005cc6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8005cca:	6888      	ldr	r0, [r1, #8]
 8005ccc:	f200 809f 	bhi.w	8005e0e <HAL_ADC_ConfigChannel+0x19a>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005cd0:	695f      	ldr	r7, [r3, #20]
 8005cd2:	f04f 0c07 	mov.w	ip, #7
 8005cd6:	fa0c fc06 	lsl.w	ip, ip, r6
 8005cda:	40b0      	lsls	r0, r6
 8005cdc:	ea27 060c 	bic.w	r6, r7, ip
 8005ce0:	4330      	orrs	r0, r6
 8005ce2:	6158      	str	r0, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005ce4:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8005ce8:	68d8      	ldr	r0, [r3, #12]
 8005cea:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005cee:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8005cf0:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005cf2:	fa07 f000 	lsl.w	r0, r7, r0
 8005cf6:	06af      	lsls	r7, r5, #26
    switch (sConfig->OffsetNumber)
 8005cf8:	2e03      	cmp	r6, #3
 8005cfa:	d80f      	bhi.n	8005d1c <HAL_ADC_ConfigChannel+0xa8>
 8005cfc:	e8df f016 	tbh	[pc, r6, lsl #1]
 8005d00:	00f200fd 	.word	0x00f200fd
 8005d04:	00dc00e7 	.word	0x00dc00e7
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d08:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d0a:	f043 0320 	orr.w	r3, r3, #32
 8005d0e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005d10:	2300      	movs	r3, #0
 8005d12:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8005d16:	b002      	add	sp, #8
 8005d18:	bcf0      	pop	{r4, r5, r6, r7}
 8005d1a:	4770      	bx	lr
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d1c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005d1e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d22:	42b8      	cmp	r0, r7
 8005d24:	d103      	bne.n	8005d2e <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005d26:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005d28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d2c:	6618      	str	r0, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d2e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005d30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d34:	42b8      	cmp	r0, r7
 8005d36:	d103      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0xcc>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005d38:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d3e:	6658      	str	r0, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d40:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005d42:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d46:	42b8      	cmp	r0, r7
 8005d48:	d103      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0xde>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005d4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005d4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d50:	6698      	str	r0, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d52:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005d54:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d58:	42b8      	cmp	r0, r7
 8005d5a:	d103      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005d5c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005d5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d62:	66d8      	str	r0, [r3, #108]	; 0x6c
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d64:	6898      	ldr	r0, [r3, #8]
 8005d66:	f000 0003 	and.w	r0, r0, #3
 8005d6a:	2801      	cmp	r0, #1
 8005d6c:	d06e      	beq.n	8005e4c <HAL_ADC_ConfigChannel+0x1d8>
 8005d6e:	2001      	movs	r0, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d70:	2c01      	cmp	r4, #1
 8005d72:	fa00 f005 	lsl.w	r0, r0, r5
 8005d76:	d06d      	beq.n	8005e54 <HAL_ADC_ConfigChannel+0x1e0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005d7c:	ea21 0000 	bic.w	r0, r1, r0
 8005d80:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d88:	d07d      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x212>
 8005d8a:	4c87      	ldr	r4, [pc, #540]	; (8005fa8 <HAL_ADC_ConfigChannel+0x334>)
 8005d8c:	4987      	ldr	r1, [pc, #540]	; (8005fac <HAL_ADC_ConfigChannel+0x338>)
 8005d8e:	4888      	ldr	r0, [pc, #544]	; (8005fb0 <HAL_ADC_ConfigChannel+0x33c>)
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	bf08      	it	eq
 8005d94:	4601      	moveq	r1, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d96:	2d10      	cmp	r5, #16
 8005d98:	d071      	beq.n	8005e7e <HAL_ADC_ConfigChannel+0x20a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d9a:	2d11      	cmp	r5, #17
 8005d9c:	d04e      	beq.n	8005e3c <HAL_ADC_ConfigChannel+0x1c8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005d9e:	2d12      	cmp	r5, #18
 8005da0:	d124      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x178>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005da2:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005da4:	0240      	lsls	r0, r0, #9
 8005da6:	d421      	bmi.n	8005dec <HAL_ADC_ConfigChannel+0x178>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dac:	f000 80e4 	beq.w	8005f78 <HAL_ADC_ConfigChannel+0x304>
 8005db0:	487d      	ldr	r0, [pc, #500]	; (8005fa8 <HAL_ADC_ConfigChannel+0x334>)
 8005db2:	4283      	cmp	r3, r0
 8005db4:	f000 80ec 	beq.w	8005f90 <HAL_ADC_ConfigChannel+0x31c>
 8005db8:	4c7e      	ldr	r4, [pc, #504]	; (8005fb4 <HAL_ADC_ConfigChannel+0x340>)
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	f000 80a8 	beq.w	8005f10 <HAL_ADC_ConfigChannel+0x29c>
 8005dc0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	f000 80a4 	beq.w	8005f12 <HAL_ADC_ConfigChannel+0x29e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005dca:	6898      	ldr	r0, [r3, #8]
 8005dcc:	f000 0003 	and.w	r0, r0, #3
 8005dd0:	2801      	cmp	r0, #1
 8005dd2:	f000 80e4 	beq.w	8005f9e <HAL_ADC_ConfigChannel+0x32a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005dd6:	2d10      	cmp	r5, #16
 8005dd8:	d008      	beq.n	8005dec <HAL_ADC_ConfigChannel+0x178>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005dda:	2d11      	cmp	r5, #17
 8005ddc:	f000 80ce 	beq.w	8005f7c <HAL_ADC_ConfigChannel+0x308>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005de0:	2d12      	cmp	r5, #18
 8005de2:	d103      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005de4:	688b      	ldr	r3, [r1, #8]
 8005de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dea:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dec:	2000      	movs	r0, #0
 8005dee:	e78f      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8005df0:	2e09      	cmp	r6, #9
 8005df2:	d918      	bls.n	8005e26 <HAL_ADC_ConfigChannel+0x1b2>
    else if (sConfig->Rank < 15U)
 8005df4:	2e0e      	cmp	r6, #14
 8005df6:	d854      	bhi.n	8005ea2 <HAL_ADC_ConfigChannel+0x22e>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005df8:	383c      	subs	r0, #60	; 0x3c
 8005dfa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005dfc:	271f      	movs	r7, #31
 8005dfe:	4087      	lsls	r7, r0
 8005e00:	ea26 0607 	bic.w	r6, r6, r7
 8005e04:	fa05 f000 	lsl.w	r0, r5, r0
 8005e08:	4330      	orrs	r0, r6
 8005e0a:	6398      	str	r0, [r3, #56]	; 0x38
 8005e0c:	e756      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005e0e:	3e1e      	subs	r6, #30
 8005e10:	699f      	ldr	r7, [r3, #24]
 8005e12:	f04f 0c07 	mov.w	ip, #7
 8005e16:	fa0c fc06 	lsl.w	ip, ip, r6
 8005e1a:	40b0      	lsls	r0, r6
 8005e1c:	ea27 060c 	bic.w	r6, r7, ip
 8005e20:	4330      	orrs	r0, r6
 8005e22:	6198      	str	r0, [r3, #24]
 8005e24:	e75e      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 8005e26:	381e      	subs	r0, #30
 8005e28:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005e2a:	271f      	movs	r7, #31
 8005e2c:	4087      	lsls	r7, r0
 8005e2e:	ea26 0607 	bic.w	r6, r6, r7
 8005e32:	fa05 f000 	lsl.w	r0, r5, r0
 8005e36:	4330      	orrs	r0, r6
 8005e38:	6358      	str	r0, [r3, #52]	; 0x34
 8005e3a:	e73f      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x48>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005e3c:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005e3e:	01c4      	lsls	r4, r0, #7
 8005e40:	d5b2      	bpl.n	8005da8 <HAL_ADC_ConfigChannel+0x134>
 8005e42:	e7d3      	b.n	8005dec <HAL_ADC_ConfigChannel+0x178>
  __HAL_LOCK(hadc);
 8005e44:	2002      	movs	r0, #2
}
 8005e46:	b002      	add	sp, #8
 8005e48:	bcf0      	pop	{r4, r5, r6, r7}
 8005e4a:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	07c7      	lsls	r7, r0, #31
 8005e50:	d58d      	bpl.n	8005d6e <HAL_ADC_ConfigChannel+0xfa>
 8005e52:	e7cb      	b.n	8005dec <HAL_ADC_ConfigChannel+0x178>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005e54:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8005e58:	688e      	ldr	r6, [r1, #8]
 8005e5a:	4320      	orrs	r0, r4
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e5c:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005e5e:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e62:	d912      	bls.n	8005e8a <HAL_ADC_ConfigChannel+0x216>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005e64:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005e68:	391b      	subs	r1, #27
 8005e6a:	6998      	ldr	r0, [r3, #24]
 8005e6c:	2407      	movs	r4, #7
 8005e6e:	408c      	lsls	r4, r1
 8005e70:	ea20 0004 	bic.w	r0, r0, r4
 8005e74:	fa06 f101 	lsl.w	r1, r6, r1
 8005e78:	4301      	orrs	r1, r0
 8005e7a:	6199      	str	r1, [r3, #24]
 8005e7c:	e782      	b.n	8005d84 <HAL_ADC_ConfigChannel+0x110>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005e7e:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e80:	0206      	lsls	r6, r0, #8
 8005e82:	d591      	bpl.n	8005da8 <HAL_ADC_ConfigChannel+0x134>
 8005e84:	e7b2      	b.n	8005dec <HAL_ADC_ConfigChannel+0x178>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e86:	494a      	ldr	r1, [pc, #296]	; (8005fb0 <HAL_ADC_ConfigChannel+0x33c>)
 8005e88:	e785      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x122>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005e8a:	1c68      	adds	r0, r5, #1
 8005e8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005e90:	6959      	ldr	r1, [r3, #20]
 8005e92:	2407      	movs	r4, #7
 8005e94:	4084      	lsls	r4, r0
 8005e96:	4086      	lsls	r6, r0
 8005e98:	ea21 0104 	bic.w	r1, r1, r4
 8005e9c:	4331      	orrs	r1, r6
 8005e9e:	6159      	str	r1, [r3, #20]
 8005ea0:	e770      	b.n	8005d84 <HAL_ADC_ConfigChannel+0x110>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005ea2:	385a      	subs	r0, #90	; 0x5a
 8005ea4:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8005ea6:	271f      	movs	r7, #31
 8005ea8:	4087      	lsls	r7, r0
 8005eaa:	ea26 0607 	bic.w	r6, r6, r7
 8005eae:	fa05 f000 	lsl.w	r0, r5, r0
 8005eb2:	4330      	orrs	r0, r6
 8005eb4:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005eb6:	e701      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005eb8:	f8d3 c06c 	ldr.w	ip, [r3, #108]	; 0x6c
 8005ebc:	4e3e      	ldr	r6, [pc, #248]	; (8005fb8 <HAL_ADC_ConfigChannel+0x344>)
 8005ebe:	ea0c 0606 	and.w	r6, ip, r6
 8005ec2:	4337      	orrs	r7, r6
 8005ec4:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005ec8:	4338      	orrs	r0, r7
 8005eca:	66d8      	str	r0, [r3, #108]	; 0x6c
      break;
 8005ecc:	e74a      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005ece:	f8d3 c068 	ldr.w	ip, [r3, #104]	; 0x68
 8005ed2:	4e39      	ldr	r6, [pc, #228]	; (8005fb8 <HAL_ADC_ConfigChannel+0x344>)
 8005ed4:	ea0c 0606 	and.w	r6, ip, r6
 8005ed8:	4337      	orrs	r7, r6
 8005eda:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005ede:	4338      	orrs	r0, r7
 8005ee0:	6698      	str	r0, [r3, #104]	; 0x68
      break;
 8005ee2:	e73f      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005ee4:	f8d3 c064 	ldr.w	ip, [r3, #100]	; 0x64
 8005ee8:	4e33      	ldr	r6, [pc, #204]	; (8005fb8 <HAL_ADC_ConfigChannel+0x344>)
 8005eea:	ea0c 0606 	and.w	r6, ip, r6
 8005eee:	4337      	orrs	r7, r6
 8005ef0:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005ef4:	4338      	orrs	r0, r7
 8005ef6:	6658      	str	r0, [r3, #100]	; 0x64
      break;
 8005ef8:	e734      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005efa:	f8d3 c060 	ldr.w	ip, [r3, #96]	; 0x60
 8005efe:	4e2e      	ldr	r6, [pc, #184]	; (8005fb8 <HAL_ADC_ConfigChannel+0x344>)
 8005f00:	ea0c 0606 	and.w	r6, ip, r6
 8005f04:	4337      	orrs	r7, r6
 8005f06:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8005f0a:	4338      	orrs	r0, r7
 8005f0c:	6618      	str	r0, [r3, #96]	; 0x60
      break;
 8005f0e:	e729      	b.n	8005d64 <HAL_ADC_ConfigChannel+0xf0>
 8005f10:	4c2a      	ldr	r4, [pc, #168]	; (8005fbc <HAL_ADC_ConfigChannel+0x348>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f12:	6898      	ldr	r0, [r3, #8]
 8005f14:	f000 0003 	and.w	r0, r0, #3
 8005f18:	2801      	cmp	r0, #1
 8005f1a:	d024      	beq.n	8005f66 <HAL_ADC_ConfigChannel+0x2f2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005f1c:	68a0      	ldr	r0, [r4, #8]
 8005f1e:	f000 0003 	and.w	r0, r0, #3
 8005f22:	2801      	cmp	r0, #1
 8005f24:	d037      	beq.n	8005f96 <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f26:	2d10      	cmp	r5, #16
 8005f28:	f47f af57 	bne.w	8005dda <HAL_ADC_ConfigChannel+0x166>
 8005f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f30:	f47f af5c 	bne.w	8005dec <HAL_ADC_ConfigChannel+0x178>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f34:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <HAL_ADC_ConfigChannel+0x34c>)
 8005f36:	4c23      	ldr	r4, [pc, #140]	; (8005fc4 <HAL_ADC_ConfigChannel+0x350>)
 8005f38:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005f3a:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f3c:	fba4 4303 	umull	r4, r3, r4, r3
 8005f40:	0c9b      	lsrs	r3, r3, #18
 8005f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f46:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005f48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005f4c:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f4e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f43f af4a 	beq.w	8005dec <HAL_ADC_ConfigChannel+0x178>
            wait_loop_index--;
 8005f58:	9b01      	ldr	r3, [sp, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x2e4>
 8005f64:	e742      	b.n	8005dec <HAL_ADC_ConfigChannel+0x178>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	07c6      	lsls	r6, r0, #31
 8005f6a:	d5d7      	bpl.n	8005f1c <HAL_ADC_ConfigChannel+0x2a8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f6c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005f6e:	f043 0320 	orr.w	r3, r3, #32
 8005f72:	6453      	str	r3, [r2, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8005f74:	2001      	movs	r0, #1
 8005f76:	e6cb      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x9c>
 8005f78:	4c0b      	ldr	r4, [pc, #44]	; (8005fa8 <HAL_ADC_ConfigChannel+0x334>)
 8005f7a:	e7ca      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x29e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f80:	f47f af34 	bne.w	8005dec <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005f84:	688b      	ldr	r3, [r1, #8]
 8005f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f8c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005f8e:	e6bf      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x9c>
 8005f90:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8005f94:	e7bd      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x29e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005f96:	6820      	ldr	r0, [r4, #0]
 8005f98:	07c0      	lsls	r0, r0, #31
 8005f9a:	d4e7      	bmi.n	8005f6c <HAL_ADC_ConfigChannel+0x2f8>
 8005f9c:	e7c3      	b.n	8005f26 <HAL_ADC_ConfigChannel+0x2b2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	07c7      	lsls	r7, r0, #31
 8005fa2:	d4e3      	bmi.n	8005f6c <HAL_ADC_ConfigChannel+0x2f8>
 8005fa4:	e717      	b.n	8005dd6 <HAL_ADC_ConfigChannel+0x162>
 8005fa6:	bf00      	nop
 8005fa8:	50000100 	.word	0x50000100
 8005fac:	50000700 	.word	0x50000700
 8005fb0:	50000300 	.word	0x50000300
 8005fb4:	50000400 	.word	0x50000400
 8005fb8:	83fff000 	.word	0x83fff000
 8005fbc:	50000500 	.word	0x50000500
 8005fc0:	20000004 	.word	0x20000004
 8005fc4:	431bde83 	.word	0x431bde83

08005fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fc8:	4a07      	ldr	r2, [pc, #28]	; (8005fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005fca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fcc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005fd0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005fd2:	0200      	lsls	r0, r0, #8
 8005fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005fe0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005fe2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <HAL_NVIC_SetPriority+0x64>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ff4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ff6:	f1c3 0507 	rsb	r5, r3, #7
 8005ffa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006000:	bf28      	it	cs
 8006002:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006004:	2c06      	cmp	r4, #6
 8006006:	d919      	bls.n	800603c <HAL_NVIC_SetPriority+0x50>
 8006008:	3b03      	subs	r3, #3
 800600a:	f04f 34ff 	mov.w	r4, #4294967295
 800600e:	409c      	lsls	r4, r3
 8006010:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	40aa      	lsls	r2, r5
 800601a:	ea21 0102 	bic.w	r1, r1, r2
 800601e:	fa01 f203 	lsl.w	r2, r1, r3
 8006022:	4322      	orrs	r2, r4
 8006024:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 8006026:	2800      	cmp	r0, #0
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	db0a      	blt.n	8006042 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800602c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006030:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006034:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006038:	bc30      	pop	{r4, r5}
 800603a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800603c:	2400      	movs	r4, #0
 800603e:	4623      	mov	r3, r4
 8006040:	e7e8      	b.n	8006014 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006042:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_NVIC_SetPriority+0x68>)
 8006044:	f000 000f 	and.w	r0, r0, #15
 8006048:	4403      	add	r3, r0
 800604a:	761a      	strb	r2, [r3, #24]
 800604c:	bc30      	pop	{r4, r5}
 800604e:	4770      	bx	lr
 8006050:	e000ed00 	.word	0xe000ed00
 8006054:	e000ecfc 	.word	0xe000ecfc

08006058 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006058:	f000 011f 	and.w	r1, r0, #31
 800605c:	2301      	movs	r3, #1
 800605e:	0940      	lsrs	r0, r0, #5
 8006060:	4a02      	ldr	r2, [pc, #8]	; (800606c <HAL_NVIC_EnableIRQ+0x14>)
 8006062:	408b      	lsls	r3, r1
 8006064:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	e000e100 	.word	0xe000e100

08006070 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006070:	0943      	lsrs	r3, r0, #5
 8006072:	3320      	adds	r3, #32
 8006074:	f000 001f 	and.w	r0, r0, #31
 8006078:	2201      	movs	r2, #1
 800607a:	4903      	ldr	r1, [pc, #12]	; (8006088 <HAL_NVIC_DisableIRQ+0x18>)
 800607c:	fa02 f000 	lsl.w	r0, r2, r0
 8006080:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000e100 	.word	0xe000e100

0800608c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800608c:	3801      	subs	r0, #1
 800608e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006092:	d20e      	bcs.n	80060b2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006094:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006096:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006098:	4c08      	ldr	r4, [pc, #32]	; (80060bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609c:	20f0      	movs	r0, #240	; 0xf0
 800609e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060a4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060aa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80060ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80060b2:	2001      	movs	r0, #1
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000e010 	.word	0xe000e010
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80060c0:	0943      	lsrs	r3, r0, #5
 80060c2:	3360      	adds	r3, #96	; 0x60
 80060c4:	f000 001f 	and.w	r0, r0, #31
 80060c8:	2201      	movs	r2, #1
 80060ca:	4903      	ldr	r1, [pc, #12]	; (80060d8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80060cc:	fa02 f000 	lsl.w	r0, r2, r0
 80060d0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	e000e100 	.word	0xe000e100

080060dc <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80060dc:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80060de:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80060e0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80060e2:	bf0c      	ite	eq
 80060e4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80060e8:	f023 0304 	bicne.w	r3, r3, #4
 80060ec:	6013      	str	r3, [r2, #0]
  }
}
 80060ee:	4770      	bx	lr
 80060f0:	e000e010 	.word	0xe000e010

080060f4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80060f4:	b188      	cbz	r0, 800611a <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80060f6:	7903      	ldrb	r3, [r0, #4]
{ 
 80060f8:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 80060fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060fe:	4604      	mov	r4, r0
 8006100:	b13b      	cbz	r3, 8006112 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006102:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006104:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006106:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006108:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800610a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800610c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800610e:	7122      	strb	r2, [r4, #4]
}
 8006110:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006112:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006114:	f005 fce4 	bl	800bae0 <HAL_DAC_MspInit>
 8006118:	e7f3      	b.n	8006102 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800611a:	2001      	movs	r0, #1
}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006120:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006122:	6800      	ldr	r0, [r0, #0]
{
 8006124:	b410      	push	{r4}
  __HAL_DAC_DISABLE(hdac, Channel);
 8006126:	6803      	ldr	r3, [r0, #0]
 8006128:	2401      	movs	r4, #1
 800612a:	fa04 f101 	lsl.w	r1, r4, r1
 800612e:	ea23 0301 	bic.w	r3, r3, r1
 8006132:	6003      	str	r3, [r0, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8006134:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006136:	7114      	strb	r4, [r2, #4]
}
 8006138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <HAL_DAC_Stop_DMA>:
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006140:	6803      	ldr	r3, [r0, #0]
{
 8006142:	b510      	push	{r4, lr}
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006144:	681a      	ldr	r2, [r3, #0]
{
 8006146:	4604      	mov	r4, r0
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006148:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800614c:	4088      	lsls	r0, r1
 800614e:	ea22 0200 	bic.w	r2, r2, r0
 8006152:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	2001      	movs	r0, #1
 8006158:	4088      	lsls	r0, r1
 800615a:	ea22 0200 	bic.w	r2, r2, r0
 800615e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006160:	b959      	cbnz	r1, 800617a <HAL_DAC_Stop_DMA+0x3a>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8006162:	68a0      	ldr	r0, [r4, #8]
 8006164:	f000 f9e8 	bl	8006538 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006170:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8006172:	b960      	cbnz	r0, 800618e <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006174:	2301      	movs	r3, #1
 8006176:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8006178:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 800617a:	68e0      	ldr	r0, [r4, #12]
 800617c:	f000 f9dc 	bl	8006538 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006180:	6822      	ldr	r2, [r4, #0]
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006188:	6013      	str	r3, [r2, #0]
  if (status != HAL_OK)
 800618a:	2800      	cmp	r0, #0
 800618c:	d0f2      	beq.n	8006174 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800618e:	2304      	movs	r3, #4
 8006190:	7123      	strb	r3, [r4, #4]
}
 8006192:	bd10      	pop	{r4, pc}

08006194 <HAL_DAC_ConvCpltCallbackCh1>:
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop

08006198 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <HAL_DAC_ErrorCallbackCh1>:
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop

080061a0 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80061a0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	f043 0304 	orr.w	r3, r3, #4
 80061aa:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff fff5 	bl	800619c <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 80061b2:	2301      	movs	r3, #1
 80061b4:	7123      	strb	r3, [r4, #4]
}
 80061b6:	bd10      	pop	{r4, pc}

080061b8 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80061b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80061ba:	f7ff bfed 	b.w	8006198 <HAL_DAC_ConvHalfCpltCallbackCh1>
 80061be:	bf00      	nop

080061c0 <DAC_DMAConvCpltCh1>:
{
 80061c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff ffe5 	bl	8006194 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 80061ca:	2301      	movs	r3, #1
 80061cc:	7123      	strb	r3, [r4, #4]
}
 80061ce:	bd10      	pop	{r4, pc}

080061d0 <HAL_DAC_Start_DMA>:
{
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 80061d2:	7944      	ldrb	r4, [r0, #5]
{
 80061d4:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_LOCK(hdac);
 80061d8:	2c01      	cmp	r4, #1
 80061da:	d054      	beq.n	8006286 <HAL_DAC_Start_DMA+0xb6>
 80061dc:	4617      	mov	r7, r2
 80061de:	6805      	ldr	r5, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80061e0:	2202      	movs	r2, #2
 80061e2:	460e      	mov	r6, r1
 80061e4:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 80061e6:	2101      	movs	r1, #1
 80061e8:	4604      	mov	r4, r0
 80061ea:	7141      	strb	r1, [r0, #5]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80061ec:	682a      	ldr	r2, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 80061ee:	b9ee      	cbnz	r6, 800622c <HAL_DAC_Start_DMA+0x5c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80061f0:	6880      	ldr	r0, [r0, #8]
 80061f2:	492c      	ldr	r1, [pc, #176]	; (80062a4 <HAL_DAC_Start_DMA+0xd4>)
 80061f4:	6281      	str	r1, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80061f6:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80062b4 <HAL_DAC_Start_DMA+0xe4>
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80061fa:	492b      	ldr	r1, [pc, #172]	; (80062a8 <HAL_DAC_Start_DMA+0xd8>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80061fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    switch(Alignment)
 8006200:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006204:	e9c0 e10b 	strd	lr, r1, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006208:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 800620a:	d047      	beq.n	800629c <HAL_DAC_Start_DMA+0xcc>
 800620c:	f1bc 0f08 	cmp.w	ip, #8
 8006210:	d041      	beq.n	8006296 <HAL_DAC_Start_DMA+0xc6>
 8006212:	f1bc 0f00 	cmp.w	ip, #0
 8006216:	d030      	beq.n	800627a <HAL_DAC_Start_DMA+0xaa>
  if(Channel == DAC_CHANNEL_1)
 8006218:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800621a:	6829      	ldr	r1, [r5, #0]
 800621c:	f441 5c00 	orr.w	ip, r1, #8192	; 0x2000
 8006220:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006224:	4639      	mov	r1, r7
 8006226:	f000 f947 	bl	80064b8 <HAL_DMA_Start_IT>
 800622a:	e01c      	b.n	8006266 <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800622c:	68c0      	ldr	r0, [r0, #12]
 800622e:	491f      	ldr	r1, [pc, #124]	; (80062ac <HAL_DAC_Start_DMA+0xdc>)
 8006230:	6281      	str	r1, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006232:	f8df e084 	ldr.w	lr, [pc, #132]	; 80062b8 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006236:	491e      	ldr	r1, [pc, #120]	; (80062b0 <HAL_DAC_Start_DMA+0xe0>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8006238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 800623c:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006240:	e9c0 e10b 	strd	lr, r1, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8006244:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 8006246:	d023      	beq.n	8006290 <HAL_DAC_Start_DMA+0xc0>
 8006248:	f1bc 0f08 	cmp.w	ip, #8
 800624c:	d01d      	beq.n	800628a <HAL_DAC_Start_DMA+0xba>
 800624e:	f1bc 0f00 	cmp.w	ip, #0
 8006252:	d015      	beq.n	8006280 <HAL_DAC_Start_DMA+0xb0>
  if(Channel == DAC_CHANNEL_1)
 8006254:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006256:	6829      	ldr	r1, [r5, #0]
 8006258:	f041 5c00 	orr.w	ip, r1, #536870912	; 0x20000000
 800625c:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006260:	4639      	mov	r1, r7
 8006262:	f000 f929 	bl	80064b8 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	6810      	ldr	r0, [r2, #0]
 800626c:	fa03 f106 	lsl.w	r1, r3, r6
 8006270:	4301      	orrs	r1, r0
  __HAL_UNLOCK(hdac);
 8006272:	2000      	movs	r0, #0
 8006274:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8006276:	6011      	str	r1, [r2, #0]
}
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800627a:	f105 0208 	add.w	r2, r5, #8
        break;
 800627e:	e7cc      	b.n	800621a <HAL_DAC_Start_DMA+0x4a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006280:	f105 0214 	add.w	r2, r5, #20
        break;
 8006284:	e7e7      	b.n	8006256 <HAL_DAC_Start_DMA+0x86>
  __HAL_LOCK(hdac);
 8006286:	2002      	movs	r0, #2
}
 8006288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800628a:	f105 021c 	add.w	r2, r5, #28
        break;
 800628e:	e7e2      	b.n	8006256 <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006290:	f105 0218 	add.w	r2, r5, #24
        break;
 8006294:	e7df      	b.n	8006256 <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006296:	f105 0210 	add.w	r2, r5, #16
        break;
 800629a:	e7be      	b.n	800621a <HAL_DAC_Start_DMA+0x4a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800629c:	f105 020c 	add.w	r2, r5, #12
        break;
 80062a0:	e7bb      	b.n	800621a <HAL_DAC_Start_DMA+0x4a>
 80062a2:	bf00      	nop
 80062a4:	080061c1 	.word	0x080061c1
 80062a8:	080061a1 	.word	0x080061a1
 80062ac:	08006309 	.word	0x08006309
 80062b0:	0800632d 	.word	0x0800632d
 80062b4:	080061b9 	.word	0x080061b9
 80062b8:	0800631d 	.word	0x0800631d

080062bc <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 80062bc:	7943      	ldrb	r3, [r0, #5]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d01d      	beq.n	80062fe <HAL_DAC_ConfigChannel+0x42>
  hdac->State = HAL_DAC_STATE_BUSY;
 80062c2:	2302      	movs	r3, #2
{
 80062c4:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 80062c6:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80062c8:	6804      	ldr	r4, [r0, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80062ca:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80062ce:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 80062d2:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80062d4:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80062d6:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80062d8:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 |= tmpreg2 << Channel;
 80062dc:	4093      	lsls	r3, r2
 80062de:	430b      	orrs	r3, r1
  hdac->Instance->CR = tmpreg1;
 80062e0:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	21c0      	movs	r1, #192	; 0xc0
 80062e6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ea:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 80062ee:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 80062f0:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80062f2:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80062f4:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 80062f6:	7143      	strb	r3, [r0, #5]
}
 80062f8:	bc70      	pop	{r4, r5, r6}
 80062fa:	4618      	mov	r0, r3
 80062fc:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80062fe:	2202      	movs	r2, #2
}
 8006300:	4610      	mov	r0, r2
 8006302:	4770      	bx	lr

08006304 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop

08006308 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006308:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800630a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800630c:	4620      	mov	r0, r4
 800630e:	f7ff fff9 	bl	8006304 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8006312:	2301      	movs	r3, #1
 8006314:	7123      	strb	r3, [r4, #4]
}
 8006316:	bd10      	pop	{r4, pc}

08006318 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800631c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800631e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006320:	f7ff fffa 	bl	8006318 <HAL_DACEx_ConvHalfCpltCallbackCh2>
}
 8006324:	bd08      	pop	{r3, pc}
 8006326:	bf00      	nop

08006328 <HAL_DACEx_ErrorCallbackCh2>:
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800632c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800632e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	f043 0304 	orr.w	r3, r3, #4
 8006336:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff fff5 	bl	8006328 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 800633e:	2301      	movs	r3, #1
 8006340:	7123      	strb	r3, [r4, #4]
}
 8006342:	bd10      	pop	{r4, pc}

08006344 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006344:	2800      	cmp	r0, #0
 8006346:	d03a      	beq.n	80063be <HAL_DMA_Init+0x7a>
{ 
 8006348:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800634a:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800634e:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 8006352:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8006354:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006356:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006358:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 800635c:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006360:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 8006362:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8006364:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006366:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8006368:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800636a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800636e:	4c15      	ldr	r4, [pc, #84]	; (80063c4 <HAL_DMA_Init+0x80>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006370:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8006374:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006376:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8006378:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800637a:	d916      	bls.n	80063aa <HAL_DMA_Init+0x66>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800637c:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <HAL_DMA_Init+0x84>)
 800637e:	4913      	ldr	r1, [pc, #76]	; (80063cc <HAL_DMA_Init+0x88>)
    hdma->DmaBaseAddress = DMA2;
 8006380:	4c13      	ldr	r4, [pc, #76]	; (80063d0 <HAL_DMA_Init+0x8c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006382:	4402      	add	r2, r0
 8006384:	fba1 1202 	umull	r1, r2, r1, r2
 8006388:	0912      	lsrs	r2, r2, #4
 800638a:	0092      	lsls	r2, r2, #2
  hdma->XferCpltCallback = NULL;
 800638c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800638e:	2101      	movs	r1, #1
 8006390:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006394:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8006398:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639c:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800639e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80063a2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
}  
 80063a6:	bc30      	pop	{r4, r5}
 80063a8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063aa:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <HAL_DMA_Init+0x90>)
 80063ac:	4907      	ldr	r1, [pc, #28]	; (80063cc <HAL_DMA_Init+0x88>)
 80063ae:	4402      	add	r2, r0
 80063b0:	fba1 1202 	umull	r1, r2, r1, r2
 80063b4:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 80063b6:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	e7e6      	b.n	800638c <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 80063be:	2001      	movs	r0, #1
}  
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40020407 	.word	0x40020407
 80063c8:	bffdfbf8 	.word	0xbffdfbf8
 80063cc:	cccccccd 	.word	0xcccccccd
 80063d0:	40020400 	.word	0x40020400
 80063d4:	bffdfff8 	.word	0xbffdfff8

080063d8 <HAL_DMA_DeInit>:
  if(NULL == hdma)
 80063d8:	b368      	cbz	r0, 8006436 <HAL_DMA_DeInit+0x5e>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063da:	6802      	ldr	r2, [r0, #0]
{
 80063dc:	b430      	push	{r4, r5}
 80063de:	4601      	mov	r1, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063e0:	4c16      	ldr	r4, [pc, #88]	; (800643c <HAL_DMA_DeInit+0x64>)
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063e2:	6810      	ldr	r0, [r2, #0]
  hdma->Instance->CCR  = 0U;
 80063e4:	2300      	movs	r3, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063e6:	f020 0001 	bic.w	r0, r0, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063ea:	42a2      	cmp	r2, r4
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063ec:	6010      	str	r0, [r2, #0]
  hdma->Instance->CCR  = 0U;
 80063ee:	6013      	str	r3, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 80063f0:	6053      	str	r3, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 80063f2:	6093      	str	r3, [r2, #8]
  hdma->Instance->CMAR = 0U;
 80063f4:	60d3      	str	r3, [r2, #12]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063f6:	d915      	bls.n	8006424 <HAL_DMA_DeInit+0x4c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_DMA_DeInit+0x68>)
 80063fa:	4812      	ldr	r0, [pc, #72]	; (8006444 <HAL_DMA_DeInit+0x6c>)
    hdma->DmaBaseAddress = DMA2;
 80063fc:	4d12      	ldr	r5, [pc, #72]	; (8006448 <HAL_DMA_DeInit+0x70>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063fe:	4413      	add	r3, r2
 8006400:	fba0 2303 	umull	r2, r3, r0, r3
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	009b      	lsls	r3, r3, #2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006408:	2401      	movs	r4, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640a:	2200      	movs	r2, #0
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800640c:	409c      	lsls	r4, r3
 800640e:	e9c1 530f 	strd	r5, r3, [r1, #60]	; 0x3c
  return HAL_OK;
 8006412:	4610      	mov	r0, r2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006414:	606c      	str	r4, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006416:	638a      	str	r2, [r1, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8006418:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 800641c:	f881 2020 	strb.w	r2, [r1, #32]
}
 8006420:	bc30      	pop	{r4, r5}
 8006422:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_DMA_DeInit+0x74>)
 8006426:	4807      	ldr	r0, [pc, #28]	; (8006444 <HAL_DMA_DeInit+0x6c>)
    hdma->DmaBaseAddress = DMA1;
 8006428:	4d09      	ldr	r5, [pc, #36]	; (8006450 <HAL_DMA_DeInit+0x78>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800642a:	4413      	add	r3, r2
 800642c:	fba0 2303 	umull	r2, r3, r0, r3
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	e7e8      	b.n	8006408 <HAL_DMA_DeInit+0x30>
    return HAL_ERROR;
 8006436:	2001      	movs	r0, #1
}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40020407 	.word	0x40020407
 8006440:	bffdfbf8 	.word	0xbffdfbf8
 8006444:	cccccccd 	.word	0xcccccccd
 8006448:	40020400 	.word	0x40020400
 800644c:	bffdfff8 	.word	0xbffdfff8
 8006450:	40020000 	.word	0x40020000

08006454 <HAL_DMA_Start>:
{
 8006454:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8006456:	f890 4020 	ldrb.w	r4, [r0, #32]
 800645a:	2c01      	cmp	r4, #1
 800645c:	d02a      	beq.n	80064b4 <HAL_DMA_Start+0x60>
  if(HAL_DMA_STATE_READY == hdma->State)
 800645e:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006462:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006464:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8006466:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800646a:	d11e      	bne.n	80064aa <HAL_DMA_Start+0x56>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800646c:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800646e:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006470:	2600      	movs	r6, #0
 8006472:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8006474:	6826      	ldr	r6, [r4, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006476:	f04f 0e02 	mov.w	lr, #2
 800647a:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800647e:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006482:	6c06      	ldr	r6, [r0, #64]	; 0x40
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006484:	6840      	ldr	r0, [r0, #4]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8006486:	f8c4 c000 	str.w	ip, [r4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800648a:	2810      	cmp	r0, #16
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800648c:	fa05 f506 	lsl.w	r5, r5, r6
 8006490:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006492:	6063      	str	r3, [r4, #4]
    hdma->Instance->CPAR = DstAddress;
 8006494:	bf0b      	itete	eq
 8006496:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006498:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800649a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800649c:	60e2      	strne	r2, [r4, #12]
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2000      	movs	r0, #0
} 
 80064a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	__HAL_UNLOCK(hdma);
 80064aa:	2300      	movs	r3, #0
 80064ac:	f880 3020 	strb.w	r3, [r0, #32]
  	status = HAL_BUSY;
 80064b0:	2002      	movs	r0, #2
} 
 80064b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80064b4:	2002      	movs	r0, #2
} 
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064b8 <HAL_DMA_Start_IT>:
{
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80064ba:	f890 4020 	ldrb.w	r4, [r0, #32]
 80064be:	2c01      	cmp	r4, #1
 80064c0:	d02f      	beq.n	8006522 <HAL_DMA_Start_IT+0x6a>
  if(HAL_DMA_STATE_READY == hdma->State)
 80064c2:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80064c6:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80064c8:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80064ca:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80064ce:	d123      	bne.n	8006518 <HAL_DMA_Start_IT+0x60>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064d0:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d2:	2600      	movs	r6, #0
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064d4:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d8:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064da:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064dc:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064de:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064e2:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 80064e4:	f04f 0e02 	mov.w	lr, #2
 80064e8:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064ec:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064ee:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80064f2:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 80064f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064f6:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 80064f8:	bf0b      	itete	eq
 80064fa:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80064fc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80064fe:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006500:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8006502:	b183      	cbz	r3, 8006526 <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f043 030e 	orr.w	r3, r3, #14
 800650a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006514:	2000      	movs	r0, #0
} 
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8006518:	2300      	movs	r3, #0
 800651a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800651e:	2002      	movs	r0, #2
} 
 8006520:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8006522:	2002      	movs	r0, #2
} 
 8006524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f043 030a 	orr.w	r3, r3, #10
 800652c:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	e7e9      	b.n	800650c <HAL_DMA_Start_IT+0x54>

08006538 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006538:	6802      	ldr	r2, [r0, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800653a:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
 800653c:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800653e:	6810      	ldr	r0, [r2, #0]
 8006540:	f020 000e 	bic.w	r0, r0, #14
{
 8006544:	b430      	push	{r4, r5}
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006546:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006548:	6010      	str	r0, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800654a:	6810      	ldr	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800654c:	2401      	movs	r4, #1
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800654e:	f020 0001 	bic.w	r0, r0, #1
 8006552:	6010      	str	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006554:	fa04 f101 	lsl.w	r1, r4, r1
	__HAL_UNLOCK(hdma);
 8006558:	2200      	movs	r2, #0
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800655a:	6069      	str	r1, [r5, #4]
}
 800655c:	4610      	mov	r0, r2
	hdma->State = HAL_DMA_STATE_READY; 
 800655e:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 8006562:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006566:	bc30      	pop	{r4, r5}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800656c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006570:	2a02      	cmp	r2, #2
{  
 8006572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006574:	d003      	beq.n	800657e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006576:	2204      	movs	r2, #4
 8006578:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800657a:	2001      	movs	r0, #1
}
 800657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800657e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006580:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006582:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006584:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8006586:	6b45      	ldr	r5, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006588:	f024 040e 	bic.w	r4, r4, #14
 800658c:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800658e:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006590:	2601      	movs	r6, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006592:	f024 0401 	bic.w	r4, r4, #1
 8006596:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006598:	fa06 f101 	lsl.w	r1, r6, r1
    __HAL_UNLOCK(hdma);
 800659c:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800659e:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80065a0:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80065a4:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80065a8:	b115      	cbz	r5, 80065b0 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80065aa:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	4620      	mov	r0, r4
}
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80065b0:	4628      	mov	r0, r5
}
 80065b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065b4 <HAL_DMA_IRQHandler>:
{
 80065b4:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80065b6:	e9d0 520f 	ldrd	r5, r2, [r0, #60]	; 0x3c
 80065ba:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065bc:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80065be:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80065c0:	4093      	lsls	r3, r2
 80065c2:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 80065c4:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80065c6:	d00a      	beq.n	80065de <HAL_DMA_IRQHandler+0x2a>
 80065c8:	f016 0f04 	tst.w	r6, #4
 80065cc:	d007      	beq.n	80065de <HAL_DMA_IRQHandler+0x2a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	0692      	lsls	r2, r2, #26
 80065d2:	d537      	bpl.n	8006644 <HAL_DMA_IRQHandler+0x90>
  	if(hdma->XferHalfCpltCallback != NULL)
 80065d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80065d6:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80065d8:	b1ca      	cbz	r2, 800660e <HAL_DMA_IRQHandler+0x5a>
}  
 80065da:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 80065dc:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80065de:	2302      	movs	r3, #2
 80065e0:	4093      	lsls	r3, r2
 80065e2:	420b      	tst	r3, r1
 80065e4:	d015      	beq.n	8006612 <HAL_DMA_IRQHandler+0x5e>
 80065e6:	f016 0f02 	tst.w	r6, #2
 80065ea:	d012      	beq.n	8006612 <HAL_DMA_IRQHandler+0x5e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	0692      	lsls	r2, r2, #26
 80065f0:	d406      	bmi.n	8006600 <HAL_DMA_IRQHandler+0x4c>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80065f2:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80065f4:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80065f6:	f022 020a 	bic.w	r2, r2, #10
 80065fa:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80065fc:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8006600:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006602:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8006604:	2300      	movs	r3, #0
 8006606:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800660a:	2a00      	cmp	r2, #0
 800660c:	d1e5      	bne.n	80065da <HAL_DMA_IRQHandler+0x26>
}  
 800660e:	bc70      	pop	{r4, r5, r6}
 8006610:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006612:	2308      	movs	r3, #8
 8006614:	4093      	lsls	r3, r2
 8006616:	420b      	tst	r3, r1
 8006618:	d0f9      	beq.n	800660e <HAL_DMA_IRQHandler+0x5a>
 800661a:	0733      	lsls	r3, r6, #28
 800661c:	d5f7      	bpl.n	800660e <HAL_DMA_IRQHandler+0x5a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800661e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8006620:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006622:	f023 030e 	bic.w	r3, r3, #14
 8006626:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006628:	2301      	movs	r3, #1
 800662a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800662e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006630:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006632:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8006634:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8006638:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800663c:	2900      	cmp	r1, #0
 800663e:	d0e6      	beq.n	800660e <HAL_DMA_IRQHandler+0x5a>
}  
 8006640:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8006642:	4708      	bx	r1
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	6022      	str	r2, [r4, #0]
 800664c:	e7c2      	b.n	80065d4 <HAL_DMA_IRQHandler+0x20>
 800664e:	bf00      	nop

08006650 <HAL_DMA_RegisterCallback>:
{
 8006650:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8006652:	f890 0020 	ldrb.w	r0, [r0, #32]
 8006656:	2801      	cmp	r0, #1
 8006658:	d01f      	beq.n	800669a <HAL_DMA_RegisterCallback+0x4a>
{
 800665a:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 800665c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006660:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006662:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8006664:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006668:	d005      	beq.n	8006676 <HAL_DMA_RegisterCallback+0x26>
  __HAL_UNLOCK(hdma);
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006674:	4770      	bx	lr
    switch (CallbackID)
 8006676:	2903      	cmp	r1, #3
 8006678:	d811      	bhi.n	800669e <HAL_DMA_RegisterCallback+0x4e>
 800667a:	e8df f001 	tbb	[pc, r1]
 800667e:	080b      	.short	0x080b
 8006680:	0205      	.short	0x0205
           hdma->XferAbortCallback = pCallback;
 8006682:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8006684:	2000      	movs	r0, #0
           break; 
 8006686:	e7f0      	b.n	800666a <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferErrorCallback = pCallback;
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2000      	movs	r0, #0
           break;         
 800668c:	e7ed      	b.n	800666a <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferHalfCpltCallback = pCallback;
 800668e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8006690:	2000      	movs	r0, #0
           break;         
 8006692:	e7ea      	b.n	800666a <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferCpltCallback = pCallback;
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2000      	movs	r0, #0
           break;
 8006698:	e7e7      	b.n	800666a <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 800669a:	2002      	movs	r0, #2
}
 800669c:	4770      	bx	lr
           status = HAL_ERROR;
 800669e:	2001      	movs	r0, #1
 80066a0:	e7e3      	b.n	800666a <HAL_DMA_RegisterCallback+0x1a>
 80066a2:	bf00      	nop

080066a4 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 80066a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d012      	beq.n	80066d2 <HAL_DMA_UnRegisterCallback+0x2e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80066ac:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80066b0:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80066b2:	429a      	cmp	r2, r3
  __HAL_LOCK(hdma);
 80066b4:	f880 3020 	strb.w	r3, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80066b8:	d004      	beq.n	80066c4 <HAL_DMA_UnRegisterCallback+0x20>
  __HAL_UNLOCK(hdma);
 80066ba:	2200      	movs	r2, #0
 80066bc:	f880 2020 	strb.w	r2, [r0, #32]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	4770      	bx	lr
    switch (CallbackID)
 80066c4:	2904      	cmp	r1, #4
 80066c6:	d819      	bhi.n	80066fc <HAL_DMA_UnRegisterCallback+0x58>
 80066c8:	e8df f001 	tbb	[pc, r1]
 80066cc:	15120f0c 	.word	0x15120f0c
 80066d0:	06          	.byte	0x06
 80066d1:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 80066d2:	2302      	movs	r3, #2
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	4770      	bx	lr
           hdma->XferCpltCallback = NULL;
 80066d8:	2300      	movs	r3, #0
           hdma->XferHalfCpltCallback = NULL;
 80066da:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
           hdma->XferAbortCallback = NULL;
 80066de:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
           break; 
 80066e2:	e7ea      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferCpltCallback = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	6283      	str	r3, [r0, #40]	; 0x28
           break;
 80066e8:	e7e7      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferHalfCpltCallback = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	62c3      	str	r3, [r0, #44]	; 0x2c
           break;         
 80066ee:	e7e4      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferErrorCallback = NULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	6303      	str	r3, [r0, #48]	; 0x30
           break;         
 80066f4:	e7e1      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferAbortCallback = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	6343      	str	r3, [r0, #52]	; 0x34
           break; 
 80066fa:	e7de      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>
           status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7dc      	b.n	80066ba <HAL_DMA_UnRegisterCallback+0x16>

08006700 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8006700:	f8d1 c000 	ldr.w	ip, [r1]
 8006704:	f1bc 0f00 	cmp.w	ip, #0
 8006708:	f000 80d0 	beq.w	80068ac <HAL_GPIO_Init+0x1ac>
{
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006710:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80068e0 <HAL_GPIO_Init+0x1e0>
{
 8006714:	b083      	sub	sp, #12
 8006716:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 8006718:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800671a:	f04f 0901 	mov.w	r9, #1
 800671e:	fa09 f205 	lsl.w	r2, r9, r5
    if(iocurrent)
 8006722:	ea12 060c 	ands.w	r6, r2, ip
 8006726:	d077      	beq.n	8006818 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800672c:	f021 0a10 	bic.w	sl, r1, #16
 8006730:	f1ba 0f02 	cmp.w	sl, #2
 8006734:	d078      	beq.n	8006828 <HAL_GPIO_Init+0x128>
 8006736:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006738:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800673a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800673e:	40bb      	lsls	r3, r7
 8006740:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006742:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006746:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800674a:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800674c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006750:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006754:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8006758:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800675a:	f240 8086 	bls.w	800686a <HAL_GPIO_Init+0x16a>
      temp = GPIOx->PUPDR;
 800675e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006760:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006764:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006766:	40ba      	lsls	r2, r7
 8006768:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800676a:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 800676c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800676e:	d553      	bpl.n	8006818 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006770:	4a54      	ldr	r2, [pc, #336]	; (80068c4 <HAL_GPIO_Init+0x1c4>)
 8006772:	6993      	ldr	r3, [r2, #24]
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6193      	str	r3, [r2, #24]
 800677a:	6993      	ldr	r3, [r2, #24]
 800677c:	f025 0403 	bic.w	r4, r5, #3
 8006780:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800678c:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800678e:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006792:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8006794:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8006796:	0092      	lsls	r2, r2, #2
 8006798:	230f      	movs	r3, #15
 800679a:	4093      	lsls	r3, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800679c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80067a0:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067a4:	d016      	beq.n	80067d4 <HAL_GPIO_Init+0xd4>
 80067a6:	4f48      	ldr	r7, [pc, #288]	; (80068c8 <HAL_GPIO_Init+0x1c8>)
 80067a8:	42b8      	cmp	r0, r7
 80067aa:	d076      	beq.n	800689a <HAL_GPIO_Init+0x19a>
 80067ac:	4f47      	ldr	r7, [pc, #284]	; (80068cc <HAL_GPIO_Init+0x1cc>)
 80067ae:	42b8      	cmp	r0, r7
 80067b0:	d06e      	beq.n	8006890 <HAL_GPIO_Init+0x190>
 80067b2:	4f47      	ldr	r7, [pc, #284]	; (80068d0 <HAL_GPIO_Init+0x1d0>)
 80067b4:	42b8      	cmp	r0, r7
 80067b6:	d07a      	beq.n	80068ae <HAL_GPIO_Init+0x1ae>
 80067b8:	4f46      	ldr	r7, [pc, #280]	; (80068d4 <HAL_GPIO_Init+0x1d4>)
 80067ba:	42b8      	cmp	r0, r7
 80067bc:	d07c      	beq.n	80068b8 <HAL_GPIO_Init+0x1b8>
 80067be:	4f46      	ldr	r7, [pc, #280]	; (80068d8 <HAL_GPIO_Init+0x1d8>)
 80067c0:	42b8      	cmp	r0, r7
 80067c2:	d06e      	beq.n	80068a2 <HAL_GPIO_Init+0x1a2>
 80067c4:	4f45      	ldr	r7, [pc, #276]	; (80068dc <HAL_GPIO_Init+0x1dc>)
 80067c6:	42b8      	cmp	r0, r7
 80067c8:	bf0c      	ite	eq
 80067ca:	2706      	moveq	r7, #6
 80067cc:	2707      	movne	r7, #7
 80067ce:	fa07 f202 	lsl.w	r2, r7, r2
 80067d2:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 80067d4:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
 80067d6:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80067da:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067dc:	03cc      	lsls	r4, r1, #15
        temp &= ~((uint32_t)iocurrent);
 80067de:	bf54      	ite	pl
 80067e0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80067e2:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 80067e4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80067e8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067ec:	038f      	lsls	r7, r1, #14
        temp &= ~((uint32_t)iocurrent);
 80067ee:	bf54      	ite	pl
 80067f0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80067f2:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 80067f4:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067f8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067fc:	02cc      	lsls	r4, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80067fe:	bf54      	ite	pl
 8006800:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8006802:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 8006804:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8006808:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800680c:	0289      	lsls	r1, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800680e:	bf54      	ite	pl
 8006810:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8006812:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 8006814:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8006818:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800681a:	fa3c f305 	lsrs.w	r3, ip, r5
 800681e:	f47f af7e 	bne.w	800671e <HAL_GPIO_Init+0x1e>
  }
}
 8006822:	b003      	add	sp, #12
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3];
 8006828:	08ef      	lsrs	r7, r5, #3
 800682a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800682e:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8006832:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006834:	00a4      	lsls	r4, r4, #2
 8006836:	f04f 0b0f 	mov.w	fp, #15
 800683a:	fa0b fb04 	lsl.w	fp, fp, r4
 800683e:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006842:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006846:	40a3      	lsls	r3, r4
 8006848:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006850:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8006852:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006856:	40bb      	lsls	r3, r7
 8006858:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800685a:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800685e:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006862:	40bc      	lsls	r4, r7
 8006864:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 8006868:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800686a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800686c:	ea03 0a04 	and.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006870:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8006874:	40bc      	lsls	r4, r7
 8006876:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800687a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800687c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006880:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006884:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006888:	40ac      	lsls	r4, r5
 800688a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800688c:	6044      	str	r4, [r0, #4]
 800688e:	e766      	b.n	800675e <HAL_GPIO_Init+0x5e>
 8006890:	2702      	movs	r7, #2
 8006892:	fa07 f202 	lsl.w	r2, r7, r2
 8006896:	4313      	orrs	r3, r2
 8006898:	e79c      	b.n	80067d4 <HAL_GPIO_Init+0xd4>
 800689a:	fa09 f202 	lsl.w	r2, r9, r2
 800689e:	4313      	orrs	r3, r2
 80068a0:	e798      	b.n	80067d4 <HAL_GPIO_Init+0xd4>
 80068a2:	2705      	movs	r7, #5
 80068a4:	fa07 f202 	lsl.w	r2, r7, r2
 80068a8:	4313      	orrs	r3, r2
 80068aa:	e793      	b.n	80067d4 <HAL_GPIO_Init+0xd4>
 80068ac:	4770      	bx	lr
 80068ae:	2703      	movs	r7, #3
 80068b0:	fa07 f202 	lsl.w	r2, r7, r2
 80068b4:	4313      	orrs	r3, r2
 80068b6:	e78d      	b.n	80067d4 <HAL_GPIO_Init+0xd4>
 80068b8:	2704      	movs	r7, #4
 80068ba:	fa07 f202 	lsl.w	r2, r7, r2
 80068be:	4313      	orrs	r3, r2
 80068c0:	e788      	b.n	80067d4 <HAL_GPIO_Init+0xd4>
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	48000400 	.word	0x48000400
 80068cc:	48000800 	.word	0x48000800
 80068d0:	48000c00 	.word	0x48000c00
 80068d4:	48001000 	.word	0x48001000
 80068d8:	48001400 	.word	0x48001400
 80068dc:	48001800 	.word	0x48001800
 80068e0:	40010400 	.word	0x40010400

080068e4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 80068e4:	2900      	cmp	r1, #0
 80068e6:	f000 8090 	beq.w	8006a0a <HAL_GPIO_DeInit+0x126>
{
 80068ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80068ee:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8006a28 <HAL_GPIO_DeInit+0x144>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80068f2:	f8df b138 	ldr.w	fp, [pc, #312]	; 8006a2c <HAL_GPIO_DeInit+0x148>
  uint32_t position = 0x00U;
 80068f6:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 80068f8:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068fc:	f04f 0a03 	mov.w	sl, #3
    iocurrent = GPIO_Pin & (1U << position);
 8006900:	fa09 f503 	lsl.w	r5, r9, r3
    if (iocurrent)
 8006904:	ea15 0c01 	ands.w	ip, r5, r1
 8006908:	d045      	beq.n	8006996 <HAL_GPIO_DeInit+0xb2>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800690a:	005a      	lsls	r2, r3, #1
 800690c:	6804      	ldr	r4, [r0, #0]
 800690e:	fa0a f202 	lsl.w	r2, sl, r2
 8006912:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006914:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006916:	4014      	ands	r4, r2
 8006918:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800691c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800691e:	f003 0407 	and.w	r4, r3, #7
 8006922:	f8d6 e020 	ldr.w	lr, [r6, #32]
 8006926:	270f      	movs	r7, #15
 8006928:	00a4      	lsls	r4, r4, #2
 800692a:	fa07 f404 	lsl.w	r4, r7, r4
 800692e:	ea2e 0404 	bic.w	r4, lr, r4
 8006932:	6234      	str	r4, [r6, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006934:	6884      	ldr	r4, [r0, #8]
 8006936:	4014      	ands	r4, r2
 8006938:	6084      	str	r4, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800693a:	6844      	ldr	r4, [r0, #4]
 800693c:	ea24 0505 	bic.w	r5, r4, r5
 8006940:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006942:	68c5      	ldr	r5, [r0, #12]
 8006944:	f023 0403 	bic.w	r4, r3, #3
 8006948:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800694c:	402a      	ands	r2, r5
 800694e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006952:	60c2      	str	r2, [r0, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006954:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8006958:	68a5      	ldr	r5, [r4, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 800695a:	0092      	lsls	r2, r2, #2
 800695c:	4097      	lsls	r7, r2
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800695e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006962:	ea05 0507 	and.w	r5, r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006966:	d01c      	beq.n	80069a2 <HAL_GPIO_DeInit+0xbe>
 8006968:	4558      	cmp	r0, fp
 800696a:	d040      	beq.n	80069ee <HAL_GPIO_DeInit+0x10a>
 800696c:	4e29      	ldr	r6, [pc, #164]	; (8006a14 <HAL_GPIO_DeInit+0x130>)
 800696e:	42b0      	cmp	r0, r6
 8006970:	d044      	beq.n	80069fc <HAL_GPIO_DeInit+0x118>
 8006972:	4e29      	ldr	r6, [pc, #164]	; (8006a18 <HAL_GPIO_DeInit+0x134>)
 8006974:	42b0      	cmp	r0, r6
 8006976:	d045      	beq.n	8006a04 <HAL_GPIO_DeInit+0x120>
 8006978:	4e28      	ldr	r6, [pc, #160]	; (8006a1c <HAL_GPIO_DeInit+0x138>)
 800697a:	42b0      	cmp	r0, r6
 800697c:	d03a      	beq.n	80069f4 <HAL_GPIO_DeInit+0x110>
 800697e:	4e28      	ldr	r6, [pc, #160]	; (8006a20 <HAL_GPIO_DeInit+0x13c>)
 8006980:	42b0      	cmp	r0, r6
 8006982:	d043      	beq.n	8006a0c <HAL_GPIO_DeInit+0x128>
 8006984:	4e27      	ldr	r6, [pc, #156]	; (8006a24 <HAL_GPIO_DeInit+0x140>)
 8006986:	42b0      	cmp	r0, r6
 8006988:	bf0c      	ite	eq
 800698a:	2606      	moveq	r6, #6
 800698c:	2607      	movne	r6, #7
 800698e:	fa06 f202 	lsl.w	r2, r6, r2
 8006992:	4295      	cmp	r5, r2
 8006994:	d008      	beq.n	80069a8 <HAL_GPIO_DeInit+0xc4>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 8006996:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8006998:	fa31 f203 	lsrs.w	r2, r1, r3
 800699c:	d1b0      	bne.n	8006900 <HAL_GPIO_DeInit+0x1c>
  }
}
 800699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a2:	2200      	movs	r2, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069a4:	4295      	cmp	r5, r2
 80069a6:	d1f6      	bne.n	8006996 <HAL_GPIO_DeInit+0xb2>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80069a8:	68a2      	ldr	r2, [r4, #8]
 80069aa:	ea22 0707 	bic.w	r7, r2, r7
 80069ae:	60a7      	str	r7, [r4, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069b0:	f8d8 2000 	ldr.w	r2, [r8]
 80069b4:	ea6f 0c0c 	mvn.w	ip, ip
 80069b8:	ea02 020c 	and.w	r2, r2, ip
 80069bc:	f8c8 2000 	str.w	r2, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80069c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80069c4:	ea0c 0202 	and.w	r2, ip, r2
 80069c8:	f8c8 2004 	str.w	r2, [r8, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80069cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80069d0:	ea0c 0202 	and.w	r2, ip, r2
 80069d4:	f8c8 2008 	str.w	r2, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80069d8:	f8d8 200c 	ldr.w	r2, [r8, #12]
    position++;
 80069dc:	3301      	adds	r3, #1
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80069de:	ea0c 0202 	and.w	r2, ip, r2
 80069e2:	f8c8 200c 	str.w	r2, [r8, #12]
  while ((GPIO_Pin >> position) != RESET)
 80069e6:	fa31 f203 	lsrs.w	r2, r1, r3
 80069ea:	d189      	bne.n	8006900 <HAL_GPIO_DeInit+0x1c>
 80069ec:	e7d7      	b.n	800699e <HAL_GPIO_DeInit+0xba>
 80069ee:	fa09 f202 	lsl.w	r2, r9, r2
 80069f2:	e7d7      	b.n	80069a4 <HAL_GPIO_DeInit+0xc0>
 80069f4:	2604      	movs	r6, #4
 80069f6:	fa06 f202 	lsl.w	r2, r6, r2
 80069fa:	e7d3      	b.n	80069a4 <HAL_GPIO_DeInit+0xc0>
 80069fc:	2602      	movs	r6, #2
 80069fe:	fa06 f202 	lsl.w	r2, r6, r2
 8006a02:	e7cf      	b.n	80069a4 <HAL_GPIO_DeInit+0xc0>
 8006a04:	fa0a f202 	lsl.w	r2, sl, r2
 8006a08:	e7cc      	b.n	80069a4 <HAL_GPIO_DeInit+0xc0>
 8006a0a:	4770      	bx	lr
 8006a0c:	2605      	movs	r6, #5
 8006a0e:	fa06 f202 	lsl.w	r2, r6, r2
 8006a12:	e7c7      	b.n	80069a4 <HAL_GPIO_DeInit+0xc0>
 8006a14:	48000800 	.word	0x48000800
 8006a18:	48000c00 	.word	0x48000c00
 8006a1c:	48001000 	.word	0x48001000
 8006a20:	48001400 	.word	0x48001400
 8006a24:	48001800 	.word	0x48001800
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	48000400 	.word	0x48000400

08006a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a34:	6803      	ldr	r3, [r0, #0]
 8006a36:	07df      	lsls	r7, r3, #31
{
 8006a38:	b083      	sub	sp, #12
 8006a3a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3c:	d53d      	bpl.n	8006aba <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a3e:	49be      	ldr	r1, [pc, #760]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006a40:	684a      	ldr	r2, [r1, #4]
 8006a42:	f002 020c 	and.w	r2, r2, #12
 8006a46:	2a04      	cmp	r2, #4
 8006a48:	f000 810d 	beq.w	8006c66 <HAL_RCC_OscConfig+0x236>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a4c:	684a      	ldr	r2, [r1, #4]
 8006a4e:	f002 020c 	and.w	r2, r2, #12
 8006a52:	2a08      	cmp	r2, #8
 8006a54:	f000 8100 	beq.w	8006c58 <HAL_RCC_OscConfig+0x228>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5e:	f000 8182 	beq.w	8006d66 <HAL_RCC_OscConfig+0x336>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8199 	beq.w	8006d9a <HAL_RCC_OscConfig+0x36a>
 8006a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6c:	f000 82a1 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x582>
 8006a70:	4bb1      	ldr	r3, [pc, #708]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a80:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a82:	f7fe fbb1 	bl	80051e8 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8006a8a:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8c:	4eaa      	ldr	r6, [pc, #680]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006a8e:	2501      	movs	r5, #1
 8006a90:	e005      	b.n	8006a9e <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a92:	f7fe fba9 	bl	80051e8 <HAL_GetTick>
 8006a96:	1bc0      	subs	r0, r0, r7
 8006a98:	2864      	cmp	r0, #100	; 0x64
 8006a9a:	f200 817a 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006a9e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	6832      	ldr	r2, [r6, #0]
 8006aa4:	fa98 f3a8 	rbit	r3, r8
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa05 f303 	lsl.w	r3, r5, r3
 8006ab4:	4213      	tst	r3, r2
 8006ab6:	d0ec      	beq.n	8006a92 <HAL_RCC_OscConfig+0x62>
 8006ab8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aba:	079e      	lsls	r6, r3, #30
 8006abc:	d542      	bpl.n	8006b44 <HAL_RCC_OscConfig+0x114>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006abe:	4a9e      	ldr	r2, [pc, #632]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006ac0:	6851      	ldr	r1, [r2, #4]
 8006ac2:	f011 0f0c 	tst.w	r1, #12
 8006ac6:	f000 80ec 	beq.w	8006ca2 <HAL_RCC_OscConfig+0x272>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006aca:	6851      	ldr	r1, [r2, #4]
 8006acc:	f001 010c 	and.w	r1, r1, #12
 8006ad0:	2908      	cmp	r1, #8
 8006ad2:	f000 80df 	beq.w	8006c94 <HAL_RCC_OscConfig+0x264>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ad6:	68e2      	ldr	r2, [r4, #12]
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	f000 81b7 	beq.w	8006e4c <HAL_RCC_OscConfig+0x41c>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae4:	fab3 f383 	clz	r3, r3
 8006ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006af0:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af2:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8006af4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006af6:	f7fe fb77 	bl	80051e8 <HAL_GetTick>
 8006afa:	f04f 0802 	mov.w	r8, #2
 8006afe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	4d8d      	ldr	r5, [pc, #564]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006b02:	e005      	b.n	8006b10 <HAL_RCC_OscConfig+0xe0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b04:	f7fe fb70 	bl	80051e8 <HAL_GetTick>
 8006b08:	1bc0      	subs	r0, r0, r7
 8006b0a:	2802      	cmp	r0, #2
 8006b0c:	f200 8141 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006b10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	682a      	ldr	r2, [r5, #0]
 8006b16:	fa98 f3a8 	rbit	r3, r8
 8006b1a:	fab3 f383 	clz	r3, r3
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	fa06 f303 	lsl.w	r3, r6, r3
 8006b26:	4213      	tst	r3, r2
 8006b28:	d0ec      	beq.n	8006b04 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2a:	6829      	ldr	r1, [r5, #0]
 8006b2c:	22f8      	movs	r2, #248	; 0xf8
 8006b2e:	fa92 f2a2 	rbit	r2, r2
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	fab2 f282 	clz	r2, r2
 8006b38:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b44:	071d      	lsls	r5, r3, #28
 8006b46:	d421      	bmi.n	8006b8c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b48:	0758      	lsls	r0, r3, #29
 8006b4a:	d54e      	bpl.n	8006bea <HAL_RCC_OscConfig+0x1ba>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4c:	4b7a      	ldr	r3, [pc, #488]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	00d1      	lsls	r1, r2, #3
 8006b52:	f140 80e4 	bpl.w	8006d1e <HAL_RCC_OscConfig+0x2ee>
    FlagStatus       pwrclkchanged = RESET;
 8006b56:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5a:	4d78      	ldr	r5, [pc, #480]	; (8006d3c <HAL_RCC_OscConfig+0x30c>)
 8006b5c:	682a      	ldr	r2, [r5, #0]
 8006b5e:	05d2      	lsls	r2, r2, #23
 8006b60:	f140 8107 	bpl.w	8006d72 <HAL_RCC_OscConfig+0x342>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f000 8196 	beq.w	8006e98 <HAL_RCC_OscConfig+0x468>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8137 	beq.w	8006de0 <HAL_RCC_OscConfig+0x3b0>
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	4b70      	ldr	r3, [pc, #448]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	f000 81b8 	beq.w	8006eec <HAL_RCC_OscConfig+0x4bc>
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	621a      	str	r2, [r3, #32]
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	f022 0204 	bic.w	r2, r2, #4
 8006b88:	621a      	str	r2, [r3, #32]
 8006b8a:	e18a      	b.n	8006ea2 <HAL_RCC_OscConfig+0x472>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b8c:	6962      	ldr	r2, [r4, #20]
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	f000 809e 	beq.w	8006cd0 <HAL_RCC_OscConfig+0x2a0>
 8006b94:	2201      	movs	r2, #1
 8006b96:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8006b9a:	4b69      	ldr	r3, [pc, #420]	; (8006d40 <HAL_RCC_OscConfig+0x310>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9c:	4e66      	ldr	r6, [pc, #408]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
      __HAL_RCC_LSI_ENABLE();
 8006b9e:	fab1 f181 	clz	r1, r1
 8006ba2:	440b      	add	r3, r1
 8006ba4:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba6:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8006ba8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006baa:	f7fe fb1d 	bl	80051e8 <HAL_GetTick>
 8006bae:	f04f 0802 	mov.w	r8, #2
 8006bb2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb4:	e005      	b.n	8006bc2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb6:	f7fe fb17 	bl	80051e8 <HAL_GetTick>
 8006bba:	1bc0      	subs	r0, r0, r7
 8006bbc:	2802      	cmp	r0, #2
 8006bbe:	f200 80e8 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006bc2:	fa98 f3a8 	rbit	r3, r8
 8006bc6:	fa98 f3a8 	rbit	r3, r8
 8006bca:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bce:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006bd0:	fa98 f3a8 	rbit	r3, r8
 8006bd4:	fab3 f383 	clz	r3, r3
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	fa05 f303 	lsl.w	r3, r5, r3
 8006be0:	4213      	tst	r3, r2
 8006be2:	d0e8      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x186>
 8006be4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be6:	0758      	lsls	r0, r3, #29
 8006be8:	d4b0      	bmi.n	8006b4c <HAL_RCC_OscConfig+0x11c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bea:	69a3      	ldr	r3, [r4, #24]
 8006bec:	b383      	cbz	r3, 8006c50 <HAL_RCC_OscConfig+0x220>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bee:	4d52      	ldr	r5, [pc, #328]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006bf0:	686a      	ldr	r2, [r5, #4]
 8006bf2:	f002 020c 	and.w	r2, r2, #12
 8006bf6:	2a08      	cmp	r2, #8
 8006bf8:	d066      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x298>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c00:	f000 817c 	beq.w	8006efc <HAL_RCC_OscConfig+0x4cc>
 8006c04:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c08:	fab3 f383 	clz	r3, r3
 8006c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1a:	f7fe fae5 	bl	80051e8 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c1e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8006c20:	4607      	mov	r7, r0
 8006c22:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c26:	2601      	movs	r6, #1
 8006c28:	e005      	b.n	8006c36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c2a:	f7fe fadd 	bl	80051e8 <HAL_GetTick>
 8006c2e:	1bc0      	subs	r0, r0, r7
 8006c30:	2802      	cmp	r0, #2
 8006c32:	f200 80ae 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006c36:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c3a:	6822      	ldr	r2, [r4, #0]
 8006c3c:	fa95 f3a5 	rbit	r3, r5
 8006c40:	fab3 f383 	clz	r3, r3
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	fa06 f303 	lsl.w	r3, r6, r3
 8006c4c:	4213      	tst	r3, r2
 8006c4e:	d1ec      	bne.n	8006c2a <HAL_RCC_OscConfig+0x1fa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8006c50:	2000      	movs	r0, #0
}
 8006c52:	b003      	add	sp, #12
 8006c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c58:	684a      	ldr	r2, [r1, #4]
 8006c5a:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8006c5e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006c62:	f47f aef9 	bne.w	8006a58 <HAL_RCC_OscConfig+0x28>
 8006c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c6a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c6e:	4932      	ldr	r1, [pc, #200]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	fa92 f2a2 	rbit	r2, r2
 8006c76:	fab2 f282 	clz	r2, r2
 8006c7a:	f002 021f 	and.w	r2, r2, #31
 8006c7e:	2101      	movs	r1, #1
 8006c80:	fa01 f202 	lsl.w	r2, r1, r2
 8006c84:	4202      	tst	r2, r0
 8006c86:	f43f af18 	beq.w	8006aba <HAL_RCC_OscConfig+0x8a>
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f47f af14 	bne.w	8006aba <HAL_RCC_OscConfig+0x8a>
 8006c92:	e019      	b.n	8006cc8 <HAL_RCC_OscConfig+0x298>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006c94:	6852      	ldr	r2, [r2, #4]
 8006c96:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8006c9a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006c9e:	f47f af1a 	bne.w	8006ad6 <HAL_RCC_OscConfig+0xa6>
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca8:	4923      	ldr	r1, [pc, #140]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
 8006caa:	6808      	ldr	r0, [r1, #0]
 8006cac:	fa92 f2a2 	rbit	r2, r2
 8006cb0:	fab2 f282 	clz	r2, r2
 8006cb4:	f002 021f 	and.w	r2, r2, #31
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f202 	lsl.w	r2, r1, r2
 8006cbe:	4202      	tst	r2, r0
 8006cc0:	d040      	beq.n	8006d44 <HAL_RCC_OscConfig+0x314>
 8006cc2:	68e2      	ldr	r2, [r4, #12]
 8006cc4:	428a      	cmp	r2, r1
 8006cc6:	d03d      	beq.n	8006d44 <HAL_RCC_OscConfig+0x314>
        return HAL_ERROR;
 8006cc8:	2001      	movs	r0, #1
}
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd0:	2501      	movs	r5, #1
 8006cd2:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <HAL_RCC_OscConfig+0x310>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd8:	4e17      	ldr	r6, [pc, #92]	; (8006d38 <HAL_RCC_OscConfig+0x308>)
      __HAL_RCC_LSI_DISABLE();
 8006cda:	fab1 f181 	clz	r1, r1
 8006cde:	440b      	add	r3, r1
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	f04f 0802 	mov.w	r8, #2
 8006ce6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006ce8:	f7fe fa7e 	bl	80051e8 <HAL_GetTick>
 8006cec:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cee:	e004      	b.n	8006cfa <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf0:	f7fe fa7a 	bl	80051e8 <HAL_GetTick>
 8006cf4:	1bc0      	subs	r0, r0, r7
 8006cf6:	2802      	cmp	r0, #2
 8006cf8:	d84b      	bhi.n	8006d92 <HAL_RCC_OscConfig+0x362>
 8006cfa:	fa98 f3a8 	rbit	r3, r8
 8006cfe:	fa98 f3a8 	rbit	r3, r8
 8006d02:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d06:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006d08:	fa98 f3a8 	rbit	r3, r8
 8006d0c:	fab3 f383 	clz	r3, r3
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	fa05 f303 	lsl.w	r3, r5, r3
 8006d18:	4213      	tst	r3, r2
 8006d1a:	d1e9      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x2c0>
 8006d1c:	e762      	b.n	8006be4 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d24:	61da      	str	r2, [r3, #28]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d30:	f04f 0801 	mov.w	r8, #1
 8006d34:	e711      	b.n	8006b5a <HAL_RCC_OscConfig+0x12a>
 8006d36:	bf00      	nop
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	40007000 	.word	0x40007000
 8006d40:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d44:	4da1      	ldr	r5, [pc, #644]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006d46:	21f8      	movs	r1, #248	; 0xf8
 8006d48:	6828      	ldr	r0, [r5, #0]
 8006d4a:	fa91 f1a1 	rbit	r1, r1
 8006d4e:	6922      	ldr	r2, [r4, #16]
 8006d50:	fab1 f181 	clz	r1, r1
 8006d54:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8006d58:	408a      	lsls	r2, r1
 8006d5a:	4302      	orrs	r2, r0
 8006d5c:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d5e:	071d      	lsls	r5, r3, #28
 8006d60:	f57f aef2 	bpl.w	8006b48 <HAL_RCC_OscConfig+0x118>
 8006d64:	e712      	b.n	8006b8c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d66:	4a99      	ldr	r2, [pc, #612]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	e687      	b.n	8006a82 <HAL_RCC_OscConfig+0x52>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d72:	682a      	ldr	r2, [r5, #0]
 8006d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d78:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8006d7a:	f7fe fa35 	bl	80051e8 <HAL_GetTick>
 8006d7e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	05db      	lsls	r3, r3, #23
 8006d84:	f53f aeee 	bmi.w	8006b64 <HAL_RCC_OscConfig+0x134>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d88:	f7fe fa2e 	bl	80051e8 <HAL_GetTick>
 8006d8c:	1b80      	subs	r0, r0, r6
 8006d8e:	2864      	cmp	r0, #100	; 0x64
 8006d90:	d9f6      	bls.n	8006d80 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8006d92:	2003      	movs	r0, #3
}
 8006d94:	b003      	add	sp, #12
 8006d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d9a:	4d8c      	ldr	r5, [pc, #560]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006daa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006dac:	f7fe fa1c 	bl	80051e8 <HAL_GetTick>
 8006db0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8006db4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db6:	2601      	movs	r6, #1
 8006db8:	e004      	b.n	8006dc4 <HAL_RCC_OscConfig+0x394>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dba:	f7fe fa15 	bl	80051e8 <HAL_GetTick>
 8006dbe:	1bc0      	subs	r0, r0, r7
 8006dc0:	2864      	cmp	r0, #100	; 0x64
 8006dc2:	d8e6      	bhi.n	8006d92 <HAL_RCC_OscConfig+0x362>
 8006dc4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc8:	682a      	ldr	r2, [r5, #0]
 8006dca:	fa98 f3a8 	rbit	r3, r8
 8006dce:	fab3 f383 	clz	r3, r3
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	fa06 f303 	lsl.w	r3, r6, r3
 8006dda:	4213      	tst	r3, r2
 8006ddc:	d1ed      	bne.n	8006dba <HAL_RCC_OscConfig+0x38a>
 8006dde:	e66b      	b.n	8006ab8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de0:	4d7a      	ldr	r5, [pc, #488]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006de2:	6a2b      	ldr	r3, [r5, #32]
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	622b      	str	r3, [r5, #32]
 8006dea:	6a2b      	ldr	r3, [r5, #32]
 8006dec:	f023 0304 	bic.w	r3, r3, #4
 8006df0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8006df2:	f7fe f9f9 	bl	80051e8 <HAL_GetTick>
 8006df6:	f04f 0902 	mov.w	r9, #2
 8006dfa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfc:	2601      	movs	r6, #1
 8006dfe:	e013      	b.n	8006e28 <HAL_RCC_OscConfig+0x3f8>
 8006e00:	fa99 f3a9 	rbit	r3, r9
 8006e04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006e06:	fa99 f3a9 	rbit	r3, r9
 8006e0a:	fab3 f383 	clz	r3, r3
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	fa06 f303 	lsl.w	r3, r6, r3
 8006e16:	4213      	tst	r3, r2
 8006e18:	d00e      	beq.n	8006e38 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e1a:	f7fe f9e5 	bl	80051e8 <HAL_GetTick>
 8006e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e22:	1bc0      	subs	r0, r0, r7
 8006e24:	4298      	cmp	r0, r3
 8006e26:	d8b4      	bhi.n	8006d92 <HAL_RCC_OscConfig+0x362>
 8006e28:	fa99 f3a9 	rbit	r3, r9
 8006e2c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0e5      	beq.n	8006e00 <HAL_RCC_OscConfig+0x3d0>
 8006e34:	6a2a      	ldr	r2, [r5, #32]
 8006e36:	e7e6      	b.n	8006e06 <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8006e38:	f1b8 0f00 	cmp.w	r8, #0
 8006e3c:	f43f aed5 	beq.w	8006bea <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e40:	4a62      	ldr	r2, [pc, #392]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006e42:	69d3      	ldr	r3, [r2, #28]
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	61d3      	str	r3, [r2, #28]
 8006e4a:	e6ce      	b.n	8006bea <HAL_RCC_OscConfig+0x1ba>
 8006e4c:	2501      	movs	r5, #1
 8006e4e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8006e52:	fab3 f383 	clz	r3, r3
 8006e56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	f04f 0802 	mov.w	r8, #2
 8006e64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e66:	f7fe f9bf 	bl	80051e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6a:	4e58      	ldr	r6, [pc, #352]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8006e6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6e:	e004      	b.n	8006e7a <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e70:	f7fe f9ba 	bl	80051e8 <HAL_GetTick>
 8006e74:	1bc0      	subs	r0, r0, r7
 8006e76:	2802      	cmp	r0, #2
 8006e78:	d88b      	bhi.n	8006d92 <HAL_RCC_OscConfig+0x362>
 8006e7a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	6832      	ldr	r2, [r6, #0]
 8006e80:	fa98 f3a8 	rbit	r3, r8
 8006e84:	fab3 f383 	clz	r3, r3
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	fa05 f303 	lsl.w	r3, r5, r3
 8006e90:	4213      	tst	r3, r2
 8006e92:	d1ed      	bne.n	8006e70 <HAL_RCC_OscConfig+0x440>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	e655      	b.n	8006b44 <HAL_RCC_OscConfig+0x114>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e98:	4a4c      	ldr	r2, [pc, #304]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006e9a:	6a13      	ldr	r3, [r2, #32]
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8006ea2:	f7fe f9a1 	bl	80051e8 <HAL_GetTick>
 8006ea6:	f04f 0902 	mov.w	r9, #2
 8006eaa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eac:	4e47      	ldr	r6, [pc, #284]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
 8006eae:	2501      	movs	r5, #1
 8006eb0:	e014      	b.n	8006edc <HAL_RCC_OscConfig+0x4ac>
 8006eb2:	fa99 f3a9 	rbit	r3, r9
 8006eb6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006eb8:	fa99 f3a9 	rbit	r3, r9
 8006ebc:	fab3 f383 	clz	r3, r3
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	fa05 f303 	lsl.w	r3, r5, r3
 8006ec8:	4213      	tst	r3, r2
 8006eca:	d1b5      	bne.n	8006e38 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ecc:	f7fe f98c 	bl	80051e8 <HAL_GetTick>
 8006ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ed4:	1bc0      	subs	r0, r0, r7
 8006ed6:	4298      	cmp	r0, r3
 8006ed8:	f63f af5b 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006edc:	fa99 f3a9 	rbit	r3, r9
 8006ee0:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0e4      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x482>
 8006ee8:	6a32      	ldr	r2, [r6, #32]
 8006eea:	e7e5      	b.n	8006eb8 <HAL_RCC_OscConfig+0x488>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eec:	f042 0204 	orr.w	r2, r2, #4
 8006ef0:	621a      	str	r2, [r3, #32]
 8006ef2:	6a1a      	ldr	r2, [r3, #32]
 8006ef4:	f042 0201 	orr.w	r2, r2, #1
 8006ef8:	621a      	str	r2, [r3, #32]
 8006efa:	e7d2      	b.n	8006ea2 <HAL_RCC_OscConfig+0x472>
 8006efc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006f00:	fab3 f383 	clz	r3, r3
 8006f04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006f12:	f7fe f969 	bl	80051e8 <HAL_GetTick>
 8006f16:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8006f1a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f1c:	2601      	movs	r6, #1
 8006f1e:	e005      	b.n	8006f2c <HAL_RCC_OscConfig+0x4fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fe f962 	bl	80051e8 <HAL_GetTick>
 8006f24:	1bc0      	subs	r0, r0, r7
 8006f26:	2802      	cmp	r0, #2
 8006f28:	f63f af33 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006f2c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f30:	682a      	ldr	r2, [r5, #0]
 8006f32:	fa98 f3a8 	rbit	r3, r8
 8006f36:	fab3 f383 	clz	r3, r3
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	fa06 f303 	lsl.w	r3, r6, r3
 8006f42:	4213      	tst	r3, r2
 8006f44:	d1ec      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006f48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f4a:	f023 030f 	bic.w	r3, r3, #15
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006f52:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8006f56:	686a      	ldr	r2, [r5, #4]
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	606b      	str	r3, [r5, #4]
 8006f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f66:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006f6a:	fab3 f383 	clz	r3, r3
 8006f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8006f7c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006f7e:	f7fe f933 	bl	80051e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f82:	4e12      	ldr	r6, [pc, #72]	; (8006fcc <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8006f84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f86:	2501      	movs	r5, #1
 8006f88:	e005      	b.n	8006f96 <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fe f92d 	bl	80051e8 <HAL_GetTick>
 8006f8e:	1bc0      	subs	r0, r0, r7
 8006f90:	2802      	cmp	r0, #2
 8006f92:	f63f aefe 	bhi.w	8006d92 <HAL_RCC_OscConfig+0x362>
 8006f96:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f9a:	6832      	ldr	r2, [r6, #0]
 8006f9c:	fa94 f3a4 	rbit	r3, r4
 8006fa0:	fab3 f383 	clz	r3, r3
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa05 f303 	lsl.w	r3, r5, r3
 8006fac:	4213      	tst	r3, r2
 8006fae:	d0ec      	beq.n	8006f8a <HAL_RCC_OscConfig+0x55a>
 8006fb0:	e64e      	b.n	8006c50 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fb6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e55a      	b.n	8006a82 <HAL_RCC_OscConfig+0x52>
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006fd0:	4a6f      	ldr	r2, [pc, #444]	; (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	428b      	cmp	r3, r1
 8006fda:	d20b      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x24>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fdc:	6813      	ldr	r3, [r2, #0]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	428b      	cmp	r3, r1
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x24>
    {
      return HAL_ERROR;
 8006ff0:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8006ff2:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff4:	6803      	ldr	r3, [r0, #0]
{
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffa:	079c      	lsls	r4, r3, #30
 8006ffc:	d506      	bpl.n	800700c <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ffe:	4c65      	ldr	r4, [pc, #404]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	6885      	ldr	r5, [r0, #8]
 8007002:	6862      	ldr	r2, [r4, #4]
 8007004:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007008:	432a      	orrs	r2, r5
 800700a:	6062      	str	r2, [r4, #4]
 800700c:	460e      	mov	r6, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700e:	07d9      	lsls	r1, r3, #31
 8007010:	4604      	mov	r4, r0
 8007012:	d532      	bpl.n	800707a <HAL_RCC_ClockConfig+0xaa>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007014:	6842      	ldr	r2, [r0, #4]
 8007016:	2a01      	cmp	r2, #1
 8007018:	f000 80a5 	beq.w	8007166 <HAL_RCC_ClockConfig+0x196>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800701c:	2a02      	cmp	r2, #2
 800701e:	bf0c      	ite	eq
 8007020:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8007024:	2302      	movne	r3, #2
 8007026:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702a:	495a      	ldr	r1, [pc, #360]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	6808      	ldr	r0, [r1, #0]
 800702e:	fa93 f3a3 	rbit	r3, r3
 8007032:	fab3 f383 	clz	r3, r3
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	2101      	movs	r1, #1
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	4203      	tst	r3, r0
 8007042:	d02a      	beq.n	800709a <HAL_RCC_ClockConfig+0xca>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007044:	4d53      	ldr	r5, [pc, #332]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	686b      	ldr	r3, [r5, #4]
 8007048:	f023 0303 	bic.w	r3, r3, #3
 800704c:	431a      	orrs	r2, r3
 800704e:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8007050:	f7fe f8ca 	bl	80051e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8007058:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705e:	d071      	beq.n	8007144 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007060:	2b02      	cmp	r3, #2
 8007062:	d106      	bne.n	8007072 <HAL_RCC_ClockConfig+0xa2>
 8007064:	e079      	b.n	800715a <HAL_RCC_ClockConfig+0x18a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007066:	f7fe f8bf 	bl	80051e8 <HAL_GetTick>
 800706a:	1bc0      	subs	r0, r0, r7
 800706c:	4540      	cmp	r0, r8
 800706e:	f200 808c 	bhi.w	800718a <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007072:	686b      	ldr	r3, [r5, #4]
 8007074:	f013 0f0c 	tst.w	r3, #12
 8007078:	d1f5      	bne.n	8007066 <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800707a:	4a45      	ldr	r2, [pc, #276]	; (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	42b3      	cmp	r3, r6
 8007084:	d90c      	bls.n	80070a0 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	6813      	ldr	r3, [r2, #0]
 8007088:	f023 0307 	bic.w	r3, r3, #7
 800708c:	4333      	orrs	r3, r6
 800708e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	42b3      	cmp	r3, r6
 8007098:	d002      	beq.n	80070a0 <HAL_RCC_ClockConfig+0xd0>
      return HAL_ERROR;
 800709a:	2001      	movs	r0, #1
}
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	075a      	lsls	r2, r3, #29
 80070a4:	d506      	bpl.n	80070b4 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a6:	493b      	ldr	r1, [pc, #236]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070a8:	68e0      	ldr	r0, [r4, #12]
 80070aa:	684a      	ldr	r2, [r1, #4]
 80070ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b0:	4302      	orrs	r2, r0
 80070b2:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b4:	071b      	lsls	r3, r3, #28
 80070b6:	d507      	bpl.n	80070c8 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b8:	4a36      	ldr	r2, [pc, #216]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070ba:	6921      	ldr	r1, [r4, #16]
 80070bc:	6853      	ldr	r3, [r2, #4]
 80070be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80070c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80070c6:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80070c8:	4a32      	ldr	r2, [pc, #200]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070ca:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070cc:	f003 010c 	and.w	r1, r3, #12
 80070d0:	2908      	cmp	r1, #8
 80070d2:	d130      	bne.n	8007136 <HAL_RCC_ClockConfig+0x166>
 80070d4:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80070d8:	fa91 f1a1 	rbit	r1, r1
 80070dc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070de:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80070e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070e4:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80070ec:	40cb      	lsrs	r3, r1
 80070ee:	492a      	ldr	r1, [pc, #168]	; (8007198 <HAL_RCC_ClockConfig+0x1c8>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80070f0:	4c2a      	ldr	r4, [pc, #168]	; (800719c <HAL_RCC_ClockConfig+0x1cc>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80070f4:	492a      	ldr	r1, [pc, #168]	; (80071a0 <HAL_RCC_ClockConfig+0x1d0>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80070f6:	fab0 f080 	clz	r0, r0
 80070fa:	f002 020f 	and.w	r2, r2, #15
 80070fe:	40c2      	lsrs	r2, r0
 8007100:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8007102:	fbb1 f1f2 	udiv	r1, r1, r2
 8007106:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800710c:	22f0      	movs	r2, #240	; 0xf0
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	fa92 f2a2 	rbit	r2, r2
 8007114:	fab2 f282 	clz	r2, r2
 8007118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711c:	40d3      	lsrs	r3, r2
 800711e:	4821      	ldr	r0, [pc, #132]	; (80071a4 <HAL_RCC_ClockConfig+0x1d4>)
 8007120:	4a21      	ldr	r2, [pc, #132]	; (80071a8 <HAL_RCC_ClockConfig+0x1d8>)
 8007122:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8007124:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007126:	fa21 f303 	lsr.w	r3, r1, r3
 800712a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800712c:	f7fe f834 	bl	8005198 <HAL_InitTick>
  return HAL_OK;
 8007130:	2000      	movs	r0, #0
}
 8007132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8007136:	491a      	ldr	r1, [pc, #104]	; (80071a0 <HAL_RCC_ClockConfig+0x1d0>)
 8007138:	e7e7      	b.n	800710a <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800713a:	f7fe f855 	bl	80051e8 <HAL_GetTick>
 800713e:	1bc0      	subs	r0, r0, r7
 8007140:	4540      	cmp	r0, r8
 8007142:	d822      	bhi.n	800718a <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007144:	686b      	ldr	r3, [r5, #4]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b04      	cmp	r3, #4
 800714c:	d1f5      	bne.n	800713a <HAL_RCC_ClockConfig+0x16a>
 800714e:	e794      	b.n	800707a <HAL_RCC_ClockConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007150:	f7fe f84a 	bl	80051e8 <HAL_GetTick>
 8007154:	1bc0      	subs	r0, r0, r7
 8007156:	4540      	cmp	r0, r8
 8007158:	d817      	bhi.n	800718a <HAL_RCC_ClockConfig+0x1ba>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800715a:	686b      	ldr	r3, [r5, #4]
 800715c:	f003 030c 	and.w	r3, r3, #12
 8007160:	2b08      	cmp	r3, #8
 8007162:	d1f5      	bne.n	8007150 <HAL_RCC_ClockConfig+0x180>
 8007164:	e789      	b.n	800707a <HAL_RCC_ClockConfig+0xaa>
 8007166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800716a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	4909      	ldr	r1, [pc, #36]	; (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007170:	6809      	ldr	r1, [r1, #0]
 8007172:	fa93 f3a3 	rbit	r3, r3
 8007176:	fab3 f383 	clz	r3, r3
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	420b      	tst	r3, r1
 8007184:	f47f af5e 	bne.w	8007044 <HAL_RCC_ClockConfig+0x74>
 8007188:	e787      	b.n	800709a <HAL_RCC_ClockConfig+0xca>
          return HAL_TIMEOUT;
 800718a:	2003      	movs	r0, #3
 800718c:	e786      	b.n	800709c <HAL_RCC_ClockConfig+0xcc>
 800718e:	bf00      	nop
 8007190:	40022000 	.word	0x40022000
 8007194:	40021000 	.word	0x40021000
 8007198:	08011c70 	.word	0x08011c70
 800719c:	08011c80 	.word	0x08011c80
 80071a0:	007a1200 	.word	0x007a1200
 80071a4:	08011e18 	.word	0x08011e18
 80071a8:	20000004 	.word	0x20000004

080071ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80071ac:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80071ae:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80071b0:	f003 010c 	and.w	r1, r3, #12
 80071b4:	2908      	cmp	r1, #8
 80071b6:	d001      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80071b8:	4810      	ldr	r0, [pc, #64]	; (80071fc <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80071ba:	4770      	bx	lr
{
 80071bc:	b430      	push	{r4, r5}
 80071be:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 80071c2:	fa90 f0a0 	rbit	r0, r0
 80071c6:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071c8:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071ce:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80071d6:	40c3      	lsrs	r3, r0
 80071d8:	4809      	ldr	r0, [pc, #36]	; (8007200 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071da:	4d0a      	ldr	r5, [pc, #40]	; (8007204 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071dc:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80071de:	4c07      	ldr	r4, [pc, #28]	; (80071fc <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071e0:	fab1 f181 	clz	r1, r1
 80071e4:	f002 030f 	and.w	r3, r2, #15
 80071e8:	40cb      	lsrs	r3, r1
 80071ea:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80071ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80071f0:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80071f2:	fb00 f003 	mul.w	r0, r0, r3
}
 80071f6:	4770      	bx	lr
 80071f8:	40021000 	.word	0x40021000
 80071fc:	007a1200 	.word	0x007a1200
 8007200:	08011c70 	.word	0x08011c70
 8007204:	08011c80 	.word	0x08011c80

08007208 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8007208:	4b01      	ldr	r3, [pc, #4]	; (8007210 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000004 	.word	0x20000004

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007216:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	fa92 f2a2 	rbit	r2, r2
 8007220:	fab2 f282 	clz	r2, r2
 8007224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007228:	40d3      	lsrs	r3, r2
 800722a:	4904      	ldr	r1, [pc, #16]	; (800723c <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 800722c:	4a04      	ldr	r2, [pc, #16]	; (8007240 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	6810      	ldr	r0, [r2, #0]
}    
 8007232:	40d8      	lsrs	r0, r3
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
 800723c:	08011e28 	.word	0x08011e28
 8007240:	20000004 	.word	0x20000004

08007244 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007244:	4b08      	ldr	r3, [pc, #32]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007246:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	fa92 f2a2 	rbit	r2, r2
 8007250:	fab2 f282 	clz	r2, r2
 8007254:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007258:	40d3      	lsrs	r3, r2
 800725a:	4904      	ldr	r1, [pc, #16]	; (800726c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800725c:	4a04      	ldr	r2, [pc, #16]	; (8007270 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800725e:	5ccb      	ldrb	r3, [r1, r3]
 8007260:	6810      	ldr	r0, [r2, #0]
} 
 8007262:	40d8      	lsrs	r0, r3
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40021000 	.word	0x40021000
 800726c:	08011e28 	.word	0x08011e28
 8007270:	20000004 	.word	0x20000004

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007278:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	03c6      	lsls	r6, r0, #15
{
 800727e:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007280:	d53e      	bpl.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007282:	4ba0      	ldr	r3, [pc, #640]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	00d5      	lsls	r5, r2, #3
 8007288:	f140 80f3 	bpl.w	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728c:	4d9e      	ldr	r5, [pc, #632]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800728e:	682a      	ldr	r2, [r5, #0]
 8007290:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 8007292:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	f140 80fc 	bpl.w	8007492 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800729a:	4d9a      	ldr	r5, [pc, #616]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800729c:	6861      	ldr	r1, [r4, #4]
 800729e:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072a0:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80072a4:	d020      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80072a6:	f401 7340 	and.w	r3, r1, #768	; 0x300
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01c      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072ae:	6a29      	ldr	r1, [r5, #32]
 80072b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072b4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80072b8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072bc:	4f93      	ldr	r7, [pc, #588]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80072be:	fab2 f282 	clz	r2, r2
 80072c2:	443a      	add	r2, r7
 80072c4:	0092      	lsls	r2, r2, #2
 80072c6:	f04f 0c01 	mov.w	ip, #1
 80072ca:	f8c2 c000 	str.w	ip, [r2]
 80072ce:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d2:	fab3 f383 	clz	r3, r3
 80072d6:	443b      	add	r3, r7
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072de:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80072e0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072e2:	f100 80ea 	bmi.w	80074ba <HAL_RCCEx_PeriphCLKConfig+0x246>
 80072e6:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80072e8:	4a86      	ldr	r2, [pc, #536]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80072ea:	6a13      	ldr	r3, [r2, #32]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072f4:	b11e      	cbz	r6, 80072fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f6:	69d3      	ldr	r3, [r2, #28]
 80072f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fc:	61d3      	str	r3, [r2, #28]
 80072fe:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007300:	07c3      	lsls	r3, r0, #31
 8007302:	d506      	bpl.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007304:	4a7f      	ldr	r2, [pc, #508]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007306:	68a1      	ldr	r1, [r4, #8]
 8007308:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800730a:	f023 0303 	bic.w	r3, r3, #3
 800730e:	430b      	orrs	r3, r1
 8007310:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007312:	0787      	lsls	r7, r0, #30
 8007314:	d506      	bpl.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007316:	4a7b      	ldr	r2, [pc, #492]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007318:	68e1      	ldr	r1, [r4, #12]
 800731a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800731c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007320:	430b      	orrs	r3, r1
 8007322:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007324:	0746      	lsls	r6, r0, #29
 8007326:	d506      	bpl.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007328:	4a76      	ldr	r2, [pc, #472]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800732a:	6921      	ldr	r1, [r4, #16]
 800732c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800732e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007332:	430b      	orrs	r3, r1
 8007334:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007336:	0685      	lsls	r5, r0, #26
 8007338:	d506      	bpl.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800733a:	4a72      	ldr	r2, [pc, #456]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800733c:	69e1      	ldr	r1, [r4, #28]
 800733e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007340:	f023 0310 	bic.w	r3, r3, #16
 8007344:	430b      	orrs	r3, r1
 8007346:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007348:	0381      	lsls	r1, r0, #14
 800734a:	d506      	bpl.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800734c:	4a6d      	ldr	r2, [pc, #436]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800734e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007350:	6853      	ldr	r3, [r2, #4]
 8007352:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007356:	430b      	orrs	r3, r1
 8007358:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800735a:	0642      	lsls	r2, r0, #25
 800735c:	d506      	bpl.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800735e:	4a69      	ldr	r2, [pc, #420]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007360:	6a21      	ldr	r1, [r4, #32]
 8007362:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007364:	f023 0320 	bic.w	r3, r3, #32
 8007368:	430b      	orrs	r3, r1
 800736a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800736c:	0343      	lsls	r3, r0, #13
 800736e:	d506      	bpl.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007370:	4a64      	ldr	r2, [pc, #400]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007372:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007374:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737a:	430b      	orrs	r3, r1
 800737c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800737e:	0707      	lsls	r7, r0, #28
 8007380:	d506      	bpl.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007382:	4a60      	ldr	r2, [pc, #384]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007384:	6961      	ldr	r1, [r4, #20]
 8007386:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007388:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800738c:	430b      	orrs	r3, r1
 800738e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007390:	06c6      	lsls	r6, r0, #27
 8007392:	d506      	bpl.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007394:	4a5b      	ldr	r2, [pc, #364]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007396:	69a1      	ldr	r1, [r4, #24]
 8007398:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800739a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800739e:	430b      	orrs	r3, r1
 80073a0:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073a2:	0585      	lsls	r5, r0, #22
 80073a4:	d506      	bpl.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073a6:	4a57      	ldr	r2, [pc, #348]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80073aa:	6853      	ldr	r3, [r2, #4]
 80073ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073b4:	0601      	lsls	r1, r0, #24
 80073b6:	d506      	bpl.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073b8:	4a52      	ldr	r2, [pc, #328]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80073bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80073be:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80073c2:	430b      	orrs	r3, r1
 80073c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80073c6:	05c2      	lsls	r2, r0, #23
 80073c8:	d506      	bpl.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80073ca:	4a4e      	ldr	r2, [pc, #312]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80073d0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80073d4:	430b      	orrs	r3, r1
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80073d8:	04c3      	lsls	r3, r0, #19
 80073da:	d506      	bpl.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80073dc:	4a49      	ldr	r2, [pc, #292]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80073e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80073ea:	0487      	lsls	r7, r0, #18
 80073ec:	d506      	bpl.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80073ee:	4a45      	ldr	r2, [pc, #276]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80073f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80073f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80073fc:	02c6      	lsls	r6, r0, #11
 80073fe:	d506      	bpl.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007400:	4a40      	ldr	r2, [pc, #256]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007404:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740a:	430b      	orrs	r3, r1
 800740c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800740e:	0285      	lsls	r5, r0, #10
 8007410:	d506      	bpl.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007412:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007416:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007418:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800741c:	430b      	orrs	r3, r1
 800741e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007420:	0241      	lsls	r1, r0, #9
 8007422:	d506      	bpl.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007424:	4a37      	ldr	r2, [pc, #220]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007426:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007428:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800742a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800742e:	430b      	orrs	r3, r1
 8007430:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007432:	0202      	lsls	r2, r0, #8
 8007434:	d506      	bpl.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007436:	4a33      	ldr	r2, [pc, #204]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800743a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800743c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007440:	430b      	orrs	r3, r1
 8007442:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007444:	01c3      	lsls	r3, r0, #7
 8007446:	d506      	bpl.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007448:	4a2e      	ldr	r2, [pc, #184]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800744a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800744c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800744e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007452:	430b      	orrs	r3, r1
 8007454:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007456:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800745a:	d007      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800745c:	4a29      	ldr	r2, [pc, #164]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800745e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007460:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007466:	430b      	orrs	r3, r1
 8007468:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800746a:	2000      	movs	r0, #0
}
 800746c:	b003      	add	sp, #12
 800746e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007472:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007474:	4d24      	ldr	r5, [pc, #144]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8007476:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800747a:	61da      	str	r2, [r3, #28]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007486:	682a      	ldr	r2, [r5, #0]
 8007488:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 800748a:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748e:	f53f af04 	bmi.w	800729a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007492:	682a      	ldr	r2, [r5, #0]
 8007494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007498:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800749a:	f7fd fea5 	bl	80051e8 <HAL_GetTick>
 800749e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	05d9      	lsls	r1, r3, #23
 80074a4:	f53f aef9 	bmi.w	800729a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a8:	f7fd fe9e 	bl	80051e8 <HAL_GetTick>
 80074ac:	1bc0      	subs	r0, r0, r7
 80074ae:	2864      	cmp	r0, #100	; 0x64
 80074b0:	d9f6      	bls.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
          return HAL_TIMEOUT;
 80074b2:	2003      	movs	r0, #3
}
 80074b4:	b003      	add	sp, #12
 80074b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ba:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 80074bc:	f7fd fe94 	bl	80051e8 <HAL_GetTick>
 80074c0:	f04f 0902 	mov.w	r9, #2
 80074c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c6:	e015      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80074c8:	fa99 f3a9 	rbit	r3, r9
 80074cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80074ce:	fa99 f3a9 	rbit	r3, r9
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	fa07 f303 	lsl.w	r3, r7, r3
 80074de:	4213      	tst	r3, r2
 80074e0:	f47f af01 	bne.w	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fd fe80 	bl	80051e8 <HAL_GetTick>
 80074e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80074ec:	eba0 0008 	sub.w	r0, r0, r8
 80074f0:	4298      	cmp	r0, r3
 80074f2:	d8de      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80074f4:	fa99 f3a9 	rbit	r3, r9
 80074f8:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0e3      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007500:	6a2a      	ldr	r2, [r5, #32]
 8007502:	e7e4      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007504:	40021000 	.word	0x40021000
 8007508:	40007000 	.word	0x40007000
 800750c:	10908100 	.word	0x10908100

08007510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007510:	b470      	push	{r4, r5, r6}
  uint32_t frequency = 0U;
  uint32_t srcclk = 0U;
#if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 8007512:	4db5      	ldr	r5, [pc, #724]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
{
 8007514:	4606      	mov	r6, r0
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 8007516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8007518:	b087      	sub	sp, #28
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 800751a:	466c      	mov	r4, sp
 800751c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751e:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8007522:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  uint16_t adc_pll_prediv_table[12] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 8007526:	e884 0003 	stmia.w	r4, {r0, r1}
  switch (PeriphClk)
 800752a:	f000 810d 	beq.w	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800752e:	d816      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8007530:	2e10      	cmp	r6, #16
 8007532:	f000 810e 	beq.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8007536:	d93e      	bls.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007538:	2e80      	cmp	r6, #128	; 0x80
 800753a:	f000 80d3 	beq.w	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800753e:	f200 8089 	bhi.w	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007542:	2e20      	cmp	r6, #32
 8007544:	f000 8122 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007548:	2e40      	cmp	r6, #64	; 0x40
 800754a:	d130      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    }
#if defined(RCC_CFGR3_I2C2SW)
  case RCC_PERIPHCLK_I2C2:
    {
      /* Get the current I2C2 source */
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800754c:	4ba7      	ldr	r3, [pc, #668]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800754e:	6b18      	ldr	r0, [r3, #48]	; 0x30

      /* Check if HSI is ready and if I2C2 clock selection is HSI */
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007550:	f010 0020 	ands.w	r0, r0, #32
 8007554:	d059      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
    {
      break;
    }
  }
  return(frequency);
}
 8007556:	b007      	add	sp, #28
 8007558:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetSysClockFreq();
 800755a:	f7ff be27 	b.w	80071ac <HAL_RCC_GetSysClockFreq>
  switch (PeriphClk)
 800755e:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8007562:	f000 810e 	beq.w	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007566:	d93f      	bls.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007568:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800756c:	f000 80b1 	beq.w	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007570:	d852      	bhi.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007572:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 8007576:	f000 80e2 	beq.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800757a:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 800757e:	d116      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8007580:	4b9a      	ldr	r3, [pc, #616]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007584:	0556      	lsls	r6, r2, #21
 8007586:	f140 80a8 	bpl.w	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800758a:	e050      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800758c:	4a97      	ldr	r2, [pc, #604]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800758e:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007590:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8007594:	f000 80cf 	beq.w	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007598:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800759c:	f000 8161 	beq.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80075a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075a4:	d0d7      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80075a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075aa:	f000 8089 	beq.w	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        frequency = 0U;
 80075ae:	2000      	movs	r0, #0
}
 80075b0:	b007      	add	sp, #28
 80075b2:	bc70      	pop	{r4, r5, r6}
 80075b4:	4770      	bx	lr
  switch (PeriphClk)
 80075b6:	2e02      	cmp	r6, #2
 80075b8:	f000 80ef 	beq.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80075bc:	d972      	bls.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80075be:	2e04      	cmp	r6, #4
 80075c0:	d0e4      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80075c2:	2e08      	cmp	r6, #8
 80075c4:	d1f3      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80075c6:	4b89      	ldr	r3, [pc, #548]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80075ca:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 80075ce:	f000 80b2 	beq.w	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80075d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075d6:	f000 8157 	beq.w	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075de:	d0ba      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80075e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075e4:	d06c      	beq.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80075e6:	e7e2      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  switch (PeriphClk)
 80075e8:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80075ec:	f000 8124 	beq.w	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80075f0:	d93e      	bls.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80075f2:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80075f6:	f000 8101 	beq.w	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80075fa:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80075fe:	d1d6      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007600:	4b7a      	ldr	r3, [pc, #488]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007602:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007604:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007608:	d1a5      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800760a:	681a      	ldr	r2, [r3, #0]
        frequency = HSI_VALUE;
 800760c:	4b78      	ldr	r3, [pc, #480]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800760e:	f012 0f02 	tst.w	r2, #2
 8007612:	bf18      	it	ne
 8007614:	4618      	movne	r0, r3
 8007616:	e7cb      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8007618:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 800761c:	f000 80dd 	beq.w	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 8007620:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8007624:	d1c3      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 8007626:	4b71      	ldr	r3, [pc, #452]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800762a:	0410      	lsls	r0, r2, #16
 800762c:	d555      	bpl.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	0199      	lsls	r1, r3, #6
 8007632:	d5bc      	bpl.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007634:	4a6d      	ldr	r2, [pc, #436]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
    pllclk = (HSE_VALUE/prediv) * pllmul;
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007636:	486e      	ldr	r0, [pc, #440]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007638:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800763a:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800763c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 800763e:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007642:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8007646:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007648:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 800764a:	fbb0 f0f2 	udiv	r0, r0, r2
 800764e:	fb00 f003 	mul.w	r0, r0, r3
 8007652:	e7ad      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8007654:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8007658:	f000 80af 	beq.w	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800765c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007660:	d1a5      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007662:	4b62      	ldr	r3, [pc, #392]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007664:	685b      	ldr	r3, [r3, #4]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 8007666:	021c      	lsls	r4, r3, #8
 8007668:	f57f af75 	bpl.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        frequency = 0xDEADDEADU;
 800766c:	4861      	ldr	r0, [pc, #388]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800766e:	e79f      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8007670:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8007674:	d19b      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 8007676:	4b5d      	ldr	r3, [pc, #372]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800767a:	0592      	lsls	r2, r2, #22
 800767c:	d52d      	bpl.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007684:	d094      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007686:	685a      	ldr	r2, [r3, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8007688:	6859      	ldr	r1, [r3, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800768a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    pllclk = (HSI_VALUE/prediv) * pllmul;
 800768c:	4858      	ldr	r0, [pc, #352]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  pllmul = ( pllmul >> 18U) + 2U;
 800768e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8007692:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007694:	f001 020f 	and.w	r2, r1, #15
 8007698:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 800769a:	fbb0 f0f2 	udiv	r0, r0, r2
 800769e:	fb00 f003 	mul.w	r0, r0, r3
 80076a2:	e785      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 80076a4:	2e01      	cmp	r6, #1
 80076a6:	d182      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80076a8:	4a50      	ldr	r2, [pc, #320]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80076aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076ac:	f013 0303 	ands.w	r3, r3, #3
 80076b0:	f000 80e6 	beq.w	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	f000 80d4 	beq.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	f43f af4b 	beq.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80076c0:	4b4a      	ldr	r3, [pc, #296]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80076c2:	6a1b      	ldr	r3, [r3, #32]
        frequency = LSE_VALUE;
 80076c4:	f013 0f02 	tst.w	r3, #2
 80076c8:	bf0c      	ite	eq
 80076ca:	2000      	moveq	r0, #0
 80076cc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80076d0:	e76e      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 80076d2:	4b46      	ldr	r3, [pc, #280]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80076d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80076d6:	0515      	lsls	r5, r2, #20
 80076d8:	d4d1      	bmi.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = SystemCoreClock;
 80076da:	4b47      	ldr	r3, [pc, #284]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80076dc:	6818      	ldr	r0, [r3, #0]
}
 80076de:	b007      	add	sp, #28
 80076e0:	bc70      	pop	{r4, r5, r6}
 80076e2:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80076e4:	4a41      	ldr	r2, [pc, #260]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80076e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 80076e8:	f413 73f8 	ands.w	r3, r3, #496	; 0x1f0
 80076ec:	d0f5      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80076ee:	6810      	ldr	r0, [r2, #0]
 80076f0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80076f4:	f43f af5c 	beq.w	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80076f8:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80076fa:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80076fc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80076fe:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8007702:	fa92 f2a2 	rbit	r2, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8007706:	fab2 f282 	clz	r2, r2
 800770a:	40d3      	lsrs	r3, r2
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	aa06      	add	r2, sp, #24
 8007712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 8007716:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800771a:	3202      	adds	r2, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800771c:	f000 010f 	and.w	r1, r0, #15
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8007720:	f833 4c18 	ldrh.w	r4, [r3, #-24]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007724:	4832      	ldr	r0, [pc, #200]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007726:	1c4b      	adds	r3, r1, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007728:	fbb0 f0f3 	udiv	r0, r0, r3
 800772c:	fb00 f002 	mul.w	r0, r0, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8007730:	fbb0 f0f4 	udiv	r0, r0, r4
 8007734:	e73c      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
}
 8007736:	b007      	add	sp, #28
 8007738:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetPCLK1Freq();
 800773a:	f7ff bd6b 	b.w	8007214 <HAL_RCC_GetPCLK1Freq>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 800773e:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007742:	0192      	lsls	r2, r2, #6
 8007744:	d5c9      	bpl.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007746:	e79a      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8007748:	4b28      	ldr	r3, [pc, #160]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800774a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800774c:	05d0      	lsls	r0, r2, #23
 800774e:	d5c4      	bpl.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007750:	e795      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007754:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007756:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 800775a:	d0ec      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800775c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007760:	d07f      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007766:	f43f aef6 	beq.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800776a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800776e:	f47f af1e 	bne.w	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8007772:	6a13      	ldr	r3, [r2, #32]
        frequency = LSE_VALUE;
 8007774:	f013 0f02 	tst.w	r3, #2
 8007778:	bf0c      	ite	eq
 800777a:	2000      	moveq	r0, #0
 800777c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007780:	e716      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8007782:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007786:	01d1      	lsls	r1, r2, #7
 8007788:	d5a7      	bpl.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800778a:	e778      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800778c:	4b17      	ldr	r3, [pc, #92]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800778e:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007790:	f010 0010 	ands.w	r0, r0, #16
 8007794:	f47f aedf 	bne.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007798:	e737      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800779a:	4a14      	ldr	r2, [pc, #80]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800779c:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800779e:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 80077a2:	d0c8      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80077a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077a8:	d05b      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80077aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ae:	f43f aed2 	beq.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80077b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077b6:	d0dc      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80077b8:	e6f9      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 80077ba:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80077bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 80077be:	f413 5378 	ands.w	r3, r3, #15872	; 0x3e00
 80077c2:	d08a      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80077c4:	6810      	ldr	r0, [r2, #0]
 80077c6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80077ca:	f43f aef1 	beq.w	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80077ce:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80077d0:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80077d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80077d4:	f44f 5278 	mov.w	r2, #15872	; 0x3e00
 80077d8:	e793      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80077dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80077de:	0494      	lsls	r4, r2, #18
 80077e0:	f57f af7b 	bpl.w	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80077e4:	e74b      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80077e6:	bf00      	nop
 80077e8:	0801189c 	.word	0x0801189c
 80077ec:	40021000 	.word	0x40021000
 80077f0:	007a1200 	.word	0x007a1200
 80077f4:	deaddead 	.word	0xdeaddead
 80077f8:	20000004 	.word	0x20000004
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80077fc:	4b26      	ldr	r3, [pc, #152]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007804:	f43f aed4 	beq.w	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007808:	685a      	ldr	r2, [r3, #4]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 800780a:	4824      	ldr	r0, [pc, #144]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 800780c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007810:	685a      	ldr	r2, [r3, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8007812:	6859      	ldr	r1, [r3, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8007814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 8007816:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800781a:	f103 0302 	add.w	r3, r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 800781e:	f001 020f 	and.w	r2, r1, #15
 8007822:	f102 0201 	add.w	r2, r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8007826:	fbb0 f0f2 	udiv	r0, r0, r2
 800782a:	fb00 f003 	mul.w	r0, r0, r3
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 800782e:	bf04      	itt	eq
 8007830:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 8007834:	0840      	lsreq	r0, r0, #1
 8007836:	e6bb      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007838:	4a17      	ldr	r2, [pc, #92]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800783a:	6a13      	ldr	r3, [r2, #32]
 800783c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007844:	d095      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784a:	d011      	beq.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800784c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007850:	f47f aead 	bne.w	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8007854:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 32U;
 8007856:	4812      	ldr	r0, [pc, #72]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>)
 8007858:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800785c:	bf08      	it	eq
 800785e:	2000      	moveq	r0, #0
 8007860:	e6a6      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007862:	6813      	ldr	r3, [r2, #0]
        frequency = HSI_VALUE;
 8007864:	480d      	ldr	r0, [pc, #52]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8007866:	f013 0f02 	tst.w	r3, #2
 800786a:	bf08      	it	eq
 800786c:	2000      	moveq	r0, #0
 800786e:	e69f      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007870:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8007872:	f013 0f02 	tst.w	r3, #2
 8007876:	f649 4040 	movw	r0, #40000	; 0x9c40
 800787a:	bf08      	it	eq
 800787c:	2000      	moveq	r0, #0
 800787e:	e697      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
}
 8007880:	b007      	add	sp, #28
 8007882:	bc70      	pop	{r4, r5, r6}
        frequency = HAL_RCC_GetPCLK2Freq();
 8007884:	f7ff bcde 	b.w	8007244 <HAL_RCC_GetPCLK2Freq>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007888:	4b03      	ldr	r3, [pc, #12]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
        frequency = HSI_VALUE;
 800788a:	4804      	ldr	r0, [pc, #16]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800788c:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 800788e:	f013 0f02 	tst.w	r3, #2
 8007892:	bf08      	it	eq
 8007894:	2000      	moveq	r0, #0
 8007896:	e68b      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8007898:	40021000 	.word	0x40021000
 800789c:	007a1200 	.word	0x007a1200
 80078a0:	0003d090 	.word	0x0003d090

080078a4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d076      	beq.n	8007996 <HAL_TIM_Base_Init+0xf2>
{ 
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80078aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80078ae:	4604      	mov	r4, r0
 80078b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80078b4:	b39b      	cbz	r3, 800791e <HAL_TIM_Base_Init+0x7a>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80078b6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b8:	4e43      	ldr	r6, [pc, #268]	; (80079c8 <HAL_TIM_Base_Init+0x124>)
 80078ba:	69a5      	ldr	r5, [r4, #24]
 80078bc:	68e0      	ldr	r0, [r4, #12]
 80078be:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 80078c0:	2302      	movs	r3, #2
 80078c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c6:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80078c8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ca:	d066      	beq.n	800799a <HAL_TIM_Base_Init+0xf6>
 80078cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80078d0:	d043      	beq.n	800795a <HAL_TIM_Base_Init+0xb6>
 80078d2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80078d6:	42b2      	cmp	r2, r6
 80078d8:	d026      	beq.n	8007928 <HAL_TIM_Base_Init+0x84>
 80078da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80078de:	42b2      	cmp	r2, r6
 80078e0:	d022      	beq.n	8007928 <HAL_TIM_Base_Init+0x84>
 80078e2:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80078e6:	42b2      	cmp	r2, r6
 80078e8:	d01e      	beq.n	8007928 <HAL_TIM_Base_Init+0x84>
 80078ea:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 80078ee:	42b2      	cmp	r2, r6
 80078f0:	d064      	beq.n	80079bc <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80078f6:	42b2      	cmp	r2, r6
 80078f8:	d05e      	beq.n	80079b8 <HAL_TIM_Base_Init+0x114>
 80078fa:	4e34      	ldr	r6, [pc, #208]	; (80079cc <HAL_TIM_Base_Init+0x128>)
 80078fc:	42b2      	cmp	r2, r6
 80078fe:	d05b      	beq.n	80079b8 <HAL_TIM_Base_Init+0x114>
 8007900:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007904:	42b2      	cmp	r2, r6
 8007906:	d057      	beq.n	80079b8 <HAL_TIM_Base_Init+0x114>
 8007908:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800790c:	42b2      	cmp	r2, r6
 800790e:	d053      	beq.n	80079b8 <HAL_TIM_Base_Init+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007914:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8007916:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007918:	62d0      	str	r0, [r2, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800791a:	6291      	str	r1, [r2, #40]	; 0x28
 800791c:	e017      	b.n	800794e <HAL_TIM_Base_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 800791e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007922:	f004 fc9d 	bl	800c260 <HAL_TIM_Base_MspInit>
 8007926:	e7c6      	b.n	80078b6 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007928:	68a6      	ldr	r6, [r4, #8]
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800792a:	4f29      	ldr	r7, [pc, #164]	; (80079d0 <HAL_TIM_Base_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007930:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007932:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007938:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800793a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800793e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007940:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007942:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007944:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007946:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007948:	d115      	bne.n	8007976 <HAL_TIM_Base_Init+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800794e:	2301      	movs	r3, #1
 8007950:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007952:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007954:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800795a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007962:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007968:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800796a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007970:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007972:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007974:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007976:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <HAL_TIM_Base_Init+0x130>)
 8007978:	429a      	cmp	r2, r3
 800797a:	d0e6      	beq.n	800794a <HAL_TIM_Base_Init+0xa6>
 800797c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007980:	429a      	cmp	r2, r3
 8007982:	d0e2      	beq.n	800794a <HAL_TIM_Base_Init+0xa6>
 8007984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007988:	429a      	cmp	r2, r3
 800798a:	d0de      	beq.n	800794a <HAL_TIM_Base_Init+0xa6>
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	429a      	cmp	r2, r3
 8007992:	d1dc      	bne.n	800794e <HAL_TIM_Base_Init+0xaa>
 8007994:	e7d9      	b.n	800794a <HAL_TIM_Base_Init+0xa6>
    return HAL_ERROR;
 8007996:	2001      	movs	r0, #1
}
 8007998:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800799a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800799c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80079a2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079a8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ae:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80079b0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80079b4:	6291      	str	r1, [r2, #40]	; 0x28
 80079b6:	e7c8      	b.n	800794a <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b8:	6926      	ldr	r6, [r4, #16]
 80079ba:	e7f3      	b.n	80079a4 <HAL_TIM_Base_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 80079bc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80079c2:	4333      	orrs	r3, r6
 80079c4:	e799      	b.n	80078fa <HAL_TIM_Base_Init+0x56>
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40013400 	.word	0x40013400
 80079d4:	40014000 	.word	0x40014000

080079d8 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 80079d8:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 80079da:	6803      	ldr	r3, [r0, #0]
{
 80079dc:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80079de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80079e2:	6a19      	ldr	r1, [r3, #32]
 80079e4:	f241 1211 	movw	r2, #4369	; 0x1111
 80079e8:	4211      	tst	r1, r2
{
 80079ea:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 80079ec:	d108      	bne.n	8007a00 <HAL_TIM_Base_DeInit+0x28>
 80079ee:	6a19      	ldr	r1, [r3, #32]
 80079f0:	f240 4244 	movw	r2, #1092	; 0x444
 80079f4:	4211      	tst	r1, r2
 80079f6:	d103      	bne.n	8007a00 <HAL_TIM_Base_DeInit+0x28>
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8007a00:	4620      	mov	r0, r4
 8007a02:	f004 fcd1 	bl	800c3a8 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8007a06:	2000      	movs	r0, #0
 8007a08:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007a0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	bf00      	nop

08007a14 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8007a14:	6801      	ldr	r1, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8007a16:	2202      	movs	r2, #2
{
 8007a18:	b410      	push	{r4}
  htim->State= HAL_TIM_STATE_BUSY;
 8007a1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8007a1e:	680a      	ldr	r2, [r1, #0]
  htim->State= HAL_TIM_STATE_READY;
 8007a20:	2401      	movs	r4, #1
{
 8007a22:	4603      	mov	r3, r0
  __HAL_TIM_ENABLE(htim);
 8007a24:	4322      	orrs	r2, r4
 8007a26:	600a      	str	r2, [r1, #0]
}
 8007a28:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007a2a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
}
 8007a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8007a34:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8007a36:	6803      	ldr	r3, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8007a38:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8007a3c:	6a19      	ldr	r1, [r3, #32]
 8007a3e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007a42:	4211      	tst	r1, r2
 8007a44:	d108      	bne.n	8007a58 <HAL_TIM_Base_Stop+0x24>
 8007a46:	6a19      	ldr	r1, [r3, #32]
 8007a48:	f240 4244 	movw	r2, #1092	; 0x444
 8007a4c:	4211      	tst	r1, r2
 8007a4e:	d103      	bne.n	8007a58 <HAL_TIM_Base_Stop+0x24>
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007a5e:	2000      	movs	r0, #0
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop

08007a64 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a64:	6803      	ldr	r3, [r0, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
}
 8007a76:	2000      	movs	r0, #0
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop

08007a7c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a7c:	6803      	ldr	r3, [r0, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007a86:	6a19      	ldr	r1, [r3, #32]
 8007a88:	f241 1211 	movw	r2, #4369	; 0x1111
 8007a8c:	4211      	tst	r1, r2
 8007a8e:	d108      	bne.n	8007aa2 <HAL_TIM_Base_Stop_IT+0x26>
 8007a90:	6a19      	ldr	r1, [r3, #32]
 8007a92:	f240 4244 	movw	r2, #1092	; 0x444
 8007a96:	4211      	tst	r1, r2
 8007a98:	d103      	bne.n	8007aa2 <HAL_TIM_Base_Stop_IT+0x26>
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <HAL_TIM_OC_MspInit>:
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d076      	beq.n	8007b9e <HAL_TIM_OC_Init+0xf2>
{
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007ab2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007abc:	b39b      	cbz	r3, 8007b26 <HAL_TIM_OC_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8007abe:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac0:	4e43      	ldr	r6, [pc, #268]	; (8007bd0 <HAL_TIM_OC_Init+0x124>)
 8007ac2:	69a5      	ldr	r5, [r4, #24]
 8007ac4:	68e0      	ldr	r0, [r4, #12]
 8007ac6:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ace:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007ad0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad2:	d066      	beq.n	8007ba2 <HAL_TIM_OC_Init+0xf6>
 8007ad4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007ad8:	d043      	beq.n	8007b62 <HAL_TIM_OC_Init+0xb6>
 8007ada:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007ade:	42b2      	cmp	r2, r6
 8007ae0:	d026      	beq.n	8007b30 <HAL_TIM_OC_Init+0x84>
 8007ae2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007ae6:	42b2      	cmp	r2, r6
 8007ae8:	d022      	beq.n	8007b30 <HAL_TIM_OC_Init+0x84>
 8007aea:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007aee:	42b2      	cmp	r2, r6
 8007af0:	d01e      	beq.n	8007b30 <HAL_TIM_OC_Init+0x84>
 8007af2:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007af6:	42b2      	cmp	r2, r6
 8007af8:	d064      	beq.n	8007bc4 <HAL_TIM_OC_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007afa:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007afe:	42b2      	cmp	r2, r6
 8007b00:	d05e      	beq.n	8007bc0 <HAL_TIM_OC_Init+0x114>
 8007b02:	4e34      	ldr	r6, [pc, #208]	; (8007bd4 <HAL_TIM_OC_Init+0x128>)
 8007b04:	42b2      	cmp	r2, r6
 8007b06:	d05b      	beq.n	8007bc0 <HAL_TIM_OC_Init+0x114>
 8007b08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007b0c:	42b2      	cmp	r2, r6
 8007b0e:	d057      	beq.n	8007bc0 <HAL_TIM_OC_Init+0x114>
 8007b10:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007b14:	42b2      	cmp	r2, r6
 8007b16:	d053      	beq.n	8007bc0 <HAL_TIM_OC_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007b1e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b20:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007b22:	6291      	str	r1, [r2, #40]	; 0x28
 8007b24:	e017      	b.n	8007b56 <HAL_TIM_OC_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 8007b26:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007b2a:	f7ff ffbd 	bl	8007aa8 <HAL_TIM_OC_MspInit>
 8007b2e:	e7c6      	b.n	8007abe <HAL_TIM_OC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007b30:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007b32:	4f29      	ldr	r7, [pc, #164]	; (8007bd8 <HAL_TIM_OC_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b38:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b40:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b46:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007b48:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007b4a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b4c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007b4e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007b50:	d115      	bne.n	8007b7e <HAL_TIM_OC_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 8007b52:	6963      	ldr	r3, [r4, #20]
 8007b54:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007b56:	2301      	movs	r3, #1
 8007b58:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007b5a:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007b5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007b62:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b64:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b6a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b70:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b76:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007b78:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b7a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007b7c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007b7e:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <HAL_TIM_OC_Init+0x130>)
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d0e6      	beq.n	8007b52 <HAL_TIM_OC_Init+0xa6>
 8007b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d0e2      	beq.n	8007b52 <HAL_TIM_OC_Init+0xa6>
 8007b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d0de      	beq.n	8007b52 <HAL_TIM_OC_Init+0xa6>
 8007b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d1dc      	bne.n	8007b56 <HAL_TIM_OC_Init+0xaa>
 8007b9c:	e7d9      	b.n	8007b52 <HAL_TIM_OC_Init+0xa6>
    return HAL_ERROR;
 8007b9e:	2001      	movs	r0, #1
}
 8007ba0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007ba2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007baa:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007bb8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bba:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007bbc:	6291      	str	r1, [r2, #40]	; 0x28
 8007bbe:	e7c8      	b.n	8007b52 <HAL_TIM_OC_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc0:	6926      	ldr	r6, [r4, #16]
 8007bc2:	e7f3      	b.n	8007bac <HAL_TIM_OC_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007bc4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007bca:	4333      	orrs	r3, r6
 8007bcc:	e799      	b.n	8007b02 <HAL_TIM_OC_Init+0x56>
 8007bce:	bf00      	nop
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40014400 	.word	0x40014400
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000

08007be0 <HAL_TIM_PWM_MspInit>:
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d076      	beq.n	8007cd6 <HAL_TIM_PWM_Init+0xf2>
{
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007bea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bee:	4604      	mov	r4, r0
 8007bf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bf4:	b39b      	cbz	r3, 8007c5e <HAL_TIM_PWM_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007bf6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf8:	4e43      	ldr	r6, [pc, #268]	; (8007d08 <HAL_TIM_PWM_Init+0x124>)
 8007bfa:	69a5      	ldr	r5, [r4, #24]
 8007bfc:	68e0      	ldr	r0, [r4, #12]
 8007bfe:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007c00:	2302      	movs	r3, #2
 8007c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c06:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007c08:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c0a:	d066      	beq.n	8007cda <HAL_TIM_PWM_Init+0xf6>
 8007c0c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007c10:	d043      	beq.n	8007c9a <HAL_TIM_PWM_Init+0xb6>
 8007c12:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007c16:	42b2      	cmp	r2, r6
 8007c18:	d026      	beq.n	8007c68 <HAL_TIM_PWM_Init+0x84>
 8007c1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007c1e:	42b2      	cmp	r2, r6
 8007c20:	d022      	beq.n	8007c68 <HAL_TIM_PWM_Init+0x84>
 8007c22:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007c26:	42b2      	cmp	r2, r6
 8007c28:	d01e      	beq.n	8007c68 <HAL_TIM_PWM_Init+0x84>
 8007c2a:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007c2e:	42b2      	cmp	r2, r6
 8007c30:	d064      	beq.n	8007cfc <HAL_TIM_PWM_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c32:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007c36:	42b2      	cmp	r2, r6
 8007c38:	d05e      	beq.n	8007cf8 <HAL_TIM_PWM_Init+0x114>
 8007c3a:	4e34      	ldr	r6, [pc, #208]	; (8007d0c <HAL_TIM_PWM_Init+0x128>)
 8007c3c:	42b2      	cmp	r2, r6
 8007c3e:	d05b      	beq.n	8007cf8 <HAL_TIM_PWM_Init+0x114>
 8007c40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007c44:	42b2      	cmp	r2, r6
 8007c46:	d057      	beq.n	8007cf8 <HAL_TIM_PWM_Init+0x114>
 8007c48:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007c4c:	42b2      	cmp	r2, r6
 8007c4e:	d053      	beq.n	8007cf8 <HAL_TIM_PWM_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c54:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007c56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c58:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c5a:	6291      	str	r1, [r2, #40]	; 0x28
 8007c5c:	e017      	b.n	8007c8e <HAL_TIM_PWM_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 8007c5e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007c62:	f7ff ffbd 	bl	8007be0 <HAL_TIM_PWM_MspInit>
 8007c66:	e7c6      	b.n	8007bf6 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007c68:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c6a:	4f29      	ldr	r7, [pc, #164]	; (8007d10 <HAL_TIM_PWM_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c70:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c72:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c78:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c80:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007c82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c86:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007c88:	d115      	bne.n	8007cb6 <HAL_TIM_PWM_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007c92:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007c9a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c9c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ca2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cae:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007cb0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007cb4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <HAL_TIM_PWM_Init+0x130>)
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0e6      	beq.n	8007c8a <HAL_TIM_PWM_Init+0xa6>
 8007cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d0e2      	beq.n	8007c8a <HAL_TIM_PWM_Init+0xa6>
 8007cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d0de      	beq.n	8007c8a <HAL_TIM_PWM_Init+0xa6>
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d1dc      	bne.n	8007c8e <HAL_TIM_PWM_Init+0xaa>
 8007cd4:	e7d9      	b.n	8007c8a <HAL_TIM_PWM_Init+0xa6>
    return HAL_ERROR;
 8007cd6:	2001      	movs	r0, #1
}
 8007cd8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007cda:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cdc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ce2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007cf0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007cf4:	6291      	str	r1, [r2, #40]	; 0x28
 8007cf6:	e7c8      	b.n	8007c8a <HAL_TIM_PWM_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cf8:	6926      	ldr	r6, [r4, #16]
 8007cfa:	e7f3      	b.n	8007ce4 <HAL_TIM_PWM_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007cfc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d02:	4333      	orrs	r3, r6
 8007d04:	e799      	b.n	8007c3a <HAL_TIM_PWM_Init+0x56>
 8007d06:	bf00      	nop
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	40013400 	.word	0x40013400
 8007d14:	40014000 	.word	0x40014000

08007d18 <HAL_TIM_PWM_Start>:
 8007d18:	6803      	ldr	r3, [r0, #0]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	6a18      	ldr	r0, [r3, #32]
 8007d1e:	fa02 f101 	lsl.w	r1, r2, r1
 8007d22:	ea20 0001 	bic.w	r0, r0, r1
 8007d26:	b410      	push	{r4}
 8007d28:	6218      	str	r0, [r3, #32]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	4c11      	ldr	r4, [pc, #68]	; (8007d74 <HAL_TIM_PWM_Start+0x5c>)
 8007d2e:	4311      	orrs	r1, r2
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	6219      	str	r1, [r3, #32]
 8007d34:	d012      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x44>
 8007d36:	4a10      	ldr	r2, [pc, #64]	; (8007d78 <HAL_TIM_PWM_Start+0x60>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00f      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x44>
 8007d3c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x44>
 8007d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x44>
 8007d4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <HAL_TIM_PWM_Start+0x44>
 8007d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d103      	bne.n	8007d64 <HAL_TIM_PWM_Start+0x4c>
 8007d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d62:	645a      	str	r2, [r3, #68]	; 0x44
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	2000      	movs	r0, #0
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	4770      	bx	lr
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40013400 	.word	0x40013400

08007d7c <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d7c:	6803      	ldr	r3, [r0, #0]
{   
 8007d7e:	b430      	push	{r4, r5}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d80:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8007d82:	4d20      	ldr	r5, [pc, #128]	; (8007e04 <HAL_TIM_PWM_Stop+0x88>)
  tmp = TIM_CCER_CC1E << Channel;
 8007d84:	2401      	movs	r4, #1
 8007d86:	fa04 f101 	lsl.w	r1, r4, r1
  TIMx->CCER &= ~tmp;
 8007d8a:	ea22 0201 	bic.w	r2, r2, r1
 8007d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	d026      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
 8007d98:	4a1b      	ldr	r2, [pc, #108]	; (8007e08 <HAL_TIM_PWM_Stop+0x8c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d023      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
 8007d9e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d01f      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
 8007da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01b      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
 8007dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d017      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
 8007db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_TIM_PWM_Stop+0x6a>
  __HAL_TIM_DISABLE(htim);
 8007dbe:	6a19      	ldr	r1, [r3, #32]
 8007dc0:	f241 1211 	movw	r2, #4369	; 0x1111
 8007dc4:	4211      	tst	r1, r2
 8007dc6:	d108      	bne.n	8007dda <HAL_TIM_PWM_Stop+0x5e>
 8007dc8:	6a19      	ldr	r1, [r3, #32]
 8007dca:	f240 4244 	movw	r2, #1092	; 0x444
 8007dce:	4211      	tst	r1, r2
 8007dd0:	d103      	bne.n	8007dda <HAL_TIM_PWM_Stop+0x5e>
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
} 
 8007de0:	bc30      	pop	{r4, r5}
 8007de2:	2000      	movs	r0, #0
 8007de4:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8007de6:	6a19      	ldr	r1, [r3, #32]
 8007de8:	f241 1211 	movw	r2, #4369	; 0x1111
 8007dec:	4211      	tst	r1, r2
 8007dee:	d1e6      	bne.n	8007dbe <HAL_TIM_PWM_Stop+0x42>
 8007df0:	6a19      	ldr	r1, [r3, #32]
 8007df2:	f240 4244 	movw	r2, #1092	; 0x444
 8007df6:	4211      	tst	r1, r2
 8007df8:	d1e1      	bne.n	8007dbe <HAL_TIM_PWM_Stop+0x42>
 8007dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
 8007e02:	e7dc      	b.n	8007dbe <HAL_TIM_PWM_Stop+0x42>
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40013400 	.word	0x40013400

08007e0c <HAL_TIM_IC_MspInit>:
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d076      	beq.n	8007f02 <HAL_TIM_IC_Init+0xf2>
{
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007e16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e20:	b39b      	cbz	r3, 8007e8a <HAL_TIM_IC_Init+0x7a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007e22:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e24:	4e43      	ldr	r6, [pc, #268]	; (8007f34 <HAL_TIM_IC_Init+0x124>)
 8007e26:	69a5      	ldr	r5, [r4, #24]
 8007e28:	68e0      	ldr	r0, [r4, #12]
 8007e2a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY; 
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e32:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007e34:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e36:	d066      	beq.n	8007f06 <HAL_TIM_IC_Init+0xf6>
 8007e38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007e3c:	d043      	beq.n	8007ec6 <HAL_TIM_IC_Init+0xb6>
 8007e3e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007e42:	42b2      	cmp	r2, r6
 8007e44:	d026      	beq.n	8007e94 <HAL_TIM_IC_Init+0x84>
 8007e46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e4a:	42b2      	cmp	r2, r6
 8007e4c:	d022      	beq.n	8007e94 <HAL_TIM_IC_Init+0x84>
 8007e4e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007e52:	42b2      	cmp	r2, r6
 8007e54:	d01e      	beq.n	8007e94 <HAL_TIM_IC_Init+0x84>
 8007e56:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007e5a:	42b2      	cmp	r2, r6
 8007e5c:	d064      	beq.n	8007f28 <HAL_TIM_IC_Init+0x118>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e5e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007e62:	42b2      	cmp	r2, r6
 8007e64:	d05e      	beq.n	8007f24 <HAL_TIM_IC_Init+0x114>
 8007e66:	4e34      	ldr	r6, [pc, #208]	; (8007f38 <HAL_TIM_IC_Init+0x128>)
 8007e68:	42b2      	cmp	r2, r6
 8007e6a:	d05b      	beq.n	8007f24 <HAL_TIM_IC_Init+0x114>
 8007e6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e70:	42b2      	cmp	r2, r6
 8007e72:	d057      	beq.n	8007f24 <HAL_TIM_IC_Init+0x114>
 8007e74:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007e78:	42b2      	cmp	r2, r6
 8007e7a:	d053      	beq.n	8007f24 <HAL_TIM_IC_Init+0x114>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e80:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007e82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007e86:	6291      	str	r1, [r2, #40]	; 0x28
 8007e88:	e017      	b.n	8007eba <HAL_TIM_IC_Init+0xaa>
    htim->Lock = HAL_UNLOCKED;
 8007e8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8007e8e:	f7ff ffbd 	bl	8007e0c <HAL_TIM_IC_MspInit>
 8007e92:	e7c6      	b.n	8007e22 <HAL_TIM_IC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007e94:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007e96:	4f29      	ldr	r7, [pc, #164]	; (8007f3c <HAL_TIM_IC_Init+0x12c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e9c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eaa:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007eac:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8007eae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007eb2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007eb4:	d115      	bne.n	8007ee2 <HAL_TIM_IC_Init+0xd2>
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007ebe:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8007ec0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007ec6:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ece:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eda:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007edc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ede:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007ee0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007ee2:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <HAL_TIM_IC_Init+0x130>)
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d0e6      	beq.n	8007eb6 <HAL_TIM_IC_Init+0xa6>
 8007ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d0e2      	beq.n	8007eb6 <HAL_TIM_IC_Init+0xa6>
 8007ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d0de      	beq.n	8007eb6 <HAL_TIM_IC_Init+0xa6>
 8007ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d1dc      	bne.n	8007eba <HAL_TIM_IC_Init+0xaa>
 8007f00:	e7d9      	b.n	8007eb6 <HAL_TIM_IC_Init+0xa6>
    return HAL_ERROR;
 8007f02:	2001      	movs	r0, #1
}
 8007f04:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007f06:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f08:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f0e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f14:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007f1c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f1e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007f20:	6291      	str	r1, [r2, #40]	; 0x28
 8007f22:	e7c8      	b.n	8007eb6 <HAL_TIM_IC_Init+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f24:	6926      	ldr	r6, [r4, #16]
 8007f26:	e7f3      	b.n	8007f10 <HAL_TIM_IC_Init+0x100>
    tmpcr1 |= Structure->CounterMode;
 8007f28:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f2e:	4333      	orrs	r3, r6
 8007f30:	e799      	b.n	8007e66 <HAL_TIM_IC_Init+0x56>
 8007f32:	bf00      	nop
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40013400 	.word	0x40013400
 8007f40:	40014000 	.word	0x40014000

08007f44 <HAL_TIM_OnePulse_MspInit>:
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop

08007f48 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f000 8084 	beq.w	8008056 <HAL_TIM_OnePulse_Init+0x10e>
{
 8007f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8007f50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d035      	beq.n	8007fcc <HAL_TIM_OnePulse_Init+0x84>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f60:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f62:	4e49      	ldr	r6, [pc, #292]	; (8008088 <HAL_TIM_OnePulse_Init+0x140>)
 8007f64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007f68:	68e0      	ldr	r0, [r4, #12]
 8007f6a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f72:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8007f74:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f76:	d070      	beq.n	800805a <HAL_TIM_OnePulse_Init+0x112>
 8007f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7c:	d04c      	beq.n	8008018 <HAL_TIM_OnePulse_Init+0xd0>
 8007f7e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007f82:	42b3      	cmp	r3, r6
 8007f84:	d027      	beq.n	8007fd6 <HAL_TIM_OnePulse_Init+0x8e>
 8007f86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f8a:	42b3      	cmp	r3, r6
 8007f8c:	d023      	beq.n	8007fd6 <HAL_TIM_OnePulse_Init+0x8e>
 8007f8e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8007f92:	42b3      	cmp	r3, r6
 8007f94:	d01f      	beq.n	8007fd6 <HAL_TIM_OnePulse_Init+0x8e>
 8007f96:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8007f9a:	42b3      	cmp	r3, r6
 8007f9c:	d06f      	beq.n	800807e <HAL_TIM_OnePulse_Init+0x136>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8007fa2:	42b3      	cmp	r3, r6
 8007fa4:	d069      	beq.n	800807a <HAL_TIM_OnePulse_Init+0x132>
 8007fa6:	4e39      	ldr	r6, [pc, #228]	; (800808c <HAL_TIM_OnePulse_Init+0x144>)
 8007fa8:	42b3      	cmp	r3, r6
 8007faa:	d066      	beq.n	800807a <HAL_TIM_OnePulse_Init+0x132>
 8007fac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	d062      	beq.n	800807a <HAL_TIM_OnePulse_Init+0x132>
 8007fb4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007fb8:	42b3      	cmp	r3, r6
 8007fba:	d05e      	beq.n	800807a <HAL_TIM_OnePulse_Init+0x132>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fc0:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8007fc4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007fc8:	6299      	str	r1, [r3, #40]	; 0x28
 8007fca:	e018      	b.n	8007ffe <HAL_TIM_OnePulse_Init+0xb6>
    htim->Lock = HAL_UNLOCKED;
 8007fcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8007fd0:	f7ff ffb8 	bl	8007f44 <HAL_TIM_OnePulse_MspInit>
 8007fd4:	e7c4      	b.n	8007f60 <HAL_TIM_OnePulse_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 8007fd6:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007fd8:	4f2d      	ldr	r7, [pc, #180]	; (8008090 <HAL_TIM_OnePulse_Init+0x148>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007fde:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fe2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fec:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007ff0:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8007ff2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007ff6:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8007ff8:	d11d      	bne.n	8008036 <HAL_TIM_OnePulse_Init+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8007ffa:	6962      	ldr	r2, [r4, #20]
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007ffe:	2601      	movs	r6, #1
 8008000:	615e      	str	r6, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	f022 0208 	bic.w	r2, r2, #8
 8008008:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	432a      	orrs	r2, r5
 800800e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008010:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8008012:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8008016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8008018:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800801a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800801c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008020:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8008022:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008026:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800802c:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8008030:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008032:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008034:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <HAL_TIM_OnePulse_Init+0x14c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d0de      	beq.n	8007ffa <HAL_TIM_OnePulse_Init+0xb2>
 800803c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008040:	4293      	cmp	r3, r2
 8008042:	d0da      	beq.n	8007ffa <HAL_TIM_OnePulse_Init+0xb2>
 8008044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008048:	4293      	cmp	r3, r2
 800804a:	d0d6      	beq.n	8007ffa <HAL_TIM_OnePulse_Init+0xb2>
 800804c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008050:	4293      	cmp	r3, r2
 8008052:	d1d4      	bne.n	8007ffe <HAL_TIM_OnePulse_Init+0xb6>
 8008054:	e7d1      	b.n	8007ffa <HAL_TIM_OnePulse_Init+0xb2>
    return HAL_ERROR;
 8008056:	2001      	movs	r0, #1
}
 8008058:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800805a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800805c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008062:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8008064:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008068:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800806a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800806e:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8008072:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008074:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008076:	6299      	str	r1, [r3, #40]	; 0x28
 8008078:	e7bf      	b.n	8007ffa <HAL_TIM_OnePulse_Init+0xb2>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800807a:	6926      	ldr	r6, [r4, #16]
 800807c:	e7f2      	b.n	8008064 <HAL_TIM_OnePulse_Init+0x11c>
    tmpcr1 |= Structure->CounterMode;
 800807e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008084:	4332      	orrs	r2, r6
 8008086:	e78e      	b.n	8007fa6 <HAL_TIM_OnePulse_Init+0x5e>
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40014400 	.word	0x40014400
 8008090:	40013400 	.word	0x40013400
 8008094:	40014000 	.word	0x40014000

08008098 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8008098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800809c:	2b01      	cmp	r3, #1
 800809e:	f000 8099 	beq.w	80081d4 <HAL_TIM_IC_ConfigChannel+0x13c>
{
 80080a2:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80080a6:	2401      	movs	r4, #1
 80080a8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80080b0:	e9d1 5700 	ldrd	r5, r7, [r1]
 80080b4:	6803      	ldr	r3, [r0, #0]
 80080b6:	e9d1 6402 	ldrd	r6, r4, [r1, #8]
  if (Channel == TIM_CHANNEL_1)
 80080ba:	b372      	cbz	r2, 800811a <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 80080bc:	2a04      	cmp	r2, #4
 80080be:	d067      	beq.n	8008190 <HAL_TIM_IC_ConfigChannel+0xf8>
  else if (Channel == TIM_CHANNEL_3)
 80080c0:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080c2:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80080c4:	f000 8088 	beq.w	80081d8 <HAL_TIM_IC_ConfigChannel+0x140>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080ce:	69d9      	ldr	r1, [r3, #28]
  tmpccer = TIMx->CCER;
 80080d0:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080d4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080d8:	0324      	lsls	r4, r4, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080da:	032a      	lsls	r2, r5, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080dc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080e0:	b2a4      	uxth	r4, r4
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080e2:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080e6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080ea:	f42c 4c20 	bic.w	ip, ip, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080ee:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080f2:	430c      	orrs	r4, r1
  TIMx->CCMR2 = tmpccmr2;
 80080f4:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080f6:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080f8:	69da      	ldr	r2, [r3, #28]
 80080fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080fe:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8008106:	61de      	str	r6, [r3, #28]
  __HAL_UNLOCK(htim);
 8008108:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800810a:	2201      	movs	r2, #1
 800810c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008110:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008114:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK; 
 8008116:	4618      	mov	r0, r3
}
 8008118:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811a:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800811c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8008218 <HAL_TIM_IC_ConfigChannel+0x180>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	621a      	str	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008126:	4563      	cmp	r3, ip
  tmpccmr1 = TIMx->CCMR1;
 8008128:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800812a:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800812c:	d019      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008132:	d016      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 8008134:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 8008138:	4563      	cmp	r3, ip
 800813a:	d012      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 800813c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8008140:	4563      	cmp	r3, ip
 8008142:	d00e      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 8008144:	f50c 3c96 	add.w	ip, ip, #76800	; 0x12c00
 8008148:	4563      	cmp	r3, ip
 800814a:	d00a      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 800814c:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 8008150:	4563      	cmp	r3, ip
 8008152:	d006      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
 8008154:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8008158:	4563      	cmp	r3, ip
 800815a:	d002      	beq.n	8008162 <HAL_TIM_IC_ConfigChannel+0xca>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800815c:	f041 0101 	orr.w	r1, r1, #1
 8008160:	e002      	b.n	8008168 <HAL_TIM_IC_ConfigChannel+0xd0>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008162:	f021 0103 	bic.w	r1, r1, #3
    tmpccmr1 |= TIM_ICSelection;
 8008166:	4339      	orrs	r1, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008168:	0124      	lsls	r4, r4, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800816a:	f022 070a 	bic.w	r7, r2, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800816e:	b2e4      	uxtb	r4, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008170:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008174:	f005 020a 	and.w	r2, r5, #10
 8008178:	433a      	orrs	r2, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800817a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800817c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800817e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	f022 020c 	bic.w	r2, r2, #12
 8008186:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	4316      	orrs	r6, r2
 800818c:	619e      	str	r6, [r3, #24]
 800818e:	e7bb      	b.n	8008108 <HAL_TIM_IC_ConfigChannel+0x70>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008190:	6a1a      	ldr	r2, [r3, #32]
 8008192:	f022 0210 	bic.w	r2, r2, #16
 8008196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008198:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800819a:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800819e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081a2:	0324      	lsls	r4, r4, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081a4:	012a      	lsls	r2, r5, #4
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081a6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081aa:	b2a4      	uxth	r4, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081ac:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081b0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081b4:	f02c 0ca0 	bic.w	ip, ip, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081b8:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081bc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1 ;
 80081be:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c0:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081c8:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80081d0:	619e      	str	r6, [r3, #24]
 80081d2:	e799      	b.n	8008108 <HAL_TIM_IC_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 80081d4:	2002      	movs	r0, #2
}
 80081d6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081de:	69d9      	ldr	r1, [r3, #28]
  tmpccer = TIMx->CCER;
 80081e0:	f8d3 c020 	ldr.w	ip, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081e4:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081e8:	0124      	lsls	r4, r4, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081ea:	022a      	lsls	r2, r5, #8
  tmpccmr2 |= TIM_ICSelection;
 80081ec:	4339      	orrs	r1, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081ee:	b2e4      	uxtb	r4, r4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081f0:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081f4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081f8:	f42c 6c20 	bic.w	ip, ip, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081fc:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008200:	4321      	orrs	r1, r4
  TIMx->CCMR2 = tmpccmr2;
 8008202:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8008204:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	f022 020c 	bic.w	r2, r2, #12
 800820c:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	4316      	orrs	r6, r2
 8008212:	61de      	str	r6, [r3, #28]
 8008214:	e778      	b.n	8008108 <HAL_TIM_IC_ConfigChannel+0x70>
 8008216:	bf00      	nop
 8008218:	40012c00 	.word	0x40012c00

0800821c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800821c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d068      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8008226:	6803      	ldr	r3, [r0, #0]
{
 8008228:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800822a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800822e:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8008230:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008232:	4a5e      	ldr	r2, [pc, #376]	; (80083ac <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 8008234:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008236:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 800823a:	f04f 0501 	mov.w	r5, #1
 800823e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8008242:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8008244:	f000 809a 	beq.w	800837c <HAL_TIM_ConfigClockSource+0x160>
 8008248:	d919      	bls.n	800827e <HAL_TIM_ConfigClockSource+0x62>
 800824a:	2c70      	cmp	r4, #112	; 0x70
 800824c:	f000 8082 	beq.w	8008354 <HAL_TIM_ConfigClockSource+0x138>
 8008250:	d92b      	bls.n	80082aa <HAL_TIM_ConfigClockSource+0x8e>
 8008252:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008256:	d076      	beq.n	8008346 <HAL_TIM_ConfigClockSource+0x12a>
 8008258:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800825c:	d11c      	bne.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800825e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8008262:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8008264:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008266:	432a      	orrs	r2, r5
 8008268:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800826c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008270:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8008272:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800827a:	609a      	str	r2, [r3, #8]
    break;
 800827c:	e00c      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 800827e:	2c10      	cmp	r4, #16
 8008280:	d042      	beq.n	8008308 <HAL_TIM_ConfigClockSource+0xec>
 8008282:	d92f      	bls.n	80082e4 <HAL_TIM_ConfigClockSource+0xc8>
 8008284:	2c20      	cmp	r4, #32
 8008286:	d038      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0xde>
 8008288:	2c30      	cmp	r4, #48	; 0x30
 800828a:	d105      	bne.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 800828c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800828e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008292:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8008296:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8008298:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800829a:	2201      	movs	r2, #1
 800829c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80082a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80082a4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80082a6:	4618      	mov	r0, r3
}
 80082a8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80082aa:	2c50      	cmp	r4, #80	; 0x50
 80082ac:	d033      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0xfa>
 80082ae:	2c60      	cmp	r4, #96	; 0x60
 80082b0:	d1f2      	bne.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80082b4:	684d      	ldr	r5, [r1, #4]
 80082b6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b8:	f024 0410 	bic.w	r4, r4, #16
 80082bc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082be:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80082c0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ce:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80082d2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80082d4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80082d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80082d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80082dc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80082e0:	609a      	str	r2, [r3, #8]
 80082e2:	e7d9      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d1d7      	bne.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 80082e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80082ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80082ee:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80082f2:	609a      	str	r2, [r3, #8]
 80082f4:	e7d0      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 80082f6:	2002      	movs	r0, #2
}
 80082f8:	4770      	bx	lr
   tmpsmcr = TIMx->SMCR;
 80082fa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80082fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008300:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8008304:	609a      	str	r2, [r3, #8]
 8008306:	e7c7      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
   tmpsmcr = TIMx->SMCR;
 8008308:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800830a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800830e:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8008312:	609a      	str	r2, [r3, #8]
 8008314:	e7c0      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  tmpccer = TIMx->CCER;
 8008316:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008318:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800831a:	684c      	ldr	r4, [r1, #4]
 800831c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800831e:	f026 0601 	bic.w	r6, r6, #1
 8008322:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008324:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008326:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800832a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800832e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008332:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8008334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008336:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8008338:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800833a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800833e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	e7a8      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800834c:	f022 0207 	bic.w	r2, r2, #7
 8008350:	609a      	str	r2, [r3, #8]
    break;
 8008352:	e7a1      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008354:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8008358:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800835a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800835c:	432a      	orrs	r2, r5
 800835e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008362:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008366:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8008368:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800836a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800836c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008370:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008374:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008378:	609a      	str	r2, [r3, #8]
    break;
 800837a:	e78d      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
  tmpccer = TIMx->CCER;
 800837c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800837e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008380:	684c      	ldr	r4, [r1, #4]
 8008382:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008384:	f026 0601 	bic.w	r6, r6, #1
 8008388:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800838a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800838c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008390:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008394:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008398:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800839a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800839e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80083a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80083a4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 80083a8:	609a      	str	r2, [r3, #8]
 80083aa:	e775      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x7c>
 80083ac:	fffe0088 	.word	0xfffe0088

080083b0 <HAL_TIM_SlaveConfigSynchronization>:
  __HAL_LOCK(htim);
 80083b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d047      	beq.n	8008448 <HAL_TIM_SlaveConfigSynchronization+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 80083b8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80083ba:	6802      	ldr	r2, [r0, #0]
{
 80083bc:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80083be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083c2:	e9d1 4500 	ldrd	r4, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 80083c6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80083cc:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 80083ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d2:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083d6:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80083d8:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 80083da:	f04f 0401 	mov.w	r4, #1
 80083de:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80083e2:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80083e4:	d046      	beq.n	8008474 <HAL_TIM_SlaveConfigSynchronization+0xc4>
 80083e6:	d91f      	bls.n	8008428 <HAL_TIM_SlaveConfigSynchronization+0x78>
 80083e8:	2d60      	cmp	r5, #96	; 0x60
 80083ea:	d030      	beq.n	800844e <HAL_TIM_SlaveConfigSynchronization+0x9e>
 80083ec:	2d70      	cmp	r5, #112	; 0x70
 80083ee:	d10a      	bne.n	8008406 <HAL_TIM_SlaveConfigSynchronization+0x56>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f0:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80083f4:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80083f6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f8:	432b      	orrs	r3, r5
 80083fa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083fe:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008402:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8008404:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008406:	68d3      	ldr	r3, [r2, #12]
 8008408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800840e:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008410:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);  
 8008412:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008418:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800841a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 800841e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
} 
 8008422:	bcf0      	pop	{r4, r5, r6, r7}
 8008424:	4608      	mov	r0, r1
 8008426:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8008428:	2d40      	cmp	r5, #64	; 0x40
 800842a:	d1ec      	bne.n	8008406 <HAL_TIM_SlaveConfigSynchronization+0x56>
      tmpccer = htim->Instance->CCER;
 800842c:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800842e:	6a14      	ldr	r4, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008430:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008432:	f024 0401 	bic.w	r4, r4, #1
 8008436:	6214      	str	r4, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8008438:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800843a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800843e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8008442:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;                               
 8008444:	6215      	str	r5, [r2, #32]
 8008446:	e7de      	b.n	8008406 <HAL_TIM_SlaveConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 8008448:	2302      	movs	r3, #2
} 
 800844a:	4618      	mov	r0, r3
 800844c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844e:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008450:	688d      	ldr	r5, [r1, #8]
 8008452:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008454:	f024 0410 	bic.w	r4, r4, #16
 8008458:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845a:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800845c:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800845e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008466:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800846a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800846e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008470:	6213      	str	r3, [r2, #32]
 8008472:	e7c8      	b.n	8008406 <HAL_TIM_SlaveConfigSynchronization+0x56>
  tmpccer = TIMx->CCER;
 8008474:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008476:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008478:	688c      	ldr	r4, [r1, #8]
 800847a:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800847c:	f026 0601 	bic.w	r6, r6, #1
 8008480:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008482:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008484:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800848c:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800848e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008492:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8008494:	6211      	str	r1, [r2, #32]
 8008496:	e7b6      	b.n	8008406 <HAL_TIM_SlaveConfigSynchronization+0x56>

08008498 <TIM_OC1_SetConfig>:
{
 8008498:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 800849c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800849e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a0:	4d1c      	ldr	r5, [pc, #112]	; (8008514 <TIM_OC1_SetConfig+0x7c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084a2:	f024 0401 	bic.w	r4, r4, #1
 80084a6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80084a8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80084aa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80084ac:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80084b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084ba:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80084bc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80084c0:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084c4:	d013      	beq.n	80084ee <TIM_OC1_SetConfig+0x56>
 80084c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084ca:	42a8      	cmp	r0, r5
 80084cc:	d00f      	beq.n	80084ee <TIM_OC1_SetConfig+0x56>
 80084ce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80084d2:	42a8      	cmp	r0, r5
 80084d4:	d00b      	beq.n	80084ee <TIM_OC1_SetConfig+0x56>
 80084d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084da:	42a8      	cmp	r0, r5
 80084dc:	d007      	beq.n	80084ee <TIM_OC1_SetConfig+0x56>
 80084de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084e2:	42a8      	cmp	r0, r5
 80084e4:	d003      	beq.n	80084ee <TIM_OC1_SetConfig+0x56>
 80084e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084ea:	42a8      	cmp	r0, r5
 80084ec:	d10b      	bne.n	8008506 <TIM_OC1_SetConfig+0x6e>
    tmpccer |= OC_Config->OCNPolarity;
 80084ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80084f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80084f4:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80084fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8008500:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008504:	432c      	orrs	r4, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8008506:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008508:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800850a:	6182      	str	r2, [r0, #24]
} 
 800850c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800850e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8008510:	6203      	str	r3, [r0, #32]
} 
 8008512:	4770      	bx	lr
 8008514:	40012c00 	.word	0x40012c00

08008518 <TIM_OC2_SetConfig>:
{
 8008518:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800851a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800851c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800851e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008520:	4d23      	ldr	r5, [pc, #140]	; (80085b0 <TIM_OC2_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008522:	f024 0410 	bic.w	r4, r4, #16
 8008526:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8008528:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800852a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800852c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800852e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8008532:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008536:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800853a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800853c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008540:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008544:	d017      	beq.n	8008576 <TIM_OC2_SetConfig+0x5e>
 8008546:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800854a:	42a8      	cmp	r0, r5
 800854c:	d013      	beq.n	8008576 <TIM_OC2_SetConfig+0x5e>
 800854e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008552:	42a8      	cmp	r0, r5
 8008554:	d024      	beq.n	80085a0 <TIM_OC2_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008556:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 800855a:	42a8      	cmp	r0, r5
 800855c:	d012      	beq.n	8008584 <TIM_OC2_SetConfig+0x6c>
 800855e:	4d15      	ldr	r5, [pc, #84]	; (80085b4 <TIM_OC2_SetConfig+0x9c>)
 8008560:	42a8      	cmp	r0, r5
 8008562:	d00f      	beq.n	8008584 <TIM_OC2_SetConfig+0x6c>
 8008564:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008568:	42a8      	cmp	r0, r5
 800856a:	d00b      	beq.n	8008584 <TIM_OC2_SetConfig+0x6c>
 800856c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008570:	42a8      	cmp	r0, r5
 8008572:	d10e      	bne.n	8008592 <TIM_OC2_SetConfig+0x7a>
 8008574:	e006      	b.n	8008584 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008576:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800857c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008584:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008588:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800858c:	4335      	orrs	r5, r6
 800858e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008592:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008594:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008596:	6182      	str	r2, [r0, #24]
}
 8008598:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800859a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 800859c:	6203      	str	r3, [r0, #32]
}
 800859e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ae:	e7d6      	b.n	800855e <TIM_OC2_SetConfig+0x46>
 80085b0:	40012c00 	.word	0x40012c00
 80085b4:	40014400 	.word	0x40014400

080085b8 <TIM_OC3_SetConfig>:
{
 80085b8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ba:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085bc:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80085be:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085c0:	4d23      	ldr	r5, [pc, #140]	; (8008650 <TIM_OC3_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085c2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80085c6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80085c8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80085ca:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80085cc:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80085ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80085d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80085d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085da:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085dc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80085e0:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085e4:	d017      	beq.n	8008616 <TIM_OC3_SetConfig+0x5e>
 80085e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085ea:	42a8      	cmp	r0, r5
 80085ec:	d013      	beq.n	8008616 <TIM_OC3_SetConfig+0x5e>
 80085ee:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80085f2:	42a8      	cmp	r0, r5
 80085f4:	d024      	beq.n	8008640 <TIM_OC3_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80085f6:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 80085fa:	42a8      	cmp	r0, r5
 80085fc:	d012      	beq.n	8008624 <TIM_OC3_SetConfig+0x6c>
 80085fe:	4d15      	ldr	r5, [pc, #84]	; (8008654 <TIM_OC3_SetConfig+0x9c>)
 8008600:	42a8      	cmp	r0, r5
 8008602:	d00f      	beq.n	8008624 <TIM_OC3_SetConfig+0x6c>
 8008604:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008608:	42a8      	cmp	r0, r5
 800860a:	d00b      	beq.n	8008624 <TIM_OC3_SetConfig+0x6c>
 800860c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008610:	42a8      	cmp	r0, r5
 8008612:	d10e      	bne.n	8008632 <TIM_OC3_SetConfig+0x7a>
 8008614:	e006      	b.n	8008624 <TIM_OC3_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008616:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800861c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008624:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008628:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800862c:	4335      	orrs	r5, r6
 800862e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 8008632:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008634:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008636:	61c2      	str	r2, [r0, #28]
}
 8008638:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 800863a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 800863c:	6203      	str	r3, [r0, #32]
}
 800863e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008640:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008646:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800864a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800864e:	e7d6      	b.n	80085fe <TIM_OC3_SetConfig+0x46>
 8008650:	40012c00 	.word	0x40012c00
 8008654:	40014400 	.word	0x40014400

08008658 <TIM_OC4_SetConfig>:
{
 8008658:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800865a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800865c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800865e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008660:	4d19      	ldr	r5, [pc, #100]	; (80086c8 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008662:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8008666:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8008668:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800866a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800866c:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800866e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8008672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008676:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800867a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800867c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008680:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008684:	d013      	beq.n	80086ae <TIM_OC4_SetConfig+0x56>
 8008686:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800868a:	42a8      	cmp	r0, r5
 800868c:	d00f      	beq.n	80086ae <TIM_OC4_SetConfig+0x56>
 800868e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008692:	42a8      	cmp	r0, r5
 8008694:	d00b      	beq.n	80086ae <TIM_OC4_SetConfig+0x56>
 8008696:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800869a:	42a8      	cmp	r0, r5
 800869c:	d007      	beq.n	80086ae <TIM_OC4_SetConfig+0x56>
 800869e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086a2:	42a8      	cmp	r0, r5
 80086a4:	d003      	beq.n	80086ae <TIM_OC4_SetConfig+0x56>
 80086a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80086aa:	42a8      	cmp	r0, r5
 80086ac:	d104      	bne.n	80086b8 <TIM_OC4_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086ae:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086b0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086b4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 80086b8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80086ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80086bc:	61c3      	str	r3, [r0, #28]
}
 80086be:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80086c0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 80086c2:	6202      	str	r2, [r0, #32]
}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40012c00 	.word	0x40012c00

080086cc <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80086cc:	6a03      	ldr	r3, [r0, #32]
{
 80086ce:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 80086d0:	2401      	movs	r4, #1
 80086d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80086d4:	ea23 0304 	bic.w	r3, r3, r4
 80086d8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80086da:	6a03      	ldr	r3, [r0, #32]
}
 80086dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80086e0:	408a      	lsls	r2, r1
 80086e2:	431a      	orrs	r2, r3
 80086e4:	6202      	str	r2, [r0, #32]
}
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 80086ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	f000 80b8 	beq.w	8008864 <HAL_TIM_OC_ConfigChannel+0x17c>
 80086f4:	4604      	mov	r4, r0
  
  htim->State = HAL_TIM_STATE_BUSY;
 80086f6:	2302      	movs	r3, #2
  __HAL_LOCK(htim); 
 80086f8:	2001      	movs	r0, #1
 80086fa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80086fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  switch (Channel)
 8008702:	2a14      	cmp	r2, #20
 8008704:	d842      	bhi.n	800878c <HAL_TIM_OC_ConfigChannel+0xa4>
 8008706:	e8df f002 	tbb	[pc, r2]
 800870a:	4148      	.short	0x4148
 800870c:	41524141 	.word	0x41524141
 8008710:	415c4141 	.word	0x415c4141
 8008714:	41664141 	.word	0x41664141
 8008718:	41704141 	.word	0x41704141
 800871c:	4141      	.short	0x4141
 800871e:	0b          	.byte	0x0b
 800871f:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008720:	6823      	ldr	r3, [r4, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008722:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008726:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	680f      	ldr	r7, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800872a:	4e4f      	ldr	r6, [pc, #316]	; (8008868 <HAL_TIM_OC_ConfigChannel+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800872c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8008730:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8008732:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8008734:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008738:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800873c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008740:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008744:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008746:	ea40 500c 	orr.w	r0, r0, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800874a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800874e:	d013      	beq.n	8008778 <HAL_TIM_OC_ConfigChannel+0x90>
 8008750:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008754:	42b3      	cmp	r3, r6
 8008756:	d00f      	beq.n	8008778 <HAL_TIM_OC_ConfigChannel+0x90>
 8008758:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800875c:	42b3      	cmp	r3, r6
 800875e:	d00b      	beq.n	8008778 <HAL_TIM_OC_ConfigChannel+0x90>
 8008760:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008764:	42b3      	cmp	r3, r6
 8008766:	d007      	beq.n	8008778 <HAL_TIM_OC_ConfigChannel+0x90>
 8008768:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800876c:	42b3      	cmp	r3, r6
 800876e:	d003      	beq.n	8008778 <HAL_TIM_OC_ConfigChannel+0x90>
 8008770:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008774:	42b3      	cmp	r3, r6
 8008776:	d104      	bne.n	8008782 <HAL_TIM_OC_ConfigChannel+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008778:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800877a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800877e:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008782:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008784:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008786:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8008788:	65d9      	str	r1, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800878a:	6218      	str	r0, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800878c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800878e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8008794:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800879a:	6820      	ldr	r0, [r4, #0]
 800879c:	f7ff fe7c 	bl	8008498 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80087a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80087a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80087ac:	e7f4      	b.n	8008798 <HAL_TIM_OC_ConfigChannel+0xb0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087ae:	6820      	ldr	r0, [r4, #0]
 80087b0:	f7ff feb2 	bl	8008518 <TIM_OC2_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80087b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80087bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80087c0:	e7ea      	b.n	8008798 <HAL_TIM_OC_ConfigChannel+0xb0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	f7ff fef8 	bl	80085b8 <TIM_OC3_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80087c8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80087ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80087d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80087d4:	e7e0      	b.n	8008798 <HAL_TIM_OC_ConfigChannel+0xb0>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	f7ff ff3e 	bl	8008658 <TIM_OC4_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80087dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80087de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80087e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80087e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80087e8:	e7d6      	b.n	8008798 <HAL_TIM_OC_ConfigChannel+0xb0>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087ea:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ec:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087f0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80087f2:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087f4:	4e1c      	ldr	r6, [pc, #112]	; (8008868 <HAL_TIM_OC_ConfigChannel+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087f6:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80087fa:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80087fc:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80087fe:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008802:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8008806:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800880a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800880e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8008814:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	d013      	beq.n	8008842 <HAL_TIM_OC_ConfigChannel+0x15a>
 800881a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800881e:	42b3      	cmp	r3, r6
 8008820:	d00f      	beq.n	8008842 <HAL_TIM_OC_ConfigChannel+0x15a>
 8008822:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008826:	42b3      	cmp	r3, r6
 8008828:	d00b      	beq.n	8008842 <HAL_TIM_OC_ConfigChannel+0x15a>
 800882a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800882e:	42b3      	cmp	r3, r6
 8008830:	d007      	beq.n	8008842 <HAL_TIM_OC_ConfigChannel+0x15a>
 8008832:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008836:	42b3      	cmp	r3, r6
 8008838:	d003      	beq.n	8008842 <HAL_TIM_OC_ConfigChannel+0x15a>
 800883a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800883e:	42b3      	cmp	r3, r6
 8008840:	d104      	bne.n	800884c <HAL_TIM_OC_ConfigChannel+0x164>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008842:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008844:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008848:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800884c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800884e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008850:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8008852:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8008854:	6218      	str	r0, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8008856:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8008858:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800885a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 800885e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008862:	e799      	b.n	8008798 <HAL_TIM_OC_ConfigChannel+0xb0>
  __HAL_LOCK(htim); 
 8008864:	2002      	movs	r0, #2
}
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008868:	40012c00 	.word	0x40012c00

0800886c <HAL_TIM_PWM_ConfigChannel>:
{
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800886e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008872:	2b01      	cmp	r3, #1
 8008874:	f000 810c 	beq.w	8008a90 <HAL_TIM_PWM_ConfigChannel+0x224>
 8008878:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800887a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800887c:	2101      	movs	r1, #1
 800887e:	4604      	mov	r4, r0
 8008880:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8008888:	2a14      	cmp	r2, #20
 800888a:	d84f      	bhi.n	800892c <HAL_TIM_PWM_ConfigChannel+0xc0>
 800888c:	e8df f002 	tbb	[pc, r2]
 8008890:	4e4e4e55 	.word	0x4e4e4e55
 8008894:	4e4e4e6d 	.word	0x4e4e4e6d
 8008898:	4e4e4e86 	.word	0x4e4e4e86
 800889c:	4e4e4e9e 	.word	0x4e4e4e9e
 80088a0:	4e4e4eb7 	.word	0x4e4e4eb7
 80088a4:	0b          	.byte	0x0b
 80088a5:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088a6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088a8:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088ac:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ae:	682f      	ldr	r7, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80088b0:	4e78      	ldr	r6, [pc, #480]	; (8008a94 <HAL_TIM_PWM_ConfigChannel+0x228>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088b2:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80088b6:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80088b8:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 80088ba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80088bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088c2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80088ca:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088cc:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80088d4:	d013      	beq.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x92>
 80088d6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80088da:	42b3      	cmp	r3, r6
 80088dc:	d00f      	beq.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x92>
 80088de:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80088e2:	42b3      	cmp	r3, r6
 80088e4:	d00b      	beq.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x92>
 80088e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088ea:	42b3      	cmp	r3, r6
 80088ec:	d007      	beq.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x92>
 80088ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088f2:	42b3      	cmp	r3, r6
 80088f4:	d003      	beq.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x92>
 80088f6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80088fa:	42b3      	cmp	r3, r6
 80088fc:	d104      	bne.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x9c>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088fe:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008900:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008904:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8008908:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800890a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800890c:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800890e:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;  
 8008910:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008912:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8008914:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008916:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800891a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800891c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800891e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008922:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8008924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008926:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
  htim->State = HAL_TIM_STATE_READY;
 800892c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800892e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008930:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008934:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800893a:	4629      	mov	r1, r5
 800893c:	6800      	ldr	r0, [r0, #0]
 800893e:	f7ff fdab 	bl	8008498 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008942:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008944:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008946:	6999      	ldr	r1, [r3, #24]
 8008948:	f041 0108 	orr.w	r1, r1, #8
 800894c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800894e:	6999      	ldr	r1, [r3, #24]
 8008950:	f021 0104 	bic.w	r1, r1, #4
 8008954:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	4302      	orrs	r2, r0
 800895a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800895c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800895e:	2301      	movs	r3, #1
 8008960:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008964:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008968:	e7e6      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800896a:	4629      	mov	r1, r5
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f7ff fdd3 	bl	8008518 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008972:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008974:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008976:	6999      	ldr	r1, [r3, #24]
 8008978:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800897c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800897e:	6999      	ldr	r1, [r3, #24]
 8008980:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008984:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008986:	699a      	ldr	r2, [r3, #24]
 8008988:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800898c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800898e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008990:	2301      	movs	r3, #1
 8008992:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008996:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800899a:	e7cd      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800899c:	4629      	mov	r1, r5
 800899e:	6800      	ldr	r0, [r0, #0]
 80089a0:	f7ff fe0a 	bl	80085b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80089a6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089a8:	69d9      	ldr	r1, [r3, #28]
 80089aa:	f041 0108 	orr.w	r1, r1, #8
 80089ae:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089b0:	69d9      	ldr	r1, [r3, #28]
 80089b2:	f021 0104 	bic.w	r1, r1, #4
 80089b6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80089b8:	69da      	ldr	r2, [r3, #28]
 80089ba:	4302      	orrs	r2, r0
 80089bc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80089be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80089c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80089ca:	e7b5      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089cc:	4629      	mov	r1, r5
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	f7ff fe42 	bl	8008658 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80089d6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089d8:	69d9      	ldr	r1, [r3, #28]
 80089da:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80089de:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089e0:	69d9      	ldr	r1, [r3, #28]
 80089e2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80089e6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80089ee:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80089f0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80089f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80089fc:	e79c      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0xcc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089fe:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a00:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a04:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8008a06:	682f      	ldr	r7, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008a08:	4e22      	ldr	r6, [pc, #136]	; (8008a94 <HAL_TIM_PWM_ConfigChannel+0x228>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a0a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008a0e:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8008a10:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8008a12:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8008a1a:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008a22:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a24:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8008a28:	ea42 0207 	orr.w	r2, r2, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	d013      	beq.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8008a2e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008a32:	42b3      	cmp	r3, r6
 8008a34:	d00f      	beq.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8008a36:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008a3a:	42b3      	cmp	r3, r6
 8008a3c:	d00b      	beq.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8008a3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008a42:	42b3      	cmp	r3, r6
 8008a44:	d007      	beq.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8008a46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008a4a:	42b3      	cmp	r3, r6
 8008a4c:	d003      	beq.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8008a4e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008a52:	42b3      	cmp	r3, r6
 8008a54:	d104      	bne.n	8008a60 <HAL_TIM_PWM_ConfigChannel+0x1f4>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a56:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a58:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a5c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8008a60:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8008a62:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008a64:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8008a66:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8008a68:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008a6c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a6e:	f041 0108 	orr.w	r1, r1, #8
 8008a72:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a76:	f021 0104 	bic.w	r1, r1, #4
 8008a7a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a7e:	4302      	orrs	r2, r0
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8008a82:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008a8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008a8e:	e753      	b.n	8008938 <HAL_TIM_PWM_ConfigChannel+0xcc>
  __HAL_LOCK(htim);
 8008a90:	2002      	movs	r0, #2
}
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a94:	40012c00 	.word	0x40012c00

08008a98 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8008a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d022      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 = htim->Instance->CR2;
 8008aa0:	6802      	ldr	r2, [r0, #0]
{
 8008aa2:	b470      	push	{r4, r5, r6}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aa4:	4d11      	ldr	r5, [pc, #68]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8008aa6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008aa8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aaa:	42aa      	cmp	r2, r5
 8008aac:	d007      	beq.n	8008abe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008aae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008ab2:	42aa      	cmp	r2, r5
 8008ab4:	d003      	beq.n	8008abe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008ab6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008aba:	42aa      	cmp	r2, r5
 8008abc:	d103      	bne.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008abe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ac0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ac4:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac6:	680e      	ldr	r6, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ac8:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008ace:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ad2:	4333      	orrs	r3, r6
  __HAL_UNLOCK(htim);
 8008ad4:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad6:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8008ad8:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8008ada:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8008adc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
} 
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	bc70      	pop	{r4, r5, r6}
 8008ae4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008ae6:	2302      	movs	r3, #2
} 
 8008ae8:	4618      	mov	r0, r3
 8008aea:	4770      	bx	lr
 8008aec:	40012c00 	.word	0x40012c00

08008af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8008af0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d03f      	beq.n	8008b78 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8008af8:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008afa:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8008afe:	4602      	mov	r2, r0
 8008b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b04:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b08:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b14:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b18:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b24:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8008b26:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b28:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008b2e:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b30:	4c12      	ldr	r4, [pc, #72]	; (8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8008b32:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8008b34:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b38:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8008b3a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b3e:	d007      	beq.n	8008b50 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008b40:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d003      	beq.n	8008b50 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008b48:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008b4c:	42a0      	cmp	r0, r4
 8008b4e:	d10c      	bne.n	8008b6a <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8008b50:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008b52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b56:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8008b5a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b62:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b64:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008b68:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8008b6a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008b6c:	6443      	str	r3, [r0, #68]	; 0x44
}
 8008b6e:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008b70:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8008b72:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8008b76:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008b78:	2002      	movs	r0, #2
}
 8008b7a:	4770      	bx	lr
 8008b7c:	40012c00 	.word	0x40012c00

08008b80 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	460f      	mov	r7, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8008b84:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 8008b88:	2920      	cmp	r1, #32
{
 8008b8a:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 8008b8c:	d130      	bne.n	8008bf0 <HAL_UART_Transmit+0x70>
  {
    if((pData == NULL ) || (Size == 0U))
 8008b8e:	b397      	cbz	r7, 8008bf6 <HAL_UART_Transmit+0x76>
 8008b90:	9201      	str	r2, [sp, #4]
 8008b92:	b382      	cbz	r2, 8008bf6 <HAL_UART_Transmit+0x76>
 8008b94:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b96:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	d027      	beq.n	8008bf0 <HAL_UART_Transmit+0x70>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 8008ba4:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ba6:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8008ba8:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bac:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008bb0:	f7fc fb1a 	bl	80051e8 <HAL_GetTick>

    huart->TxXferSize = Size;
 8008bb4:	9a01      	ldr	r2, [sp, #4]
 8008bb6:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8008bba:	4606      	mov	r6, r0
 8008bbc:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 8008bbe:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8008bc2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	b313      	cbz	r3, 8008c10 <HAL_UART_Transmit+0x90>
    {
      huart->TxXferCount--;
 8008bca:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8008bd6:	1c69      	adds	r1, r5, #1
 8008bd8:	d126      	bne.n	8008c28 <HAL_UART_Transmit+0xa8>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bda:	69c2      	ldr	r2, [r0, #28]
 8008bdc:	0612      	lsls	r2, r2, #24
 8008bde:	d5fc      	bpl.n	8008bda <HAL_UART_Transmit+0x5a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be0:	68a3      	ldr	r3, [r4, #8]
 8008be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be6:	d03b      	beq.n	8008c60 <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8008be8:	783b      	ldrb	r3, [r7, #0]
 8008bea:	8503      	strh	r3, [r0, #40]	; 0x28
 8008bec:	3701      	adds	r7, #1
 8008bee:	e7e8      	b.n	8008bc2 <HAL_UART_Transmit+0x42>
    return HAL_BUSY;
 8008bf0:	2002      	movs	r0, #2
}
 8008bf2:	b003      	add	sp, #12
 8008bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8008bf6:	2001      	movs	r0, #1
}
 8008bf8:	b003      	add	sp, #12
 8008bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfc:	69c3      	ldr	r3, [r0, #28]
 8008bfe:	065b      	lsls	r3, r3, #25
 8008c00:	d40b      	bmi.n	8008c1a <HAL_UART_Transmit+0x9a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008c02:	b1dd      	cbz	r5, 8008c3c <HAL_UART_Transmit+0xbc>
 8008c04:	f7fc faf0 	bl	80051e8 <HAL_GetTick>
 8008c08:	1b80      	subs	r0, r0, r6
 8008c0a:	4285      	cmp	r5, r0
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	d315      	bcc.n	8008c3c <HAL_UART_Transmit+0xbc>
 8008c10:	1c69      	adds	r1, r5, #1
 8008c12:	d1f3      	bne.n	8008bfc <HAL_UART_Transmit+0x7c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c14:	69c3      	ldr	r3, [r0, #28]
 8008c16:	065a      	lsls	r2, r3, #25
 8008c18:	d5fc      	bpl.n	8008c14 <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_READY;
 8008c1a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8008c1c:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8008c1e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8008c22:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8008c26:	e7e4      	b.n	8008bf2 <HAL_UART_Transmit+0x72>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c28:	69c3      	ldr	r3, [r0, #28]
 8008c2a:	061b      	lsls	r3, r3, #24
 8008c2c:	d4d8      	bmi.n	8008be0 <HAL_UART_Transmit+0x60>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008c2e:	b12d      	cbz	r5, 8008c3c <HAL_UART_Transmit+0xbc>
 8008c30:	f7fc fada 	bl	80051e8 <HAL_GetTick>
 8008c34:	1b80      	subs	r0, r0, r6
 8008c36:	4285      	cmp	r5, r0
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	d2cc      	bcs.n	8008bd6 <HAL_UART_Transmit+0x56>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c3c:	6803      	ldr	r3, [r0, #0]
 8008c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c42:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	6883      	ldr	r3, [r0, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8008c46:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	f023 0301 	bic.w	r3, r3, #1
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c4c:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4e:	6083      	str	r3, [r0, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8008c50:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
      return HAL_TIMEOUT;
 8008c54:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8008c56:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
 8008c5e:	e7c8      	b.n	8008bf2 <HAL_UART_Transmit+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1c0      	bne.n	8008be8 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8008c66:	f837 3b02 	ldrh.w	r3, [r7], #2
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	8503      	strh	r3, [r0, #40]	; 0x28
        pData += 2U;
 8008c70:	e7a7      	b.n	8008bc2 <HAL_UART_Transmit+0x42>
 8008c72:	bf00      	nop

08008c74 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c76:	07da      	lsls	r2, r3, #31
{
 8008c78:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c7a:	d506      	bpl.n	8008c8a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c7c:	6801      	ldr	r1, [r0, #0]
 8008c7e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008c80:	684a      	ldr	r2, [r1, #4]
 8008c82:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008c86:	4322      	orrs	r2, r4
 8008c88:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c8a:	079c      	lsls	r4, r3, #30
 8008c8c:	d506      	bpl.n	8008c9c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c8e:	6801      	ldr	r1, [r0, #0]
 8008c90:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008c92:	684a      	ldr	r2, [r1, #4]
 8008c94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c98:	4322      	orrs	r2, r4
 8008c9a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c9c:	0759      	lsls	r1, r3, #29
 8008c9e:	d506      	bpl.n	8008cae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ca0:	6801      	ldr	r1, [r0, #0]
 8008ca2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008ca4:	684a      	ldr	r2, [r1, #4]
 8008ca6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008caa:	4322      	orrs	r2, r4
 8008cac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cae:	071a      	lsls	r2, r3, #28
 8008cb0:	d506      	bpl.n	8008cc0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cb2:	6801      	ldr	r1, [r0, #0]
 8008cb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008cb6:	684a      	ldr	r2, [r1, #4]
 8008cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cbc:	4322      	orrs	r2, r4
 8008cbe:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cc0:	06dc      	lsls	r4, r3, #27
 8008cc2:	d506      	bpl.n	8008cd2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cc4:	6801      	ldr	r1, [r0, #0]
 8008cc6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008cc8:	688a      	ldr	r2, [r1, #8]
 8008cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cce:	4322      	orrs	r2, r4
 8008cd0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cd2:	0699      	lsls	r1, r3, #26
 8008cd4:	d506      	bpl.n	8008ce4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cd6:	6801      	ldr	r1, [r0, #0]
 8008cd8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008cda:	688a      	ldr	r2, [r1, #8]
 8008cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ce0:	4322      	orrs	r2, r4
 8008ce2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ce4:	065a      	lsls	r2, r3, #25
 8008ce6:	d509      	bpl.n	8008cfc <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ce8:	6801      	ldr	r1, [r0, #0]
 8008cea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008cec:	684a      	ldr	r2, [r1, #4]
 8008cee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008cf2:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cf4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cf8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cfa:	d00b      	beq.n	8008d14 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cfc:	061b      	lsls	r3, r3, #24
 8008cfe:	d506      	bpl.n	8008d0e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d00:	6802      	ldr	r2, [r0, #0]
 8008d02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008d04:	6853      	ldr	r3, [r2, #4]
 8008d06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	6053      	str	r3, [r2, #4]
}
 8008d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d12:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d14:	684a      	ldr	r2, [r1, #4]
 8008d16:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008d18:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008d1c:	4322      	orrs	r2, r4
 8008d1e:	604a      	str	r2, [r1, #4]
 8008d20:	e7ec      	b.n	8008cfc <UART_AdvFeatureConfig+0x88>
 8008d22:	bf00      	nop

08008d24 <HAL_UART_Init>:
  if(huart == NULL)
 8008d24:	2800      	cmp	r0, #0
 8008d26:	f000 8134 	beq.w	8008f92 <HAL_UART_Init+0x26e>
{
 8008d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8008d2c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8008d30:	4604      	mov	r4, r0
 8008d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d038      	beq.n	8008dac <HAL_UART_Init+0x88>
  __HAL_UART_DISABLE(huart);
 8008d3a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d3c:	6927      	ldr	r7, [r4, #16]
 8008d3e:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008d40:	49b7      	ldr	r1, [pc, #732]	; (8009020 <HAL_UART_Init+0x2fc>)
  huart->gState = HAL_UART_STATE_BUSY;
 8008d42:	2224      	movs	r2, #36	; 0x24
 8008d44:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8008d48:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d4a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008d4c:	f020 0001 	bic.w	r0, r0, #1
 8008d50:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008d52:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d54:	69e0      	ldr	r0, [r4, #28]
 8008d56:	433a      	orrs	r2, r7
 8008d58:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008d5a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d5c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d62:	6859      	ldr	r1, [r3, #4]
 8008d64:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008d66:	69a2      	ldr	r2, [r4, #24]
 8008d68:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d6a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8008d6e:	4329      	orrs	r1, r5
 8008d70:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008d72:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d74:	4dab      	ldr	r5, [pc, #684]	; (8009024 <HAL_UART_Init+0x300>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008d76:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008d7a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008d7c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d7e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008d80:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d82:	d018      	beq.n	8008db6 <HAL_UART_Init+0x92>
 8008d84:	4aa8      	ldr	r2, [pc, #672]	; (8009028 <HAL_UART_Init+0x304>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d036      	beq.n	8008df8 <HAL_UART_Init+0xd4>
 8008d8a:	4aa8      	ldr	r2, [pc, #672]	; (800902c <HAL_UART_Init+0x308>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	f000 80c1 	beq.w	8008f14 <HAL_UART_Init+0x1f0>
 8008d92:	4aa7      	ldr	r2, [pc, #668]	; (8009030 <HAL_UART_Init+0x30c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d055      	beq.n	8008e44 <HAL_UART_Init+0x120>
 8008d98:	4aa6      	ldr	r2, [pc, #664]	; (8009034 <HAL_UART_Init+0x310>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	f000 80db 	beq.w	8008f56 <HAL_UART_Init+0x232>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008da4:	f000 8138 	beq.w	8009018 <HAL_UART_Init+0x2f4>
    return HAL_ERROR;
 8008da8:	2001      	movs	r0, #1
}
 8008daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8008dac:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8008db0:	f005 fe88 	bl	800eac4 <HAL_UART_MspInit>
 8008db4:	e7c1      	b.n	8008d3a <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008db6:	4aa0      	ldr	r2, [pc, #640]	; (8009038 <HAL_UART_Init+0x314>)
 8008db8:	49a0      	ldr	r1, [pc, #640]	; (800903c <HAL_UART_Init+0x318>)
 8008dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dbc:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008dc4:	5c8a      	ldrb	r2, [r1, r2]
 8008dc6:	f000 80e6 	beq.w	8008f96 <HAL_UART_Init+0x272>
    switch (clocksource)
 8008dca:	2a08      	cmp	r2, #8
 8008dcc:	d8ec      	bhi.n	8008da8 <HAL_UART_Init+0x84>
 8008dce:	a101      	add	r1, pc, #4	; (adr r1, 8008dd4 <HAL_UART_Init+0xb0>)
 8008dd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008dd4:	08008f51 	.word	0x08008f51
 8008dd8:	08008e67 	.word	0x08008e67
 8008ddc:	08008f73 	.word	0x08008f73
 8008de0:	08008da9 	.word	0x08008da9
 8008de4:	08008f6d 	.word	0x08008f6d
 8008de8:	08008da9 	.word	0x08008da9
 8008dec:	08008da9 	.word	0x08008da9
 8008df0:	08008da9 	.word	0x08008da9
 8008df4:	08008f33 	.word	0x08008f33
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008df8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8008dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dfe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008e02:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e06:	f000 80ae 	beq.w	8008f66 <HAL_UART_Init+0x242>
 8008e0a:	f240 809b 	bls.w	8008f44 <HAL_UART_Init+0x220>
 8008e0e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008e12:	f000 808b 	beq.w	8008f2c <HAL_UART_Init+0x208>
 8008e16:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008e1a:	d1c1      	bne.n	8008da0 <HAL_UART_Init+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e20:	f040 80a7 	bne.w	8008f72 <HAL_UART_Init+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	084a      	lsrs	r2, r1, #1
 8008e28:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8008e2c:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008e30:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 8008e34:	f022 010f 	bic.w	r1, r2, #15
 8008e38:	b289      	uxth	r1, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e3a:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	60da      	str	r2, [r3, #12]
 8008e42:	e01a      	b.n	8008e7a <HAL_UART_Init+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e44:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8008e48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e4a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008e4e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008e52:	f000 8088 	beq.w	8008f66 <HAL_UART_Init+0x242>
 8008e56:	d975      	bls.n	8008f44 <HAL_UART_Init+0x220>
 8008e58:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008e5c:	d066      	beq.n	8008f2c <HAL_UART_Init+0x208>
 8008e5e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008e62:	d0db      	beq.n	8008e1c <HAL_UART_Init+0xf8>
 8008e64:	e79c      	b.n	8008da0 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008e66:	f7fe f9ed 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008e6a:	e9d4 3100 	ldrd	r3, r1, [r4]
 8008e6e:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 8008e72:	fbb2 f2f1 	udiv	r2, r2, r1
 8008e76:	b292      	uxth	r2, r2
 8008e78:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	f040 8083 	bne.w	8008f88 <HAL_UART_Init+0x264>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e90:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008e92:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9c:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8008e9e:	f7fc f9a3 	bl	80051e8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8008ea8:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eaa:	d40b      	bmi.n	8008ec4 <HAL_UART_Init+0x1a0>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	0752      	lsls	r2, r2, #29
 8008eb0:	d424      	bmi.n	8008efc <HAL_UART_Init+0x1d8>
  huart->gState  = HAL_UART_STATE_READY;
 8008eb2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8008eb4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8008eb6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8008eba:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8008ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec4:	69dd      	ldr	r5, [r3, #28]
 8008ec6:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008eca:	d1ef      	bne.n	8008eac <HAL_UART_Init+0x188>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008ecc:	f7fc f98c 	bl	80051e8 <HAL_GetTick>
 8008ed0:	1b80      	subs	r0, r0, r6
 8008ed2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ed6:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008ed8:	d3f4      	bcc.n	8008ec4 <HAL_UART_Init+0x1a0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ee0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8008ee4:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	f022 0201 	bic.w	r2, r2, #1
 8008eea:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8008eec:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8008eee:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8008ef2:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008efc:	69dd      	ldr	r5, [r3, #28]
 8008efe:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008f02:	d1d6      	bne.n	8008eb2 <HAL_UART_Init+0x18e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008f04:	f7fc f970 	bl	80051e8 <HAL_GetTick>
 8008f08:	1b80      	subs	r0, r0, r6
 8008f0a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f0e:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008f10:	d3f4      	bcc.n	8008efc <HAL_UART_Init+0x1d8>
 8008f12:	e7e2      	b.n	8008eda <HAL_UART_Init+0x1b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f14:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8008f18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f1a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008f1e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008f22:	d020      	beq.n	8008f66 <HAL_UART_Init+0x242>
 8008f24:	d90e      	bls.n	8008f44 <HAL_UART_Init+0x220>
 8008f26:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8008f2a:	d154      	bne.n	8008fd6 <HAL_UART_Init+0x2b2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f30:	d06a      	beq.n	8009008 <HAL_UART_Init+0x2e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008f32:	6861      	ldr	r1, [r4, #4]
 8008f34:	084a      	lsrs	r2, r1, #1
 8008f36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8008f3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8008f3e:	b292      	uxth	r2, r2
 8008f40:	60da      	str	r2, [r3, #12]
 8008f42:	e79a      	b.n	8008e7a <HAL_UART_Init+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f44:	2a00      	cmp	r2, #0
 8008f46:	f47f af2b 	bne.w	8008da0 <HAL_UART_Init+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f4e:	d060      	beq.n	8009012 <HAL_UART_Init+0x2ee>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008f50:	f7fe f960 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8008f54:	e789      	b.n	8008e6a <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f56:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8008f5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f5c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008f60:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008f64:	d12e      	bne.n	8008fc4 <HAL_UART_Init+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f6a:	d039      	beq.n	8008fe0 <HAL_UART_Init+0x2bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008f6c:	f7fe f91e 	bl	80071ac <HAL_RCC_GetSysClockFreq>
 8008f70:	e77b      	b.n	8008e6a <HAL_UART_Init+0x146>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008f72:	6861      	ldr	r1, [r4, #4]
 8008f74:	084a      	lsrs	r2, r1, #1
 8008f76:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 8008f7a:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 8008f7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8008f82:	b292      	uxth	r2, r2
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	e778      	b.n	8008e7a <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff fe73 	bl	8008c74 <UART_AdvFeatureConfig>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	e777      	b.n	8008e82 <HAL_UART_Init+0x15e>
    return HAL_ERROR;
 8008f92:	2001      	movs	r0, #1
}
 8008f94:	4770      	bx	lr
    switch (clocksource)
 8008f96:	2a08      	cmp	r2, #8
 8008f98:	d83e      	bhi.n	8009018 <HAL_UART_Init+0x2f4>
 8008f9a:	a101      	add	r1, pc, #4	; (adr r1, 8008fa0 <HAL_UART_Init+0x27c>)
 8008f9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fa0:	08009013 	.word	0x08009013
 8008fa4:	08009003 	.word	0x08009003
 8008fa8:	08008e25 	.word	0x08008e25
 8008fac:	08009019 	.word	0x08009019
 8008fb0:	08008fe1 	.word	0x08008fe1
 8008fb4:	08009019 	.word	0x08009019
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009009 	.word	0x08009009
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fc4:	d9be      	bls.n	8008f44 <HAL_UART_Init+0x220>
 8008fc6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008fca:	d0af      	beq.n	8008f2c <HAL_UART_Init+0x208>
 8008fcc:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8008fd0:	f43f af24 	beq.w	8008e1c <HAL_UART_Init+0xf8>
 8008fd4:	e6e4      	b.n	8008da0 <HAL_UART_Init+0x7c>
 8008fd6:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8008fda:	f43f af1f 	beq.w	8008e1c <HAL_UART_Init+0xf8>
 8008fde:	e6df      	b.n	8008da0 <HAL_UART_Init+0x7c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008fe0:	f7fe f8e4 	bl	80071ac <HAL_RCC_GetSysClockFreq>
    huart->Instance->BRR = brrtemp;
 8008fe4:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008fe8:	084a      	lsrs	r2, r1, #1
 8008fea:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8008fee:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 8008ff2:	f020 020f 	bic.w	r2, r0, #15
 8008ff6:	b292      	uxth	r2, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ff8:	f3c0 0042 	ubfx	r0, r0, #1, #3
    huart->Instance->BRR = brrtemp;
 8008ffc:	4310      	orrs	r0, r2
 8008ffe:	60d8      	str	r0, [r3, #12]
 8009000:	e73b      	b.n	8008e7a <HAL_UART_Init+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009002:	f7fe f91f 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 8009006:	e7ed      	b.n	8008fe4 <HAL_UART_Init+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009008:	6861      	ldr	r1, [r4, #4]
 800900a:	084a      	lsrs	r2, r1, #1
 800900c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009010:	e70e      	b.n	8008e30 <HAL_UART_Init+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009012:	f7fe f8ff 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8009016:	e7e5      	b.n	8008fe4 <HAL_UART_Init+0x2c0>
    huart->Instance->BRR = brrtemp;
 8009018:	2200      	movs	r2, #0
 800901a:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 800901c:	2001      	movs	r0, #1
}
 800901e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009020:	efff69f3 	.word	0xefff69f3
 8009024:	40013800 	.word	0x40013800
 8009028:	40004400 	.word	0x40004400
 800902c:	40004800 	.word	0x40004800
 8009030:	40004c00 	.word	0x40004c00
 8009034:	40005000 	.word	0x40005000
 8009038:	40021000 	.word	0x40021000
 800903c:	08011c90 	.word	0x08011c90

08009040 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009040:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009042:	f000 fe8f 	bl	8009d64 <vTaskStartScheduler>
  
  return osOK;
}
 8009046:	2000      	movs	r0, #0
 8009048:	bd08      	pop	{r3, pc}
 800904a:	bf00      	nop

0800904c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800904c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800904e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8009052:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8009054:	2c84      	cmp	r4, #132	; 0x84
{
 8009056:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8009058:	bf14      	ite	ne
 800905a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800905c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800905e:	ad03      	add	r5, sp, #12
{
 8009060:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009062:	6840      	ldr	r0, [r0, #4]
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	8a12      	ldrh	r2, [r2, #16]
 8009068:	e9cd 4500 	strd	r4, r5, [sp]
 800906c:	f000 fd38 	bl	8009ae0 <xTaskCreate>
 8009070:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009072:	bf0c      	ite	eq
 8009074:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8009076:	2000      	movne	r0, #0
}
 8009078:	b005      	add	sp, #20
 800907a:	bd30      	pop	{r4, r5, pc}

0800907c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800907c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800907e:	2800      	cmp	r0, #0
 8009080:	bf08      	it	eq
 8009082:	2001      	moveq	r0, #1
 8009084:	f001 f8c6 	bl	800a214 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009088:	2000      	movs	r0, #0
 800908a:	bd08      	pop	{r3, pc}

0800908c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800908c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009090:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009094:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009096:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009098:	e9c0 2300 	strd	r2, r3, [r0]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop

080090a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop

080090ac <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80090ac:	e9d0 2300 	ldrd	r2, r3, [r0]
{
 80090b0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090b2:	689c      	ldr	r4, [r3, #8]
 80090b4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090b6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80090b8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80090ba:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090bc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090be:	6099      	str	r1, [r3, #8]
}
 80090c0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090c4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80090c6:	6002      	str	r2, [r0, #0]
}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop

080090cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090cc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090ce:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090d0:	1c6b      	adds	r3, r5, #1
 80090d2:	d011      	beq.n	80090f8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d4:	f100 0208 	add.w	r2, r0, #8
 80090d8:	e000      	b.n	80090dc <vListInsert+0x10>
 80090da:	461a      	mov	r2, r3
 80090dc:	6853      	ldr	r3, [r2, #4]
 80090de:	681c      	ldr	r4, [r3, #0]
 80090e0:	42ac      	cmp	r4, r5
 80090e2:	d9fa      	bls.n	80090da <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80090e4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80090e6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80090e8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80090ee:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80090f2:	6004      	str	r4, [r0, #0]
}
 80090f4:	bc30      	pop	{r4, r5}
 80090f6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80090f8:	6902      	ldr	r2, [r0, #16]
 80090fa:	6853      	ldr	r3, [r2, #4]
 80090fc:	e7f2      	b.n	80090e4 <vListInsert+0x18>
 80090fe:	bf00      	nop

08009100 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009100:	6843      	ldr	r3, [r0, #4]
 8009102:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009104:	6902      	ldr	r2, [r0, #16]
{
 8009106:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009108:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800910a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800910c:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800910e:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8009110:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8009112:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009114:	bf08      	it	eq
 8009116:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 8009118:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 800911a:	2100      	movs	r1, #0
 800911c:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 800911e:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 8009122:	6013      	str	r3, [r2, #0]
}
 8009124:	4618      	mov	r0, r3
 8009126:	4770      	bx	lr

08009128 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009128:	b940      	cbnz	r0, 800913c <xQueueGenericCreate+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	e7fe      	b.n	800913a <xQueueGenericCreate+0x12>
	{
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4606      	mov	r6, r0
 8009140:	460d      	mov	r5, r1

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009142:	b151      	cbz	r1, 800915a <xQueueGenericCreate+0x32>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009144:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009148:	3048      	adds	r0, #72	; 0x48
 800914a:	f001 fc8d 	bl	800aa68 <pvPortMalloc>

		if( pxNewQueue != NULL )
 800914e:	4604      	mov	r4, r0
 8009150:	b358      	cbz	r0, 80091aa <xQueueGenericCreate+0x82>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009152:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009156:	6003      	str	r3, [r0, #0]
 8009158:	e005      	b.n	8009166 <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800915a:	2048      	movs	r0, #72	; 0x48
 800915c:	f001 fc84 	bl	800aa68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009160:	4604      	mov	r4, r0
 8009162:	b310      	cbz	r0, 80091aa <xQueueGenericCreate+0x82>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009164:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 8009166:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 800916a:	f001 fb1b 	bl	800a7a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800916e:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8009172:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009174:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009176:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800917a:	1acb      	subs	r3, r1, r3
 800917c:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800917e:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009180:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8009182:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009184:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009186:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009188:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800918c:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 800918e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009192:	f104 0010 	add.w	r0, r4, #16
 8009196:	f7ff ff79 	bl	800908c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800919a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800919e:	f7ff ff75 	bl	800908c <vListInitialise>
	taskEXIT_CRITICAL();
 80091a2:	f001 fb21 	bl	800a7e8 <vPortExitCritical>
	}
 80091a6:	4620      	mov	r0, r4
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80091aa:	2400      	movs	r4, #0
	}
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	b085      	sub	sp, #20
 80091b6:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f000 8122 	beq.w	8009402 <xQueueGenericSend+0x252>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091be:	2900      	cmp	r1, #0
 80091c0:	f000 8112 	beq.w	80093e8 <xQueueGenericSend+0x238>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d10b      	bne.n	80091e0 <xQueueGenericSend+0x30>
 80091c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	d008      	beq.n	80091e0 <xQueueGenericSend+0x30>
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	e7fe      	b.n	80091de <xQueueGenericSend+0x2e>
 80091e0:	4604      	mov	r4, r0
 80091e2:	461e      	mov	r6, r3
 80091e4:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e6:	f001 f9bf 	bl	800a568 <xTaskGetSchedulerState>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f040 80f9 	bne.w	80093e2 <xQueueGenericSend+0x232>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	b143      	cbz	r3, 8009206 <xQueueGenericSend+0x56>
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	e7fe      	b.n	8009204 <xQueueGenericSend+0x54>
 8009206:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009208:	f001 facc 	bl	800a7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800920c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800920e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8009210:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8009528 <xQueueGenericSend+0x378>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009214:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 8009216:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800921a:	d375      	bcc.n	8009308 <xQueueGenericSend+0x158>
 800921c:	2e02      	cmp	r6, #2
 800921e:	f000 80f9 	beq.w	8009414 <xQueueGenericSend+0x264>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009222:	9d01      	ldr	r5, [sp, #4]
 8009224:	2d00      	cmp	r5, #0
 8009226:	f000 814c 	beq.w	80094c2 <xQueueGenericSend+0x312>
				else if( xEntryTimeSet == pdFALSE )
 800922a:	f1ba 0f00 	cmp.w	sl, #0
 800922e:	d102      	bne.n	8009236 <xQueueGenericSend+0x86>
					vTaskSetTimeOutState( &xTimeOut );
 8009230:	a802      	add	r0, sp, #8
 8009232:	f001 f937 	bl	800a4a4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8009236:	f001 fad7 	bl	800a7e8 <vPortExitCritical>
		vTaskSuspendAll();
 800923a:	f000 fe9f 	bl	8009f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800923e:	f001 fab1 	bl	800a7a4 <vPortEnterCritical>
 8009242:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009246:	2bff      	cmp	r3, #255	; 0xff
 8009248:	bf08      	it	eq
 800924a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800924e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009252:	2bff      	cmp	r3, #255	; 0xff
 8009254:	bf08      	it	eq
 8009256:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800925a:	f001 fac5 	bl	800a7e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800925e:	a901      	add	r1, sp, #4
 8009260:	a802      	add	r0, sp, #8
 8009262:	f001 f935 	bl	800a4d0 <xTaskCheckForTimeOut>
 8009266:	2800      	cmp	r0, #0
 8009268:	f040 8111 	bne.w	800948e <xQueueGenericSend+0x2de>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800926c:	f001 fa9a 	bl	800a7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009270:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009274:	429a      	cmp	r2, r3
 8009276:	d067      	beq.n	8009348 <xQueueGenericSend+0x198>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009278:	f001 fab6 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800927c:	f001 fa92 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009280:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009284:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009286:	2d00      	cmp	r5, #0
 8009288:	dd11      	ble.n	80092ae <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800928a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928c:	b17b      	cbz	r3, 80092ae <xQueueGenericSend+0xfe>
 800928e:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8009292:	e001      	b.n	8009298 <xQueueGenericSend+0xe8>
 8009294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009296:	b153      	cbz	r3, 80092ae <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009298:	4650      	mov	r0, sl
 800929a:	f001 f8bf 	bl	800a41c <xTaskRemoveFromEventList>
 800929e:	b108      	cbz	r0, 80092a4 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 80092a0:	f001 f956 	bl	800a550 <vTaskMissedYield>
 80092a4:	3d01      	subs	r5, #1
 80092a6:	b2eb      	uxtb	r3, r5
 80092a8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f2      	bne.n	8009294 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 80092ae:	23ff      	movs	r3, #255	; 0xff
 80092b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80092b4:	f001 fa98 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80092b8:	f001 fa74 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80092bc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80092c0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	dd11      	ble.n	80092ea <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	b17b      	cbz	r3, 80092ea <xQueueGenericSend+0x13a>
 80092ca:	f104 0a10 	add.w	sl, r4, #16
 80092ce:	e001      	b.n	80092d4 <xQueueGenericSend+0x124>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	b153      	cbz	r3, 80092ea <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d4:	4650      	mov	r0, sl
 80092d6:	f001 f8a1 	bl	800a41c <xTaskRemoveFromEventList>
 80092da:	b108      	cbz	r0, 80092e0 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 80092dc:	f001 f938 	bl	800a550 <vTaskMissedYield>
 80092e0:	3d01      	subs	r5, #1
 80092e2:	b2eb      	uxtb	r3, r5
 80092e4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f2      	bne.n	80092d0 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 80092ea:	23ff      	movs	r3, #255	; 0xff
 80092ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80092f0:	f001 fa7a 	bl	800a7e8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80092f4:	f000 ff04 	bl	800a100 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80092f8:	f001 fa54 	bl	800a7a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80092fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009300:	429a      	cmp	r2, r3
 8009302:	f04f 0a01 	mov.w	sl, #1
 8009306:	d289      	bcs.n	800921c <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009308:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800930c:	2a00      	cmp	r2, #0
 800930e:	f000 8086 	beq.w	800941e <xQueueGenericSend+0x26e>
	else if( xPosition == queueSEND_TO_BACK )
 8009312:	2e00      	cmp	r6, #0
 8009314:	f000 80a1 	beq.w	800945a <xQueueGenericSend+0x2aa>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009318:	4639      	mov	r1, r7
 800931a:	68e0      	ldr	r0, [r4, #12]
 800931c:	f005 fc62 	bl	800ebe4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009322:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009324:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009326:	425b      	negs	r3, r3
 8009328:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800932a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800932c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800932e:	d202      	bcs.n	8009336 <xQueueGenericSend+0x186>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009330:	6862      	ldr	r2, [r4, #4]
 8009332:	4413      	add	r3, r2
 8009334:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009336:	2e02      	cmp	r6, #2
 8009338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800933a:	f000 80c6 	beq.w	80094ca <xQueueGenericSend+0x31a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800933e:	3501      	adds	r5, #1
 8009340:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009342:	2b00      	cmp	r3, #0
 8009344:	d071      	beq.n	800942a <xQueueGenericSend+0x27a>
 8009346:	e09b      	b.n	8009480 <xQueueGenericSend+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009348:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800934c:	f001 fa4c 	bl	800a7e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009350:	4650      	mov	r0, sl
 8009352:	9901      	ldr	r1, [sp, #4]
 8009354:	f001 f812 	bl	800a37c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009358:	f001 fa24 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800935c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009360:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009362:	2d00      	cmp	r5, #0
 8009364:	dd11      	ble.n	800938a <xQueueGenericSend+0x1da>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009368:	b17b      	cbz	r3, 800938a <xQueueGenericSend+0x1da>
 800936a:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800936e:	e001      	b.n	8009374 <xQueueGenericSend+0x1c4>
 8009370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009372:	b153      	cbz	r3, 800938a <xQueueGenericSend+0x1da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009374:	4658      	mov	r0, fp
 8009376:	f001 f851 	bl	800a41c <xTaskRemoveFromEventList>
 800937a:	b108      	cbz	r0, 8009380 <xQueueGenericSend+0x1d0>
						vTaskMissedYield();
 800937c:	f001 f8e8 	bl	800a550 <vTaskMissedYield>
 8009380:	3d01      	subs	r5, #1
 8009382:	b2eb      	uxtb	r3, r5
 8009384:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1f2      	bne.n	8009370 <xQueueGenericSend+0x1c0>
		pxQueue->cTxLock = queueUNLOCKED;
 800938a:	23ff      	movs	r3, #255	; 0xff
 800938c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009390:	f001 fa2a 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009394:	f001 fa06 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009398:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800939c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800939e:	2d00      	cmp	r5, #0
 80093a0:	dc0a      	bgt.n	80093b8 <xQueueGenericSend+0x208>
 80093a2:	e00c      	b.n	80093be <xQueueGenericSend+0x20e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a4:	4650      	mov	r0, sl
 80093a6:	f001 f839 	bl	800a41c <xTaskRemoveFromEventList>
 80093aa:	b108      	cbz	r0, 80093b0 <xQueueGenericSend+0x200>
					vTaskMissedYield();
 80093ac:	f001 f8d0 	bl	800a550 <vTaskMissedYield>
 80093b0:	3d01      	subs	r5, #1
 80093b2:	b2eb      	uxtb	r3, r5
 80093b4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093b6:	b113      	cbz	r3, 80093be <xQueueGenericSend+0x20e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f2      	bne.n	80093a4 <xQueueGenericSend+0x1f4>
		pxQueue->cRxLock = queueUNLOCKED;
 80093be:	23ff      	movs	r3, #255	; 0xff
 80093c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80093c4:	f001 fa10 	bl	800a7e8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80093c8:	f000 fe9a 	bl	800a100 <xTaskResumeAll>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d193      	bne.n	80092f8 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 80093d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093d4:	f8c9 3000 	str.w	r3, [r9]
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	e78a      	b.n	80092f8 <xQueueGenericSend+0x148>
 80093e2:	f04f 0a00 	mov.w	sl, #0
 80093e6:	e70f      	b.n	8009208 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	f43f aeea 	beq.w	80091c4 <xQueueGenericSend+0x14>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	e7fe      	b.n	8009400 <xQueueGenericSend+0x250>
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	e7fe      	b.n	8009412 <xQueueGenericSend+0x262>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009414:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009416:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009418:	2a00      	cmp	r2, #0
 800941a:	f47f af7d 	bne.w	8009318 <xQueueGenericSend+0x168>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800941e:	6826      	ldr	r6, [r4, #0]
 8009420:	3501      	adds	r5, #1
 8009422:	b146      	cbz	r6, 8009436 <xQueueGenericSend+0x286>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009424:	6a63      	ldr	r3, [r4, #36]	; 0x24
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009426:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009428:	bb53      	cbnz	r3, 8009480 <xQueueGenericSend+0x2d0>
				taskEXIT_CRITICAL();
 800942a:	f001 f9dd 	bl	800a7e8 <vPortExitCritical>
				return pdPASS;
 800942e:	2001      	movs	r0, #1
}
 8009430:	b005      	add	sp, #20
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009436:	6860      	ldr	r0, [r4, #4]
 8009438:	f001 f8f0 	bl	800a61c <xTaskPriorityDisinherit>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800943c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 800943e:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009440:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009442:	b9eb      	cbnz	r3, 8009480 <xQueueGenericSend+0x2d0>
					else if( xYieldRequired != pdFALSE )
 8009444:	2800      	cmp	r0, #0
 8009446:	d0f0      	beq.n	800942a <xQueueGenericSend+0x27a>
						queueYIELD_IF_USING_PREEMPTION();
 8009448:	4b37      	ldr	r3, [pc, #220]	; (8009528 <xQueueGenericSend+0x378>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	e7e7      	b.n	800942a <xQueueGenericSend+0x27a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800945a:	4639      	mov	r1, r7
 800945c:	68a0      	ldr	r0, [r4, #8]
 800945e:	f005 fbc1 	bl	800ebe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009466:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009468:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800946a:	4293      	cmp	r3, r2
 800946c:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009470:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009472:	d3d7      	bcc.n	8009424 <xQueueGenericSend+0x274>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009474:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009476:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8009478:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800947a:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0d4      	beq.n	800942a <xQueueGenericSend+0x27a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009480:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009484:	f000 ffca 	bl	800a41c <xTaskRemoveFromEventList>
 8009488:	2800      	cmp	r0, #0
 800948a:	d1dd      	bne.n	8009448 <xQueueGenericSend+0x298>
 800948c:	e7cd      	b.n	800942a <xQueueGenericSend+0x27a>
	taskENTER_CRITICAL();
 800948e:	f001 f989 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009492:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009496:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd1d      	ble.n	80094d8 <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800949c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800949e:	b1db      	cbz	r3, 80094d8 <xQueueGenericSend+0x328>
 80094a0:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80094a4:	e005      	b.n	80094b2 <xQueueGenericSend+0x302>
 80094a6:	3d01      	subs	r5, #1
 80094a8:	b2eb      	uxtb	r3, r5
 80094aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094ac:	b1a3      	cbz	r3, 80094d8 <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b0:	b193      	cbz	r3, 80094d8 <xQueueGenericSend+0x328>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 ffb2 	bl	800a41c <xTaskRemoveFromEventList>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d0f4      	beq.n	80094a6 <xQueueGenericSend+0x2f6>
						vTaskMissedYield();
 80094bc:	f001 f848 	bl	800a550 <vTaskMissedYield>
 80094c0:	e7f1      	b.n	80094a6 <xQueueGenericSend+0x2f6>
					taskEXIT_CRITICAL();
 80094c2:	f001 f991 	bl	800a7e8 <vPortExitCritical>
					return errQUEUE_FULL;
 80094c6:	4628      	mov	r0, r5
 80094c8:	e7b2      	b.n	8009430 <xQueueGenericSend+0x280>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	d1ab      	bne.n	8009426 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80094ce:	2201      	movs	r2, #1
 80094d0:	63a2      	str	r2, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0a9      	beq.n	800942a <xQueueGenericSend+0x27a>
 80094d6:	e7d3      	b.n	8009480 <xQueueGenericSend+0x2d0>
		pxQueue->cTxLock = queueUNLOCKED;
 80094d8:	23ff      	movs	r3, #255	; 0xff
 80094da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80094de:	f001 f983 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80094e2:	f001 f95f 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80094e6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80094ea:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ec:	2d00      	cmp	r5, #0
 80094ee:	dd12      	ble.n	8009516 <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	b183      	cbz	r3, 8009516 <xQueueGenericSend+0x366>
 80094f4:	f104 0610 	add.w	r6, r4, #16
 80094f8:	e005      	b.n	8009506 <xQueueGenericSend+0x356>
 80094fa:	3d01      	subs	r5, #1
 80094fc:	b2eb      	uxtb	r3, r5
 80094fe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009500:	b14b      	cbz	r3, 8009516 <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	b13b      	cbz	r3, 8009516 <xQueueGenericSend+0x366>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009506:	4630      	mov	r0, r6
 8009508:	f000 ff88 	bl	800a41c <xTaskRemoveFromEventList>
 800950c:	2800      	cmp	r0, #0
 800950e:	d0f4      	beq.n	80094fa <xQueueGenericSend+0x34a>
					vTaskMissedYield();
 8009510:	f001 f81e 	bl	800a550 <vTaskMissedYield>
 8009514:	e7f1      	b.n	80094fa <xQueueGenericSend+0x34a>
		pxQueue->cRxLock = queueUNLOCKED;
 8009516:	23ff      	movs	r3, #255	; 0xff
 8009518:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800951c:	f001 f964 	bl	800a7e8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8009520:	f000 fdee 	bl	800a100 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009524:	2000      	movs	r0, #0
 8009526:	e783      	b.n	8009430 <xQueueGenericSend+0x280>
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <xQueueCreateMutex>:
	{
 800952c:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800952e:	2048      	movs	r0, #72	; 0x48
 8009530:	f001 fa9a 	bl	800aa68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009534:	4604      	mov	r4, r0
 8009536:	b350      	cbz	r0, 800958e <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8009538:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800953a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800953c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800953e:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8009542:	f001 f92f 	bl	800a7a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009546:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800954a:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800954c:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800954e:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009552:	1a9a      	subs	r2, r3, r2
 8009554:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009556:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8009558:	26ff      	movs	r6, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800955a:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800955e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009560:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009564:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009568:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800956c:	f7ff fd8e 	bl	800908c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009574:	f7ff fd8a 	bl	800908c <vListInitialise>
	taskEXIT_CRITICAL();
 8009578:	f001 f936 	bl	800a7e8 <vPortExitCritical>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800957c:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009580:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009582:	462b      	mov	r3, r5
 8009584:	462a      	mov	r2, r5
 8009586:	4629      	mov	r1, r5
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff fe11 	bl	80091b0 <xQueueGenericSend>
	}
 800958e:	4620      	mov	r0, r4
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	bf00      	nop

08009594 <xQueueGiveMutexRecursive>:
	{
 8009594:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009596:	b138      	cbz	r0, 80095a8 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009598:	6845      	ldr	r5, [r0, #4]
 800959a:	4604      	mov	r4, r0
 800959c:	f000 ffde 	bl	800a55c <xTaskGetCurrentTaskHandle>
 80095a0:	4285      	cmp	r5, r0
 80095a2:	d00a      	beq.n	80095ba <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80095a4:	2000      	movs	r0, #0
	}
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	e7fe      	b.n	80095b8 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	3b01      	subs	r3, #1
 80095be:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80095c0:	b10b      	cbz	r3, 80095c6 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 80095c2:	2001      	movs	r0, #1
	}
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80095c6:	4620      	mov	r0, r4
 80095c8:	461a      	mov	r2, r3
 80095ca:	4619      	mov	r1, r3
 80095cc:	f7ff fdf0 	bl	80091b0 <xQueueGenericSend>
			xReturn = pdPASS;
 80095d0:	2001      	movs	r0, #1
	}
 80095d2:	bd38      	pop	{r3, r4, r5, pc}

080095d4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d037      	beq.n	8009648 <xQueueGenericSendFromISR+0x74>
{
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095dc:	b341      	cbz	r1, 8009630 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d10b      	bne.n	80095fa <xQueueGenericSendFromISR+0x26>
 80095e2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80095e4:	2c01      	cmp	r4, #1
 80095e6:	d008      	beq.n	80095fa <xQueueGenericSendFromISR+0x26>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSendFromISR+0x24>
 80095fa:	4604      	mov	r4, r0
 80095fc:	461f      	mov	r7, r3
 80095fe:	4691      	mov	r9, r2
 8009600:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009602:	f001 f9db 	bl	800a9bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009606:	f3ef 8811 	mrs	r8, BASEPRI
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800961a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800961c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800961e:	429a      	cmp	r2, r3
 8009620:	d31b      	bcc.n	800965a <xQueueGenericSendFromISR+0x86>
 8009622:	2f02      	cmp	r7, #2
 8009624:	d034      	beq.n	8009690 <xQueueGenericSendFromISR+0xbc>
			xReturn = errQUEUE_FULL;
 8009626:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009628:	f388 8811 	msr	BASEPRI, r8
}
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009630:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009632:	2c00      	cmp	r4, #0
 8009634:	d0d3      	beq.n	80095de <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	e7fe      	b.n	8009646 <xQueueGenericSendFromISR+0x72>
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	e7fe      	b.n	8009658 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800965a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800965e:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009660:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8009662:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009664:	b1da      	cbz	r2, 800969e <xQueueGenericSendFromISR+0xca>
	else if( xPosition == queueSEND_TO_BACK )
 8009666:	b36f      	cbz	r7, 80096c4 <xQueueGenericSendFromISR+0xf0>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009668:	4651      	mov	r1, sl
 800966a:	68e0      	ldr	r0, [r4, #12]
 800966c:	f005 faba 	bl	800ebe4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009672:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009674:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009676:	425b      	negs	r3, r3
 8009678:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800967a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800967c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800967e:	d202      	bcs.n	8009686 <xQueueGenericSendFromISR+0xb2>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009680:	6862      	ldr	r2, [r4, #4]
 8009682:	4413      	add	r3, r2
 8009684:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009686:	2f02      	cmp	r7, #2
 8009688:	d10f      	bne.n	80096aa <xQueueGenericSendFromISR+0xd6>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800968a:	b176      	cbz	r6, 80096aa <xQueueGenericSendFromISR+0xd6>
				--uxMessagesWaiting;
 800968c:	3e01      	subs	r6, #1
 800968e:	e00c      	b.n	80096aa <xQueueGenericSendFromISR+0xd6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009690:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009694:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009696:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8009698:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800969a:	2a00      	cmp	r2, #0
 800969c:	d1e4      	bne.n	8009668 <xQueueGenericSendFromISR+0x94>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800969e:	6827      	ldr	r7, [r4, #0]
 80096a0:	b91f      	cbnz	r7, 80096aa <xQueueGenericSendFromISR+0xd6>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80096a2:	6860      	ldr	r0, [r4, #4]
 80096a4:	f000 ffba 	bl	800a61c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80096a8:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80096aa:	3601      	adds	r6, #1
			if( cTxLock == queueUNLOCKED )
 80096ac:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80096ae:	63a6      	str	r6, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80096b0:	d016      	beq.n	80096e0 <xQueueGenericSendFromISR+0x10c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096b2:	1c6b      	adds	r3, r5, #1
 80096b4:	b25b      	sxtb	r3, r3
 80096b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80096ba:	2001      	movs	r0, #1
	__asm volatile
 80096bc:	f388 8811 	msr	BASEPRI, r8
}
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80096c4:	4651      	mov	r1, sl
 80096c6:	68a0      	ldr	r0, [r4, #8]
 80096c8:	f005 fa8c 	bl	800ebe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096d0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80096d2:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096d4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80096d6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096d8:	d3e7      	bcc.n	80096aa <xQueueGenericSendFromISR+0xd6>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	e7e4      	b.n	80096aa <xQueueGenericSendFromISR+0xd6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0e9      	beq.n	80096ba <xQueueGenericSendFromISR+0xe6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096ea:	f000 fe97 	bl	800a41c <xTaskRemoveFromEventList>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d0e3      	beq.n	80096ba <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	d0e0      	beq.n	80096ba <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096f8:	2001      	movs	r0, #1
 80096fa:	f8c9 0000 	str.w	r0, [r9]
 80096fe:	e793      	b.n	8009628 <xQueueGenericSendFromISR+0x54>

08009700 <xQueueGenericReceive>:
{
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	b085      	sub	sp, #20
 8009706:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009708:	2800      	cmp	r0, #0
 800970a:	f000 8158 	beq.w	80099be <xQueueGenericReceive+0x2be>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800970e:	2900      	cmp	r1, #0
 8009710:	f000 8148 	beq.w	80099a4 <xQueueGenericReceive+0x2a4>
 8009714:	4604      	mov	r4, r0
 8009716:	4698      	mov	r8, r3
 8009718:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971a:	f000 ff25 	bl	800a568 <xTaskGetSchedulerState>
 800971e:	b950      	cbnz	r0, 8009736 <xQueueGenericReceive+0x36>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	b143      	cbz	r3, 8009736 <xQueueGenericReceive+0x36>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	e7fe      	b.n	8009734 <xQueueGenericReceive+0x34>
		taskENTER_CRITICAL();
 8009736:	f001 f835 	bl	800a7a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800973c:	2d00      	cmp	r5, #0
 800973e:	f040 80ba 	bne.w	80098b6 <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d06a      	beq.n	800981e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
 8009748:	a802      	add	r0, sp, #8
 800974a:	f000 feab 	bl	800a4a4 <vTaskSetTimeOutState>
					portYIELD_WITHIN_API();
 800974e:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8009a0c <xQueueGenericReceive+0x30c>
		prvLockQueue( pxQueue );
 8009752:	46aa      	mov	sl, r5
 8009754:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8009758:	f001 f846 	bl	800a7e8 <vPortExitCritical>
		vTaskSuspendAll();
 800975c:	f000 fc0e 	bl	8009f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009760:	f001 f820 	bl	800a7a4 <vPortEnterCritical>
 8009764:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009768:	2bff      	cmp	r3, #255	; 0xff
 800976a:	bf08      	it	eq
 800976c:	f884 a044 	strbeq.w	sl, [r4, #68]	; 0x44
 8009770:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009774:	2bff      	cmp	r3, #255	; 0xff
 8009776:	bf08      	it	eq
 8009778:	f884 a045 	strbeq.w	sl, [r4, #69]	; 0x45
 800977c:	f001 f834 	bl	800a7e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009780:	a901      	add	r1, sp, #4
 8009782:	a802      	add	r0, sp, #8
 8009784:	f000 fea4 	bl	800a4d0 <xTaskCheckForTimeOut>
 8009788:	2800      	cmp	r0, #0
 800978a:	d14e      	bne.n	800982a <xQueueGenericReceive+0x12a>
	taskENTER_CRITICAL();
 800978c:	f001 f80a 	bl	800a7a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80b9 	beq.w	800990a <xQueueGenericReceive+0x20a>
	taskEXIT_CRITICAL();
 8009798:	f001 f826 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800979c:	f001 f802 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80097a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80097a4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	dc0a      	bgt.n	80097c0 <xQueueGenericReceive+0xc0>
 80097aa:	e00c      	b.n	80097c6 <xQueueGenericReceive+0xc6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ac:	4630      	mov	r0, r6
 80097ae:	f000 fe35 	bl	800a41c <xTaskRemoveFromEventList>
 80097b2:	b108      	cbz	r0, 80097b8 <xQueueGenericReceive+0xb8>
						vTaskMissedYield();
 80097b4:	f000 fecc 	bl	800a550 <vTaskMissedYield>
 80097b8:	3d01      	subs	r5, #1
 80097ba:	b2eb      	uxtb	r3, r5
 80097bc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097be:	b113      	cbz	r3, 80097c6 <xQueueGenericReceive+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f2      	bne.n	80097ac <xQueueGenericReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 80097c6:	23ff      	movs	r3, #255	; 0xff
 80097c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80097cc:	f001 f80c 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80097d0:	f000 ffe8 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80097d4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80097d8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097da:	2d00      	cmp	r5, #0
 80097dc:	dd10      	ble.n	8009800 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	b173      	cbz	r3, 8009800 <xQueueGenericReceive+0x100>
 80097e2:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097e6:	4648      	mov	r0, r9
 80097e8:	f000 fe18 	bl	800a41c <xTaskRemoveFromEventList>
 80097ec:	b108      	cbz	r0, 80097f2 <xQueueGenericReceive+0xf2>
					vTaskMissedYield();
 80097ee:	f000 feaf 	bl	800a550 <vTaskMissedYield>
 80097f2:	3d01      	subs	r5, #1
 80097f4:	b2eb      	uxtb	r3, r5
 80097f6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097f8:	b113      	cbz	r3, 8009800 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f2      	bne.n	80097e6 <xQueueGenericReceive+0xe6>
		pxQueue->cRxLock = queueUNLOCKED;
 8009800:	23ff      	movs	r3, #255	; 0xff
 8009802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009806:	f000 ffef 	bl	800a7e8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800980a:	f000 fc79 	bl	800a100 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800980e:	f000 ffc9 	bl	800a7a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009812:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009814:	2d00      	cmp	r5, #0
 8009816:	d14e      	bne.n	80098b6 <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d19c      	bne.n	8009758 <xQueueGenericReceive+0x58>
					taskEXIT_CRITICAL();
 800981e:	f000 ffe3 	bl	800a7e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009822:	2000      	movs	r0, #0
}
 8009824:	b005      	add	sp, #20
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskENTER_CRITICAL();
 800982a:	f000 ffbb 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800982e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009832:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009834:	2d00      	cmp	r5, #0
 8009836:	dc0a      	bgt.n	800984e <xQueueGenericReceive+0x14e>
 8009838:	e00c      	b.n	8009854 <xQueueGenericReceive+0x154>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800983a:	4630      	mov	r0, r6
 800983c:	f000 fdee 	bl	800a41c <xTaskRemoveFromEventList>
 8009840:	b108      	cbz	r0, 8009846 <xQueueGenericReceive+0x146>
						vTaskMissedYield();
 8009842:	f000 fe85 	bl	800a550 <vTaskMissedYield>
 8009846:	3d01      	subs	r5, #1
 8009848:	b2eb      	uxtb	r3, r5
 800984a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800984c:	b113      	cbz	r3, 8009854 <xQueueGenericReceive+0x154>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f2      	bne.n	800983a <xQueueGenericReceive+0x13a>
		pxQueue->cTxLock = queueUNLOCKED;
 8009854:	23ff      	movs	r3, #255	; 0xff
 8009856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800985a:	f000 ffc5 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800985e:	f000 ffa1 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009862:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009866:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009868:	2d00      	cmp	r5, #0
 800986a:	dd11      	ble.n	8009890 <xQueueGenericReceive+0x190>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	b17b      	cbz	r3, 8009890 <xQueueGenericReceive+0x190>
 8009870:	f104 0910 	add.w	r9, r4, #16
 8009874:	e001      	b.n	800987a <xQueueGenericReceive+0x17a>
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	b153      	cbz	r3, 8009890 <xQueueGenericReceive+0x190>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800987a:	4648      	mov	r0, r9
 800987c:	f000 fdce 	bl	800a41c <xTaskRemoveFromEventList>
 8009880:	b108      	cbz	r0, 8009886 <xQueueGenericReceive+0x186>
					vTaskMissedYield();
 8009882:	f000 fe65 	bl	800a550 <vTaskMissedYield>
 8009886:	3d01      	subs	r5, #1
 8009888:	b2eb      	uxtb	r3, r5
 800988a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1f2      	bne.n	8009876 <xQueueGenericReceive+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 8009890:	23ff      	movs	r3, #255	; 0xff
 8009892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009896:	f000 ffa7 	bl	800a7e8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800989a:	f000 fc31 	bl	800a100 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800989e:	f000 ff81 	bl	800a7a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0ba      	beq.n	800981e <xQueueGenericReceive+0x11e>
	taskEXIT_CRITICAL();
 80098a8:	f000 ff9e 	bl	800a7e8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80098ac:	f000 ff7a 	bl	800a7a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	d0b0      	beq.n	8009818 <xQueueGenericReceive+0x118>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80098b8:	68e6      	ldr	r6, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098ba:	b152      	cbz	r2, 80098d2 <xQueueGenericReceive+0x1d2>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098bc:	6861      	ldr	r1, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80098be:	18b3      	adds	r3, r6, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098c0:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80098c2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80098c4:	bf24      	itt	cs
 80098c6:	6823      	ldrcs	r3, [r4, #0]
 80098c8:	60e3      	strcs	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80098ca:	4638      	mov	r0, r7
 80098cc:	68e1      	ldr	r1, [r4, #12]
 80098ce:	f005 f989 	bl	800ebe4 <memcpy>
				if( xJustPeeking == pdFALSE )
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	f040 8083 	bne.w	80099e0 <xQueueGenericReceive+0x2e0>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098da:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80098dc:	3d01      	subs	r5, #1
 80098de:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8086 	beq.w	80099f2 <xQueueGenericReceive+0x2f2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d07c      	beq.n	80099e6 <xQueueGenericReceive+0x2e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ec:	f104 0010 	add.w	r0, r4, #16
 80098f0:	f000 fd94 	bl	800a41c <xTaskRemoveFromEventList>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d076      	beq.n	80099e6 <xQueueGenericReceive+0x2e6>
							queueYIELD_IF_USING_PREEMPTION();
 80098f8:	4b44      	ldr	r3, [pc, #272]	; (8009a0c <xQueueGenericReceive+0x30c>)
 80098fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	e06d      	b.n	80099e6 <xQueueGenericReceive+0x2e6>
	taskEXIT_CRITICAL();
 800990a:	f000 ff6d 	bl	800a7e8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d05d      	beq.n	80099d0 <xQueueGenericReceive+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	4630      	mov	r0, r6
 8009918:	f000 fd30 	bl	800a37c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800991c:	f000 ff42 	bl	800a7a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009920:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009924:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009926:	2d00      	cmp	r5, #0
 8009928:	dc0a      	bgt.n	8009940 <xQueueGenericReceive+0x240>
 800992a:	e00c      	b.n	8009946 <xQueueGenericReceive+0x246>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800992c:	4630      	mov	r0, r6
 800992e:	f000 fd75 	bl	800a41c <xTaskRemoveFromEventList>
 8009932:	b108      	cbz	r0, 8009938 <xQueueGenericReceive+0x238>
						vTaskMissedYield();
 8009934:	f000 fe0c 	bl	800a550 <vTaskMissedYield>
 8009938:	3d01      	subs	r5, #1
 800993a:	b2eb      	uxtb	r3, r5
 800993c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800993e:	b113      	cbz	r3, 8009946 <xQueueGenericReceive+0x246>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f2      	bne.n	800992c <xQueueGenericReceive+0x22c>
		pxQueue->cTxLock = queueUNLOCKED;
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800994c:	f000 ff4c 	bl	800a7e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009950:	f000 ff28 	bl	800a7a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009954:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009958:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800995a:	2d00      	cmp	r5, #0
 800995c:	dd10      	ble.n	8009980 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	b173      	cbz	r3, 8009980 <xQueueGenericReceive+0x280>
 8009962:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009966:	4648      	mov	r0, r9
 8009968:	f000 fd58 	bl	800a41c <xTaskRemoveFromEventList>
 800996c:	b108      	cbz	r0, 8009972 <xQueueGenericReceive+0x272>
					vTaskMissedYield();
 800996e:	f000 fdef 	bl	800a550 <vTaskMissedYield>
 8009972:	3d01      	subs	r5, #1
 8009974:	b2eb      	uxtb	r3, r5
 8009976:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009978:	b113      	cbz	r3, 8009980 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1f2      	bne.n	8009966 <xQueueGenericReceive+0x266>
		pxQueue->cRxLock = queueUNLOCKED;
 8009980:	23ff      	movs	r3, #255	; 0xff
 8009982:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009986:	f000 ff2f 	bl	800a7e8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800998a:	f000 fbb9 	bl	800a100 <xTaskResumeAll>
 800998e:	2800      	cmp	r0, #0
 8009990:	d18c      	bne.n	80098ac <xQueueGenericReceive+0x1ac>
					portYIELD_WITHIN_API();
 8009992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009996:	f8cb 3000 	str.w	r3, [fp]
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e783      	b.n	80098ac <xQueueGenericReceive+0x1ac>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80099a6:	2a00      	cmp	r2, #0
 80099a8:	f43f aeb4 	beq.w	8009714 <xQueueGenericReceive+0x14>
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	e7fe      	b.n	80099bc <xQueueGenericReceive+0x2bc>
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	e7fe      	b.n	80099ce <xQueueGenericReceive+0x2ce>
						taskENTER_CRITICAL();
 80099d0:	f000 fee8 	bl	800a7a4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80099d4:	6860      	ldr	r0, [r4, #4]
 80099d6:	f000 fdd7 	bl	800a588 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80099da:	f000 ff05 	bl	800a7e8 <vPortExitCritical>
 80099de:	e799      	b.n	8009914 <xQueueGenericReceive+0x214>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80099e2:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e4:	b94b      	cbnz	r3, 80099fa <xQueueGenericReceive+0x2fa>
				taskEXIT_CRITICAL();
 80099e6:	f000 feff 	bl	800a7e8 <vPortExitCritical>
				return pdPASS;
 80099ea:	2001      	movs	r0, #1
}
 80099ec:	b005      	add	sp, #20
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80099f2:	f000 fe6b 	bl	800a6cc <pvTaskIncrementMutexHeldCount>
 80099f6:	6060      	str	r0, [r4, #4]
 80099f8:	e775      	b.n	80098e6 <xQueueGenericReceive+0x1e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099fe:	f000 fd0d 	bl	800a41c <xTaskRemoveFromEventList>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f47f af78 	bne.w	80098f8 <xQueueGenericReceive+0x1f8>
 8009a08:	e7ed      	b.n	80099e6 <xQueueGenericReceive+0x2e6>
 8009a0a:	bf00      	nop
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8009a10:	b190      	cbz	r0, 8009a38 <xQueueTakeMutexRecursive+0x28>
	{
 8009a12:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009a14:	6846      	ldr	r6, [r0, #4]
 8009a16:	4604      	mov	r4, r0
 8009a18:	460d      	mov	r5, r1
 8009a1a:	f000 fd9f 	bl	800a55c <xTaskGetCurrentTaskHandle>
 8009a1e:	4286      	cmp	r6, r0
 8009a20:	d013      	beq.n	8009a4a <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8009a22:	2300      	movs	r3, #0
 8009a24:	462a      	mov	r2, r5
 8009a26:	4619      	mov	r1, r3
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff fe69 	bl	8009700 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 8009a2e:	b110      	cbz	r0, 8009a36 <xQueueTakeMutexRecursive+0x26>
				( pxMutex->u.uxRecursiveCallCount )++;
 8009a30:	68e3      	ldr	r3, [r4, #12]
 8009a32:	3301      	adds	r3, #1
 8009a34:	60e3      	str	r3, [r4, #12]
	}
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	e7fe      	b.n	8009a48 <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )++;
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8009a50:	2001      	movs	r0, #1
	}
 8009a52:	bd70      	pop	{r4, r5, r6, pc}

08009a54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a56:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a58:	4e1b      	ldr	r6, [pc, #108]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8009a5a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5c:	6833      	ldr	r3, [r6, #0]
{
 8009a5e:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a60:	1d18      	adds	r0, r3, #4
{
 8009a62:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a64:	f7ff fb4c 	bl	8009100 <uxListRemove>
 8009a68:	b940      	cbnz	r0, 8009a7c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009a6a:	6833      	ldr	r3, [r6, #0]
 8009a6c:	4917      	ldr	r1, [pc, #92]	; (8009acc <prvAddCurrentTaskToDelayedList+0x78>)
 8009a6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009a70:	680b      	ldr	r3, [r1, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	4082      	lsls	r2, r0
 8009a76:	ea23 0302 	bic.w	r3, r3, r2
 8009a7a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a7c:	1c6b      	adds	r3, r5, #1
 8009a7e:	d017      	beq.n	8009ab0 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a80:	6833      	ldr	r3, [r6, #0]
 8009a82:	1964      	adds	r4, r4, r5
 8009a84:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009a86:	d20b      	bcs.n	8009aa0 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a88:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	6831      	ldr	r1, [r6, #0]
 8009a8e:	3104      	adds	r1, #4
 8009a90:	f7ff fb1c 	bl	80090cc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009a9a:	bf88      	it	hi
 8009a9c:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aa0:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x84>)
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	6831      	ldr	r1, [r6, #0]
}
 8009aa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aaa:	3104      	adds	r1, #4
 8009aac:	f7ff bb0e 	b.w	80090cc <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	d0e5      	beq.n	8009a80 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab4:	6831      	ldr	r1, [r6, #0]
 8009ab6:	4809      	ldr	r0, [pc, #36]	; (8009adc <prvAddCurrentTaskToDelayedList+0x88>)
 8009ab8:	3104      	adds	r1, #4
}
 8009aba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009abe:	f7ff baf5 	b.w	80090ac <vListInsertEnd>
 8009ac2:	bf00      	nop
 8009ac4:	200004b0 	.word	0x200004b0
 8009ac8:	2000038c 	.word	0x2000038c
 8009acc:	20000438 	.word	0x20000438
 8009ad0:	20000390 	.word	0x20000390
 8009ad4:	20000468 	.word	0x20000468
 8009ad8:	20000394 	.word	0x20000394
 8009adc:	20000488 	.word	0x20000488

08009ae0 <xTaskCreate>:
	{
 8009ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8009ae8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aea:	4650      	mov	r0, sl
	{
 8009aec:	460d      	mov	r5, r1
 8009aee:	4699      	mov	r9, r3
 8009af0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af2:	f000 ffb9 	bl	800aa68 <pvPortMalloc>
			if( pxStack != NULL )
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f000 810e 	beq.w	8009d18 <xTaskCreate+0x238>
 8009afc:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009afe:	20b4      	movs	r0, #180	; 0xb4
 8009b00:	f000 ffb2 	bl	800aa68 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009b04:	4604      	mov	r4, r0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f000 80da 	beq.w	8009cc0 <xTaskCreate+0x1e0>
					pxNewTCB->pxStack = pxStack;
 8009b0c:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b0e:	782b      	ldrb	r3, [r5, #0]
 8009b10:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009b14:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 8009b18:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009b1a:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009b1c:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d04d      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b24:	786b      	ldrb	r3, [r5, #1]
 8009b26:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8009b2a:	786b      	ldrb	r3, [r5, #1]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d047      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b30:	78ab      	ldrb	r3, [r5, #2]
 8009b32:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8009b36:	78ab      	ldrb	r3, [r5, #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d041      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b3c:	78eb      	ldrb	r3, [r5, #3]
 8009b3e:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8009b42:	78eb      	ldrb	r3, [r5, #3]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d03b      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b48:	792b      	ldrb	r3, [r5, #4]
 8009b4a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8009b4e:	792b      	ldrb	r3, [r5, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d035      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b54:	796b      	ldrb	r3, [r5, #5]
 8009b56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8009b5a:	796b      	ldrb	r3, [r5, #5]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02f      	beq.n	8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b60:	79ab      	ldrb	r3, [r5, #6]
 8009b62:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8009b66:	79ab      	ldrb	r3, [r5, #6]
 8009b68:	b353      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b6a:	79eb      	ldrb	r3, [r5, #7]
 8009b6c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8009b70:	79eb      	ldrb	r3, [r5, #7]
 8009b72:	b32b      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b74:	7a2b      	ldrb	r3, [r5, #8]
 8009b76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8009b7a:	7a2b      	ldrb	r3, [r5, #8]
 8009b7c:	b303      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b7e:	7a6b      	ldrb	r3, [r5, #9]
 8009b80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8009b84:	7a6b      	ldrb	r3, [r5, #9]
 8009b86:	b1db      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b88:	7aab      	ldrb	r3, [r5, #10]
 8009b8a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8009b8e:	7aab      	ldrb	r3, [r5, #10]
 8009b90:	b1b3      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b92:	7aeb      	ldrb	r3, [r5, #11]
 8009b94:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8009b98:	7aeb      	ldrb	r3, [r5, #11]
 8009b9a:	b18b      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b9c:	7b2b      	ldrb	r3, [r5, #12]
 8009b9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8009ba2:	7b2b      	ldrb	r3, [r5, #12]
 8009ba4:	b163      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ba6:	7b6b      	ldrb	r3, [r5, #13]
 8009ba8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8009bac:	7b6b      	ldrb	r3, [r5, #13]
 8009bae:	b13b      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb0:	7bab      	ldrb	r3, [r5, #14]
 8009bb2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8009bb6:	7bab      	ldrb	r3, [r5, #14]
 8009bb8:	b113      	cbz	r3, 8009bc0 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bba:	7beb      	ldrb	r3, [r5, #15]
 8009bbc:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8009bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009bc2:	2d06      	cmp	r5, #6
 8009bc4:	bf28      	it	cs
 8009bc6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bc8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bcc:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8009bd0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009bd2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bd4:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bd6:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8009bda:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bde:	f7ff fa61 	bl	80090a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be2:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009be6:	f104 0018 	add.w	r0, r4, #24
 8009bea:	f7ff fa5b 	bl	80090a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bee:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8009bf0:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bf8:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bfc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bfe:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c00:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009c04:	f004 fff9 	bl	800ebfa <memset>
 8009c08:	4d45      	ldr	r5, [pc, #276]	; (8009d20 <xTaskCreate+0x240>)
 8009c0a:	4b46      	ldr	r3, [pc, #280]	; (8009d24 <xTaskCreate+0x244>)
 8009c0c:	4a46      	ldr	r2, [pc, #280]	; (8009d28 <xTaskCreate+0x248>)
 8009c0e:	6522      	str	r2, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c10:	4641      	mov	r1, r8
 8009c12:	464a      	mov	r2, r9
 8009c14:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c16:	e9c4 5315 	strd	r5, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c1a:	f000 fd95 	bl	800a748 <pxPortInitialiseStack>
 8009c1e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009c20:	b107      	cbz	r7, 8009c24 <xTaskCreate+0x144>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c22:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 8009c24:	f000 fdbe 	bl	800a7a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009c28:	4a40      	ldr	r2, [pc, #256]	; (8009d2c <xTaskCreate+0x24c>)
		if( pxCurrentTCB == NULL )
 8009c2a:	4e41      	ldr	r6, [pc, #260]	; (8009d30 <xTaskCreate+0x250>)
		uxCurrentNumberOfTasks++;
 8009c2c:	6813      	ldr	r3, [r2, #0]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c32:	6833      	ldr	r3, [r6, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d03a      	beq.n	8009cae <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 8009c38:	4f3e      	ldr	r7, [pc, #248]	; (8009d34 <xTaskCreate+0x254>)
 8009c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	b35a      	cbz	r2, 8009c98 <xTaskCreate+0x1b8>
 8009c40:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009d58 <xTaskCreate+0x278>
		uxTaskNumber++;
 8009c44:	4a3c      	ldr	r2, [pc, #240]	; (8009d38 <xTaskCreate+0x258>)
		prvAddTaskToReadyList( pxNewTCB );
 8009c46:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009d5c <xTaskCreate+0x27c>
		uxTaskNumber++;
 8009c4a:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009c4c:	f8dc e000 	ldr.w	lr, [ip]
 8009c50:	2501      	movs	r5, #1
		uxTaskNumber++;
 8009c52:	4428      	add	r0, r5
 8009c54:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009c56:	fa05 f203 	lsl.w	r2, r5, r3
 8009c5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009c5e:	ea42 020e 	orr.w	r2, r2, lr
 8009c62:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8009c66:	4651      	mov	r1, sl
 8009c68:	f8cc 2000 	str.w	r2, [ip]
 8009c6c:	f7ff fa1e 	bl	80090ac <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009c70:	f000 fdba 	bl	800a7e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	b1bb      	cbz	r3, 8009ca8 <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c78:	6832      	ldr	r2, [r6, #0]
 8009c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d212      	bcs.n	8009ca8 <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 8009c82:	4b2e      	ldr	r3, [pc, #184]	; (8009d3c <xTaskCreate+0x25c>)
 8009c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8009c92:	4628      	mov	r0, r5
	}
 8009c94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c98:	6832      	ldr	r2, [r6, #0]
 8009c9a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8009d58 <xTaskCreate+0x278>
 8009c9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ca0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8009ca2:	bf98      	it	ls
 8009ca4:	6034      	strls	r4, [r6, #0]
 8009ca6:	e7cd      	b.n	8009c44 <xTaskCreate+0x164>
			xReturn = pdPASS;
 8009ca8:	4628      	mov	r0, r5
	}
 8009caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8009cae:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d00b      	beq.n	8009cce <xTaskCreate+0x1ee>
 8009cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cb8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8009d58 <xTaskCreate+0x278>
 8009cbc:	4f1d      	ldr	r7, [pc, #116]	; (8009d34 <xTaskCreate+0x254>)
 8009cbe:	e7c1      	b.n	8009c44 <xTaskCreate+0x164>
					vPortFree( pxStack );
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 ff5d 	bl	800ab80 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8009d58 <xTaskCreate+0x278>
 8009cd2:	4645      	mov	r5, r8
 8009cd4:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cd8:	4628      	mov	r0, r5
 8009cda:	3514      	adds	r5, #20
 8009cdc:	f7ff f9d6 	bl	800908c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ce0:	42bd      	cmp	r5, r7
 8009ce2:	d1f9      	bne.n	8009cd8 <xTaskCreate+0x1f8>
	vListInitialise( &xDelayedTaskList1 );
 8009ce4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009d60 <xTaskCreate+0x280>
	vListInitialise( &xDelayedTaskList2 );
 8009ce8:	4d15      	ldr	r5, [pc, #84]	; (8009d40 <xTaskCreate+0x260>)
 8009cea:	4f12      	ldr	r7, [pc, #72]	; (8009d34 <xTaskCreate+0x254>)
	vListInitialise( &xDelayedTaskList1 );
 8009cec:	4648      	mov	r0, r9
 8009cee:	f7ff f9cd 	bl	800908c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7ff f9ca 	bl	800908c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cf8:	4812      	ldr	r0, [pc, #72]	; (8009d44 <xTaskCreate+0x264>)
 8009cfa:	f7ff f9c7 	bl	800908c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009cfe:	4812      	ldr	r0, [pc, #72]	; (8009d48 <xTaskCreate+0x268>)
 8009d00:	f7ff f9c4 	bl	800908c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009d04:	4811      	ldr	r0, [pc, #68]	; (8009d4c <xTaskCreate+0x26c>)
 8009d06:	f7ff f9c1 	bl	800908c <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d0a:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <xTaskCreate+0x270>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d0c:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <xTaskCreate+0x274>)
 8009d0e:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d12:	601d      	str	r5, [r3, #0]
 8009d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d16:	e795      	b.n	8009c44 <xTaskCreate+0x164>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	e7ba      	b.n	8009c94 <xTaskCreate+0x1b4>
 8009d1e:	bf00      	nop
 8009d20:	08011e70 	.word	0x08011e70
 8009d24:	08011e30 	.word	0x08011e30
 8009d28:	08011e50 	.word	0x08011e50
 8009d2c:	20000424 	.word	0x20000424
 8009d30:	2000038c 	.word	0x2000038c
 8009d34:	20000484 	.word	0x20000484
 8009d38:	20000434 	.word	0x20000434
 8009d3c:	e000ed04 	.word	0xe000ed04
 8009d40:	20000450 	.word	0x20000450
 8009d44:	20000470 	.word	0x20000470
 8009d48:	2000049c 	.word	0x2000049c
 8009d4c:	20000488 	.word	0x20000488
 8009d50:	20000394 	.word	0x20000394
 8009d54:	20000390 	.word	0x20000390
 8009d58:	20000398 	.word	0x20000398
 8009d5c:	20000438 	.word	0x20000438
 8009d60:	2000043c 	.word	0x2000043c

08009d64 <vTaskStartScheduler>:
{
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d6c:	f000 fe7c 	bl	800aa68 <pvPortMalloc>
			if( pxStack != NULL )
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f000 80a4 	beq.w	8009ebe <vTaskStartScheduler+0x15a>
 8009d76:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009d78:	20b4      	movs	r0, #180	; 0xb4
 8009d7a:	f000 fe75 	bl	800aa68 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f000 8099 	beq.w	8009eb8 <vTaskStartScheduler+0x154>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d86:	2500      	movs	r5, #0
 8009d88:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <vTaskStartScheduler+0x1bc>)
 8009d8a:	6343      	str	r3, [r0, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d8c:	1d07      	adds	r7, r0, #4
					pxNewTCB->pxStack = pxStack;
 8009d8e:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d90:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d94:	f880 5043 	strb.w	r5, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8009d98:	62c5      	str	r5, [r0, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8009d9a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f7ff f980 	bl	80090a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009da4:	f104 0018 	add.w	r0, r4, #24
 8009da8:	f7ff f97c 	bl	80090a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dac:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 8009dae:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009db2:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db4:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009db6:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009db8:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dba:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dbe:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009dc0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009dc4:	f004 ff19 	bl	800ebfa <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009dc8:	f506 76fe 	add.w	r6, r6, #508	; 0x1fc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009dcc:	4b55      	ldr	r3, [pc, #340]	; (8009f24 <vTaskStartScheduler+0x1c0>)
 8009dce:	4956      	ldr	r1, [pc, #344]	; (8009f28 <vTaskStartScheduler+0x1c4>)
 8009dd0:	4a56      	ldr	r2, [pc, #344]	; (8009f2c <vTaskStartScheduler+0x1c8>)
 8009dd2:	6522      	str	r2, [r4, #80]	; 0x50
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009dd4:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dd8:	462a      	mov	r2, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009dda:	e9c4 1315 	strd	r1, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dde:	4630      	mov	r0, r6
 8009de0:	4953      	ldr	r1, [pc, #332]	; (8009f30 <vTaskStartScheduler+0x1cc>)
		if( pxCurrentTCB == NULL )
 8009de2:	4e54      	ldr	r6, [pc, #336]	; (8009f34 <vTaskStartScheduler+0x1d0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009de4:	f000 fcb0 	bl	800a748 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009de8:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <vTaskStartScheduler+0x1d4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dea:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009dec:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8009dee:	f000 fcd9 	bl	800a7a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009df2:	4b52      	ldr	r3, [pc, #328]	; (8009f3c <vTaskStartScheduler+0x1d8>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	3201      	adds	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009dfa:	6832      	ldr	r2, [r6, #0]
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d052      	beq.n	8009ea6 <vTaskStartScheduler+0x142>
			if( xSchedulerRunning == pdFALSE )
 8009e00:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8009f68 <vTaskStartScheduler+0x204>
 8009e04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e06:	f8d8 3000 	ldr.w	r3, [r8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d044      	beq.n	8009e98 <vTaskStartScheduler+0x134>
 8009e0e:	4d4c      	ldr	r5, [pc, #304]	; (8009f40 <vTaskStartScheduler+0x1dc>)
		uxTaskNumber++;
 8009e10:	f8df e158 	ldr.w	lr, [pc, #344]	; 8009f6c <vTaskStartScheduler+0x208>
		prvAddTaskToReadyList( pxNewTCB );
 8009e14:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009f70 <vTaskStartScheduler+0x20c>
		uxTaskNumber++;
 8009e18:	f8de 3000 	ldr.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8009e1c:	f8dc 9000 	ldr.w	r9, [ip]
 8009e20:	2201      	movs	r2, #1
 8009e22:	4082      	lsls	r2, r0
 8009e24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8009e28:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8009e2a:	ea42 0209 	orr.w	r2, r2, r9
 8009e2e:	4639      	mov	r1, r7
 8009e30:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		uxTaskNumber++;
 8009e34:	f8ce 3000 	str.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8009e38:	f8cc 2000 	str.w	r2, [ip]
 8009e3c:	f7ff f936 	bl	80090ac <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009e40:	f000 fcd2 	bl	800a7e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009e44:	f8d8 3000 	ldr.w	r3, [r8]
 8009e48:	b163      	cbz	r3, 8009e64 <vTaskStartScheduler+0x100>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e4a:	6832      	ldr	r2, [r6, #0]
 8009e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d207      	bcs.n	8009e64 <vTaskStartScheduler+0x100>
			taskYIELD_IF_USING_PREEMPTION();
 8009e54:	4b3b      	ldr	r3, [pc, #236]	; (8009f44 <vTaskStartScheduler+0x1e0>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e74:	6833      	ldr	r3, [r6, #0]
 8009e76:	4934      	ldr	r1, [pc, #208]	; (8009f48 <vTaskStartScheduler+0x1e4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e78:	4834      	ldr	r0, [pc, #208]	; (8009f4c <vTaskStartScheduler+0x1e8>)
		xTickCount = ( TickType_t ) 0U;
 8009e7a:	4a35      	ldr	r2, [pc, #212]	; (8009f50 <vTaskStartScheduler+0x1ec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e7c:	334c      	adds	r3, #76	; 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e7e:	f04f 34ff 	mov.w	r4, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e82:	600b      	str	r3, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8009e84:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e86:	6004      	str	r4, [r0, #0]
		xTickCount = ( TickType_t ) 0U;
 8009e88:	2300      	movs	r3, #0
		xSchedulerRunning = pdTRUE;
 8009e8a:	f8c8 1000 	str.w	r1, [r8]
}
 8009e8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xTickCount = ( TickType_t ) 0U;
 8009e92:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009e94:	f000 bd1a 	b.w	800a8cc <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e98:	6833      	ldr	r3, [r6, #0]
 8009e9a:	4d29      	ldr	r5, [pc, #164]	; (8009f40 <vTaskStartScheduler+0x1dc>)
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8009ea0:	bf98      	it	ls
 8009ea2:	6034      	strls	r4, [r6, #0]
 8009ea4:	e7b4      	b.n	8009e10 <vTaskStartScheduler+0xac>
			pxCurrentTCB = pxNewTCB;
 8009ea6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d010      	beq.n	8009ed0 <vTaskStartScheduler+0x16c>
 8009eae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009eb0:	4d23      	ldr	r5, [pc, #140]	; (8009f40 <vTaskStartScheduler+0x1dc>)
 8009eb2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009f68 <vTaskStartScheduler+0x204>
 8009eb6:	e7ab      	b.n	8009e10 <vTaskStartScheduler+0xac>
					vPortFree( pxStack );
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f000 fe61 	bl	800ab80 <vPortFree>
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	e7fe      	b.n	8009ece <vTaskStartScheduler+0x16a>
 8009ed0:	4d1b      	ldr	r5, [pc, #108]	; (8009f40 <vTaskStartScheduler+0x1dc>)
 8009ed2:	46a8      	mov	r8, r5
 8009ed4:	f105 098c 	add.w	r9, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ed8:	4640      	mov	r0, r8
 8009eda:	f108 0814 	add.w	r8, r8, #20
 8009ede:	f7ff f8d5 	bl	800908c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ee2:	45c1      	cmp	r9, r8
 8009ee4:	d1f8      	bne.n	8009ed8 <vTaskStartScheduler+0x174>
	vListInitialise( &xDelayedTaskList1 );
 8009ee6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8009f74 <vTaskStartScheduler+0x210>
	vListInitialise( &xDelayedTaskList2 );
 8009eea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009f78 <vTaskStartScheduler+0x214>
 8009eee:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009f68 <vTaskStartScheduler+0x204>
	vListInitialise( &xDelayedTaskList1 );
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7ff f8ca 	bl	800908c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f7ff f8c7 	bl	800908c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009efe:	4815      	ldr	r0, [pc, #84]	; (8009f54 <vTaskStartScheduler+0x1f0>)
 8009f00:	f7ff f8c4 	bl	800908c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009f04:	4814      	ldr	r0, [pc, #80]	; (8009f58 <vTaskStartScheduler+0x1f4>)
 8009f06:	f7ff f8c1 	bl	800908c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009f0a:	4814      	ldr	r0, [pc, #80]	; (8009f5c <vTaskStartScheduler+0x1f8>)
 8009f0c:	f7ff f8be 	bl	800908c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f10:	4a13      	ldr	r2, [pc, #76]	; (8009f60 <vTaskStartScheduler+0x1fc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f12:	4b14      	ldr	r3, [pc, #80]	; (8009f64 <vTaskStartScheduler+0x200>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f14:	f8c2 a000 	str.w	sl, [r2]
 8009f18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f1a:	f8c3 9000 	str.w	r9, [r3]
 8009f1e:	e777      	b.n	8009e10 <vTaskStartScheduler+0xac>
 8009f20:	454c4449 	.word	0x454c4449
 8009f24:	08011e30 	.word	0x08011e30
 8009f28:	08011e70 	.word	0x08011e70
 8009f2c:	08011e50 	.word	0x08011e50
 8009f30:	0800a25d 	.word	0x0800a25d
 8009f34:	2000038c 	.word	0x2000038c
 8009f38:	20000464 	.word	0x20000464
 8009f3c:	20000424 	.word	0x20000424
 8009f40:	20000398 	.word	0x20000398
 8009f44:	e000ed04 	.word	0xe000ed04
 8009f48:	20000010 	.word	0x20000010
 8009f4c:	20000468 	.word	0x20000468
 8009f50:	200004b0 	.word	0x200004b0
 8009f54:	20000470 	.word	0x20000470
 8009f58:	2000049c 	.word	0x2000049c
 8009f5c:	20000488 	.word	0x20000488
 8009f60:	20000390 	.word	0x20000390
 8009f64:	20000394 	.word	0x20000394
 8009f68:	20000484 	.word	0x20000484
 8009f6c:	20000434 	.word	0x20000434
 8009f70:	20000438 	.word	0x20000438
 8009f74:	2000043c 	.word	0x2000043c
 8009f78:	20000450 	.word	0x20000450

08009f7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009f7c:	4a02      	ldr	r2, [pc, #8]	; (8009f88 <vTaskSuspendAll+0xc>)
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	6013      	str	r3, [r2, #0]
}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20000430 	.word	0x20000430

08009f8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009f8c:	4b01      	ldr	r3, [pc, #4]	; (8009f94 <xTaskGetTickCount+0x8>)
 8009f8e:	6818      	ldr	r0, [r3, #0]
}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	200004b0 	.word	0x200004b0

08009f98 <xTaskGetTickCountFromISR>:
{
 8009f98:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f9a:	f000 fd0f 	bl	800a9bc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8009f9e:	4b01      	ldr	r3, [pc, #4]	; (8009fa4 <xTaskGetTickCountFromISR+0xc>)
 8009fa0:	6818      	ldr	r0, [r3, #0]
}
 8009fa2:	bd08      	pop	{r3, pc}
 8009fa4:	200004b0 	.word	0x200004b0

08009fa8 <xTaskIncrementTick>:
{
 8009fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fac:	4b49      	ldr	r3, [pc, #292]	; (800a0d4 <xTaskIncrementTick+0x12c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	b9cb      	cbnz	r3, 8009fe6 <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + 1;
 8009fb2:	4b49      	ldr	r3, [pc, #292]	; (800a0d8 <xTaskIncrementTick+0x130>)
 8009fb4:	681e      	ldr	r6, [r3, #0]
 8009fb6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8009fb8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8009fba:	b30e      	cbz	r6, 800a000 <xTaskIncrementTick+0x58>
 8009fbc:	f8df b138 	ldr.w	fp, [pc, #312]	; 800a0f8 <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fc0:	f8db 2000 	ldr.w	r2, [fp]
 8009fc4:	42b2      	cmp	r2, r6
 8009fc6:	d929      	bls.n	800a01c <xTaskIncrementTick+0x74>
 8009fc8:	4f44      	ldr	r7, [pc, #272]	; (800a0dc <xTaskIncrementTick+0x134>)
 8009fca:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a0fc <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8009fce:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009fda:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	bf28      	it	cs
 8009fe2:	2501      	movcs	r5, #1
 8009fe4:	e004      	b.n	8009ff0 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8009fe6:	4a3e      	ldr	r2, [pc, #248]	; (800a0e0 <xTaskIncrementTick+0x138>)
 8009fe8:	6813      	ldr	r3, [r2, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009fee:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8009ff0:	4b3c      	ldr	r3, [pc, #240]	; (800a0e4 <xTaskIncrementTick+0x13c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009ff4:	2b00      	cmp	r3, #0
}
 8009ff6:	bf0c      	ite	eq
 8009ff8:	4628      	moveq	r0, r5
 8009ffa:	2001      	movne	r0, #1
 8009ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800a000:	4c39      	ldr	r4, [pc, #228]	; (800a0e8 <xTaskIncrementTick+0x140>)
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d048      	beq.n	800a09c <xTaskIncrementTick+0xf4>
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	e7fe      	b.n	800a01a <xTaskIncrementTick+0x72>
 800a01c:	4c32      	ldr	r4, [pc, #200]	; (800a0e8 <xTaskIncrementTick+0x140>)
 800a01e:	4f2f      	ldr	r7, [pc, #188]	; (800a0dc <xTaskIncrementTick+0x134>)
 800a020:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800a0fc <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800a024:	2500      	movs	r5, #0
 800a026:	e02d      	b.n	800a084 <xTaskIncrementTick+0xdc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	68d2      	ldr	r2, [r2, #12]
 800a02c:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a030:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a034:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800a038:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a03a:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800a03c:	d32b      	bcc.n	800a096 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a03e:	f7ff f85f 	bl	8009100 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a042:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a046:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a04a:	b109      	cbz	r1, 800a050 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a04c:	f7ff f858 	bl	8009100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a050:	4a26      	ldr	r2, [pc, #152]	; (800a0ec <xTaskIncrementTick+0x144>)
 800a052:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 fc00 	lsl.w	ip, r1, r0
 800a05e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a062:	4651      	mov	r1, sl
 800a064:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800a068:	ea4c 0c03 	orr.w	ip, ip, r3
 800a06c:	f8c2 c000 	str.w	ip, [r2]
 800a070:	f7ff f81c 	bl	80090ac <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a074:	f8d8 0000 	ldr.w	r0, [r8]
 800a078:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800a07c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a07e:	4291      	cmp	r1, r2
 800a080:	bf28      	it	cs
 800a082:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a084:	6822      	ldr	r2, [r4, #0]
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	2a00      	cmp	r2, #0
 800a08a:	d1cd      	bne.n	800a028 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	f8cb 2000 	str.w	r2, [fp]
					break;
 800a094:	e79c      	b.n	8009fd0 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800a096:	f8cb 1000 	str.w	r1, [fp]
						break;
 800a09a:	e799      	b.n	8009fd0 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800a09c:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <xTaskIncrementTick+0x148>)
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	4a14      	ldr	r2, [pc, #80]	; (800a0f4 <xTaskIncrementTick+0x14c>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	6020      	str	r0, [r4, #0]
 800a0a6:	6019      	str	r1, [r3, #0]
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	b933      	cbnz	r3, 800a0c2 <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0b4:	f8df b040 	ldr.w	fp, [pc, #64]	; 800a0f8 <xTaskIncrementTick+0x150>
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	f8cb 2000 	str.w	r2, [fp]
 800a0c0:	e77e      	b.n	8009fc0 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a0c2:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0c4:	f8df b030 	ldr.w	fp, [pc, #48]	; 800a0f8 <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a0c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0ca:	68d2      	ldr	r2, [r2, #12]
 800a0cc:	6852      	ldr	r2, [r2, #4]
 800a0ce:	f8cb 2000 	str.w	r2, [fp]
 800a0d2:	e775      	b.n	8009fc0 <xTaskIncrementTick+0x18>
 800a0d4:	20000430 	.word	0x20000430
 800a0d8:	200004b0 	.word	0x200004b0
 800a0dc:	20000398 	.word	0x20000398
 800a0e0:	2000042c 	.word	0x2000042c
 800a0e4:	200004b4 	.word	0x200004b4
 800a0e8:	20000390 	.word	0x20000390
 800a0ec:	20000438 	.word	0x20000438
 800a0f0:	20000394 	.word	0x20000394
 800a0f4:	2000046c 	.word	0x2000046c
 800a0f8:	20000468 	.word	0x20000468
 800a0fc:	2000038c 	.word	0x2000038c

0800a100 <xTaskResumeAll>:
{
 800a100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800a104:	4c38      	ldr	r4, [pc, #224]	; (800a1e8 <xTaskResumeAll+0xe8>)
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	b943      	cbnz	r3, 800a11c <xTaskResumeAll+0x1c>
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	e7fe      	b.n	800a11a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800a11c:	f000 fb42 	bl	800a7a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a126:	6824      	ldr	r4, [r4, #0]
 800a128:	bb7c      	cbnz	r4, 800a18a <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a12a:	4b30      	ldr	r3, [pc, #192]	; (800a1ec <xTaskResumeAll+0xec>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	b363      	cbz	r3, 800a18a <xTaskResumeAll+0x8a>
 800a130:	4d2f      	ldr	r5, [pc, #188]	; (800a1f0 <xTaskResumeAll+0xf0>)
 800a132:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a208 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 800a136:	4e2f      	ldr	r6, [pc, #188]	; (800a1f4 <xTaskResumeAll+0xf4>)
 800a138:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800a20c <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a13c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800a210 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a140:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800a144:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a146:	b333      	cbz	r3, 800a196 <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a148:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a14c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a14e:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a152:	f104 0018 	add.w	r0, r4, #24
 800a156:	f7fe ffd3 	bl	8009100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a15a:	4640      	mov	r0, r8
 800a15c:	f7fe ffd0 	bl	8009100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a160:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a162:	6832      	ldr	r2, [r6, #0]
 800a164:	fa07 f300 	lsl.w	r3, r7, r0
 800a168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a16c:	4313      	orrs	r3, r2
 800a16e:	4641      	mov	r1, r8
 800a170:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a174:	6033      	str	r3, [r6, #0]
 800a176:	f7fe ff99 	bl	80090ac <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a17a:	f8db 3000 	ldr.w	r3, [fp]
 800a17e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	429a      	cmp	r2, r3
 800a184:	d3dc      	bcc.n	800a140 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800a186:	602f      	str	r7, [r5, #0]
 800a188:	e7da      	b.n	800a140 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800a18a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a18c:	f000 fb2c 	bl	800a7e8 <vPortExitCritical>
}
 800a190:	4620      	mov	r0, r4
 800a192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800a196:	b13c      	cbz	r4, 800a1a8 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a198:	4b17      	ldr	r3, [pc, #92]	; (800a1f8 <xTaskResumeAll+0xf8>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	6812      	ldr	r2, [r2, #0]
 800a19e:	b9da      	cbnz	r2, 800a1d8 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1a0:	4b16      	ldr	r3, [pc, #88]	; (800a1fc <xTaskResumeAll+0xfc>)
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a6:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1a8:	4e15      	ldr	r6, [pc, #84]	; (800a200 <xTaskResumeAll+0x100>)
 800a1aa:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1ac:	b13c      	cbz	r4, 800a1be <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800a1ae:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a1b0:	f7ff fefa 	bl	8009fa8 <xTaskIncrementTick>
 800a1b4:	b100      	cbz	r0, 800a1b8 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800a1b6:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1b8:	3c01      	subs	r4, #1
 800a1ba:	d1f9      	bne.n	800a1b0 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800a1bc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0e2      	beq.n	800a18a <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800a1c4:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <xTaskResumeAll+0x104>)
 800a1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a1d4:	2401      	movs	r4, #1
 800a1d6:	e7d9      	b.n	800a18c <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a1d8:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1da:	4b08      	ldr	r3, [pc, #32]	; (800a1fc <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a1dc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1de:	68d2      	ldr	r2, [r2, #12]
 800a1e0:	6852      	ldr	r2, [r2, #4]
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	e7e0      	b.n	800a1a8 <xTaskResumeAll+0xa8>
 800a1e6:	bf00      	nop
 800a1e8:	20000430 	.word	0x20000430
 800a1ec:	20000424 	.word	0x20000424
 800a1f0:	200004b4 	.word	0x200004b4
 800a1f4:	20000438 	.word	0x20000438
 800a1f8:	20000390 	.word	0x20000390
 800a1fc:	20000468 	.word	0x20000468
 800a200:	2000042c 	.word	0x2000042c
 800a204:	e000ed04 	.word	0xe000ed04
 800a208:	20000470 	.word	0x20000470
 800a20c:	20000398 	.word	0x20000398
 800a210:	2000038c 	.word	0x2000038c

0800a214 <vTaskDelay>:
	{
 800a214:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a216:	b198      	cbz	r0, 800a240 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <vTaskDelay+0x40>)
 800a21a:	6819      	ldr	r1, [r3, #0]
 800a21c:	b141      	cbz	r1, 800a230 <vTaskDelay+0x1c>
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	e7fe      	b.n	800a22e <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	3201      	adds	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a236:	f7ff fc0d 	bl	8009a54 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a23a:	f7ff ff61 	bl	800a100 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a23e:	b938      	cbnz	r0, 800a250 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <vTaskDelay+0x44>)
 800a242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	f3bf 8f6f 	isb	sy
	}
 800a250:	bd08      	pop	{r3, pc}
 800a252:	bf00      	nop
 800a254:	20000430 	.word	0x20000430
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <prvIdleTask>:
{
 800a25c:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 800a260:	4c1e      	ldr	r4, [pc, #120]	; (800a2dc <prvIdleTask+0x80>)
 800a262:	4e1f      	ldr	r6, [pc, #124]	; (800a2e0 <prvIdleTask+0x84>)
 800a264:	4d1f      	ldr	r5, [pc, #124]	; (800a2e4 <prvIdleTask+0x88>)
 800a266:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a2ec <prvIdleTask+0x90>
				taskYIELD();
 800a26a:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a2f0 <prvIdleTask+0x94>
 800a26e:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800a272:	e006      	b.n	800a282 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800a274:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800a276:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 800a278:	3301      	adds	r3, #1
 800a27a:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 800a27c:	f7ff ff40 	bl	800a100 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800a280:	b96f      	cbnz	r7, 800a29e <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f5      	bne.n	800a274 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a288:	f8d8 3000 	ldr.w	r3, [r8]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d9f8      	bls.n	800a282 <prvIdleTask+0x26>
				taskYIELD();
 800a290:	f8ca 9000 	str.w	r9, [sl]
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	e7f1      	b.n	800a282 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 800a29e:	f000 fa81 	bl	800a7a4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2a2:	68f3      	ldr	r3, [r6, #12]
 800a2a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a8:	f10b 0004 	add.w	r0, fp, #4
 800a2ac:	f7fe ff28 	bl	8009100 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800a2b0:	4a0d      	ldr	r2, [pc, #52]	; (800a2e8 <prvIdleTask+0x8c>)
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 800a2be:	f000 fa93 	bl	800a7e8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a2c2:	f10b 004c 	add.w	r0, fp, #76	; 0x4c
 800a2c6:	f005 f851 	bl	800f36c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800a2ca:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800a2ce:	f000 fc57 	bl	800ab80 <vPortFree>
			vPortFree( pxTCB );
 800a2d2:	4658      	mov	r0, fp
 800a2d4:	f000 fc54 	bl	800ab80 <vPortFree>
 800a2d8:	e7d3      	b.n	800a282 <prvIdleTask+0x26>
 800a2da:	bf00      	nop
 800a2dc:	20000430 	.word	0x20000430
 800a2e0:	2000049c 	.word	0x2000049c
 800a2e4:	20000428 	.word	0x20000428
 800a2e8:	20000424 	.word	0x20000424
 800a2ec:	20000398 	.word	0x20000398
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2f4:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <vTaskSwitchContext+0x70>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	bb0b      	cbnz	r3, 800a33e <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 800a2fa:	491b      	ldr	r1, [pc, #108]	; (800a368 <vTaskSwitchContext+0x74>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	; (800a36c <vTaskSwitchContext+0x78>)
{
 800a2fe:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800a300:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a302:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800a304:	fab3 f383 	clz	r3, r3
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	f1c3 031f 	rsb	r3, r3, #31
 800a30e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	4816      	ldr	r0, [pc, #88]	; (800a370 <vTaskSwitchContext+0x7c>)
 800a316:	5881      	ldr	r1, [r0, r2]
 800a318:	1884      	adds	r4, r0, r2
 800a31a:	b1a1      	cbz	r1, 800a346 <vTaskSwitchContext+0x52>
 800a31c:	6861      	ldr	r1, [r4, #4]
 800a31e:	3208      	adds	r2, #8
 800a320:	6849      	ldr	r1, [r1, #4]
 800a322:	6061      	str	r1, [r4, #4]
 800a324:	4402      	add	r2, r0
 800a326:	4291      	cmp	r1, r2
 800a328:	d016      	beq.n	800a358 <vTaskSwitchContext+0x64>
 800a32a:	4b12      	ldr	r3, [pc, #72]	; (800a374 <vTaskSwitchContext+0x80>)
 800a32c:	68ca      	ldr	r2, [r1, #12]
 800a32e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a11      	ldr	r2, [pc, #68]	; (800a378 <vTaskSwitchContext+0x84>)
}
 800a334:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a338:	334c      	adds	r3, #76	; 0x4c
 800a33a:	6013      	str	r3, [r2, #0]
}
 800a33c:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800a33e:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <vTaskSwitchContext+0x74>)
 800a340:	2201      	movs	r2, #1
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	4770      	bx	lr
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	e7fe      	b.n	800a356 <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a358:	2214      	movs	r2, #20
 800a35a:	fb02 0303 	mla	r3, r2, r3, r0
 800a35e:	6849      	ldr	r1, [r1, #4]
 800a360:	6059      	str	r1, [r3, #4]
 800a362:	e7e2      	b.n	800a32a <vTaskSwitchContext+0x36>
 800a364:	20000430 	.word	0x20000430
 800a368:	200004b4 	.word	0x200004b4
 800a36c:	20000438 	.word	0x20000438
 800a370:	20000398 	.word	0x20000398
 800a374:	2000038c 	.word	0x2000038c
 800a378:	20000010 	.word	0x20000010

0800a37c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a37c:	b940      	cbnz	r0, 800a390 <vTaskPlaceOnEventList+0x14>
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	e7fe      	b.n	800a38e <vTaskPlaceOnEventList+0x12>
{
 800a390:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a392:	4d1b      	ldr	r5, [pc, #108]	; (800a400 <vTaskPlaceOnEventList+0x84>)
 800a394:	460c      	mov	r4, r1
 800a396:	6829      	ldr	r1, [r5, #0]
 800a398:	3118      	adds	r1, #24
 800a39a:	f7fe fe97 	bl	80090cc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a39e:	4b19      	ldr	r3, [pc, #100]	; (800a404 <vTaskPlaceOnEventList+0x88>)
 800a3a0:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3a2:	6828      	ldr	r0, [r5, #0]
 800a3a4:	3004      	adds	r0, #4
 800a3a6:	f7fe feab 	bl	8009100 <uxListRemove>
 800a3aa:	b940      	cbnz	r0, 800a3be <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	4916      	ldr	r1, [pc, #88]	; (800a408 <vTaskPlaceOnEventList+0x8c>)
 800a3b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a3b2:	680b      	ldr	r3, [r1, #0]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4082      	lsls	r2, r0
 800a3b8:	ea23 0302 	bic.w	r3, r3, r2
 800a3bc:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3be:	1c63      	adds	r3, r4, #1
 800a3c0:	d00f      	beq.n	800a3e2 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	19a4      	adds	r4, r4, r6
 800a3c6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3c8:	d212      	bcs.n	800a3f0 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <vTaskPlaceOnEventList+0x90>)
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	6829      	ldr	r1, [r5, #0]
 800a3d0:	3104      	adds	r1, #4
 800a3d2:	f7fe fe7b 	bl	80090cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3d6:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <vTaskPlaceOnEventList+0x94>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a3dc:	bf38      	it	cc
 800a3de:	601c      	strcc	r4, [r3, #0]
}
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e2:	6829      	ldr	r1, [r5, #0]
 800a3e4:	480b      	ldr	r0, [pc, #44]	; (800a414 <vTaskPlaceOnEventList+0x98>)
 800a3e6:	3104      	adds	r1, #4
}
 800a3e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ec:	f7fe be5e 	b.w	80090ac <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <vTaskPlaceOnEventList+0x9c>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	6829      	ldr	r1, [r5, #0]
}
 800a3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fa:	3104      	adds	r1, #4
 800a3fc:	f7fe be66 	b.w	80090cc <vListInsert>
 800a400:	2000038c 	.word	0x2000038c
 800a404:	200004b0 	.word	0x200004b0
 800a408:	20000438 	.word	0x20000438
 800a40c:	20000390 	.word	0x20000390
 800a410:	20000468 	.word	0x20000468
 800a414:	20000488 	.word	0x20000488
 800a418:	20000394 	.word	0x20000394

0800a41c <xTaskRemoveFromEventList>:
{
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a41e:	68c3      	ldr	r3, [r0, #12]
 800a420:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a422:	b32c      	cbz	r4, 800a470 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a424:	f104 0518 	add.w	r5, r4, #24
 800a428:	4628      	mov	r0, r5
 800a42a:	f7fe fe69 	bl	8009100 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42e:	4b17      	ldr	r3, [pc, #92]	; (800a48c <xTaskRemoveFromEventList+0x70>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	bb33      	cbnz	r3, 800a482 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a434:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a436:	4d16      	ldr	r5, [pc, #88]	; (800a490 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a438:	4630      	mov	r0, r6
 800a43a:	f7fe fe61 	bl	8009100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a43e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a440:	682f      	ldr	r7, [r5, #0]
 800a442:	4814      	ldr	r0, [pc, #80]	; (800a494 <xTaskRemoveFromEventList+0x78>)
 800a444:	2301      	movs	r3, #1
 800a446:	4093      	lsls	r3, r2
 800a448:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a44c:	433b      	orrs	r3, r7
 800a44e:	4631      	mov	r1, r6
 800a450:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	f7fe fe29 	bl	80090ac <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a45a:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <xTaskRemoveFromEventList+0x7c>)
 800a45c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800a464:	bf83      	ittte	hi
 800a466:	4b0d      	ldrhi	r3, [pc, #52]	; (800a49c <xTaskRemoveFromEventList+0x80>)
 800a468:	2001      	movhi	r0, #1
 800a46a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800a46c:	2000      	movls	r0, #0
}
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	e7fe      	b.n	800a480 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a482:	4629      	mov	r1, r5
 800a484:	4806      	ldr	r0, [pc, #24]	; (800a4a0 <xTaskRemoveFromEventList+0x84>)
 800a486:	f7fe fe11 	bl	80090ac <vListInsertEnd>
 800a48a:	e7e6      	b.n	800a45a <xTaskRemoveFromEventList+0x3e>
 800a48c:	20000430 	.word	0x20000430
 800a490:	20000438 	.word	0x20000438
 800a494:	20000398 	.word	0x20000398
 800a498:	2000038c 	.word	0x2000038c
 800a49c:	200004b4 	.word	0x200004b4
 800a4a0:	20000470 	.word	0x20000470

0800a4a4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800a4a4:	b130      	cbz	r0, 800a4b4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4a6:	4a08      	ldr	r2, [pc, #32]	; (800a4c8 <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4a8:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4aa:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	e9c0 2300 	strd	r2, r3, [r0]
}
 800a4b2:	4770      	bx	lr
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	e7fe      	b.n	800a4c4 <vTaskSetTimeOutState+0x20>
 800a4c6:	bf00      	nop
 800a4c8:	2000046c 	.word	0x2000046c
 800a4cc:	200004b0 	.word	0x200004b0

0800a4d0 <xTaskCheckForTimeOut>:
{
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a4d2:	b360      	cbz	r0, 800a52e <xTaskCheckForTimeOut+0x5e>
	configASSERT( pxTicksToWait );
 800a4d4:	b311      	cbz	r1, 800a51c <xTaskCheckForTimeOut+0x4c>
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a4da:	f000 f963 	bl	800a7a4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800a4de:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800a4e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a54c <xTaskCheckForTimeOut+0x7c>
			if( *pxTicksToWait == portMAX_DELAY )
 800a4e4:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800a4e6:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800a4ea:	d029      	beq.n	800a540 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ec:	4e16      	ldr	r6, [pc, #88]	; (800a548 <xTaskCheckForTimeOut+0x78>)
 800a4ee:	e9d4 0200 	ldrd	r0, r2, [r4]
 800a4f2:	6837      	ldr	r7, [r6, #0]
 800a4f4:	42b8      	cmp	r0, r7
 800a4f6:	d001      	beq.n	800a4fc <xTaskCheckForTimeOut+0x2c>
 800a4f8:	4291      	cmp	r1, r2
 800a4fa:	d223      	bcs.n	800a544 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4fc:	1a8f      	subs	r7, r1, r2
 800a4fe:	42bb      	cmp	r3, r7
 800a500:	d920      	bls.n	800a544 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800a502:	1a5b      	subs	r3, r3, r1
 800a504:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a506:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a508:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800a50c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a50e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800a512:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800a514:	f000 f968 	bl	800a7e8 <vPortExitCritical>
}
 800a518:	4628      	mov	r0, r5
 800a51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	e7fe      	b.n	800a52c <xTaskCheckForTimeOut+0x5c>
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	e7fe      	b.n	800a53e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a540:	2500      	movs	r5, #0
 800a542:	e7e7      	b.n	800a514 <xTaskCheckForTimeOut+0x44>
			xReturn = pdTRUE;
 800a544:	2501      	movs	r5, #1
 800a546:	e7e5      	b.n	800a514 <xTaskCheckForTimeOut+0x44>
 800a548:	2000046c 	.word	0x2000046c
 800a54c:	200004b0 	.word	0x200004b0

0800a550 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a550:	4b01      	ldr	r3, [pc, #4]	; (800a558 <vTaskMissedYield+0x8>)
 800a552:	2201      	movs	r2, #1
 800a554:	601a      	str	r2, [r3, #0]
}
 800a556:	4770      	bx	lr
 800a558:	200004b4 	.word	0x200004b4

0800a55c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a55c:	4b01      	ldr	r3, [pc, #4]	; (800a564 <xTaskGetCurrentTaskHandle+0x8>)
 800a55e:	6818      	ldr	r0, [r3, #0]
	}
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	2000038c 	.word	0x2000038c

0800a568 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a568:	4b05      	ldr	r3, [pc, #20]	; (800a580 <xTaskGetSchedulerState+0x18>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	b133      	cbz	r3, 800a57c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56e:	4b05      	ldr	r3, [pc, #20]	; (800a584 <xTaskGetSchedulerState+0x1c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800a574:	bf0c      	ite	eq
 800a576:	2002      	moveq	r0, #2
 800a578:	2000      	movne	r0, #0
 800a57a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a57c:	2001      	movs	r0, #1
	}
 800a57e:	4770      	bx	lr
 800a580:	20000484 	.word	0x20000484
 800a584:	20000430 	.word	0x20000430

0800a588 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a588:	b1d0      	cbz	r0, 800a5c0 <vTaskPriorityInherit+0x38>
	{
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a58c:	4c20      	ldr	r4, [pc, #128]	; (800a610 <vTaskPriorityInherit+0x88>)
 800a58e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a594:	4293      	cmp	r3, r2
 800a596:	d212      	bcs.n	800a5be <vTaskPriorityInherit+0x36>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a598:	6982      	ldr	r2, [r0, #24]
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	db04      	blt.n	800a5a8 <vTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5a2:	f1c2 0207 	rsb	r2, r2, #7
 800a5a6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5a8:	4d1a      	ldr	r5, [pc, #104]	; (800a614 <vTaskPriorityInherit+0x8c>)
 800a5aa:	6942      	ldr	r2, [r0, #20]
 800a5ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d004      	beq.n	800a5c2 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5c2:	1d07      	adds	r7, r0, #4
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7fe fd9a 	bl	8009100 <uxListRemove>
 800a5cc:	b970      	cbnz	r0, 800a5ec <vTaskPriorityInherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a5d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a5d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a5d8:	b942      	cbnz	r2, 800a5ec <vTaskPriorityInherit+0x64>
 800a5da:	4a0f      	ldr	r2, [pc, #60]	; (800a618 <vTaskPriorityInherit+0x90>)
 800a5dc:	2001      	movs	r0, #1
 800a5de:	6811      	ldr	r1, [r2, #0]
 800a5e0:	fa00 f303 	lsl.w	r3, r0, r3
 800a5e4:	ea21 0303 	bic.w	r3, r1, r3
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e000      	b.n	800a5ee <vTaskPriorityInherit+0x66>
 800a5ec:	4a0a      	ldr	r2, [pc, #40]	; (800a618 <vTaskPriorityInherit+0x90>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5ee:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 800a5f0:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a5f4:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4083      	lsls	r3, r0
 800a5fa:	4323      	orrs	r3, r4
 800a5fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a600:	4639      	mov	r1, r7
 800a602:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800a606:	6013      	str	r3, [r2, #0]
	}
 800a608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 800a60c:	f7fe bd4e 	b.w	80090ac <vListInsertEnd>
 800a610:	2000038c 	.word	0x2000038c
 800a614:	20000398 	.word	0x20000398
 800a618:	20000438 	.word	0x20000438

0800a61c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a61c:	b168      	cbz	r0, 800a63a <xTaskPriorityDisinherit+0x1e>
	{
 800a61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800a620:	4b27      	ldr	r3, [pc, #156]	; (800a6c0 <xTaskPriorityDisinherit+0xa4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4283      	cmp	r3, r0
 800a626:	d00a      	beq.n	800a63e <xTaskPriorityDisinherit+0x22>
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	e7fe      	b.n	800a638 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800a63a:	2000      	movs	r0, #0
	}
 800a63c:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800a63e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a640:	b943      	cbnz	r3, 800a654 <xTaskPriorityDisinherit+0x38>
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	e7fe      	b.n	800a652 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a654:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a656:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800a658:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a65a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800a65c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a65e:	d000      	beq.n	800a662 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a660:	b10b      	cbz	r3, 800a666 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a662:	2000      	movs	r0, #0
	}
 800a664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a666:	1d06      	adds	r6, r0, #4
 800a668:	4604      	mov	r4, r0
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7fe fd48 	bl	8009100 <uxListRemove>
 800a670:	b1a8      	cbz	r0, 800a69e <xTaskPriorityDisinherit+0x82>
 800a672:	4814      	ldr	r0, [pc, #80]	; (800a6c4 <xTaskPriorityDisinherit+0xa8>)
 800a674:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a676:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800a678:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a67a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a67c:	2501      	movs	r5, #1
 800a67e:	f04f 0c14 	mov.w	ip, #20
 800a682:	fb0c 0002 	mla	r0, ip, r2, r0
 800a686:	4631      	mov	r1, r6
 800a688:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a68c:	f1c2 0207 	rsb	r2, r2, #7
 800a690:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a692:	433e      	orrs	r6, r7
 800a694:	601e      	str	r6, [r3, #0]
 800a696:	f7fe fd09 	bl	80090ac <vListInsertEnd>
					xReturn = pdTRUE;
 800a69a:	4628      	mov	r0, r5
	}
 800a69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a69e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a6a0:	4808      	ldr	r0, [pc, #32]	; (800a6c4 <xTaskPriorityDisinherit+0xa8>)
 800a6a2:	2314      	movs	r3, #20
 800a6a4:	fb03 f301 	mul.w	r3, r3, r1
 800a6a8:	58c3      	ldr	r3, [r0, r3]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <xTaskPriorityDisinherit+0x94>
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <xTaskPriorityDisinherit+0xac>)
 800a6ae:	e7e2      	b.n	800a676 <xTaskPriorityDisinherit+0x5a>
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <xTaskPriorityDisinherit+0xac>)
 800a6b2:	2501      	movs	r5, #1
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	408d      	lsls	r5, r1
 800a6b8:	ea22 0205 	bic.w	r2, r2, r5
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e7da      	b.n	800a676 <xTaskPriorityDisinherit+0x5a>
 800a6c0:	2000038c 	.word	0x2000038c
 800a6c4:	20000398 	.word	0x20000398
 800a6c8:	20000438 	.word	0x20000438

0800a6cc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a6cc:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <pvTaskIncrementMutexHeldCount+0x14>)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	b11a      	cbz	r2, 800a6da <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6d2:	6819      	ldr	r1, [r3, #0]
 800a6d4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800a6da:	6818      	ldr	r0, [r3, #0]
	}
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	2000038c 	.word	0x2000038c

0800a6e4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <prvTaskExitError+0x2c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	d008      	beq.n	800a6fe <prvTaskExitError+0x1a>
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	e7fe      	b.n	800a6fc <prvTaskExitError+0x18>
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	e7fe      	b.n	800a70e <prvTaskExitError+0x2a>
 800a710:	20000000 	.word	0x20000000

0800a714 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a714:	4806      	ldr	r0, [pc, #24]	; (800a730 <prvPortStartFirstTask+0x1c>)
 800a716:	6800      	ldr	r0, [r0, #0]
 800a718:	6800      	ldr	r0, [r0, #0]
 800a71a:	f380 8808 	msr	MSP, r0
 800a71e:	b662      	cpsie	i
 800a720:	b661      	cpsie	f
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	df00      	svc	0
 800a72c:	bf00      	nop
 800a72e:	0000      	.short	0x0000
 800a730:	e000ed08 	.word	0xe000ed08

0800a734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a744 <vPortEnableVFP+0x10>
 800a738:	6801      	ldr	r1, [r0, #0]
 800a73a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a73e:	6001      	str	r1, [r0, #0]
 800a740:	4770      	bx	lr
 800a742:	0000      	.short	0x0000
 800a744:	e000ed88 	.word	0xe000ed88

0800a748 <pxPortInitialiseStack>:
{
 800a748:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a74a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a74e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a752:	4c07      	ldr	r4, [pc, #28]	; (800a770 <pxPortInitialiseStack+0x28>)
 800a754:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800a758:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a75c:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a760:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800a764:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a768:	bc30      	pop	{r4, r5}
 800a76a:	3844      	subs	r0, #68	; 0x44
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	0800a6e5 	.word	0x0800a6e5
	...

0800a780 <SVC_Handler>:
	__asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	2000038c 	.word	0x2000038c

0800a7a4 <vPortEnterCritical>:
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a7b4:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <vPortEnterCritical+0x3c>)
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a7ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a7bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a7be:	d000      	beq.n	800a7c2 <vPortEnterCritical+0x1e>
}
 800a7c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7c2:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <vPortEnterCritical+0x40>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7ca:	d0f9      	beq.n	800a7c0 <vPortEnterCritical+0x1c>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	e7fe      	b.n	800a7dc <vPortEnterCritical+0x38>
 800a7de:	bf00      	nop
 800a7e0:	20000000 	.word	0x20000000
 800a7e4:	e000ed04 	.word	0xe000ed04

0800a7e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a7e8:	4a08      	ldr	r2, [pc, #32]	; (800a80c <vPortExitCritical+0x24>)
 800a7ea:	6813      	ldr	r3, [r2, #0]
 800a7ec:	b943      	cbnz	r3, 800a800 <vPortExitCritical+0x18>
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	e7fe      	b.n	800a7fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a800:	3b01      	subs	r3, #1
 800a802:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a804:	b90b      	cbnz	r3, 800a80a <vPortExitCritical+0x22>
	__asm volatile
 800a806:	f383 8811 	msr	BASEPRI, r3
}
 800a80a:	4770      	bx	lr
 800a80c:	20000000 	.word	0x20000000

0800a810 <PendSV_Handler>:
	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	; (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7ff fd58 	bl	800a2f4 <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc08      	pop	{r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	2000038c 	.word	0x2000038c

0800a874 <SysTick_Handler>:
{
 800a874:	b508      	push	{r3, lr}
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a886:	f7ff fb8f 	bl	8009fa8 <xTaskIncrementTick>
 800a88a:	b118      	cbz	r0, 800a894 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a88c:	4b03      	ldr	r3, [pc, #12]	; (800a89c <SysTick_Handler+0x28>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a894:	2300      	movs	r3, #0
 800a896:	f383 8811 	msr	BASEPRI, r3
}
 800a89a:	bd08      	pop	{r3, pc}
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <vPortSetupTimerInterrupt+0x1c>)
 800a8a2:	4907      	ldr	r1, [pc, #28]	; (800a8c0 <vPortSetupTimerInterrupt+0x20>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4807      	ldr	r0, [pc, #28]	; (800a8c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8a8:	4a07      	ldr	r2, [pc, #28]	; (800a8c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8aa:	fba1 1303 	umull	r1, r3, r1, r3
 800a8ae:	099b      	lsrs	r3, r3, #6
 800a8b0:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8b2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8b4:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8b6:	6011      	str	r1, [r2, #0]
}
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	20000004 	.word	0x20000004
 800a8c0:	10624dd3 	.word	0x10624dd3
 800a8c4:	e000e014 	.word	0xe000e014
 800a8c8:	e000e010 	.word	0xe000e010

0800a8cc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8cc:	4b32      	ldr	r3, [pc, #200]	; (800a998 <xPortStartScheduler+0xcc>)
 800a8ce:	4a33      	ldr	r2, [pc, #204]	; (800a99c <xPortStartScheduler+0xd0>)
 800a8d0:	6819      	ldr	r1, [r3, #0]
 800a8d2:	4291      	cmp	r1, r2
 800a8d4:	d04e      	beq.n	800a974 <xPortStartScheduler+0xa8>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	4b31      	ldr	r3, [pc, #196]	; (800a9a0 <xPortStartScheduler+0xd4>)
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d053      	beq.n	800a986 <xPortStartScheduler+0xba>
{
 800a8de:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8e0:	4b30      	ldr	r3, [pc, #192]	; (800a9a4 <xPortStartScheduler+0xd8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8e2:	4c31      	ldr	r4, [pc, #196]	; (800a9a8 <xPortStartScheduler+0xdc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8e4:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8e6:	4931      	ldr	r1, [pc, #196]	; (800a9ac <xPortStartScheduler+0xe0>)
{
 800a8e8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ea:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8ec:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8f0:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a902:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a906:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a908:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a90a:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a90c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a90e:	d50f      	bpl.n	800a930 <xPortStartScheduler+0x64>
 800a910:	2206      	movs	r2, #6
 800a912:	e000      	b.n	800a916 <xPortStartScheduler+0x4a>
 800a914:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a916:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a922:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a926:	061b      	lsls	r3, r3, #24
 800a928:	f102 30ff 	add.w	r0, r2, #4294967295
 800a92c:	d4f2      	bmi.n	800a914 <xPortStartScheduler+0x48>
 800a92e:	600a      	str	r2, [r1, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a930:	680b      	ldr	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a932:	9801      	ldr	r0, [sp, #4]
 800a934:	4c1b      	ldr	r4, [pc, #108]	; (800a9a4 <xPortStartScheduler+0xd8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a936:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <xPortStartScheduler+0xe4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a938:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a93a:	b2c0      	uxtb	r0, r0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a93c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a940:	600b      	str	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a942:	7020      	strb	r0, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a94a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a94c:	6813      	ldr	r3, [r2, #0]
 800a94e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a952:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800a954:	f7ff ffa4 	bl	800a8a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a958:	4b16      	ldr	r3, [pc, #88]	; (800a9b4 <xPortStartScheduler+0xe8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800a95e:	f7ff fee9 	bl	800a734 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a962:	4a15      	ldr	r2, [pc, #84]	; (800a9b8 <xPortStartScheduler+0xec>)
 800a964:	6813      	ldr	r3, [r2, #0]
 800a966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a96a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a96c:	f7ff fed2 	bl	800a714 <prvPortStartFirstTask>
	prvTaskExitError();
 800a970:	f7ff feb8 	bl	800a6e4 <prvTaskExitError>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	e7fe      	b.n	800a984 <xPortStartScheduler+0xb8>
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	e7fe      	b.n	800a996 <xPortStartScheduler+0xca>
 800a998:	e000ed00 	.word	0xe000ed00
 800a99c:	410fc271 	.word	0x410fc271
 800a9a0:	410fc270 	.word	0x410fc270
 800a9a4:	e000e400 	.word	0xe000e400
 800a9a8:	200004b8 	.word	0x200004b8
 800a9ac:	200004bc 	.word	0x200004bc
 800a9b0:	e000ed20 	.word	0xe000ed20
 800a9b4:	20000000 	.word	0x20000000
 800a9b8:	e000ef34 	.word	0xe000ef34

0800a9bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800a9bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9c0:	2b0f      	cmp	r3, #15
 800a9c2:	d90e      	bls.n	800a9e2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9c4:	4910      	ldr	r1, [pc, #64]	; (800aa08 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c6:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9c8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9ca:	7812      	ldrb	r2, [r2, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d908      	bls.n	800a9e2 <vPortValidateInterruptPriority+0x26>
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	e7fe      	b.n	800a9e0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <vPortValidateInterruptPriority+0x54>)
 800a9e4:	4a0b      	ldr	r2, [pc, #44]	; (800aa14 <vPortValidateInterruptPriority+0x58>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6812      	ldr	r2, [r2, #0]
 800a9ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d908      	bls.n	800aa04 <vPortValidateInterruptPriority+0x48>
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	e7fe      	b.n	800aa02 <vPortValidateInterruptPriority+0x46>
	}
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	e000e3f0 	.word	0xe000e3f0
 800aa0c:	200004b8 	.word	0x200004b8
 800aa10:	e000ed0c 	.word	0xe000ed0c
 800aa14:	200004bc 	.word	0x200004bc

0800aa18 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa18:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa1a:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <prvInsertBlockIntoFreeList+0x48>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4282      	cmp	r2, r0
 800aa20:	d201      	bcs.n	800aa26 <prvInsertBlockIntoFreeList+0xe>
 800aa22:	4613      	mov	r3, r2
 800aa24:	e7fa      	b.n	800aa1c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa26:	685c      	ldr	r4, [r3, #4]
 800aa28:	1919      	adds	r1, r3, r4
 800aa2a:	4288      	cmp	r0, r1
 800aa2c:	d103      	bne.n	800aa36 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa2e:	6841      	ldr	r1, [r0, #4]
 800aa30:	4421      	add	r1, r4
 800aa32:	6059      	str	r1, [r3, #4]
 800aa34:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa36:	6844      	ldr	r4, [r0, #4]
 800aa38:	1901      	adds	r1, r0, r4
 800aa3a:	428a      	cmp	r2, r1
 800aa3c:	d109      	bne.n	800aa52 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa3e:	4909      	ldr	r1, [pc, #36]	; (800aa64 <prvInsertBlockIntoFreeList+0x4c>)
 800aa40:	6809      	ldr	r1, [r1, #0]
 800aa42:	428a      	cmp	r2, r1
 800aa44:	d005      	beq.n	800aa52 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa46:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa4a:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa4c:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa4e:	6041      	str	r1, [r0, #4]
 800aa50:	e000      	b.n	800aa54 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa52:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa54:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa56:	bf18      	it	ne
 800aa58:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	2000479c 	.word	0x2000479c
 800aa64:	200004c0 	.word	0x200004c0

0800aa68 <pvPortMalloc>:
{
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 800aa6a:	4d3e      	ldr	r5, [pc, #248]	; (800ab64 <pvPortMalloc+0xfc>)
{
 800aa6c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800aa6e:	f7ff fa85 	bl	8009f7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800aa72:	682a      	ldr	r2, [r5, #0]
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d056      	beq.n	800ab26 <pvPortMalloc+0xbe>
 800aa78:	4b3b      	ldr	r3, [pc, #236]	; (800ab68 <pvPortMalloc+0x100>)
 800aa7a:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa7c:	422c      	tst	r4, r5
 800aa7e:	d14d      	bne.n	800ab1c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800aa80:	2c00      	cmp	r4, #0
 800aa82:	d04b      	beq.n	800ab1c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800aa84:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa88:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa8a:	bf1c      	itt	ne
 800aa8c:	f023 0307 	bicne.w	r3, r3, #7
 800aa90:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d042      	beq.n	800ab1c <pvPortMalloc+0xb4>
 800aa96:	4f35      	ldr	r7, [pc, #212]	; (800ab6c <pvPortMalloc+0x104>)
 800aa98:	683e      	ldr	r6, [r7, #0]
 800aa9a:	429e      	cmp	r6, r3
 800aa9c:	d33e      	bcc.n	800ab1c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800aa9e:	4834      	ldr	r0, [pc, #208]	; (800ab70 <pvPortMalloc+0x108>)
 800aaa0:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa2:	e006      	b.n	800aab2 <pvPortMalloc+0x4a>
 800aaa4:	f8d4 c000 	ldr.w	ip, [r4]
 800aaa8:	f1bc 0f00 	cmp.w	ip, #0
 800aaac:	d004      	beq.n	800aab8 <pvPortMalloc+0x50>
 800aaae:	4620      	mov	r0, r4
 800aab0:	4664      	mov	r4, ip
 800aab2:	6861      	ldr	r1, [r4, #4]
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d3f5      	bcc.n	800aaa4 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800aab8:	4294      	cmp	r4, r2
 800aaba:	d02f      	beq.n	800ab1c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aac0:	1aca      	subs	r2, r1, r3
 800aac2:	2a10      	cmp	r2, #16
 800aac4:	d910      	bls.n	800aae8 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aac6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aac8:	0741      	lsls	r1, r0, #29
 800aaca:	d008      	beq.n	800aade <pvPortMalloc+0x76>
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	e7fe      	b.n	800aadc <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aade:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aae0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aae2:	f7ff ff99 	bl	800aa18 <prvInsertBlockIntoFreeList>
 800aae6:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aae8:	4a22      	ldr	r2, [pc, #136]	; (800ab74 <pvPortMalloc+0x10c>)
 800aaea:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaec:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800aaee:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaf0:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaf2:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800aaf4:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaf8:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aafc:	bf38      	it	cc
 800aafe:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab00:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800ab02:	f7ff fafd 	bl	800a100 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab06:	0763      	lsls	r3, r4, #29
 800ab08:	d00b      	beq.n	800ab22 <pvPortMalloc+0xba>
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	e7fe      	b.n	800ab1a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800ab1c:	f7ff faf0 	bl	800a100 <xTaskResumeAll>
 800ab20:	2400      	movs	r4, #0
}
 800ab22:	4620      	mov	r0, r4
 800ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800ab28:	4a14      	ldr	r2, [pc, #80]	; (800ab7c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab2a:	4911      	ldr	r1, [pc, #68]	; (800ab70 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab2c:	4f11      	ldr	r7, [pc, #68]	; (800ab74 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab2e:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab30:	bf18      	it	ne
 800ab32:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab34:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab38:	bf18      	it	ne
 800ab3a:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab3e:	4e0b      	ldr	r6, [pc, #44]	; (800ab6c <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 800ab40:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab42:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab44:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab46:	4d08      	ldr	r5, [pc, #32]	; (800ab68 <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab48:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800ab54:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab58:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab5a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab5c:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab60:	460d      	mov	r5, r1
 800ab62:	e78b      	b.n	800aa7c <pvPortMalloc+0x14>
 800ab64:	200004c0 	.word	0x200004c0
 800ab68:	20004790 	.word	0x20004790
 800ab6c:	20004794 	.word	0x20004794
 800ab70:	2000479c 	.word	0x2000479c
 800ab74:	20004798 	.word	0x20004798
 800ab78:	200004c4 	.word	0x200004c4
 800ab7c:	20004788 	.word	0x20004788

0800ab80 <vPortFree>:
	if( pv != NULL )
 800ab80:	b1d0      	cbz	r0, 800abb8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab82:	4a19      	ldr	r2, [pc, #100]	; (800abe8 <vPortFree+0x68>)
 800ab84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ab88:	6812      	ldr	r2, [r2, #0]
 800ab8a:	4213      	tst	r3, r2
 800ab8c:	d108      	bne.n	800aba0 <vPortFree+0x20>
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	e7fe      	b.n	800ab9e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aba0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800aba4:	b149      	cbz	r1, 800abba <vPortFree+0x3a>
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	e7fe      	b.n	800abb6 <vPortFree+0x36>
 800abb8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abba:	ea23 0302 	bic.w	r3, r3, r2
{
 800abbe:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abc0:	f840 3c04 	str.w	r3, [r0, #-4]
 800abc4:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800abc6:	f7ff f9d9 	bl	8009f7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abca:	4a08      	ldr	r2, [pc, #32]	; (800abec <vPortFree+0x6c>)
 800abcc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800abd0:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abd2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abd6:	440b      	add	r3, r1
 800abd8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abda:	f7ff ff1d 	bl	800aa18 <prvInsertBlockIntoFreeList>
}
 800abde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800abe2:	f7ff ba8d 	b.w	800a100 <xTaskResumeAll>
 800abe6:	bf00      	nop
 800abe8:	20004790 	.word	0x20004790
 800abec:	20004794 	.word	0x20004794

0800abf0 <MX_ADC1_Init>:
uint32_t ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800abf0:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc1.Init.Resolution = ADCResolution;
 800abf2:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <MX_ADC1_Init+0x68>)
  hadc1.Instance = ADC1;
 800abf4:	4c19      	ldr	r4, [pc, #100]	; (800ac5c <MX_ADC1_Init+0x6c>)
  hadc1.Init.Resolution = ADCResolution;
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60a3      	str	r3, [r4, #8]
  hadc1.Instance = ADC1;
 800abfa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800abfe:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800ac02:	b086      	sub	sp, #24
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800ac04:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ac06:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ac0a:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800ac0e:	2304      	movs	r3, #4
  hadc1.Instance = ADC1;
 800ac10:	6020      	str	r0, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac12:	6065      	str	r5, [r4, #4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc1);
 800ac14:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ac16:	2500      	movs	r5, #0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ac18:	6321      	str	r1, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ac1a:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ac1c:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ac20:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ac22:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac24:	60e5      	str	r5, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ac26:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800ac28:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800ac2a:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ac2c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc1);
 800ac2e:	f7fa fb1f 	bl	8005270 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800ac32:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <MX_ADC1_Init+0x70>)
 800ac34:	4a0b      	ldr	r2, [pc, #44]	; (800ac64 <MX_ADC1_Init+0x74>)
 800ac36:	7819      	ldrb	r1, [r3, #0]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800ac38:	4b0b      	ldr	r3, [pc, #44]	; (800ac68 <MX_ADC1_Init+0x78>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800ac3a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800ac3e:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800ac40:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800ac42:	4620      	mov	r0, r4
 800ac44:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ac46:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800ac4a:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800ac4c:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800ac4e:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800ac50:	f7fb f810 	bl	8005c74 <HAL_ADC_ConfigChannel>

}
 800ac54:	b006      	add	sp, #24
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	200047b0 	.word	0x200047b0
 800ac5c:	2000cc30 	.word	0x2000cc30
 800ac60:	200047ac 	.word	0x200047ac
 800ac64:	08011c94 	.word	0x08011c94
 800ac68:	200047b4 	.word	0x200047b4

0800ac6c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800ac6c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc2.Init.Resolution = ADCResolution;
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <MX_ADC2_Init+0x68>)
  hadc2.Instance = ADC2;
 800ac70:	4c19      	ldr	r4, [pc, #100]	; (800acd8 <MX_ADC2_Init+0x6c>)
  hadc2.Init.Resolution = ADCResolution;
 800ac72:	681b      	ldr	r3, [r3, #0]
  hadc2.Instance = ADC2;
 800ac74:	4819      	ldr	r0, [pc, #100]	; (800acdc <MX_ADC2_Init+0x70>)
  hadc2.Init.Resolution = ADCResolution;
 800ac76:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac78:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800ac7c:	b086      	sub	sp, #24
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800ac7e:	2601      	movs	r6, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ac80:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ac84:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800ac88:	2304      	movs	r3, #4
  hadc2.Instance = ADC2;
 800ac8a:	6020      	str	r0, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac8c:	6065      	str	r5, [r4, #4]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc2);
 800ac8e:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ac90:	2500      	movs	r5, #0
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ac92:	6321      	str	r1, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ac94:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ac96:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ac9a:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ac9c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac9e:	60e5      	str	r5, [r4, #12]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800aca0:	61a5      	str	r5, [r4, #24]
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800aca2:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Init.NbrOfConversion = 1;
 800aca4:	6226      	str	r6, [r4, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800aca6:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc2);
 800aca8:	f7fa fae2 	bl	8005270 <HAL_ADC_Init>
	
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800acac:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <MX_ADC2_Init+0x74>)
 800acae:	4a0d      	ldr	r2, [pc, #52]	; (800ace4 <MX_ADC2_Init+0x78>)
 800acb0:	7859      	ldrb	r1, [r3, #1]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800acb2:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <MX_ADC2_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800acb4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800acb8:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800acba:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800acbc:	4620      	mov	r0, r4
 800acbe:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800acc0:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800acc4:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800acc6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800acc8:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800acca:	f7fa ffd3 	bl	8005c74 <HAL_ADC_ConfigChannel>

}
 800acce:	b006      	add	sp, #24
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
 800acd2:	bf00      	nop
 800acd4:	200047b0 	.word	0x200047b0
 800acd8:	2000cb98 	.word	0x2000cb98
 800acdc:	50000100 	.word	0x50000100
 800ace0:	200047ac 	.word	0x200047ac
 800ace4:	08011cb8 	.word	0x08011cb8
 800ace8:	200047b4 	.word	0x200047b4

0800acec <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800acec:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc3.Init.Resolution = ADCResolution;
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <MX_ADC3_Init+0x68>)
  hadc3.Instance = ADC3;
 800acf0:	4c19      	ldr	r4, [pc, #100]	; (800ad58 <MX_ADC3_Init+0x6c>)
  hadc3.Init.Resolution = ADCResolution;
 800acf2:	681b      	ldr	r3, [r3, #0]
  hadc3.Instance = ADC3;
 800acf4:	4819      	ldr	r0, [pc, #100]	; (800ad5c <MX_ADC3_Init+0x70>)
  hadc3.Init.Resolution = ADCResolution;
 800acf6:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800acf8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800acfc:	b086      	sub	sp, #24
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800acfe:	2601      	movs	r6, #1
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ad00:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ad04:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800ad08:	2304      	movs	r3, #4
  hadc3.Instance = ADC3;
 800ad0a:	6020      	str	r0, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad0c:	6065      	str	r5, [r4, #4]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc3);
 800ad0e:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad10:	2500      	movs	r5, #0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ad12:	6321      	str	r1, [r4, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ad14:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad16:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800ad1a:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800ad1c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad1e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800ad20:	61a5      	str	r5, [r4, #24]
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800ad22:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800ad24:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800ad26:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc3);
 800ad28:	f7fa faa2 	bl	8005270 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800ad2c:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <MX_ADC3_Init+0x74>)
 800ad2e:	4a0d      	ldr	r2, [pc, #52]	; (800ad64 <MX_ADC3_Init+0x78>)
 800ad30:	7899      	ldrb	r1, [r3, #2]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800ad32:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <MX_ADC3_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800ad34:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800ad38:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800ad3a:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ad40:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800ad44:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800ad46:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800ad48:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800ad4a:	f7fa ff93 	bl	8005c74 <HAL_ADC_ConfigChannel>

}
 800ad4e:	b006      	add	sp, #24
 800ad50:	bd70      	pop	{r4, r5, r6, pc}
 800ad52:	bf00      	nop
 800ad54:	200047b0 	.word	0x200047b0
 800ad58:	2000cc84 	.word	0x2000cc84
 800ad5c:	50000400 	.word	0x50000400
 800ad60:	200047ac 	.word	0x200047ac
 800ad64:	08011ce0 	.word	0x08011ce0
 800ad68:	200047b4 	.word	0x200047b4

0800ad6c <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800ad6c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc4.Instance = ADC4;
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc4.Init.Resolution = ADCResolution;
 800ad6e:	4b19      	ldr	r3, [pc, #100]	; (800add4 <MX_ADC4_Init+0x68>)
  hadc4.Instance = ADC4;
 800ad70:	4c19      	ldr	r4, [pc, #100]	; (800add8 <MX_ADC4_Init+0x6c>)
  hadc4.Init.Resolution = ADCResolution;
 800ad72:	681b      	ldr	r3, [r3, #0]
  hadc4.Instance = ADC4;
 800ad74:	4819      	ldr	r0, [pc, #100]	; (800addc <MX_ADC4_Init+0x70>)
  hadc4.Init.Resolution = ADCResolution;
 800ad76:	60a3      	str	r3, [r4, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad78:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800ad7c:	b086      	sub	sp, #24
  hadc4.Init.ContinuousConvMode = DISABLE;
  hadc4.Init.DiscontinuousConvMode = DISABLE;
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc4.Init.NbrOfConversion = 1;
 800ad7e:	2601      	movs	r6, #1
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ad80:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ad84:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Init.DMAContinuousRequests = ENABLE;
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800ad88:	2304      	movs	r3, #4
  hadc4.Instance = ADC4;
 800ad8a:	6020      	str	r0, [r4, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad8c:	6065      	str	r5, [r4, #4]
  hadc4.Init.LowPowerAutoWait = DISABLE;
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc4);
 800ad8e:	4620      	mov	r0, r4
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad90:	2500      	movs	r5, #0
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ad92:	6321      	str	r1, [r4, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ad94:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad96:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800ad9a:	61e5      	str	r5, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800ad9c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad9e:	60e5      	str	r5, [r4, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800ada0:	61a5      	str	r5, [r4, #24]
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800ada2:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc4.Init.NbrOfConversion = 1;
 800ada4:	6226      	str	r6, [r4, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800ada6:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc4);
 800ada8:	f7fa fa62 	bl	8005270 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800adac:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <MX_ADC4_Init+0x74>)
 800adae:	4a0d      	ldr	r2, [pc, #52]	; (800ade4 <MX_ADC4_Init+0x78>)
 800adb0:	78d9      	ldrb	r1, [r3, #3]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <MX_ADC4_Init+0x7c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800adb4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800adb8:	681b      	ldr	r3, [r3, #0]
  sConfig.Rank = 1;
 800adba:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800adbc:	4620      	mov	r0, r4
 800adbe:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800adc0:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800adc4:	9505      	str	r5, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800adc6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800adc8:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800adca:	f7fa ff53 	bl	8005c74 <HAL_ADC_ConfigChannel>

}
 800adce:	b006      	add	sp, #24
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	bf00      	nop
 800add4:	200047b0 	.word	0x200047b0
 800add8:	2000cd1c 	.word	0x2000cd1c
 800addc:	50000500 	.word	0x50000500
 800ade0:	200047ac 	.word	0x200047ac
 800ade4:	08011cf0 	.word	0x08011cf0
 800ade8:	200047b4 	.word	0x200047b4

0800adec <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800adec:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800adee:	6803      	ldr	r3, [r0, #0]
 800adf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800adf4:	b08a      	sub	sp, #40	; 0x28
 800adf6:	4604      	mov	r4, r0
  if(hadc->Instance==ADC1)
 800adf8:	d044      	beq.n	800ae84 <HAL_ADC_MspInit+0x98>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800adfa:	4a8b      	ldr	r2, [pc, #556]	; (800b028 <HAL_ADC_MspInit+0x23c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d009      	beq.n	800ae14 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800ae00:	4a8a      	ldr	r2, [pc, #552]	; (800b02c <HAL_ADC_MspInit+0x240>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	f000 8090 	beq.w	800af28 <HAL_ADC_MspInit+0x13c>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 800ae08:	4a89      	ldr	r2, [pc, #548]	; (800b030 <HAL_ADC_MspInit+0x244>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	f000 80cc 	beq.w	800afa8 <HAL_ADC_MspInit+0x1bc>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800ae10:	b00a      	add	sp, #40	; 0x28
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800ae14:	4a87      	ldr	r2, [pc, #540]	; (800b034 <HAL_ADC_MspInit+0x248>)
 800ae16:	6813      	ldr	r3, [r2, #0]
 800ae18:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800ae1a:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800ae1c:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800ae1e:	d072      	beq.n	800af06 <HAL_ADC_MspInit+0x11a>
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800ae20:	4b85      	ldr	r3, [pc, #532]	; (800b038 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800ae22:	4986      	ldr	r1, [pc, #536]	; (800b03c <HAL_ADC_MspInit+0x250>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	4a86      	ldr	r2, [pc, #536]	; (800b040 <HAL_ADC_MspInit+0x254>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800ae28:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800ae2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ae30:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae32:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae34:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800ae36:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae38:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800ae3c:	f7fb fc60 	bl	8006700 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ae40:	4b80      	ldr	r3, [pc, #512]	; (800b044 <HAL_ADC_MspInit+0x258>)
    hdma_adc2.Instance = DMA2_Channel1;
 800ae42:	4d81      	ldr	r5, [pc, #516]	; (800b048 <HAL_ADC_MspInit+0x25c>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ae44:	681b      	ldr	r3, [r3, #0]
    hdma_adc2.Instance = DMA2_Channel1;
 800ae46:	4981      	ldr	r1, [pc, #516]	; (800b04c <HAL_ADC_MspInit+0x260>)
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae48:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800ae4a:	f023 0308 	bic.w	r3, r3, #8
 800ae4e:	2b10      	cmp	r3, #16
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ae50:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae54:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Init(&hdma_adc2);
 800ae56:	487c      	ldr	r0, [pc, #496]	; (800b048 <HAL_ADC_MspInit+0x25c>)
    hdma_adc2.Instance = DMA2_Channel1;
 800ae58:	6029      	str	r1, [r5, #0]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae5a:	bf18      	it	ne
 800ae5c:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ae60:	60ea      	str	r2, [r5, #12]
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae62:	bf14      	ite	ne
 800ae64:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800ae68:	4631      	moveq	r1, r6
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ae6a:	2220      	movs	r2, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800ae6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae70:	612e      	str	r6, [r5, #16]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800ae72:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800ae76:	61eb      	str	r3, [r5, #28]
    HAL_DMA_Init(&hdma_adc4);
 800ae78:	f7fb fa64 	bl	8006344 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800ae7c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ae7e:	626c      	str	r4, [r5, #36]	; 0x24
}
 800ae80:	b00a      	add	sp, #40	; 0x28
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800ae84:	4a6b      	ldr	r2, [pc, #428]	; (800b034 <HAL_ADC_MspInit+0x248>)
 800ae86:	6813      	ldr	r3, [r2, #0]
 800ae88:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800ae8a:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800ae8c:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800ae8e:	d029      	beq.n	800aee4 <HAL_ADC_MspInit+0xf8>
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ae90:	4b69      	ldr	r3, [pc, #420]	; (800b038 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ae92:	496f      	ldr	r1, [pc, #444]	; (800b050 <HAL_ADC_MspInit+0x264>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	4a6f      	ldr	r2, [pc, #444]	; (800b054 <HAL_ADC_MspInit+0x268>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800ae98:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800ae9c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800aea0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea2:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aea4:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800aea6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea8:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800aeac:	f7fb fc28 	bl	8006700 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800aeb0:	4b64      	ldr	r3, [pc, #400]	; (800b044 <HAL_ADC_MspInit+0x258>)
    hdma_adc1.Instance = DMA1_Channel1;
 800aeb2:	4d69      	ldr	r5, [pc, #420]	; (800b058 <HAL_ADC_MspInit+0x26c>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800aeb4:	681b      	ldr	r3, [r3, #0]
    hdma_adc1.Instance = DMA1_Channel1;
 800aeb6:	4969      	ldr	r1, [pc, #420]	; (800b05c <HAL_ADC_MspInit+0x270>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aeb8:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800aeba:	f023 0308 	bic.w	r3, r3, #8
 800aebe:	2b10      	cmp	r3, #16
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800aec0:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aec4:	60ae      	str	r6, [r5, #8]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aec6:	bf18      	it	ne
 800aec8:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 800aecc:	6029      	str	r1, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800aece:	60ea      	str	r2, [r5, #12]
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aed0:	bf14      	ite	ne
 800aed2:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800aed6:	4631      	moveq	r1, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800aed8:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800aeda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aede:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc1);
 800aee0:	485d      	ldr	r0, [pc, #372]	; (800b058 <HAL_ADC_MspInit+0x26c>)
 800aee2:	e7c6      	b.n	800ae72 <HAL_ADC_MspInit+0x86>
      __ADC12_CLK_ENABLE();
 800aee4:	4b5e      	ldr	r3, [pc, #376]	; (800b060 <HAL_ADC_MspInit+0x274>)
 800aee6:	695a      	ldr	r2, [r3, #20]
 800aee8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aeec:	615a      	str	r2, [r3, #20]
 800aeee:	695a      	ldr	r2, [r3, #20]
 800aef0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800aef4:	9201      	str	r2, [sp, #4]
 800aef6:	9a01      	ldr	r2, [sp, #4]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800aef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefa:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800aefe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af02:	62da      	str	r2, [r3, #44]	; 0x2c
 800af04:	e7c4      	b.n	800ae90 <HAL_ADC_MspInit+0xa4>
      __ADC12_CLK_ENABLE();
 800af06:	4b56      	ldr	r3, [pc, #344]	; (800b060 <HAL_ADC_MspInit+0x274>)
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800af0e:	615a      	str	r2, [r3, #20]
 800af10:	695a      	ldr	r2, [r3, #20]
 800af12:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800af16:	9202      	str	r2, [sp, #8]
 800af18:	9a02      	ldr	r2, [sp, #8]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800af20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af24:	62da      	str	r2, [r3, #44]	; 0x2c
 800af26:	e77b      	b.n	800ae20 <HAL_ADC_MspInit+0x34>
    ADC34_CLK_ENABLED++;
 800af28:	4a4e      	ldr	r2, [pc, #312]	; (800b064 <HAL_ADC_MspInit+0x278>)
 800af2a:	6813      	ldr	r3, [r2, #0]
 800af2c:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800af2e:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800af30:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800af32:	d10f      	bne.n	800af54 <HAL_ADC_MspInit+0x168>
      __ADC34_CLK_ENABLE();
 800af34:	4b4a      	ldr	r3, [pc, #296]	; (800b060 <HAL_ADC_MspInit+0x274>)
 800af36:	695a      	ldr	r2, [r3, #20]
 800af38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800af3c:	615a      	str	r2, [r3, #20]
 800af3e:	695a      	ldr	r2, [r3, #20]
 800af40:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800af44:	9203      	str	r2, [sp, #12]
 800af46:	9a03      	ldr	r2, [sp, #12]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800af4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800af54:	4b38      	ldr	r3, [pc, #224]	; (800b038 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800af56:	4944      	ldr	r1, [pc, #272]	; (800b068 <HAL_ADC_MspInit+0x27c>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800af58:	789b      	ldrb	r3, [r3, #2]
 800af5a:	4a44      	ldr	r2, [pc, #272]	; (800b06c <HAL_ADC_MspInit+0x280>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800af5c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800af60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800af64:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af66:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800af68:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800af6a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af6c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800af70:	f7fb fbc6 	bl	8006700 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800af74:	4b33      	ldr	r3, [pc, #204]	; (800b044 <HAL_ADC_MspInit+0x258>)
    hdma_adc3.Instance = DMA2_Channel5;
 800af76:	4d3e      	ldr	r5, [pc, #248]	; (800b070 <HAL_ADC_MspInit+0x284>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800af78:	681b      	ldr	r3, [r3, #0]
    hdma_adc3.Instance = DMA2_Channel5;
 800af7a:	493e      	ldr	r1, [pc, #248]	; (800b074 <HAL_ADC_MspInit+0x288>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af7c:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800af7e:	f023 0308 	bic.w	r3, r3, #8
 800af82:	2b10      	cmp	r3, #16
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800af84:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800af88:	60ae      	str	r6, [r5, #8]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800af8a:	bf18      	it	ne
 800af8c:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc3.Instance = DMA2_Channel5;
 800af90:	6029      	str	r1, [r5, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800af92:	60ea      	str	r2, [r5, #12]
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800af94:	bf14      	ite	ne
 800af96:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800af9a:	4631      	moveq	r1, r6
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800af9c:	2220      	movs	r2, #32
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800af9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afa2:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc3);
 800afa4:	4832      	ldr	r0, [pc, #200]	; (800b070 <HAL_ADC_MspInit+0x284>)
 800afa6:	e764      	b.n	800ae72 <HAL_ADC_MspInit+0x86>
    ADC34_CLK_ENABLED++;
 800afa8:	4a2e      	ldr	r2, [pc, #184]	; (800b064 <HAL_ADC_MspInit+0x278>)
 800afaa:	6813      	ldr	r3, [r2, #0]
 800afac:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800afae:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800afb0:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800afb2:	d10f      	bne.n	800afd4 <HAL_ADC_MspInit+0x1e8>
      __ADC34_CLK_ENABLE();
 800afb4:	4b2a      	ldr	r3, [pc, #168]	; (800b060 <HAL_ADC_MspInit+0x274>)
 800afb6:	695a      	ldr	r2, [r3, #20]
 800afb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800afbc:	615a      	str	r2, [r3, #20]
 800afbe:	695a      	ldr	r2, [r3, #20]
 800afc0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800afc4:	9204      	str	r2, [sp, #16]
 800afc6:	9a04      	ldr	r2, [sp, #16]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800afce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afd2:	62da      	str	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800afd4:	4b18      	ldr	r3, [pc, #96]	; (800b038 <HAL_ADC_MspInit+0x24c>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800afd6:	4928      	ldr	r1, [pc, #160]	; (800b078 <HAL_ADC_MspInit+0x28c>)
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800afd8:	78db      	ldrb	r3, [r3, #3]
 800afda:	4a28      	ldr	r2, [pc, #160]	; (800b07c <HAL_ADC_MspInit+0x290>)
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800afdc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800afe0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800afe4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe6:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800afe8:	2303      	movs	r3, #3
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800afea:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afec:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800aff0:	f7fb fb86 	bl	8006700 <HAL_GPIO_Init>
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800aff4:	4b13      	ldr	r3, [pc, #76]	; (800b044 <HAL_ADC_MspInit+0x258>)
    hdma_adc4.Instance = DMA2_Channel2;
 800aff6:	4d22      	ldr	r5, [pc, #136]	; (800b080 <HAL_ADC_MspInit+0x294>)
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800aff8:	681b      	ldr	r3, [r3, #0]
    hdma_adc4.Instance = DMA2_Channel2;
 800affa:	4922      	ldr	r1, [pc, #136]	; (800b084 <HAL_ADC_MspInit+0x298>)
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800affc:	606e      	str	r6, [r5, #4]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800affe:	f023 0308 	bic.w	r3, r3, #8
 800b002:	2b10      	cmp	r3, #16
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800b004:	f04f 0280 	mov.w	r2, #128	; 0x80
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800b008:	60ae      	str	r6, [r5, #8]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b00a:	bf18      	it	ne
 800b00c:	f44f 7680 	movne.w	r6, #256	; 0x100
    hdma_adc4.Instance = DMA2_Channel2;
 800b010:	6029      	str	r1, [r5, #0]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800b012:	60ea      	str	r2, [r5, #12]
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b014:	bf14      	ite	ne
 800b016:	f44f 6180 	movne.w	r1, #1024	; 0x400
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800b01a:	4631      	moveq	r1, r6
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800b01c:	2220      	movs	r2, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800b01e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b022:	612e      	str	r6, [r5, #16]
    HAL_DMA_Init(&hdma_adc4);
 800b024:	4816      	ldr	r0, [pc, #88]	; (800b080 <HAL_ADC_MspInit+0x294>)
 800b026:	e724      	b.n	800ae72 <HAL_ADC_MspInit+0x86>
 800b028:	50000100 	.word	0x50000100
 800b02c:	50000400 	.word	0x50000400
 800b030:	50000500 	.word	0x50000500
 800b034:	200047a4 	.word	0x200047a4
 800b038:	200047ac 	.word	0x200047ac
 800b03c:	08011d24 	.word	0x08011d24
 800b040:	08011d70 	.word	0x08011d70
 800b044:	200047b0 	.word	0x200047b0
 800b048:	2000cd70 	.word	0x2000cd70
 800b04c:	40020408 	.word	0x40020408
 800b050:	08011d00 	.word	0x08011d00
 800b054:	08011d5c 	.word	0x08011d5c
 800b058:	2000ccd8 	.word	0x2000ccd8
 800b05c:	40020008 	.word	0x40020008
 800b060:	40021000 	.word	0x40021000
 800b064:	200047a8 	.word	0x200047a8
 800b068:	08011d4c 	.word	0x08011d4c
 800b06c:	08011d84 	.word	0x08011d84
 800b070:	2000cbec 	.word	0x2000cbec
 800b074:	40020458 	.word	0x40020458
 800b078:	08011d4c 	.word	0x08011d4c
 800b07c:	08011d8c 	.word	0x08011d8c
 800b080:	2000cb54 	.word	0x2000cb54
 800b084:	4002041c 	.word	0x4002041c

0800b088 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800b088:	b530      	push	{r4, r5, lr}
 800b08a:	460c      	mov	r4, r1
 800b08c:	b097      	sub	sp, #92	; 0x5c
 800b08e:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800b090:	2803      	cmp	r0, #3
 800b092:	d808      	bhi.n	800b0a6 <ADC_DMA_Reconfig+0x1e>
 800b094:	e8df f000 	tbb	[pc, r0]
 800b098:	0212181e 	.word	0x0212181e
		break;
		case 2:
			adcHandler=hadc3;
		break;
		case 3:
			adcHandler=hadc4;
 800b09c:	2254      	movs	r2, #84	; 0x54
 800b09e:	4910      	ldr	r1, [pc, #64]	; (800b0e0 <ADC_DMA_Reconfig+0x58>)
 800b0a0:	a801      	add	r0, sp, #4
 800b0a2:	f003 fd9f 	bl	800ebe4 <memcpy>
		break;
	}
	
	if(buff!=NULL && len!=0){
 800b0a6:	b104      	cbz	r4, 800b0aa <ADC_DMA_Reconfig+0x22>
 800b0a8:	b90d      	cbnz	r5, 800b0ae <ADC_DMA_Reconfig+0x26>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
	}
}
 800b0aa:	b017      	add	sp, #92	; 0x5c
 800b0ac:	bd30      	pop	{r4, r5, pc}
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	a801      	add	r0, sp, #4
 800b0b4:	f7fa fbc0 	bl	8005838 <HAL_ADC_Start_DMA>
}
 800b0b8:	b017      	add	sp, #92	; 0x5c
 800b0ba:	bd30      	pop	{r4, r5, pc}
			adcHandler=hadc3;
 800b0bc:	2254      	movs	r2, #84	; 0x54
 800b0be:	4909      	ldr	r1, [pc, #36]	; (800b0e4 <ADC_DMA_Reconfig+0x5c>)
 800b0c0:	a801      	add	r0, sp, #4
 800b0c2:	f003 fd8f 	bl	800ebe4 <memcpy>
		break;
 800b0c6:	e7ee      	b.n	800b0a6 <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc2;
 800b0c8:	2254      	movs	r2, #84	; 0x54
 800b0ca:	4907      	ldr	r1, [pc, #28]	; (800b0e8 <ADC_DMA_Reconfig+0x60>)
 800b0cc:	a801      	add	r0, sp, #4
 800b0ce:	f003 fd89 	bl	800ebe4 <memcpy>
		break;
 800b0d2:	e7e8      	b.n	800b0a6 <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc1;
 800b0d4:	2254      	movs	r2, #84	; 0x54
 800b0d6:	4905      	ldr	r1, [pc, #20]	; (800b0ec <ADC_DMA_Reconfig+0x64>)
 800b0d8:	a801      	add	r0, sp, #4
 800b0da:	f003 fd83 	bl	800ebe4 <memcpy>
		break;
 800b0de:	e7e2      	b.n	800b0a6 <ADC_DMA_Reconfig+0x1e>
 800b0e0:	2000cd1c 	.word	0x2000cd1c
 800b0e4:	2000cc84 	.word	0x2000cc84
 800b0e8:	2000cb98 	.word	0x2000cb98
 800b0ec:	2000cc30 	.word	0x2000cc30

0800b0f0 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_ADC_Stop_DMA(&hadc1);
 800b0f2:	4f11      	ldr	r7, [pc, #68]	; (800b138 <ADC_DMA_Stop+0x48>)
	HAL_ADC_Stop_DMA(&hadc2);
 800b0f4:	4e11      	ldr	r6, [pc, #68]	; (800b13c <ADC_DMA_Stop+0x4c>)
	HAL_ADC_Stop_DMA(&hadc3);
 800b0f6:	4d12      	ldr	r5, [pc, #72]	; (800b140 <ADC_DMA_Stop+0x50>)
	HAL_ADC_Stop_DMA(&hadc4);
 800b0f8:	4c12      	ldr	r4, [pc, #72]	; (800b144 <ADC_DMA_Stop+0x54>)
	HAL_ADC_Stop_DMA(&hadc1);
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f7fa fc6c 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b100:	4630      	mov	r0, r6
 800b102:	f7fa fc69 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b106:	4628      	mov	r0, r5
 800b108:	f7fa fc66 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7fa fc63 	bl	80059d8 <HAL_ADC_Stop_DMA>
	MX_ADC4_Init();
}


void CalibrateADC (void){
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800b112:	4638      	mov	r0, r7
 800b114:	2100      	movs	r1, #0
 800b116:	f7fa fd39 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800b11a:	4630      	mov	r0, r6
 800b11c:	2100      	movs	r1, #0
 800b11e:	f7fa fd35 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800b122:	4628      	mov	r0, r5
 800b124:	2100      	movs	r1, #0
 800b126:	f7fa fd31 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b12a:	4620      	mov	r0, r4
 800b12c:	2100      	movs	r1, #0
}
 800b12e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b132:	f7fa bd2b 	b.w	8005b8c <HAL_ADCEx_Calibration_Start>
 800b136:	bf00      	nop
 800b138:	2000cc30 	.word	0x2000cc30
 800b13c:	2000cb98 	.word	0x2000cb98
 800b140:	2000cc84 	.word	0x2000cc84
 800b144:	2000cd1c 	.word	0x2000cd1c

0800b148 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800b148:	b500      	push	{lr}
	switch(channel){
 800b14a:	3801      	subs	r0, #1
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800b14c:	b097      	sub	sp, #92	; 0x5c
	switch(channel){
 800b14e:	2803      	cmp	r0, #3
 800b150:	d808      	bhi.n	800b164 <DMA_GetCurrDataCounter+0x1c>
 800b152:	e8df f000 	tbb	[pc, r0]
 800b156:	141a      	.short	0x141a
 800b158:	020e      	.short	0x020e
			adcHandler=hadc4;
 800b15a:	2254      	movs	r2, #84	; 0x54
 800b15c:	490e      	ldr	r1, [pc, #56]	; (800b198 <DMA_GetCurrDataCounter+0x50>)
 800b15e:	a801      	add	r0, sp, #4
 800b160:	f003 fd40 	bl	800ebe4 <memcpy>
  return adcHandler.DMA_Handle->Instance->CNDTR;
 800b164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6858      	ldr	r0, [r3, #4]
}
 800b16a:	b280      	uxth	r0, r0
 800b16c:	b017      	add	sp, #92	; 0x5c
 800b16e:	f85d fb04 	ldr.w	pc, [sp], #4
			adcHandler=hadc3;
 800b172:	2254      	movs	r2, #84	; 0x54
 800b174:	4909      	ldr	r1, [pc, #36]	; (800b19c <DMA_GetCurrDataCounter+0x54>)
 800b176:	a801      	add	r0, sp, #4
 800b178:	f003 fd34 	bl	800ebe4 <memcpy>
		break;
 800b17c:	e7f2      	b.n	800b164 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc2;
 800b17e:	2254      	movs	r2, #84	; 0x54
 800b180:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <DMA_GetCurrDataCounter+0x58>)
 800b182:	a801      	add	r0, sp, #4
 800b184:	f003 fd2e 	bl	800ebe4 <memcpy>
		break;
 800b188:	e7ec      	b.n	800b164 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc1;
 800b18a:	2254      	movs	r2, #84	; 0x54
 800b18c:	4905      	ldr	r1, [pc, #20]	; (800b1a4 <DMA_GetCurrDataCounter+0x5c>)
 800b18e:	a801      	add	r0, sp, #4
 800b190:	f003 fd28 	bl	800ebe4 <memcpy>
		break;
 800b194:	e7e6      	b.n	800b164 <DMA_GetCurrDataCounter+0x1c>
 800b196:	bf00      	nop
 800b198:	2000cd1c 	.word	0x2000cd1c
 800b19c:	2000cc84 	.word	0x2000cc84
 800b1a0:	2000cb98 	.word	0x2000cb98
 800b1a4:	2000cc30 	.word	0x2000cc30

0800b1a8 <ADC_set_sampling_time>:
void ADC_set_sampling_time(uint32_t realfreq){
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch(ADCResolution){
 800b1ac:	f8df a250 	ldr.w	sl, [pc, #592]	; 800b400 <ADC_set_sampling_time+0x258>
 800b1b0:	f8da 2000 	ldr.w	r2, [sl]
void ADC_set_sampling_time(uint32_t realfreq){
 800b1b4:	b087      	sub	sp, #28
 800b1b6:	4604      	mov	r4, r0
	switch(ADCResolution){
 800b1b8:	2a18      	cmp	r2, #24
 800b1ba:	d836      	bhi.n	800b22a <ADC_set_sampling_time+0x82>
 800b1bc:	e8df f002 	tbb	[pc, r2]
 800b1c0:	3535350d 	.word	0x3535350d
 800b1c4:	35353535 	.word	0x35353535
 800b1c8:	35353533 	.word	0x35353533
 800b1cc:	35353535 	.word	0x35353535
 800b1d0:	35353531 	.word	0x35353531
 800b1d4:	35353535 	.word	0x35353535
 800b1d8:	2f          	.byte	0x2f
 800b1d9:	00          	.byte	0x00
 800b1da:	250c      	movs	r5, #12
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/realfreq-ADCRes-1;
 800b1dc:	f7fc f832 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 800b1e0:	fbb0 f0f4 	udiv	r0, r0, r4
 800b1e4:	1b40      	subs	r0, r0, r5
 800b1e6:	3801      	subs	r0, #1
	if(cyclesForConversion>=601){
 800b1e8:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800b1ec:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800b404 <ADC_set_sampling_time+0x25c>
	if(cyclesForConversion>=601){
 800b1f0:	d81d      	bhi.n	800b22e <ADC_set_sampling_time+0x86>
	}else if(cyclesForConversion>=181){
 800b1f2:	28b4      	cmp	r0, #180	; 0xb4
 800b1f4:	f200 80da 	bhi.w	800b3ac <ADC_set_sampling_time+0x204>
	}else if(cyclesForConversion>=61){
 800b1f8:	283c      	cmp	r0, #60	; 0x3c
 800b1fa:	f200 80db 	bhi.w	800b3b4 <ADC_set_sampling_time+0x20c>
	}else if(cyclesForConversion>=19){
 800b1fe:	2812      	cmp	r0, #18
 800b200:	f200 80dc 	bhi.w	800b3bc <ADC_set_sampling_time+0x214>
	}else if(cyclesForConversion>=7){
 800b204:	2806      	cmp	r0, #6
 800b206:	f200 80dd 	bhi.w	800b3c4 <ADC_set_sampling_time+0x21c>
	}else if(cyclesForConversion>=4){
 800b20a:	2803      	cmp	r0, #3
 800b20c:	f200 80de 	bhi.w	800b3cc <ADC_set_sampling_time+0x224>
	}else if(cyclesForConversion>=2){
 800b210:	2801      	cmp	r0, #1
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 800b212:	bf8c      	ite	hi
 800b214:	2101      	movhi	r1, #1
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800b216:	2100      	movls	r1, #0
 800b218:	f8c8 1000 	str.w	r1, [r8]
 800b21c:	e00a      	b.n	800b234 <ADC_set_sampling_time+0x8c>
			break;
 800b21e:	2506      	movs	r5, #6
 800b220:	e7dc      	b.n	800b1dc <ADC_set_sampling_time+0x34>
			break;
 800b222:	2508      	movs	r5, #8
 800b224:	e7da      	b.n	800b1dc <ADC_set_sampling_time+0x34>
	switch(ADCResolution){
 800b226:	250a      	movs	r5, #10
 800b228:	e7d8      	b.n	800b1dc <ADC_set_sampling_time+0x34>
 800b22a:	2500      	movs	r5, #0
 800b22c:	e7d6      	b.n	800b1dc <ADC_set_sampling_time+0x34>
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800b22e:	2107      	movs	r1, #7
 800b230:	f8c8 1000 	str.w	r1, [r8]
	HAL_ADC_Stop_DMA(&hadc1);
 800b234:	4e67      	ldr	r6, [pc, #412]	; (800b3d4 <ADC_set_sampling_time+0x22c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b236:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b408 <ADC_set_sampling_time+0x260>
  hadc2.Instance = ADC2;
 800b23a:	4d67      	ldr	r5, [pc, #412]	; (800b3d8 <ADC_set_sampling_time+0x230>)
	HAL_ADC_Stop_DMA(&hadc1);
 800b23c:	4630      	mov	r0, r6
 800b23e:	f7fa fbcb 	bl	80059d8 <HAL_ADC_Stop_DMA>
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b242:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.Resolution = ADCResolution;
 800b246:	f8da 1000 	ldr.w	r1, [sl]
  hadc1.Instance = ADC1;
 800b24a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b24e:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b252:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800b254:	2701      	movs	r7, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b256:	e9c6 320b 	strd	r3, r2, [r6, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b25a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  hadc1.Instance = ADC1;
 800b25e:	6030      	str	r0, [r6, #0]
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b260:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800b262:	4630      	mov	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b264:	e9c6 b101 	strd	fp, r1, [r6, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b268:	6134      	str	r4, [r6, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b26a:	61f4      	str	r4, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b26c:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b26e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b270:	61b4      	str	r4, [r6, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b272:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b274:	6237      	str	r7, [r6, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b276:	6377      	str	r7, [r6, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b278:	6173      	str	r3, [r6, #20]
  HAL_ADC_Init(&hadc1);
 800b27a:	f7f9 fff9 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b27e:	f899 0000 	ldrb.w	r0, [r9]
 800b282:	4956      	ldr	r1, [pc, #344]	; (800b3dc <ADC_set_sampling_time+0x234>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b284:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b288:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b28c:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b28e:	4630      	mov	r0, r6
 800b290:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b292:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b294:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b296:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b29a:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b29c:	f7fa fcea 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b2a0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800b2a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b2a8:	e9c5 3c0b 	strd	r3, ip, [r5, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b2ac:	f8da 1000 	ldr.w	r1, [sl]
  hadc2.Instance = ADC2;
 800b2b0:	4e4b      	ldr	r6, [pc, #300]	; (800b3e0 <ADC_set_sampling_time+0x238>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b2b2:	f8c5 b004 	str.w	fp, [r5, #4]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b2b6:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc2);
 800b2b8:	4628      	mov	r0, r5
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b2ba:	e9c5 3405 	strd	r3, r4, [r5, #20]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b2be:	612c      	str	r4, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b2c0:	61ec      	str	r4, [r5, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b2c2:	626c      	str	r4, [r5, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b2c4:	60ec      	str	r4, [r5, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b2c6:	622f      	str	r7, [r5, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b2c8:	636f      	str	r7, [r5, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b2ca:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b2cc:	602e      	str	r6, [r5, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b2ce:	60a9      	str	r1, [r5, #8]
  HAL_ADC_Init(&hadc2);
 800b2d0:	f7f9 ffce 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b2d4:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b2d8:	4942      	ldr	r1, [pc, #264]	; (800b3e4 <ADC_set_sampling_time+0x23c>)
  hadc3.Instance = ADC3;
 800b2da:	4e43      	ldr	r6, [pc, #268]	; (800b3e8 <ADC_set_sampling_time+0x240>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b2dc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b2e0:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b2e4:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b2ea:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b2ec:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b2ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b2f2:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b2f4:	f7fa fcbe 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b2f8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 800b2fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b300:	e9c6 3e0b 	strd	r3, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b304:	f8da 1000 	ldr.w	r1, [sl]
  hadc3.Instance = ADC3;
 800b308:	4d38      	ldr	r5, [pc, #224]	; (800b3ec <ADC_set_sampling_time+0x244>)
 800b30a:	6035      	str	r5, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b30c:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc3);
 800b30e:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b310:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b314:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b316:	f8c6 b004 	str.w	fp, [r6, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b31a:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b31c:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b31e:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b320:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b322:	6237      	str	r7, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b324:	6377      	str	r7, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b326:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b328:	f7f9 ffa2 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b32c:	f899 0002 	ldrb.w	r0, [r9, #2]
 800b330:	492f      	ldr	r1, [pc, #188]	; (800b3f0 <ADC_set_sampling_time+0x248>)
  hadc4.Instance = ADC4;
 800b332:	4d30      	ldr	r5, [pc, #192]	; (800b3f4 <ADC_set_sampling_time+0x24c>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b334:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b338:	f8d8 3000 	ldr.w	r3, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b33c:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b33e:	4630      	mov	r0, r6
 800b340:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b342:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800b344:	9701      	str	r7, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b346:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b34a:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b34c:	f7fa fc92 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc4.Init.Resolution = ADCResolution;
 800b350:	f8da 3000 	ldr.w	r3, [sl]
 800b354:	60ab      	str	r3, [r5, #8]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b356:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800b35a:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc4.Instance = ADC4;
 800b35e:	4926      	ldr	r1, [pc, #152]	; (800b3f8 <ADC_set_sampling_time+0x250>)
 800b360:	6029      	str	r1, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b362:	e9c5 3a0b 	strd	r3, sl, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b366:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b368:	2304      	movs	r3, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b36a:	e9c5 3405 	strd	r3, r4, [r5, #20]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b36e:	f8c5 b004 	str.w	fp, [r5, #4]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b372:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b374:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b376:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b378:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b37a:	622f      	str	r7, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b37c:	636f      	str	r7, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b37e:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b380:	f7f9 ff76 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b384:	f899 1003 	ldrb.w	r1, [r9, #3]
 800b388:	4b1c      	ldr	r3, [pc, #112]	; (800b3fc <ADC_set_sampling_time+0x254>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b38a:	f8d8 2000 	ldr.w	r2, [r8]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b38e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  sConfig.Rank = 1;
 800b392:	9701      	str	r7, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b394:	4669      	mov	r1, sp
 800b396:	4628      	mov	r0, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b398:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b39c:	9405      	str	r4, [sp, #20]
  sConfig.SamplingTime = ADCSamplingTime;
 800b39e:	9202      	str	r2, [sp, #8]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b3a0:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b3a2:	f7fa fc67 	bl	8005c74 <HAL_ADC_ConfigChannel>
}
 800b3a6:	b007      	add	sp, #28
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
 800b3ac:	2106      	movs	r1, #6
 800b3ae:	f8c8 1000 	str.w	r1, [r8]
 800b3b2:	e73f      	b.n	800b234 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
 800b3b4:	2105      	movs	r1, #5
 800b3b6:	f8c8 1000 	str.w	r1, [r8]
 800b3ba:	e73b      	b.n	800b234 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
 800b3bc:	2104      	movs	r1, #4
 800b3be:	f8c8 1000 	str.w	r1, [r8]
 800b3c2:	e737      	b.n	800b234 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
 800b3c4:	2103      	movs	r1, #3
 800b3c6:	f8c8 1000 	str.w	r1, [r8]
 800b3ca:	e733      	b.n	800b234 <ADC_set_sampling_time+0x8c>
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
 800b3cc:	2102      	movs	r1, #2
 800b3ce:	f8c8 1000 	str.w	r1, [r8]
 800b3d2:	e72f      	b.n	800b234 <ADC_set_sampling_time+0x8c>
 800b3d4:	2000cc30 	.word	0x2000cc30
 800b3d8:	2000cb98 	.word	0x2000cb98
 800b3dc:	08011c94 	.word	0x08011c94
 800b3e0:	50000100 	.word	0x50000100
 800b3e4:	08011cb8 	.word	0x08011cb8
 800b3e8:	2000cc84 	.word	0x2000cc84
 800b3ec:	50000400 	.word	0x50000400
 800b3f0:	08011ce0 	.word	0x08011ce0
 800b3f4:	2000cd1c 	.word	0x2000cd1c
 800b3f8:	50000500 	.word	0x50000500
 800b3fc:	08011cf0 	.word	0x08011cf0
 800b400:	200047b0 	.word	0x200047b0
 800b404:	200047b4 	.word	0x200047b4
 800b408:	200047ac 	.word	0x200047ac

0800b40c <samplingEnable>:
	TIMScopeEnable();
 800b40c:	f003 b81c 	b.w	800e448 <TIMScopeEnable>

0800b410 <samplingDisable>:
	TIMScopeDisable();
 800b410:	f003 b820 	b.w	800e454 <TIMScopeDisable>

0800b414 <adcSetInputChannel>:
void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ADCChannel[adc]=chann;
 800b418:	4b7e      	ldr	r3, [pc, #504]	; (800b614 <adcSetInputChannel+0x200>)
	HAL_ADC_Stop_DMA(&hadc1);
 800b41a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800b650 <adcSetInputChannel+0x23c>
	HAL_ADC_Stop_DMA(&hadc2);
 800b41e:	4f7e      	ldr	r7, [pc, #504]	; (800b618 <adcSetInputChannel+0x204>)
	HAL_ADC_Stop_DMA(&hadc3);
 800b420:	4e7e      	ldr	r6, [pc, #504]	; (800b61c <adcSetInputChannel+0x208>)
	ADCChannel[adc]=chann;
 800b422:	5419      	strb	r1, [r3, r0]
void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800b424:	b087      	sub	sp, #28
	TIMScopeDisable();
 800b426:	f003 f815 	bl	800e454 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800b42a:	4640      	mov	r0, r8
	HAL_ADC_Stop_DMA(&hadc4);
 800b42c:	4d7c      	ldr	r5, [pc, #496]	; (800b620 <adcSetInputChannel+0x20c>)
  hadc1.Init.Resolution = ADCResolution;
 800b42e:	f8df a224 	ldr.w	sl, [pc, #548]	; 800b654 <adcSetInputChannel+0x240>
  sConfig.SamplingTime = ADCSamplingTime;
 800b432:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b658 <adcSetInputChannel+0x244>
	HAL_ADC_Stop_DMA(&hadc1);
 800b436:	f7fa facf 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b43a:	4638      	mov	r0, r7
 800b43c:	f7fa facc 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b440:	4630      	mov	r0, r6
 800b442:	f7fa fac9 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800b446:	4628      	mov	r0, r5
 800b448:	f7fa fac6 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_DeInit(&hadc1);
 800b44c:	4640      	mov	r0, r8
 800b44e:	f7fa f89f 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800b452:	4638      	mov	r0, r7
 800b454:	f7fa f89c 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800b458:	4630      	mov	r0, r6
 800b45a:	f7fa f899 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800b45e:	4628      	mov	r0, r5
 800b460:	f7fa f896 	bl	8005590 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc1);
 800b464:	486f      	ldr	r0, [pc, #444]	; (800b624 <adcSetInputChannel+0x210>)
 800b466:	f7fa ffb7 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800b46a:	486f      	ldr	r0, [pc, #444]	; (800b628 <adcSetInputChannel+0x214>)
 800b46c:	f7fa ffb4 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800b470:	486e      	ldr	r0, [pc, #440]	; (800b62c <adcSetInputChannel+0x218>)
 800b472:	f7fa ffb1 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800b476:	486e      	ldr	r0, [pc, #440]	; (800b630 <adcSetInputChannel+0x21c>)
 800b478:	f7fa ffae 	bl	80063d8 <HAL_DMA_DeInit>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b47c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b480:	f8c8 2004 	str.w	r2, [r8, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b484:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Instance = ADC1;
 800b488:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b48c:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b490:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800b492:	f04f 0901 	mov.w	r9, #1
  hadc1.Init.Resolution = ADCResolution;
 800b496:	f8da 1000 	ldr.w	r1, [sl]
  hadc1.Instance = ADC1;
 800b49a:	f8c8 0000 	str.w	r0, [r8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b49e:	e9c8 230b 	strd	r2, r3, [r8, #44]	; 0x2c
  HAL_ADC_Init(&hadc1);
 800b4a2:	4640      	mov	r0, r8
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b4a4:	2204      	movs	r2, #4
  hadc1.Init.Resolution = ADCResolution;
 800b4a6:	f8c8 1008 	str.w	r1, [r8, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b4aa:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b4ae:	f8c8 401c 	str.w	r4, [r8, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b4b2:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b4b6:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b4ba:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b4be:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b4c2:	f8c8 9020 	str.w	r9, [r8, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b4c6:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b4ca:	f8c8 2014 	str.w	r2, [r8, #20]
  HAL_ADC_Init(&hadc1);
 800b4ce:	f7f9 fecf 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b4d2:	4b50      	ldr	r3, [pc, #320]	; (800b614 <adcSetInputChannel+0x200>)
 800b4d4:	4957      	ldr	r1, [pc, #348]	; (800b634 <adcSetInputChannel+0x220>)
 800b4d6:	7818      	ldrb	r0, [r3, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800b4d8:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b4dc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b4e0:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800b4e6:	9202      	str	r2, [sp, #8]
  sConfig.Rank = 1;
 800b4e8:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b4ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b4f0:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b4f2:	f7fa fbbf 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b4f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b4fa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b4fe:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b500:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b504:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b508:	f8da 1000 	ldr.w	r1, [sl]
  hadc2.Instance = ADC2;
 800b50c:	4b4a      	ldr	r3, [pc, #296]	; (800b638 <adcSetInputChannel+0x224>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b50e:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b510:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800b512:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b514:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b518:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b51a:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b51c:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b51e:	f8c7 9020 	str.w	r9, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b522:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b526:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b528:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b52a:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800b52c:	f7f9 fea0 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b530:	4b38      	ldr	r3, [pc, #224]	; (800b614 <adcSetInputChannel+0x200>)
 800b532:	4942      	ldr	r1, [pc, #264]	; (800b63c <adcSetInputChannel+0x228>)
 800b534:	7858      	ldrb	r0, [r3, #1]
  sConfig.Offset = 0;
 800b536:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b538:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b53c:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 800b53e:	e9cd 2900 	strd	r2, r9, [sp]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b542:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800b544:	f8db 2000 	ldr.w	r2, [fp]
 800b548:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b54a:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b54e:	f7fa fb91 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b556:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b55a:	6072      	str	r2, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b55c:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b560:	e9c6 2e0b 	strd	r2, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b564:	f8da 1000 	ldr.w	r1, [sl]
  hadc3.Instance = ADC3;
 800b568:	4f35      	ldr	r7, [pc, #212]	; (800b640 <adcSetInputChannel+0x22c>)
 800b56a:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b56c:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc3);
 800b56e:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b570:	e9c6 2405 	strd	r2, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b574:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b576:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b578:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b57a:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b57c:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b57e:	f8c6 9020 	str.w	r9, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b582:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b586:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b588:	f7f9 fe72 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b58c:	4b21      	ldr	r3, [pc, #132]	; (800b614 <adcSetInputChannel+0x200>)
 800b58e:	492d      	ldr	r1, [pc, #180]	; (800b644 <adcSetInputChannel+0x230>)
 800b590:	7898      	ldrb	r0, [r3, #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b592:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b596:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b59a:	9202      	str	r2, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b59c:	4669      	mov	r1, sp
 800b59e:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800b5a0:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b5a4:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800b5a8:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b5aa:	9700      	str	r7, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b5ac:	f7fa fb62 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc4.Init.Resolution = ADCResolution;
 800b5b0:	f8da 1000 	ldr.w	r1, [sl]
 800b5b4:	60a9      	str	r1, [r5, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b5b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b5ba:	6069      	str	r1, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b5bc:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800b5c0:	f44f 7160 	mov.w	r1, #896	; 0x380
  hadc4.Instance = ADC4;
 800b5c4:	4a20      	ldr	r2, [pc, #128]	; (800b648 <adcSetInputChannel+0x234>)
 800b5c6:	602a      	str	r2, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b5c8:	e9c5 180b 	strd	r1, r8, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b5cc:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b5ce:	2104      	movs	r1, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b5d0:	e9c5 1405 	strd	r1, r4, [r5, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b5d4:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b5d6:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b5d8:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b5da:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b5dc:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b5e0:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b5e4:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b5e6:	f7f9 fe43 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b5ea:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <adcSetInputChannel+0x200>)
 800b5ec:	4917      	ldr	r1, [pc, #92]	; (800b64c <adcSetInputChannel+0x238>)
 800b5ee:	78d8      	ldrb	r0, [r3, #3]
  sConfig.SamplingTime = ADCSamplingTime;
 800b5f0:	f8db 2000 	ldr.w	r2, [fp]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b5f4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  sConfig.Rank = 1;
 800b5f8:	f8cd 9004 	str.w	r9, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b5fc:	4669      	mov	r1, sp
 800b5fe:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b600:	e9cd 2402 	strd	r2, r4, [sp, #8]
  sConfig.Offset = 0;
 800b604:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b608:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b60a:	f7fa fb33 	bl	8005c74 <HAL_ADC_ConfigChannel>
}
 800b60e:	b007      	add	sp, #28
 800b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b614:	200047ac 	.word	0x200047ac
 800b618:	2000cb98 	.word	0x2000cb98
 800b61c:	2000cc84 	.word	0x2000cc84
 800b620:	2000cd1c 	.word	0x2000cd1c
 800b624:	2000ccd8 	.word	0x2000ccd8
 800b628:	2000cd70 	.word	0x2000cd70
 800b62c:	2000cbec 	.word	0x2000cbec
 800b630:	2000cb54 	.word	0x2000cb54
 800b634:	08011c94 	.word	0x08011c94
 800b638:	50000100 	.word	0x50000100
 800b63c:	08011cb8 	.word	0x08011cb8
 800b640:	50000400 	.word	0x50000400
 800b644:	08011ce0 	.word	0x08011ce0
 800b648:	50000500 	.word	0x50000500
 800b64c:	08011cf0 	.word	0x08011cf0
 800b650:	2000cc30 	.word	0x2000cc30
 800b654:	200047b0 	.word	0x200047b0
 800b658:	200047b4 	.word	0x200047b4

0800b65c <adcSetDefaultInputs>:
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800b65c:	4b01      	ldr	r3, [pc, #4]	; (800b664 <adcSetDefaultInputs+0x8>)
 800b65e:	4a02      	ldr	r2, [pc, #8]	; (800b668 <adcSetDefaultInputs+0xc>)
 800b660:	601a      	str	r2, [r3, #0]
}
 800b662:	4770      	bx	lr
 800b664:	200047ac 	.word	0x200047ac
 800b668:	01020402 	.word	0x01020402

0800b66c <adcSetResolution>:
void adcSetResolution (uint8_t res){
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	b089      	sub	sp, #36	; 0x24
 800b672:	4604      	mov	r4, r0
	TIMScopeDisable();
 800b674:	f002 feee 	bl	800e454 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800b678:	4881      	ldr	r0, [pc, #516]	; (800b880 <adcSetResolution+0x214>)
 800b67a:	f7fa f9ad 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800b67e:	4881      	ldr	r0, [pc, #516]	; (800b884 <adcSetResolution+0x218>)
 800b680:	f7fa f9aa 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800b684:	4880      	ldr	r0, [pc, #512]	; (800b888 <adcSetResolution+0x21c>)
 800b686:	f7fa f9a7 	bl	80059d8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800b68a:	4880      	ldr	r0, [pc, #512]	; (800b88c <adcSetResolution+0x220>)
 800b68c:	f7fa f9a4 	bl	80059d8 <HAL_ADC_Stop_DMA>
	if(res==8){
 800b690:	2c08      	cmp	r4, #8
 800b692:	f000 80ee 	beq.w	800b872 <adcSetResolution+0x206>
	}else if(res==12){
 800b696:	2c0c      	cmp	r4, #12
 800b698:	d002      	beq.n	800b6a0 <adcSetResolution+0x34>
}
 800b69a:	b009      	add	sp, #36	; 0x24
 800b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCResolution	= ADC_RESOLUTION12b;
 800b6a0:	f8df b218 	ldr.w	fp, [pc, #536]	; 800b8bc <adcSetResolution+0x250>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f8cb 2000 	str.w	r2, [fp]
	HAL_ADC_DeInit(&hadc1);
 800b6aa:	4975      	ldr	r1, [pc, #468]	; (800b880 <adcSetResolution+0x214>)
	HAL_ADC_DeInit(&hadc2);
 800b6ac:	4f75      	ldr	r7, [pc, #468]	; (800b884 <adcSetResolution+0x218>)
	HAL_ADC_DeInit(&hadc3);
 800b6ae:	4e76      	ldr	r6, [pc, #472]	; (800b888 <adcSetResolution+0x21c>)
	HAL_ADC_DeInit(&hadc4);
 800b6b0:	4d76      	ldr	r5, [pc, #472]	; (800b88c <adcSetResolution+0x220>)
	HAL_ADC_DeInit(&hadc1);
 800b6b2:	9101      	str	r1, [sp, #4]
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	f7f9 ff6b 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f7f9 ff68 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7f9 ff65 	bl	8005590 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f7f9 ff62 	bl	8005590 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc1);
 800b6cc:	4870      	ldr	r0, [pc, #448]	; (800b890 <adcSetResolution+0x224>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b6ce:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800b8c0 <adcSetResolution+0x254>
  sConfig.SamplingTime = ADCSamplingTime;
 800b6d2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800b8c4 <adcSetResolution+0x258>
	HAL_DMA_DeInit(&hdma_adc1);
 800b6d6:	f7fa fe7f 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800b6da:	486e      	ldr	r0, [pc, #440]	; (800b894 <adcSetResolution+0x228>)
 800b6dc:	f7fa fe7c 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800b6e0:	486d      	ldr	r0, [pc, #436]	; (800b898 <adcSetResolution+0x22c>)
 800b6e2:	f7fa fe79 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800b6e6:	486d      	ldr	r0, [pc, #436]	; (800b89c <adcSetResolution+0x230>)
 800b6e8:	f7fa fe76 	bl	80063d8 <HAL_DMA_DeInit>
  hadc1.Instance = ADC1;
 800b6ec:	9901      	ldr	r1, [sp, #4]
  hadc1.Init.Resolution = ADCResolution;
 800b6ee:	f8db 3000 	ldr.w	r3, [fp]
 800b6f2:	608b      	str	r3, [r1, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b6f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b6fc:	604b      	str	r3, [r1, #4]
  hadc1.Instance = ADC1;
 800b6fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b702:	f44f 7360 	mov.w	r3, #896	; 0x380
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b706:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800b708:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b70c:	e9c1 320b 	strd	r3, r2, [r1, #44]	; 0x2c
  hadc1.Instance = ADC1;
 800b710:	6008      	str	r0, [r1, #0]
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b712:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800b714:	4608      	mov	r0, r1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b716:	610c      	str	r4, [r1, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b718:	61cc      	str	r4, [r1, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b71a:	624c      	str	r4, [r1, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b71c:	60cc      	str	r4, [r1, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b71e:	618c      	str	r4, [r1, #24]
  hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b720:	638c      	str	r4, [r1, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800b722:	f8c1 8020 	str.w	r8, [r1, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b726:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800b72a:	614b      	str	r3, [r1, #20]
  HAL_ADC_Init(&hadc1);
 800b72c:	f7f9 fda0 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b730:	f89a c000 	ldrb.w	ip, [sl]
 800b734:	485a      	ldr	r0, [pc, #360]	; (800b8a0 <adcSetResolution+0x234>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b736:	9901      	ldr	r1, [sp, #4]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800b738:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
  sConfig.Offset = 0;
 800b73c:	9407      	str	r4, [sp, #28]
  sConfig.Rank = 1;
 800b73e:	e9cd 3802 	strd	r3, r8, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b742:	4608      	mov	r0, r1
  sConfig.SamplingTime = ADCSamplingTime;
 800b744:	f8d9 3000 	ldr.w	r3, [r9]
 800b748:	9304      	str	r3, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b74a:	a902      	add	r1, sp, #8
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b74c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800b750:	f7fa fa90 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b754:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b758:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b75c:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b75e:	f44f 7260 	mov.w	r2, #896	; 0x380
 800b762:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800b766:	f8db 1000 	ldr.w	r1, [fp]
  hadc2.Instance = ADC2;
 800b76a:	4b4e      	ldr	r3, [pc, #312]	; (800b8a4 <adcSetResolution+0x238>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b76c:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800b76e:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800b770:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b772:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b776:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b778:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b77a:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b77c:	f8c7 8020 	str.w	r8, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b780:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  hadc2.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b784:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800b786:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800b788:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800b78a:	f7f9 fd71 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b78e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800b792:	4945      	ldr	r1, [pc, #276]	; (800b8a8 <adcSetResolution+0x23c>)
  sConfig.Offset = 0;
 800b794:	9407      	str	r4, [sp, #28]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800b796:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b79a:	a902      	add	r1, sp, #8
  sConfig.Rank = 1;
 800b79c:	e9cd 3802 	strd	r3, r8, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b7a0:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800b7a2:	f8d9 3000 	ldr.w	r3, [r9]
 800b7a6:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b7a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800b7ac:	f7fa fa62 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b7b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b7b4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b7b8:	6073      	str	r3, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b7ba:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b7be:	e9c6 3e0b 	strd	r3, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800b7c2:	f8db 1000 	ldr.w	r1, [fp]
  hadc3.Instance = ADC3;
 800b7c6:	4f39      	ldr	r7, [pc, #228]	; (800b8ac <adcSetResolution+0x240>)
 800b7c8:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800b7ca:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc3);
 800b7cc:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b7ce:	e9c6 3405 	strd	r3, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800b7d2:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b7d4:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b7d6:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b7d8:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b7da:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b7dc:	f8c6 8020 	str.w	r8, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800b7e0:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
  hadc3.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b7e4:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800b7e6:	f7f9 fd43 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b7ea:	f89a 0002 	ldrb.w	r0, [sl, #2]
 800b7ee:	4930      	ldr	r1, [pc, #192]	; (800b8b0 <adcSetResolution+0x244>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b7f0:	f8d9 3000 	ldr.w	r3, [r9]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b7f4:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800b7f8:	9304      	str	r3, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b7fa:	a902      	add	r1, sp, #8
 800b7fc:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800b7fe:	f8cd 800c 	str.w	r8, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b802:	e9cd 4405 	strd	r4, r4, [sp, #20]
  sConfig.Offset = 0;
 800b806:	9407      	str	r4, [sp, #28]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800b808:	9702      	str	r7, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800b80a:	f7fa fa33 	bl	8005c74 <HAL_ADC_ConfigChannel>
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b80e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc4.Init.Resolution = ADCResolution;
 800b812:	f8db 3000 	ldr.w	r3, [fp]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b816:	606a      	str	r2, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b818:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 800b81c:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Instance = ADC4;
 800b820:	4924      	ldr	r1, [pc, #144]	; (800b8b4 <adcSetResolution+0x248>)
  hadc4.Init.Resolution = ADCResolution;
 800b822:	60ab      	str	r3, [r5, #8]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800b824:	e9c5 2b0b 	strd	r2, fp, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800b828:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = EOC_SINGLE_CONV;
 800b82a:	2204      	movs	r2, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800b82c:	e9c5 2405 	strd	r2, r4, [r5, #20]
  hadc4.Instance = ADC4;
 800b830:	6029      	str	r1, [r5, #0]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b832:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800b834:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800b836:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b838:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800b83a:	f8c5 8020 	str.w	r8, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800b83e:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
  hadc4.Init.Overrun = OVR_DATA_OVERWRITTEN;
 800b842:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800b844:	f7f9 fd14 	bl	8005270 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b848:	f89a 1003 	ldrb.w	r1, [sl, #3]
 800b84c:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <adcSetResolution+0x24c>)
  sConfig.SamplingTime = ADCSamplingTime;
 800b84e:	f8d9 2000 	ldr.w	r2, [r9]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  sConfig.Rank = 1;
 800b856:	f8cd 800c 	str.w	r8, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b85a:	a902      	add	r1, sp, #8
 800b85c:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b85e:	e9cd 2404 	strd	r2, r4, [sp, #16]
  sConfig.Offset = 0;
 800b862:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800b866:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800b868:	f7fa fa04 	bl	8005c74 <HAL_ADC_ConfigChannel>
}
 800b86c:	b009      	add	sp, #36	; 0x24
 800b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ADCResolution	= ADC_RESOLUTION8b;
 800b872:	f8df b048 	ldr.w	fp, [pc, #72]	; 800b8bc <adcSetResolution+0x250>
 800b876:	2210      	movs	r2, #16
 800b878:	f8cb 2000 	str.w	r2, [fp]
 800b87c:	e715      	b.n	800b6aa <adcSetResolution+0x3e>
 800b87e:	bf00      	nop
 800b880:	2000cc30 	.word	0x2000cc30
 800b884:	2000cb98 	.word	0x2000cb98
 800b888:	2000cc84 	.word	0x2000cc84
 800b88c:	2000cd1c 	.word	0x2000cd1c
 800b890:	2000ccd8 	.word	0x2000ccd8
 800b894:	2000cd70 	.word	0x2000cd70
 800b898:	2000cbec 	.word	0x2000cbec
 800b89c:	2000cb54 	.word	0x2000cb54
 800b8a0:	08011c94 	.word	0x08011c94
 800b8a4:	50000100 	.word	0x50000100
 800b8a8:	08011cb8 	.word	0x08011cb8
 800b8ac:	50000400 	.word	0x50000400
 800b8b0:	08011ce0 	.word	0x08011ce0
 800b8b4:	50000500 	.word	0x50000500
 800b8b8:	08011cf0 	.word	0x08011cf0
 800b8bc:	200047b0 	.word	0x200047b0
 800b8c0:	200047ac 	.word	0x200047ac
 800b8c4:	200047b4 	.word	0x200047b4

0800b8c8 <CalibrateADC>:
void CalibrateADC (void){
 800b8c8:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <CalibrateADC+0x28>)
 800b8ce:	f7fa f95d 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4807      	ldr	r0, [pc, #28]	; (800b8f4 <CalibrateADC+0x2c>)
 800b8d6:	f7fa f959 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4806      	ldr	r0, [pc, #24]	; (800b8f8 <CalibrateADC+0x30>)
 800b8de:	f7fa f955 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4805      	ldr	r0, [pc, #20]	; (800b8fc <CalibrateADC+0x34>)
}
 800b8e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800b8ea:	f7fa b94f 	b.w	8005b8c <HAL_ADCEx_Calibration_Start>
 800b8ee:	bf00      	nop
 800b8f0:	2000cc30 	.word	0x2000cc30
 800b8f4:	2000cb98 	.word	0x2000cb98
 800b8f8:	2000cc84 	.word	0x2000cc84
 800b8fc:	2000cd1c 	.word	0x2000cd1c

0800b900 <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800b900:	b530      	push	{r4, r5, lr}
 800b902:	b0a7      	sub	sp, #156	; 0x9c

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800b904:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b906:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b908:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b90a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b90e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800b916:	9006      	str	r0, [sp, #24]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b918:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b91a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b91e:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b920:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b924:	f7fb f884 	bl	8006a30 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;		// RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1; (before PWM generator implementation)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b928:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b92a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b92c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b930:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b932:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b936:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b938:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b93a:	9405      	str	r4, [sp, #20]

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800b93c:	4d13      	ldr	r5, [pc, #76]	; (800b98c <SystemClock_Config+0x8c>)
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b93e:	f7fb fb47 	bl	8006fd0 <HAL_RCC_ClockConfig>
																			 RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34| \
																			 RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15| \
																			 RCC_PERIPHCLK_TIM8; 
																			 // RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \ RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34; (before gen. implem.)
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800b942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	#endif //USE_GEN_PWM || USE_LOG_ANLYS	
	#ifdef USE_SYNC_PWM		
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
	#endif //USE_SYNC_PWM	
	#ifdef USE_COUNTER	
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800b946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b94a:	f44f 7380 	mov.w	r3, #256	; 0x100
		PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;		
	#endif //USE_COUNTER	
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b94e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800b950:	911b      	str	r1, [sp, #108]	; 0x6c
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800b952:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b954:	931a      	str	r3, [sp, #104]	; 0x68
		PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800b956:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800b958:	9421      	str	r4, [sp, #132]	; 0x84
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800b95a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800b95e:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b960:	f7fb fc88 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b964:	f7fb fc50 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 800b968:	4b09      	ldr	r3, [pc, #36]	; (800b990 <SystemClock_Config+0x90>)
 800b96a:	fba3 3000 	umull	r3, r0, r3, r0
 800b96e:	0980      	lsrs	r0, r0, #6
 800b970:	f7fa fb8c 	bl	800608c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b974:	2004      	movs	r0, #4
 800b976:	f7fa fbb1 	bl	80060dc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b97a:	4622      	mov	r2, r4
 800b97c:	4621      	mov	r1, r4
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	f7fa fb33 	bl	8005fec <HAL_NVIC_SetPriority>
}
 800b986:	b027      	add	sp, #156	; 0x9c
 800b988:	bd30      	pop	{r4, r5, pc}
 800b98a:	bf00      	nop
 800b98c:	00703180 	.word	0x00703180
 800b990:	10624dd3 	.word	0x10624dd3

0800b994 <resetDevice>:

void resetDevice(void){
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800b994:	4b01      	ldr	r3, [pc, #4]	; (800b99c <resetDevice+0x8>)
 800b996:	4a02      	ldr	r2, [pc, #8]	; (800b9a0 <resetDevice+0xc>)
 800b998:	60da      	str	r2, [r3, #12]
 800b99a:	e7fe      	b.n	800b99a <resetDevice+0x6>
 800b99c:	e000ed00 	.word	0xe000ed00
 800b9a0:	05fa0004 	.word	0x05fa0004

0800b9a4 <commsSend>:
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800b9a4:	f003 b8c0 	b.w	800eb28 <UARTsendChar>

0800b9a8 <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	b082      	sub	sp, #8
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b9ac:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>8);
 800b9ae:	0a06      	lsrs	r6, r0, #8
	buff[2]=(uint8_t)(num>>16);
 800b9b0:	0c05      	lsrs	r5, r0, #16
	buff[3]=(uint8_t)(num>>24);
 800b9b2:	0e04      	lsrs	r4, r0, #24
	buff[0]=(uint8_t)(num);
 800b9b4:	f88d 0004 	strb.w	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b9b8:	f241 3388 	movw	r3, #5000	; 0x1388
 800b9bc:	eb0d 0102 	add.w	r1, sp, r2
 800b9c0:	4805      	ldr	r0, [pc, #20]	; (800b9d8 <commsSendUint32+0x30>)
	buff[1]=(uint8_t)(num>>8);
 800b9c2:	f88d 6005 	strb.w	r6, [sp, #5]
	buff[2]=(uint8_t)(num>>16);
 800b9c6:	f88d 5006 	strb.w	r5, [sp, #6]
	buff[3]=(uint8_t)(num>>24);
 800b9ca:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b9ce:	f7fd f8d7 	bl	8008b80 <HAL_UART_Transmit>
}
 800b9d2:	b002      	add	sp, #8
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
 800b9d6:	bf00      	nop
 800b9d8:	2000d3c4 	.word	0x2000d3c4

0800b9dc <commsSendBuff>:
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800b9dc:	460a      	mov	r2, r1
 800b9de:	f241 3388 	movw	r3, #5000	; 0x1388
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	4801      	ldr	r0, [pc, #4]	; (800b9ec <commsSendBuff+0x10>)
 800b9e6:	f7fd b8cb 	b.w	8008b80 <HAL_UART_Transmit>
 800b9ea:	bf00      	nop
 800b9ec:	2000d3c4 	.word	0x2000d3c4

0800b9f0 <commsSendString>:
	#endif
}
void commsSendString(char *chr){
	uint32_t i = 0;
	char * tmp=chr;
	while(*(tmp++)){i++;}
 800b9f0:	7802      	ldrb	r2, [r0, #0]
void commsSendString(char *chr){
 800b9f2:	4601      	mov	r1, r0
	while(*(tmp++)){i++;}
 800b9f4:	b172      	cbz	r2, 800ba14 <commsSendString+0x24>
void commsSendString(char *chr){
 800b9f6:	b410      	push	{r4}
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	1a5a      	subs	r2, r3, r1
	while(*(tmp++)){i++;}
 800b9fc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	d1fa      	bne.n	800b9fa <commsSendString+0xa>
 800ba04:	b292      	uxth	r2, r2
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800ba06:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba0a:	4805      	ldr	r0, [pc, #20]	; (800ba20 <commsSendString+0x30>)
	#endif

}
 800ba0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800ba10:	f7fd b8b6 	b.w	8008b80 <HAL_UART_Transmit>
 800ba14:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba18:	4801      	ldr	r0, [pc, #4]	; (800ba20 <commsSendString+0x30>)
 800ba1a:	f7fd b8b1 	b.w	8008b80 <HAL_UART_Transmit>
 800ba1e:	bf00      	nop
 800ba20:	2000d3c4 	.word	0x2000d3c4

0800ba24 <commsSendDouble>:

void commsSendDouble(double value){
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	b085      	sub	sp, #20
 800ba28:	ab04      	add	r3, sp, #16
 800ba2a:	ed03 0b04 	vstr	d0, [r3, #-16]
 800ba2e:	466b      	mov	r3, sp
	memcpy(intAlias, &value, sizeof(value));
 800ba30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba34:	4c16      	ldr	r4, [pc, #88]	; (800ba90 <commsSendDouble+0x6c>)
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba36:	4d17      	ldr	r5, [pc, #92]	; (800ba94 <commsSendDouble+0x70>)
	commsSendUint32(intAlias[0]);
 800ba38:	4603      	mov	r3, r0
	buff[2]=(uint8_t)(num>>16);
 800ba3a:	0c02      	lsrs	r2, r0, #16
	memcpy(intAlias, &value, sizeof(value));
 800ba3c:	e884 0003 	stmia.w	r4, {r0, r1}
	buff[1]=(uint8_t)(num>>8);
 800ba40:	0a07      	lsrs	r7, r0, #8
	buff[3]=(uint8_t)(num>>24);
 800ba42:	0e06      	lsrs	r6, r0, #24
	buff[0]=(uint8_t)(num);
 800ba44:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba48:	a903      	add	r1, sp, #12
	buff[2]=(uint8_t)(num>>16);
 800ba4a:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba54:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>8);
 800ba56:	f88d 700d 	strb.w	r7, [sp, #13]
	buff[3]=(uint8_t)(num>>24);
 800ba5a:	f88d 600f 	strb.w	r6, [sp, #15]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba5e:	f7fd f88f 	bl	8008b80 <HAL_UART_Transmit>
	commsSendUint32(intAlias[1]);
 800ba62:	6863      	ldr	r3, [r4, #4]
	buff[0]=(uint8_t)(num);
 800ba64:	2400      	movs	r4, #0
	buff[1]=(uint8_t)(num>>8);
 800ba66:	0a1a      	lsrs	r2, r3, #8
	buff[0]=(uint8_t)(num);
 800ba68:	f363 0407 	bfi	r4, r3, #0, #8
 800ba6c:	f362 240f 	bfi	r4, r2, #8, #8
	buff[2]=(uint8_t)(num>>16);
 800ba70:	0c1a      	lsrs	r2, r3, #16
	buff[0]=(uint8_t)(num);
 800ba72:	f362 4417 	bfi	r4, r2, #16, #8
	buff[3]=(uint8_t)(num>>24);
 800ba76:	0e1b      	lsrs	r3, r3, #24
	buff[0]=(uint8_t)(num);
 800ba78:	f363 641f 	bfi	r4, r3, #24, #8
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba7c:	a903      	add	r1, sp, #12
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba84:	2204      	movs	r2, #4
	buff[0]=(uint8_t)(num);
 800ba86:	9403      	str	r4, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ba88:	f7fd f87a 	bl	8008b80 <HAL_UART_Transmit>
}
 800ba8c:	b005      	add	sp, #20
 800ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba90:	20004834 	.word	0x20004834
 800ba94:	2000d3c4 	.word	0x2000d3c4

0800ba98 <commsRecieveUART>:
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800ba98:	f7f6 bce0 	b.w	800245c <commInputByte>

0800ba9c <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800ba9c:	b510      	push	{r4, lr}

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800ba9e:	4c0d      	ldr	r4, [pc, #52]	; (800bad4 <MX_DAC_Init+0x38>)
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <MX_DAC_Init+0x3c>)
 800baa2:	6023      	str	r3, [r4, #0]
{
 800baa4:	b084      	sub	sp, #16
  HAL_DAC_Init(&hdac);
 800baa6:	4620      	mov	r0, r4
 800baa8:	f7fa fb24 	bl	80060f4 <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800baac:	4b0b      	ldr	r3, [pc, #44]	; (800badc <MX_DAC_Init+0x40>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800bab2:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800bab4:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800bab6:	4620      	mov	r0, r4
 800bab8:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800baba:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800babc:	f7fa fbfe 	bl	80062bc <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800bac0:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800bac2:	a901      	add	r1, sp, #4
 800bac4:	4620      	mov	r0, r4
 800bac6:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800bac8:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800baca:	f7fa fbf7 	bl	80062bc <HAL_DAC_ConfigChannel>

}
 800bace:	b004      	add	sp, #16
 800bad0:	bd10      	pop	{r4, pc}
 800bad2:	bf00      	nop
 800bad4:	2000ce3c 	.word	0x2000ce3c
 800bad8:	40007400 	.word	0x40007400
 800badc:	200047b8 	.word	0x200047b8

0800bae0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800bae0:	4b30      	ldr	r3, [pc, #192]	; (800bba4 <HAL_DAC_MspInit+0xc4>)
 800bae2:	6802      	ldr	r2, [r0, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d000      	beq.n	800baea <HAL_DAC_MspInit+0xa>
 800bae8:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __DAC1_CLK_ENABLE();
 800baea:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
{
 800baee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __DAC1_CLK_ENABLE();
 800baf2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800baf4:	4d2c      	ldr	r5, [pc, #176]	; (800bba8 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch1);
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800baf6:	4f2d      	ldr	r7, [pc, #180]	; (800bbac <HAL_DAC_MspInit+0xcc>)
    __DAC1_CLK_ENABLE();
 800baf8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bafc:	61da      	str	r2, [r3, #28]
 800bafe:	69db      	ldr	r3, [r3, #28]
{
 800bb00:	b08b      	sub	sp, #44	; 0x2c
    __DAC1_CLK_ENABLE();
 800bb02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb06:	4606      	mov	r6, r0
 800bb08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb0a:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800bb0e:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb10:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb12:	a905      	add	r1, sp, #20
 800bb14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800bb1c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    __DAC1_CLK_ENABLE();
 800bb20:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb22:	f8cd 801c 	str.w	r8, [sp, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb26:	f04f 0b10 	mov.w	fp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb2a:	f7fa fde9 	bl	8006700 <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800bb2e:	f04f 0a20 	mov.w	sl, #32
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800bb32:	2180      	movs	r1, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bb34:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bb38:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800bb3c:	4c1c      	ldr	r4, [pc, #112]	; (800bbb0 <HAL_DAC_MspInit+0xd0>)
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800bb3e:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800bb42:	4628      	mov	r0, r5
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800bb44:	602c      	str	r4, [r5, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb46:	f8c5 b004 	str.w	fp, [r5, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800bb4a:	60e9      	str	r1, [r5, #12]
 800bb4c:	9103      	str	r1, [sp, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bb4e:	612a      	str	r2, [r5, #16]
 800bb50:	9202      	str	r2, [sp, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bb52:	616b      	str	r3, [r5, #20]
 800bb54:	9301      	str	r3, [sp, #4]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800bb56:	e9c5 a906 	strd	sl, r9, [r5, #24]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800bb5a:	f7fa fbf3 	bl	8006344 <HAL_DMA_Init>
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800bb5e:	6838      	ldr	r0, [r7, #0]

		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800bb60:	4c14      	ldr	r4, [pc, #80]	; (800bbb4 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bb62:	9b01      	ldr	r3, [sp, #4]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800bb64:	60b5      	str	r5, [r6, #8]
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800bb66:	ea40 0009 	orr.w	r0, r0, r9
 800bb6a:	6038      	str	r0, [r7, #0]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800bb6c:	9903      	ldr	r1, [sp, #12]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800bb6e:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bb70:	9a02      	ldr	r2, [sp, #8]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800bb72:	4d11      	ldr	r5, [pc, #68]	; (800bbb8 <HAL_DAC_MspInit+0xd8>)
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800bb74:	f8c4 8008 	str.w	r8, [r4, #8]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch2);
 800bb78:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800bb7a:	e9c4 3a05 	strd	r3, sl, [r4, #20]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb7e:	f8c4 b004 	str.w	fp, [r4, #4]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800bb82:	60e1      	str	r1, [r4, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bb84:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800bb86:	f8c4 901c 	str.w	r9, [r4, #28]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800bb8a:	6025      	str	r5, [r4, #0]
		HAL_DMA_Init(&hdma_dac1_ch2);
 800bb8c:	f7fa fbda 	bl	8006344 <HAL_DMA_Init>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800bb90:	683b      	ldr	r3, [r7, #0]
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800bb92:	60f4      	str	r4, [r6, #12]
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800bb94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800bb98:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_REMAPDMA_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800bb9a:	603b      	str	r3, [r7, #0]
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 800bb9c:	b00b      	add	sp, #44	; 0x2c
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	bf00      	nop
 800bba4:	40007400 	.word	0x40007400
 800bba8:	2000cdf8 	.word	0x2000cdf8
 800bbac:	40010000 	.word	0x40010000
 800bbb0:	40020030 	.word	0x40020030
 800bbb4:	2000cdb4 	.word	0x2000cdb4
 800bbb8:	40020044 	.word	0x40020044

0800bbbc <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800bbbc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dacChannel=0;
	switch(chan){
 800bbbe:	2801      	cmp	r0, #1
	uint32_t dacChannel=0;
 800bbc0:	bf0c      	ite	eq
 800bbc2:	2410      	moveq	r4, #16
 800bbc4:	2400      	movne	r4, #0
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	460d      	mov	r5, r1
		break;
		case 1:
			dacChannel=DAC_CHANNEL_2;
		break;
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800bbca:	4807      	ldr	r0, [pc, #28]	; (800bbe8 <DAC_DMA_Reconfig+0x2c>)
 800bbcc:	4621      	mov	r1, r4
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800bbce:	4616      	mov	r6, r2
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800bbd0:	f7fa fab6 	bl	8006140 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	9000      	str	r0, [sp, #0]
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4633      	mov	r3, r6
 800bbdc:	462a      	mov	r2, r5
 800bbde:	4802      	ldr	r0, [pc, #8]	; (800bbe8 <DAC_DMA_Reconfig+0x2c>)
 800bbe0:	f7fa faf6 	bl	80061d0 <HAL_DAC_Start_DMA>
}
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	2000ce3c 	.word	0x2000ce3c

0800bbec <DACSetOutputBuffer>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void DACSetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800bbec:	4b01      	ldr	r3, [pc, #4]	; (800bbf4 <DACSetOutputBuffer+0x8>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	601a      	str	r2, [r3, #0]
}
 800bbf2:	4770      	bx	lr
 800bbf4:	200047b8 	.word	0x200047b8

0800bbf8 <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800bbf8:	4b01      	ldr	r3, [pc, #4]	; (800bc00 <DACUnsetOutputBuffer+0x8>)
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	601a      	str	r2, [r3, #0]
}
 800bbfe:	4770      	bx	lr
 800bc00:	200047b8 	.word	0x200047b8

0800bc04 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800bc04:	b510      	push	{r4, lr}
  hdac.Instance = DAC;
 800bc06:	4c13      	ldr	r4, [pc, #76]	; (800bc54 <GeneratingEnable+0x50>)
 800bc08:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <GeneratingEnable+0x54>)
 800bc0a:	6023      	str	r3, [r4, #0]
void GeneratingEnable(void){
 800bc0c:	b086      	sub	sp, #24
  HAL_DAC_Init(&hdac);
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7fa fa70 	bl	80060f4 <HAL_DAC_Init>
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800bc14:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <GeneratingEnable+0x58>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800bc1a:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800bc1c:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800bc1e:	4620      	mov	r0, r4
 800bc20:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800bc22:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800bc24:	f7fa fb4a 	bl	80062bc <HAL_DAC_ConfigChannel>
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800bc28:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800bc2a:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800bc30:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800bc32:	2430      	movs	r4, #48	; 0x30
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800bc34:	f7fa fb42 	bl	80062bc <HAL_DAC_ConfigChannel>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc38:	2203      	movs	r2, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc3a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc3c:	a901      	add	r1, sp, #4
 800bc3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc42:	e9cd 4201 	strd	r4, r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc46:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc48:	f7fa fd5a 	bl	8006700 <HAL_GPIO_Init>
	MX_DAC_Init();
	DACEnableOutput();
	TIMGenEnable();
 800bc4c:	f001 ff90 	bl	800db70 <TIMGenEnable>
}
 800bc50:	b006      	add	sp, #24
 800bc52:	bd10      	pop	{r4, pc}
 800bc54:	2000ce3c 	.word	0x2000ce3c
 800bc58:	40007400 	.word	0x40007400
 800bc5c:	200047b8 	.word	0x200047b8

0800bc60 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800bc60:	b510      	push	{r4, lr}
	TIMGenDisable();
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800bc62:	4c0c      	ldr	r4, [pc, #48]	; (800bc94 <GeneratingDisable+0x34>)
void GeneratingDisable(void){
 800bc64:	b086      	sub	sp, #24
	TIMGenDisable();
 800bc66:	f001 ff91 	bl	800db8c <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	f7fa fa57 	bl	8006120 <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800bc72:	4620      	mov	r0, r4
 800bc74:	2110      	movs	r1, #16
 800bc76:	f7fa fa53 	bl	8006120 <HAL_DAC_Stop>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc7a:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800bc7c:	2230      	movs	r2, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc7e:	a901      	add	r1, sp, #4
 800bc80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc84:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc88:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc8a:	f7fa fd39 	bl	8006700 <HAL_GPIO_Init>
	DACDisableOutput();	
}
 800bc8e:	b006      	add	sp, #24
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	2000ce3c 	.word	0x2000ce3c

0800bc98 <MX_DMA_Init>:
#include "dma.h"

void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();
 800bc98:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <MX_DMA_Init+0x2c>)
 800bc9a:	695a      	ldr	r2, [r3, #20]
 800bc9c:	f042 0202 	orr.w	r2, r2, #2
 800bca0:	615a      	str	r2, [r3, #20]
 800bca2:	695a      	ldr	r2, [r3, #20]
{
 800bca4:	b082      	sub	sp, #8
  __DMA2_CLK_ENABLE();
 800bca6:	f002 0202 	and.w	r2, r2, #2
 800bcaa:	9200      	str	r2, [sp, #0]
 800bcac:	9a00      	ldr	r2, [sp, #0]
	__DMA1_CLK_ENABLE();
 800bcae:	695a      	ldr	r2, [r3, #20]
 800bcb0:	f042 0201 	orr.w	r2, r2, #1
 800bcb4:	615a      	str	r2, [r3, #20]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
}
 800bcc0:	b002      	add	sp, #8
 800bcc2:	4770      	bx	lr
 800bcc4:	40021000 	.word	0x40021000

0800bcc8 <MX_GPIO_Init>:
//	BSP_LED_Init(LED2);

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800bcc8:	4b2b      	ldr	r3, [pc, #172]	; (800bd78 <MX_GPIO_Init+0xb0>)
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bcca:	492c      	ldr	r1, [pc, #176]	; (800bd7c <MX_GPIO_Init+0xb4>)
  __GPIOC_CLK_ENABLE();
 800bccc:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bcce:	482c      	ldr	r0, [pc, #176]	; (800bd80 <MX_GPIO_Init+0xb8>)
{
 800bcd0:	b510      	push	{r4, lr}
  __GPIOC_CLK_ENABLE();
 800bcd2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bcd6:	615a      	str	r2, [r3, #20]
 800bcd8:	695a      	ldr	r2, [r3, #20]
{
 800bcda:	b08a      	sub	sp, #40	; 0x28
  __GPIOC_CLK_ENABLE();
 800bcdc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	9a01      	ldr	r2, [sp, #4]
  __GPIOF_CLK_ENABLE();
 800bce4:	695a      	ldr	r2, [r3, #20]
 800bce6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800bcea:	615a      	str	r2, [r3, #20]
 800bcec:	695a      	ldr	r2, [r3, #20]
 800bcee:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800bcf2:	9202      	str	r2, [sp, #8]
 800bcf4:	9a02      	ldr	r2, [sp, #8]
  __GPIOA_CLK_ENABLE();
 800bcf6:	695a      	ldr	r2, [r3, #20]
 800bcf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bcfc:	615a      	str	r2, [r3, #20]
 800bcfe:	695a      	ldr	r2, [r3, #20]
 800bd00:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800bd04:	9203      	str	r2, [sp, #12]
 800bd06:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bd08:	695a      	ldr	r2, [r3, #20]
 800bd0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800bd0e:	615a      	str	r2, [r3, #20]
 800bd10:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bd12:	9106      	str	r1, [sp, #24]
  __GPIOB_CLK_ENABLE();
 800bd14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd18:	2400      	movs	r4, #0
  __GPIOB_CLK_ENABLE();
 800bd1a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bd1c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 800bd1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __GPIOB_CLK_ENABLE();
 800bd22:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800bd24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd26:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bd28:	f7fa fcea 	bl	8006700 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800bd2c:	200c      	movs	r0, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bd2e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd30:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bd32:	2307      	movs	r3, #7
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800bd34:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bd36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd3a:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bd3c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bd3e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800bd42:	f7fa fcdd 	bl	8006700 <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800bd46:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = D7_PIN;
 800bd48:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd4c:	2301      	movs	r3, #1
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800bd4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = D7_PIN;
 800bd52:	e9cd 2405 	strd	r2, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd56:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800bd58:	f7fa fcd2 	bl	8006700 <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  
	GPIO_InitStruct.Pin = D8_PIN;
 800bd5c:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bd60:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800bd62:	a905      	add	r1, sp, #20
 800bd64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd68:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bd6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800bd6e:	f7fa fcc7 	bl	8006700 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
	
}
 800bd72:	b00a      	add	sp, #40	; 0x28
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	10120000 	.word	0x10120000
 800bd80:	48000800 	.word	0x48000800

0800bd84 <LED_On>:

void LED_On(void){
//	BSP_LED_On(LED2);
}
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <LED_Off>:
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop

0800bd8c <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800bd8c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//xQueueSendToBack(messageQueue, MSG_COMMS_FLUSH, portMAX_DELAY);
		osDelay(10);
 800bd8e:	200a      	movs	r0, #10
 800bd90:	f7fd f974 	bl	800907c <osDelay>
 800bd94:	e7fb      	b.n	800bd8e <StartThread+0x2>
 800bd96:	bf00      	nop

0800bd98 <main>:
{
 800bd98:	b580      	push	{r7, lr}
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bd9a:	4c4b      	ldr	r4, [pc, #300]	; (800bec8 <main+0x130>)
{
 800bd9c:	b0ae      	sub	sp, #184	; 0xb8
	HAL_Init();
 800bd9e:	f7f9 fa11 	bl	80051c4 <HAL_Init>
	SystemClock_Config();
 800bda2:	f7ff fdad 	bl	800b900 <SystemClock_Config>
	MX_GPIO_Init();
 800bda6:	f7ff ff8f 	bl	800bcc8 <MX_GPIO_Init>
	MX_DMA_Init();
 800bdaa:	f7ff ff75 	bl	800bc98 <MX_DMA_Init>
	LED_On();
 800bdae:	f7ff ffe9 	bl	800bd84 <LED_On>
	MX_ADC1_Init();
 800bdb2:	f7fe ff1d 	bl	800abf0 <MX_ADC1_Init>
	MX_ADC2_Init();
 800bdb6:	f7fe ff59 	bl	800ac6c <MX_ADC2_Init>
	MX_ADC3_Init();
 800bdba:	f7fe ff97 	bl	800acec <MX_ADC3_Init>
	MX_ADC4_Init();
 800bdbe:	f7fe ffd5 	bl	800ad6c <MX_ADC4_Init>
	MX_TIM15_Init();
 800bdc2:	f002 fb07 	bl	800e3d4 <MX_TIM15_Init>
	CalibrateADC();
 800bdc6:	f7ff fd7f 	bl	800b8c8 <CalibrateADC>
	adcSetDefaultInputs();
 800bdca:	f7ff fc47 	bl	800b65c <adcSetDefaultInputs>
	MX_DAC_Init();
 800bdce:	f7ff fe65 	bl	800ba9c <MX_DAC_Init>
	MX_TIM6_Init();
 800bdd2:	f001 fd37 	bl	800d844 <MX_TIM6_Init>
	MX_TIM7_Init();
 800bdd6:	f001 fd51 	bl	800d87c <MX_TIM7_Init>
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bdda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bddc:	4625      	mov	r5, r4
 800bdde:	f10d 0c04 	add.w	ip, sp, #4
 800bde2:	f855 8b04 	ldr.w	r8, [r5], #4
 800bde6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bdea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bdec:	f104 0e18 	add.w	lr, r4, #24
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800bdf0:	af06      	add	r7, sp, #24
 800bdf2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bdf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdf8:	ae0b      	add	r6, sp, #44	; 0x2c
 800bdfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800bdfc:	f104 092c 	add.w	r9, r4, #44	; 0x2c
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800be00:	682a      	ldr	r2, [r5, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be02:	f8de 3000 	ldr.w	r3, [lr]
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be06:	f8cc 8000 	str.w	r8, [ip]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800be0a:	603a      	str	r2, [r7, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be0c:	6033      	str	r3, [r6, #0]
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be0e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be12:	f104 0640 	add.w	r6, r4, #64	; 0x40
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be16:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800be1a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be20:	f104 0554 	add.w	r5, r4, #84	; 0x54
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be24:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800be28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be2e:	af1a      	add	r7, sp, #104	; 0x68
 800be30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be32:	f104 0e68 	add.w	lr, r4, #104	; 0x68
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be36:	f8d9 3000 	ldr.w	r3, [r9]
 800be3a:	f8c8 3000 	str.w	r3, [r8]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be42:	6836      	ldr	r6, [r6, #0]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be44:	682d      	ldr	r5, [r5, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be46:	f8cc 6000 	str.w	r6, [ip]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be4a:	603d      	str	r5, [r7, #0]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be4c:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be50:	af1f      	add	r7, sp, #124	; 0x7c
 800be52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be58:	3490      	adds	r4, #144	; 0x90
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be5a:	ae24      	add	r6, sp, #144	; 0x90
 800be5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be60:	ad29      	add	r5, sp, #164	; 0xa4
 800be62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be64:	f8de 1000 	ldr.w	r1, [lr]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be68:	f8dc 2000 	ldr.w	r2, [ip]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be6c:	6823      	ldr	r3, [r4, #0]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be6e:	6039      	str	r1, [r7, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800be70:	a801      	add	r0, sp, #4
 800be72:	2100      	movs	r1, #0
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be74:	6032      	str	r2, [r6, #0]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800be76:	602b      	str	r3, [r5, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800be78:	f7fd f8e8 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800be7c:	2100      	movs	r1, #0
 800be7e:	a806      	add	r0, sp, #24
 800be80:	f7fd f8e4 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800be84:	2100      	movs	r1, #0
 800be86:	a80b      	add	r0, sp, #44	; 0x2c
 800be88:	f7fd f8e0 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800be8c:	2100      	movs	r1, #0
 800be8e:	a810      	add	r0, sp, #64	; 0x40
 800be90:	f7fd f8dc 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800be94:	2100      	movs	r1, #0
 800be96:	a815      	add	r0, sp, #84	; 0x54
 800be98:	f7fd f8d8 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 800be9c:	2100      	movs	r1, #0
 800be9e:	a81a      	add	r0, sp, #104	; 0x68
 800bea0:	f7fd f8d4 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800bea4:	2100      	movs	r1, #0
 800bea6:	a81f      	add	r0, sp, #124	; 0x7c
 800bea8:	f7fd f8d0 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 800beac:	2100      	movs	r1, #0
 800beae:	a824      	add	r0, sp, #144	; 0x90
 800beb0:	f7fd f8cc 	bl	800904c <osThreadCreate>
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 800beb4:	2100      	movs	r1, #0
 800beb6:	a829      	add	r0, sp, #164	; 0xa4
 800beb8:	f7fd f8c8 	bl	800904c <osThreadCreate>
	LED_Off();
 800bebc:	f7ff ff64 	bl	800bd88 <LED_Off>
	osKernelStart();
 800bec0:	f7fd f8be 	bl	8009040 <osKernelStart>
 800bec4:	e7fe      	b.n	800bec4 <main+0x12c>
 800bec6:	bf00      	nop
 800bec8:	080118b4 	.word	0x080118b4

0800becc <HAL_MspInit>:
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */
  __SYSCFG_CLK_ENABLE();
 800becc:	4b0b      	ldr	r3, [pc, #44]	; (800befc <HAL_MspInit+0x30>)
{
 800bece:	b500      	push	{lr}
  __SYSCFG_CLK_ENABLE();
 800bed0:	699a      	ldr	r2, [r3, #24]
 800bed2:	f042 0201 	orr.w	r2, r2, #1
 800bed6:	619a      	str	r2, [r3, #24]
 800bed8:	699b      	ldr	r3, [r3, #24]
{
 800beda:	b083      	sub	sp, #12
  __SYSCFG_CLK_ENABLE();
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	9301      	str	r3, [sp, #4]
  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bee2:	2003      	movs	r0, #3
  __SYSCFG_CLK_ENABLE();
 800bee4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bee6:	f7fa f86f 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800beea:	2200      	movs	r2, #0
 800beec:	4611      	mov	r1, r2
 800beee:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bef2:	b003      	add	sp, #12
 800bef4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bef8:	f7fa b878 	b.w	8005fec <HAL_NVIC_SetPriority>
 800befc:	40021000 	.word	0x40021000

0800bf00 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800bf00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <USART2_IRQHandler+0x18>)
 800bf04:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	commsRecieveUART(c);
 800bf06:	b2c0      	uxtb	r0, r0
 800bf08:	f7ff fdc6 	bl	800ba98 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800bf0c:	2026      	movs	r0, #38	; 0x26
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bf0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800bf12:	f7fa b8d5 	b.w	80060c0 <HAL_NVIC_ClearPendingIRQ>
 800bf16:	bf00      	nop
 800bf18:	40004400 	.word	0x40004400

0800bf1c <DMA1_Channel6_IRQHandler>:

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop

0800bf20 <DMA1_Channel2_IRQHandler>:
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <DMA1_Channel2_IRQHandler+0x8>)
 800bf22:	f7fa bb47 	b.w	80065b4 <HAL_DMA_IRQHandler>
 800bf26:	bf00      	nop
 800bf28:	2000ced4 	.word	0x2000ced4

0800bf2c <DMA1_Channel7_IRQHandler>:
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800bf2c:	4801      	ldr	r0, [pc, #4]	; (800bf34 <DMA1_Channel7_IRQHandler+0x8>)
 800bf2e:	f7fa bb41 	b.w	80065b4 <HAL_DMA_IRQHandler>
 800bf32:	bf00      	nop
 800bf34:	2000d168 	.word	0x2000d168

0800bf38 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 800bf38:	b570      	push	{r4, r5, r6, lr}
	TIM_PostTrigger_SoftwareStart();
 800bf3a:	f002 f9db 	bl	800e2f4 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800bf3e:	4b45      	ldr	r3, [pc, #276]	; (800c054 <EXTI15_10_IRQHandler+0x11c>)
 800bf40:	4d45      	ldr	r5, [pc, #276]	; (800c058 <EXTI15_10_IRQHandler+0x120>)
 800bf42:	681a      	ldr	r2, [r3, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800bf44:	4b45      	ldr	r3, [pc, #276]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800bf46:	6852      	ldr	r2, [r2, #4]
 800bf48:	602a      	str	r2, [r5, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800bf4a:	695c      	ldr	r4, [r3, #20]
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
	uint8_t isRightPin = 0;
	
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800bf4c:	0660      	lsls	r0, r4, #25
 800bf4e:	d504      	bpl.n	800bf5a <EXTI15_10_IRQHandler+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800bf50:	2240      	movs	r2, #64	; 0x40
 800bf52:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 800bf54:	7d6b      	ldrb	r3, [r5, #21]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d051      	beq.n	800bffe <EXTI15_10_IRQHandler+0xc6>
	uint8_t isRightPin = 0;
 800bf5a:	2300      	movs	r3, #0
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 800bf5c:	0621      	lsls	r1, r4, #24
 800bf5e:	d506      	bpl.n	800bf6e <EXTI15_10_IRQHandler+0x36>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800bf60:	4a3e      	ldr	r2, [pc, #248]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bf62:	2180      	movs	r1, #128	; 0x80
 800bf64:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 800bf66:	7d6e      	ldrb	r6, [r5, #21]
 800bf68:	b2f6      	uxtb	r6, r6
 800bf6a:	2e01      	cmp	r6, #1
 800bf6c:	d067      	beq.n	800c03e <EXTI15_10_IRQHandler+0x106>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 800bf6e:	05e2      	lsls	r2, r4, #23
 800bf70:	d506      	bpl.n	800bf80 <EXTI15_10_IRQHandler+0x48>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800bf72:	4a3a      	ldr	r2, [pc, #232]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bf74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf78:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 800bf7a:	7d6a      	ldrb	r2, [r5, #21]
 800bf7c:	2a02      	cmp	r2, #2
 800bf7e:	d063      	beq.n	800c048 <EXTI15_10_IRQHandler+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 800bf80:	05a6      	lsls	r6, r4, #22
 800bf82:	d506      	bpl.n	800bf92 <EXTI15_10_IRQHandler+0x5a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 800bf84:	4a35      	ldr	r2, [pc, #212]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bf86:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf8a:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 800bf8c:	7d6a      	ldrb	r2, [r5, #21]
 800bf8e:	2a03      	cmp	r2, #3
 800bf90:	d03a      	beq.n	800c008 <EXTI15_10_IRQHandler+0xd0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 800bf92:	0560      	lsls	r0, r4, #21
 800bf94:	d506      	bpl.n	800bfa4 <EXTI15_10_IRQHandler+0x6c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800bf96:	4a31      	ldr	r2, [pc, #196]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bf98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bf9c:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 800bf9e:	7d6a      	ldrb	r2, [r5, #21]
 800bfa0:	2a04      	cmp	r2, #4
 800bfa2:	d036      	beq.n	800c012 <EXTI15_10_IRQHandler+0xda>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 800bfa4:	0521      	lsls	r1, r4, #20
 800bfa6:	d506      	bpl.n	800bfb6 <EXTI15_10_IRQHandler+0x7e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 800bfa8:	4a2c      	ldr	r2, [pc, #176]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bfaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bfae:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 800bfb0:	7d6a      	ldrb	r2, [r5, #21]
 800bfb2:	2a05      	cmp	r2, #5
 800bfb4:	d032      	beq.n	800c01c <EXTI15_10_IRQHandler+0xe4>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 800bfb6:	04e2      	lsls	r2, r4, #19
 800bfb8:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800bfbc:	d506      	bpl.n	800bfcc <EXTI15_10_IRQHandler+0x94>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800bfbe:	4c27      	ldr	r4, [pc, #156]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bfc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfc4:	6162      	str	r2, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 800bfc6:	7d6a      	ldrb	r2, [r5, #21]
 800bfc8:	2a06      	cmp	r2, #6
 800bfca:	d02c      	beq.n	800c026 <EXTI15_10_IRQHandler+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800bfcc:	b956      	cbnz	r6, 800bfe4 <EXTI15_10_IRQHandler+0xac>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	
	if(isRightPin == 1){		
 800bfce:	b99b      	cbnz	r3, 800bff8 <EXTI15_10_IRQHandler+0xc0>
//		TIM_PostTrigger_SoftwareStart();
	}
	else{
		//stop TIM4 and reset		
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800bfd0:	4a23      	ldr	r2, [pc, #140]	; (800c060 <EXTI15_10_IRQHandler+0x128>)
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800bfd2:	4924      	ldr	r1, [pc, #144]	; (800c064 <EXTI15_10_IRQHandler+0x12c>)
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800bfdc:	680b      	ldr	r3, [r1, #0]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800bfe4:	4a1d      	ldr	r2, [pc, #116]	; (800c05c <EXTI15_10_IRQHandler+0x124>)
 800bfe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bfea:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800bfec:	7d6a      	ldrb	r2, [r5, #21]
 800bfee:	2a07      	cmp	r2, #7
 800bff0:	d1ed      	bne.n	800bfce <EXTI15_10_IRQHandler+0x96>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800bff2:	2028      	movs	r0, #40	; 0x28
 800bff4:	f7fa f83c 	bl	8006070 <HAL_NVIC_DisableIRQ>
		logAnlys.trigOccur = TRIG_OCCURRED;
 800bff8:	2300      	movs	r3, #0
 800bffa:	75eb      	strb	r3, [r5, #23]
}
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800bffe:	2017      	movs	r0, #23
 800c000:	f7fa f836 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c004:	2301      	movs	r3, #1
 800c006:	e7a9      	b.n	800bf5c <EXTI15_10_IRQHandler+0x24>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800c008:	2017      	movs	r0, #23
 800c00a:	f7fa f831 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c00e:	2301      	movs	r3, #1
 800c010:	e7bf      	b.n	800bf92 <EXTI15_10_IRQHandler+0x5a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800c012:	2028      	movs	r0, #40	; 0x28
 800c014:	f7fa f82c 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c018:	2301      	movs	r3, #1
 800c01a:	e7c3      	b.n	800bfa4 <EXTI15_10_IRQHandler+0x6c>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800c01c:	2028      	movs	r0, #40	; 0x28
 800c01e:	f7fa f827 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c022:	2301      	movs	r3, #1
 800c024:	e7c7      	b.n	800bfb6 <EXTI15_10_IRQHandler+0x7e>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800c026:	2028      	movs	r0, #40	; 0x28
 800c028:	f7fa f822 	bl	8006070 <HAL_NVIC_DisableIRQ>
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800c02c:	2e00      	cmp	r6, #0
 800c02e:	d0e3      	beq.n	800bff8 <EXTI15_10_IRQHandler+0xc0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800c030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c034:	6163      	str	r3, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800c036:	7d6b      	ldrb	r3, [r5, #21]
 800c038:	2b07      	cmp	r3, #7
 800c03a:	d1dd      	bne.n	800bff8 <EXTI15_10_IRQHandler+0xc0>
 800c03c:	e7d9      	b.n	800bff2 <EXTI15_10_IRQHandler+0xba>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800c03e:	2017      	movs	r0, #23
 800c040:	f7fa f816 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c044:	4633      	mov	r3, r6
 800c046:	e792      	b.n	800bf6e <EXTI15_10_IRQHandler+0x36>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800c048:	2017      	movs	r0, #23
 800c04a:	f7fa f811 	bl	8006070 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	e796      	b.n	800bf80 <EXTI15_10_IRQHandler+0x48>
 800c052:	bf00      	nop
 800c054:	2000d124 	.word	0x2000d124
 800c058:	20005438 	.word	0x20005438
 800c05c:	40010400 	.word	0x40010400
 800c060:	40000800 	.word	0x40000800
 800c064:	2000ce94 	.word	0x2000ce94

0800c068 <EXTI9_5_IRQHandler>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	f002 f943 	bl	800e2f4 <TIM_PostTrigger_SoftwareStart>
 800c06e:	4b45      	ldr	r3, [pc, #276]	; (800c184 <EXTI9_5_IRQHandler+0x11c>)
 800c070:	4d45      	ldr	r5, [pc, #276]	; (800c188 <EXTI9_5_IRQHandler+0x120>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4b45      	ldr	r3, [pc, #276]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c076:	6852      	ldr	r2, [r2, #4]
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	695c      	ldr	r4, [r3, #20]
 800c07c:	0660      	lsls	r0, r4, #25
 800c07e:	d504      	bpl.n	800c08a <EXTI9_5_IRQHandler+0x22>
 800c080:	2240      	movs	r2, #64	; 0x40
 800c082:	615a      	str	r2, [r3, #20]
 800c084:	7d6b      	ldrb	r3, [r5, #21]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d051      	beq.n	800c12e <EXTI9_5_IRQHandler+0xc6>
 800c08a:	2300      	movs	r3, #0
 800c08c:	0621      	lsls	r1, r4, #24
 800c08e:	d506      	bpl.n	800c09e <EXTI9_5_IRQHandler+0x36>
 800c090:	4a3e      	ldr	r2, [pc, #248]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c092:	2180      	movs	r1, #128	; 0x80
 800c094:	6151      	str	r1, [r2, #20]
 800c096:	7d6e      	ldrb	r6, [r5, #21]
 800c098:	b2f6      	uxtb	r6, r6
 800c09a:	2e01      	cmp	r6, #1
 800c09c:	d067      	beq.n	800c16e <EXTI9_5_IRQHandler+0x106>
 800c09e:	05e2      	lsls	r2, r4, #23
 800c0a0:	d506      	bpl.n	800c0b0 <EXTI9_5_IRQHandler+0x48>
 800c0a2:	4a3a      	ldr	r2, [pc, #232]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c0a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0a8:	6151      	str	r1, [r2, #20]
 800c0aa:	7d6a      	ldrb	r2, [r5, #21]
 800c0ac:	2a02      	cmp	r2, #2
 800c0ae:	d063      	beq.n	800c178 <EXTI9_5_IRQHandler+0x110>
 800c0b0:	05a6      	lsls	r6, r4, #22
 800c0b2:	d506      	bpl.n	800c0c2 <EXTI9_5_IRQHandler+0x5a>
 800c0b4:	4a35      	ldr	r2, [pc, #212]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c0b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0ba:	6151      	str	r1, [r2, #20]
 800c0bc:	7d6a      	ldrb	r2, [r5, #21]
 800c0be:	2a03      	cmp	r2, #3
 800c0c0:	d03a      	beq.n	800c138 <EXTI9_5_IRQHandler+0xd0>
 800c0c2:	0560      	lsls	r0, r4, #21
 800c0c4:	d506      	bpl.n	800c0d4 <EXTI9_5_IRQHandler+0x6c>
 800c0c6:	4a31      	ldr	r2, [pc, #196]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c0c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0cc:	6151      	str	r1, [r2, #20]
 800c0ce:	7d6a      	ldrb	r2, [r5, #21]
 800c0d0:	2a04      	cmp	r2, #4
 800c0d2:	d036      	beq.n	800c142 <EXTI9_5_IRQHandler+0xda>
 800c0d4:	0521      	lsls	r1, r4, #20
 800c0d6:	d506      	bpl.n	800c0e6 <EXTI9_5_IRQHandler+0x7e>
 800c0d8:	4a2c      	ldr	r2, [pc, #176]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c0da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c0de:	6151      	str	r1, [r2, #20]
 800c0e0:	7d6a      	ldrb	r2, [r5, #21]
 800c0e2:	2a05      	cmp	r2, #5
 800c0e4:	d032      	beq.n	800c14c <EXTI9_5_IRQHandler+0xe4>
 800c0e6:	04e2      	lsls	r2, r4, #19
 800c0e8:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800c0ec:	d506      	bpl.n	800c0fc <EXTI9_5_IRQHandler+0x94>
 800c0ee:	4c27      	ldr	r4, [pc, #156]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c0f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0f4:	6162      	str	r2, [r4, #20]
 800c0f6:	7d6a      	ldrb	r2, [r5, #21]
 800c0f8:	2a06      	cmp	r2, #6
 800c0fa:	d02c      	beq.n	800c156 <EXTI9_5_IRQHandler+0xee>
 800c0fc:	b956      	cbnz	r6, 800c114 <EXTI9_5_IRQHandler+0xac>
 800c0fe:	b99b      	cbnz	r3, 800c128 <EXTI9_5_IRQHandler+0xc0>
 800c100:	4a23      	ldr	r2, [pc, #140]	; (800c190 <EXTI9_5_IRQHandler+0x128>)
 800c102:	4924      	ldr	r1, [pc, #144]	; (800c194 <EXTI9_5_IRQHandler+0x12c>)
 800c104:	6813      	ldr	r3, [r2, #0]
 800c106:	f023 0301 	bic.w	r3, r3, #1
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	680b      	ldr	r3, [r1, #0]
 800c10e:	2200      	movs	r2, #0
 800c110:	625a      	str	r2, [r3, #36]	; 0x24
 800c112:	bd70      	pop	{r4, r5, r6, pc}
 800c114:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <EXTI9_5_IRQHandler+0x124>)
 800c116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c11a:	6151      	str	r1, [r2, #20]
 800c11c:	7d6a      	ldrb	r2, [r5, #21]
 800c11e:	2a07      	cmp	r2, #7
 800c120:	d1ed      	bne.n	800c0fe <EXTI9_5_IRQHandler+0x96>
 800c122:	2028      	movs	r0, #40	; 0x28
 800c124:	f7f9 ffa4 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c128:	2300      	movs	r3, #0
 800c12a:	75eb      	strb	r3, [r5, #23]
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
 800c12e:	2017      	movs	r0, #23
 800c130:	f7f9 ff9e 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c134:	2301      	movs	r3, #1
 800c136:	e7a9      	b.n	800c08c <EXTI9_5_IRQHandler+0x24>
 800c138:	2017      	movs	r0, #23
 800c13a:	f7f9 ff99 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c13e:	2301      	movs	r3, #1
 800c140:	e7bf      	b.n	800c0c2 <EXTI9_5_IRQHandler+0x5a>
 800c142:	2028      	movs	r0, #40	; 0x28
 800c144:	f7f9 ff94 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c148:	2301      	movs	r3, #1
 800c14a:	e7c3      	b.n	800c0d4 <EXTI9_5_IRQHandler+0x6c>
 800c14c:	2028      	movs	r0, #40	; 0x28
 800c14e:	f7f9 ff8f 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c152:	2301      	movs	r3, #1
 800c154:	e7c7      	b.n	800c0e6 <EXTI9_5_IRQHandler+0x7e>
 800c156:	2028      	movs	r0, #40	; 0x28
 800c158:	f7f9 ff8a 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	d0e3      	beq.n	800c128 <EXTI9_5_IRQHandler+0xc0>
 800c160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c164:	6163      	str	r3, [r4, #20]
 800c166:	7d6b      	ldrb	r3, [r5, #21]
 800c168:	2b07      	cmp	r3, #7
 800c16a:	d1dd      	bne.n	800c128 <EXTI9_5_IRQHandler+0xc0>
 800c16c:	e7d9      	b.n	800c122 <EXTI9_5_IRQHandler+0xba>
 800c16e:	2017      	movs	r0, #23
 800c170:	f7f9 ff7e 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c174:	4633      	mov	r3, r6
 800c176:	e792      	b.n	800c09e <EXTI9_5_IRQHandler+0x36>
 800c178:	2017      	movs	r0, #23
 800c17a:	f7f9 ff79 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c17e:	2301      	movs	r3, #1
 800c180:	e796      	b.n	800c0b0 <EXTI9_5_IRQHandler+0x48>
 800c182:	bf00      	nop
 800c184:	2000d124 	.word	0x2000d124
 800c188:	20005438 	.word	0x20005438
 800c18c:	40010400 	.word	0x40010400
 800c190:	40000800 	.word	0x40000800
 800c194:	2000ce94 	.word	0x2000ce94

0800c198 <TIM4_IRQHandler>:
*/
void TIM4_IRQHandler(void)
{
//  HAL_TIM_IRQHandler(&htim4);
	
	if(logAnlys.enable == LOGA_ENABLED){
 800c198:	4b04      	ldr	r3, [pc, #16]	; (800c1ac <TIM4_IRQHandler+0x14>)
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800c19a:	4805      	ldr	r0, [pc, #20]	; (800c1b0 <TIM4_IRQHandler+0x18>)
	if(logAnlys.enable == LOGA_ENABLED){
 800c19c:	7cdb      	ldrb	r3, [r3, #19]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d001      	beq.n	800c1a6 <TIM4_IRQHandler+0xe>
	}else{
		COUNTER_PeriodElapsedCallback(&htim4);
 800c1a2:	f000 bc23 	b.w	800c9ec <COUNTER_PeriodElapsedCallback>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800c1a6:	f001 bf57 	b.w	800e058 <LOG_ANLYS_PeriodElapsedCallback>
 800c1aa:	bf00      	nop
 800c1ac:	20005438 	.word	0x20005438
 800c1b0:	2000ce94 	.word	0x2000ce94

0800c1b4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	; (800c1e8 <_sbrk+0x34>)
{
 800c1b6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800c1b8:	6813      	ldr	r3, [r2, #0]
 800c1ba:	b133      	cbz	r3, 800c1ca <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800c1bc:	4418      	add	r0, r3
 800c1be:	4669      	mov	r1, sp
 800c1c0:	4288      	cmp	r0, r1
 800c1c2:	d808      	bhi.n	800c1d6 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800c1c4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800c1ca:	4b08      	ldr	r3, [pc, #32]	; (800c1ec <_sbrk+0x38>)
 800c1cc:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800c1ce:	4418      	add	r0, r3
 800c1d0:	4669      	mov	r1, sp
 800c1d2:	4288      	cmp	r0, r1
 800c1d4:	d9f6      	bls.n	800c1c4 <_sbrk+0x10>
		errno = ENOMEM;
 800c1d6:	f002 fcdb 	bl	800eb90 <__errno>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800c1de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	bd08      	pop	{r3, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200047bc 	.word	0x200047bc
 800c1ec:	2000d438 	.word	0x2000d438

0800c1f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c1f0:	4917      	ldr	r1, [pc, #92]	; (800c250 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800c1f2:	4b18      	ldr	r3, [pc, #96]	; (800c254 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800c1f4:	4a18      	ldr	r2, [pc, #96]	; (800c258 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800c1f6:	4819      	ldr	r0, [pc, #100]	; (800c25c <SystemInit+0x6c>)
{
 800c1f8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c1fa:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800c1fe:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800c202:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 800c206:	681c      	ldr	r4, [r3, #0]
 800c208:	f044 0401 	orr.w	r4, r4, #1
 800c20c:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800c20e:	685c      	ldr	r4, [r3, #4]
 800c210:	4022      	ands	r2, r4
 800c212:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c21a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c21e:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c226:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800c22e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800c230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c232:	f022 020f 	bic.w	r2, r2, #15
 800c236:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 800c238:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800c23a:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 800c23c:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c23e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 800c242:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 800c244:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c246:	608a      	str	r2, [r1, #8]
#endif
}
 800c248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	e000ed00 	.word	0xe000ed00
 800c254:	40021000 	.word	0x40021000
 800c258:	f87fc00c 	.word	0xf87fc00c
 800c25c:	ff00fccc 	.word	0xff00fccc

0800c260 <HAL_TIM_Base_MspInit>:
 * @brief  This function configures GPIOs and DMAs used by the functionalities.
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800c260:	b538      	push	{r3, r4, r5, lr}

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800c262:	4a47      	ldr	r2, [pc, #284]	; (800c380 <HAL_TIM_Base_MspInit+0x120>)
 800c264:	6803      	ldr	r3, [r0, #0]
 800c266:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800c268:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800c26a:	d07a      	beq.n	800c362 <HAL_TIM_Base_MspInit+0x102>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (generator.modeState == GENERATOR_DAC) {
 800c26c:	4d45      	ldr	r5, [pc, #276]	; (800c384 <HAL_TIM_Base_MspInit+0x124>)
 800c26e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800c272:	2a01      	cmp	r2, #1
 800c274:	d044      	beq.n	800c300 <HAL_TIM_Base_MspInit+0xa0>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 800c276:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800c27a:	b95a      	cbnz	r2, 800c294 <HAL_TIM_Base_MspInit+0x34>
		if (htim_base->Instance == TIM1) {
 800c27c:	4a42      	ldr	r2, [pc, #264]	; (800c388 <HAL_TIM_Base_MspInit+0x128>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d052      	beq.n	800c328 <HAL_TIM_Base_MspInit+0xc8>
			TIM1_GEN_PWM_MspInit(htim_base);
		}
		if (htim_base->Instance == TIM3) {
 800c282:	4a42      	ldr	r2, [pc, #264]	; (800c38c <HAL_TIM_Base_MspInit+0x12c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d054      	beq.n	800c332 <HAL_TIM_Base_MspInit+0xd2>
			TIM3_GEN_PWM_MspInit(htim_base);
		}
		if (htim_base->Instance == TIM6) {
 800c288:	4a41      	ldr	r2, [pc, #260]	; (800c390 <HAL_TIM_Base_MspInit+0x130>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d056      	beq.n	800c33c <HAL_TIM_Base_MspInit+0xdc>
			TIM6_GEN_PWM_MspInit(htim_base);
		}
		if (htim_base->Instance == TIM7) {
 800c28e:	4a41      	ldr	r2, [pc, #260]	; (800c394 <HAL_TIM_Base_MspInit+0x134>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d058      	beq.n	800c346 <HAL_TIM_Base_MspInit+0xe6>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800c294:	4a40      	ldr	r2, [pc, #256]	; (800c398 <HAL_TIM_Base_MspInit+0x138>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d067      	beq.n	800c36a <HAL_TIM_Base_MspInit+0x10a>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800c29a:	4a3b      	ldr	r2, [pc, #236]	; (800c388 <HAL_TIM_Base_MspInit+0x128>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d03a      	beq.n	800c316 <HAL_TIM_Base_MspInit+0xb6>
		if (logAnlys.enable == LOGA_ENABLED) {
			TIM1_LOG_ANLYS_MspInit(htim_base);
		}
	}
	if(htim_base->Instance == TIM4) {
 800c2a0:	4a3e      	ldr	r2, [pc, #248]	; (800c39c <HAL_TIM_Base_MspInit+0x13c>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d003      	beq.n	800c2ae <HAL_TIM_Base_MspInit+0x4e>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800c2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2aa:	d013      	beq.n	800c2d4 <HAL_TIM_Base_MspInit+0x74>
		if (logAnlys.enable == LOGA_DISABLED) {
			TIM4_REForICorTI_MspInit(htim_base);
		}
	}
#endif //USE_COUNTER
}
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
		if (logAnlys.enable == LOGA_ENABLED) {
 800c2ae:	4b3c      	ldr	r3, [pc, #240]	; (800c3a0 <HAL_TIM_Base_MspInit+0x140>)
 800c2b0:	7cda      	ldrb	r2, [r3, #19]
 800c2b2:	2a01      	cmp	r2, #1
 800c2b4:	d007      	beq.n	800c2c6 <HAL_TIM_Base_MspInit+0x66>
		if (logAnlys.enable == LOGA_DISABLED) {
 800c2b6:	7cdb      	ldrb	r3, [r3, #19]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f7      	bne.n	800c2ac <HAL_TIM_Base_MspInit+0x4c>
			TIM4_REForICorTI_MspInit(htim_base);
 800c2bc:	4620      	mov	r0, r4
}
 800c2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			TIM4_REForICorTI_MspInit(htim_base);
 800c2c2:	f000 badd 	b.w	800c880 <TIM4_REForICorTI_MspInit>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f001 fe86 	bl	800dfd8 <TIM4_LOG_ANLYS_MspInit>
 800c2cc:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM2) {
 800c2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d2:	d141      	bne.n	800c358 <HAL_TIM_Base_MspInit+0xf8>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 800c2d4:	4b33      	ldr	r3, [pc, #204]	; (800c3a4 <HAL_TIM_Base_MspInit+0x144>)
 800c2d6:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c2da:	2a01      	cmp	r2, #1
 800c2dc:	d038      	beq.n	800c350 <HAL_TIM_Base_MspInit+0xf0>
 800c2de:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c2e2:	2a04      	cmp	r2, #4
 800c2e4:	d034      	beq.n	800c350 <HAL_TIM_Base_MspInit+0xf0>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 800c2e6:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800c2ea:	2a02      	cmp	r2, #2
 800c2ec:	d003      	beq.n	800c2f6 <HAL_TIM_Base_MspInit+0x96>
 800c2ee:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d1da      	bne.n	800c2ac <HAL_TIM_Base_MspInit+0x4c>
			TIM2_ICorTI_MspInit(htim_base);
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 fa5e 	bl	800c7b8 <TIM2_ICorTI_MspInit>
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	e02b      	b.n	800c358 <HAL_TIM_Base_MspInit+0xf8>
		if (htim_base->Instance == TIM6) {
 800c300:	4a23      	ldr	r2, [pc, #140]	; (800c390 <HAL_TIM_Base_MspInit+0x130>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d036      	beq.n	800c374 <HAL_TIM_Base_MspInit+0x114>
		if (htim_base->Instance == TIM7) {
 800c306:	4a23      	ldr	r2, [pc, #140]	; (800c394 <HAL_TIM_Base_MspInit+0x134>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d1b4      	bne.n	800c276 <HAL_TIM_Base_MspInit+0x16>
			TIM7_GEN_DAC_MspInit(htim_base);
 800c30c:	4620      	mov	r0, r4
 800c30e:	f001 fae1 	bl	800d8d4 <TIM7_GEN_DAC_MspInit>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	e7af      	b.n	800c276 <HAL_TIM_Base_MspInit+0x16>
		if (logAnlys.enable == LOGA_ENABLED) {
 800c316:	4b22      	ldr	r3, [pc, #136]	; (800c3a0 <HAL_TIM_Base_MspInit+0x140>)
 800c318:	7cdb      	ldrb	r3, [r3, #19]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d1c6      	bne.n	800c2ac <HAL_TIM_Base_MspInit+0x4c>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 800c31e:	4620      	mov	r0, r4
 800c320:	f001 fe0c 	bl	800df3c <TIM1_LOG_ANLYS_MspInit>
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	e7bb      	b.n	800c2a0 <HAL_TIM_Base_MspInit+0x40>
			TIM1_GEN_PWM_MspInit(htim_base);
 800c328:	4620      	mov	r0, r4
 800c32a:	f001 faf3 	bl	800d914 <TIM1_GEN_PWM_MspInit>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	e7a7      	b.n	800c282 <HAL_TIM_Base_MspInit+0x22>
			TIM3_GEN_PWM_MspInit(htim_base);
 800c332:	4620      	mov	r0, r4
 800c334:	f001 fb0e 	bl	800d954 <TIM3_GEN_PWM_MspInit>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	e7a5      	b.n	800c288 <HAL_TIM_Base_MspInit+0x28>
			TIM6_GEN_PWM_MspInit(htim_base);
 800c33c:	4620      	mov	r0, r4
 800c33e:	f001 fb29 	bl	800d994 <TIM6_GEN_PWM_MspInit>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	e7a3      	b.n	800c28e <HAL_TIM_Base_MspInit+0x2e>
			TIM7_GEN_PWM_MspInit(htim_base);
 800c346:	4620      	mov	r0, r4
 800c348:	f001 fb5a 	bl	800da00 <TIM7_GEN_PWM_MspInit>
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	e7a1      	b.n	800c294 <HAL_TIM_Base_MspInit+0x34>
			TIM2_ETRorREF_MspInit(htim_base);
 800c350:	4620      	mov	r0, r4
 800c352:	f000 f9e7 	bl	800c724 <TIM2_ETRorREF_MspInit>
 800c356:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800c358:	4a10      	ldr	r2, [pc, #64]	; (800c39c <HAL_TIM_Base_MspInit+0x13c>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d1a6      	bne.n	800c2ac <HAL_TIM_Base_MspInit+0x4c>
 800c35e:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <HAL_TIM_Base_MspInit+0x140>)
 800c360:	e7a9      	b.n	800c2b6 <HAL_TIM_Base_MspInit+0x56>
		TIM15_SCOPE_MspInit(htim_base);
 800c362:	f002 f859 	bl	800e418 <TIM15_SCOPE_MspInit>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	e780      	b.n	800c26c <HAL_TIM_Base_MspInit+0xc>
		TIM8_SYNC_PWM_MspInit(htim_base);
 800c36a:	4620      	mov	r0, r4
 800c36c:	f002 f906 	bl	800e57c <TIM8_SYNC_PWM_MspInit>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	e792      	b.n	800c29a <HAL_TIM_Base_MspInit+0x3a>
			TIM6_GEN_DAC_MspInit(htim_base);
 800c374:	4620      	mov	r0, r4
 800c376:	f001 fa9d 	bl	800d8b4 <TIM6_GEN_DAC_MspInit>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	e7c3      	b.n	800c306 <HAL_TIM_Base_MspInit+0xa6>
 800c37e:	bf00      	nop
 800c380:	40014000 	.word	0x40014000
 800c384:	20004c20 	.word	0x20004c20
 800c388:	40012c00 	.word	0x40012c00
 800c38c:	40000400 	.word	0x40000400
 800c390:	40001000 	.word	0x40001000
 800c394:	40001400 	.word	0x40001400
 800c398:	40013400 	.word	0x40013400
 800c39c:	40000800 	.word	0x40000800
 800c3a0:	20005438 	.word	0x20005438
 800c3a4:	20004848 	.word	0x20004848

0800c3a8 <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800c3a8:	b538      	push	{r3, r4, r5, lr}

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800c3aa:	4a39      	ldr	r2, [pc, #228]	; (800c490 <HAL_TIM_Base_MspDeInit+0xe8>)
 800c3ac:	6803      	ldr	r3, [r0, #0]
 800c3ae:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800c3b0:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800c3b2:	d063      	beq.n	800c47c <HAL_TIM_Base_MspDeInit+0xd4>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 800c3b4:	4d37      	ldr	r5, [pc, #220]	; (800c494 <HAL_TIM_Base_MspDeInit+0xec>)
 800c3b6:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800c3ba:	2a01      	cmp	r2, #1
 800c3bc:	d01b      	beq.n	800c3f6 <HAL_TIM_Base_MspDeInit+0x4e>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 800c3be:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800c3c2:	b95a      	cbnz	r2, 800c3dc <HAL_TIM_Base_MspDeInit+0x34>
		if (htim_base->Instance == TIM1) {
 800c3c4:	4a34      	ldr	r2, [pc, #208]	; (800c498 <HAL_TIM_Base_MspDeInit+0xf0>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d038      	beq.n	800c43c <HAL_TIM_Base_MspDeInit+0x94>
			TIM1_GEN_PWM_MspDeinit(htim_base);
		}
		if (htim_base->Instance == TIM3) {
 800c3ca:	4a34      	ldr	r2, [pc, #208]	; (800c49c <HAL_TIM_Base_MspDeInit+0xf4>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d03a      	beq.n	800c446 <HAL_TIM_Base_MspDeInit+0x9e>
			TIM3_GEN_PWM_MspDeinit(htim_base);
		}
		if (htim_base->Instance == TIM6) {
 800c3d0:	4a33      	ldr	r2, [pc, #204]	; (800c4a0 <HAL_TIM_Base_MspDeInit+0xf8>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d03c      	beq.n	800c450 <HAL_TIM_Base_MspDeInit+0xa8>
			TIM6_GEN_PWM_MspDeinit(htim_base);
		}
		if (htim_base->Instance == TIM7) {
 800c3d6:	4a33      	ldr	r2, [pc, #204]	; (800c4a4 <HAL_TIM_Base_MspDeInit+0xfc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d03e      	beq.n	800c45a <HAL_TIM_Base_MspDeInit+0xb2>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800c3dc:	4a32      	ldr	r2, [pc, #200]	; (800c4a8 <HAL_TIM_Base_MspDeInit+0x100>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d040      	beq.n	800c464 <HAL_TIM_Base_MspDeInit+0xbc>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800c3e2:	4a2d      	ldr	r2, [pc, #180]	; (800c498 <HAL_TIM_Base_MspDeInit+0xf0>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d044      	beq.n	800c472 <HAL_TIM_Base_MspDeInit+0xca>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
	}
	if (htim_base->Instance == TIM4) {
 800c3e8:	4a30      	ldr	r2, [pc, #192]	; (800c4ac <HAL_TIM_Base_MspDeInit+0x104>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d00e      	beq.n	800c40c <HAL_TIM_Base_MspDeInit+0x64>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800c3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3f2:	d01b      	beq.n	800c42c <HAL_TIM_Base_MspDeInit+0x84>
	}
	if (htim_base->Instance == TIM4) {
		TIM4_CNT_MspDeinit(htim_base);
	}
#endif //USE_COUNTER
}
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
		if (htim_base->Instance == TIM6) {
 800c3f6:	4a2a      	ldr	r2, [pc, #168]	; (800c4a0 <HAL_TIM_Base_MspDeInit+0xf8>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d043      	beq.n	800c484 <HAL_TIM_Base_MspDeInit+0xdc>
		if (htim_base->Instance == TIM7) {
 800c3fc:	4a29      	ldr	r2, [pc, #164]	; (800c4a4 <HAL_TIM_Base_MspDeInit+0xfc>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d1dd      	bne.n	800c3be <HAL_TIM_Base_MspDeInit+0x16>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 800c402:	4620      	mov	r0, r4
 800c404:	f001 fa7e 	bl	800d904 <TIM7_GEN_DAC_MspDeinit>
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	e7d8      	b.n	800c3be <HAL_TIM_Base_MspDeInit+0x16>
		if (logAnlys.enable == LOGA_ENABLED) {
 800c40c:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <HAL_TIM_Base_MspDeInit+0x108>)
 800c40e:	7cdb      	ldrb	r3, [r3, #19]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d004      	beq.n	800c41e <HAL_TIM_Base_MspDeInit+0x76>
		TIM4_CNT_MspDeinit(htim_base);
 800c414:	4620      	mov	r0, r4
}
 800c416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TIM4_CNT_MspDeinit(htim_base);
 800c41a:	f000 bab1 	b.w	800c980 <TIM4_CNT_MspDeinit>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 800c41e:	4620      	mov	r0, r4
 800c420:	f001 fdfc 	bl	800e01c <TIM4_LOG_ANLYS_MspDeinit>
	if (htim_base->Instance == TIM2) {
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c42a:	d103      	bne.n	800c434 <HAL_TIM_Base_MspDeInit+0x8c>
		TIM2_CNT_MspDeinit(htim_base);
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 fa63 	bl	800c8f8 <TIM2_CNT_MspDeinit>
 800c432:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800c434:	4a1d      	ldr	r2, [pc, #116]	; (800c4ac <HAL_TIM_Base_MspDeInit+0x104>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d0ec      	beq.n	800c414 <HAL_TIM_Base_MspDeInit+0x6c>
}
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
			TIM1_GEN_PWM_MspDeinit(htim_base);
 800c43c:	4620      	mov	r0, r4
 800c43e:	f001 fb15 	bl	800da6c <TIM1_GEN_PWM_MspDeinit>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	e7c1      	b.n	800c3ca <HAL_TIM_Base_MspDeInit+0x22>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 800c446:	4620      	mov	r0, r4
 800c448:	f001 fb18 	bl	800da7c <TIM3_GEN_PWM_MspDeinit>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	e7bf      	b.n	800c3d0 <HAL_TIM_Base_MspDeInit+0x28>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 800c450:	4620      	mov	r0, r4
 800c452:	f001 fb1b 	bl	800da8c <TIM6_GEN_PWM_MspDeinit>
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	e7bd      	b.n	800c3d6 <HAL_TIM_Base_MspDeInit+0x2e>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 800c45a:	4620      	mov	r0, r4
 800c45c:	f001 fb20 	bl	800daa0 <TIM7_GEN_PWM_MspDeinit>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	e7bb      	b.n	800c3dc <HAL_TIM_Base_MspDeInit+0x34>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 800c464:	4620      	mov	r0, r4
 800c466:	f002 f937 	bl	800e6d8 <TIM8_SYNC_PWM_MspDeinit>
 800c46a:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM1) {
 800c46c:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <HAL_TIM_Base_MspDeInit+0xf0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d1ba      	bne.n	800c3e8 <HAL_TIM_Base_MspDeInit+0x40>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 800c472:	4620      	mov	r0, r4
 800c474:	f001 fde6 	bl	800e044 <TIM1_LOG_ANLYS_MspDeinit>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	e7b5      	b.n	800c3e8 <HAL_TIM_Base_MspDeInit+0x40>
		TIM15_SCOPE_MspDeinit(htim_base);
 800c47c:	f001 ffdc 	bl	800e438 <TIM15_SCOPE_MspDeinit>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	e797      	b.n	800c3b4 <HAL_TIM_Base_MspDeInit+0xc>
			TIM6_GEN_DAC_MspDeinit(htim_base);
 800c484:	4620      	mov	r0, r4
 800c486:	f001 fa35 	bl	800d8f4 <TIM6_GEN_DAC_MspDeinit>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	e7b6      	b.n	800c3fc <HAL_TIM_Base_MspDeInit+0x54>
 800c48e:	bf00      	nop
 800c490:	40014000 	.word	0x40014000
 800c494:	20004c20 	.word	0x20004c20
 800c498:	40012c00 	.word	0x40012c00
 800c49c:	40000400 	.word	0x40000400
 800c4a0:	40001000 	.word	0x40001000
 800c4a4:	40001400 	.word	0x40001400
 800c4a8:	40013400 	.word	0x40013400
 800c4ac:	40000800 	.word	0x40000800
 800c4b0:	20005438 	.word	0x20005438

0800c4b4 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	uint8_t result = UNKNOW_ERROR;

	if (isFreqPassed == true) {
 800c4bc:	b124      	cbz	r4, 800c4c8 <TIM_Reconfig+0x14>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800c4be:	004c      	lsls	r4, r1, #1
 800c4c0:	fbb4 f2f2 	udiv	r2, r4, r2
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	0852      	lsrs	r2, r2, #1
	} else {
		clkDiv = samplingFreq;
	}

	if (clkDiv == 0) { //error
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	d03d      	beq.n	800c548 <TIM_Reconfig+0x94>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800c4cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c4d0:	db34      	blt.n	800c53c <TIM_Reconfig+0x88>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800c4d2:	1415      	asrs	r5, r2, #16
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	b2ad      	uxth	r5, r5
		uint32_t errMin = 0xFFFFFFFF;
 800c4d8:	f04f 3cff 	mov.w	ip, #4294967295
	uint32_t errMinRatio = 0;
 800c4dc:	f04f 0800 	mov.w	r8, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c4e0:	f64f 7eff 	movw	lr, #65535	; 0xffff
			div = clkDiv / ratio;
 800c4e4:	fb92 f6f5 	sdiv	r6, r2, r5
			errVal = clkDiv - (div * ratio);
 800c4e8:	b2b4      	uxth	r4, r6
 800c4ea:	fb05 2414 	mls	r4, r5, r4, r2
			if (errVal < errMin) {
 800c4ee:	4564      	cmp	r4, ip
			ratio++;
 800c4f0:	b2af      	uxth	r7, r5
 800c4f2:	bf3c      	itt	cc
 800c4f4:	46a4      	movcc	ip, r4
				errMinRatio = ratio;
 800c4f6:	46a8      	movcc	r8, r5
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c4f8:	4577      	cmp	r7, lr
 800c4fa:	d02a      	beq.n	800c552 <TIM_Reconfig+0x9e>
 800c4fc:	3501      	adds	r5, #1
		while (errVal != 0) {
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	d1f0      	bne.n	800c4e4 <TIM_Reconfig+0x30>
			div = clkDiv / ratio;
 800c502:	b2b6      	uxth	r6, r6
 800c504:	1e75      	subs	r5, r6, #1
 800c506:	1e7a      	subs	r2, r7, #1
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800c508:	42b7      	cmp	r7, r6
 800c50a:	b2ad      	uxth	r5, r5
 800c50c:	fa1f fc82 	uxth.w	ip, r2
 800c510:	d934      	bls.n	800c57c <TIM_Reconfig+0xc8>
 800c512:	4662      	mov	r2, ip
 800c514:	462e      	mov	r6, r5
 800c516:	46ac      	mov	ip, r5
 800c518:	4615      	mov	r5, r2
		} else {
			result = 0;
		}
	}

	if (realFreq != 0) {
 800c51a:	b12b      	cbz	r3, 800c528 <TIM_Reconfig+0x74>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800c51c:	1c6a      	adds	r2, r5, #1
 800c51e:	fb0c 2202 	mla	r2, ip, r2, r2
 800c522:	fbb1 f1f2 	udiv	r1, r1, r2
 800c526:	6019      	str	r1, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 800c528:	6803      	ldr	r3, [r0, #0]
 800c52a:	62dd      	str	r5, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800c52c:	629e      	str	r6, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c52e:	695a      	ldr	r2, [r3, #20]
 800c530:	f042 0201 	orr.w	r2, r2, #1
 800c534:	615a      	str	r2, [r3, #20]
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return result;
}
 800c536:	4620      	mov	r0, r4
 800c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53c:	2600      	movs	r6, #0
		autoReloadReg = clkDiv - 1;
 800c53e:	3a01      	subs	r2, #1
 800c540:	b295      	uxth	r5, r2
		result = 0;
 800c542:	4634      	mov	r4, r6
		prescaler = 0;
 800c544:	46b4      	mov	ip, r6
 800c546:	e7e8      	b.n	800c51a <TIM_Reconfig+0x66>
 800c548:	f04f 0c00 	mov.w	ip, #0
 800c54c:	4666      	mov	r6, ip
		result = GEN_FREQ_MISMATCH;
 800c54e:	246c      	movs	r4, #108	; 0x6c
 800c550:	e7e3      	b.n	800c51a <TIM_Reconfig+0x66>
				div = clkDiv / errMinRatio;
 800c552:	fbb2 f2f8 	udiv	r2, r2, r8
				ratio = errMinRatio;
 800c556:	fa1f f888 	uxth.w	r8, r8
				div = clkDiv / errMinRatio;
 800c55a:	b292      	uxth	r2, r2
 800c55c:	f102 3cff 	add.w	ip, r2, #4294967295
 800c560:	f108 35ff 	add.w	r5, r8, #4294967295
		if (ratio > div) {
 800c564:	4542      	cmp	r2, r8
 800c566:	fa1f fc8c 	uxth.w	ip, ip
 800c56a:	b2ad      	uxth	r5, r5
 800c56c:	d302      	bcc.n	800c574 <TIM_Reconfig+0xc0>
 800c56e:	4662      	mov	r2, ip
 800c570:	46ac      	mov	ip, r5
 800c572:	4615      	mov	r5, r2
 800c574:	4666      	mov	r6, ip
		if (errVal) {
 800c576:	b114      	cbz	r4, 800c57e <TIM_Reconfig+0xca>
			result = GEN_FREQ_IS_INACCURATE;
 800c578:	246b      	movs	r4, #107	; 0x6b
 800c57a:	e7ce      	b.n	800c51a <TIM_Reconfig+0x66>
 800c57c:	4666      	mov	r6, ip
			result = 0;
 800c57e:	2400      	movs	r4, #0
 800c580:	e7cb      	b.n	800c51a <TIM_Reconfig+0x66>
 800c582:	bf00      	nop

0800c584 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	ec53 2b10 	vmov	r2, r3, d0
 800c58c:	b082      	sub	sp, #8
 800c58e:	4605      	mov	r5, r0
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	double realFreq;
	uint8_t result = UNKNOW_ERROR;

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800c590:	0048      	lsls	r0, r1, #1
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800c592:	e9cd 2300 	strd	r2, r3, [sp]
 800c596:	460c      	mov	r4, r1
	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800c598:	f7f3 ff6c 	bl	8000474 <__aeabi_ui2d>
 800c59c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5a0:	f7f4 f90c 	bl	80007bc <__aeabi_ddiv>
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4b32      	ldr	r3, [pc, #200]	; (800c670 <TIM_ReconfigPrecise+0xec>)
 800c5a8:	f7f3 fe28 	bl	80001fc <__adddf3>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4b31      	ldr	r3, [pc, #196]	; (800c674 <TIM_ReconfigPrecise+0xf0>)
 800c5b0:	f7f3 ffda 	bl	8000568 <__aeabi_dmul>
 800c5b4:	f7f4 fa88 	bl	8000ac8 <__aeabi_d2iz>

	if (clkDiv == 0) { //error
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d04d      	beq.n	800c658 <TIM_ReconfigPrecise+0xd4>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800c5bc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800c5c0:	db29      	blt.n	800c616 <TIM_ReconfigPrecise+0x92>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800c5c2:	1403      	asrs	r3, r0, #16
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	b29b      	uxth	r3, r3
		uint32_t errMin = 0xFFFFFFFF;
 800c5c8:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t errMinRatio = 0;
 800c5cc:	f04f 0e00 	mov.w	lr, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c5d0:	f64f 7cff 	movw	ip, #65535	; 0xffff
			div = clkDiv / ratio;
 800c5d4:	fb90 f1f3 	sdiv	r1, r0, r3
			errVal = clkDiv - (div * ratio);
 800c5d8:	b28a      	uxth	r2, r1
 800c5da:	fb03 0212 	mls	r2, r3, r2, r0
			if (errVal < errMin) {
 800c5de:	42ba      	cmp	r2, r7
			ratio++;
 800c5e0:	b29e      	uxth	r6, r3
 800c5e2:	bf3c      	itt	cc
 800c5e4:	4617      	movcc	r7, r2
				errMinRatio = ratio;
 800c5e6:	469e      	movcc	lr, r3
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800c5e8:	4566      	cmp	r6, ip
 800c5ea:	d03b      	beq.n	800c664 <TIM_ReconfigPrecise+0xe0>
 800c5ec:	3301      	adds	r3, #1
		while (errVal != 0) {
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d1f0      	bne.n	800c5d4 <TIM_ReconfigPrecise+0x50>
			div = clkDiv / ratio;
 800c5f2:	b289      	uxth	r1, r1
 800c5f4:	1e70      	subs	r0, r6, #1
 800c5f6:	1e4b      	subs	r3, r1, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	b280      	uxth	r0, r0
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800c5fc:	428e      	cmp	r6, r1
 800c5fe:	f100 0701 	add.w	r7, r0, #1
 800c602:	f103 0801 	add.w	r8, r3, #1
 800c606:	461a      	mov	r2, r3
 800c608:	d80b      	bhi.n	800c622 <TIM_ReconfigPrecise+0x9e>
 800c60a:	4641      	mov	r1, r8
 800c60c:	4602      	mov	r2, r0
 800c60e:	46b8      	mov	r8, r7
 800c610:	4618      	mov	r0, r3
 800c612:	460f      	mov	r7, r1
 800c614:	e005      	b.n	800c622 <TIM_ReconfigPrecise+0x9e>
		autoReloadReg = clkDiv - 1;
 800c616:	3801      	subs	r0, #1
 800c618:	b280      	uxth	r0, r0
 800c61a:	1c47      	adds	r7, r0, #1
 800c61c:	2200      	movs	r2, #0
 800c61e:	f04f 0801 	mov.w	r8, #1
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));

	htim_base->Instance->ARR = autoReloadReg;
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	62d8      	str	r0, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800c626:	629a      	str	r2, [r3, #40]	; 0x28
 800c628:	695a      	ldr	r2, [r3, #20]
 800c62a:	f042 0201 	orr.w	r2, r2, #1
 800c62e:	615a      	str	r2, [r3, #20]
	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 800c630:	4620      	mov	r0, r4
 800c632:	f7f3 ff1f 	bl	8000474 <__aeabi_ui2d>
 800c636:	4604      	mov	r4, r0
 800c638:	fb07 f008 	mul.w	r0, r7, r8
 800c63c:	460d      	mov	r5, r1
 800c63e:	f7f3 ff29 	bl	8000494 <__aeabi_i2d>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f4 f8b7 	bl	80007bc <__aeabi_ddiv>
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return realFreq;
}
 800c64e:	ec41 0b10 	vmov	d0, r0, r1
 800c652:	b002      	add	sp, #8
 800c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c658:	2200      	movs	r2, #0
 800c65a:	f102 0801 	add.w	r8, r2, #1
 800c65e:	4610      	mov	r0, r2
 800c660:	4647      	mov	r7, r8
 800c662:	e7de      	b.n	800c622 <TIM_ReconfigPrecise+0x9e>
				div = clkDiv / errMinRatio;
 800c664:	fbb0 f0fe 	udiv	r0, r0, lr
				ratio = errMinRatio;
 800c668:	fa1f f68e 	uxth.w	r6, lr
				div = clkDiv / errMinRatio;
 800c66c:	b281      	uxth	r1, r0
				break;
 800c66e:	e7c1      	b.n	800c5f4 <TIM_ReconfigPrecise+0x70>
 800c670:	3ff00000 	.word	0x3ff00000
 800c674:	3fe00000 	.word	0x3fe00000

0800c678 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800c678:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
	if(counter.state == COUNTER_REF){
 800c67a:	4c27      	ldr	r4, [pc, #156]	; (800c718 <MX_TIM4_Init+0xa0>)
	htim4.Instance = TIM4;
 800c67c:	4b27      	ldr	r3, [pc, #156]	; (800c71c <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800c67e:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800c682:	4927      	ldr	r1, [pc, #156]	; (800c720 <MX_TIM4_Init+0xa8>)
 800c684:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800c686:	2a04      	cmp	r2, #4
{
 800c688:	b089      	sub	sp, #36	; 0x24
	if(counter.state == COUNTER_REF){
 800c68a:	d03d      	beq.n	800c708 <MX_TIM4_Init+0x90>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
		htim4.Init.Period = 59999;
	}else if(counter.state == COUNTER_ETR){
 800c68c:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800c690:	2a01      	cmp	r2, #1
 800c692:	d007      	beq.n	800c6a4 <MX_TIM4_Init+0x2c>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800c694:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800c698:	2a02      	cmp	r2, #2
 800c69a:	d003      	beq.n	800c6a4 <MX_TIM4_Init+0x2c>
 800c69c:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800c6a0:	2a03      	cmp	r2, #3
 800c6a2:	d105      	bne.n	800c6b0 <MX_TIM4_Init+0x38>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800c6a4:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800c6a8:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800c6ac:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800c6ae:	60da      	str	r2, [r3, #12]
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
		htim4.Init.Period = TIM4_ARR;
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6b0:	2500      	movs	r5, #0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800c6b2:	481a      	ldr	r0, [pc, #104]	; (800c71c <MX_TIM4_Init+0xa4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6b4:	609d      	str	r5, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6b6:	611d      	str	r5, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6b8:	619d      	str	r5, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800c6ba:	f7fb f8f3 	bl	80078a4 <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 800c6be:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800c6c2:	4816      	ldr	r0, [pc, #88]	; (800c71c <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	a908      	add	r1, sp, #32
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800c6c8:	bf0c      	ite	eq
 800c6ca:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6ce:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800c6d2:	f841 3d10 	str.w	r3, [r1, #-16]!
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800c6d6:	bf04      	itt	eq
 800c6d8:	e9cd 5505 	strdeq	r5, r5, [sp, #20]
		sClockSourceConfig.ClockFilter = 0;
 800c6dc:	9507      	streq	r5, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800c6de:	f7fb fd9d 	bl	800821c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800c6e2:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c6e6:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800c6e8:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c6ea:	9201      	str	r2, [sp, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800c6ec:	d011      	beq.n	800c712 <MX_TIM4_Init+0x9a>
 800c6ee:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	bf0c      	ite	eq
 800c6f6:	2300      	moveq	r3, #0
 800c6f8:	2380      	movne	r3, #128	; 0x80
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800c6fa:	a901      	add	r1, sp, #4
 800c6fc:	4807      	ldr	r0, [pc, #28]	; (800c71c <MX_TIM4_Init+0xa4>)
 800c6fe:	9303      	str	r3, [sp, #12]
 800c700:	f7fc f9ca 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
}
 800c704:	b009      	add	sp, #36	; 0x24
 800c706:	bd30      	pop	{r4, r5, pc}
		htim4.Init.Prescaler = 59999;
 800c708:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800c70c:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800c70e:	60da      	str	r2, [r3, #12]
 800c710:	e7ce      	b.n	800c6b0 <MX_TIM4_Init+0x38>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c712:	2300      	movs	r3, #0
 800c714:	e7f1      	b.n	800c6fa <MX_TIM4_Init+0x82>
 800c716:	bf00      	nop
 800c718:	20004848 	.word	0x20004848
 800c71c:	2000ce94 	.word	0x2000ce94
 800c720:	40000800 	.word	0x40000800

0800c724 <TIM2_ETRorREF_MspInit>:
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM2_CLK_ENABLE();
 800c724:	4b20      	ldr	r3, [pc, #128]	; (800c7a8 <TIM2_ETRorREF_MspInit+0x84>)
{
 800c726:	b570      	push	{r4, r5, r6, lr}
	__TIM2_CLK_ENABLE();
 800c728:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 800c72a:	4c20      	ldr	r4, [pc, #128]	; (800c7ac <TIM2_ETRorREF_MspInit+0x88>)
	__TIM2_CLK_ENABLE();
 800c72c:	f042 0201 	orr.w	r2, r2, #1
 800c730:	61da      	str	r2, [r3, #28]
 800c732:	69db      	ldr	r3, [r3, #28]
{
 800c734:	b086      	sub	sp, #24
	__TIM2_CLK_ENABLE();
 800c736:	f003 0301 	and.w	r3, r3, #1
{
 800c73a:	4606      	mov	r6, r0
	__TIM2_CLK_ENABLE();
 800c73c:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c73e:	2002      	movs	r0, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c740:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c742:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c744:	2203      	movs	r2, #3
	__TIM2_CLK_ENABLE();
 800c746:	9900      	ldr	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c748:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c74a:	a901      	add	r1, sp, #4
 800c74c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c750:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c752:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c754:	e9cd 5203 	strd	r5, r2, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c758:	f7f9 ffd2 	bl	8006700 <HAL_GPIO_Init>
	hdma_tim2_up.Instance = DMA1_Channel2;
 800c75c:	4a14      	ldr	r2, [pc, #80]	; (800c7b0 <TIM2_ETRorREF_MspInit+0x8c>)
 800c75e:	6022      	str	r2, [r4, #0]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c760:	f44f 7300 	mov.w	r3, #512	; 0x200
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c764:	f44f 6100 	mov.w	r1, #2048	; 0x800
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800c768:	2220      	movs	r2, #32
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c76a:	6123      	str	r3, [r4, #16]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_up);
 800c76c:	4620      	mov	r0, r4
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800c76e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c772:	e9c4 2306 	strd	r2, r3, [r4, #24]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c776:	6161      	str	r1, [r4, #20]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c778:	6065      	str	r5, [r4, #4]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 800c77a:	e9c4 5502 	strd	r5, r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim2_up);
 800c77e:	f7f9 fde1 	bl	8006344 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800c782:	6234      	str	r4, [r6, #32]
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800c784:	4629      	mov	r1, r5
 800c786:	4620      	mov	r0, r4
 800c788:	4a0a      	ldr	r2, [pc, #40]	; (800c7b4 <TIM2_ETRorREF_MspInit+0x90>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800c78a:	6266      	str	r6, [r4, #36]	; 0x24
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800c78c:	f7f9 ff60 	bl	8006650 <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 800c790:	462a      	mov	r2, r5
 800c792:	2109      	movs	r1, #9
 800c794:	200c      	movs	r0, #12
 800c796:	f7f9 fc29 	bl	8005fec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800c79a:	200c      	movs	r0, #12
 800c79c:	f7f9 fc5c 	bl	8006058 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 800c7a0:	f7f7 f8de 	bl	8003960 <counterEtrRefSetDefault>
}
 800c7a4:	b006      	add	sp, #24
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	40021000 	.word	0x40021000
 800c7ac:	2000ced4 	.word	0x2000ced4
 800c7b0:	4002001c 	.word	0x4002001c
 800c7b4:	0800349d 	.word	0x0800349d

0800c7b8 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800c7b8:	4b2b      	ldr	r3, [pc, #172]	; (800c868 <TIM2_ICorTI_MspInit+0xb0>)
{
 800c7ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800c7be:	69da      	ldr	r2, [r3, #28]
	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800c7c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c87c <TIM2_ICorTI_MspInit+0xc4>
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800c7c4:	4d29      	ldr	r5, [pc, #164]	; (800c86c <TIM2_ICorTI_MspInit+0xb4>)
	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800c7c6:	4c2a      	ldr	r4, [pc, #168]	; (800c870 <TIM2_ICorTI_MspInit+0xb8>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800c7c8:	f042 0201 	orr.w	r2, r2, #1
 800c7cc:	61da      	str	r2, [r3, #28]
 800c7ce:	69db      	ldr	r3, [r3, #28]
{
 800c7d0:	b087      	sub	sp, #28
	__HAL_RCC_TIM2_CLK_ENABLE();
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d8:	2600      	movs	r6, #0
{
 800c7da:	4607      	mov	r7, r0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7dc:	f04f 0c02 	mov.w	ip, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7e0:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c7e2:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c7e4:	2201      	movs	r2, #1
	__HAL_RCC_TIM2_CLK_ENABLE();
 800c7e6:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c7e8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ee:	e9cd c602 	strd	ip, r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c7f2:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c7f4:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7f6:	f7f9 ff83 	bl	8006700 <HAL_GPIO_Init>
	if(counter.state==COUNTER_IC){
 800c7fa:	f898 23b8 	ldrb.w	r2, [r8, #952]	; 0x3b8
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800c7fe:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <TIM2_ICorTI_MspInit+0xbc>)
 800c800:	602b      	str	r3, [r5, #0]
	if(counter.state==COUNTER_IC){
 800c802:	2a02      	cmp	r2, #2
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800c804:	bf14      	ite	ne
 800c806:	4632      	movne	r2, r6
 800c808:	2280      	moveq	r2, #128	; 0x80
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c80a:	f44f 7b00 	mov.w	fp, #512	; 0x200
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c80e:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800c812:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800c816:	4628      	mov	r0, r5
 800c818:	60ea      	str	r2, [r5, #12]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c81a:	606e      	str	r6, [r5, #4]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800c81c:	60ae      	str	r6, [r5, #8]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800c81e:	61ae      	str	r6, [r5, #24]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c820:	e9c5 ba04 	strd	fp, sl, [r5, #16]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800c824:	f8c5 901c 	str.w	r9, [r5, #28]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800c828:	f7f9 fd8c 	bl	8006344 <HAL_DMA_Init>
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800c82c:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800c830:	4a11      	ldr	r2, [pc, #68]	; (800c878 <TIM2_ICorTI_MspInit+0xc0>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800c832:	62bd      	str	r5, [r7, #40]	; 0x28
	if(counter.state==COUNTER_IC){
 800c834:	2b02      	cmp	r3, #2
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800c836:	bf0c      	ite	eq
 800c838:	2380      	moveq	r3, #128	; 0x80
 800c83a:	4633      	movne	r3, r6
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch1);
 800c83c:	4620      	mov	r0, r4
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800c83e:	6022      	str	r2, [r4, #0]
 800c840:	60e3      	str	r3, [r4, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800c842:	626f      	str	r7, [r5, #36]	; 0x24
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c844:	f8c4 b010 	str.w	fp, [r4, #16]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c848:	e9c4 6601 	strd	r6, r6, [r4, #4]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800c84c:	e9c4 a605 	strd	sl, r6, [r4, #20]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c850:	f8c4 901c 	str.w	r9, [r4, #28]
	HAL_DMA_Init(&hdma_tim2_ch1);
 800c854:	f7f9 fd76 	bl	8006344 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800c858:	627c      	str	r4, [r7, #36]	; 0x24
 800c85a:	6267      	str	r7, [r4, #36]	; 0x24

	counterIcTiSetDefault();
 800c85c:	f7f7 f8ac 	bl	80039b8 <counterIcTiSetDefault>
}
 800c860:	b007      	add	sp, #28
 800c862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c866:	bf00      	nop
 800c868:	40021000 	.word	0x40021000
 800c86c:	2000cf18 	.word	0x2000cf18
 800c870:	2000ce50 	.word	0x2000ce50
 800c874:	40020080 	.word	0x40020080
 800c878:	40020058 	.word	0x40020058
 800c87c:	20004848 	.word	0x20004848

0800c880 <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM4_CLK_ENABLE();
 800c880:	4b1b      	ldr	r3, [pc, #108]	; (800c8f0 <TIM4_REForICorTI_MspInit+0x70>)

	if(counter.state==COUNTER_REF){
 800c882:	491c      	ldr	r1, [pc, #112]	; (800c8f4 <TIM4_REForICorTI_MspInit+0x74>)
	__TIM4_CLK_ENABLE();
 800c884:	69da      	ldr	r2, [r3, #28]
{
 800c886:	b530      	push	{r4, r5, lr}
	__TIM4_CLK_ENABLE();
 800c888:	f042 0204 	orr.w	r2, r2, #4
 800c88c:	61da      	str	r2, [r3, #28]
 800c88e:	69db      	ldr	r3, [r3, #28]
{
 800c890:	b087      	sub	sp, #28
	__TIM4_CLK_ENABLE();
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	9b00      	ldr	r3, [sp, #0]
	if(counter.state==COUNTER_REF){
 800c89a:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800c89e:	2b04      	cmp	r3, #4
 800c8a0:	d013      	beq.n	800c8ca <TIM4_REForICorTI_MspInit+0x4a>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800c8a2:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d005      	beq.n	800c8b6 <TIM4_REForICorTI_MspInit+0x36>
 800c8aa:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d001      	beq.n	800c8b6 <TIM4_REForICorTI_MspInit+0x36>

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 800c8b2:	b007      	add	sp, #28
 800c8b4:	bd30      	pop	{r4, r5, pc}
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2109      	movs	r1, #9
 800c8ba:	201e      	movs	r0, #30
 800c8bc:	f7f9 fb96 	bl	8005fec <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c8c0:	201e      	movs	r0, #30
 800c8c2:	f7f9 fbc9 	bl	8006058 <HAL_NVIC_EnableIRQ>
}
 800c8c6:	b007      	add	sp, #28
 800c8c8:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800c8ca:	f44f 7080 	mov.w	r0, #256	; 0x100
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c8ce:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800c8d0:	230a      	movs	r3, #10
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800c8d2:	9001      	str	r0, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8d4:	2502      	movs	r5, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d6:	2400      	movs	r4, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8d8:	a901      	add	r1, sp, #4
 800c8da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8de:	e9cd 5402 	strd	r5, r4, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800c8e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8e6:	f7f9 ff0b 	bl	8006700 <HAL_GPIO_Init>
}
 800c8ea:	b007      	add	sp, #28
 800c8ec:	bd30      	pop	{r4, r5, pc}
 800c8ee:	bf00      	nop
 800c8f0:	40021000 	.word	0x40021000
 800c8f4:	20004848 	.word	0x20004848

0800c8f8 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM2_CLK_DISABLE();
 800c8f8:	491e      	ldr	r1, [pc, #120]	; (800c974 <TIM2_CNT_MspDeinit+0x7c>)

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800c8fa:	4a1f      	ldr	r2, [pc, #124]	; (800c978 <TIM2_CNT_MspDeinit+0x80>)
	__TIM2_CLK_DISABLE();
 800c8fc:	69cb      	ldr	r3, [r1, #28]
 800c8fe:	f023 0301 	bic.w	r3, r3, #1
{
 800c902:	b510      	push	{r4, lr}
	__TIM2_CLK_DISABLE();
 800c904:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800c906:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c90a:	2b01      	cmp	r3, #1
{
 800c90c:	4604      	mov	r4, r0
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800c90e:	d021      	beq.n	800c954 <TIM2_CNT_MspDeinit+0x5c>
 800c910:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c914:	2b04      	cmp	r3, #4
 800c916:	d01d      	beq.n	800c954 <TIM2_CNT_MspDeinit+0x5c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 800c918:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d00d      	beq.n	800c93c <TIM2_CNT_MspDeinit+0x44>
 800c920:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c924:	2b03      	cmp	r3, #3
 800c926:	d009      	beq.n	800c93c <TIM2_CNT_MspDeinit+0x44>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 800c928:	4b12      	ldr	r3, [pc, #72]	; (800c974 <TIM2_CNT_MspDeinit+0x7c>)
 800c92a:	691a      	ldr	r2, [r3, #16]
 800c92c:	f042 0201 	orr.w	r2, r2, #1
 800c930:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800c932:	691a      	ldr	r2, [r3, #16]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	611a      	str	r2, [r3, #16]
}
 800c93a:	bd10      	pop	{r4, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800c93c:	2103      	movs	r1, #3
 800c93e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c942:	f7f9 ffcf 	bl	80068e4 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800c946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c948:	f7f9 fd46 	bl	80063d8 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800c94c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c94e:	f7f9 fd43 	bl	80063d8 <HAL_DMA_DeInit>
 800c952:	e7e9      	b.n	800c928 <TIM2_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 800c954:	2101      	movs	r1, #1
 800c956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c95a:	f7f9 ffc3 	bl	80068e4 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 800c95e:	200c      	movs	r0, #12
 800c960:	f7f9 fb86 	bl	8006070 <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 800c964:	2100      	movs	r1, #0
 800c966:	4805      	ldr	r0, [pc, #20]	; (800c97c <TIM2_CNT_MspDeinit+0x84>)
 800c968:	f7f9 fe9c 	bl	80066a4 <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800c96c:	6a20      	ldr	r0, [r4, #32]
 800c96e:	f7f9 fd33 	bl	80063d8 <HAL_DMA_DeInit>
 800c972:	e7d9      	b.n	800c928 <TIM2_CNT_MspDeinit+0x30>
 800c974:	40021000 	.word	0x40021000
 800c978:	20004848 	.word	0x20004848
 800c97c:	2000ced4 	.word	0x2000ced4

0800c980 <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM4_CLK_DISABLE();
 800c980:	4918      	ldr	r1, [pc, #96]	; (800c9e4 <TIM4_CNT_MspDeinit+0x64>)

	if(counter.state==COUNTER_REF){
 800c982:	4a19      	ldr	r2, [pc, #100]	; (800c9e8 <TIM4_CNT_MspDeinit+0x68>)
{
 800c984:	b508      	push	{r3, lr}
	__TIM4_CLK_DISABLE();
 800c986:	69cb      	ldr	r3, [r1, #28]
 800c988:	f023 0304 	bic.w	r3, r3, #4
 800c98c:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_REF){
 800c98e:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c992:	2b04      	cmp	r3, #4
 800c994:	d01a      	beq.n	800c9cc <TIM4_CNT_MspDeinit+0x4c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800c996:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d012      	beq.n	800c9c4 <TIM4_CNT_MspDeinit+0x44>
 800c99e:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	d00e      	beq.n	800c9c4 <TIM4_CNT_MspDeinit+0x44>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);

	}	else if(counter.state==COUNTER_ETR){
 800c9a6:	f892 13b8 	ldrb.w	r1, [r2, #952]	; 0x3b8
 800c9aa:	b2c9      	uxtb	r1, r1
 800c9ac:	2901      	cmp	r1, #1
 800c9ae:	d014      	beq.n	800c9da <TIM4_CNT_MspDeinit+0x5a>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 800c9b0:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <TIM4_CNT_MspDeinit+0x64>)
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	f042 0204 	orr.w	r2, r2, #4
 800c9b8:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800c9ba:	691a      	ldr	r2, [r3, #16]
 800c9bc:	f022 0204 	bic.w	r2, r2, #4
 800c9c0:	611a      	str	r2, [r3, #16]
}
 800c9c2:	bd08      	pop	{r3, pc}
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800c9c4:	201e      	movs	r0, #30
 800c9c6:	f7f9 fb53 	bl	8006070 <HAL_NVIC_DisableIRQ>
 800c9ca:	e7f1      	b.n	800c9b0 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800c9cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c9d4:	f7f9 ff86 	bl	80068e4 <HAL_GPIO_DeInit>
 800c9d8:	e7ea      	b.n	800c9b0 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800c9da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c9de:	f7f9 ff81 	bl	80068e4 <HAL_GPIO_DeInit>
 800c9e2:	e7e5      	b.n	800c9b0 <TIM4_CNT_MspDeinit+0x30>
 800c9e4:	40021000 	.word	0x40021000
 800c9e8:	20004848 	.word	0x20004848

0800c9ec <COUNTER_PeriodElapsedCallback>:
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9ec:	6803      	ldr	r3, [r0, #0]
 800c9ee:	691a      	ldr	r2, [r3, #16]
 800c9f0:	07d1      	lsls	r1, r2, #31
 800c9f2:	d502      	bpl.n	800c9fa <COUNTER_PeriodElapsedCallback+0xe>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	07d2      	lsls	r2, r2, #31
 800c9f8:	d400      	bmi.n	800c9fc <COUNTER_PeriodElapsedCallback+0x10>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
			counterPeriodElapsedCallback(htim);
		}
	}
}
 800c9fa:	4770      	bx	lr
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9fc:	f06f 0201 	mvn.w	r2, #1
 800ca00:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 800ca02:	f7f6 bea7 	b.w	8003754 <counterPeriodElapsedCallback>
 800ca06:	bf00      	nop

0800ca08 <TIM_counter_etr_init>:
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 800ca08:	4b32      	ldr	r3, [pc, #200]	; (800cad4 <TIM_counter_etr_init+0xcc>)
 800ca0a:	691a      	ldr	r2, [r3, #16]
 800ca0c:	f042 0201 	orr.w	r2, r2, #1
void TIM_counter_etr_init(void){
 800ca10:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_FORCE_RESET();
 800ca12:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800ca14:	691a      	ldr	r2, [r3, #16]
 800ca16:	f022 0201 	bic.w	r2, r2, #1
 800ca1a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_FORCE_RESET();
 800ca1c:	691a      	ldr	r2, [r3, #16]
 800ca1e:	f042 0204 	orr.w	r2, r2, #4
 800ca22:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800ca24:	691a      	ldr	r2, [r3, #16]
 800ca26:	f022 0204 	bic.w	r2, r2, #4
 800ca2a:	611a      	str	r2, [r3, #16]
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800ca2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2e:	01db      	lsls	r3, r3, #7
void TIM_counter_etr_init(void){
 800ca30:	b08c      	sub	sp, #48	; 0x30
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800ca32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800ca36:	d445      	bmi.n	800cac4 <TIM_counter_etr_init+0xbc>
	}	else {
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800ca38:	f7fa fd6a 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800ca3c:	4e26      	ldr	r6, [pc, #152]	; (800cad8 <TIM_counter_etr_init+0xd0>)
 800ca3e:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800ca42:	4c26      	ldr	r4, [pc, #152]	; (800cadc <TIM_counter_etr_init+0xd4>)
	MX_TIM4_Init();
 800ca44:	f7ff fe18 	bl	800c678 <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800ca48:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800ca4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800ca4e:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800ca52:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800ca54:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800ca56:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca58:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca5c:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca5e:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800ca60:	f7fa ff20 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800ca64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800ca68:	a903      	add	r1, sp, #12
 800ca6a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800ca6c:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800ca6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800ca72:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800ca74:	f7fb fbd2 	bl	800821c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800ca78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800ca7c:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800ca7e:	a907      	add	r1, sp, #28
 800ca80:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800ca82:	9207      	str	r2, [sp, #28]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800ca84:	9308      	str	r3, [sp, #32]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800ca86:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800ca8a:	f7fb fc91 	bl	80083b0 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800ca8e:	4669      	mov	r1, sp
 800ca90:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca92:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca94:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800ca96:	f7fb ffff 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caa2:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800caa4:	699a      	ldr	r2, [r3, #24]
 800caa6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800caaa:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800caac:	699a      	ldr	r2, [r3, #24]
 800caae:	f042 0203 	orr.w	r2, r2, #3
 800cab2:	619a      	str	r2, [r3, #24]
	counter.tim4PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800cab4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cab8:	f7fa fd2a 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cabc:	f8c6 03bc 	str.w	r0, [r6, #956]	; 0x3bc
}
 800cac0:	b00c      	add	sp, #48	; 0x30
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cac4:	f7fa fd24 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cac8:	4e03      	ldr	r6, [pc, #12]	; (800cad8 <TIM_counter_etr_init+0xd0>)
 800caca:	0040      	lsls	r0, r0, #1
 800cacc:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800cad0:	e7b7      	b.n	800ca42 <TIM_counter_etr_init+0x3a>
 800cad2:	bf00      	nop
 800cad4:	40021000 	.word	0x40021000
 800cad8:	20004848 	.word	0x20004848
 800cadc:	2000cf5c 	.word	0x2000cf5c

0800cae0 <TIM_counter_ref_init>:
void TIM_counter_ref_init(void){
 800cae0:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800cae2:	4b27      	ldr	r3, [pc, #156]	; (800cb80 <TIM_counter_ref_init+0xa0>)
 800cae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae6:	01db      	lsls	r3, r3, #7
void TIM_counter_ref_init(void){
 800cae8:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800caea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800caee:	d43f      	bmi.n	800cb70 <TIM_counter_ref_init+0x90>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800caf0:	f7fa fd0e 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800caf4:	4b23      	ldr	r3, [pc, #140]	; (800cb84 <TIM_counter_ref_init+0xa4>)
 800caf6:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800cafa:	4c23      	ldr	r4, [pc, #140]	; (800cb88 <TIM_counter_ref_init+0xa8>)
	MX_TIM4_Init();
 800cafc:	f7ff fdbc 	bl	800c678 <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800cb00:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800cb02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800cb0a:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800cb0c:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800cb0e:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb10:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cb14:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb16:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800cb18:	f7fa fec4 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800cb1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800cb20:	a903      	add	r1, sp, #12
 800cb22:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800cb24:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800cb26:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800cb2a:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800cb2c:	f7fb fb76 	bl	800821c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800cb30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800cb34:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800cb36:	a907      	add	r1, sp, #28
 800cb38:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800cb3a:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800cb3e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800cb42:	f7fb fc35 	bl	80083b0 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cb46:	4620      	mov	r0, r4
 800cb48:	4669      	mov	r1, sp
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb4a:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb4c:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cb4e:	f7fb ffa3 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	68da      	ldr	r2, [r3, #12]
 800cb56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb5a:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800cb5c:	699a      	ldr	r2, [r3, #24]
 800cb5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cb62:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800cb64:	699a      	ldr	r2, [r3, #24]
 800cb66:	f042 0203 	orr.w	r2, r2, #3
 800cb6a:	619a      	str	r2, [r3, #24]
}
 800cb6c:	b00d      	add	sp, #52	; 0x34
 800cb6e:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cb70:	f7fa fcce 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb74:	4b03      	ldr	r3, [pc, #12]	; (800cb84 <TIM_counter_ref_init+0xa4>)
 800cb76:	0040      	lsls	r0, r0, #1
 800cb78:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800cb7c:	e7bd      	b.n	800cafa <TIM_counter_ref_init+0x1a>
 800cb7e:	bf00      	nop
 800cb80:	40021000 	.word	0x40021000
 800cb84:	20004848 	.word	0x20004848
 800cb88:	2000cf5c 	.word	0x2000cf5c

0800cb8c <TIM_counter_ic_init>:
void TIM_counter_ic_init(void){
 800cb8c:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800cb8e:	4b2d      	ldr	r3, [pc, #180]	; (800cc44 <TIM_counter_ic_init+0xb8>)
 800cb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb92:	01db      	lsls	r3, r3, #7
void TIM_counter_ic_init(void){
 800cb94:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cb96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800cb9a:	d44b      	bmi.n	800cc34 <TIM_counter_ic_init+0xa8>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800cb9c:	f7fa fcb8 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cba0:	4b29      	ldr	r3, [pc, #164]	; (800cc48 <TIM_counter_ic_init+0xbc>)
 800cba2:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800cba6:	4c29      	ldr	r4, [pc, #164]	; (800cc4c <TIM_counter_ic_init+0xc0>)
	MX_TIM4_Init();
 800cba8:	f7ff fd66 	bl	800c678 <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800cbac:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800cbb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cbb6:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800cbb8:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800cbba:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800cbbc:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cbbe:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbc4:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800cbc6:	f7fa fe6d 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cbca:	a90c      	add	r1, sp, #48	; 0x30
 800cbcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbd0:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7fb fb21 	bl	800821c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7fb f918 	bl	8007e10 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cbe0:	a901      	add	r1, sp, #4
 800cbe2:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cbe4:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cbe6:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cbe8:	f7fb ff56 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800cbec:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800cbee:	462a      	mov	r2, r5
 800cbf0:	a908      	add	r1, sp, #32
 800cbf2:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800cbf4:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800cbf6:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800cbf8:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800cbfc:	f7fb fa4c 	bl	8008098 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800cc00:	a908      	add	r1, sp, #32
 800cc02:	4620      	mov	r0, r4
 800cc04:	2204      	movs	r2, #4
 800cc06:	f7fb fa47 	bl	8008098 <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc12:	f042 0201 	orr.w	r2, r2, #1
 800cc16:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800cc18:	6a1a      	ldr	r2, [r3, #32]
 800cc1a:	f042 0211 	orr.w	r2, r2, #17
 800cc1e:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc26:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800cc28:	68da      	ldr	r2, [r3, #12]
 800cc2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc2e:	60da      	str	r2, [r3, #12]
}
 800cc30:	b00d      	add	sp, #52	; 0x34
 800cc32:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cc34:	f7fa fc6c 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc38:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <TIM_counter_ic_init+0xbc>)
 800cc3a:	0040      	lsls	r0, r0, #1
 800cc3c:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800cc40:	e7b1      	b.n	800cba6 <TIM_counter_ic_init+0x1a>
 800cc42:	bf00      	nop
 800cc44:	40021000 	.word	0x40021000
 800cc48:	20004848 	.word	0x20004848
 800cc4c:	2000cf5c 	.word	0x2000cf5c

0800cc50 <TIM_counter_ti_init>:
void TIM_counter_ti_init(void){
 800cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800cc52:	4b69      	ldr	r3, [pc, #420]	; (800cdf8 <TIM_counter_ti_init+0x1a8>)
 800cc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc56:	01db      	lsls	r3, r3, #7
void TIM_counter_ti_init(void){
 800cc58:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cc5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800cc5e:	f100 80bd 	bmi.w	800cddc <TIM_counter_ti_init+0x18c>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800cc62:	f7fa fc55 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc66:	4e65      	ldr	r6, [pc, #404]	; (800cdfc <TIM_counter_ti_init+0x1ac>)
 800cc68:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	if(counter.state == COUNTER_REF){
 800cc6c:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800cc70:	4b63      	ldr	r3, [pc, #396]	; (800ce00 <TIM_counter_ti_init+0x1b0>)
 800cc72:	4964      	ldr	r1, [pc, #400]	; (800ce04 <TIM_counter_ti_init+0x1b4>)
 800cc74:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800cc76:	2a04      	cmp	r2, #4
 800cc78:	f000 80b7 	beq.w	800cdea <TIM_counter_ti_init+0x19a>
	}else if(counter.state == COUNTER_ETR){
 800cc7c:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800cc80:	2a01      	cmp	r2, #1
 800cc82:	d007      	beq.n	800cc94 <TIM_counter_ti_init+0x44>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800cc84:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800cc88:	2a02      	cmp	r2, #2
 800cc8a:	d003      	beq.n	800cc94 <TIM_counter_ti_init+0x44>
 800cc8c:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800cc90:	2a03      	cmp	r2, #3
 800cc92:	d105      	bne.n	800cca0 <TIM_counter_ti_init+0x50>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800cc94:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800cc98:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800cc9c:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800cc9e:	60da      	str	r2, [r3, #12]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cca0:	2400      	movs	r4, #0
	HAL_TIM_Base_Init(&htim4);
 800cca2:	4857      	ldr	r0, [pc, #348]	; (800ce00 <TIM_counter_ti_init+0x1b0>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cca4:	609c      	str	r4, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cca6:	611c      	str	r4, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cca8:	619c      	str	r4, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800ccaa:	f7fa fdfb 	bl	80078a4 <HAL_TIM_Base_Init>
	if(counter.state == COUNTER_REF){
 800ccae:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800ccb2:	4853      	ldr	r0, [pc, #332]	; (800ce00 <TIM_counter_ti_init+0x1b0>)
	if(counter.state == COUNTER_REF){
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	af0c      	add	r7, sp, #48	; 0x30
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800ccb8:	bf0c      	ite	eq
 800ccba:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ccbe:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800ccc2:	f847 3d10 	str.w	r3, [r7, #-16]!
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800ccc6:	4639      	mov	r1, r7
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800ccc8:	bf04      	itt	eq
 800ccca:	e9cd 4409 	strdeq	r4, r4, [sp, #36]	; 0x24
		sClockSourceConfig.ClockFilter = 0;
 800ccce:	940b      	streq	r4, [sp, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800ccd0:	f7fb faa4 	bl	800821c <HAL_TIM_ConfigClockSource>
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800ccd4:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ccd8:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800ccda:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ccdc:	9204      	str	r2, [sp, #16]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800ccde:	f000 8089 	beq.w	800cdf4 <TIM_counter_ti_init+0x1a4>
 800cce2:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800cce6:	2b03      	cmp	r3, #3
 800cce8:	bf0c      	ite	eq
 800ccea:	2300      	moveq	r3, #0
 800ccec:	2380      	movne	r3, #128	; 0x80
	htim2.Instance = TIM2;
 800ccee:	4c46      	ldr	r4, [pc, #280]	; (800ce08 <TIM_counter_ti_init+0x1b8>)
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800ccf0:	4843      	ldr	r0, [pc, #268]	; (800ce00 <TIM_counter_ti_init+0x1b0>)
 800ccf2:	9306      	str	r3, [sp, #24]
 800ccf4:	a904      	add	r1, sp, #16
 800ccf6:	f7fb fecf 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	htim2.Init.Prescaler = 0;
 800ccfa:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800ccfc:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800cd00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cd04:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800cd06:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800cd08:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800cd0a:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cd0c:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd0e:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cd12:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800cd14:	f7fa fdc6 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cd18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800cd1c:	a904      	add	r1, sp, #16
 800cd1e:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cd20:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800cd22:	f7fb fa7b 	bl	800821c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800cd26:	4620      	mov	r0, r4
 800cd28:	f7fb f872 	bl	8007e10 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cd2c:	a901      	add	r1, sp, #4
 800cd2e:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd30:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd32:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800cd34:	f7fb feb0 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800cd38:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800cd40:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800cd42:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800cd44:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800cd48:	f7fb f9a6 	bl	8008098 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	4620      	mov	r0, r4
 800cd50:	2204      	movs	r2, #4
 800cd52:	f7fb f9a1 	bl	8008098 <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800cd56:	6823      	ldr	r3, [r4, #0]
void TIM_TI_Init(void)
{
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 800cd58:	4829      	ldr	r0, [pc, #164]	; (800ce00 <TIM_counter_ti_init+0x1b0>)
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800cd5a:	699a      	ldr	r2, [r3, #24]
 800cd5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd60:	f042 0201 	orr.w	r2, r2, #1
 800cd64:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800cd66:	6a1a      	ldr	r2, [r3, #32]
 800cd68:	f042 0211 	orr.w	r2, r2, #17
 800cd6c:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800cd6e:	68da      	ldr	r2, [r3, #12]
 800cd70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd74:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd7c:	60da      	str	r2, [r3, #12]
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	f022 0201 	bic.w	r2, r2, #1
 800cd84:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800cd86:	f7fa fe79 	bl	8007a7c <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	6a1a      	ldr	r2, [r3, #32]
 800cd8e:	f022 0201 	bic.w	r2, r2, #1
 800cd92:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800cd94:	6a1a      	ldr	r2, [r3, #32]
 800cd96:	f022 0210 	bic.w	r2, r2, #16
 800cd9a:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cd9c:	699a      	ldr	r2, [r3, #24]
 800cd9e:	f022 020c 	bic.w	r2, r2, #12
 800cda2:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cdaa:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cdb2:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800cdb4:	689a      	ldr	r2, [r3, #8]
 800cdb6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800cdba:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800cdbc:	689a      	ldr	r2, [r3, #8]
 800cdbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cdc2:	f022 0207 	bic.w	r2, r2, #7
 800cdc6:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800cdc8:	689a      	ldr	r2, [r3, #8]
 800cdca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cdce:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 800cdd0:	f886 53cd 	strb.w	r5, [r6, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 800cdd4:	f886 53ce 	strb.w	r5, [r6, #974]	; 0x3ce
}
 800cdd8:	b00d      	add	sp, #52	; 0x34
 800cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800cddc:	f7fa fb98 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800cde0:	4e06      	ldr	r6, [pc, #24]	; (800cdfc <TIM_counter_ti_init+0x1ac>)
 800cde2:	0040      	lsls	r0, r0, #1
 800cde4:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800cde8:	e740      	b.n	800cc6c <TIM_counter_ti_init+0x1c>
		htim4.Init.Prescaler = 59999;
 800cdea:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800cdee:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800cdf0:	60da      	str	r2, [r3, #12]
 800cdf2:	e755      	b.n	800cca0 <TIM_counter_ti_init+0x50>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e77a      	b.n	800ccee <TIM_counter_ti_init+0x9e>
 800cdf8:	40021000 	.word	0x40021000
 800cdfc:	20004848 	.word	0x20004848
 800ce00:	2000ce94 	.word	0x2000ce94
 800ce04:	40000800 	.word	0x40000800
 800ce08:	2000cf5c 	.word	0x2000cf5c

0800ce0c <TIM_etr_deinit>:
void TIM_etr_deinit(void){
 800ce0c:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ce0e:	4804      	ldr	r0, [pc, #16]	; (800ce20 <TIM_etr_deinit+0x14>)
 800ce10:	f7fa fde2 	bl	80079d8 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ce14:	4803      	ldr	r0, [pc, #12]	; (800ce24 <TIM_etr_deinit+0x18>)
}
 800ce16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800ce1a:	f7fa bddd 	b.w	80079d8 <HAL_TIM_Base_DeInit>
 800ce1e:	bf00      	nop
 800ce20:	2000cf5c 	.word	0x2000cf5c
 800ce24:	2000ce94 	.word	0x2000ce94

0800ce28 <TIM_ref_deinit>:
 800ce28:	b508      	push	{r3, lr}
 800ce2a:	4804      	ldr	r0, [pc, #16]	; (800ce3c <TIM_ref_deinit+0x14>)
 800ce2c:	f7fa fdd4 	bl	80079d8 <HAL_TIM_Base_DeInit>
 800ce30:	4803      	ldr	r0, [pc, #12]	; (800ce40 <TIM_ref_deinit+0x18>)
 800ce32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ce36:	f7fa bdcf 	b.w	80079d8 <HAL_TIM_Base_DeInit>
 800ce3a:	bf00      	nop
 800ce3c:	2000cf5c 	.word	0x2000cf5c
 800ce40:	2000ce94 	.word	0x2000ce94

0800ce44 <TIM_ic_deinit>:
 800ce44:	b508      	push	{r3, lr}
 800ce46:	4804      	ldr	r0, [pc, #16]	; (800ce58 <TIM_ic_deinit+0x14>)
 800ce48:	f7fa fdc6 	bl	80079d8 <HAL_TIM_Base_DeInit>
 800ce4c:	4803      	ldr	r0, [pc, #12]	; (800ce5c <TIM_ic_deinit+0x18>)
 800ce4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ce52:	f7fa bdc1 	b.w	80079d8 <HAL_TIM_Base_DeInit>
 800ce56:	bf00      	nop
 800ce58:	2000cf5c 	.word	0x2000cf5c
 800ce5c:	2000ce94 	.word	0x2000ce94

0800ce60 <TIM_ti_deinit>:
void TIM_ti_deinit(void){
 800ce60:	b510      	push	{r4, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ce62:	4c11      	ldr	r4, [pc, #68]	; (800cea8 <TIM_ti_deinit+0x48>)
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7fa fdb7 	bl	80079d8 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ce6a:	4810      	ldr	r0, [pc, #64]	; (800ceac <TIM_ti_deinit+0x4c>)
 800ce6c:	f7fa fdb4 	bl	80079d8 <HAL_TIM_Base_DeInit>
 * @retval None
 */
void TIM_TI_Deinit(void)
{
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	6a1a      	ldr	r2, [r3, #32]
 800ce74:	f022 0201 	bic.w	r2, r2, #1
 800ce78:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800ce7a:	6a1a      	ldr	r2, [r3, #32]
 800ce7c:	f022 0210 	bic.w	r2, r2, #16
 800ce80:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce82:	6a1a      	ldr	r2, [r3, #32]
 800ce84:	f022 020a 	bic.w	r2, r2, #10
 800ce88:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce8a:	6a1a      	ldr	r2, [r3, #32]
 800ce8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ce90:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ce98:	609a      	str	r2, [r3, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cea0:	f022 0207 	bic.w	r2, r2, #7
 800cea4:	609a      	str	r2, [r3, #8]
}
 800cea6:	bd10      	pop	{r4, pc}
 800cea8:	2000cf5c 	.word	0x2000cf5c
 800ceac:	2000ce94 	.word	0x2000ce94

0800ceb0 <TIM_ETR_Start>:
{
 800ceb0:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim2);
 800ceb2:	4d11      	ldr	r5, [pc, #68]	; (800cef8 <TIM_ETR_Start+0x48>)
	HAL_TIM_Base_Start(&htim4);
 800ceb4:	4e11      	ldr	r6, [pc, #68]	; (800cefc <TIM_ETR_Start+0x4c>)
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800ceb6:	4c12      	ldr	r4, [pc, #72]	; (800cf00 <TIM_ETR_Start+0x50>)
	HAL_TIM_Base_Start(&htim2);
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f7fa fdab 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800cebe:	4630      	mov	r0, r6
 800cec0:	f7fa fda8 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800cec4:	6829      	ldr	r1, [r5, #0]
 800cec6:	480f      	ldr	r0, [pc, #60]	; (800cf04 <TIM_ETR_Start+0x54>)
 800cec8:	3134      	adds	r1, #52	; 0x34
 800ceca:	4622      	mov	r2, r4
 800cecc:	2301      	movs	r3, #1
 800cece:	f7f9 faf3 	bl	80064b8 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800ced2:	6828      	ldr	r0, [r5, #0]
 800ced4:	68c3      	ldr	r3, [r0, #12]
 800ced6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ceda:	60c3      	str	r3, [r0, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cedc:	2201      	movs	r2, #1
 800cede:	2100      	movs	r1, #0
 800cee0:	f7fb fbf4 	bl	80086cc <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 800cee4:	6832      	ldr	r2, [r6, #0]
 800cee6:	6953      	ldr	r3, [r2, #20]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800cee8:	2100      	movs	r1, #0
 800ceea:	f043 0301 	orr.w	r3, r3, #1
 800ceee:	6153      	str	r3, [r2, #20]
 800cef0:	f884 1020 	strb.w	r1, [r4, #32]
}
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
 800cef6:	bf00      	nop
 800cef8:	2000cf5c 	.word	0x2000cf5c
 800cefc:	2000ce94 	.word	0x2000ce94
 800cf00:	20004bec 	.word	0x20004bec
 800cf04:	2000ced4 	.word	0x2000ced4

0800cf08 <TIM_ETR_Stop>:
{
 800cf08:	b508      	push	{r3, lr}
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 800cf0a:	4808      	ldr	r0, [pc, #32]	; (800cf2c <TIM_ETR_Stop+0x24>)
 800cf0c:	f7f9 fb2e 	bl	800656c <HAL_DMA_Abort_IT>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800cf10:	4807      	ldr	r0, [pc, #28]	; (800cf30 <TIM_ETR_Stop+0x28>)
 800cf12:	6802      	ldr	r2, [r0, #0]
 800cf14:	68d3      	ldr	r3, [r2, #12]
 800cf16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf1a:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Stop(&htim2);
 800cf1c:	f7fa fd8a 	bl	8007a34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800cf20:	4804      	ldr	r0, [pc, #16]	; (800cf34 <TIM_ETR_Stop+0x2c>)
}
 800cf22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim4);
 800cf26:	f7fa bd85 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800cf2a:	bf00      	nop
 800cf2c:	2000ced4 	.word	0x2000ced4
 800cf30:	2000cf5c 	.word	0x2000cf5c
 800cf34:	2000ce94 	.word	0x2000ce94

0800cf38 <TIM_IC_Start>:
{
 800cf38:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800cf3a:	4c13      	ldr	r4, [pc, #76]	; (800cf88 <TIM_IC_Start+0x50>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800cf3c:	4d13      	ldr	r5, [pc, #76]	; (800cf8c <TIM_IC_Start+0x54>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800cf3e:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800cf40:	4813      	ldr	r0, [pc, #76]	; (800cf90 <TIM_IC_Start+0x58>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800cf42:	68cb      	ldr	r3, [r1, #12]
 800cf44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf48:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800cf4a:	68cb      	ldr	r3, [r1, #12]
 800cf4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf50:	60cb      	str	r3, [r1, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800cf52:	88eb      	ldrh	r3, [r5, #6]
 800cf54:	3134      	adds	r1, #52	; 0x34
 800cf56:	f105 0210 	add.w	r2, r5, #16
 800cf5a:	f7f9 fa7b 	bl	8006454 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800cf5e:	6821      	ldr	r1, [r4, #0]
 800cf60:	892b      	ldrh	r3, [r5, #8]
 800cf62:	480c      	ldr	r0, [pc, #48]	; (800cf94 <TIM_IC_Start+0x5c>)
 800cf64:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800cf68:	3138      	adds	r1, #56	; 0x38
 800cf6a:	f7f9 fa73 	bl	8006454 <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f7fa fd50 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800cf74:	4808      	ldr	r0, [pc, #32]	; (800cf98 <TIM_IC_Start+0x60>)
 800cf76:	f7fa fd75 	bl	8007a64 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	6a13      	ldr	r3, [r2, #32]
 800cf7e:	f043 0311 	orr.w	r3, r3, #17
 800cf82:	6213      	str	r3, [r2, #32]
}
 800cf84:	bd38      	pop	{r3, r4, r5, pc}
 800cf86:	bf00      	nop
 800cf88:	2000cf5c 	.word	0x2000cf5c
 800cf8c:	20004848 	.word	0x20004848
 800cf90:	2000ce50 	.word	0x2000ce50
 800cf94:	2000cf18 	.word	0x2000cf18
 800cf98:	2000ce94 	.word	0x2000ce94

0800cf9c <TIM_IC_Stop>:
{
 800cf9c:	b510      	push	{r4, lr}
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800cf9e:	4c0e      	ldr	r4, [pc, #56]	; (800cfd8 <TIM_IC_Stop+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800cfa0:	480e      	ldr	r0, [pc, #56]	; (800cfdc <TIM_IC_Stop+0x40>)
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800cfa2:	6822      	ldr	r2, [r4, #0]
 800cfa4:	6a13      	ldr	r3, [r2, #32]
 800cfa6:	f023 0311 	bic.w	r3, r3, #17
 800cfaa:	6213      	str	r3, [r2, #32]
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800cfac:	f7f9 fac4 	bl	8006538 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800cfb0:	480b      	ldr	r0, [pc, #44]	; (800cfe0 <TIM_IC_Stop+0x44>)
 800cfb2:	f7f9 fac1 	bl	8006538 <HAL_DMA_Abort>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800cfb6:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800cfb8:	480a      	ldr	r0, [pc, #40]	; (800cfe4 <TIM_IC_Stop+0x48>)
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800cfba:	68da      	ldr	r2, [r3, #12]
 800cfbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cfc0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800cfc2:	68da      	ldr	r2, [r3, #12]
 800cfc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc8:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 800cfca:	f7fa fd57 	bl	8007a7c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800cfce:	4620      	mov	r0, r4
}
 800cfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim2);
 800cfd4:	f7fa bd2e 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800cfd8:	2000cf5c 	.word	0x2000cf5c
 800cfdc:	2000ce50 	.word	0x2000ce50
 800cfe0:	2000cf18 	.word	0x2000cf18
 800cfe4:	2000ce94 	.word	0x2000ce94

0800cfe8 <TIM_TI_Start>:
{
 800cfe8:	b538      	push	{r3, r4, r5, lr}
	if(counter.abba == BIN1){
 800cfea:	4c59      	ldr	r4, [pc, #356]	; (800d150 <TIM_TI_Start+0x168>)
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800cfec:	4d59      	ldr	r5, [pc, #356]	; (800d154 <TIM_TI_Start+0x16c>)
	xStartTime = xTaskGetTickCount();
 800cfee:	f7fc ffcd 	bl	8009f8c <xTaskGetTickCount>
	if(counter.abba == BIN1){
 800cff2:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
	xStartTime = xTaskGetTickCount();
 800cff6:	4a58      	ldr	r2, [pc, #352]	; (800d158 <TIM_TI_Start+0x170>)
	if(counter.abba == BIN1){
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b01      	cmp	r3, #1
	xStartTime = xTaskGetTickCount();
 800cffc:	6010      	str	r0, [r2, #0]
	if(counter.abba == BIN1){
 800cffe:	d055      	beq.n	800d0ac <TIM_TI_Start+0xc4>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d000:	6829      	ldr	r1, [r5, #0]
 800d002:	4856      	ldr	r0, [pc, #344]	; (800d15c <TIM_TI_Start+0x174>)
 800d004:	2301      	movs	r3, #1
 800d006:	3138      	adds	r1, #56	; 0x38
 800d008:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 800d00c:	f7f9 fa22 	bl	8006454 <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800d010:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 800d014:	b1b3      	cbz	r3, 800d044 <TIM_TI_Start+0x5c>
	HAL_TIM_Base_Start(&htim2);
 800d016:	484f      	ldr	r0, [pc, #316]	; (800d154 <TIM_TI_Start+0x16c>)
 800d018:	f7fa fcfc 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800d01c:	4850      	ldr	r0, [pc, #320]	; (800d160 <TIM_TI_Start+0x178>)
 800d01e:	f7fa fd21 	bl	8007a64 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d022:	682b      	ldr	r3, [r5, #0]
 800d024:	68da      	ldr	r2, [r3, #12]
 800d026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d02a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d032:	60da      	str	r2, [r3, #12]
	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 800d034:	f894 23ca 	ldrb.w	r2, [r4, #970]	; 0x3ca
 800d038:	b11a      	cbz	r2, 800d042 <TIM_TI_Start+0x5a>
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800d03a:	6a1a      	ldr	r2, [r3, #32]
 800d03c:	f042 0211 	orr.w	r2, r2, #17
 800d040:	621a      	str	r2, [r3, #32]
}
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	4a47      	ldr	r2, [pc, #284]	; (800d164 <TIM_TI_Start+0x17c>)
			if(counter.eventChan2==EVENT_FALLING){
 800d046:	f894 13cc 	ldrb.w	r1, [r4, #972]	; 0x3cc
 800d04a:	6813      	ldr	r3, [r2, #0]
 800d04c:	2901      	cmp	r1, #1
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 800d04e:	bf0c      	ite	eq
 800d050:	f043 0320 	orreq.w	r3, r3, #32
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 800d054:	f023 0320 	bicne.w	r3, r3, #32
 800d058:	6013      	str	r3, [r2, #0]
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
	if(counter.eventChan1==EVENT_RISING){
 800d05a:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 800d05e:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d060:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 800d062:	2900      	cmp	r1, #0
 800d064:	d05b      	beq.n	800d11e <TIM_TI_Start+0x136>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d066:	f023 0308 	bic.w	r3, r3, #8
 800d06a:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d06c:	6a13      	ldr	r3, [r2, #32]
 800d06e:	f043 0302 	orr.w	r3, r3, #2
 800d072:	6213      	str	r3, [r2, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 800d074:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d057      	beq.n	800d12c <TIM_TI_Start+0x144>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d07c:	6a13      	ldr	r3, [r2, #32]
 800d07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d082:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d084:	6a13      	ldr	r3, [r2, #32]
 800d086:	f043 0320 	orr.w	r3, r3, #32
 800d08a:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 800d08c:	3220      	adds	r2, #32
 800d08e:	2301      	movs	r3, #1
 800d090:	4934      	ldr	r1, [pc, #208]	; (800d164 <TIM_TI_Start+0x17c>)
 800d092:	4835      	ldr	r0, [pc, #212]	; (800d168 <TIM_TI_Start+0x180>)
 800d094:	f7f9 f9de 	bl	8006454 <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d098:	682b      	ldr	r3, [r5, #0]
 800d09a:	6a1a      	ldr	r2, [r3, #32]
 800d09c:	f022 0210 	bic.w	r2, r2, #16
 800d0a0:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 800d0a2:	6a1a      	ldr	r2, [r3, #32]
 800d0a4:	f042 0201 	orr.w	r2, r2, #1
 800d0a8:	621a      	str	r2, [r3, #32]
 800d0aa:	e7b4      	b.n	800d016 <TIM_TI_Start+0x2e>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d0ac:	6829      	ldr	r1, [r5, #0]
 800d0ae:	482e      	ldr	r0, [pc, #184]	; (800d168 <TIM_TI_Start+0x180>)
 800d0b0:	3134      	adds	r1, #52	; 0x34
 800d0b2:	f104 0210 	add.w	r2, r4, #16
 800d0b6:	f7f9 f9cd 	bl	8006454 <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800d0ba:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1a9      	bne.n	800d016 <TIM_TI_Start+0x2e>
 800d0c2:	4a2a      	ldr	r2, [pc, #168]	; (800d16c <TIM_TI_Start+0x184>)
			if(counter.eventChan1==EVENT_FALLING){
 800d0c4:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 800d0c8:	6813      	ldr	r3, [r2, #0]
 800d0ca:	2901      	cmp	r1, #1
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 800d0cc:	bf0c      	ite	eq
 800d0ce:	f043 0302 	orreq.w	r3, r3, #2
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 800d0d2:	f023 0302 	bicne.w	r3, r3, #2
 800d0d6:	6013      	str	r3, [r2, #0]
	if(counter.eventChan1==EVENT_RISING){
 800d0d8:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 800d0dc:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0de:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 800d0e0:	bb49      	cbnz	r1, 800d136 <TIM_TI_Start+0x14e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0e2:	f023 030a 	bic.w	r3, r3, #10
 800d0e6:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 800d0e8:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 800d0ec:	b35b      	cbz	r3, 800d146 <TIM_TI_Start+0x15e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d0ee:	6a13      	ldr	r3, [r2, #32]
 800d0f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0f4:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d0f6:	6a13      	ldr	r3, [r2, #32]
 800d0f8:	f043 0320 	orr.w	r3, r3, #32
 800d0fc:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 800d0fe:	3220      	adds	r2, #32
 800d100:	2301      	movs	r3, #1
 800d102:	491a      	ldr	r1, [pc, #104]	; (800d16c <TIM_TI_Start+0x184>)
 800d104:	4815      	ldr	r0, [pc, #84]	; (800d15c <TIM_TI_Start+0x174>)
 800d106:	f7f9 f9a5 	bl	8006454 <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	6a1a      	ldr	r2, [r3, #32]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 800d114:	6a1a      	ldr	r2, [r3, #32]
 800d116:	f042 0210 	orr.w	r2, r2, #16
 800d11a:	621a      	str	r2, [r3, #32]
 800d11c:	e77b      	b.n	800d016 <TIM_TI_Start+0x2e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d11e:	f023 030a 	bic.w	r3, r3, #10
 800d122:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 800d124:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1a7      	bne.n	800d07c <TIM_TI_Start+0x94>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d12c:	6a13      	ldr	r3, [r2, #32]
 800d12e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d132:	6213      	str	r3, [r2, #32]
 800d134:	e7aa      	b.n	800d08c <TIM_TI_Start+0xa4>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d136:	f023 0308 	bic.w	r3, r3, #8
 800d13a:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d13c:	6a13      	ldr	r3, [r2, #32]
 800d13e:	f043 0302 	orr.w	r3, r3, #2
 800d142:	6213      	str	r3, [r2, #32]
 800d144:	e7d0      	b.n	800d0e8 <TIM_TI_Start+0x100>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d146:	6a13      	ldr	r3, [r2, #32]
 800d148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d14c:	6213      	str	r3, [r2, #32]
 800d14e:	e7d6      	b.n	800d0fe <TIM_TI_Start+0x116>
 800d150:	20004848 	.word	0x20004848
 800d154:	2000cf5c 	.word	0x2000cf5c
 800d158:	20004840 	.word	0x20004840
 800d15c:	2000cf18 	.word	0x2000cf18
 800d160:	2000ce94 	.word	0x2000ce94
 800d164:	2000000c 	.word	0x2000000c
 800d168:	2000ce50 	.word	0x2000ce50
 800d16c:	20000008 	.word	0x20000008

0800d170 <TIM_TI_Stop>:
{
 800d170:	b510      	push	{r4, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d172:	480f      	ldr	r0, [pc, #60]	; (800d1b0 <TIM_TI_Stop+0x40>)
	HAL_TIM_Base_Stop(&htim2);
 800d174:	4c0f      	ldr	r4, [pc, #60]	; (800d1b4 <TIM_TI_Stop+0x44>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d176:	f7f9 f9df 	bl	8006538 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d17a:	480f      	ldr	r0, [pc, #60]	; (800d1b8 <TIM_TI_Stop+0x48>)
 800d17c:	f7f9 f9dc 	bl	8006538 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop_IT(&htim4);
 800d180:	480e      	ldr	r0, [pc, #56]	; (800d1bc <TIM_TI_Stop+0x4c>)
 800d182:	f7fa fc7b 	bl	8007a7c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800d186:	4620      	mov	r0, r4
 800d188:	f7fa fc54 	bl	8007a34 <HAL_TIM_Base_Stop>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	6a1a      	ldr	r2, [r3, #32]
 800d190:	f022 0201 	bic.w	r2, r2, #1
 800d194:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d196:	6a1a      	ldr	r2, [r3, #32]
 800d198:	f022 0210 	bic.w	r2, r2, #16
 800d19c:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d19e:	68da      	ldr	r2, [r3, #12]
 800d1a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d1a4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1ac:	60da      	str	r2, [r3, #12]
}
 800d1ae:	bd10      	pop	{r4, pc}
 800d1b0:	2000ce50 	.word	0x2000ce50
 800d1b4:	2000cf5c 	.word	0x2000cf5c
 800d1b8:	2000cf18 	.word	0x2000cf18
 800d1bc:	2000ce94 	.word	0x2000ce94

0800d1c0 <TIM_IC_DutyCycleDmaRestart>:
{
 800d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d1c4:	4f0d      	ldr	r7, [pc, #52]	; (800d1fc <TIM_IC_DutyCycleDmaRestart+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d1c6:	4c0e      	ldr	r4, [pc, #56]	; (800d200 <TIM_IC_DutyCycleDmaRestart+0x40>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d1c8:	4e0e      	ldr	r6, [pc, #56]	; (800d204 <TIM_IC_DutyCycleDmaRestart+0x44>)
 800d1ca:	4d0f      	ldr	r5, [pc, #60]	; (800d208 <TIM_IC_DutyCycleDmaRestart+0x48>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f7f9 f9b3 	bl	8006538 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f7f9 f9b0 	bl	8006538 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d1d8:	6831      	ldr	r1, [r6, #0]
 800d1da:	462a      	mov	r2, r5
 800d1dc:	4638      	mov	r0, r7
 800d1de:	3134      	adds	r1, #52	; 0x34
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f7f9 f937 	bl	8006454 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d1e6:	6831      	ldr	r1, [r6, #0]
 800d1e8:	f505 72dc 	add.w	r2, r5, #440	; 0x1b8
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	3138      	adds	r1, #56	; 0x38
 800d1f0:	2301      	movs	r3, #1
}
 800d1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d1f6:	f7f9 b92d 	b.w	8006454 <HAL_DMA_Start>
 800d1fa:	bf00      	nop
 800d1fc:	2000ce50 	.word	0x2000ce50
 800d200:	2000cf18 	.word	0x2000cf18
 800d204:	2000cf5c 	.word	0x2000cf5c
 800d208:	20004858 	.word	0x20004858

0800d20c <TIM_IC_DutyCycle_Init>:
{
 800d20c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 800d20e:	4836      	ldr	r0, [pc, #216]	; (800d2e8 <TIM_IC_DutyCycle_Init+0xdc>)
 800d210:	f7fa fc34 	bl	8007a7c <HAL_TIM_Base_Stop_IT>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d214:	4b35      	ldr	r3, [pc, #212]	; (800d2ec <TIM_IC_DutyCycle_Init+0xe0>)
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800d216:	4936      	ldr	r1, [pc, #216]	; (800d2f0 <TIM_IC_DutyCycle_Init+0xe4>)
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6a1a      	ldr	r2, [r3, #32]
 800d21c:	f022 0201 	bic.w	r2, r2, #1
 800d220:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d222:	6a1a      	ldr	r2, [r3, #32]
 800d224:	f022 0210 	bic.w	r2, r2, #16
 800d228:	621a      	str	r2, [r3, #32]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800d22a:	f891 23c8 	ldrb.w	r2, [r1, #968]	; 0x3c8
 800d22e:	2a01      	cmp	r2, #1
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d230:	699a      	ldr	r2, [r3, #24]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800d232:	d031      	beq.n	800d298 <TIM_IC_DutyCycle_Init+0x8c>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d234:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d238:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d23a:	699a      	ldr	r2, [r3, #24]
 800d23c:	f022 0203 	bic.w	r2, r2, #3
 800d240:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 800d242:	699a      	ldr	r2, [r3, #24]
 800d244:	f042 0202 	orr.w	r2, r2, #2
 800d248:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d24a:	6a1a      	ldr	r2, [r3, #32]
 800d24c:	f022 0208 	bic.w	r2, r2, #8
 800d250:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	f042 0202 	orr.w	r2, r2, #2
 800d258:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d25a:	699a      	ldr	r2, [r3, #24]
 800d25c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d260:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d268:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d26a:	6a1a      	ldr	r2, [r3, #32]
 800d26c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d270:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d272:	689a      	ldr	r2, [r3, #8]
 800d274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d278:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800d27a:	689a      	ldr	r2, [r3, #8]
 800d27c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d280:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d282:	689a      	ldr	r2, [r3, #8]
 800d284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d288:	f022 0207 	bic.w	r2, r2, #7
 800d28c:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	f042 0204 	orr.w	r2, r2, #4
 800d294:	609a      	str	r2, [r3, #8]
}
 800d296:	bd08      	pop	{r3, pc}
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d298:	f022 020c 	bic.w	r2, r2, #12
 800d29c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d29e:	699a      	ldr	r2, [r3, #24]
 800d2a0:	f022 0203 	bic.w	r2, r2, #3
 800d2a4:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 800d2a6:	699a      	ldr	r2, [r3, #24]
 800d2a8:	f042 0201 	orr.w	r2, r2, #1
 800d2ac:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2ae:	6a1a      	ldr	r2, [r3, #32]
 800d2b0:	f022 020a 	bic.w	r2, r2, #10
 800d2b4:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d2b6:	699a      	ldr	r2, [r3, #24]
 800d2b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d2bc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 800d2be:	699a      	ldr	r2, [r3, #24]
 800d2c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2c4:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d2c6:	6a1a      	ldr	r2, [r3, #32]
 800d2c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2cc:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d2ce:	6a1a      	ldr	r2, [r3, #32]
 800d2d0:	f042 0220 	orr.w	r2, r2, #32
 800d2d4:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2dc:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d2e4:	609a      	str	r2, [r3, #8]
 800d2e6:	e7cc      	b.n	800d282 <TIM_IC_DutyCycle_Init+0x76>
 800d2e8:	2000ce94 	.word	0x2000ce94
 800d2ec:	2000cf5c 	.word	0x2000cf5c
 800d2f0:	20004848 	.word	0x20004848

0800d2f4 <TIM_IC_DutyCycle_Deinit>:
{
 800d2f4:	b538      	push	{r3, r4, r5, lr}
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d2f6:	4c25      	ldr	r4, [pc, #148]	; (800d38c <TIM_IC_DutyCycle_Deinit+0x98>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d2f8:	4d25      	ldr	r5, [pc, #148]	; (800d390 <TIM_IC_DutyCycle_Deinit+0x9c>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d2fa:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d2fc:	4825      	ldr	r0, [pc, #148]	; (800d394 <TIM_IC_DutyCycle_Deinit+0xa0>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d2fe:	698b      	ldr	r3, [r1, #24]
 800d300:	f023 0303 	bic.w	r3, r3, #3
 800d304:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 800d306:	698b      	ldr	r3, [r1, #24]
 800d308:	f043 0301 	orr.w	r3, r3, #1
 800d30c:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d30e:	6a0b      	ldr	r3, [r1, #32]
 800d310:	f023 030a 	bic.w	r3, r3, #10
 800d314:	620b      	str	r3, [r1, #32]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d316:	698b      	ldr	r3, [r1, #24]
 800d318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d31c:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 800d31e:	698b      	ldr	r3, [r1, #24]
 800d320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d324:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d326:	6a0b      	ldr	r3, [r1, #32]
 800d328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d32c:	620b      	str	r3, [r1, #32]
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d32e:	688b      	ldr	r3, [r1, #8]
 800d330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d334:	608b      	str	r3, [r1, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d336:	688b      	ldr	r3, [r1, #8]
 800d338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d33c:	f023 0307 	bic.w	r3, r3, #7
 800d340:	608b      	str	r3, [r1, #8]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d342:	88eb      	ldrh	r3, [r5, #6]
 800d344:	3134      	adds	r1, #52	; 0x34
 800d346:	f105 0210 	add.w	r2, r5, #16
 800d34a:	f7f9 f883 	bl	8006454 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800d34e:	6821      	ldr	r1, [r4, #0]
 800d350:	892b      	ldrh	r3, [r5, #8]
 800d352:	4811      	ldr	r0, [pc, #68]	; (800d398 <TIM_IC_DutyCycle_Deinit+0xa4>)
 800d354:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800d358:	3138      	adds	r1, #56	; 0x38
 800d35a:	f7f9 f87b 	bl	8006454 <HAL_DMA_Start>
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 800d35e:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 800d360:	480e      	ldr	r0, [pc, #56]	; (800d39c <TIM_IC_DutyCycle_Deinit+0xa8>)
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 800d362:	68da      	ldr	r2, [r3, #12]
 800d364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d368:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d370:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 800d372:	f7fa fb77 	bl	8007a64 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	6a1a      	ldr	r2, [r3, #32]
 800d37a:	f042 0201 	orr.w	r2, r2, #1
 800d37e:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 800d380:	6a1a      	ldr	r2, [r3, #32]
 800d382:	f042 0210 	orr.w	r2, r2, #16
 800d386:	621a      	str	r2, [r3, #32]
}
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	bf00      	nop
 800d38c:	2000cf5c 	.word	0x2000cf5c
 800d390:	20004848 	.word	0x20004848
 800d394:	2000ce50 	.word	0x2000ce50
 800d398:	2000cf18 	.word	0x2000cf18
 800d39c:	2000ce94 	.word	0x2000ce94

0800d3a0 <TIM_IC_DutyCycle_Start>:
{
 800d3a0:	b538      	push	{r3, r4, r5, lr}
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d3a2:	4d16      	ldr	r5, [pc, #88]	; (800d3fc <TIM_IC_DutyCycle_Start+0x5c>)
 800d3a4:	4c16      	ldr	r4, [pc, #88]	; (800d400 <TIM_IC_DutyCycle_Start+0x60>)
 800d3a6:	6829      	ldr	r1, [r5, #0]
 800d3a8:	4816      	ldr	r0, [pc, #88]	; (800d404 <TIM_IC_DutyCycle_Start+0x64>)
 800d3aa:	3134      	adds	r1, #52	; 0x34
 800d3ac:	4622      	mov	r2, r4
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f7f9 f850 	bl	8006454 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d3b4:	6829      	ldr	r1, [r5, #0]
 800d3b6:	4814      	ldr	r0, [pc, #80]	; (800d408 <TIM_IC_DutyCycle_Start+0x68>)
 800d3b8:	3138      	adds	r1, #56	; 0x38
 800d3ba:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f7f9 f848 	bl	8006454 <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f7fa fb25 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800d3ca:	4810      	ldr	r0, [pc, #64]	; (800d40c <TIM_IC_DutyCycle_Start+0x6c>)
 800d3cc:	f7fa fb4a 	bl	8007a64 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	68da      	ldr	r2, [r3, #12]
 800d3d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3d8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800d3da:	68da      	ldr	r2, [r3, #12]
 800d3dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3e0:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 800d3e2:	6a1a      	ldr	r2, [r3, #32]
 800d3e4:	f042 0210 	orr.w	r2, r2, #16
 800d3e8:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 800d3ea:	6a1a      	ldr	r2, [r3, #32]
	counter.bin = BIN0;
 800d3ec:	2100      	movs	r1, #0
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 800d3ee:	f042 0201 	orr.w	r2, r2, #1
 800d3f2:	621a      	str	r2, [r3, #32]
	counter.bin = BIN0;
 800d3f4:	f884 13bd 	strb.w	r1, [r4, #957]	; 0x3bd
}
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	2000cf5c 	.word	0x2000cf5c
 800d400:	20004858 	.word	0x20004858
 800d404:	2000ce50 	.word	0x2000ce50
 800d408:	2000cf18 	.word	0x2000cf18
 800d40c:	2000ce94 	.word	0x2000ce94

0800d410 <TIM_IC_DutyCycle_Stop>:
{
 800d410:	b508      	push	{r3, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d412:	480c      	ldr	r0, [pc, #48]	; (800d444 <TIM_IC_DutyCycle_Stop+0x34>)
 800d414:	f7f9 f890 	bl	8006538 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d418:	480b      	ldr	r0, [pc, #44]	; (800d448 <TIM_IC_DutyCycle_Stop+0x38>)
 800d41a:	f7f9 f88d 	bl	8006538 <HAL_DMA_Abort>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d41e:	4b0b      	ldr	r3, [pc, #44]	; (800d44c <TIM_IC_DutyCycle_Stop+0x3c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6a1a      	ldr	r2, [r3, #32]
 800d424:	f022 0201 	bic.w	r2, r2, #1
 800d428:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d42a:	6a1a      	ldr	r2, [r3, #32]
 800d42c:	f022 0210 	bic.w	r2, r2, #16
 800d430:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d432:	68da      	ldr	r2, [r3, #12]
 800d434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d438:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800d43a:	68da      	ldr	r2, [r3, #12]
 800d43c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d440:	60da      	str	r2, [r3, #12]
}
 800d442:	bd08      	pop	{r3, pc}
 800d444:	2000ce50 	.word	0x2000ce50
 800d448:	2000cf18 	.word	0x2000cf18
 800d44c:	2000cf5c 	.word	0x2000cf5c

0800d450 <TIM_ETRP_Config>:
	uint32_t smcr = htim2.Instance->SMCR;
 800d450:	4b34      	ldr	r3, [pc, #208]	; (800d524 <TIM_ETRP_Config+0xd4>)
{
 800d452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t smcr = htim2.Instance->SMCR;
 800d456:	681c      	ldr	r4, [r3, #0]
	if(freq < (counter.tim2PrphClk / 4)){
 800d458:	4d33      	ldr	r5, [pc, #204]	; (800d528 <TIM_ETRP_Config+0xd8>)
	uint32_t smcr = htim2.Instance->SMCR;
 800d45a:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if(freq < (counter.tim2PrphClk / 4)){
 800d45e:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
{
 800d462:	ec57 6b10 	vmov	r6, r7, d0
	if(freq < (counter.tim2PrphClk / 4)){
 800d466:	0880      	lsrs	r0, r0, #2
 800d468:	f7f3 f804 	bl	8000474 <__aeabi_ui2d>
 800d46c:	4632      	mov	r2, r6
 800d46e:	463b      	mov	r3, r7
 800d470:	f7f3 fb0a 	bl	8000a88 <__aeabi_dcmpgt>
 800d474:	2800      	cmp	r0, #0
 800d476:	d142      	bne.n	800d4fe <TIM_ETRP_Config+0xae>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 800d478:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 800d47c:	0880      	lsrs	r0, r0, #2
 800d47e:	f7f2 fff9 	bl	8000474 <__aeabi_ui2d>
 800d482:	4632      	mov	r2, r6
 800d484:	463b      	mov	r3, r7
 800d486:	f408 5840 	and.w	r8, r8, #12288	; 0x3000
 800d48a:	f7f3 fae9 	bl	8000a60 <__aeabi_dcmple>
 800d48e:	b9f8      	cbnz	r0, 800d4d0 <TIM_ETRP_Config+0x80>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 800d490:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 800d494:	0840      	lsrs	r0, r0, #1
 800d496:	f7f2 ffed 	bl	8000474 <__aeabi_ui2d>
 800d49a:	4632      	mov	r2, r6
 800d49c:	463b      	mov	r3, r7
 800d49e:	f7f3 fadf 	bl	8000a60 <__aeabi_dcmple>
 800d4a2:	b140      	cbz	r0, 800d4b6 <TIM_ETRP_Config+0x66>
 800d4a4:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 800d4a8:	f7f2 ffe4 	bl	8000474 <__aeabi_ui2d>
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	463b      	mov	r3, r7
 800d4b0:	f7f3 faea 	bl	8000a88 <__aeabi_dcmpgt>
 800d4b4:	bb48      	cbnz	r0, 800d50a <TIM_ETRP_Config+0xba>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 800d4b6:	f5b8 5f40 	cmp.w	r8, #12288	; 0x3000
 800d4ba:	d007      	beq.n	800d4cc <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d4c2:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 800d4c4:	68a3      	ldr	r3, [r4, #8]
 800d4c6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800d4ca:	60a3      	str	r3, [r4, #8]
}
 800d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 800d4d0:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 800d4d4:	0840      	lsrs	r0, r0, #1
 800d4d6:	f7f2 ffcd 	bl	8000474 <__aeabi_ui2d>
 800d4da:	4632      	mov	r2, r6
 800d4dc:	463b      	mov	r3, r7
 800d4de:	f7f3 fad3 	bl	8000a88 <__aeabi_dcmpgt>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d0d4      	beq.n	800d490 <TIM_ETRP_Config+0x40>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 800d4e6:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 800d4ea:	d0ef      	beq.n	800d4cc <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800d4ec:	68a3      	ldr	r3, [r4, #8]
 800d4ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d4f2:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 800d4f4:	68a3      	ldr	r3, [r4, #8]
 800d4f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4fa:	60a3      	str	r3, [r4, #8]
 800d4fc:	e7e6      	b.n	800d4cc <TIM_ETRP_Config+0x7c>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d504:	60a3      	str	r3, [r4, #8]
}
 800d506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 800d50a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800d50e:	d0dd      	beq.n	800d4cc <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800d510:	68a3      	ldr	r3, [r4, #8]
 800d512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d516:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 800d518:	68a3      	ldr	r3, [r4, #8]
 800d51a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d51e:	60a3      	str	r3, [r4, #8]
 800d520:	e7d4      	b.n	800d4cc <TIM_ETRP_Config+0x7c>
 800d522:	bf00      	nop
 800d524:	2000cf5c 	.word	0x2000cf5c
 800d528:	20004848 	.word	0x20004848

0800d52c <TIM_IC1_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d52c:	4b0e      	ldr	r3, [pc, #56]	; (800d568 <TIM_IC1_PSC_Config+0x3c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	699a      	ldr	r2, [r3, #24]
 800d532:	f022 020c 	bic.w	r2, r2, #12
 800d536:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 800d538:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800d53a:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800d53c:	d00f      	beq.n	800d55e <TIM_IC1_PSC_Config+0x32>
 800d53e:	2808      	cmp	r0, #8
 800d540:	d009      	beq.n	800d556 <TIM_IC1_PSC_Config+0x2a>
 800d542:	2802      	cmp	r0, #2
 800d544:	d003      	beq.n	800d54e <TIM_IC1_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 800d546:	f022 020c 	bic.w	r2, r2, #12
 800d54a:	619a      	str	r2, [r3, #24]
}
 800d54c:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 800d54e:	f042 0204 	orr.w	r2, r2, #4
 800d552:	619a      	str	r2, [r3, #24]
 800d554:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 800d556:	f042 020c 	orr.w	r2, r2, #12
 800d55a:	619a      	str	r2, [r3, #24]
 800d55c:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800d55e:	f042 0208 	orr.w	r2, r2, #8
 800d562:	619a      	str	r2, [r3, #24]
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	2000cf5c 	.word	0x2000cf5c

0800d56c <TIM_IC2_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d56c:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <TIM_IC2_PSC_Config+0x3c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	699a      	ldr	r2, [r3, #24]
 800d572:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d576:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 800d578:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800d57a:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800d57c:	d00f      	beq.n	800d59e <TIM_IC2_PSC_Config+0x32>
 800d57e:	2808      	cmp	r0, #8
 800d580:	d009      	beq.n	800d596 <TIM_IC2_PSC_Config+0x2a>
 800d582:	2802      	cmp	r0, #2
 800d584:	d003      	beq.n	800d58e <TIM_IC2_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 800d586:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d58a:	619a      	str	r2, [r3, #24]
}
 800d58c:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 800d58e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d592:	619a      	str	r2, [r3, #24]
 800d594:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 800d596:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 800d59a:	619a      	str	r2, [r3, #24]
 800d59c:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800d59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5a2:	619a      	str	r2, [r3, #24]
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	2000cf5c 	.word	0x2000cf5c

0800d5ac <TIM_IC1_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5ac:	4b03      	ldr	r3, [pc, #12]	; (800d5bc <TIM_IC1_RisingFalling+0x10>)
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	6a13      	ldr	r3, [r2, #32]
 800d5b2:	f043 030a 	orr.w	r3, r3, #10
 800d5b6:	6213      	str	r3, [r2, #32]
}
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	2000cf5c 	.word	0x2000cf5c

0800d5c0 <TIM_IC1_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5c0:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <TIM_IC1_RisingOnly+0x10>)
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a13      	ldr	r3, [r2, #32]
 800d5c6:	f023 030a 	bic.w	r3, r3, #10
 800d5ca:	6213      	str	r3, [r2, #32]
}
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	2000cf5c 	.word	0x2000cf5c

0800d5d4 <TIM_IC1_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d5d4:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <TIM_IC1_FallingOnly+0x18>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a1a      	ldr	r2, [r3, #32]
 800d5da:	f022 0208 	bic.w	r2, r2, #8
 800d5de:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d5e0:	6a1a      	ldr	r2, [r3, #32]
 800d5e2:	f042 0202 	orr.w	r2, r2, #2
 800d5e6:	621a      	str	r2, [r3, #32]
}
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	2000cf5c 	.word	0x2000cf5c

0800d5f0 <TIM_IC2_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5f0:	4b03      	ldr	r3, [pc, #12]	; (800d600 <TIM_IC2_RisingFalling+0x10>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6a13      	ldr	r3, [r2, #32]
 800d5f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800d5fa:	6213      	str	r3, [r2, #32]
}
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	2000cf5c 	.word	0x2000cf5c

0800d604 <TIM_IC2_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d604:	4b03      	ldr	r3, [pc, #12]	; (800d614 <TIM_IC2_RisingOnly+0x10>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	6a13      	ldr	r3, [r2, #32]
 800d60a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d60e:	6213      	str	r3, [r2, #32]
}
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	2000cf5c 	.word	0x2000cf5c

0800d618 <TIM_IC2_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d618:	4b05      	ldr	r3, [pc, #20]	; (800d630 <TIM_IC2_FallingOnly+0x18>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	6a1a      	ldr	r2, [r3, #32]
 800d61e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d622:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d624:	6a1a      	ldr	r2, [r3, #32]
 800d626:	f042 0220 	orr.w	r2, r2, #32
 800d62a:	621a      	str	r2, [r3, #32]
}
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	2000cf5c 	.word	0x2000cf5c

0800d634 <TIM_TI_Sequence_AB>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d634:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <TIM_TI_Sequence_AB+0x34>)
	counter.abba = BIN0;
 800d636:	490d      	ldr	r1, [pc, #52]	; (800d66c <TIM_TI_Sequence_AB+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d640:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d648:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d64a:	689a      	ldr	r2, [r3, #8]
 800d64c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d650:	f022 0207 	bic.w	r2, r2, #7
 800d654:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800d656:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN0;
 800d658:	2000      	movs	r0, #0
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800d65a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d65e:	609a      	str	r2, [r3, #8]
	counter.abba = BIN0;
 800d660:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	2000cf5c 	.word	0x2000cf5c
 800d66c:	20004848 	.word	0x20004848

0800d670 <TIM_TI_Sequence_BA>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d670:	4b0c      	ldr	r3, [pc, #48]	; (800d6a4 <TIM_TI_Sequence_BA+0x34>)
	counter.abba = BIN1;
 800d672:	490d      	ldr	r1, [pc, #52]	; (800d6a8 <TIM_TI_Sequence_BA+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d67c:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d684:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d686:	689a      	ldr	r2, [r3, #8]
 800d688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d68c:	f022 0207 	bic.w	r2, r2, #7
 800d690:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800d692:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN1;
 800d694:	2001      	movs	r0, #1
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800d696:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d69a:	609a      	str	r2, [r3, #8]
	counter.abba = BIN1;
 800d69c:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	2000cf5c 	.word	0x2000cf5c
 800d6a8:	20004848 	.word	0x20004848

0800d6ac <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(uint16_t arr, uint16_t psc)
{
 800d6ac:	b538      	push	{r3, r4, r5, lr}
	htim4.Instance->ARR = arr;
 800d6ae:	4d0d      	ldr	r5, [pc, #52]	; (800d6e4 <TIM_ARR_PSC_Config+0x38>)
	htim4.Instance->PSC = psc;

	if(counter.state!=COUNTER_IC){
 800d6b0:	4c0d      	ldr	r4, [pc, #52]	; (800d6e8 <TIM_ARR_PSC_Config+0x3c>)
	htim4.Instance->ARR = arr;
 800d6b2:	682b      	ldr	r3, [r5, #0]
 800d6b4:	62d8      	str	r0, [r3, #44]	; 0x2c
	htim4.Instance->PSC = psc;
 800d6b6:	6299      	str	r1, [r3, #40]	; 0x28
	if(counter.state!=COUNTER_IC){
 800d6b8:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800d6bc:	2a02      	cmp	r2, #2
 800d6be:	d00b      	beq.n	800d6d8 <TIM_ARR_PSC_Config+0x2c>
		xStartTime = xTaskGetTickCount();
 800d6c0:	f7fc fc64 	bl	8009f8c <xTaskGetTickCount>
		__HAL_TIM_ENABLE(&htim4);
 800d6c4:	682b      	ldr	r3, [r5, #0]
		xStartTime = xTaskGetTickCount();
 800d6c6:	4909      	ldr	r1, [pc, #36]	; (800d6ec <TIM_ARR_PSC_Config+0x40>)
		__HAL_TIM_ENABLE(&htim4);
 800d6c8:	681a      	ldr	r2, [r3, #0]
		xStartTime = xTaskGetTickCount();
 800d6ca:	6008      	str	r0, [r1, #0]
		__HAL_TIM_ENABLE(&htim4);
 800d6cc:	f042 0201 	orr.w	r2, r2, #1
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d6d0:	2100      	movs	r1, #0
		__HAL_TIM_ENABLE(&htim4);
 800d6d2:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d6d4:	f884 13c4 	strb.w	r1, [r4, #964]	; 0x3c4
 800d6d8:	695a      	ldr	r2, [r3, #20]
 800d6da:	f042 0201 	orr.w	r2, r2, #1
 800d6de:	615a      	str	r2, [r3, #20]
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
}
 800d6e0:	bd38      	pop	{r3, r4, r5, pc}
 800d6e2:	bf00      	nop
 800d6e4:	2000ce94 	.word	0x2000ce94
 800d6e8:	20004848 	.word	0x20004848
 800d6ec:	20004840 	.word	0x20004840

0800d6f0 <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
	__HAL_TIM_DISABLE(&htim4);
 800d6f0:	4b08      	ldr	r3, [pc, #32]	; (800d714 <TIM_REF_SecondInputDisable+0x24>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6a19      	ldr	r1, [r3, #32]
 800d6f6:	f241 1211 	movw	r2, #4369	; 0x1111
 800d6fa:	4211      	tst	r1, r2
 800d6fc:	d108      	bne.n	800d710 <TIM_REF_SecondInputDisable+0x20>
 800d6fe:	6a19      	ldr	r1, [r3, #32]
 800d700:	f240 4244 	movw	r2, #1092	; 0x444
 800d704:	4211      	tst	r1, r2
 800d706:	d103      	bne.n	800d710 <TIM_REF_SecondInputDisable+0x20>
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	f022 0201 	bic.w	r2, r2, #1
 800d70e:	601a      	str	r2, [r3, #0]
}
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	2000ce94 	.word	0x2000ce94

0800d718 <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	4680      	mov	r8, r0
 800d71e:	b084      	sub	sp, #16
	uint32_t dummy;
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800d720:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d724:	f7f9 fef4 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800d728:	4607      	mov	r7, r0
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 800d72a:	f7fc fc2f 	bl	8009f8c <xTaskGetTickCount>
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800d72e:	4c0a      	ldr	r4, [pc, #40]	; (800d758 <TIM_REF_Reconfig_cnt+0x40>)
	xStartTime = xTaskGetTickCount();
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <TIM_REF_Reconfig_cnt+0x44>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d732:	4e0b      	ldr	r6, [pc, #44]	; (800d760 <TIM_REF_Reconfig_cnt+0x48>)
	xStartTime = xTaskGetTickCount();
 800d734:	6018      	str	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d736:	2500      	movs	r5, #0
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800d738:	4642      	mov	r2, r8
 800d73a:	4639      	mov	r1, r7
 800d73c:	ab03      	add	r3, sp, #12
 800d73e:	4620      	mov	r0, r4
 800d740:	9500      	str	r5, [sp, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d742:	f886 53c4 	strb.w	r5, [r6, #964]	; 0x3c4
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800d746:	f7fe feb5 	bl	800c4b4 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 800d74a:	4620      	mov	r0, r4
 800d74c:	f7fa f962 	bl	8007a14 <HAL_TIM_Base_Start>
}
 800d750:	b004      	add	sp, #16
 800d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d756:	bf00      	nop
 800d758:	2000ce94 	.word	0x2000ce94
 800d75c:	20004840 	.word	0x20004840
 800d760:	20004848 	.word	0x20004848

0800d764 <TIM_ETPS_GetPrescaler>:
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <TIM_ETPS_GetPrescaler+0x24>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 800d76a:	f3c3 3301 	ubfx	r3, r3, #12, #2
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d006      	beq.n	800d780 <TIM_ETPS_GetPrescaler+0x1c>
 800d772:	2b03      	cmp	r3, #3
 800d774:	d006      	beq.n	800d784 <TIM_ETPS_GetPrescaler+0x20>
 800d776:	2b01      	cmp	r3, #1
	case 0:
		presc = 1; break;
 800d778:	bf0c      	ite	eq
 800d77a:	2002      	moveq	r0, #2
 800d77c:	2001      	movne	r0, #1
 800d77e:	4770      	bx	lr
	case 1:
		presc = 2; break;
	case 2:
		presc = 4; break;
 800d780:	2004      	movs	r0, #4
 800d782:	4770      	bx	lr
	case 3:
		presc = 8; break;
 800d784:	2008      	movs	r0, #8
}
 800d786:	4770      	bx	lr
 800d788:	2000cf5c 	.word	0x2000cf5c

0800d78c <TIM_IC1PSC_GetPrescaler>:
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 800d78c:	4b08      	ldr	r3, [pc, #32]	; (800d7b0 <TIM_IC1PSC_GetPrescaler+0x24>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	699b      	ldr	r3, [r3, #24]
 800d792:	f3c3 0381 	ubfx	r3, r3, #2, #2
	switch(regPrescValue){
 800d796:	2b02      	cmp	r3, #2
 800d798:	d006      	beq.n	800d7a8 <TIM_IC1PSC_GetPrescaler+0x1c>
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d006      	beq.n	800d7ac <TIM_IC1PSC_GetPrescaler+0x20>
 800d79e:	2b01      	cmp	r3, #1
		presc = 1; break;
 800d7a0:	bf0c      	ite	eq
 800d7a2:	2002      	moveq	r0, #2
 800d7a4:	2001      	movne	r0, #1
 800d7a6:	4770      	bx	lr
		presc = 4; break;
 800d7a8:	2004      	movs	r0, #4
 800d7aa:	4770      	bx	lr
		presc = 8; break;
 800d7ac:	2008      	movs	r0, #8
}
 800d7ae:	4770      	bx	lr
 800d7b0:	2000cf5c 	.word	0x2000cf5c

0800d7b4 <TIM_IC2PSC_GetPrescaler>:
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 800d7b4:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <TIM_IC2PSC_GetPrescaler+0x24>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	f3c3 2381 	ubfx	r3, r3, #10, #2
	switch(regPrescValue){
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d006      	beq.n	800d7d0 <TIM_IC2PSC_GetPrescaler+0x1c>
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d006      	beq.n	800d7d4 <TIM_IC2PSC_GetPrescaler+0x20>
 800d7c6:	2b01      	cmp	r3, #1
		presc = 1; break;
 800d7c8:	bf0c      	ite	eq
 800d7ca:	2002      	moveq	r0, #2
 800d7cc:	2001      	movne	r0, #1
 800d7ce:	4770      	bx	lr
		presc = 4; break;
 800d7d0:	2004      	movs	r0, #4
 800d7d2:	4770      	bx	lr
		presc = 8; break;
 800d7d4:	2008      	movs	r0, #8
}
 800d7d6:	4770      	bx	lr
 800d7d8:	2000cf5c 	.word	0x2000cf5c

0800d7dc <DMA_TransferComplete>:
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800d7dc:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800d7e0:	2302      	movs	r3, #2
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 800d7e2:	6810      	ldr	r0, [r2, #0]
	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800d7e4:	408b      	lsls	r3, r1
 800d7e6:	4018      	ands	r0, r3
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 800d7e8:	bf1c      	itt	ne
 800d7ea:	6053      	strne	r3, [r2, #4]
		//		}
		return true;
 800d7ec:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 800d7ee:	4770      	bx	lr

0800d7f0 <DMA_Restart>:
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
	if(dmah == &hdma_tim2_ch1){
 800d7f0:	4b10      	ldr	r3, [pc, #64]	; (800d834 <DMA_Restart+0x44>)
 800d7f2:	4298      	cmp	r0, r3
{
 800d7f4:	b510      	push	{r4, lr}
	if(dmah == &hdma_tim2_ch1){
 800d7f6:	d00e      	beq.n	800d816 <DMA_Restart+0x26>
		HAL_DMA_Abort(&hdma_tim2_ch1);
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d7f8:	480f      	ldr	r0, [pc, #60]	; (800d838 <DMA_Restart+0x48>)
 800d7fa:	f7f8 fe9d 	bl	8006538 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800d7fe:	490f      	ldr	r1, [pc, #60]	; (800d83c <DMA_Restart+0x4c>)
 800d800:	4a0f      	ldr	r2, [pc, #60]	; (800d840 <DMA_Restart+0x50>)
 800d802:	6809      	ldr	r1, [r1, #0]
 800d804:	8913      	ldrh	r3, [r2, #8]
 800d806:	480c      	ldr	r0, [pc, #48]	; (800d838 <DMA_Restart+0x48>)
 800d808:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 800d80c:	3138      	adds	r1, #56	; 0x38
	}
}
 800d80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800d812:	f7f8 be1f 	b.w	8006454 <HAL_DMA_Start>
 800d816:	4604      	mov	r4, r0
		HAL_DMA_Abort(&hdma_tim2_ch1);
 800d818:	f7f8 fe8e 	bl	8006538 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d81c:	4907      	ldr	r1, [pc, #28]	; (800d83c <DMA_Restart+0x4c>)
 800d81e:	4a08      	ldr	r2, [pc, #32]	; (800d840 <DMA_Restart+0x50>)
 800d820:	6809      	ldr	r1, [r1, #0]
 800d822:	88d3      	ldrh	r3, [r2, #6]
 800d824:	4620      	mov	r0, r4
 800d826:	3210      	adds	r2, #16
 800d828:	3134      	adds	r1, #52	; 0x34
}
 800d82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d82e:	f7f8 be11 	b.w	8006454 <HAL_DMA_Start>
 800d832:	bf00      	nop
 800d834:	2000ce50 	.word	0x2000ce50
 800d838:	2000cf18 	.word	0x2000cf18
 800d83c:	2000cf5c 	.word	0x2000cf5c
 800d840:	20004848 	.word	0x20004848

0800d844 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 800d844:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 800d846:	4c0b      	ldr	r4, [pc, #44]	; (800d874 <MX_TIM6_Init+0x30>)
 800d848:	4b0b      	ldr	r3, [pc, #44]	; (800d878 <MX_TIM6_Init+0x34>)
 800d84a:	6023      	str	r3, [r4, #0]
{
 800d84c:	b085      	sub	sp, #20

	htim6.Init.Period = 0x7FF;
	htim6.Init.Prescaler = 0;
 800d84e:	2500      	movs	r5, #0
	htim6.Init.Period = 0x7FF;
 800d850:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim6.Init.ClockDivision = 0;
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim6);
 800d854:	4620      	mov	r0, r4
	htim6.Init.Period = 0x7FF;
 800d856:	60e3      	str	r3, [r4, #12]
	htim6.Init.Prescaler = 0;
 800d858:	6065      	str	r5, [r4, #4]
	htim6.Init.ClockDivision = 0;
 800d85a:	6125      	str	r5, [r4, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d85c:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim6);
 800d85e:	f7fa f821 	bl	80078a4 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d862:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800d864:	4620      	mov	r0, r4
 800d866:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d868:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d86a:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800d86c:	f7fb f914 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800d870:	b005      	add	sp, #20
 800d872:	bd30      	pop	{r4, r5, pc}
 800d874:	2000d064 	.word	0x2000d064
 800d878:	40001000 	.word	0x40001000

0800d87c <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 800d87c:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 800d87e:	4c0b      	ldr	r4, [pc, #44]	; (800d8ac <MX_TIM7_Init+0x30>)
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <MX_TIM7_Init+0x34>)
 800d882:	6023      	str	r3, [r4, #0]
{
 800d884:	b085      	sub	sp, #20

	htim7.Init.Period = 0x7FF;
	htim7.Init.Prescaler = 0;
 800d886:	2500      	movs	r5, #0
	htim7.Init.Period = 0x7FF;
 800d888:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim7.Init.ClockDivision = 0;
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim7);
 800d88c:	4620      	mov	r0, r4
	htim7.Init.Period = 0x7FF;
 800d88e:	60e3      	str	r3, [r4, #12]
	htim7.Init.Prescaler = 0;
 800d890:	6065      	str	r5, [r4, #4]
	htim7.Init.ClockDivision = 0;
 800d892:	6125      	str	r5, [r4, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d894:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim7);
 800d896:	f7fa f805 	bl	80078a4 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d89a:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800d89c:	4620      	mov	r0, r4
 800d89e:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d8a0:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d8a2:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800d8a4:	f7fb f8f8 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800d8a8:	b005      	add	sp, #20
 800d8aa:	bd30      	pop	{r4, r5, pc}
 800d8ac:	2000d0e4 	.word	0x2000d0e4
 800d8b0:	40001400 	.word	0x40001400

0800d8b4 <TIM6_GEN_DAC_MspInit>:

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__TIM6_CLK_ENABLE();
 800d8b4:	4b06      	ldr	r3, [pc, #24]	; (800d8d0 <TIM6_GEN_DAC_MspInit+0x1c>)
 800d8b6:	69da      	ldr	r2, [r3, #28]
 800d8b8:	f042 0210 	orr.w	r2, r2, #16
 800d8bc:	61da      	str	r2, [r3, #28]
 800d8be:	69db      	ldr	r3, [r3, #28]
{
 800d8c0:	b082      	sub	sp, #8
	__TIM6_CLK_ENABLE();
 800d8c2:	f003 0310 	and.w	r3, r3, #16
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	9b01      	ldr	r3, [sp, #4]
}
 800d8ca:	b002      	add	sp, #8
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	40021000 	.word	0x40021000

0800d8d4 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__TIM7_CLK_ENABLE();
 800d8d4:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <TIM7_GEN_DAC_MspInit+0x1c>)
 800d8d6:	69da      	ldr	r2, [r3, #28]
 800d8d8:	f042 0220 	orr.w	r2, r2, #32
 800d8dc:	61da      	str	r2, [r3, #28]
 800d8de:	69db      	ldr	r3, [r3, #28]
{
 800d8e0:	b082      	sub	sp, #8
	__TIM7_CLK_ENABLE();
 800d8e2:	f003 0320 	and.w	r3, r3, #32
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	9b01      	ldr	r3, [sp, #4]
}
 800d8ea:	b002      	add	sp, #8
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	40021000 	.word	0x40021000

0800d8f4 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM6_CLK_DISABLE();
 800d8f4:	4a02      	ldr	r2, [pc, #8]	; (800d900 <TIM6_GEN_DAC_MspDeinit+0xc>)
 800d8f6:	69d3      	ldr	r3, [r2, #28]
 800d8f8:	f023 0310 	bic.w	r3, r3, #16
 800d8fc:	61d3      	str	r3, [r2, #28]
}
 800d8fe:	4770      	bx	lr
 800d900:	40021000 	.word	0x40021000

0800d904 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM7_CLK_DISABLE();
 800d904:	4a02      	ldr	r2, [pc, #8]	; (800d910 <TIM7_GEN_DAC_MspDeinit+0xc>)
 800d906:	69d3      	ldr	r3, [r2, #28]
 800d908:	f023 0320 	bic.w	r3, r3, #32
 800d90c:	61d3      	str	r3, [r2, #28]
}
 800d90e:	4770      	bx	lr
 800d910:	40021000 	.word	0x40021000

0800d914 <TIM1_GEN_PWM_MspInit>:

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM1_CLK_ENABLE();
 800d914:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <TIM1_GEN_PWM_MspInit+0x3c>)
{
 800d916:	b570      	push	{r4, r5, r6, lr}
	__TIM1_CLK_ENABLE();
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d91e:	619a      	str	r2, [r3, #24]
 800d920:	699b      	ldr	r3, [r3, #24]
{
 800d922:	b086      	sub	sp, #24
	__TIM1_CLK_ENABLE();
 800d924:	f403 6300 	and.w	r3, r3, #2048	; 0x800

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d928:	f44f 7000 	mov.w	r0, #512	; 0x200
	__TIM1_CLK_ENABLE();
 800d92c:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d92e:	2203      	movs	r2, #3
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800d930:	2306      	movs	r3, #6
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d932:	9001      	str	r0, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d934:	2502      	movs	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d936:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d938:	a901      	add	r1, sp, #4
 800d93a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__TIM1_CLK_ENABLE();
 800d93e:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d940:	e9cd 5402 	strd	r5, r4, [sp, #8]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800d944:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d948:	f7f8 feda 	bl	8006700 <HAL_GPIO_Init>
}
 800d94c:	b006      	add	sp, #24
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
 800d950:	40021000 	.word	0x40021000

0800d954 <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM3_CLK_ENABLE();
 800d954:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <TIM3_GEN_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d956:	480e      	ldr	r0, [pc, #56]	; (800d990 <TIM3_GEN_PWM_MspInit+0x3c>)
	__TIM3_CLK_ENABLE();
 800d958:	69da      	ldr	r2, [r3, #28]
{
 800d95a:	b570      	push	{r4, r5, r6, lr}
	__TIM3_CLK_ENABLE();
 800d95c:	f042 0202 	orr.w	r2, r2, #2
 800d960:	61da      	str	r2, [r3, #28]
 800d962:	69db      	ldr	r3, [r3, #28]
{
 800d964:	b086      	sub	sp, #24
	__TIM3_CLK_ENABLE();
 800d966:	f003 0302 	and.w	r3, r3, #2
 800d96a:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d96c:	2203      	movs	r2, #3
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d96e:	2302      	movs	r3, #2
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d970:	2510      	movs	r5, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d972:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d974:	a901      	add	r1, sp, #4
	__TIM3_CLK_ENABLE();
 800d976:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d978:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d97a:	e9cd 5301 	strd	r5, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d97e:	e9cd 4203 	strd	r4, r2, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d982:	f7f8 febd 	bl	8006700 <HAL_GPIO_Init>
}
 800d986:	b006      	add	sp, #24
 800d988:	bd70      	pop	{r4, r5, r6, pc}
 800d98a:	bf00      	nop
 800d98c:	40021000 	.word	0x40021000
 800d990:	48000400 	.word	0x48000400

0800d994 <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM6_CLK_ENABLE();
 800d994:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <TIM6_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA1_Channel3;
 800d996:	4917      	ldr	r1, [pc, #92]	; (800d9f4 <TIM6_GEN_PWM_MspInit+0x60>)
	__TIM6_CLK_ENABLE();
 800d998:	69da      	ldr	r2, [r3, #28]
{
 800d99a:	b570      	push	{r4, r5, r6, lr}
	__TIM6_CLK_ENABLE();
 800d99c:	f042 0210 	orr.w	r2, r2, #16
 800d9a0:	61da      	str	r2, [r3, #28]
 800d9a2:	69db      	ldr	r3, [r3, #28]
	hdma_tim6_up.Instance = DMA1_Channel3;
 800d9a4:	4c14      	ldr	r4, [pc, #80]	; (800d9f8 <TIM6_GEN_PWM_MspInit+0x64>)
{
 800d9a6:	b082      	sub	sp, #8
	__TIM6_CLK_ENABLE();
 800d9a8:	f003 0310 	and.w	r3, r3, #16
{
 800d9ac:	4605      	mov	r5, r0
	__TIM6_CLK_ENABLE();
 800d9ae:	9301      	str	r3, [sp, #4]
	hdma_tim6_up.Instance = DMA1_Channel3;
 800d9b0:	6021      	str	r1, [r4, #0]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800d9b2:	2200      	movs	r2, #0
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d9b4:	2110      	movs	r1, #16
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800d9b6:	2380      	movs	r3, #128	; 0x80
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d9b8:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d9bc:	6061      	str	r1, [r4, #4]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800d9be:	60a2      	str	r2, [r4, #8]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800d9c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800d9c4:	2220      	movs	r2, #32
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800d9c6:	60e3      	str	r3, [r4, #12]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d9c8:	6120      	str	r0, [r4, #16]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800d9ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim6_up);
 800d9ce:	4620      	mov	r0, r4
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800d9d0:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800d9d4:	61e3      	str	r3, [r4, #28]
	__TIM6_CLK_ENABLE();
 800d9d6:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim6_up);
 800d9d8:	f7f8 fcb4 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800d9dc:	4b07      	ldr	r3, [pc, #28]	; (800d9fc <TIM6_GEN_PWM_MspInit+0x68>)
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68d3      	ldr	r3, [r2, #12]
 800d9e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9e6:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800d9e8:	622c      	str	r4, [r5, #32]
 800d9ea:	6265      	str	r5, [r4, #36]	; 0x24
}
 800d9ec:	b002      	add	sp, #8
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}
 800d9f0:	40021000 	.word	0x40021000
 800d9f4:	40020030 	.word	0x40020030
 800d9f8:	2000d020 	.word	0x2000d020
 800d9fc:	2000d064 	.word	0x2000d064

0800da00 <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__TIM7_CLK_ENABLE();
 800da00:	4b16      	ldr	r3, [pc, #88]	; (800da5c <TIM7_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800da02:	4917      	ldr	r1, [pc, #92]	; (800da60 <TIM7_GEN_PWM_MspInit+0x60>)
	__TIM7_CLK_ENABLE();
 800da04:	69da      	ldr	r2, [r3, #28]
{
 800da06:	b570      	push	{r4, r5, r6, lr}
	__TIM7_CLK_ENABLE();
 800da08:	f042 0220 	orr.w	r2, r2, #32
 800da0c:	61da      	str	r2, [r3, #28]
 800da0e:	69db      	ldr	r3, [r3, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800da10:	4c14      	ldr	r4, [pc, #80]	; (800da64 <TIM7_GEN_PWM_MspInit+0x64>)
{
 800da12:	b082      	sub	sp, #8
	__TIM7_CLK_ENABLE();
 800da14:	f003 0320 	and.w	r3, r3, #32
{
 800da18:	4605      	mov	r5, r0
	__TIM7_CLK_ENABLE();
 800da1a:	9301      	str	r3, [sp, #4]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800da1c:	6021      	str	r1, [r4, #0]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800da1e:	2200      	movs	r2, #0
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800da20:	2110      	movs	r1, #16
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800da22:	2380      	movs	r3, #128	; 0x80
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800da24:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800da28:	6061      	str	r1, [r4, #4]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800da2a:	60a2      	str	r2, [r4, #8]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800da2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800da30:	2220      	movs	r2, #32
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800da32:	60e3      	str	r3, [r4, #12]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800da34:	6120      	str	r0, [r4, #16]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800da36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim7_up);
 800da3a:	4620      	mov	r0, r4
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800da3c:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800da40:	61e3      	str	r3, [r4, #28]
	__TIM7_CLK_ENABLE();
 800da42:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim7_up);
 800da44:	f7f8 fc7e 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <TIM7_GEN_PWM_MspInit+0x68>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	68d3      	ldr	r3, [r2, #12]
 800da4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da52:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800da54:	622c      	str	r4, [r5, #32]
 800da56:	6265      	str	r5, [r4, #36]	; 0x24
}
 800da58:	b002      	add	sp, #8
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	40021000 	.word	0x40021000
 800da60:	40020044 	.word	0x40020044
 800da64:	2000cf9c 	.word	0x2000cf9c
 800da68:	2000d0e4 	.word	0x2000d0e4

0800da6c <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM1_CLK_DISABLE();
 800da6c:	4a02      	ldr	r2, [pc, #8]	; (800da78 <TIM1_GEN_PWM_MspDeinit+0xc>)
 800da6e:	6993      	ldr	r3, [r2, #24]
 800da70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da74:	6193      	str	r3, [r2, #24]
}
 800da76:	4770      	bx	lr
 800da78:	40021000 	.word	0x40021000

0800da7c <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM3_CLK_DISABLE();
 800da7c:	4a02      	ldr	r2, [pc, #8]	; (800da88 <TIM3_GEN_PWM_MspDeinit+0xc>)
 800da7e:	69d3      	ldr	r3, [r2, #28]
 800da80:	f023 0302 	bic.w	r3, r3, #2
 800da84:	61d3      	str	r3, [r2, #28]
}
 800da86:	4770      	bx	lr
 800da88:	40021000 	.word	0x40021000

0800da8c <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM6_CLK_DISABLE();
 800da8c:	4a03      	ldr	r2, [pc, #12]	; (800da9c <TIM6_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800da8e:	6a00      	ldr	r0, [r0, #32]
	__TIM6_CLK_DISABLE();
 800da90:	69d3      	ldr	r3, [r2, #28]
 800da92:	f023 0310 	bic.w	r3, r3, #16
 800da96:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800da98:	f7f8 bc9e 	b.w	80063d8 <HAL_DMA_DeInit>
 800da9c:	40021000 	.word	0x40021000

0800daa0 <TIM7_GEN_PWM_MspDeinit>:
}

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM7_CLK_DISABLE();
 800daa0:	4a03      	ldr	r2, [pc, #12]	; (800dab0 <TIM7_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800daa2:	6a00      	ldr	r0, [r0, #32]
	__TIM7_CLK_DISABLE();
 800daa4:	69d3      	ldr	r3, [r2, #28]
 800daa6:	f023 0320 	bic.w	r3, r3, #32
 800daaa:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800daac:	f7f8 bc94 	b.w	80063d8 <HAL_DMA_DeInit>
 800dab0:	40021000 	.word	0x40021000

0800dab4 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	460c      	mov	r4, r1
 800daba:	4605      	mov	r5, r0
 800dabc:	4616      	mov	r6, r2
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800dabe:	f7f9 fba9 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 800dac2:	0041      	lsls	r1, r0, #1
	if(chan==0){
 800dac4:	b124      	cbz	r4, 800dad0 <TIM_Reconfig_gen+0x1c>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
	}else if(chan==1){
 800dac6:	2c01      	cmp	r4, #1
 800dac8:	d00b      	beq.n	800dae2 <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
	}else{
		return 0;
 800daca:	2000      	movs	r0, #0
	}
}
 800dacc:	b002      	add	sp, #8
 800dace:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 800dad0:	2001      	movs	r0, #1
 800dad2:	9000      	str	r0, [sp, #0]
 800dad4:	4633      	mov	r3, r6
 800dad6:	462a      	mov	r2, r5
 800dad8:	4806      	ldr	r0, [pc, #24]	; (800daf4 <TIM_Reconfig_gen+0x40>)
 800dada:	f7fe fceb 	bl	800c4b4 <TIM_Reconfig>
}
 800dade:	b002      	add	sp, #8
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 800dae2:	9400      	str	r4, [sp, #0]
 800dae4:	4633      	mov	r3, r6
 800dae6:	462a      	mov	r2, r5
 800dae8:	4803      	ldr	r0, [pc, #12]	; (800daf8 <TIM_Reconfig_gen+0x44>)
 800daea:	f7fe fce3 	bl	800c4b4 <TIM_Reconfig>
}
 800daee:	b002      	add	sp, #8
 800daf0:	bd70      	pop	{r4, r5, r6, pc}
 800daf2:	bf00      	nop
 800daf4:	2000d064 	.word	0x2000d064
 800daf8:	2000d0e4 	.word	0x2000d0e4
 800dafc:	00000000 	.word	0x00000000

0800db00 <TIM_Reconfig_GenPwm>:

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 800db00:	b508      	push	{r3, lr}
 800db02:	ed2d 8b02 	vpush	{d8}
 800db06:	eeb0 8a40 	vmov.f32	s16, s0
 800db0a:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock;
	if(chan==0){
 800db0e:	b130      	cbz	r0, 800db1e <TIM_Reconfig_GenPwm+0x1e>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
	}else if(chan==1){
 800db10:	2801      	cmp	r0, #1
 800db12:	d014      	beq.n	800db3e <TIM_Reconfig_GenPwm+0x3e>
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
	}else{
		return 0;
	}
}
 800db14:	ecbd 8b02 	vpop	{d8}
 800db18:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800db60 <TIM_Reconfig_GenPwm+0x60>
 800db1c:	bd08      	pop	{r3, pc}
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 800db1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800db22:	f7f9 fcf5 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 800db26:	eeb0 0a48 	vmov.f32	s0, s16
 800db2a:	eef0 0a68 	vmov.f32	s1, s17
}
 800db2e:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 800db32:	0041      	lsls	r1, r0, #1
}
 800db34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 800db38:	480b      	ldr	r0, [pc, #44]	; (800db68 <TIM_Reconfig_GenPwm+0x68>)
 800db3a:	f7fe bd23 	b.w	800c584 <TIM_ReconfigPrecise>
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800db3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800db42:	f7f9 fce5 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800db46:	eeb0 0a48 	vmov.f32	s0, s16
 800db4a:	eef0 0a68 	vmov.f32	s1, s17
}
 800db4e:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800db52:	4601      	mov	r1, r0
}
 800db54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800db58:	4804      	ldr	r0, [pc, #16]	; (800db6c <TIM_Reconfig_GenPwm+0x6c>)
 800db5a:	f7fe bd13 	b.w	800c584 <TIM_ReconfigPrecise>
 800db5e:	bf00      	nop
	...
 800db68:	2000d0a4 	.word	0x2000d0a4
 800db6c:	2000cfe0 	.word	0x2000cfe0

0800db70 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 800db70:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start(&htim6);
 800db72:	4804      	ldr	r0, [pc, #16]	; (800db84 <TIMGenEnable+0x14>)
 800db74:	f7f9 ff4e 	bl	8007a14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 800db78:	4803      	ldr	r0, [pc, #12]	; (800db88 <TIMGenEnable+0x18>)
}
 800db7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim7);
 800db7e:	f7f9 bf49 	b.w	8007a14 <HAL_TIM_Base_Start>
 800db82:	bf00      	nop
 800db84:	2000d064 	.word	0x2000d064
 800db88:	2000d0e4 	.word	0x2000d0e4

0800db8c <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 800db8c:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 800db8e:	4804      	ldr	r0, [pc, #16]	; (800dba0 <TIMGenDisable+0x14>)
 800db90:	f7f9 ff50 	bl	8007a34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800db94:	4803      	ldr	r0, [pc, #12]	; (800dba4 <TIMGenDisable+0x18>)
}
 800db96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim7);
 800db9a:	f7f9 bf4b 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800db9e:	bf00      	nop
 800dba0:	2000d064 	.word	0x2000d064
 800dba4:	2000d0e4 	.word	0x2000d0e4

0800dba8 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 800dba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	htim6.Instance = TIM6;
 800dbac:	4e15      	ldr	r6, [pc, #84]	; (800dc04 <TIMGenInit+0x5c>)
	htim7.Instance = TIM7;
 800dbae:	4d16      	ldr	r5, [pc, #88]	; (800dc08 <TIMGenInit+0x60>)
void TIMGenInit(void){
 800dbb0:	b084      	sub	sp, #16
	MX_DAC_Init();
 800dbb2:	f7fd ff73 	bl	800ba9c <MX_DAC_Init>
	htim6.Init.Prescaler = 0;
 800dbb6:	2400      	movs	r4, #0
	htim6.Instance = TIM6;
 800dbb8:	4b14      	ldr	r3, [pc, #80]	; (800dc0c <TIMGenInit+0x64>)
 800dbba:	6033      	str	r3, [r6, #0]
	htim6.Init.Period = 0x7FF;
 800dbbc:	f240 78ff 	movw	r8, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800dbc0:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800dbc2:	2720      	movs	r7, #32
	htim6.Init.Period = 0x7FF;
 800dbc4:	f8c6 800c 	str.w	r8, [r6, #12]
	htim6.Init.Prescaler = 0;
 800dbc8:	6074      	str	r4, [r6, #4]
	htim6.Init.ClockDivision = 0;
 800dbca:	6134      	str	r4, [r6, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbcc:	60b4      	str	r4, [r6, #8]
	HAL_TIM_Base_Init(&htim6);
 800dbce:	f7f9 fe69 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800dbd2:	a901      	add	r1, sp, #4
 800dbd4:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbd6:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800dbd8:	9701      	str	r7, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800dbda:	f7fa ff5d 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	htim7.Instance = TIM7;
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <TIMGenInit+0x68>)
 800dbe0:	602b      	str	r3, [r5, #0]
	HAL_TIM_Base_Init(&htim7);
 800dbe2:	4628      	mov	r0, r5
	htim7.Init.Period = 0x7FF;
 800dbe4:	f8c5 800c 	str.w	r8, [r5, #12]
	htim7.Init.Prescaler = 0;
 800dbe8:	606c      	str	r4, [r5, #4]
	htim7.Init.ClockDivision = 0;
 800dbea:	612c      	str	r4, [r5, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbec:	60ac      	str	r4, [r5, #8]
	HAL_TIM_Base_Init(&htim7);
 800dbee:	f7f9 fe59 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800dbf2:	a901      	add	r1, sp, #4
 800dbf4:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800dbf6:	9701      	str	r7, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbf8:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800dbfa:	f7fa ff4d 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	MX_TIM6_Init();
	MX_TIM7_Init();
}
 800dbfe:	b004      	add	sp, #16
 800dc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc04:	2000d064 	.word	0x2000d064
 800dc08:	2000d0e4 	.word	0x2000d0e4
 800dc0c:	40001000 	.word	0x40001000
 800dc10:	40001400 	.word	0x40001400

0800dc14 <TIMGenDacDeinit>:
void TIMGenDacDeinit(void){
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <TIMGenDacDeinit+0x34>)
 800dc16:	691a      	ldr	r2, [r3, #16]
 800dc18:	f042 0210 	orr.w	r2, r2, #16
 800dc1c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800dc1e:	691a      	ldr	r2, [r3, #16]
 800dc20:	f022 0210 	bic.w	r2, r2, #16
 800dc24:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 800dc26:	691a      	ldr	r2, [r3, #16]
 800dc28:	f042 0220 	orr.w	r2, r2, #32
 800dc2c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800dc2e:	691a      	ldr	r2, [r3, #16]
 800dc30:	f022 0220 	bic.w	r2, r2, #32
 800dc34:	611a      	str	r2, [r3, #16]

	__HAL_RCC_DAC1_FORCE_RESET();
 800dc36:	691a      	ldr	r2, [r3, #16]
 800dc38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800dc3c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DAC1_RELEASE_RESET();
 800dc3e:	691a      	ldr	r2, [r3, #16]
 800dc40:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800dc44:	611a      	str	r2, [r3, #16]
}
 800dc46:	4770      	bx	lr
 800dc48:	40021000 	.word	0x40021000

0800dc4c <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 800dc4c:	b510      	push	{r4, lr}
	if(chan==0){
 800dc4e:	b110      	cbz	r0, 800dc56 <TIM_DMA_Reconfig+0xa>
		HAL_DMA_Abort(&hdma_tim6_up);
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
	}else if(chan==1){
 800dc50:	2801      	cmp	r0, #1
 800dc52:	d00e      	beq.n	800dc72 <TIM_DMA_Reconfig+0x26>
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 800dc54:	bd10      	pop	{r4, pc}
		HAL_DMA_Abort(&hdma_tim6_up);
 800dc56:	480e      	ldr	r0, [pc, #56]	; (800dc90 <TIM_DMA_Reconfig+0x44>)
 800dc58:	f7f8 fc6e 	bl	8006538 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 800dc5c:	4a0d      	ldr	r2, [pc, #52]	; (800dc94 <TIM_DMA_Reconfig+0x48>)
 800dc5e:	4b0e      	ldr	r3, [pc, #56]	; (800dc98 <TIM_DMA_Reconfig+0x4c>)
 800dc60:	6812      	ldr	r2, [r2, #0]
 800dc62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dc64:	480a      	ldr	r0, [pc, #40]	; (800dc90 <TIM_DMA_Reconfig+0x44>)
 800dc66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800dc68:	3238      	adds	r2, #56	; 0x38
}
 800dc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 800dc6e:	f7f8 bbf1 	b.w	8006454 <HAL_DMA_Start>
		HAL_DMA_Abort(&hdma_tim7_up);
 800dc72:	480a      	ldr	r0, [pc, #40]	; (800dc9c <TIM_DMA_Reconfig+0x50>)
 800dc74:	f7f8 fc60 	bl	8006538 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 800dc78:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <TIM_DMA_Reconfig+0x54>)
 800dc7a:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <TIM_DMA_Reconfig+0x4c>)
 800dc7c:	6812      	ldr	r2, [r2, #0]
 800dc7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc80:	4806      	ldr	r0, [pc, #24]	; (800dc9c <TIM_DMA_Reconfig+0x50>)
 800dc82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc84:	3234      	adds	r2, #52	; 0x34
}
 800dc86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 800dc8a:	f7f8 bbe3 	b.w	8006454 <HAL_DMA_Start>
 800dc8e:	bf00      	nop
 800dc90:	2000d020 	.word	0x2000d020
 800dc94:	2000d0a4 	.word	0x2000d0a4
 800dc98:	20004c20 	.word	0x20004c20
 800dc9c:	2000cf9c 	.word	0x2000cf9c
 800dca0:	2000cfe0 	.word	0x2000cfe0

0800dca4 <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 800dca4:	b538      	push	{r3, r4, r5, lr}
	if(generator.numOfChannles==1){
 800dca6:	4b1a      	ldr	r3, [pc, #104]	; (800dd10 <PWMGeneratingEnable+0x6c>)
 800dca8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dcac:	2a01      	cmp	r2, #1
 800dcae:	d020      	beq.n	800dcf2 <PWMGeneratingEnable+0x4e>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
	}else if(generator.numOfChannles>1){
 800dcb0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d91b      	bls.n	800dcf0 <PWMGeneratingEnable+0x4c>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800dcb8:	4d16      	ldr	r5, [pc, #88]	; (800dd14 <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800dcba:	4c17      	ldr	r4, [pc, #92]	; (800dd18 <PWMGeneratingEnable+0x74>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800dcbc:	682a      	ldr	r2, [r5, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dcbe:	4817      	ldr	r0, [pc, #92]	; (800dd1c <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800dcc0:	68d3      	ldr	r3, [r2, #12]
 800dcc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcc6:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dcc8:	2104      	movs	r1, #4
 800dcca:	f7fa f825 	bl	8007d18 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7f9 fea0 	bl	8007a14 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800dcd4:	6822      	ldr	r2, [r4, #0]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800dcd6:	4812      	ldr	r0, [pc, #72]	; (800dd20 <PWMGeneratingEnable+0x7c>)
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800dcd8:	68d3      	ldr	r3, [r2, #12]
 800dcda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcde:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800dce0:	2100      	movs	r1, #0
 800dce2:	f7fa f819 	bl	8007d18 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 800dce6:	4620      	mov	r0, r4
	}
}
 800dce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim7);
 800dcec:	f7f9 be92 	b.w	8007a14 <HAL_TIM_Base_Start>
}
 800dcf0:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800dcf2:	4c08      	ldr	r4, [pc, #32]	; (800dd14 <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dcf4:	4809      	ldr	r0, [pc, #36]	; (800dd1c <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	68d3      	ldr	r3, [r2, #12]
 800dcfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcfe:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dd00:	2104      	movs	r1, #4
 800dd02:	f7fa f809 	bl	8007d18 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 800dd06:	4620      	mov	r0, r4
}
 800dd08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim6);
 800dd0c:	f7f9 be82 	b.w	8007a14 <HAL_TIM_Base_Start>
 800dd10:	20004c20 	.word	0x20004c20
 800dd14:	2000d064 	.word	0x2000d064
 800dd18:	2000d0e4 	.word	0x2000d0e4
 800dd1c:	2000d0a4 	.word	0x2000d0a4
 800dd20:	2000cfe0 	.word	0x2000cfe0

0800dd24 <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 800dd24:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){
 800dd26:	4b11      	ldr	r3, [pc, #68]	; (800dd6c <PWMGeneratingDisable+0x48>)
 800dd28:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dd2c:	2a01      	cmp	r2, #1
 800dd2e:	d014      	beq.n	800dd5a <PWMGeneratingDisable+0x36>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
	}else if(generator.numOfChannles>1){
 800dd30:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d90f      	bls.n	800dd58 <PWMGeneratingDisable+0x34>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800dd38:	2104      	movs	r1, #4
 800dd3a:	480d      	ldr	r0, [pc, #52]	; (800dd70 <PWMGeneratingDisable+0x4c>)
 800dd3c:	f7fa f81e 	bl	8007d7c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800dd40:	480c      	ldr	r0, [pc, #48]	; (800dd74 <PWMGeneratingDisable+0x50>)
 800dd42:	f7f9 fe77 	bl	8007a34 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800dd46:	2100      	movs	r1, #0
 800dd48:	480b      	ldr	r0, [pc, #44]	; (800dd78 <PWMGeneratingDisable+0x54>)
 800dd4a:	f7fa f817 	bl	8007d7c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 800dd4e:	480b      	ldr	r0, [pc, #44]	; (800dd7c <PWMGeneratingDisable+0x58>)
	}
}
 800dd50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim7);
 800dd54:	f7f9 be6e 	b.w	8007a34 <HAL_TIM_Base_Stop>
}
 800dd58:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800dd5a:	2104      	movs	r1, #4
 800dd5c:	4804      	ldr	r0, [pc, #16]	; (800dd70 <PWMGeneratingDisable+0x4c>)
 800dd5e:	f7fa f80d 	bl	8007d7c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800dd62:	4804      	ldr	r0, [pc, #16]	; (800dd74 <PWMGeneratingDisable+0x50>)
}
 800dd64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim6);
 800dd68:	f7f9 be64 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800dd6c:	20004c20 	.word	0x20004c20
 800dd70:	2000d0a4 	.word	0x2000d0a4
 800dd74:	2000d064 	.word	0x2000d064
 800dd78:	2000cfe0 	.word	0x2000cfe0
 800dd7c:	2000d0e4 	.word	0x2000d0e4

0800dd80 <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 800dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	htim1.Instance = TIM1;
 800dd84:	4d53      	ldr	r5, [pc, #332]	; (800ded4 <TIMGenPwmInit+0x154>)
 800dd86:	4b54      	ldr	r3, [pc, #336]	; (800ded8 <TIMGenPwmInit+0x158>)
 800dd88:	602b      	str	r3, [r5, #0]
void TIMGenPwmInit(void){
 800dd8a:	b09b      	sub	sp, #108	; 0x6c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd8c:	ae1a      	add	r6, sp, #104	; 0x68
	htim1.Init.Prescaler = 0;
 800dd8e:	2400      	movs	r4, #0
	htim1.Init.Period = 1023;
 800dd90:	f240 33ff 	movw	r3, #1023	; 0x3ff
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dd94:	f04f 0b80 	mov.w	fp, #128	; 0x80
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd98:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	HAL_TIM_Base_Init(&htim1);
 800dd9c:	4628      	mov	r0, r5
	htim1.Init.Period = 1023;
 800dd9e:	60eb      	str	r3, [r5, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dda0:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 800dda4:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dda8:	f8c5 b018 	str.w	fp, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 800ddac:	f7f9 fd7a 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddb0:	f846 ad58 	str.w	sl, [r6, #-88]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	f7fa fa30 	bl	800821c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7f9 ff11 	bl	8007be4 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800ddc2:	a901      	add	r1, sp, #4
 800ddc4:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ddc6:	f04f 0960 	mov.w	r9, #96	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ddca:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddce:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800ddd0:	f7fa fe62 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ddd4:	a908      	add	r1, sp, #32
	sConfigOC.Pulse = 512;
 800ddd6:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ddda:	4628      	mov	r0, r5
 800dddc:	2204      	movs	r2, #4
	htim6.Instance = TIM6;
 800ddde:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800def0 <TIMGenPwmInit+0x170>
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dde2:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.Pulse = 512;
 800dde4:	e9cd 9308 	strd	r9, r3, [sp, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dde8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ddec:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800ddf0:	f7fa fd3c 	bl	800886c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800ddf4:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ddf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ddfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800ddfe:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800de00:	9314      	str	r3, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800de02:	9217      	str	r2, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800de04:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800de08:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800de0c:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800de0e:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800de12:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800de16:	f7fa fe6b 	bl	8008af0 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_Base_MspInit(&htim1);
 800de1a:	4628      	mov	r0, r5
 800de1c:	f7fe fa20 	bl	800c260 <HAL_TIM_Base_MspInit>
	htim3.Instance = TIM3;
 800de20:	4d2e      	ldr	r5, [pc, #184]	; (800dedc <TIMGenPwmInit+0x15c>)
	htim6.Instance = TIM6;
 800de22:	4a2f      	ldr	r2, [pc, #188]	; (800dee0 <TIMGenPwmInit+0x160>)
 800de24:	f8c8 2000 	str.w	r2, [r8]
	htim6.Init.Period = 0x7FF;
 800de28:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800de2c:	4640      	mov	r0, r8
	htim6.Init.Period = 0x7FF;
 800de2e:	f8c8 300c 	str.w	r3, [r8, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800de32:	2720      	movs	r7, #32
	htim6.Init.Prescaler = 0;
 800de34:	f8c8 4004 	str.w	r4, [r8, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de38:	f8c8 4008 	str.w	r4, [r8, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de3c:	f8c8 4018 	str.w	r4, [r8, #24]
	HAL_TIM_Base_Init(&htim6);
 800de40:	f7f9 fd30 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800de44:	a90f      	add	r1, sp, #60	; 0x3c
 800de46:	4640      	mov	r0, r8
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de48:	9411      	str	r4, [sp, #68]	; 0x44
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800de4a:	970f      	str	r7, [sp, #60]	; 0x3c
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800de4c:	f7fa fe24 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	htim3.Instance = TIM3;
 800de50:	4a24      	ldr	r2, [pc, #144]	; (800dee4 <TIMGenPwmInit+0x164>)
 800de52:	602a      	str	r2, [r5, #0]
	htim3.Init.Period = 511;
 800de54:	f240 13ff 	movw	r3, #511	; 0x1ff
	HAL_TIM_Base_Init(&htim3);
 800de58:	4628      	mov	r0, r5
	htim3.Init.Period = 511;
 800de5a:	60eb      	str	r3, [r5, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800de5c:	f8c5 b018 	str.w	fp, [r5, #24]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de60:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de64:	612c      	str	r4, [r5, #16]
	HAL_TIM_Base_Init(&htim3);
 800de66:	f7f9 fd1d 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800de6a:	eb0d 0107 	add.w	r1, sp, r7
 800de6e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800de70:	f8cd a020 	str.w	sl, [sp, #32]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800de74:	f7fa f9d2 	bl	800821c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800de78:	4628      	mov	r0, r5
 800de7a:	f7f9 feb3 	bl	8007be4 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800de7e:	4631      	mov	r1, r6
 800de80:	4628      	mov	r0, r5
	htim7.Instance = TIM7;
 800de82:	4e19      	ldr	r6, [pc, #100]	; (800dee8 <TIMGenPwmInit+0x168>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de84:	9404      	str	r4, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de86:	9406      	str	r4, [sp, #24]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800de88:	f7fa fe06 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800de8c:	a90f      	add	r1, sp, #60	; 0x3c
 800de8e:	4622      	mov	r2, r4
	sConfigOC.Pulse = 256;
 800de90:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800de94:	4628      	mov	r0, r5
	sConfigOC.Pulse = 256;
 800de96:	9310      	str	r3, [sp, #64]	; 0x40
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de98:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de9c:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de9e:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800dea0:	f7fa fce4 	bl	800886c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_MspInit(&htim3);
 800dea4:	4628      	mov	r0, r5
 800dea6:	f7fe f9db 	bl	800c260 <HAL_TIM_Base_MspInit>
	htim7.Instance = TIM7;
 800deaa:	4b10      	ldr	r3, [pc, #64]	; (800deec <TIMGenPwmInit+0x16c>)
 800deac:	6033      	str	r3, [r6, #0]
	htim7.Init.Period = 0x7FF;
 800deae:	f240 72ff 	movw	r2, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim7);
 800deb2:	4630      	mov	r0, r6
	htim7.Init.Period = 0x7FF;
 800deb4:	60f2      	str	r2, [r6, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800deb6:	e9c6 4401 	strd	r4, r4, [r6, #4]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800deba:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim7);
 800debc:	f7f9 fcf2 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800dec0:	a90f      	add	r1, sp, #60	; 0x3c
 800dec2:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800dec4:	970f      	str	r7, [sp, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dec6:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800dec8:	f7fa fde6 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	MX_TIM1_GEN_PWM_Init();
	MX_TIM6_GEN_PWM_Init();
	MX_TIM3_GEN_PWM_Init();			// PWM generation
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
}
 800decc:	b01b      	add	sp, #108	; 0x6c
 800dece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded2:	bf00      	nop
 800ded4:	2000d0a4 	.word	0x2000d0a4
 800ded8:	40012c00 	.word	0x40012c00
 800dedc:	2000cfe0 	.word	0x2000cfe0
 800dee0:	40001000 	.word	0x40001000
 800dee4:	40000400 	.word	0x40000400
 800dee8:	2000d0e4 	.word	0x2000d0e4
 800deec:	40001400 	.word	0x40001400
 800def0:	2000d064 	.word	0x2000d064

0800def4 <TIMGenPwmDeinit>:
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800def4:	4b10      	ldr	r3, [pc, #64]	; (800df38 <TIMGenPwmDeinit+0x44>)
 800def6:	691a      	ldr	r2, [r3, #16]
 800def8:	f042 0210 	orr.w	r2, r2, #16
 800defc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800defe:	691a      	ldr	r2, [r3, #16]
 800df00:	f022 0210 	bic.w	r2, r2, #16
 800df04:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 800df06:	691a      	ldr	r2, [r3, #16]
 800df08:	f042 0220 	orr.w	r2, r2, #32
 800df0c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800df0e:	691a      	ldr	r2, [r3, #16]
 800df10:	f022 0220 	bic.w	r2, r2, #32
 800df14:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM1_FORCE_RESET();
 800df16:	68da      	ldr	r2, [r3, #12]
 800df18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df1c:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800df1e:	68da      	ldr	r2, [r3, #12]
 800df20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df24:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_FORCE_RESET();
 800df26:	691a      	ldr	r2, [r3, #16]
 800df28:	f042 0202 	orr.w	r2, r2, #2
 800df2c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM3_RELEASE_RESET();
 800df2e:	691a      	ldr	r2, [r3, #16]
 800df30:	f022 0202 	bic.w	r2, r2, #2
 800df34:	611a      	str	r2, [r3, #16]
}
 800df36:	4770      	bx	lr
 800df38:	40021000 	.word	0x40021000

0800df3c <TIM1_LOG_ANLYS_MspInit>:
void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 800df3c:	4b21      	ldr	r3, [pc, #132]	; (800dfc4 <TIM1_LOG_ANLYS_MspInit+0x88>)
{
 800df3e:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 800df40:	699a      	ldr	r2, [r3, #24]
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 800df42:	4c21      	ldr	r4, [pc, #132]	; (800dfc8 <TIM1_LOG_ANLYS_MspInit+0x8c>)
	__HAL_RCC_TIM1_CLK_ENABLE();
 800df44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df48:	619a      	str	r2, [r3, #24]
 800df4a:	699b      	ldr	r3, [r3, #24]
{
 800df4c:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 800df4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df52:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800df54:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800df58:	2500      	movs	r5, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800df5a:	2303      	movs	r3, #3
{
 800df5c:	4606      	mov	r6, r0
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800df5e:	2201      	movs	r2, #1
	__HAL_RCC_TIM1_CLK_ENABLE();
 800df60:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800df62:	9101      	str	r1, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df64:	4819      	ldr	r0, [pc, #100]	; (800dfcc <TIM1_LOG_ANLYS_MspInit+0x90>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800df66:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df68:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800df6a:	e9cd 5202 	strd	r5, r2, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df6e:	f7f8 fbc7 	bl	8006700 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 800df72:	462a      	mov	r2, r5
 800df74:	2109      	movs	r1, #9
 800df76:	2017      	movs	r0, #23
 800df78:	f7f8 f838 	bl	8005fec <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 800df7c:	462a      	mov	r2, r5
 800df7e:	2109      	movs	r1, #9
 800df80:	2028      	movs	r0, #40	; 0x28
 800df82:	f7f8 f833 	bl	8005fec <HAL_NVIC_SetPriority>
	hdma_tim1_up.Instance = DMA1_Channel5;
 800df86:	4a12      	ldr	r2, [pc, #72]	; (800dfd0 <TIM1_LOG_ANLYS_MspInit+0x94>)
 800df88:	6022      	str	r2, [r4, #0]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800df8a:	2380      	movs	r3, #128	; 0x80
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800df8c:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800df90:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800df94:	2220      	movs	r2, #32
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800df96:	60e3      	str	r3, [r4, #12]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800df98:	6120      	str	r0, [r4, #16]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800df9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim1_up);
 800df9e:	4620      	mov	r0, r4
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800dfa0:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800dfa4:	61e3      	str	r3, [r4, #28]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dfa6:	6065      	str	r5, [r4, #4]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800dfa8:	60a5      	str	r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim1_up);
 800dfaa:	f7f8 f9cb 	bl	8006344 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 800dfae:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <TIM1_LOG_ANLYS_MspInit+0x98>)
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	68d3      	ldr	r3, [r2, #12]
 800dfb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfb8:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800dfba:	6234      	str	r4, [r6, #32]
 800dfbc:	6266      	str	r6, [r4, #36]	; 0x24
}
 800dfbe:	b006      	add	sp, #24
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	bf00      	nop
 800dfc4:	40021000 	.word	0x40021000
 800dfc8:	2000d124 	.word	0x2000d124
 800dfcc:	48000400 	.word	0x48000400
 800dfd0:	40020058 	.word	0x40020058
 800dfd4:	2000d0a4 	.word	0x2000d0a4

0800dfd8 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 800dfd8:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <TIM4_LOG_ANLYS_MspInit+0x3c>)

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800dfda:	490f      	ldr	r1, [pc, #60]	; (800e018 <TIM4_LOG_ANLYS_MspInit+0x40>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 800dfdc:	69da      	ldr	r2, [r3, #28]
{
 800dfde:	b500      	push	{lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 800dfe0:	f042 0204 	orr.w	r2, r2, #4
 800dfe4:	61da      	str	r2, [r3, #28]
 800dfe6:	69db      	ldr	r3, [r3, #28]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800dfe8:	680a      	ldr	r2, [r1, #0]
{
 800dfea:	b083      	sub	sp, #12
	__HAL_RCC_TIM4_CLK_ENABLE();
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	9b01      	ldr	r3, [sp, #4]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800dff4:	68d3      	ldr	r3, [r2, #12]
 800dff6:	f043 0301 	orr.w	r3, r3, #1
 800dffa:	60d3      	str	r3, [r2, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800dffc:	2109      	movs	r1, #9
 800dffe:	2200      	movs	r2, #0
 800e000:	201e      	movs	r0, #30
 800e002:	f7f7 fff3 	bl	8005fec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e006:	201e      	movs	r0, #30
}
 800e008:	b003      	add	sp, #12
 800e00a:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e00e:	f7f8 b823 	b.w	8006058 <HAL_NVIC_EnableIRQ>
 800e012:	bf00      	nop
 800e014:	40021000 	.word	0x40021000
 800e018:	2000ce94 	.word	0x2000ce94

0800e01c <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e01c:	4a08      	ldr	r2, [pc, #32]	; (800e040 <TIM4_LOG_ANLYS_MspDeinit+0x24>)
{
 800e01e:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e020:	69d3      	ldr	r3, [r2, #28]
 800e022:	f023 0304 	bic.w	r3, r3, #4
 800e026:	61d3      	str	r3, [r2, #28]
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800e028:	201e      	movs	r0, #30
 800e02a:	f7f8 f821 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e02e:	2017      	movs	r0, #23
 800e030:	f7f8 f81e 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e034:	2028      	movs	r0, #40	; 0x28
}
 800e036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e03a:	f7f8 b819 	b.w	8006070 <HAL_NVIC_DisableIRQ>
 800e03e:	bf00      	nop
 800e040:	40021000 	.word	0x40021000

0800e044 <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e044:	4a03      	ldr	r2, [pc, #12]	; (800e054 <TIM1_LOG_ANLYS_MspDeinit+0x10>)
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e046:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e048:	6993      	ldr	r3, [r2, #24]
 800e04a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e04e:	6193      	str	r3, [r2, #24]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e050:	f7f8 b9c2 	b.w	80063d8 <HAL_DMA_DeInit>
 800e054:	40021000 	.word	0x40021000

0800e058 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e058:	b508      	push	{r3, lr}
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 800e05a:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <LOG_ANLYS_PeriodElapsedCallback+0x58>)
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e05c:	6802      	ldr	r2, [r0, #0]
	__HAL_TIM_DISABLE(&htim4);
 800e05e:	681b      	ldr	r3, [r3, #0]
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e060:	f06f 0101 	mvn.w	r1, #1
 800e064:	6111      	str	r1, [r2, #16]
	__HAL_TIM_DISABLE(&htim4);
 800e066:	6a19      	ldr	r1, [r3, #32]
 800e068:	f241 1211 	movw	r2, #4369	; 0x1111
 800e06c:	4211      	tst	r1, r2
 800e06e:	d104      	bne.n	800e07a <LOG_ANLYS_PeriodElapsedCallback+0x22>
 800e070:	6a19      	ldr	r1, [r3, #32]
 800e072:	f240 4244 	movw	r2, #1092	; 0x444
 800e076:	4211      	tst	r1, r2
 800e078:	d010      	beq.n	800e09c <LOG_ANLYS_PeriodElapsedCallback+0x44>
	HAL_DMA_Abort(&hdma_tim1_up);
 800e07a:	480e      	ldr	r0, [pc, #56]	; (800e0b4 <LOG_ANLYS_PeriodElapsedCallback+0x5c>)
 800e07c:	f7f8 fa5c 	bl	8006538 <HAL_DMA_Abort>
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 800e080:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <LOG_ANLYS_PeriodElapsedCallback+0x60>)
 800e082:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800e086:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e088:	2017      	movs	r0, #23
 800e08a:	f7f7 fff1 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e08e:	2028      	movs	r0, #40	; 0x28
 800e090:	f7f7 ffee 	bl	8006070 <HAL_NVIC_DisableIRQ>
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 800e094:	4b09      	ldr	r3, [pc, #36]	; (800e0bc <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 800e096:	7ddb      	ldrb	r3, [r3, #23]
 800e098:	b12b      	cbz	r3, 800e0a6 <LOG_ANLYS_PeriodElapsedCallback+0x4e>
}
 800e09a:	bd08      	pop	{r3, pc}
	__HAL_TIM_DISABLE(&htim4);
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	f022 0201 	bic.w	r2, r2, #1
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	e7e9      	b.n	800e07a <LOG_ANLYS_PeriodElapsedCallback+0x22>
}
 800e0a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logAnlysPeriodElapsedCallback();
 800e0aa:	f7f6 b8b9 	b.w	8004220 <logAnlysPeriodElapsedCallback>
 800e0ae:	bf00      	nop
 800e0b0:	2000ce94 	.word	0x2000ce94
 800e0b4:	2000d124 	.word	0x2000d124
 800e0b8:	40010400 	.word	0x40010400
 800e0bc:	20005438 	.word	0x20005438

0800e0c0 <LOG_ANLYS_TriggerEventOccured>:
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 800e0c0:	4a03      	ldr	r2, [pc, #12]	; (800e0d0 <LOG_ANLYS_TriggerEventOccured+0x10>)
 800e0c2:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <LOG_ANLYS_TriggerEventOccured+0x14>)
 800e0c4:	6811      	ldr	r1, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 800e0c6:	2200      	movs	r2, #0
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 800e0c8:	6849      	ldr	r1, [r1, #4]
 800e0ca:	6019      	str	r1, [r3, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 800e0cc:	75da      	strb	r2, [r3, #23]
}
 800e0ce:	4770      	bx	lr
 800e0d0:	2000d124 	.word	0x2000d124
 800e0d4:	20005438 	.word	0x20005438

0800e0d8 <TIM_LogAnlys_Init>:
	__HAL_RCC_TIM4_FORCE_RESET();
 800e0d8:	4b30      	ldr	r3, [pc, #192]	; (800e19c <TIM_LogAnlys_Init+0xc4>)
	htim1.Instance = TIM1;
 800e0da:	4931      	ldr	r1, [pc, #196]	; (800e1a0 <TIM_LogAnlys_Init+0xc8>)
	__HAL_RCC_TIM4_FORCE_RESET();
 800e0dc:	691a      	ldr	r2, [r3, #16]
 800e0de:	f042 0204 	orr.w	r2, r2, #4
{
 800e0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__HAL_RCC_TIM4_FORCE_RESET();
 800e0e6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800e0e8:	691a      	ldr	r2, [r3, #16]
	htim1.State = HAL_TIM_STATE_RESET;
 800e0ea:	4d2e      	ldr	r5, [pc, #184]	; (800e1a4 <TIM_LogAnlys_Init+0xcc>)
	htim4.State = HAL_TIM_STATE_RESET;
 800e0ec:	4e2e      	ldr	r6, [pc, #184]	; (800e1a8 <TIM_LogAnlys_Init+0xd0>)
	__HAL_RCC_TIM4_RELEASE_RESET();
 800e0ee:	f022 0204 	bic.w	r2, r2, #4
 800e0f2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 800e0f4:	68da      	ldr	r2, [r3, #12]
 800e0f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0fa:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e0fc:	68da      	ldr	r2, [r3, #12]
{
 800e0fe:	b08c      	sub	sp, #48	; 0x30
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e100:	af0c      	add	r7, sp, #48	; 0x30
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
	htim4.State = HAL_TIM_STATE_RESET;
 800e106:	2400      	movs	r4, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e108:	60da      	str	r2, [r3, #12]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e10a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	htim1.Init.Period = 14399;   //14399
 800e10e:	f643 033f 	movw	r3, #14399	; 0x383f
	HAL_TIM_Base_Init(&htim1);
 800e112:	4628      	mov	r0, r5
	htim1.Init.Period = 14399;   //14399
 800e114:	60eb      	str	r3, [r5, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 800e116:	f886 403d 	strb.w	r4, [r6, #61]	; 0x3d
	htim1.Instance = TIM1;
 800e11a:	6029      	str	r1, [r5, #0]
	htim1.Init.Prescaler = 0;  //0
 800e11c:	606c      	str	r4, [r5, #4]
	htim1.State = HAL_TIM_STATE_RESET;
 800e11e:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e122:	60ac      	str	r4, [r5, #8]
	htim1.Init.RepetitionCounter = 0;
 800e124:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e128:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 800e12a:	f7f9 fbbb 	bl	80078a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e12e:	f847 8d24 	str.w	r8, [r7, #-36]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800e132:	4628      	mov	r0, r5
 800e134:	4639      	mov	r1, r7
 800e136:	f7fa f871 	bl	800821c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e13a:	2204      	movs	r2, #4
 800e13c:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e13e:	a907      	add	r1, sp, #28
 800e140:	4628      	mov	r0, r5
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e142:	e9cd 2307 	strd	r2, r3, [sp, #28]
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e146:	f7fa f933 	bl	80083b0 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e14a:	4669      	mov	r1, sp
 800e14c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e14e:	e9cd 4400 	strd	r4, r4, [sp]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e152:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e154:	f7fa fca0 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	htim4.Instance = TIM4;
 800e158:	4914      	ldr	r1, [pc, #80]	; (800e1ac <TIM_LogAnlys_Init+0xd4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e15a:	60b4      	str	r4, [r6, #8]
	htim4.Init.Prescaler = 1199;
 800e15c:	f240 42af 	movw	r2, #1199	; 0x4af
	htim4.Init.Period = 59999;
 800e160:	f64e 235f 	movw	r3, #59999	; 0xea5f
	HAL_TIM_Base_Init(&htim4);
 800e164:	4630      	mov	r0, r6
	htim4.Init.Prescaler = 1199;
 800e166:	e9c6 1200 	strd	r1, r2, [r6]
	htim4.Init.Period = 59999;
 800e16a:	60f3      	str	r3, [r6, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e16c:	6134      	str	r4, [r6, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e16e:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim4);
 800e170:	f7f9 fb98 	bl	80078a4 <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800e174:	a907      	add	r1, sp, #28
 800e176:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e178:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800e17c:	f7fa f84e 	bl	800821c <HAL_TIM_ConfigClockSource>
	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 800e180:	4630      	mov	r0, r6
 800e182:	2108      	movs	r1, #8
 800e184:	f7f9 fee0 	bl	8007f48 <HAL_TIM_OnePulse_Init>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e188:	2380      	movs	r3, #128	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e18a:	4639      	mov	r1, r7
 800e18c:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e18e:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e190:	9305      	str	r3, [sp, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e192:	f7fa fc81 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
}
 800e196:	b00c      	add	sp, #48	; 0x30
 800e198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e19c:	40021000 	.word	0x40021000
 800e1a0:	40012c00 	.word	0x40012c00
 800e1a4:	2000d0a4 	.word	0x2000d0a4
 800e1a8:	2000ce94 	.word	0x2000ce94
 800e1ac:	40000800 	.word	0x40000800

0800e1b0 <TIM_LogAnlys_Deinit>:
{
 800e1b0:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800e1b2:	4d0f      	ldr	r5, [pc, #60]	; (800e1f0 <TIM_LogAnlys_Deinit+0x40>)
	HAL_TIM_Base_DeInit(&htim1);
 800e1b4:	4c0f      	ldr	r4, [pc, #60]	; (800e1f4 <TIM_LogAnlys_Deinit+0x44>)
	HAL_TIM_Base_DeInit(&htim4);
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f7f9 fc0e 	bl	80079d8 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f7f9 fc0b 	bl	80079d8 <HAL_TIM_Base_DeInit>
	__HAL_RCC_TIM4_FORCE_RESET();
 800e1c2:	4b0d      	ldr	r3, [pc, #52]	; (800e1f8 <TIM_LogAnlys_Deinit+0x48>)
 800e1c4:	691a      	ldr	r2, [r3, #16]
 800e1c6:	f042 0204 	orr.w	r2, r2, #4
 800e1ca:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800e1cc:	691a      	ldr	r2, [r3, #16]
 800e1ce:	f022 0204 	bic.w	r2, r2, #4
 800e1d2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 800e1d4:	68da      	ldr	r2, [r3, #12]
 800e1d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1da:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e1dc:	68da      	ldr	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 800e1de:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e1e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1e4:	60da      	str	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 800e1e6:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 800e1ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	2000ce94 	.word	0x2000ce94
 800e1f4:	2000d0a4 	.word	0x2000d0a4
 800e1f8:	40021000 	.word	0x40021000

0800e1fc <TIM_LogAnlys_Start>:
{
 800e1fc:	b508      	push	{r3, lr}
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 800e1fe:	4b07      	ldr	r3, [pc, #28]	; (800e21c <TIM_LogAnlys_Start+0x20>)
 800e200:	4907      	ldr	r1, [pc, #28]	; (800e220 <TIM_LogAnlys_Start+0x24>)
 800e202:	68da      	ldr	r2, [r3, #12]
 800e204:	8a1b      	ldrh	r3, [r3, #16]
 800e206:	4807      	ldr	r0, [pc, #28]	; (800e224 <TIM_LogAnlys_Start+0x28>)
 800e208:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e20c:	f7f8 f922 	bl	8006454 <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim1);
 800e210:	4805      	ldr	r0, [pc, #20]	; (800e228 <TIM_LogAnlys_Start+0x2c>)
}
 800e212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim1);
 800e216:	f7f9 bbfd 	b.w	8007a14 <HAL_TIM_Base_Start>
 800e21a:	bf00      	nop
 800e21c:	20005438 	.word	0x20005438
 800e220:	48000410 	.word	0x48000410
 800e224:	2000d124 	.word	0x2000d124
 800e228:	2000d0a4 	.word	0x2000d0a4

0800e22c <TIM_LogAnlys_Stop>:
{
 800e22c:	b510      	push	{r4, lr}
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
	HAL_TIM_Base_Stop(&htim1);
 800e22e:	480d      	ldr	r0, [pc, #52]	; (800e264 <TIM_LogAnlys_Stop+0x38>)
	HAL_TIM_Base_Stop(&htim4);
 800e230:	4c0d      	ldr	r4, [pc, #52]	; (800e268 <TIM_LogAnlys_Stop+0x3c>)
	HAL_TIM_Base_Stop(&htim1);
 800e232:	f7f9 fbff 	bl	8007a34 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 800e236:	480d      	ldr	r0, [pc, #52]	; (800e26c <TIM_LogAnlys_Stop+0x40>)
 800e238:	f7f8 f97e 	bl	8006538 <HAL_DMA_Abort>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 800e23c:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <TIM_LogAnlys_Stop+0x44>)
 800e23e:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800e242:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e244:	2017      	movs	r0, #23
 800e246:	f7f7 ff13 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e24a:	2028      	movs	r0, #40	; 0x28
 800e24c:	f7f7 ff10 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop(&htim4);
 800e250:	4620      	mov	r0, r4
 800e252:	f7f9 fbef 	bl	8007a34 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800e256:	6821      	ldr	r1, [r4, #0]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e258:	4b06      	ldr	r3, [pc, #24]	; (800e274 <TIM_LogAnlys_Stop+0x48>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800e25a:	2000      	movs	r0, #0
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e25c:	2201      	movs	r2, #1
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800e25e:	6248      	str	r0, [r1, #36]	; 0x24
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800e260:	75da      	strb	r2, [r3, #23]
}
 800e262:	bd10      	pop	{r4, pc}
 800e264:	2000d0a4 	.word	0x2000d0a4
 800e268:	2000ce94 	.word	0x2000ce94
 800e26c:	2000d124 	.word	0x2000d124
 800e270:	40010400 	.word	0x40010400
 800e274:	20005438 	.word	0x20005438

0800e278 <TIM_LogAnlys_PostTrigger_Reconfig>:
{
 800e278:	b530      	push	{r4, r5, lr}
 800e27a:	ec53 2b10 	vmov	r2, r3, d0
 800e27e:	b083      	sub	sp, #12
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e280:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
{
 800e284:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e288:	f7f9 f942 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
	double freq = 1 / posttrigInSec;
 800e28c:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e290:	4605      	mov	r5, r0
	double freq = 1 / posttrigInSec;
 800e292:	4908      	ldr	r1, [pc, #32]	; (800e2b4 <TIM_LogAnlys_PostTrigger_Reconfig+0x3c>)
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 800e294:	4c08      	ldr	r4, [pc, #32]	; (800e2b8 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
	double freq = 1 / posttrigInSec;
 800e296:	2000      	movs	r0, #0
 800e298:	f7f2 fa90 	bl	80007bc <__aeabi_ddiv>
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 800e29c:	ec41 0b10 	vmov	d0, r0, r1
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7fe f96e 	bl	800c584 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 800e2a8:	4620      	mov	r0, r4
}
 800e2aa:	b003      	add	sp, #12
 800e2ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_TIM_Base_Stop(&htim4);
 800e2b0:	f7f9 bbc0 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800e2b4:	3ff00000 	.word	0x3ff00000
 800e2b8:	2000ce94 	.word	0x2000ce94

0800e2bc <TIM_LogAnlys_SamplingFreq_Reconfig>:
{
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4605      	mov	r5, r0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 800e2c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e2c4:	f7f9 f924 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2c8:	4604      	mov	r4, r0
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f7f2 f8d2 	bl	8000474 <__aeabi_ui2d>
 800e2d0:	ec41 0b10 	vmov	d0, r0, r1
 800e2d4:	0061      	lsls	r1, r4, #1
 800e2d6:	4805      	ldr	r0, [pc, #20]	; (800e2ec <TIM_LogAnlys_SamplingFreq_Reconfig+0x30>)
 800e2d8:	f7fe f954 	bl	800c584 <TIM_ReconfigPrecise>
 800e2dc:	ec51 0b10 	vmov	r0, r1, d0
 800e2e0:	f7f2 fc1a 	bl	8000b18 <__aeabi_d2uiz>
 800e2e4:	4b02      	ldr	r3, [pc, #8]	; (800e2f0 <TIM_LogAnlys_SamplingFreq_Reconfig+0x34>)
 800e2e6:	6058      	str	r0, [r3, #4]
}
 800e2e8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ea:	bf00      	nop
 800e2ec:	2000d0a4 	.word	0x2000d0a4
 800e2f0:	20005438 	.word	0x20005438

0800e2f4 <TIM_PostTrigger_SoftwareStart>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800e2f4:	4b04      	ldr	r3, [pc, #16]	; (800e308 <TIM_PostTrigger_SoftwareStart+0x14>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	f042 0201 	orr.w	r2, r2, #1
 800e302:	601a      	str	r2, [r3, #0]
}
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	2000ce94 	.word	0x2000ce94

0800e30c <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 800e30c:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e30e:	2017      	movs	r0, #23
{
 800e310:	b087      	sub	sp, #28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e312:	f7f7 fead 	bl	8006070 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e316:	2028      	movs	r0, #40	; 0x28
 800e318:	f7f7 feaa 	bl	8006070 <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800e31c:	4a28      	ldr	r2, [pc, #160]	; (800e3c0 <GPIO_EnableTrigger+0xb4>)


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e31e:	4829      	ldr	r0, [pc, #164]	; (800e3c4 <GPIO_EnableTrigger+0xb8>)
	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800e320:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800e324:	9301      	str	r3, [sp, #4]
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800e326:	6813      	ldr	r3, [r2, #0]
 800e328:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800e32c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e32e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e330:	2201      	movs	r2, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e332:	2303      	movs	r3, #3
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e334:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800e336:	e9cd 5202 	strd	r5, r2, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e33a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e33c:	f7f8 f9e0 	bl	8006700 <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800e340:	4a21      	ldr	r2, [pc, #132]	; (800e3c8 <GPIO_EnableTrigger+0xbc>)
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e342:	4b22      	ldr	r3, [pc, #136]	; (800e3cc <GPIO_EnableTrigger+0xc0>)
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800e344:	7d90      	ldrb	r0, [r2, #22]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e346:	4922      	ldr	r1, [pc, #136]	; (800e3d0 <GPIO_EnableTrigger+0xc4>)
	}

	switch(logAnlys.trigConfig){
 800e348:	7d52      	ldrb	r2, [r2, #21]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800e34a:	2801      	cmp	r0, #1
 800e34c:	bf18      	it	ne
 800e34e:	460b      	movne	r3, r1
 800e350:	9302      	str	r3, [sp, #8]
	switch(logAnlys.trigConfig){
 800e352:	2a07      	cmp	r2, #7
 800e354:	d809      	bhi.n	800e36a <GPIO_EnableTrigger+0x5e>
 800e356:	e8df f002 	tbb	[pc, r2]
 800e35a:	1511      	.short	0x1511
 800e35c:	28231e19 	.word	0x28231e19
 800e360:	042d      	.short	0x042d
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
		ExtiLine = EXTI15_10_IRQn;
		break;
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 800e362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e366:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e368:	2428      	movs	r4, #40	; 0x28
		break;
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800e36a:	a901      	add	r1, sp, #4
 800e36c:	4815      	ldr	r0, [pc, #84]	; (800e3c4 <GPIO_EnableTrigger+0xb8>)
 800e36e:	f7f8 f9c7 	bl	8006700 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 800e372:	4620      	mov	r0, r4
 800e374:	f7f7 fe70 	bl	8006058 <HAL_NVIC_EnableIRQ>
}
 800e378:	b007      	add	sp, #28
 800e37a:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 800e37c:	2340      	movs	r3, #64	; 0x40
 800e37e:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e380:	2417      	movs	r4, #23
		break;
 800e382:	e7f2      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 800e384:	2380      	movs	r3, #128	; 0x80
 800e386:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e388:	2417      	movs	r4, #23
		break;
 800e38a:	e7ee      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 800e38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e390:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e392:	2417      	movs	r4, #23
		break;
 800e394:	e7e9      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 800e396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e39a:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800e39c:	2417      	movs	r4, #23
		break;
 800e39e:	e7e4      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 800e3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a4:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e3a6:	2428      	movs	r4, #40	; 0x28
		break;
 800e3a8:	e7df      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 800e3aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ae:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e3b0:	2428      	movs	r4, #40	; 0x28
		break;
 800e3b2:	e7da      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 800e3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3b8:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800e3ba:	2428      	movs	r4, #40	; 0x28
		break;
 800e3bc:	e7d5      	b.n	800e36a <GPIO_EnableTrigger+0x5e>
 800e3be:	bf00      	nop
 800e3c0:	40010400 	.word	0x40010400
 800e3c4:	48000400 	.word	0x48000400
 800e3c8:	20005438 	.word	0x20005438
 800e3cc:	10210000 	.word	0x10210000
 800e3d0:	10110000 	.word	0x10110000

0800e3d4 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800e3d4:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 800e3d6:	4c0e      	ldr	r4, [pc, #56]	; (800e410 <MX_TIM15_Init+0x3c>)
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <MX_TIM15_Init+0x40>)
 800e3da:	6023      	str	r3, [r4, #0]
{
 800e3dc:	b089      	sub	sp, #36	; 0x24
	htim_scope.Init.Prescaler = 0;
 800e3de:	2500      	movs	r5, #0
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_scope.Init.Period = 0;
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init(&htim_scope);
 800e3e0:	4620      	mov	r0, r4
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3e2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3e6:	e9c4 5503 	strd	r5, r5, [r4, #12]
	HAL_TIM_Base_Init(&htim_scope);
 800e3ea:	f7f9 fa5b 	bl	80078a4 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3ee:	a908      	add	r1, sp, #32
 800e3f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3f4:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7f9 ff0f 	bl	800821c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e3fe:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800e400:	4620      	mov	r0, r4
 800e402:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e404:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e406:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800e408:	f7fa fb46 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>

}
 800e40c:	b009      	add	sp, #36	; 0x24
 800e40e:	bd30      	pop	{r4, r5, pc}
 800e410:	2000d1ac 	.word	0x2000d1ac
 800e414:	40014000 	.word	0x40014000

0800e418 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
	__TIM15_CLK_ENABLE();
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <TIM15_SCOPE_MspInit+0x1c>)
 800e41a:	699a      	ldr	r2, [r3, #24]
 800e41c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e420:	619a      	str	r2, [r3, #24]
 800e422:	699b      	ldr	r3, [r3, #24]
{
 800e424:	b082      	sub	sp, #8
	__TIM15_CLK_ENABLE();
 800e426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	9b01      	ldr	r3, [sp, #4]
}
 800e42e:	b002      	add	sp, #8
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	40021000 	.word	0x40021000

0800e438 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__TIM15_CLK_DISABLE();
 800e438:	4a02      	ldr	r2, [pc, #8]	; (800e444 <TIM15_SCOPE_MspDeinit+0xc>)
 800e43a:	6993      	ldr	r3, [r2, #24]
 800e43c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e440:	6193      	str	r3, [r2, #24]
}
 800e442:	4770      	bx	lr
 800e444:	40021000 	.word	0x40021000

0800e448 <TIMScopeEnable>:

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
	HAL_TIM_Base_Start(&htim_scope);
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <TIMScopeEnable+0x8>)
 800e44a:	f7f9 bae3 	b.w	8007a14 <HAL_TIM_Base_Start>
 800e44e:	bf00      	nop
 800e450:	2000d1ac 	.word	0x2000d1ac

0800e454 <TIMScopeDisable>:
}

void TIMScopeDisable(){
	HAL_TIM_Base_Stop(&htim_scope);
 800e454:	4801      	ldr	r0, [pc, #4]	; (800e45c <TIMScopeDisable+0x8>)
 800e456:	f7f9 baed 	b.w	8007a34 <HAL_TIM_Base_Stop>
 800e45a:	bf00      	nop
 800e45c:	2000d1ac 	.word	0x2000d1ac

0800e460 <TIM_Reconfig_scope>:
}

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	4605      	mov	r5, r0
 800e464:	b082      	sub	sp, #8
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 800e466:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800e46a:	460e      	mov	r6, r1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 800e46c:	f7f9 f850 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 800e470:	2401      	movs	r4, #1
 800e472:	4601      	mov	r1, r0
 800e474:	4633      	mov	r3, r6
 800e476:	462a      	mov	r2, r5
 800e478:	9400      	str	r4, [sp, #0]
 800e47a:	4802      	ldr	r0, [pc, #8]	; (800e484 <TIM_Reconfig_scope+0x24>)
 800e47c:	f7fe f81a 	bl	800c4b4 <TIM_Reconfig>
}
 800e480:	b002      	add	sp, #8
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	2000d1ac 	.word	0x2000d1ac

0800e488 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
	if(ADCRes==12){
 800e488:	280c      	cmp	r0, #12
 800e48a:	d00b      	beq.n	800e4a4 <getMaxScopeSamplingFreq+0x1c>
		return MAX_SAMPLING_FREQ_12B;
	}else if(ADCRes==8){
 800e48c:	2808      	cmp	r0, #8
 800e48e:	d007      	beq.n	800e4a0 <getMaxScopeSamplingFreq+0x18>
uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 800e490:	b510      	push	{r4, lr}
 800e492:	4604      	mov	r4, r0
		return MAX_SAMPLING_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800e494:	f7f8 fed6 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 800e498:	3402      	adds	r4, #2
 800e49a:	fbb0 f0f4 	udiv	r0, r0, r4
}
 800e49e:	bd10      	pop	{r4, pc}
		return MAX_SAMPLING_FREQ_8B;
 800e4a0:	4801      	ldr	r0, [pc, #4]	; (800e4a8 <getMaxScopeSamplingFreq+0x20>)
}
 800e4a2:	4770      	bx	lr
		return MAX_SAMPLING_FREQ_12B;
 800e4a4:	4801      	ldr	r0, [pc, #4]	; (800e4ac <getMaxScopeSamplingFreq+0x24>)
 800e4a6:	4770      	bx	lr
 800e4a8:	00493e00 	.word	0x00493e00
 800e4ac:	003d0900 	.word	0x003d0900

0800e4b0 <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 800e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 800e4b2:	4d2f      	ldr	r5, [pc, #188]	; (800e570 <MX_TIM8_SYNC_PWM_Init+0xc0>)
 800e4b4:	4b2f      	ldr	r3, [pc, #188]	; (800e574 <MX_TIM8_SYNC_PWM_Init+0xc4>)
 800e4b6:	602b      	str	r3, [r5, #0]
static void MX_TIM8_SYNC_PWM_Init(void) {
 800e4b8:	b09b      	sub	sp, #108	; 0x6c
	htim8.Init.Prescaler = 1151; // 1151
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4ba:	2400      	movs	r4, #0
	htim8.Init.Prescaler = 1151; // 1151
 800e4bc:	f240 427f 	movw	r2, #1151	; 0x47f
	htim8.Init.Period = 62499; // 62499
 800e4c0:	f24f 4323 	movw	r3, #62499	; 0xf423
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim8.Init.RepetitionCounter = 0;
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim8);
 800e4c4:	4628      	mov	r0, r5
	htim8.Init.Prescaler = 1151; // 1151
 800e4c6:	606a      	str	r2, [r5, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4c8:	e9c5 4302 	strd	r4, r3, [r5, #8]
	htim8.Init.RepetitionCounter = 0;
 800e4cc:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e4d0:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim8);
 800e4d2:	f7f9 f9e7 	bl	80078a4 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e4d6:	a91a      	add	r1, sp, #104	; 0x68
 800e4d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4dc:	f841 3d58 	str.w	r3, [r1, #-88]!
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f7f9 fe9b 	bl	800821c <HAL_TIM_ConfigClockSource>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800e4e6:	4e24      	ldr	r6, [pc, #144]	; (800e578 <MX_TIM8_SYNC_PWM_Init+0xc8>)
	HAL_TIM_OC_Init(&htim8);
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f7f9 fadf 	bl	8007aac <HAL_TIM_OC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800e4ee:	a901      	add	r1, sp, #4
 800e4f0:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e4f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4f6:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800e4f8:	f7fa face 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800e4fc:	8877      	ldrh	r7, [r6, #2]
 800e4fe:	9709      	str	r7, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800e500:	4622      	mov	r2, r4
 800e502:	a908      	add	r1, sp, #32
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800e504:	2330      	movs	r3, #48	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800e506:	2708      	movs	r7, #8
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800e508:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800e50a:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e50c:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e50e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e512:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800e514:	970b      	str	r7, [sp, #44]	; 0x2c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800e516:	f7fa f8e7 	bl	80086e8 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 800e51a:	88f3      	ldrh	r3, [r6, #6]
 800e51c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 800e51e:	a908      	add	r1, sp, #32
 800e520:	4628      	mov	r0, r5
 800e522:	2204      	movs	r2, #4
 800e524:	f7fa f8e0 	bl	80086e8 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 800e528:	8973      	ldrh	r3, [r6, #10]
 800e52a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 800e52c:	463a      	mov	r2, r7
 800e52e:	a908      	add	r1, sp, #32
 800e530:	4628      	mov	r0, r5
 800e532:	f7fa f8d9 	bl	80086e8 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 800e536:	89f3      	ldrh	r3, [r6, #14]
 800e538:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800e53a:	a908      	add	r1, sp, #32
 800e53c:	4628      	mov	r0, r5
 800e53e:	220c      	movs	r2, #12
 800e540:	f7fa f8d2 	bl	80086e8 <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800e54c:	4628      	mov	r0, r5
 800e54e:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e550:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800e554:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e558:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e55a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e55e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e562:	9214      	str	r2, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e564:	9317      	str	r3, [sp, #92]	; 0x5c
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800e566:	f7fa fac3 	bl	8008af0 <HAL_TIMEx_ConfigBreakDeadTime>
}
 800e56a:	b01b      	add	sp, #108	; 0x6c
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56e:	bf00      	nop
 800e570:	2000d230 	.word	0x2000d230
 800e574:	40013400 	.word	0x40013400
 800e578:	2000cb20 	.word	0x2000cb20

0800e57c <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e57c:	4b4b      	ldr	r3, [pc, #300]	; (800e6ac <TIM8_SYNC_PWM_MspInit+0x130>)
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800e57e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e582:	6999      	ldr	r1, [r3, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 800e584:	4d4a      	ldr	r5, [pc, #296]	; (800e6b0 <TIM8_SYNC_PWM_MspInit+0x134>)
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch1);
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800e586:	f8df b14c 	ldr.w	fp, [pc, #332]	; 800e6d4 <TIM8_SYNC_PWM_MspInit+0x158>
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 800e58a:	4c4a      	ldr	r4, [pc, #296]	; (800e6b4 <TIM8_SYNC_PWM_MspInit+0x138>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e58c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800e590:	6199      	str	r1, [r3, #24]
 800e592:	6999      	ldr	r1, [r3, #24]
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800e594:	b087      	sub	sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800e596:	2604      	movs	r6, #4
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e598:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800e59c:	4682      	mov	sl, r0
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e59e:	9100      	str	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5a0:	2202      	movs	r2, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5a2:	eb0d 0106 	add.w	r1, sp, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5a6:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800e5a8:	f44f 7870 	mov.w	r8, #960	; 0x3c0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5ac:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5ae:	4842      	ldr	r0, [pc, #264]	; (800e6b8 <TIM8_SYNC_PWM_MspInit+0x13c>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 800e5b0:	f8dd 9000 	ldr.w	r9, [sp]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800e5b4:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b6:	e9cd 8201 	strd	r8, r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5ba:	e9cd 3703 	strd	r3, r7, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5be:	f7f8 f89f 	bl	8006700 <HAL_GPIO_Init>
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e5c2:	2210      	movs	r2, #16
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e9c5 2301 	strd	r2, r3, [r5, #4]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e5ca:	f44f 6780 	mov.w	r7, #1024	; 0x400
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800e5ce:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e5d2:	f44f 7880 	mov.w	r8, #256	; 0x100
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800e5d6:	2620      	movs	r6, #32
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 800e5d8:	4938      	ldr	r1, [pc, #224]	; (800e6bc <TIM8_SYNC_PWM_MspInit+0x140>)
 800e5da:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800e5dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch1);
 800e5e0:	4628      	mov	r0, r5
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e5e2:	e9c5 9803 	strd	r9, r8, [r5, #12]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800e5e6:	e9c5 7605 	strd	r7, r6, [r5, #20]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800e5ea:	61eb      	str	r3, [r5, #28]
	HAL_DMA_Init(&hdma_tim8_ch1);
 800e5ec:	f7f7 feaa 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800e5f0:	f8db 0000 	ldr.w	r0, [fp]
 800e5f4:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e5f6:	2310      	movs	r3, #16
 800e5f8:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800e5fa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e5fe:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800e600:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e602:	60a3      	str	r3, [r4, #8]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 800e604:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 800e608:	492d      	ldr	r1, [pc, #180]	; (800e6c0 <TIM8_SYNC_PWM_MspInit+0x144>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 800e60a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800e60e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch2);
 800e612:	4620      	mov	r0, r4
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e614:	e9c4 9803 	strd	r9, r8, [r4, #12]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 800e618:	e9c4 7605 	strd	r7, r6, [r4, #20]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800e61c:	61e3      	str	r3, [r4, #28]
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 800e61e:	6021      	str	r1, [r4, #0]
	HAL_DMA_Init(&hdma_tim8_ch2);
 800e620:	f7f7 fe90 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800e624:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800e628:	4d26      	ldr	r5, [pc, #152]	; (800e6c4 <TIM8_SYNC_PWM_MspInit+0x148>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800e62a:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e62c:	2310      	movs	r3, #16
 800e62e:	606b      	str	r3, [r5, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800e630:	4339      	orrs	r1, r7
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800e632:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800e634:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800e636:	4924      	ldr	r1, [pc, #144]	; (800e6c8 <TIM8_SYNC_PWM_MspInit+0x14c>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 800e638:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800e63c:	e9c5 3902 	strd	r3, r9, [r5, #8]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 800e640:	4628      	mov	r0, r5
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 800e646:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e64a:	61eb      	str	r3, [r5, #28]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800e64c:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e64e:	e9c5 8704 	strd	r8, r7, [r5, #16]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 800e652:	61ae      	str	r6, [r5, #24]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 800e654:	f7f7 fe76 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800e658:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800e65c:	4c1b      	ldr	r4, [pc, #108]	; (800e6cc <TIM8_SYNC_PWM_MspInit+0x150>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800e65e:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e660:	2310      	movs	r3, #16
 800e662:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800e664:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800e668:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800e66a:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800e66c:	60a3      	str	r3, [r4, #8]
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800e66e:	4918      	ldr	r1, [pc, #96]	; (800e6d0 <TIM8_SYNC_PWM_MspInit+0x154>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 800e670:	f8ca 502c 	str.w	r5, [sl, #44]	; 0x2c
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800e674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800e678:	4620      	mov	r0, r4
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800e67a:	6021      	str	r1, [r4, #0]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800e67c:	f8c4 900c 	str.w	r9, [r4, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 800e680:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e684:	e9c4 8704 	strd	r8, r7, [r4, #16]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800e688:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800e68a:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800e68c:	f7f7 fe5a 	bl	8006344 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800e690:	f8db 1000 	ldr.w	r1, [fp]
 800e694:	68ca      	ldr	r2, [r1, #12]
 800e696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e69a:	60ca      	str	r2, [r1, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 800e69c:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
 800e6a0:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
}
 800e6a4:	b007      	add	sp, #28
 800e6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6aa:	bf00      	nop
 800e6ac:	40021000 	.word	0x40021000
 800e6b0:	2000d270 	.word	0x2000d270
 800e6b4:	2000d1ec 	.word	0x2000d1ec
 800e6b8:	48000800 	.word	0x48000800
 800e6bc:	40020430 	.word	0x40020430
 800e6c0:	40020458 	.word	0x40020458
 800e6c4:	2000d2f8 	.word	0x2000d2f8
 800e6c8:	40020408 	.word	0x40020408
 800e6cc:	2000d2b4 	.word	0x2000d2b4
 800e6d0:	4002041c 	.word	0x4002041c
 800e6d4:	2000d230 	.word	0x2000d230

0800e6d8 <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 800e6d8:	4a0a      	ldr	r2, [pc, #40]	; (800e704 <TIM8_SYNC_PWM_MspDeinit+0x2c>)
 800e6da:	6993      	ldr	r3, [r2, #24]
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 800e6dc:	b510      	push	{r4, lr}
	__HAL_RCC_TIM8_CLK_DISABLE();
 800e6de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 800e6e2:	4604      	mov	r4, r0
	__HAL_RCC_TIM8_CLK_DISABLE();
 800e6e4:	6193      	str	r3, [r2, #24]

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800e6e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e6e8:	f7f7 fe76 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800e6ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e6ee:	f7f7 fe73 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 800e6f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e6f4:	f7f7 fe70 	bl	80063d8 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 800e6f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 800e6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 800e6fe:	f7f7 be6b 	b.w	80063d8 <HAL_DMA_DeInit>
 800e702:	bf00      	nop
 800e704:	40021000 	.word	0x40021000

0800e708 <TIM_SYNC_PWM_Init>:
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 800e708:	f7ff bed2 	b.w	800e4b0 <MX_TIM8_SYNC_PWM_Init>

0800e70c <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 800e70c:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim8);
 800e70e:	4806      	ldr	r0, [pc, #24]	; (800e728 <TIM_SYNC_PWM_Deinit+0x1c>)
 800e710:	f7f9 f962 	bl	80079d8 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 800e714:	4b05      	ldr	r3, [pc, #20]	; (800e72c <TIM_SYNC_PWM_Deinit+0x20>)
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e71c:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 800e71e:	68da      	ldr	r2, [r3, #12]
 800e720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e724:	60da      	str	r2, [r3, #12]
}
 800e726:	bd08      	pop	{r3, pc}
 800e728:	2000d230 	.word	0x2000d230
 800e72c:	40021000 	.word	0x40021000

0800e730 <TIM_SYNC_PWM_ChannelState>:
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
	if (channel == 1) {
 800e730:	2801      	cmp	r0, #1
 800e732:	d017      	beq.n	800e764 <TIM_SYNC_PWM_ChannelState+0x34>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 2) {
 800e734:	2802      	cmp	r0, #2
 800e736:	d00c      	beq.n	800e752 <TIM_SYNC_PWM_ChannelState+0x22>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 3) {
 800e738:	2803      	cmp	r0, #3
 800e73a:	d01c      	beq.n	800e776 <TIM_SYNC_PWM_ChannelState+0x46>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
 800e73c:	2804      	cmp	r0, #4
 800e73e:	d107      	bne.n	800e750 <TIM_SYNC_PWM_ChannelState+0x20>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800e740:	f1a1 0101 	sub.w	r1, r1, #1
 800e744:	4b10      	ldr	r3, [pc, #64]	; (800e788 <TIM_SYNC_PWM_ChannelState+0x58>)
 800e746:	fab1 f181 	clz	r1, r1
 800e74a:	0949      	lsrs	r1, r1, #5
 800e74c:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	}
}
 800e750:	4770      	bx	lr
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800e752:	f1a1 0101 	sub.w	r1, r1, #1
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <TIM_SYNC_PWM_ChannelState+0x58>)
 800e758:	fab1 f181 	clz	r1, r1
 800e75c:	0949      	lsrs	r1, r1, #5
 800e75e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 800e762:	4770      	bx	lr
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800e764:	f1a1 0101 	sub.w	r1, r1, #1
 800e768:	4b07      	ldr	r3, [pc, #28]	; (800e788 <TIM_SYNC_PWM_ChannelState+0x58>)
 800e76a:	fab1 f181 	clz	r1, r1
 800e76e:	0949      	lsrs	r1, r1, #5
 800e770:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 800e774:	4770      	bx	lr
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800e776:	f1a1 0101 	sub.w	r1, r1, #1
 800e77a:	4b03      	ldr	r3, [pc, #12]	; (800e788 <TIM_SYNC_PWM_ChannelState+0x58>)
 800e77c:	fab1 f181 	clz	r1, r1
 800e780:	0949      	lsrs	r1, r1, #5
 800e782:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 800e786:	4770      	bx	lr
 800e788:	2000cb20 	.word	0x2000cb20

0800e78c <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 800e78c:	b570      	push	{r4, r5, r6, lr}
	if (syncPwm.chan1 == CHAN_ENABLE) {
 800e78e:	4c38      	ldr	r4, [pc, #224]	; (800e870 <TIM_SYNC_PWM_Start+0xe4>)
 800e790:	4e38      	ldr	r6, [pc, #224]	; (800e874 <TIM_SYNC_PWM_Start+0xe8>)
 800e792:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 800e796:	6832      	ldr	r2, [r6, #0]
 800e798:	b2ed      	uxtb	r5, r5
 800e79a:	2d01      	cmp	r5, #1
 800e79c:	d053      	beq.n	800e846 <TIM_SYNC_PWM_Start+0xba>
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
				(uint32_t) &(htim8.Instance->CCR1), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 800e79e:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 800e7a2:	b2ed      	uxtb	r5, r5
 800e7a4:	2d01      	cmp	r5, #1
 800e7a6:	d03a      	beq.n	800e81e <TIM_SYNC_PWM_Start+0x92>
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
				(uint32_t) &(htim8.Instance->CCR2), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 800e7a8:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 800e7ac:	b2ed      	uxtb	r5, r5
 800e7ae:	2d01      	cmp	r5, #1
 800e7b0:	d021      	beq.n	800e7f6 <TIM_SYNC_PWM_Start+0x6a>
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
				(uint32_t) &(htim8.Instance->CCR3), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 800e7b2:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 800e7b6:	b2ed      	uxtb	r5, r5
 800e7b8:	2d01      	cmp	r5, #1
 800e7ba:	d008      	beq.n	800e7ce <TIM_SYNC_PWM_Start+0x42>
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 800e7bc:	6c53      	ldr	r3, [r2, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 800e7be:	482d      	ldr	r0, [pc, #180]	; (800e874 <TIM_SYNC_PWM_Start+0xe8>)
	__HAL_TIM_MOE_ENABLE(&htim8);
 800e7c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7c4:	6453      	str	r3, [r2, #68]	; 0x44
}
 800e7c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim8);
 800e7ca:	f7f9 b923 	b.w	8007a14 <HAL_TIM_Base_Start>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 800e7ce:	89e3      	ldrh	r3, [r4, #14]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 800e7d0:	4929      	ldr	r1, [pc, #164]	; (800e878 <TIM_SYNC_PWM_Start+0xec>)
 800e7d2:	482a      	ldr	r0, [pc, #168]	; (800e87c <TIM_SYNC_PWM_Start+0xf0>)
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800e7d8:	68d3      	ldr	r3, [r2, #12]
 800e7da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e7de:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 800e7e0:	3240      	adds	r2, #64	; 0x40
 800e7e2:	2302      	movs	r3, #2
 800e7e4:	f7f7 fe36 	bl	8006454 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 800e7e8:	462a      	mov	r2, r5
 800e7ea:	210c      	movs	r1, #12
 800e7ec:	6830      	ldr	r0, [r6, #0]
 800e7ee:	f7f9 ff6d 	bl	80086cc <TIM_CCxChannelCmd>
 800e7f2:	6832      	ldr	r2, [r6, #0]
 800e7f4:	e7e2      	b.n	800e7bc <TIM_SYNC_PWM_Start+0x30>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 800e7f6:	8963      	ldrh	r3, [r4, #10]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 800e7f8:	4921      	ldr	r1, [pc, #132]	; (800e880 <TIM_SYNC_PWM_Start+0xf4>)
 800e7fa:	4822      	ldr	r0, [pc, #136]	; (800e884 <TIM_SYNC_PWM_Start+0xf8>)
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	63d3      	str	r3, [r2, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800e800:	68d3      	ldr	r3, [r2, #12]
 800e802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e806:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 800e808:	323c      	adds	r2, #60	; 0x3c
 800e80a:	2302      	movs	r3, #2
 800e80c:	f7f7 fe22 	bl	8006454 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 800e810:	462a      	mov	r2, r5
 800e812:	2108      	movs	r1, #8
 800e814:	6830      	ldr	r0, [r6, #0]
 800e816:	f7f9 ff59 	bl	80086cc <TIM_CCxChannelCmd>
 800e81a:	6832      	ldr	r2, [r6, #0]
 800e81c:	e7c9      	b.n	800e7b2 <TIM_SYNC_PWM_Start+0x26>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 800e81e:	88e3      	ldrh	r3, [r4, #6]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 800e820:	4919      	ldr	r1, [pc, #100]	; (800e888 <TIM_SYNC_PWM_Start+0xfc>)
 800e822:	481a      	ldr	r0, [pc, #104]	; (800e88c <TIM_SYNC_PWM_Start+0x100>)
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 800e824:	b29b      	uxth	r3, r3
 800e826:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800e828:	68d3      	ldr	r3, [r2, #12]
 800e82a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e82e:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 800e830:	3238      	adds	r2, #56	; 0x38
 800e832:	2302      	movs	r3, #2
 800e834:	f7f7 fe0e 	bl	8006454 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e838:	462a      	mov	r2, r5
 800e83a:	2104      	movs	r1, #4
 800e83c:	6830      	ldr	r0, [r6, #0]
 800e83e:	f7f9 ff45 	bl	80086cc <TIM_CCxChannelCmd>
 800e842:	6832      	ldr	r2, [r6, #0]
 800e844:	e7b0      	b.n	800e7a8 <TIM_SYNC_PWM_Start+0x1c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 800e846:	8863      	ldrh	r3, [r4, #2]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 800e848:	4811      	ldr	r0, [pc, #68]	; (800e890 <TIM_SYNC_PWM_Start+0x104>)
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800e84e:	68d3      	ldr	r3, [r2, #12]
 800e850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e854:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 800e856:	4621      	mov	r1, r4
 800e858:	3234      	adds	r2, #52	; 0x34
 800e85a:	2302      	movs	r3, #2
 800e85c:	f7f7 fdfa 	bl	8006454 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e860:	462a      	mov	r2, r5
 800e862:	2100      	movs	r1, #0
 800e864:	6830      	ldr	r0, [r6, #0]
 800e866:	f7f9 ff31 	bl	80086cc <TIM_CCxChannelCmd>
 800e86a:	6832      	ldr	r2, [r6, #0]
 800e86c:	e797      	b.n	800e79e <TIM_SYNC_PWM_Start+0x12>
 800e86e:	bf00      	nop
 800e870:	2000cb20 	.word	0x2000cb20
 800e874:	2000d230 	.word	0x2000d230
 800e878:	2000cb2c 	.word	0x2000cb2c
 800e87c:	2000d2b4 	.word	0x2000d2b4
 800e880:	2000cb28 	.word	0x2000cb28
 800e884:	2000d2f8 	.word	0x2000d2f8
 800e888:	2000cb24 	.word	0x2000cb24
 800e88c:	2000d1ec 	.word	0x2000d1ec
 800e890:	2000d270 	.word	0x2000d270

0800e894 <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 800e894:	b538      	push	{r3, r4, r5, lr}
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 800e896:	4d4f      	ldr	r5, [pc, #316]	; (800e9d4 <TIM_SYNC_PWM_Stop+0x140>)
 800e898:	682b      	ldr	r3, [r5, #0]
 800e89a:	6a19      	ldr	r1, [r3, #32]
 800e89c:	f241 1211 	movw	r2, #4369	; 0x1111
 800e8a0:	4211      	tst	r1, r2
 800e8a2:	d105      	bne.n	800e8b0 <TIM_SYNC_PWM_Stop+0x1c>
 800e8a4:	6a19      	ldr	r1, [r3, #32]
 800e8a6:	f240 4244 	movw	r2, #1092	; 0x444
 800e8aa:	4211      	tst	r1, r2
 800e8ac:	f000 808d 	beq.w	800e9ca <TIM_SYNC_PWM_Stop+0x136>
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 800e8b0:	6a19      	ldr	r1, [r3, #32]
 800e8b2:	f241 1211 	movw	r2, #4369	; 0x1111
 800e8b6:	4211      	tst	r1, r2
 800e8b8:	d104      	bne.n	800e8c4 <TIM_SYNC_PWM_Stop+0x30>
 800e8ba:	6a19      	ldr	r1, [r3, #32]
 800e8bc:	f240 4244 	movw	r2, #1092	; 0x444
 800e8c0:	4211      	tst	r1, r2
 800e8c2:	d038      	beq.n	800e936 <TIM_SYNC_PWM_Stop+0xa2>

	if (syncPwm.chan1 == CHAN_ENABLE) {
 800e8c4:	4c44      	ldr	r4, [pc, #272]	; (800e9d8 <TIM_SYNC_PWM_Stop+0x144>)
 800e8c6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800e8ca:	2a01      	cmp	r2, #1
 800e8cc:	d03c      	beq.n	800e948 <TIM_SYNC_PWM_Stop+0xb4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
		HAL_DMA_Abort(&hdma_tim8_ch1);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 800e8ce:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800e8d2:	2a01      	cmp	r2, #1
 800e8d4:	d049      	beq.n	800e96a <TIM_SYNC_PWM_Stop+0xd6>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
		HAL_DMA_Abort(&hdma_tim8_ch2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 800e8d6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800e8da:	2a01      	cmp	r2, #1
 800e8dc:	d056      	beq.n	800e98c <TIM_SYNC_PWM_Stop+0xf8>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 800e8de:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800e8e2:	2a01      	cmp	r2, #1
 800e8e4:	d063      	beq.n	800e9ae <TIM_SYNC_PWM_Stop+0x11a>
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 800e8e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	syncPwm.timPrescReg = htim8.Instance->PSC;

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 800e8e8:	4a3c      	ldr	r2, [pc, #240]	; (800e9dc <TIM_SYNC_PWM_Stop+0x148>)
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 800e8ea:	b289      	uxth	r1, r1
 800e8ec:	8221      	strh	r1, [r4, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 800e8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	8263      	strh	r3, [r4, #18]
	__HAL_RCC_TIM8_FORCE_RESET();
 800e8f4:	68d3      	ldr	r3, [r2, #12]
 800e8f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e8fa:	60d3      	str	r3, [r2, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 800e8fc:	68d3      	ldr	r3, [r2, #12]
 800e8fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e902:	60d3      	str	r3, [r2, #12]

	MX_TIM8_SYNC_PWM_Init();
 800e904:	f7ff fdd4 	bl	800e4b0 <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 800e908:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 800e90c:	682b      	ldr	r3, [r5, #0]
	if (syncPwm.stepMode == CHAN_ENABLE) {
 800e90e:	b2d2      	uxtb	r2, r2
 800e910:	2a01      	cmp	r2, #1
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800e912:	bf01      	itttt	eq
 800e914:	6819      	ldreq	r1, [r3, #0]
 800e916:	f041 0108 	orreq.w	r1, r1, #8
 800e91a:	6019      	streq	r1, [r3, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800e91c:	f884 2025 	strbeq.w	r2, [r4, #37]	; 0x25
	htim8.Instance->PSC = syncPwm.timPrescReg;
 800e920:	8a62      	ldrh	r2, [r4, #18]
 800e922:	b292      	uxth	r2, r2
 800e924:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 800e926:	8a22      	ldrh	r2, [r4, #16]
 800e928:	b292      	uxth	r2, r2
 800e92a:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800e92c:	695a      	ldr	r2, [r3, #20]
 800e92e:	f042 0201 	orr.w	r2, r2, #1
 800e932:	615a      	str	r2, [r3, #20]
}
 800e934:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_TIM_MOE_DISABLE(&htim8);
 800e936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 800e938:	4c27      	ldr	r4, [pc, #156]	; (800e9d8 <TIM_SYNC_PWM_Stop+0x144>)
	__HAL_TIM_MOE_DISABLE(&htim8);
 800e93a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e93e:	645a      	str	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 800e940:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800e944:	2a01      	cmp	r2, #1
 800e946:	d1c2      	bne.n	800e8ce <TIM_SYNC_PWM_Stop+0x3a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 800e948:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 800e94a:	4825      	ldr	r0, [pc, #148]	; (800e9e0 <TIM_SYNC_PWM_Stop+0x14c>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 800e94c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e950:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 800e952:	f7f7 fdf1 	bl	8006538 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e956:	2200      	movs	r2, #0
 800e958:	4611      	mov	r1, r2
 800e95a:	6828      	ldr	r0, [r5, #0]
 800e95c:	f7f9 feb6 	bl	80086cc <TIM_CCxChannelCmd>
	if (syncPwm.chan2 == CHAN_ENABLE) {
 800e960:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800e964:	682b      	ldr	r3, [r5, #0]
 800e966:	2a01      	cmp	r2, #1
 800e968:	d1b5      	bne.n	800e8d6 <TIM_SYNC_PWM_Stop+0x42>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 800e96a:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 800e96c:	481d      	ldr	r0, [pc, #116]	; (800e9e4 <TIM_SYNC_PWM_Stop+0x150>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 800e96e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e972:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 800e974:	f7f7 fde0 	bl	8006538 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e978:	2200      	movs	r2, #0
 800e97a:	2104      	movs	r1, #4
 800e97c:	6828      	ldr	r0, [r5, #0]
 800e97e:	f7f9 fea5 	bl	80086cc <TIM_CCxChannelCmd>
	if (syncPwm.chan3 == CHAN_ENABLE) {
 800e982:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	2a01      	cmp	r2, #1
 800e98a:	d1a8      	bne.n	800e8de <TIM_SYNC_PWM_Stop+0x4a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 800e98c:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 800e98e:	4816      	ldr	r0, [pc, #88]	; (800e9e8 <TIM_SYNC_PWM_Stop+0x154>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 800e990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e994:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 800e996:	f7f7 fdcf 	bl	8006538 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 800e99a:	2200      	movs	r2, #0
 800e99c:	2108      	movs	r1, #8
 800e99e:	6828      	ldr	r0, [r5, #0]
 800e9a0:	f7f9 fe94 	bl	80086cc <TIM_CCxChannelCmd>
	if (syncPwm.chan4 == CHAN_ENABLE) {
 800e9a4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	2a01      	cmp	r2, #1
 800e9ac:	d19b      	bne.n	800e8e6 <TIM_SYNC_PWM_Stop+0x52>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 800e9ae:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 800e9b0:	480e      	ldr	r0, [pc, #56]	; (800e9ec <TIM_SYNC_PWM_Stop+0x158>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 800e9b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e9b6:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 800e9b8:	f7f7 fdbe 	bl	8006538 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 800e9bc:	2200      	movs	r2, #0
 800e9be:	210c      	movs	r1, #12
 800e9c0:	6828      	ldr	r0, [r5, #0]
 800e9c2:	f7f9 fe83 	bl	80086cc <TIM_CCxChannelCmd>
 800e9c6:	682b      	ldr	r3, [r5, #0]
 800e9c8:	e78d      	b.n	800e8e6 <TIM_SYNC_PWM_Stop+0x52>
	__HAL_TIM_DISABLE(&htim8);
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	f022 0201 	bic.w	r2, r2, #1
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	e76d      	b.n	800e8b0 <TIM_SYNC_PWM_Stop+0x1c>
 800e9d4:	2000d230 	.word	0x2000d230
 800e9d8:	2000cb20 	.word	0x2000cb20
 800e9dc:	40021000 	.word	0x40021000
 800e9e0:	2000d270 	.word	0x2000d270
 800e9e4:	2000d1ec 	.word	0x2000d1ec
 800e9e8:	2000d2f8 	.word	0x2000d2f8
 800e9ec:	2000d2b4 	.word	0x2000d2b4

0800e9f0 <TIM_SYNC_PWM_DMA_ChanConfig>:
	switch (syncPwm.channelToConfig) {
 800e9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ea1c <TIM_SYNC_PWM_DMA_ChanConfig+0x2c>)
 800e9f2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	2b03      	cmp	r3, #3
 800e9fa:	d805      	bhi.n	800ea08 <TIM_SYNC_PWM_DMA_ChanConfig+0x18>
 800e9fc:	e8df f003 	tbb	[pc, r3]
 800ea00:	0205080b 	.word	0x0205080b
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 800ea04:	8191      	strh	r1, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 800ea06:	81d0      	strh	r0, [r2, #14]
}
 800ea08:	4770      	bx	lr
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 800ea0a:	8111      	strh	r1, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 800ea0c:	8150      	strh	r0, [r2, #10]
		break;
 800ea0e:	4770      	bx	lr
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 800ea10:	8091      	strh	r1, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 800ea12:	80d0      	strh	r0, [r2, #6]
		break;
 800ea14:	4770      	bx	lr
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 800ea16:	8011      	strh	r1, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 800ea18:	8050      	strh	r0, [r2, #2]
		break;
 800ea1a:	4770      	bx	lr
 800ea1c:	2000cb20 	.word	0x2000cb20

0800ea20 <TIM_SYNC_PWM_StepMode_Enable>:
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 800ea20:	4b05      	ldr	r3, [pc, #20]	; (800ea38 <TIM_SYNC_PWM_StepMode_Enable+0x18>)
	syncPwm.stepMode = CHAN_ENABLE;
 800ea22:	4906      	ldr	r1, [pc, #24]	; (800ea3c <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 800ea24:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800ea26:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800ea28:	2001      	movs	r0, #1
 800ea2a:	f043 0308 	orr.w	r3, r3, #8
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	2000d230 	.word	0x2000d230
 800ea3c:	2000cb20 	.word	0x2000cb20

0800ea40 <TIM_SYNC_PWM_StepMode_Disable>:
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 800ea40:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <TIM_SYNC_PWM_StepMode_Disable+0x18>)
	syncPwm.stepMode = CHAN_DISABLE;
 800ea42:	4906      	ldr	r1, [pc, #24]	; (800ea5c <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 800ea48:	2000      	movs	r0, #0
 800ea4a:	f023 0308 	bic.w	r3, r3, #8
 800ea4e:	6013      	str	r3, [r2, #0]
 800ea50:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	2000d230 	.word	0x2000d230
 800ea5c:	2000cb20 	.word	0x2000cb20

0800ea60 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 800ea60:	b508      	push	{r3, lr}
 800ea62:	ed2d 8b02 	vpush	{d8}
 800ea66:	eeb0 8a40 	vmov.f32	s16, s0
 800ea6a:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 800ea6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ea72:	f7f8 fd4d 	bl	8007510 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800ea76:	eeb0 0a48 	vmov.f32	s0, s16
 800ea7a:	eef0 0a68 	vmov.f32	s1, s17
}
 800ea7e:	ecbd 8b02 	vpop	{d8}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800ea82:	4601      	mov	r1, r0
}
 800ea84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800ea88:	4801      	ldr	r0, [pc, #4]	; (800ea90 <TIM_Reconfig_SyncPwm+0x30>)
 800ea8a:	f7fd bd7b 	b.w	800c584 <TIM_ReconfigPrecise>
 800ea8e:	bf00      	nop
 800ea90:	2000d230 	.word	0x2000d230

0800ea94 <MX_USART2_UART_Init>:
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 800ea94:	4b09      	ldr	r3, [pc, #36]	; (800eabc <MX_USART2_UART_Init+0x28>)
 800ea96:	4a0a      	ldr	r2, [pc, #40]	; (800eac0 <MX_USART2_UART_Init+0x2c>)
{
 800ea98:	b410      	push	{r4}
  huart2.Init.BaudRate = UART_SPEED;
 800ea9a:	f44f 24e1 	mov.w	r4, #460800	; 0x70800
  huart2.Instance = USART2;
 800ea9e:	601a      	str	r2, [r3, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800eaa0:	210c      	movs	r1, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800eaa2:	2200      	movs	r2, #0
  huart2.Init.BaudRate = UART_SPEED;
 800eaa4:	605c      	str	r4, [r3, #4]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 800eaa6:	4618      	mov	r0, r3

}
 800eaa8:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800eaac:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800eaae:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800eab2:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800eab4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  HAL_UART_Init(&huart2);
 800eab8:	f7fa b934 	b.w	8008d24 <HAL_UART_Init>
 800eabc:	2000d3c4 	.word	0x2000d3c4
 800eac0:	40004400 	.word	0x40004400

0800eac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800eac4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800eac6:	4b17      	ldr	r3, [pc, #92]	; (800eb24 <HAL_UART_MspInit+0x60>)
 800eac8:	6804      	ldr	r4, [r0, #0]
 800eaca:	429c      	cmp	r4, r3
{
 800eacc:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800eace:	d001      	beq.n	800ead4 <HAL_UART_MspInit+0x10>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ead0:	b006      	add	sp, #24
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
    __USART2_CLK_ENABLE();
 800ead4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 800ead8:	210c      	movs	r1, #12
    __USART2_CLK_ENABLE();
 800eada:	69da      	ldr	r2, [r3, #28]
 800eadc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eae0:	61da      	str	r2, [r3, #28]
 800eae2:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 800eae4:	9101      	str	r1, [sp, #4]
    __USART2_CLK_ENABLE();
 800eae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaea:	2002      	movs	r0, #2
    __USART2_CLK_ENABLE();
 800eaec:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eaee:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800eaf0:	2307      	movs	r3, #7
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eaf2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaf4:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;   // GPIO_PULLUP
 800eaf6:	2501      	movs	r5, #1
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eaf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eafc:	e9cd 5203 	strd	r5, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800eb00:	9305      	str	r3, [sp, #20]
    __USART2_CLK_ENABLE();
 800eb02:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eb04:	f7f7 fdfc 	bl	8006700 <HAL_GPIO_Init>
		USART2->CR1 |= USART_CR1_RXNEIE;
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	f043 0320 	orr.w	r3, r3, #32
 800eb0e:	6023      	str	r3, [r4, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800eb10:	2200      	movs	r2, #0
 800eb12:	2106      	movs	r1, #6
 800eb14:	2026      	movs	r0, #38	; 0x26
 800eb16:	f7f7 fa69 	bl	8005fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800eb1a:	2026      	movs	r0, #38	; 0x26
 800eb1c:	f7f7 fa9c 	bl	8006058 <HAL_NVIC_EnableIRQ>
}
 800eb20:	b006      	add	sp, #24
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	40004400 	.word	0x40004400

0800eb28 <UARTsendChar>:
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
	while (!(USART2->ISR & USART_ISR_TXE));
 800eb28:	4a03      	ldr	r2, [pc, #12]	; (800eb38 <UARTsendChar+0x10>)
 800eb2a:	69d3      	ldr	r3, [r2, #28]
 800eb2c:	061b      	lsls	r3, r3, #24
 800eb2e:	d5fc      	bpl.n	800eb2a <UARTsendChar+0x2>
	return (USART2->TDR = chr);	
 800eb30:	b283      	uxth	r3, r0
 800eb32:	8513      	strh	r3, [r2, #40]	; 0x28
}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	40004400 	.word	0x40004400

0800eb3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800eb3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eb74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800eb40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800eb42:	e003      	b.n	800eb4c <LoopCopyDataInit>

0800eb44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800eb46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800eb48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800eb4a:	3104      	adds	r1, #4

0800eb4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800eb4c:	480b      	ldr	r0, [pc, #44]	; (800eb7c <LoopForever+0xa>)
	ldr	r3, =_edata
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <LoopForever+0xe>)
	adds	r2, r0, r1
 800eb50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800eb52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800eb54:	d3f6      	bcc.n	800eb44 <CopyDataInit>
	ldr	r2, =_sbss
 800eb56:	4a0b      	ldr	r2, [pc, #44]	; (800eb84 <LoopForever+0x12>)
	b	LoopFillZerobss
 800eb58:	e002      	b.n	800eb60 <LoopFillZerobss>

0800eb5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800eb5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800eb5c:	f842 3b04 	str.w	r3, [r2], #4

0800eb60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800eb60:	4b09      	ldr	r3, [pc, #36]	; (800eb88 <LoopForever+0x16>)
	cmp	r2, r3
 800eb62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800eb64:	d3f9      	bcc.n	800eb5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800eb66:	f7fd fb43 	bl	800c1f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eb6a:	f000 f817 	bl	800eb9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800eb6e:	f7fd f913 	bl	800bd98 <main>

0800eb72 <LoopForever>:

LoopForever:
    b LoopForever
 800eb72:	e7fe      	b.n	800eb72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800eb74:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800eb78:	08012108 	.word	0x08012108
	ldr	r0, =_sdata
 800eb7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800eb80:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800eb84:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 800eb88:	2000d438 	.word	0x2000d438

0800eb8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800eb8c:	e7fe      	b.n	800eb8c <ADC1_2_IRQHandler>
	...

0800eb90 <__errno>:
 800eb90:	4b01      	ldr	r3, [pc, #4]	; (800eb98 <__errno+0x8>)
 800eb92:	6818      	ldr	r0, [r3, #0]
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	20000010 	.word	0x20000010

0800eb9c <__libc_init_array>:
 800eb9c:	b570      	push	{r4, r5, r6, lr}
 800eb9e:	4e0d      	ldr	r6, [pc, #52]	; (800ebd4 <__libc_init_array+0x38>)
 800eba0:	4c0d      	ldr	r4, [pc, #52]	; (800ebd8 <__libc_init_array+0x3c>)
 800eba2:	1ba4      	subs	r4, r4, r6
 800eba4:	10a4      	asrs	r4, r4, #2
 800eba6:	2500      	movs	r5, #0
 800eba8:	42a5      	cmp	r5, r4
 800ebaa:	d109      	bne.n	800ebc0 <__libc_init_array+0x24>
 800ebac:	4e0b      	ldr	r6, [pc, #44]	; (800ebdc <__libc_init_array+0x40>)
 800ebae:	4c0c      	ldr	r4, [pc, #48]	; (800ebe0 <__libc_init_array+0x44>)
 800ebb0:	f002 fe54 	bl	801185c <_init>
 800ebb4:	1ba4      	subs	r4, r4, r6
 800ebb6:	10a4      	asrs	r4, r4, #2
 800ebb8:	2500      	movs	r5, #0
 800ebba:	42a5      	cmp	r5, r4
 800ebbc:	d105      	bne.n	800ebca <__libc_init_array+0x2e>
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebc4:	4798      	blx	r3
 800ebc6:	3501      	adds	r5, #1
 800ebc8:	e7ee      	b.n	800eba8 <__libc_init_array+0xc>
 800ebca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebce:	4798      	blx	r3
 800ebd0:	3501      	adds	r5, #1
 800ebd2:	e7f2      	b.n	800ebba <__libc_init_array+0x1e>
 800ebd4:	08012100 	.word	0x08012100
 800ebd8:	08012100 	.word	0x08012100
 800ebdc:	08012100 	.word	0x08012100
 800ebe0:	08012104 	.word	0x08012104

0800ebe4 <memcpy>:
 800ebe4:	b510      	push	{r4, lr}
 800ebe6:	1e43      	subs	r3, r0, #1
 800ebe8:	440a      	add	r2, r1
 800ebea:	4291      	cmp	r1, r2
 800ebec:	d100      	bne.n	800ebf0 <memcpy+0xc>
 800ebee:	bd10      	pop	{r4, pc}
 800ebf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebf8:	e7f7      	b.n	800ebea <memcpy+0x6>

0800ebfa <memset>:
 800ebfa:	4402      	add	r2, r0
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d100      	bne.n	800ec04 <memset+0xa>
 800ec02:	4770      	bx	lr
 800ec04:	f803 1b01 	strb.w	r1, [r3], #1
 800ec08:	e7f9      	b.n	800ebfe <memset+0x4>
	...

0800ec0c <_malloc_r>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	1ccd      	adds	r5, r1, #3
 800ec10:	f025 0503 	bic.w	r5, r5, #3
 800ec14:	3508      	adds	r5, #8
 800ec16:	2d0c      	cmp	r5, #12
 800ec18:	bf38      	it	cc
 800ec1a:	250c      	movcc	r5, #12
 800ec1c:	2d00      	cmp	r5, #0
 800ec1e:	4606      	mov	r6, r0
 800ec20:	db01      	blt.n	800ec26 <_malloc_r+0x1a>
 800ec22:	42a9      	cmp	r1, r5
 800ec24:	d903      	bls.n	800ec2e <_malloc_r+0x22>
 800ec26:	230c      	movs	r3, #12
 800ec28:	6033      	str	r3, [r6, #0]
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
 800ec2e:	f001 fa65 	bl	80100fc <__malloc_lock>
 800ec32:	4a21      	ldr	r2, [pc, #132]	; (800ecb8 <_malloc_r+0xac>)
 800ec34:	6814      	ldr	r4, [r2, #0]
 800ec36:	4621      	mov	r1, r4
 800ec38:	b991      	cbnz	r1, 800ec60 <_malloc_r+0x54>
 800ec3a:	4c20      	ldr	r4, [pc, #128]	; (800ecbc <_malloc_r+0xb0>)
 800ec3c:	6823      	ldr	r3, [r4, #0]
 800ec3e:	b91b      	cbnz	r3, 800ec48 <_malloc_r+0x3c>
 800ec40:	4630      	mov	r0, r6
 800ec42:	f000 fbef 	bl	800f424 <_sbrk_r>
 800ec46:	6020      	str	r0, [r4, #0]
 800ec48:	4629      	mov	r1, r5
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	f000 fbea 	bl	800f424 <_sbrk_r>
 800ec50:	1c43      	adds	r3, r0, #1
 800ec52:	d124      	bne.n	800ec9e <_malloc_r+0x92>
 800ec54:	230c      	movs	r3, #12
 800ec56:	6033      	str	r3, [r6, #0]
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f001 fa50 	bl	80100fe <__malloc_unlock>
 800ec5e:	e7e4      	b.n	800ec2a <_malloc_r+0x1e>
 800ec60:	680b      	ldr	r3, [r1, #0]
 800ec62:	1b5b      	subs	r3, r3, r5
 800ec64:	d418      	bmi.n	800ec98 <_malloc_r+0x8c>
 800ec66:	2b0b      	cmp	r3, #11
 800ec68:	d90f      	bls.n	800ec8a <_malloc_r+0x7e>
 800ec6a:	600b      	str	r3, [r1, #0]
 800ec6c:	50cd      	str	r5, [r1, r3]
 800ec6e:	18cc      	adds	r4, r1, r3
 800ec70:	4630      	mov	r0, r6
 800ec72:	f001 fa44 	bl	80100fe <__malloc_unlock>
 800ec76:	f104 000b 	add.w	r0, r4, #11
 800ec7a:	1d23      	adds	r3, r4, #4
 800ec7c:	f020 0007 	bic.w	r0, r0, #7
 800ec80:	1ac3      	subs	r3, r0, r3
 800ec82:	d0d3      	beq.n	800ec2c <_malloc_r+0x20>
 800ec84:	425a      	negs	r2, r3
 800ec86:	50e2      	str	r2, [r4, r3]
 800ec88:	e7d0      	b.n	800ec2c <_malloc_r+0x20>
 800ec8a:	428c      	cmp	r4, r1
 800ec8c:	684b      	ldr	r3, [r1, #4]
 800ec8e:	bf16      	itet	ne
 800ec90:	6063      	strne	r3, [r4, #4]
 800ec92:	6013      	streq	r3, [r2, #0]
 800ec94:	460c      	movne	r4, r1
 800ec96:	e7eb      	b.n	800ec70 <_malloc_r+0x64>
 800ec98:	460c      	mov	r4, r1
 800ec9a:	6849      	ldr	r1, [r1, #4]
 800ec9c:	e7cc      	b.n	800ec38 <_malloc_r+0x2c>
 800ec9e:	1cc4      	adds	r4, r0, #3
 800eca0:	f024 0403 	bic.w	r4, r4, #3
 800eca4:	42a0      	cmp	r0, r4
 800eca6:	d005      	beq.n	800ecb4 <_malloc_r+0xa8>
 800eca8:	1a21      	subs	r1, r4, r0
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f000 fbba 	bl	800f424 <_sbrk_r>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d0cf      	beq.n	800ec54 <_malloc_r+0x48>
 800ecb4:	6025      	str	r5, [r4, #0]
 800ecb6:	e7db      	b.n	800ec70 <_malloc_r+0x64>
 800ecb8:	200047c0 	.word	0x200047c0
 800ecbc:	200047c4 	.word	0x200047c4

0800ecc0 <__cvt>:
 800ecc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	ec55 4b10 	vmov	r4, r5, d0
 800ecc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ecca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	4691      	mov	r9, r2
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	bfb8      	it	lt
 800ecd8:	4622      	movlt	r2, r4
 800ecda:	462b      	mov	r3, r5
 800ecdc:	f027 0720 	bic.w	r7, r7, #32
 800ece0:	bfbb      	ittet	lt
 800ece2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ece6:	461d      	movlt	r5, r3
 800ece8:	2300      	movge	r3, #0
 800ecea:	232d      	movlt	r3, #45	; 0x2d
 800ecec:	bfb8      	it	lt
 800ecee:	4614      	movlt	r4, r2
 800ecf0:	2f46      	cmp	r7, #70	; 0x46
 800ecf2:	700b      	strb	r3, [r1, #0]
 800ecf4:	d004      	beq.n	800ed00 <__cvt+0x40>
 800ecf6:	2f45      	cmp	r7, #69	; 0x45
 800ecf8:	d100      	bne.n	800ecfc <__cvt+0x3c>
 800ecfa:	3601      	adds	r6, #1
 800ecfc:	2102      	movs	r1, #2
 800ecfe:	e000      	b.n	800ed02 <__cvt+0x42>
 800ed00:	2103      	movs	r1, #3
 800ed02:	ab03      	add	r3, sp, #12
 800ed04:	9301      	str	r3, [sp, #4]
 800ed06:	ab02      	add	r3, sp, #8
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	4632      	mov	r2, r6
 800ed0c:	4653      	mov	r3, sl
 800ed0e:	ec45 4b10 	vmov	d0, r4, r5
 800ed12:	f000 fc25 	bl	800f560 <_dtoa_r>
 800ed16:	2f47      	cmp	r7, #71	; 0x47
 800ed18:	4680      	mov	r8, r0
 800ed1a:	d102      	bne.n	800ed22 <__cvt+0x62>
 800ed1c:	f019 0f01 	tst.w	r9, #1
 800ed20:	d026      	beq.n	800ed70 <__cvt+0xb0>
 800ed22:	2f46      	cmp	r7, #70	; 0x46
 800ed24:	eb08 0906 	add.w	r9, r8, r6
 800ed28:	d111      	bne.n	800ed4e <__cvt+0x8e>
 800ed2a:	f898 3000 	ldrb.w	r3, [r8]
 800ed2e:	2b30      	cmp	r3, #48	; 0x30
 800ed30:	d10a      	bne.n	800ed48 <__cvt+0x88>
 800ed32:	2200      	movs	r2, #0
 800ed34:	2300      	movs	r3, #0
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 fe7d 	bl	8000a38 <__aeabi_dcmpeq>
 800ed3e:	b918      	cbnz	r0, 800ed48 <__cvt+0x88>
 800ed40:	f1c6 0601 	rsb	r6, r6, #1
 800ed44:	f8ca 6000 	str.w	r6, [sl]
 800ed48:	f8da 3000 	ldr.w	r3, [sl]
 800ed4c:	4499      	add	r9, r3
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2300      	movs	r3, #0
 800ed52:	4620      	mov	r0, r4
 800ed54:	4629      	mov	r1, r5
 800ed56:	f7f1 fe6f 	bl	8000a38 <__aeabi_dcmpeq>
 800ed5a:	b938      	cbnz	r0, 800ed6c <__cvt+0xac>
 800ed5c:	2230      	movs	r2, #48	; 0x30
 800ed5e:	9b03      	ldr	r3, [sp, #12]
 800ed60:	454b      	cmp	r3, r9
 800ed62:	d205      	bcs.n	800ed70 <__cvt+0xb0>
 800ed64:	1c59      	adds	r1, r3, #1
 800ed66:	9103      	str	r1, [sp, #12]
 800ed68:	701a      	strb	r2, [r3, #0]
 800ed6a:	e7f8      	b.n	800ed5e <__cvt+0x9e>
 800ed6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed70:	9b03      	ldr	r3, [sp, #12]
 800ed72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed74:	eba3 0308 	sub.w	r3, r3, r8
 800ed78:	4640      	mov	r0, r8
 800ed7a:	6013      	str	r3, [r2, #0]
 800ed7c:	b004      	add	sp, #16
 800ed7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ed82 <__exponent>:
 800ed82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed84:	2900      	cmp	r1, #0
 800ed86:	4604      	mov	r4, r0
 800ed88:	bfba      	itte	lt
 800ed8a:	4249      	neglt	r1, r1
 800ed8c:	232d      	movlt	r3, #45	; 0x2d
 800ed8e:	232b      	movge	r3, #43	; 0x2b
 800ed90:	2909      	cmp	r1, #9
 800ed92:	f804 2b02 	strb.w	r2, [r4], #2
 800ed96:	7043      	strb	r3, [r0, #1]
 800ed98:	dd20      	ble.n	800eddc <__exponent+0x5a>
 800ed9a:	f10d 0307 	add.w	r3, sp, #7
 800ed9e:	461f      	mov	r7, r3
 800eda0:	260a      	movs	r6, #10
 800eda2:	fb91 f5f6 	sdiv	r5, r1, r6
 800eda6:	fb06 1115 	mls	r1, r6, r5, r1
 800edaa:	3130      	adds	r1, #48	; 0x30
 800edac:	2d09      	cmp	r5, #9
 800edae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800edb2:	f103 32ff 	add.w	r2, r3, #4294967295
 800edb6:	4629      	mov	r1, r5
 800edb8:	dc09      	bgt.n	800edce <__exponent+0x4c>
 800edba:	3130      	adds	r1, #48	; 0x30
 800edbc:	3b02      	subs	r3, #2
 800edbe:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edc2:	42bb      	cmp	r3, r7
 800edc4:	4622      	mov	r2, r4
 800edc6:	d304      	bcc.n	800edd2 <__exponent+0x50>
 800edc8:	1a10      	subs	r0, r2, r0
 800edca:	b003      	add	sp, #12
 800edcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edce:	4613      	mov	r3, r2
 800edd0:	e7e7      	b.n	800eda2 <__exponent+0x20>
 800edd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edd6:	f804 2b01 	strb.w	r2, [r4], #1
 800edda:	e7f2      	b.n	800edc2 <__exponent+0x40>
 800eddc:	2330      	movs	r3, #48	; 0x30
 800edde:	4419      	add	r1, r3
 800ede0:	7083      	strb	r3, [r0, #2]
 800ede2:	1d02      	adds	r2, r0, #4
 800ede4:	70c1      	strb	r1, [r0, #3]
 800ede6:	e7ef      	b.n	800edc8 <__exponent+0x46>

0800ede8 <_printf_float>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	b08d      	sub	sp, #52	; 0x34
 800edee:	460c      	mov	r4, r1
 800edf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800edf4:	4616      	mov	r6, r2
 800edf6:	461f      	mov	r7, r3
 800edf8:	4605      	mov	r5, r0
 800edfa:	f001 f969 	bl	80100d0 <_localeconv_r>
 800edfe:	6803      	ldr	r3, [r0, #0]
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7f1 f9ec 	bl	80001e0 <strlen>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ee10:	9005      	str	r0, [sp, #20]
 800ee12:	3307      	adds	r3, #7
 800ee14:	f023 0307 	bic.w	r3, r3, #7
 800ee18:	f103 0208 	add.w	r2, r3, #8
 800ee1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee20:	f8d4 b000 	ldr.w	fp, [r4]
 800ee24:	f8c8 2000 	str.w	r2, [r8]
 800ee28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ee30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ee34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee38:	9307      	str	r3, [sp, #28]
 800ee3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee42:	4ba7      	ldr	r3, [pc, #668]	; (800f0e0 <_printf_float+0x2f8>)
 800ee44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee48:	f7f1 fe28 	bl	8000a9c <__aeabi_dcmpun>
 800ee4c:	bb70      	cbnz	r0, 800eeac <_printf_float+0xc4>
 800ee4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee52:	4ba3      	ldr	r3, [pc, #652]	; (800f0e0 <_printf_float+0x2f8>)
 800ee54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee58:	f7f1 fe02 	bl	8000a60 <__aeabi_dcmple>
 800ee5c:	bb30      	cbnz	r0, 800eeac <_printf_float+0xc4>
 800ee5e:	2200      	movs	r2, #0
 800ee60:	2300      	movs	r3, #0
 800ee62:	4640      	mov	r0, r8
 800ee64:	4649      	mov	r1, r9
 800ee66:	f7f1 fdf1 	bl	8000a4c <__aeabi_dcmplt>
 800ee6a:	b110      	cbz	r0, 800ee72 <_printf_float+0x8a>
 800ee6c:	232d      	movs	r3, #45	; 0x2d
 800ee6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee72:	4a9c      	ldr	r2, [pc, #624]	; (800f0e4 <_printf_float+0x2fc>)
 800ee74:	4b9c      	ldr	r3, [pc, #624]	; (800f0e8 <_printf_float+0x300>)
 800ee76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ee7a:	bf8c      	ite	hi
 800ee7c:	4690      	movhi	r8, r2
 800ee7e:	4698      	movls	r8, r3
 800ee80:	2303      	movs	r3, #3
 800ee82:	f02b 0204 	bic.w	r2, fp, #4
 800ee86:	6123      	str	r3, [r4, #16]
 800ee88:	6022      	str	r2, [r4, #0]
 800ee8a:	f04f 0900 	mov.w	r9, #0
 800ee8e:	9700      	str	r7, [sp, #0]
 800ee90:	4633      	mov	r3, r6
 800ee92:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f9e6 	bl	800f268 <_printf_common>
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f040 808d 	bne.w	800efbc <_printf_float+0x1d4>
 800eea2:	f04f 30ff 	mov.w	r0, #4294967295
 800eea6:	b00d      	add	sp, #52	; 0x34
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	4642      	mov	r2, r8
 800eeae:	464b      	mov	r3, r9
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	f7f1 fdf2 	bl	8000a9c <__aeabi_dcmpun>
 800eeb8:	b110      	cbz	r0, 800eec0 <_printf_float+0xd8>
 800eeba:	4a8c      	ldr	r2, [pc, #560]	; (800f0ec <_printf_float+0x304>)
 800eebc:	4b8c      	ldr	r3, [pc, #560]	; (800f0f0 <_printf_float+0x308>)
 800eebe:	e7da      	b.n	800ee76 <_printf_float+0x8e>
 800eec0:	6861      	ldr	r1, [r4, #4]
 800eec2:	1c4b      	adds	r3, r1, #1
 800eec4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800eec8:	a80a      	add	r0, sp, #40	; 0x28
 800eeca:	d13e      	bne.n	800ef4a <_printf_float+0x162>
 800eecc:	2306      	movs	r3, #6
 800eece:	6063      	str	r3, [r4, #4]
 800eed0:	2300      	movs	r3, #0
 800eed2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eed6:	ab09      	add	r3, sp, #36	; 0x24
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	ec49 8b10 	vmov	d0, r8, r9
 800eede:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eee2:	6022      	str	r2, [r4, #0]
 800eee4:	f8cd a004 	str.w	sl, [sp, #4]
 800eee8:	6861      	ldr	r1, [r4, #4]
 800eeea:	4628      	mov	r0, r5
 800eeec:	f7ff fee8 	bl	800ecc0 <__cvt>
 800eef0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800eef4:	2b47      	cmp	r3, #71	; 0x47
 800eef6:	4680      	mov	r8, r0
 800eef8:	d109      	bne.n	800ef0e <_printf_float+0x126>
 800eefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefc:	1cd8      	adds	r0, r3, #3
 800eefe:	db02      	blt.n	800ef06 <_printf_float+0x11e>
 800ef00:	6862      	ldr	r2, [r4, #4]
 800ef02:	4293      	cmp	r3, r2
 800ef04:	dd47      	ble.n	800ef96 <_printf_float+0x1ae>
 800ef06:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef0a:	fa5f fa8a 	uxtb.w	sl, sl
 800ef0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ef12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef14:	d824      	bhi.n	800ef60 <_printf_float+0x178>
 800ef16:	3901      	subs	r1, #1
 800ef18:	4652      	mov	r2, sl
 800ef1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef1e:	9109      	str	r1, [sp, #36]	; 0x24
 800ef20:	f7ff ff2f 	bl	800ed82 <__exponent>
 800ef24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef26:	1813      	adds	r3, r2, r0
 800ef28:	2a01      	cmp	r2, #1
 800ef2a:	4681      	mov	r9, r0
 800ef2c:	6123      	str	r3, [r4, #16]
 800ef2e:	dc02      	bgt.n	800ef36 <_printf_float+0x14e>
 800ef30:	6822      	ldr	r2, [r4, #0]
 800ef32:	07d1      	lsls	r1, r2, #31
 800ef34:	d501      	bpl.n	800ef3a <_printf_float+0x152>
 800ef36:	3301      	adds	r3, #1
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0a5      	beq.n	800ee8e <_printf_float+0xa6>
 800ef42:	232d      	movs	r3, #45	; 0x2d
 800ef44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef48:	e7a1      	b.n	800ee8e <_printf_float+0xa6>
 800ef4a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ef4e:	f000 8177 	beq.w	800f240 <_printf_float+0x458>
 800ef52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef56:	d1bb      	bne.n	800eed0 <_printf_float+0xe8>
 800ef58:	2900      	cmp	r1, #0
 800ef5a:	d1b9      	bne.n	800eed0 <_printf_float+0xe8>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e7b6      	b.n	800eece <_printf_float+0xe6>
 800ef60:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ef64:	d119      	bne.n	800ef9a <_printf_float+0x1b2>
 800ef66:	2900      	cmp	r1, #0
 800ef68:	6863      	ldr	r3, [r4, #4]
 800ef6a:	dd0c      	ble.n	800ef86 <_printf_float+0x19e>
 800ef6c:	6121      	str	r1, [r4, #16]
 800ef6e:	b913      	cbnz	r3, 800ef76 <_printf_float+0x18e>
 800ef70:	6822      	ldr	r2, [r4, #0]
 800ef72:	07d2      	lsls	r2, r2, #31
 800ef74:	d502      	bpl.n	800ef7c <_printf_float+0x194>
 800ef76:	3301      	adds	r3, #1
 800ef78:	440b      	add	r3, r1
 800ef7a:	6123      	str	r3, [r4, #16]
 800ef7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef7e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef80:	f04f 0900 	mov.w	r9, #0
 800ef84:	e7d9      	b.n	800ef3a <_printf_float+0x152>
 800ef86:	b913      	cbnz	r3, 800ef8e <_printf_float+0x1a6>
 800ef88:	6822      	ldr	r2, [r4, #0]
 800ef8a:	07d0      	lsls	r0, r2, #31
 800ef8c:	d501      	bpl.n	800ef92 <_printf_float+0x1aa>
 800ef8e:	3302      	adds	r3, #2
 800ef90:	e7f3      	b.n	800ef7a <_printf_float+0x192>
 800ef92:	2301      	movs	r3, #1
 800ef94:	e7f1      	b.n	800ef7a <_printf_float+0x192>
 800ef96:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ef9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	db05      	blt.n	800efae <_printf_float+0x1c6>
 800efa2:	6822      	ldr	r2, [r4, #0]
 800efa4:	6123      	str	r3, [r4, #16]
 800efa6:	07d1      	lsls	r1, r2, #31
 800efa8:	d5e8      	bpl.n	800ef7c <_printf_float+0x194>
 800efaa:	3301      	adds	r3, #1
 800efac:	e7e5      	b.n	800ef7a <_printf_float+0x192>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bfd4      	ite	le
 800efb2:	f1c3 0302 	rsble	r3, r3, #2
 800efb6:	2301      	movgt	r3, #1
 800efb8:	4413      	add	r3, r2
 800efba:	e7de      	b.n	800ef7a <_printf_float+0x192>
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	055a      	lsls	r2, r3, #21
 800efc0:	d407      	bmi.n	800efd2 <_printf_float+0x1ea>
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	4642      	mov	r2, r8
 800efc6:	4631      	mov	r1, r6
 800efc8:	4628      	mov	r0, r5
 800efca:	47b8      	blx	r7
 800efcc:	3001      	adds	r0, #1
 800efce:	d12b      	bne.n	800f028 <_printf_float+0x240>
 800efd0:	e767      	b.n	800eea2 <_printf_float+0xba>
 800efd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800efd6:	f240 80dc 	bls.w	800f192 <_printf_float+0x3aa>
 800efda:	2200      	movs	r2, #0
 800efdc:	2300      	movs	r3, #0
 800efde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efe2:	f7f1 fd29 	bl	8000a38 <__aeabi_dcmpeq>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d033      	beq.n	800f052 <_printf_float+0x26a>
 800efea:	2301      	movs	r3, #1
 800efec:	4a41      	ldr	r2, [pc, #260]	; (800f0f4 <_printf_float+0x30c>)
 800efee:	4631      	mov	r1, r6
 800eff0:	4628      	mov	r0, r5
 800eff2:	47b8      	blx	r7
 800eff4:	3001      	adds	r0, #1
 800eff6:	f43f af54 	beq.w	800eea2 <_printf_float+0xba>
 800effa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800effe:	429a      	cmp	r2, r3
 800f000:	db02      	blt.n	800f008 <_printf_float+0x220>
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	07d8      	lsls	r0, r3, #31
 800f006:	d50f      	bpl.n	800f028 <_printf_float+0x240>
 800f008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f00c:	4631      	mov	r1, r6
 800f00e:	4628      	mov	r0, r5
 800f010:	47b8      	blx	r7
 800f012:	3001      	adds	r0, #1
 800f014:	f43f af45 	beq.w	800eea2 <_printf_float+0xba>
 800f018:	f04f 0800 	mov.w	r8, #0
 800f01c:	f104 091a 	add.w	r9, r4, #26
 800f020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f022:	3b01      	subs	r3, #1
 800f024:	4543      	cmp	r3, r8
 800f026:	dc09      	bgt.n	800f03c <_printf_float+0x254>
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	079b      	lsls	r3, r3, #30
 800f02c:	f100 8103 	bmi.w	800f236 <_printf_float+0x44e>
 800f030:	68e0      	ldr	r0, [r4, #12]
 800f032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f034:	4298      	cmp	r0, r3
 800f036:	bfb8      	it	lt
 800f038:	4618      	movlt	r0, r3
 800f03a:	e734      	b.n	800eea6 <_printf_float+0xbe>
 800f03c:	2301      	movs	r3, #1
 800f03e:	464a      	mov	r2, r9
 800f040:	4631      	mov	r1, r6
 800f042:	4628      	mov	r0, r5
 800f044:	47b8      	blx	r7
 800f046:	3001      	adds	r0, #1
 800f048:	f43f af2b 	beq.w	800eea2 <_printf_float+0xba>
 800f04c:	f108 0801 	add.w	r8, r8, #1
 800f050:	e7e6      	b.n	800f020 <_printf_float+0x238>
 800f052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	dc2b      	bgt.n	800f0b0 <_printf_float+0x2c8>
 800f058:	2301      	movs	r3, #1
 800f05a:	4a26      	ldr	r2, [pc, #152]	; (800f0f4 <_printf_float+0x30c>)
 800f05c:	4631      	mov	r1, r6
 800f05e:	4628      	mov	r0, r5
 800f060:	47b8      	blx	r7
 800f062:	3001      	adds	r0, #1
 800f064:	f43f af1d 	beq.w	800eea2 <_printf_float+0xba>
 800f068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06a:	b923      	cbnz	r3, 800f076 <_printf_float+0x28e>
 800f06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f06e:	b913      	cbnz	r3, 800f076 <_printf_float+0x28e>
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	07d9      	lsls	r1, r3, #31
 800f074:	d5d8      	bpl.n	800f028 <_printf_float+0x240>
 800f076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f07a:	4631      	mov	r1, r6
 800f07c:	4628      	mov	r0, r5
 800f07e:	47b8      	blx	r7
 800f080:	3001      	adds	r0, #1
 800f082:	f43f af0e 	beq.w	800eea2 <_printf_float+0xba>
 800f086:	f04f 0900 	mov.w	r9, #0
 800f08a:	f104 0a1a 	add.w	sl, r4, #26
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	425b      	negs	r3, r3
 800f092:	454b      	cmp	r3, r9
 800f094:	dc01      	bgt.n	800f09a <_printf_float+0x2b2>
 800f096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f098:	e794      	b.n	800efc4 <_printf_float+0x1dc>
 800f09a:	2301      	movs	r3, #1
 800f09c:	4652      	mov	r2, sl
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	47b8      	blx	r7
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	f43f aefc 	beq.w	800eea2 <_printf_float+0xba>
 800f0aa:	f109 0901 	add.w	r9, r9, #1
 800f0ae:	e7ee      	b.n	800f08e <_printf_float+0x2a6>
 800f0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	bfa8      	it	ge
 800f0b8:	461a      	movge	r2, r3
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	4691      	mov	r9, r2
 800f0be:	dd07      	ble.n	800f0d0 <_printf_float+0x2e8>
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	4631      	mov	r1, r6
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	47b8      	blx	r7
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	f43f aee9 	beq.w	800eea2 <_printf_float+0xba>
 800f0d0:	f104 031a 	add.w	r3, r4, #26
 800f0d4:	f04f 0b00 	mov.w	fp, #0
 800f0d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0dc:	9306      	str	r3, [sp, #24]
 800f0de:	e015      	b.n	800f10c <_printf_float+0x324>
 800f0e0:	7fefffff 	.word	0x7fefffff
 800f0e4:	08011e94 	.word	0x08011e94
 800f0e8:	08011e90 	.word	0x08011e90
 800f0ec:	08011e9c 	.word	0x08011e9c
 800f0f0:	08011e98 	.word	0x08011e98
 800f0f4:	08011ea0 	.word	0x08011ea0
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	9a06      	ldr	r2, [sp, #24]
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	f43f aecd 	beq.w	800eea2 <_printf_float+0xba>
 800f108:	f10b 0b01 	add.w	fp, fp, #1
 800f10c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f110:	ebaa 0309 	sub.w	r3, sl, r9
 800f114:	455b      	cmp	r3, fp
 800f116:	dcef      	bgt.n	800f0f8 <_printf_float+0x310>
 800f118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f11c:	429a      	cmp	r2, r3
 800f11e:	44d0      	add	r8, sl
 800f120:	db15      	blt.n	800f14e <_printf_float+0x366>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	07da      	lsls	r2, r3, #31
 800f126:	d412      	bmi.n	800f14e <_printf_float+0x366>
 800f128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f12a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f12c:	eba3 020a 	sub.w	r2, r3, sl
 800f130:	eba3 0a01 	sub.w	sl, r3, r1
 800f134:	4592      	cmp	sl, r2
 800f136:	bfa8      	it	ge
 800f138:	4692      	movge	sl, r2
 800f13a:	f1ba 0f00 	cmp.w	sl, #0
 800f13e:	dc0e      	bgt.n	800f15e <_printf_float+0x376>
 800f140:	f04f 0800 	mov.w	r8, #0
 800f144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f148:	f104 091a 	add.w	r9, r4, #26
 800f14c:	e019      	b.n	800f182 <_printf_float+0x39a>
 800f14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f152:	4631      	mov	r1, r6
 800f154:	4628      	mov	r0, r5
 800f156:	47b8      	blx	r7
 800f158:	3001      	adds	r0, #1
 800f15a:	d1e5      	bne.n	800f128 <_printf_float+0x340>
 800f15c:	e6a1      	b.n	800eea2 <_printf_float+0xba>
 800f15e:	4653      	mov	r3, sl
 800f160:	4642      	mov	r2, r8
 800f162:	4631      	mov	r1, r6
 800f164:	4628      	mov	r0, r5
 800f166:	47b8      	blx	r7
 800f168:	3001      	adds	r0, #1
 800f16a:	d1e9      	bne.n	800f140 <_printf_float+0x358>
 800f16c:	e699      	b.n	800eea2 <_printf_float+0xba>
 800f16e:	2301      	movs	r3, #1
 800f170:	464a      	mov	r2, r9
 800f172:	4631      	mov	r1, r6
 800f174:	4628      	mov	r0, r5
 800f176:	47b8      	blx	r7
 800f178:	3001      	adds	r0, #1
 800f17a:	f43f ae92 	beq.w	800eea2 <_printf_float+0xba>
 800f17e:	f108 0801 	add.w	r8, r8, #1
 800f182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f186:	1a9b      	subs	r3, r3, r2
 800f188:	eba3 030a 	sub.w	r3, r3, sl
 800f18c:	4543      	cmp	r3, r8
 800f18e:	dcee      	bgt.n	800f16e <_printf_float+0x386>
 800f190:	e74a      	b.n	800f028 <_printf_float+0x240>
 800f192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f194:	2a01      	cmp	r2, #1
 800f196:	dc01      	bgt.n	800f19c <_printf_float+0x3b4>
 800f198:	07db      	lsls	r3, r3, #31
 800f19a:	d53a      	bpl.n	800f212 <_printf_float+0x42a>
 800f19c:	2301      	movs	r3, #1
 800f19e:	4642      	mov	r2, r8
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	47b8      	blx	r7
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	f43f ae7b 	beq.w	800eea2 <_printf_float+0xba>
 800f1ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	47b8      	blx	r7
 800f1b6:	3001      	adds	r0, #1
 800f1b8:	f108 0801 	add.w	r8, r8, #1
 800f1bc:	f43f ae71 	beq.w	800eea2 <_printf_float+0xba>
 800f1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f103 3aff 	add.w	sl, r3, #4294967295
 800f1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f7f1 fc33 	bl	8000a38 <__aeabi_dcmpeq>
 800f1d2:	b9c8      	cbnz	r0, 800f208 <_printf_float+0x420>
 800f1d4:	4653      	mov	r3, sl
 800f1d6:	4642      	mov	r2, r8
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b8      	blx	r7
 800f1de:	3001      	adds	r0, #1
 800f1e0:	d10e      	bne.n	800f200 <_printf_float+0x418>
 800f1e2:	e65e      	b.n	800eea2 <_printf_float+0xba>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	4652      	mov	r2, sl
 800f1e8:	4631      	mov	r1, r6
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	47b8      	blx	r7
 800f1ee:	3001      	adds	r0, #1
 800f1f0:	f43f ae57 	beq.w	800eea2 <_printf_float+0xba>
 800f1f4:	f108 0801 	add.w	r8, r8, #1
 800f1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	4543      	cmp	r3, r8
 800f1fe:	dcf1      	bgt.n	800f1e4 <_printf_float+0x3fc>
 800f200:	464b      	mov	r3, r9
 800f202:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f206:	e6de      	b.n	800efc6 <_printf_float+0x1de>
 800f208:	f04f 0800 	mov.w	r8, #0
 800f20c:	f104 0a1a 	add.w	sl, r4, #26
 800f210:	e7f2      	b.n	800f1f8 <_printf_float+0x410>
 800f212:	2301      	movs	r3, #1
 800f214:	e7df      	b.n	800f1d6 <_printf_float+0x3ee>
 800f216:	2301      	movs	r3, #1
 800f218:	464a      	mov	r2, r9
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	f43f ae3e 	beq.w	800eea2 <_printf_float+0xba>
 800f226:	f108 0801 	add.w	r8, r8, #1
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	4543      	cmp	r3, r8
 800f232:	dcf0      	bgt.n	800f216 <_printf_float+0x42e>
 800f234:	e6fc      	b.n	800f030 <_printf_float+0x248>
 800f236:	f04f 0800 	mov.w	r8, #0
 800f23a:	f104 0919 	add.w	r9, r4, #25
 800f23e:	e7f4      	b.n	800f22a <_printf_float+0x442>
 800f240:	2900      	cmp	r1, #0
 800f242:	f43f ae8b 	beq.w	800ef5c <_printf_float+0x174>
 800f246:	2300      	movs	r3, #0
 800f248:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f24c:	ab09      	add	r3, sp, #36	; 0x24
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	ec49 8b10 	vmov	d0, r8, r9
 800f254:	6022      	str	r2, [r4, #0]
 800f256:	f8cd a004 	str.w	sl, [sp, #4]
 800f25a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f25e:	4628      	mov	r0, r5
 800f260:	f7ff fd2e 	bl	800ecc0 <__cvt>
 800f264:	4680      	mov	r8, r0
 800f266:	e648      	b.n	800eefa <_printf_float+0x112>

0800f268 <_printf_common>:
 800f268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f26c:	4691      	mov	r9, r2
 800f26e:	461f      	mov	r7, r3
 800f270:	688a      	ldr	r2, [r1, #8]
 800f272:	690b      	ldr	r3, [r1, #16]
 800f274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f278:	4293      	cmp	r3, r2
 800f27a:	bfb8      	it	lt
 800f27c:	4613      	movlt	r3, r2
 800f27e:	f8c9 3000 	str.w	r3, [r9]
 800f282:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f286:	4606      	mov	r6, r0
 800f288:	460c      	mov	r4, r1
 800f28a:	b112      	cbz	r2, 800f292 <_printf_common+0x2a>
 800f28c:	3301      	adds	r3, #1
 800f28e:	f8c9 3000 	str.w	r3, [r9]
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	0699      	lsls	r1, r3, #26
 800f296:	bf42      	ittt	mi
 800f298:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f29c:	3302      	addmi	r3, #2
 800f29e:	f8c9 3000 	strmi.w	r3, [r9]
 800f2a2:	6825      	ldr	r5, [r4, #0]
 800f2a4:	f015 0506 	ands.w	r5, r5, #6
 800f2a8:	d107      	bne.n	800f2ba <_printf_common+0x52>
 800f2aa:	f104 0a19 	add.w	sl, r4, #25
 800f2ae:	68e3      	ldr	r3, [r4, #12]
 800f2b0:	f8d9 2000 	ldr.w	r2, [r9]
 800f2b4:	1a9b      	subs	r3, r3, r2
 800f2b6:	42ab      	cmp	r3, r5
 800f2b8:	dc28      	bgt.n	800f30c <_printf_common+0xa4>
 800f2ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f2be:	6822      	ldr	r2, [r4, #0]
 800f2c0:	3300      	adds	r3, #0
 800f2c2:	bf18      	it	ne
 800f2c4:	2301      	movne	r3, #1
 800f2c6:	0692      	lsls	r2, r2, #26
 800f2c8:	d42d      	bmi.n	800f326 <_printf_common+0xbe>
 800f2ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	47c0      	blx	r8
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d020      	beq.n	800f31a <_printf_common+0xb2>
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	68e5      	ldr	r5, [r4, #12]
 800f2dc:	f8d9 2000 	ldr.w	r2, [r9]
 800f2e0:	f003 0306 	and.w	r3, r3, #6
 800f2e4:	2b04      	cmp	r3, #4
 800f2e6:	bf08      	it	eq
 800f2e8:	1aad      	subeq	r5, r5, r2
 800f2ea:	68a3      	ldr	r3, [r4, #8]
 800f2ec:	6922      	ldr	r2, [r4, #16]
 800f2ee:	bf0c      	ite	eq
 800f2f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2f4:	2500      	movne	r5, #0
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	bfc4      	itt	gt
 800f2fa:	1a9b      	subgt	r3, r3, r2
 800f2fc:	18ed      	addgt	r5, r5, r3
 800f2fe:	f04f 0900 	mov.w	r9, #0
 800f302:	341a      	adds	r4, #26
 800f304:	454d      	cmp	r5, r9
 800f306:	d11a      	bne.n	800f33e <_printf_common+0xd6>
 800f308:	2000      	movs	r0, #0
 800f30a:	e008      	b.n	800f31e <_printf_common+0xb6>
 800f30c:	2301      	movs	r3, #1
 800f30e:	4652      	mov	r2, sl
 800f310:	4639      	mov	r1, r7
 800f312:	4630      	mov	r0, r6
 800f314:	47c0      	blx	r8
 800f316:	3001      	adds	r0, #1
 800f318:	d103      	bne.n	800f322 <_printf_common+0xba>
 800f31a:	f04f 30ff 	mov.w	r0, #4294967295
 800f31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f322:	3501      	adds	r5, #1
 800f324:	e7c3      	b.n	800f2ae <_printf_common+0x46>
 800f326:	18e1      	adds	r1, r4, r3
 800f328:	1c5a      	adds	r2, r3, #1
 800f32a:	2030      	movs	r0, #48	; 0x30
 800f32c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f330:	4422      	add	r2, r4
 800f332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f33a:	3302      	adds	r3, #2
 800f33c:	e7c5      	b.n	800f2ca <_printf_common+0x62>
 800f33e:	2301      	movs	r3, #1
 800f340:	4622      	mov	r2, r4
 800f342:	4639      	mov	r1, r7
 800f344:	4630      	mov	r0, r6
 800f346:	47c0      	blx	r8
 800f348:	3001      	adds	r0, #1
 800f34a:	d0e6      	beq.n	800f31a <_printf_common+0xb2>
 800f34c:	f109 0901 	add.w	r9, r9, #1
 800f350:	e7d8      	b.n	800f304 <_printf_common+0x9c>

0800f352 <cleanup_glue>:
 800f352:	b538      	push	{r3, r4, r5, lr}
 800f354:	460c      	mov	r4, r1
 800f356:	6809      	ldr	r1, [r1, #0]
 800f358:	4605      	mov	r5, r0
 800f35a:	b109      	cbz	r1, 800f360 <cleanup_glue+0xe>
 800f35c:	f7ff fff9 	bl	800f352 <cleanup_glue>
 800f360:	4621      	mov	r1, r4
 800f362:	4628      	mov	r0, r5
 800f364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f368:	f001 b9b4 	b.w	80106d4 <_free_r>

0800f36c <_reclaim_reent>:
 800f36c:	4b2c      	ldr	r3, [pc, #176]	; (800f420 <_reclaim_reent+0xb4>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4283      	cmp	r3, r0
 800f372:	b570      	push	{r4, r5, r6, lr}
 800f374:	4604      	mov	r4, r0
 800f376:	d051      	beq.n	800f41c <_reclaim_reent+0xb0>
 800f378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f37a:	b143      	cbz	r3, 800f38e <_reclaim_reent+0x22>
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d14a      	bne.n	800f418 <_reclaim_reent+0xac>
 800f382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f384:	6819      	ldr	r1, [r3, #0]
 800f386:	b111      	cbz	r1, 800f38e <_reclaim_reent+0x22>
 800f388:	4620      	mov	r0, r4
 800f38a:	f001 f9a3 	bl	80106d4 <_free_r>
 800f38e:	6961      	ldr	r1, [r4, #20]
 800f390:	b111      	cbz	r1, 800f398 <_reclaim_reent+0x2c>
 800f392:	4620      	mov	r0, r4
 800f394:	f001 f99e 	bl	80106d4 <_free_r>
 800f398:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f39a:	b111      	cbz	r1, 800f3a2 <_reclaim_reent+0x36>
 800f39c:	4620      	mov	r0, r4
 800f39e:	f001 f999 	bl	80106d4 <_free_r>
 800f3a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f3a4:	b111      	cbz	r1, 800f3ac <_reclaim_reent+0x40>
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f001 f994 	bl	80106d4 <_free_r>
 800f3ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f3ae:	b111      	cbz	r1, 800f3b6 <_reclaim_reent+0x4a>
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f001 f98f 	bl	80106d4 <_free_r>
 800f3b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f3b8:	b111      	cbz	r1, 800f3c0 <_reclaim_reent+0x54>
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f001 f98a 	bl	80106d4 <_free_r>
 800f3c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f3c2:	b111      	cbz	r1, 800f3ca <_reclaim_reent+0x5e>
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f001 f985 	bl	80106d4 <_free_r>
 800f3ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f3cc:	b111      	cbz	r1, 800f3d4 <_reclaim_reent+0x68>
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f001 f980 	bl	80106d4 <_free_r>
 800f3d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3d6:	b111      	cbz	r1, 800f3de <_reclaim_reent+0x72>
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f001 f97b 	bl	80106d4 <_free_r>
 800f3de:	69a3      	ldr	r3, [r4, #24]
 800f3e0:	b1e3      	cbz	r3, 800f41c <_reclaim_reent+0xb0>
 800f3e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	4798      	blx	r3
 800f3e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f3ea:	b1b9      	cbz	r1, 800f41c <_reclaim_reent+0xb0>
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f2:	f7ff bfae 	b.w	800f352 <cleanup_glue>
 800f3f6:	5949      	ldr	r1, [r1, r5]
 800f3f8:	b941      	cbnz	r1, 800f40c <_reclaim_reent+0xa0>
 800f3fa:	3504      	adds	r5, #4
 800f3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3fe:	2d80      	cmp	r5, #128	; 0x80
 800f400:	68d9      	ldr	r1, [r3, #12]
 800f402:	d1f8      	bne.n	800f3f6 <_reclaim_reent+0x8a>
 800f404:	4620      	mov	r0, r4
 800f406:	f001 f965 	bl	80106d4 <_free_r>
 800f40a:	e7ba      	b.n	800f382 <_reclaim_reent+0x16>
 800f40c:	680e      	ldr	r6, [r1, #0]
 800f40e:	4620      	mov	r0, r4
 800f410:	f001 f960 	bl	80106d4 <_free_r>
 800f414:	4631      	mov	r1, r6
 800f416:	e7ef      	b.n	800f3f8 <_reclaim_reent+0x8c>
 800f418:	2500      	movs	r5, #0
 800f41a:	e7ef      	b.n	800f3fc <_reclaim_reent+0x90>
 800f41c:	bd70      	pop	{r4, r5, r6, pc}
 800f41e:	bf00      	nop
 800f420:	20000010 	.word	0x20000010

0800f424 <_sbrk_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4c06      	ldr	r4, [pc, #24]	; (800f440 <_sbrk_r+0x1c>)
 800f428:	2300      	movs	r3, #0
 800f42a:	4605      	mov	r5, r0
 800f42c:	4608      	mov	r0, r1
 800f42e:	6023      	str	r3, [r4, #0]
 800f430:	f7fc fec0 	bl	800c1b4 <_sbrk>
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d102      	bne.n	800f43e <_sbrk_r+0x1a>
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	b103      	cbz	r3, 800f43e <_sbrk_r+0x1a>
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	bd38      	pop	{r3, r4, r5, pc}
 800f440:	2000d434 	.word	0x2000d434

0800f444 <quorem>:
 800f444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f448:	6903      	ldr	r3, [r0, #16]
 800f44a:	690c      	ldr	r4, [r1, #16]
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	4680      	mov	r8, r0
 800f450:	f2c0 8082 	blt.w	800f558 <quorem+0x114>
 800f454:	3c01      	subs	r4, #1
 800f456:	f101 0714 	add.w	r7, r1, #20
 800f45a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f45e:	f100 0614 	add.w	r6, r0, #20
 800f462:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f466:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f46a:	eb06 030c 	add.w	r3, r6, ip
 800f46e:	3501      	adds	r5, #1
 800f470:	eb07 090c 	add.w	r9, r7, ip
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	fbb0 f5f5 	udiv	r5, r0, r5
 800f47a:	b395      	cbz	r5, 800f4e2 <quorem+0x9e>
 800f47c:	f04f 0a00 	mov.w	sl, #0
 800f480:	4638      	mov	r0, r7
 800f482:	46b6      	mov	lr, r6
 800f484:	46d3      	mov	fp, sl
 800f486:	f850 2b04 	ldr.w	r2, [r0], #4
 800f48a:	b293      	uxth	r3, r2
 800f48c:	fb05 a303 	mla	r3, r5, r3, sl
 800f490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f494:	b29b      	uxth	r3, r3
 800f496:	ebab 0303 	sub.w	r3, fp, r3
 800f49a:	0c12      	lsrs	r2, r2, #16
 800f49c:	f8de b000 	ldr.w	fp, [lr]
 800f4a0:	fb05 a202 	mla	r2, r5, r2, sl
 800f4a4:	fa13 f38b 	uxtah	r3, r3, fp
 800f4a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f4ac:	fa1f fb82 	uxth.w	fp, r2
 800f4b0:	f8de 2000 	ldr.w	r2, [lr]
 800f4b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4c2:	4581      	cmp	r9, r0
 800f4c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f4c8:	f84e 3b04 	str.w	r3, [lr], #4
 800f4cc:	d2db      	bcs.n	800f486 <quorem+0x42>
 800f4ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800f4d2:	b933      	cbnz	r3, 800f4e2 <quorem+0x9e>
 800f4d4:	9b01      	ldr	r3, [sp, #4]
 800f4d6:	3b04      	subs	r3, #4
 800f4d8:	429e      	cmp	r6, r3
 800f4da:	461a      	mov	r2, r3
 800f4dc:	d330      	bcc.n	800f540 <quorem+0xfc>
 800f4de:	f8c8 4010 	str.w	r4, [r8, #16]
 800f4e2:	4640      	mov	r0, r8
 800f4e4:	f001 f822 	bl	801052c <__mcmp>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	db25      	blt.n	800f538 <quorem+0xf4>
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f04f 0c00 	mov.w	ip, #0
 800f4f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800f4f8:	f8d0 e000 	ldr.w	lr, [r0]
 800f4fc:	b293      	uxth	r3, r2
 800f4fe:	ebac 0303 	sub.w	r3, ip, r3
 800f502:	0c12      	lsrs	r2, r2, #16
 800f504:	fa13 f38e 	uxtah	r3, r3, lr
 800f508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f50c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f510:	b29b      	uxth	r3, r3
 800f512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f516:	45b9      	cmp	r9, r7
 800f518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f51c:	f840 3b04 	str.w	r3, [r0], #4
 800f520:	d2e8      	bcs.n	800f4f4 <quorem+0xb0>
 800f522:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f526:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f52a:	b92a      	cbnz	r2, 800f538 <quorem+0xf4>
 800f52c:	3b04      	subs	r3, #4
 800f52e:	429e      	cmp	r6, r3
 800f530:	461a      	mov	r2, r3
 800f532:	d30b      	bcc.n	800f54c <quorem+0x108>
 800f534:	f8c8 4010 	str.w	r4, [r8, #16]
 800f538:	4628      	mov	r0, r5
 800f53a:	b003      	add	sp, #12
 800f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f540:	6812      	ldr	r2, [r2, #0]
 800f542:	3b04      	subs	r3, #4
 800f544:	2a00      	cmp	r2, #0
 800f546:	d1ca      	bne.n	800f4de <quorem+0x9a>
 800f548:	3c01      	subs	r4, #1
 800f54a:	e7c5      	b.n	800f4d8 <quorem+0x94>
 800f54c:	6812      	ldr	r2, [r2, #0]
 800f54e:	3b04      	subs	r3, #4
 800f550:	2a00      	cmp	r2, #0
 800f552:	d1ef      	bne.n	800f534 <quorem+0xf0>
 800f554:	3c01      	subs	r4, #1
 800f556:	e7ea      	b.n	800f52e <quorem+0xea>
 800f558:	2000      	movs	r0, #0
 800f55a:	e7ee      	b.n	800f53a <quorem+0xf6>
 800f55c:	0000      	movs	r0, r0
	...

0800f560 <_dtoa_r>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	ec57 6b10 	vmov	r6, r7, d0
 800f568:	b097      	sub	sp, #92	; 0x5c
 800f56a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f56c:	9106      	str	r1, [sp, #24]
 800f56e:	4604      	mov	r4, r0
 800f570:	920b      	str	r2, [sp, #44]	; 0x2c
 800f572:	9312      	str	r3, [sp, #72]	; 0x48
 800f574:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f578:	e9cd 6700 	strd	r6, r7, [sp]
 800f57c:	b93d      	cbnz	r5, 800f58e <_dtoa_r+0x2e>
 800f57e:	2010      	movs	r0, #16
 800f580:	f000 fdb4 	bl	80100ec <malloc>
 800f584:	6260      	str	r0, [r4, #36]	; 0x24
 800f586:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f58a:	6005      	str	r5, [r0, #0]
 800f58c:	60c5      	str	r5, [r0, #12]
 800f58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f590:	6819      	ldr	r1, [r3, #0]
 800f592:	b151      	cbz	r1, 800f5aa <_dtoa_r+0x4a>
 800f594:	685a      	ldr	r2, [r3, #4]
 800f596:	604a      	str	r2, [r1, #4]
 800f598:	2301      	movs	r3, #1
 800f59a:	4093      	lsls	r3, r2
 800f59c:	608b      	str	r3, [r1, #8]
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fde2 	bl	8010168 <_Bfree>
 800f5a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	601a      	str	r2, [r3, #0]
 800f5aa:	1e3b      	subs	r3, r7, #0
 800f5ac:	bfbb      	ittet	lt
 800f5ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f5b2:	9301      	strlt	r3, [sp, #4]
 800f5b4:	2300      	movge	r3, #0
 800f5b6:	2201      	movlt	r2, #1
 800f5b8:	bfac      	ite	ge
 800f5ba:	f8c8 3000 	strge.w	r3, [r8]
 800f5be:	f8c8 2000 	strlt.w	r2, [r8]
 800f5c2:	4baf      	ldr	r3, [pc, #700]	; (800f880 <_dtoa_r+0x320>)
 800f5c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f5c8:	ea33 0308 	bics.w	r3, r3, r8
 800f5cc:	d114      	bne.n	800f5f8 <_dtoa_r+0x98>
 800f5ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f5d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5d4:	6013      	str	r3, [r2, #0]
 800f5d6:	9b00      	ldr	r3, [sp, #0]
 800f5d8:	b923      	cbnz	r3, 800f5e4 <_dtoa_r+0x84>
 800f5da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f000 8542 	beq.w	8010068 <_dtoa_r+0xb08>
 800f5e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f894 <_dtoa_r+0x334>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 8544 	beq.w	8010078 <_dtoa_r+0xb18>
 800f5f0:	f10b 0303 	add.w	r3, fp, #3
 800f5f4:	f000 bd3e 	b.w	8010074 <_dtoa_r+0xb14>
 800f5f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	2300      	movs	r3, #0
 800f600:	4630      	mov	r0, r6
 800f602:	4639      	mov	r1, r7
 800f604:	f7f1 fa18 	bl	8000a38 <__aeabi_dcmpeq>
 800f608:	4681      	mov	r9, r0
 800f60a:	b168      	cbz	r0, 800f628 <_dtoa_r+0xc8>
 800f60c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f60e:	2301      	movs	r3, #1
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 8524 	beq.w	8010062 <_dtoa_r+0xb02>
 800f61a:	4b9a      	ldr	r3, [pc, #616]	; (800f884 <_dtoa_r+0x324>)
 800f61c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f61e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f622:	6013      	str	r3, [r2, #0]
 800f624:	f000 bd28 	b.w	8010078 <_dtoa_r+0xb18>
 800f628:	aa14      	add	r2, sp, #80	; 0x50
 800f62a:	a915      	add	r1, sp, #84	; 0x54
 800f62c:	ec47 6b10 	vmov	d0, r6, r7
 800f630:	4620      	mov	r0, r4
 800f632:	f000 fff2 	bl	801061a <__d2b>
 800f636:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f63a:	9004      	str	r0, [sp, #16]
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	d07c      	beq.n	800f73a <_dtoa_r+0x1da>
 800f640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f644:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f648:	46b2      	mov	sl, r6
 800f64a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f64e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f652:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f656:	2200      	movs	r2, #0
 800f658:	4b8b      	ldr	r3, [pc, #556]	; (800f888 <_dtoa_r+0x328>)
 800f65a:	4650      	mov	r0, sl
 800f65c:	4659      	mov	r1, fp
 800f65e:	f7f0 fdcb 	bl	80001f8 <__aeabi_dsub>
 800f662:	a381      	add	r3, pc, #516	; (adr r3, 800f868 <_dtoa_r+0x308>)
 800f664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f668:	f7f0 ff7e 	bl	8000568 <__aeabi_dmul>
 800f66c:	a380      	add	r3, pc, #512	; (adr r3, 800f870 <_dtoa_r+0x310>)
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	f7f0 fdc3 	bl	80001fc <__adddf3>
 800f676:	4606      	mov	r6, r0
 800f678:	4628      	mov	r0, r5
 800f67a:	460f      	mov	r7, r1
 800f67c:	f7f0 ff0a 	bl	8000494 <__aeabi_i2d>
 800f680:	a37d      	add	r3, pc, #500	; (adr r3, 800f878 <_dtoa_r+0x318>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 ff6f 	bl	8000568 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4630      	mov	r0, r6
 800f690:	4639      	mov	r1, r7
 800f692:	f7f0 fdb3 	bl	80001fc <__adddf3>
 800f696:	4606      	mov	r6, r0
 800f698:	460f      	mov	r7, r1
 800f69a:	f7f1 fa15 	bl	8000ac8 <__aeabi_d2iz>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	4682      	mov	sl, r0
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	4639      	mov	r1, r7
 800f6a8:	f7f1 f9d0 	bl	8000a4c <__aeabi_dcmplt>
 800f6ac:	b148      	cbz	r0, 800f6c2 <_dtoa_r+0x162>
 800f6ae:	4650      	mov	r0, sl
 800f6b0:	f7f0 fef0 	bl	8000494 <__aeabi_i2d>
 800f6b4:	4632      	mov	r2, r6
 800f6b6:	463b      	mov	r3, r7
 800f6b8:	f7f1 f9be 	bl	8000a38 <__aeabi_dcmpeq>
 800f6bc:	b908      	cbnz	r0, 800f6c2 <_dtoa_r+0x162>
 800f6be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6c2:	f1ba 0f16 	cmp.w	sl, #22
 800f6c6:	d859      	bhi.n	800f77c <_dtoa_r+0x21c>
 800f6c8:	4970      	ldr	r1, [pc, #448]	; (800f88c <_dtoa_r+0x32c>)
 800f6ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f6ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6d6:	f7f1 f9d7 	bl	8000a88 <__aeabi_dcmpgt>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	d050      	beq.n	800f780 <_dtoa_r+0x220>
 800f6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6e8:	1b5d      	subs	r5, r3, r5
 800f6ea:	f1b5 0801 	subs.w	r8, r5, #1
 800f6ee:	bf49      	itett	mi
 800f6f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800f6f4:	2300      	movpl	r3, #0
 800f6f6:	9305      	strmi	r3, [sp, #20]
 800f6f8:	f04f 0800 	movmi.w	r8, #0
 800f6fc:	bf58      	it	pl
 800f6fe:	9305      	strpl	r3, [sp, #20]
 800f700:	f1ba 0f00 	cmp.w	sl, #0
 800f704:	db3e      	blt.n	800f784 <_dtoa_r+0x224>
 800f706:	2300      	movs	r3, #0
 800f708:	44d0      	add	r8, sl
 800f70a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f70e:	9307      	str	r3, [sp, #28]
 800f710:	9b06      	ldr	r3, [sp, #24]
 800f712:	2b09      	cmp	r3, #9
 800f714:	f200 8090 	bhi.w	800f838 <_dtoa_r+0x2d8>
 800f718:	2b05      	cmp	r3, #5
 800f71a:	bfc4      	itt	gt
 800f71c:	3b04      	subgt	r3, #4
 800f71e:	9306      	strgt	r3, [sp, #24]
 800f720:	9b06      	ldr	r3, [sp, #24]
 800f722:	f1a3 0302 	sub.w	r3, r3, #2
 800f726:	bfcc      	ite	gt
 800f728:	2500      	movgt	r5, #0
 800f72a:	2501      	movle	r5, #1
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	f200 808f 	bhi.w	800f850 <_dtoa_r+0x2f0>
 800f732:	e8df f003 	tbb	[pc, r3]
 800f736:	7f7d      	.short	0x7f7d
 800f738:	7131      	.short	0x7131
 800f73a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f73e:	441d      	add	r5, r3
 800f740:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f744:	2820      	cmp	r0, #32
 800f746:	dd13      	ble.n	800f770 <_dtoa_r+0x210>
 800f748:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f74c:	9b00      	ldr	r3, [sp, #0]
 800f74e:	fa08 f800 	lsl.w	r8, r8, r0
 800f752:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f756:	fa23 f000 	lsr.w	r0, r3, r0
 800f75a:	ea48 0000 	orr.w	r0, r8, r0
 800f75e:	f7f0 fe89 	bl	8000474 <__aeabi_ui2d>
 800f762:	2301      	movs	r3, #1
 800f764:	4682      	mov	sl, r0
 800f766:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f76a:	3d01      	subs	r5, #1
 800f76c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f76e:	e772      	b.n	800f656 <_dtoa_r+0xf6>
 800f770:	9b00      	ldr	r3, [sp, #0]
 800f772:	f1c0 0020 	rsb	r0, r0, #32
 800f776:	fa03 f000 	lsl.w	r0, r3, r0
 800f77a:	e7f0      	b.n	800f75e <_dtoa_r+0x1fe>
 800f77c:	2301      	movs	r3, #1
 800f77e:	e7b1      	b.n	800f6e4 <_dtoa_r+0x184>
 800f780:	900f      	str	r0, [sp, #60]	; 0x3c
 800f782:	e7b0      	b.n	800f6e6 <_dtoa_r+0x186>
 800f784:	9b05      	ldr	r3, [sp, #20]
 800f786:	eba3 030a 	sub.w	r3, r3, sl
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	f1ca 0300 	rsb	r3, sl, #0
 800f790:	9307      	str	r3, [sp, #28]
 800f792:	2300      	movs	r3, #0
 800f794:	930e      	str	r3, [sp, #56]	; 0x38
 800f796:	e7bb      	b.n	800f710 <_dtoa_r+0x1b0>
 800f798:	2301      	movs	r3, #1
 800f79a:	930a      	str	r3, [sp, #40]	; 0x28
 800f79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	dd59      	ble.n	800f856 <_dtoa_r+0x2f6>
 800f7a2:	9302      	str	r3, [sp, #8]
 800f7a4:	4699      	mov	r9, r3
 800f7a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	6072      	str	r2, [r6, #4]
 800f7ac:	2204      	movs	r2, #4
 800f7ae:	f102 0014 	add.w	r0, r2, #20
 800f7b2:	4298      	cmp	r0, r3
 800f7b4:	6871      	ldr	r1, [r6, #4]
 800f7b6:	d953      	bls.n	800f860 <_dtoa_r+0x300>
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 fca1 	bl	8010100 <_Balloc>
 800f7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c0:	6030      	str	r0, [r6, #0]
 800f7c2:	f1b9 0f0e 	cmp.w	r9, #14
 800f7c6:	f8d3 b000 	ldr.w	fp, [r3]
 800f7ca:	f200 80e6 	bhi.w	800f99a <_dtoa_r+0x43a>
 800f7ce:	2d00      	cmp	r5, #0
 800f7d0:	f000 80e3 	beq.w	800f99a <_dtoa_r+0x43a>
 800f7d4:	ed9d 7b00 	vldr	d7, [sp]
 800f7d8:	f1ba 0f00 	cmp.w	sl, #0
 800f7dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f7e0:	dd74      	ble.n	800f8cc <_dtoa_r+0x36c>
 800f7e2:	4a2a      	ldr	r2, [pc, #168]	; (800f88c <_dtoa_r+0x32c>)
 800f7e4:	f00a 030f 	and.w	r3, sl, #15
 800f7e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f7ec:	ed93 7b00 	vldr	d7, [r3]
 800f7f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f7f4:	06f0      	lsls	r0, r6, #27
 800f7f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f7fa:	d565      	bpl.n	800f8c8 <_dtoa_r+0x368>
 800f7fc:	4b24      	ldr	r3, [pc, #144]	; (800f890 <_dtoa_r+0x330>)
 800f7fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f802:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f806:	f7f0 ffd9 	bl	80007bc <__aeabi_ddiv>
 800f80a:	e9cd 0100 	strd	r0, r1, [sp]
 800f80e:	f006 060f 	and.w	r6, r6, #15
 800f812:	2503      	movs	r5, #3
 800f814:	4f1e      	ldr	r7, [pc, #120]	; (800f890 <_dtoa_r+0x330>)
 800f816:	e04c      	b.n	800f8b2 <_dtoa_r+0x352>
 800f818:	2301      	movs	r3, #1
 800f81a:	930a      	str	r3, [sp, #40]	; 0x28
 800f81c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f81e:	4453      	add	r3, sl
 800f820:	f103 0901 	add.w	r9, r3, #1
 800f824:	9302      	str	r3, [sp, #8]
 800f826:	464b      	mov	r3, r9
 800f828:	2b01      	cmp	r3, #1
 800f82a:	bfb8      	it	lt
 800f82c:	2301      	movlt	r3, #1
 800f82e:	e7ba      	b.n	800f7a6 <_dtoa_r+0x246>
 800f830:	2300      	movs	r3, #0
 800f832:	e7b2      	b.n	800f79a <_dtoa_r+0x23a>
 800f834:	2300      	movs	r3, #0
 800f836:	e7f0      	b.n	800f81a <_dtoa_r+0x2ba>
 800f838:	2501      	movs	r5, #1
 800f83a:	2300      	movs	r3, #0
 800f83c:	9306      	str	r3, [sp, #24]
 800f83e:	950a      	str	r5, [sp, #40]	; 0x28
 800f840:	f04f 33ff 	mov.w	r3, #4294967295
 800f844:	9302      	str	r3, [sp, #8]
 800f846:	4699      	mov	r9, r3
 800f848:	2200      	movs	r2, #0
 800f84a:	2312      	movs	r3, #18
 800f84c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f84e:	e7aa      	b.n	800f7a6 <_dtoa_r+0x246>
 800f850:	2301      	movs	r3, #1
 800f852:	930a      	str	r3, [sp, #40]	; 0x28
 800f854:	e7f4      	b.n	800f840 <_dtoa_r+0x2e0>
 800f856:	2301      	movs	r3, #1
 800f858:	9302      	str	r3, [sp, #8]
 800f85a:	4699      	mov	r9, r3
 800f85c:	461a      	mov	r2, r3
 800f85e:	e7f5      	b.n	800f84c <_dtoa_r+0x2ec>
 800f860:	3101      	adds	r1, #1
 800f862:	6071      	str	r1, [r6, #4]
 800f864:	0052      	lsls	r2, r2, #1
 800f866:	e7a2      	b.n	800f7ae <_dtoa_r+0x24e>
 800f868:	636f4361 	.word	0x636f4361
 800f86c:	3fd287a7 	.word	0x3fd287a7
 800f870:	8b60c8b3 	.word	0x8b60c8b3
 800f874:	3fc68a28 	.word	0x3fc68a28
 800f878:	509f79fb 	.word	0x509f79fb
 800f87c:	3fd34413 	.word	0x3fd34413
 800f880:	7ff00000 	.word	0x7ff00000
 800f884:	08011ea1 	.word	0x08011ea1
 800f888:	3ff80000 	.word	0x3ff80000
 800f88c:	08011ed8 	.word	0x08011ed8
 800f890:	08011eb0 	.word	0x08011eb0
 800f894:	08011eab 	.word	0x08011eab
 800f898:	07f1      	lsls	r1, r6, #31
 800f89a:	d508      	bpl.n	800f8ae <_dtoa_r+0x34e>
 800f89c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a4:	f7f0 fe60 	bl	8000568 <__aeabi_dmul>
 800f8a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8ac:	3501      	adds	r5, #1
 800f8ae:	1076      	asrs	r6, r6, #1
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	2e00      	cmp	r6, #0
 800f8b4:	d1f0      	bne.n	800f898 <_dtoa_r+0x338>
 800f8b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f8ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8be:	f7f0 ff7d 	bl	80007bc <__aeabi_ddiv>
 800f8c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f8c6:	e01a      	b.n	800f8fe <_dtoa_r+0x39e>
 800f8c8:	2502      	movs	r5, #2
 800f8ca:	e7a3      	b.n	800f814 <_dtoa_r+0x2b4>
 800f8cc:	f000 80a0 	beq.w	800fa10 <_dtoa_r+0x4b0>
 800f8d0:	f1ca 0600 	rsb	r6, sl, #0
 800f8d4:	4b9f      	ldr	r3, [pc, #636]	; (800fb54 <_dtoa_r+0x5f4>)
 800f8d6:	4fa0      	ldr	r7, [pc, #640]	; (800fb58 <_dtoa_r+0x5f8>)
 800f8d8:	f006 020f 	and.w	r2, r6, #15
 800f8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f8e8:	f7f0 fe3e 	bl	8000568 <__aeabi_dmul>
 800f8ec:	e9cd 0100 	strd	r0, r1, [sp]
 800f8f0:	1136      	asrs	r6, r6, #4
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	2502      	movs	r5, #2
 800f8f6:	2e00      	cmp	r6, #0
 800f8f8:	d17f      	bne.n	800f9fa <_dtoa_r+0x49a>
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d1e1      	bne.n	800f8c2 <_dtoa_r+0x362>
 800f8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8087 	beq.w	800fa14 <_dtoa_r+0x4b4>
 800f906:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f90a:	2200      	movs	r2, #0
 800f90c:	4b93      	ldr	r3, [pc, #588]	; (800fb5c <_dtoa_r+0x5fc>)
 800f90e:	4630      	mov	r0, r6
 800f910:	4639      	mov	r1, r7
 800f912:	f7f1 f89b 	bl	8000a4c <__aeabi_dcmplt>
 800f916:	2800      	cmp	r0, #0
 800f918:	d07c      	beq.n	800fa14 <_dtoa_r+0x4b4>
 800f91a:	f1b9 0f00 	cmp.w	r9, #0
 800f91e:	d079      	beq.n	800fa14 <_dtoa_r+0x4b4>
 800f920:	9b02      	ldr	r3, [sp, #8]
 800f922:	2b00      	cmp	r3, #0
 800f924:	dd35      	ble.n	800f992 <_dtoa_r+0x432>
 800f926:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f92a:	9308      	str	r3, [sp, #32]
 800f92c:	4639      	mov	r1, r7
 800f92e:	2200      	movs	r2, #0
 800f930:	4b8b      	ldr	r3, [pc, #556]	; (800fb60 <_dtoa_r+0x600>)
 800f932:	4630      	mov	r0, r6
 800f934:	f7f0 fe18 	bl	8000568 <__aeabi_dmul>
 800f938:	e9cd 0100 	strd	r0, r1, [sp]
 800f93c:	9f02      	ldr	r7, [sp, #8]
 800f93e:	3501      	adds	r5, #1
 800f940:	4628      	mov	r0, r5
 800f942:	f7f0 fda7 	bl	8000494 <__aeabi_i2d>
 800f946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f94a:	f7f0 fe0d 	bl	8000568 <__aeabi_dmul>
 800f94e:	2200      	movs	r2, #0
 800f950:	4b84      	ldr	r3, [pc, #528]	; (800fb64 <_dtoa_r+0x604>)
 800f952:	f7f0 fc53 	bl	80001fc <__adddf3>
 800f956:	4605      	mov	r5, r0
 800f958:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f95c:	2f00      	cmp	r7, #0
 800f95e:	d15d      	bne.n	800fa1c <_dtoa_r+0x4bc>
 800f960:	2200      	movs	r2, #0
 800f962:	4b81      	ldr	r3, [pc, #516]	; (800fb68 <_dtoa_r+0x608>)
 800f964:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f968:	f7f0 fc46 	bl	80001f8 <__aeabi_dsub>
 800f96c:	462a      	mov	r2, r5
 800f96e:	4633      	mov	r3, r6
 800f970:	e9cd 0100 	strd	r0, r1, [sp]
 800f974:	f7f1 f888 	bl	8000a88 <__aeabi_dcmpgt>
 800f978:	2800      	cmp	r0, #0
 800f97a:	f040 8288 	bne.w	800fe8e <_dtoa_r+0x92e>
 800f97e:	462a      	mov	r2, r5
 800f980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f988:	f7f1 f860 	bl	8000a4c <__aeabi_dcmplt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f040 827c 	bne.w	800fe8a <_dtoa_r+0x92a>
 800f992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f996:	e9cd 2300 	strd	r2, r3, [sp]
 800f99a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f2c0 8150 	blt.w	800fc42 <_dtoa_r+0x6e2>
 800f9a2:	f1ba 0f0e 	cmp.w	sl, #14
 800f9a6:	f300 814c 	bgt.w	800fc42 <_dtoa_r+0x6e2>
 800f9aa:	4b6a      	ldr	r3, [pc, #424]	; (800fb54 <_dtoa_r+0x5f4>)
 800f9ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9b0:	ed93 7b00 	vldr	d7, [r3]
 800f9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9bc:	f280 80d8 	bge.w	800fb70 <_dtoa_r+0x610>
 800f9c0:	f1b9 0f00 	cmp.w	r9, #0
 800f9c4:	f300 80d4 	bgt.w	800fb70 <_dtoa_r+0x610>
 800f9c8:	f040 825e 	bne.w	800fe88 <_dtoa_r+0x928>
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4b66      	ldr	r3, [pc, #408]	; (800fb68 <_dtoa_r+0x608>)
 800f9d0:	ec51 0b17 	vmov	r0, r1, d7
 800f9d4:	f7f0 fdc8 	bl	8000568 <__aeabi_dmul>
 800f9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9dc:	f7f1 f84a 	bl	8000a74 <__aeabi_dcmpge>
 800f9e0:	464f      	mov	r7, r9
 800f9e2:	464e      	mov	r6, r9
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	f040 8234 	bne.w	800fe52 <_dtoa_r+0x8f2>
 800f9ea:	2331      	movs	r3, #49	; 0x31
 800f9ec:	f10b 0501 	add.w	r5, fp, #1
 800f9f0:	f88b 3000 	strb.w	r3, [fp]
 800f9f4:	f10a 0a01 	add.w	sl, sl, #1
 800f9f8:	e22f      	b.n	800fe5a <_dtoa_r+0x8fa>
 800f9fa:	07f2      	lsls	r2, r6, #31
 800f9fc:	d505      	bpl.n	800fa0a <_dtoa_r+0x4aa>
 800f9fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa02:	f7f0 fdb1 	bl	8000568 <__aeabi_dmul>
 800fa06:	3501      	adds	r5, #1
 800fa08:	2301      	movs	r3, #1
 800fa0a:	1076      	asrs	r6, r6, #1
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	e772      	b.n	800f8f6 <_dtoa_r+0x396>
 800fa10:	2502      	movs	r5, #2
 800fa12:	e774      	b.n	800f8fe <_dtoa_r+0x39e>
 800fa14:	f8cd a020 	str.w	sl, [sp, #32]
 800fa18:	464f      	mov	r7, r9
 800fa1a:	e791      	b.n	800f940 <_dtoa_r+0x3e0>
 800fa1c:	4b4d      	ldr	r3, [pc, #308]	; (800fb54 <_dtoa_r+0x5f4>)
 800fa1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d047      	beq.n	800fabc <_dtoa_r+0x55c>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	2000      	movs	r0, #0
 800fa32:	494e      	ldr	r1, [pc, #312]	; (800fb6c <_dtoa_r+0x60c>)
 800fa34:	f7f0 fec2 	bl	80007bc <__aeabi_ddiv>
 800fa38:	462a      	mov	r2, r5
 800fa3a:	4633      	mov	r3, r6
 800fa3c:	f7f0 fbdc 	bl	80001f8 <__aeabi_dsub>
 800fa40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa44:	465d      	mov	r5, fp
 800fa46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa4a:	f7f1 f83d 	bl	8000ac8 <__aeabi_d2iz>
 800fa4e:	4606      	mov	r6, r0
 800fa50:	f7f0 fd20 	bl	8000494 <__aeabi_i2d>
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa5c:	f7f0 fbcc 	bl	80001f8 <__aeabi_dsub>
 800fa60:	3630      	adds	r6, #48	; 0x30
 800fa62:	f805 6b01 	strb.w	r6, [r5], #1
 800fa66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa6a:	e9cd 0100 	strd	r0, r1, [sp]
 800fa6e:	f7f0 ffed 	bl	8000a4c <__aeabi_dcmplt>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d163      	bne.n	800fb3e <_dtoa_r+0x5de>
 800fa76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	4937      	ldr	r1, [pc, #220]	; (800fb5c <_dtoa_r+0x5fc>)
 800fa7e:	f7f0 fbbb 	bl	80001f8 <__aeabi_dsub>
 800fa82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa86:	f7f0 ffe1 	bl	8000a4c <__aeabi_dcmplt>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	f040 80b7 	bne.w	800fbfe <_dtoa_r+0x69e>
 800fa90:	eba5 030b 	sub.w	r3, r5, fp
 800fa94:	429f      	cmp	r7, r3
 800fa96:	f77f af7c 	ble.w	800f992 <_dtoa_r+0x432>
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	4b30      	ldr	r3, [pc, #192]	; (800fb60 <_dtoa_r+0x600>)
 800fa9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800faa2:	f7f0 fd61 	bl	8000568 <__aeabi_dmul>
 800faa6:	2200      	movs	r2, #0
 800faa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800faac:	4b2c      	ldr	r3, [pc, #176]	; (800fb60 <_dtoa_r+0x600>)
 800faae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fab2:	f7f0 fd59 	bl	8000568 <__aeabi_dmul>
 800fab6:	e9cd 0100 	strd	r0, r1, [sp]
 800faba:	e7c4      	b.n	800fa46 <_dtoa_r+0x4e6>
 800fabc:	462a      	mov	r2, r5
 800fabe:	4633      	mov	r3, r6
 800fac0:	f7f0 fd52 	bl	8000568 <__aeabi_dmul>
 800fac4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fac8:	eb0b 0507 	add.w	r5, fp, r7
 800facc:	465e      	mov	r6, fp
 800face:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fad2:	f7f0 fff9 	bl	8000ac8 <__aeabi_d2iz>
 800fad6:	4607      	mov	r7, r0
 800fad8:	f7f0 fcdc 	bl	8000494 <__aeabi_i2d>
 800fadc:	3730      	adds	r7, #48	; 0x30
 800fade:	4602      	mov	r2, r0
 800fae0:	460b      	mov	r3, r1
 800fae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fae6:	f7f0 fb87 	bl	80001f8 <__aeabi_dsub>
 800faea:	f806 7b01 	strb.w	r7, [r6], #1
 800faee:	42ae      	cmp	r6, r5
 800faf0:	e9cd 0100 	strd	r0, r1, [sp]
 800faf4:	f04f 0200 	mov.w	r2, #0
 800faf8:	d126      	bne.n	800fb48 <_dtoa_r+0x5e8>
 800fafa:	4b1c      	ldr	r3, [pc, #112]	; (800fb6c <_dtoa_r+0x60c>)
 800fafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb00:	f7f0 fb7c 	bl	80001fc <__adddf3>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb0c:	f7f0 ffbc 	bl	8000a88 <__aeabi_dcmpgt>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d174      	bne.n	800fbfe <_dtoa_r+0x69e>
 800fb14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb18:	2000      	movs	r0, #0
 800fb1a:	4914      	ldr	r1, [pc, #80]	; (800fb6c <_dtoa_r+0x60c>)
 800fb1c:	f7f0 fb6c 	bl	80001f8 <__aeabi_dsub>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb28:	f7f0 ff90 	bl	8000a4c <__aeabi_dcmplt>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	f43f af30 	beq.w	800f992 <_dtoa_r+0x432>
 800fb32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb36:	2b30      	cmp	r3, #48	; 0x30
 800fb38:	f105 32ff 	add.w	r2, r5, #4294967295
 800fb3c:	d002      	beq.n	800fb44 <_dtoa_r+0x5e4>
 800fb3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fb42:	e04a      	b.n	800fbda <_dtoa_r+0x67a>
 800fb44:	4615      	mov	r5, r2
 800fb46:	e7f4      	b.n	800fb32 <_dtoa_r+0x5d2>
 800fb48:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <_dtoa_r+0x600>)
 800fb4a:	f7f0 fd0d 	bl	8000568 <__aeabi_dmul>
 800fb4e:	e9cd 0100 	strd	r0, r1, [sp]
 800fb52:	e7bc      	b.n	800face <_dtoa_r+0x56e>
 800fb54:	08011ed8 	.word	0x08011ed8
 800fb58:	08011eb0 	.word	0x08011eb0
 800fb5c:	3ff00000 	.word	0x3ff00000
 800fb60:	40240000 	.word	0x40240000
 800fb64:	401c0000 	.word	0x401c0000
 800fb68:	40140000 	.word	0x40140000
 800fb6c:	3fe00000 	.word	0x3fe00000
 800fb70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb74:	465d      	mov	r5, fp
 800fb76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	4639      	mov	r1, r7
 800fb7e:	f7f0 fe1d 	bl	80007bc <__aeabi_ddiv>
 800fb82:	f7f0 ffa1 	bl	8000ac8 <__aeabi_d2iz>
 800fb86:	4680      	mov	r8, r0
 800fb88:	f7f0 fc84 	bl	8000494 <__aeabi_i2d>
 800fb8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb90:	f7f0 fcea 	bl	8000568 <__aeabi_dmul>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4630      	mov	r0, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fba0:	f7f0 fb2a 	bl	80001f8 <__aeabi_dsub>
 800fba4:	f805 6b01 	strb.w	r6, [r5], #1
 800fba8:	eba5 060b 	sub.w	r6, r5, fp
 800fbac:	45b1      	cmp	r9, r6
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	d139      	bne.n	800fc28 <_dtoa_r+0x6c8>
 800fbb4:	f7f0 fb22 	bl	80001fc <__adddf3>
 800fbb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbbc:	4606      	mov	r6, r0
 800fbbe:	460f      	mov	r7, r1
 800fbc0:	f7f0 ff62 	bl	8000a88 <__aeabi_dcmpgt>
 800fbc4:	b9c8      	cbnz	r0, 800fbfa <_dtoa_r+0x69a>
 800fbc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbca:	4630      	mov	r0, r6
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f7f0 ff33 	bl	8000a38 <__aeabi_dcmpeq>
 800fbd2:	b110      	cbz	r0, 800fbda <_dtoa_r+0x67a>
 800fbd4:	f018 0f01 	tst.w	r8, #1
 800fbd8:	d10f      	bne.n	800fbfa <_dtoa_r+0x69a>
 800fbda:	9904      	ldr	r1, [sp, #16]
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f000 fac3 	bl	8010168 <_Bfree>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fbe6:	702b      	strb	r3, [r5, #0]
 800fbe8:	f10a 0301 	add.w	r3, sl, #1
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 8241 	beq.w	8010078 <_dtoa_r+0xb18>
 800fbf6:	601d      	str	r5, [r3, #0]
 800fbf8:	e23e      	b.n	8010078 <_dtoa_r+0xb18>
 800fbfa:	f8cd a020 	str.w	sl, [sp, #32]
 800fbfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc02:	2a39      	cmp	r2, #57	; 0x39
 800fc04:	f105 33ff 	add.w	r3, r5, #4294967295
 800fc08:	d108      	bne.n	800fc1c <_dtoa_r+0x6bc>
 800fc0a:	459b      	cmp	fp, r3
 800fc0c:	d10a      	bne.n	800fc24 <_dtoa_r+0x6c4>
 800fc0e:	9b08      	ldr	r3, [sp, #32]
 800fc10:	3301      	adds	r3, #1
 800fc12:	9308      	str	r3, [sp, #32]
 800fc14:	2330      	movs	r3, #48	; 0x30
 800fc16:	f88b 3000 	strb.w	r3, [fp]
 800fc1a:	465b      	mov	r3, fp
 800fc1c:	781a      	ldrb	r2, [r3, #0]
 800fc1e:	3201      	adds	r2, #1
 800fc20:	701a      	strb	r2, [r3, #0]
 800fc22:	e78c      	b.n	800fb3e <_dtoa_r+0x5de>
 800fc24:	461d      	mov	r5, r3
 800fc26:	e7ea      	b.n	800fbfe <_dtoa_r+0x69e>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4b9b      	ldr	r3, [pc, #620]	; (800fe98 <_dtoa_r+0x938>)
 800fc2c:	f7f0 fc9c 	bl	8000568 <__aeabi_dmul>
 800fc30:	2200      	movs	r2, #0
 800fc32:	2300      	movs	r3, #0
 800fc34:	4606      	mov	r6, r0
 800fc36:	460f      	mov	r7, r1
 800fc38:	f7f0 fefe 	bl	8000a38 <__aeabi_dcmpeq>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d09a      	beq.n	800fb76 <_dtoa_r+0x616>
 800fc40:	e7cb      	b.n	800fbda <_dtoa_r+0x67a>
 800fc42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	f000 808b 	beq.w	800fd60 <_dtoa_r+0x800>
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	2a01      	cmp	r2, #1
 800fc4e:	dc6e      	bgt.n	800fd2e <_dtoa_r+0x7ce>
 800fc50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc52:	2a00      	cmp	r2, #0
 800fc54:	d067      	beq.n	800fd26 <_dtoa_r+0x7c6>
 800fc56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc5a:	9f07      	ldr	r7, [sp, #28]
 800fc5c:	9d05      	ldr	r5, [sp, #20]
 800fc5e:	9a05      	ldr	r2, [sp, #20]
 800fc60:	2101      	movs	r1, #1
 800fc62:	441a      	add	r2, r3
 800fc64:	4620      	mov	r0, r4
 800fc66:	9205      	str	r2, [sp, #20]
 800fc68:	4498      	add	r8, r3
 800fc6a:	f000 fb1d 	bl	80102a8 <__i2b>
 800fc6e:	4606      	mov	r6, r0
 800fc70:	2d00      	cmp	r5, #0
 800fc72:	dd0c      	ble.n	800fc8e <_dtoa_r+0x72e>
 800fc74:	f1b8 0f00 	cmp.w	r8, #0
 800fc78:	dd09      	ble.n	800fc8e <_dtoa_r+0x72e>
 800fc7a:	4545      	cmp	r5, r8
 800fc7c:	9a05      	ldr	r2, [sp, #20]
 800fc7e:	462b      	mov	r3, r5
 800fc80:	bfa8      	it	ge
 800fc82:	4643      	movge	r3, r8
 800fc84:	1ad2      	subs	r2, r2, r3
 800fc86:	9205      	str	r2, [sp, #20]
 800fc88:	1aed      	subs	r5, r5, r3
 800fc8a:	eba8 0803 	sub.w	r8, r8, r3
 800fc8e:	9b07      	ldr	r3, [sp, #28]
 800fc90:	b1eb      	cbz	r3, 800fcce <_dtoa_r+0x76e>
 800fc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d067      	beq.n	800fd68 <_dtoa_r+0x808>
 800fc98:	b18f      	cbz	r7, 800fcbe <_dtoa_r+0x75e>
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	463a      	mov	r2, r7
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 fba2 	bl	80103e8 <__pow5mult>
 800fca4:	9a04      	ldr	r2, [sp, #16]
 800fca6:	4601      	mov	r1, r0
 800fca8:	4606      	mov	r6, r0
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 fb05 	bl	80102ba <__multiply>
 800fcb0:	9904      	ldr	r1, [sp, #16]
 800fcb2:	9008      	str	r0, [sp, #32]
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f000 fa57 	bl	8010168 <_Bfree>
 800fcba:	9b08      	ldr	r3, [sp, #32]
 800fcbc:	9304      	str	r3, [sp, #16]
 800fcbe:	9b07      	ldr	r3, [sp, #28]
 800fcc0:	1bda      	subs	r2, r3, r7
 800fcc2:	d004      	beq.n	800fcce <_dtoa_r+0x76e>
 800fcc4:	9904      	ldr	r1, [sp, #16]
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f000 fb8e 	bl	80103e8 <__pow5mult>
 800fccc:	9004      	str	r0, [sp, #16]
 800fcce:	2101      	movs	r1, #1
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f000 fae9 	bl	80102a8 <__i2b>
 800fcd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcd8:	4607      	mov	r7, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f000 81d0 	beq.w	8010080 <_dtoa_r+0xb20>
 800fce0:	461a      	mov	r2, r3
 800fce2:	4601      	mov	r1, r0
 800fce4:	4620      	mov	r0, r4
 800fce6:	f000 fb7f 	bl	80103e8 <__pow5mult>
 800fcea:	9b06      	ldr	r3, [sp, #24]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	4607      	mov	r7, r0
 800fcf0:	dc40      	bgt.n	800fd74 <_dtoa_r+0x814>
 800fcf2:	9b00      	ldr	r3, [sp, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d139      	bne.n	800fd6c <_dtoa_r+0x80c>
 800fcf8:	9b01      	ldr	r3, [sp, #4]
 800fcfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d136      	bne.n	800fd70 <_dtoa_r+0x810>
 800fd02:	9b01      	ldr	r3, [sp, #4]
 800fd04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd08:	0d1b      	lsrs	r3, r3, #20
 800fd0a:	051b      	lsls	r3, r3, #20
 800fd0c:	b12b      	cbz	r3, 800fd1a <_dtoa_r+0x7ba>
 800fd0e:	9b05      	ldr	r3, [sp, #20]
 800fd10:	3301      	adds	r3, #1
 800fd12:	9305      	str	r3, [sp, #20]
 800fd14:	f108 0801 	add.w	r8, r8, #1
 800fd18:	2301      	movs	r3, #1
 800fd1a:	9307      	str	r3, [sp, #28]
 800fd1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d12a      	bne.n	800fd78 <_dtoa_r+0x818>
 800fd22:	2001      	movs	r0, #1
 800fd24:	e030      	b.n	800fd88 <_dtoa_r+0x828>
 800fd26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd2c:	e795      	b.n	800fc5a <_dtoa_r+0x6fa>
 800fd2e:	9b07      	ldr	r3, [sp, #28]
 800fd30:	f109 37ff 	add.w	r7, r9, #4294967295
 800fd34:	42bb      	cmp	r3, r7
 800fd36:	bfbf      	itttt	lt
 800fd38:	9b07      	ldrlt	r3, [sp, #28]
 800fd3a:	9707      	strlt	r7, [sp, #28]
 800fd3c:	1afa      	sublt	r2, r7, r3
 800fd3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fd40:	bfbb      	ittet	lt
 800fd42:	189b      	addlt	r3, r3, r2
 800fd44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fd46:	1bdf      	subge	r7, r3, r7
 800fd48:	2700      	movlt	r7, #0
 800fd4a:	f1b9 0f00 	cmp.w	r9, #0
 800fd4e:	bfb5      	itete	lt
 800fd50:	9b05      	ldrlt	r3, [sp, #20]
 800fd52:	9d05      	ldrge	r5, [sp, #20]
 800fd54:	eba3 0509 	sublt.w	r5, r3, r9
 800fd58:	464b      	movge	r3, r9
 800fd5a:	bfb8      	it	lt
 800fd5c:	2300      	movlt	r3, #0
 800fd5e:	e77e      	b.n	800fc5e <_dtoa_r+0x6fe>
 800fd60:	9f07      	ldr	r7, [sp, #28]
 800fd62:	9d05      	ldr	r5, [sp, #20]
 800fd64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd66:	e783      	b.n	800fc70 <_dtoa_r+0x710>
 800fd68:	9a07      	ldr	r2, [sp, #28]
 800fd6a:	e7ab      	b.n	800fcc4 <_dtoa_r+0x764>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e7d4      	b.n	800fd1a <_dtoa_r+0x7ba>
 800fd70:	9b00      	ldr	r3, [sp, #0]
 800fd72:	e7d2      	b.n	800fd1a <_dtoa_r+0x7ba>
 800fd74:	2300      	movs	r3, #0
 800fd76:	9307      	str	r3, [sp, #28]
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fd7e:	6918      	ldr	r0, [r3, #16]
 800fd80:	f000 fa44 	bl	801020c <__hi0bits>
 800fd84:	f1c0 0020 	rsb	r0, r0, #32
 800fd88:	4440      	add	r0, r8
 800fd8a:	f010 001f 	ands.w	r0, r0, #31
 800fd8e:	d047      	beq.n	800fe20 <_dtoa_r+0x8c0>
 800fd90:	f1c0 0320 	rsb	r3, r0, #32
 800fd94:	2b04      	cmp	r3, #4
 800fd96:	dd3b      	ble.n	800fe10 <_dtoa_r+0x8b0>
 800fd98:	9b05      	ldr	r3, [sp, #20]
 800fd9a:	f1c0 001c 	rsb	r0, r0, #28
 800fd9e:	4403      	add	r3, r0
 800fda0:	9305      	str	r3, [sp, #20]
 800fda2:	4405      	add	r5, r0
 800fda4:	4480      	add	r8, r0
 800fda6:	9b05      	ldr	r3, [sp, #20]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	dd05      	ble.n	800fdb8 <_dtoa_r+0x858>
 800fdac:	461a      	mov	r2, r3
 800fdae:	9904      	ldr	r1, [sp, #16]
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 fb67 	bl	8010484 <__lshift>
 800fdb6:	9004      	str	r0, [sp, #16]
 800fdb8:	f1b8 0f00 	cmp.w	r8, #0
 800fdbc:	dd05      	ble.n	800fdca <_dtoa_r+0x86a>
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	4642      	mov	r2, r8
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f000 fb5e 	bl	8010484 <__lshift>
 800fdc8:	4607      	mov	r7, r0
 800fdca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdcc:	b353      	cbz	r3, 800fe24 <_dtoa_r+0x8c4>
 800fdce:	4639      	mov	r1, r7
 800fdd0:	9804      	ldr	r0, [sp, #16]
 800fdd2:	f000 fbab 	bl	801052c <__mcmp>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	da24      	bge.n	800fe24 <_dtoa_r+0x8c4>
 800fdda:	2300      	movs	r3, #0
 800fddc:	220a      	movs	r2, #10
 800fdde:	9904      	ldr	r1, [sp, #16]
 800fde0:	4620      	mov	r0, r4
 800fde2:	f000 f9d8 	bl	8010196 <__multadd>
 800fde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fde8:	9004      	str	r0, [sp, #16]
 800fdea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 814d 	beq.w	801008e <_dtoa_r+0xb2e>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4631      	mov	r1, r6
 800fdf8:	220a      	movs	r2, #10
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f000 f9cb 	bl	8010196 <__multadd>
 800fe00:	9b02      	ldr	r3, [sp, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	4606      	mov	r6, r0
 800fe06:	dc4f      	bgt.n	800fea8 <_dtoa_r+0x948>
 800fe08:	9b06      	ldr	r3, [sp, #24]
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	dd4c      	ble.n	800fea8 <_dtoa_r+0x948>
 800fe0e:	e011      	b.n	800fe34 <_dtoa_r+0x8d4>
 800fe10:	d0c9      	beq.n	800fda6 <_dtoa_r+0x846>
 800fe12:	9a05      	ldr	r2, [sp, #20]
 800fe14:	331c      	adds	r3, #28
 800fe16:	441a      	add	r2, r3
 800fe18:	9205      	str	r2, [sp, #20]
 800fe1a:	441d      	add	r5, r3
 800fe1c:	4498      	add	r8, r3
 800fe1e:	e7c2      	b.n	800fda6 <_dtoa_r+0x846>
 800fe20:	4603      	mov	r3, r0
 800fe22:	e7f6      	b.n	800fe12 <_dtoa_r+0x8b2>
 800fe24:	f1b9 0f00 	cmp.w	r9, #0
 800fe28:	dc38      	bgt.n	800fe9c <_dtoa_r+0x93c>
 800fe2a:	9b06      	ldr	r3, [sp, #24]
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	dd35      	ble.n	800fe9c <_dtoa_r+0x93c>
 800fe30:	f8cd 9008 	str.w	r9, [sp, #8]
 800fe34:	9b02      	ldr	r3, [sp, #8]
 800fe36:	b963      	cbnz	r3, 800fe52 <_dtoa_r+0x8f2>
 800fe38:	4639      	mov	r1, r7
 800fe3a:	2205      	movs	r2, #5
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f000 f9aa 	bl	8010196 <__multadd>
 800fe42:	4601      	mov	r1, r0
 800fe44:	4607      	mov	r7, r0
 800fe46:	9804      	ldr	r0, [sp, #16]
 800fe48:	f000 fb70 	bl	801052c <__mcmp>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	f73f adcc 	bgt.w	800f9ea <_dtoa_r+0x48a>
 800fe52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe54:	465d      	mov	r5, fp
 800fe56:	ea6f 0a03 	mvn.w	sl, r3
 800fe5a:	f04f 0900 	mov.w	r9, #0
 800fe5e:	4639      	mov	r1, r7
 800fe60:	4620      	mov	r0, r4
 800fe62:	f000 f981 	bl	8010168 <_Bfree>
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	f43f aeb7 	beq.w	800fbda <_dtoa_r+0x67a>
 800fe6c:	f1b9 0f00 	cmp.w	r9, #0
 800fe70:	d005      	beq.n	800fe7e <_dtoa_r+0x91e>
 800fe72:	45b1      	cmp	r9, r6
 800fe74:	d003      	beq.n	800fe7e <_dtoa_r+0x91e>
 800fe76:	4649      	mov	r1, r9
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f000 f975 	bl	8010168 <_Bfree>
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4620      	mov	r0, r4
 800fe82:	f000 f971 	bl	8010168 <_Bfree>
 800fe86:	e6a8      	b.n	800fbda <_dtoa_r+0x67a>
 800fe88:	2700      	movs	r7, #0
 800fe8a:	463e      	mov	r6, r7
 800fe8c:	e7e1      	b.n	800fe52 <_dtoa_r+0x8f2>
 800fe8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fe92:	463e      	mov	r6, r7
 800fe94:	e5a9      	b.n	800f9ea <_dtoa_r+0x48a>
 800fe96:	bf00      	nop
 800fe98:	40240000 	.word	0x40240000
 800fe9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f000 80fa 	beq.w	801009c <_dtoa_r+0xb3c>
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	dd05      	ble.n	800feb8 <_dtoa_r+0x958>
 800feac:	4631      	mov	r1, r6
 800feae:	462a      	mov	r2, r5
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 fae7 	bl	8010484 <__lshift>
 800feb6:	4606      	mov	r6, r0
 800feb8:	9b07      	ldr	r3, [sp, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d04c      	beq.n	800ff58 <_dtoa_r+0x9f8>
 800febe:	6871      	ldr	r1, [r6, #4]
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 f91d 	bl	8010100 <_Balloc>
 800fec6:	6932      	ldr	r2, [r6, #16]
 800fec8:	3202      	adds	r2, #2
 800feca:	4605      	mov	r5, r0
 800fecc:	0092      	lsls	r2, r2, #2
 800fece:	f106 010c 	add.w	r1, r6, #12
 800fed2:	300c      	adds	r0, #12
 800fed4:	f7fe fe86 	bl	800ebe4 <memcpy>
 800fed8:	2201      	movs	r2, #1
 800feda:	4629      	mov	r1, r5
 800fedc:	4620      	mov	r0, r4
 800fede:	f000 fad1 	bl	8010484 <__lshift>
 800fee2:	9b00      	ldr	r3, [sp, #0]
 800fee4:	f8cd b014 	str.w	fp, [sp, #20]
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	46b1      	mov	r9, r6
 800feee:	9307      	str	r3, [sp, #28]
 800fef0:	4606      	mov	r6, r0
 800fef2:	4639      	mov	r1, r7
 800fef4:	9804      	ldr	r0, [sp, #16]
 800fef6:	f7ff faa5 	bl	800f444 <quorem>
 800fefa:	4649      	mov	r1, r9
 800fefc:	4605      	mov	r5, r0
 800fefe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ff02:	9804      	ldr	r0, [sp, #16]
 800ff04:	f000 fb12 	bl	801052c <__mcmp>
 800ff08:	4632      	mov	r2, r6
 800ff0a:	9000      	str	r0, [sp, #0]
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f000 fb26 	bl	8010560 <__mdiff>
 800ff14:	68c3      	ldr	r3, [r0, #12]
 800ff16:	4602      	mov	r2, r0
 800ff18:	bb03      	cbnz	r3, 800ff5c <_dtoa_r+0x9fc>
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	9008      	str	r0, [sp, #32]
 800ff1e:	9804      	ldr	r0, [sp, #16]
 800ff20:	f000 fb04 	bl	801052c <__mcmp>
 800ff24:	9a08      	ldr	r2, [sp, #32]
 800ff26:	4603      	mov	r3, r0
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	9308      	str	r3, [sp, #32]
 800ff2e:	f000 f91b 	bl	8010168 <_Bfree>
 800ff32:	9b08      	ldr	r3, [sp, #32]
 800ff34:	b9a3      	cbnz	r3, 800ff60 <_dtoa_r+0xa00>
 800ff36:	9a06      	ldr	r2, [sp, #24]
 800ff38:	b992      	cbnz	r2, 800ff60 <_dtoa_r+0xa00>
 800ff3a:	9a07      	ldr	r2, [sp, #28]
 800ff3c:	b982      	cbnz	r2, 800ff60 <_dtoa_r+0xa00>
 800ff3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff42:	d029      	beq.n	800ff98 <_dtoa_r+0xa38>
 800ff44:	9b00      	ldr	r3, [sp, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dd01      	ble.n	800ff4e <_dtoa_r+0x9ee>
 800ff4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ff4e:	9b05      	ldr	r3, [sp, #20]
 800ff50:	1c5d      	adds	r5, r3, #1
 800ff52:	f883 8000 	strb.w	r8, [r3]
 800ff56:	e782      	b.n	800fe5e <_dtoa_r+0x8fe>
 800ff58:	4630      	mov	r0, r6
 800ff5a:	e7c2      	b.n	800fee2 <_dtoa_r+0x982>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e7e3      	b.n	800ff28 <_dtoa_r+0x9c8>
 800ff60:	9a00      	ldr	r2, [sp, #0]
 800ff62:	2a00      	cmp	r2, #0
 800ff64:	db04      	blt.n	800ff70 <_dtoa_r+0xa10>
 800ff66:	d125      	bne.n	800ffb4 <_dtoa_r+0xa54>
 800ff68:	9a06      	ldr	r2, [sp, #24]
 800ff6a:	bb1a      	cbnz	r2, 800ffb4 <_dtoa_r+0xa54>
 800ff6c:	9a07      	ldr	r2, [sp, #28]
 800ff6e:	bb0a      	cbnz	r2, 800ffb4 <_dtoa_r+0xa54>
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	ddec      	ble.n	800ff4e <_dtoa_r+0x9ee>
 800ff74:	2201      	movs	r2, #1
 800ff76:	9904      	ldr	r1, [sp, #16]
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fa83 	bl	8010484 <__lshift>
 800ff7e:	4639      	mov	r1, r7
 800ff80:	9004      	str	r0, [sp, #16]
 800ff82:	f000 fad3 	bl	801052c <__mcmp>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	dc03      	bgt.n	800ff92 <_dtoa_r+0xa32>
 800ff8a:	d1e0      	bne.n	800ff4e <_dtoa_r+0x9ee>
 800ff8c:	f018 0f01 	tst.w	r8, #1
 800ff90:	d0dd      	beq.n	800ff4e <_dtoa_r+0x9ee>
 800ff92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff96:	d1d8      	bne.n	800ff4a <_dtoa_r+0x9ea>
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	9a05      	ldr	r2, [sp, #20]
 800ff9c:	1c5d      	adds	r5, r3, #1
 800ff9e:	2339      	movs	r3, #57	; 0x39
 800ffa0:	7013      	strb	r3, [r2, #0]
 800ffa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffa6:	2b39      	cmp	r3, #57	; 0x39
 800ffa8:	f105 32ff 	add.w	r2, r5, #4294967295
 800ffac:	d04f      	beq.n	801004e <_dtoa_r+0xaee>
 800ffae:	3301      	adds	r3, #1
 800ffb0:	7013      	strb	r3, [r2, #0]
 800ffb2:	e754      	b.n	800fe5e <_dtoa_r+0x8fe>
 800ffb4:	9a05      	ldr	r2, [sp, #20]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f102 0501 	add.w	r5, r2, #1
 800ffbc:	dd06      	ble.n	800ffcc <_dtoa_r+0xa6c>
 800ffbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ffc2:	d0e9      	beq.n	800ff98 <_dtoa_r+0xa38>
 800ffc4:	f108 0801 	add.w	r8, r8, #1
 800ffc8:	9b05      	ldr	r3, [sp, #20]
 800ffca:	e7c2      	b.n	800ff52 <_dtoa_r+0x9f2>
 800ffcc:	9a02      	ldr	r2, [sp, #8]
 800ffce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ffd2:	eba5 030b 	sub.w	r3, r5, fp
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d021      	beq.n	801001e <_dtoa_r+0xabe>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	220a      	movs	r2, #10
 800ffde:	9904      	ldr	r1, [sp, #16]
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 f8d8 	bl	8010196 <__multadd>
 800ffe6:	45b1      	cmp	r9, r6
 800ffe8:	9004      	str	r0, [sp, #16]
 800ffea:	f04f 0300 	mov.w	r3, #0
 800ffee:	f04f 020a 	mov.w	r2, #10
 800fff2:	4649      	mov	r1, r9
 800fff4:	4620      	mov	r0, r4
 800fff6:	d105      	bne.n	8010004 <_dtoa_r+0xaa4>
 800fff8:	f000 f8cd 	bl	8010196 <__multadd>
 800fffc:	4681      	mov	r9, r0
 800fffe:	4606      	mov	r6, r0
 8010000:	9505      	str	r5, [sp, #20]
 8010002:	e776      	b.n	800fef2 <_dtoa_r+0x992>
 8010004:	f000 f8c7 	bl	8010196 <__multadd>
 8010008:	4631      	mov	r1, r6
 801000a:	4681      	mov	r9, r0
 801000c:	2300      	movs	r3, #0
 801000e:	220a      	movs	r2, #10
 8010010:	4620      	mov	r0, r4
 8010012:	f000 f8c0 	bl	8010196 <__multadd>
 8010016:	4606      	mov	r6, r0
 8010018:	e7f2      	b.n	8010000 <_dtoa_r+0xaa0>
 801001a:	f04f 0900 	mov.w	r9, #0
 801001e:	2201      	movs	r2, #1
 8010020:	9904      	ldr	r1, [sp, #16]
 8010022:	4620      	mov	r0, r4
 8010024:	f000 fa2e 	bl	8010484 <__lshift>
 8010028:	4639      	mov	r1, r7
 801002a:	9004      	str	r0, [sp, #16]
 801002c:	f000 fa7e 	bl	801052c <__mcmp>
 8010030:	2800      	cmp	r0, #0
 8010032:	dcb6      	bgt.n	800ffa2 <_dtoa_r+0xa42>
 8010034:	d102      	bne.n	801003c <_dtoa_r+0xadc>
 8010036:	f018 0f01 	tst.w	r8, #1
 801003a:	d1b2      	bne.n	800ffa2 <_dtoa_r+0xa42>
 801003c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010040:	2b30      	cmp	r3, #48	; 0x30
 8010042:	f105 32ff 	add.w	r2, r5, #4294967295
 8010046:	f47f af0a 	bne.w	800fe5e <_dtoa_r+0x8fe>
 801004a:	4615      	mov	r5, r2
 801004c:	e7f6      	b.n	801003c <_dtoa_r+0xadc>
 801004e:	4593      	cmp	fp, r2
 8010050:	d105      	bne.n	801005e <_dtoa_r+0xafe>
 8010052:	2331      	movs	r3, #49	; 0x31
 8010054:	f10a 0a01 	add.w	sl, sl, #1
 8010058:	f88b 3000 	strb.w	r3, [fp]
 801005c:	e6ff      	b.n	800fe5e <_dtoa_r+0x8fe>
 801005e:	4615      	mov	r5, r2
 8010060:	e79f      	b.n	800ffa2 <_dtoa_r+0xa42>
 8010062:	f8df b064 	ldr.w	fp, [pc, #100]	; 80100c8 <_dtoa_r+0xb68>
 8010066:	e007      	b.n	8010078 <_dtoa_r+0xb18>
 8010068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801006a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80100cc <_dtoa_r+0xb6c>
 801006e:	b11b      	cbz	r3, 8010078 <_dtoa_r+0xb18>
 8010070:	f10b 0308 	add.w	r3, fp, #8
 8010074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010076:	6013      	str	r3, [r2, #0]
 8010078:	4658      	mov	r0, fp
 801007a:	b017      	add	sp, #92	; 0x5c
 801007c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010080:	9b06      	ldr	r3, [sp, #24]
 8010082:	2b01      	cmp	r3, #1
 8010084:	f77f ae35 	ble.w	800fcf2 <_dtoa_r+0x792>
 8010088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801008a:	9307      	str	r3, [sp, #28]
 801008c:	e649      	b.n	800fd22 <_dtoa_r+0x7c2>
 801008e:	9b02      	ldr	r3, [sp, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	dc03      	bgt.n	801009c <_dtoa_r+0xb3c>
 8010094:	9b06      	ldr	r3, [sp, #24]
 8010096:	2b02      	cmp	r3, #2
 8010098:	f73f aecc 	bgt.w	800fe34 <_dtoa_r+0x8d4>
 801009c:	465d      	mov	r5, fp
 801009e:	4639      	mov	r1, r7
 80100a0:	9804      	ldr	r0, [sp, #16]
 80100a2:	f7ff f9cf 	bl	800f444 <quorem>
 80100a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80100aa:	f805 8b01 	strb.w	r8, [r5], #1
 80100ae:	9a02      	ldr	r2, [sp, #8]
 80100b0:	eba5 030b 	sub.w	r3, r5, fp
 80100b4:	429a      	cmp	r2, r3
 80100b6:	ddb0      	ble.n	801001a <_dtoa_r+0xaba>
 80100b8:	2300      	movs	r3, #0
 80100ba:	220a      	movs	r2, #10
 80100bc:	9904      	ldr	r1, [sp, #16]
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 f869 	bl	8010196 <__multadd>
 80100c4:	9004      	str	r0, [sp, #16]
 80100c6:	e7ea      	b.n	801009e <_dtoa_r+0xb3e>
 80100c8:	08011ea0 	.word	0x08011ea0
 80100cc:	08011ea2 	.word	0x08011ea2

080100d0 <_localeconv_r>:
 80100d0:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <_localeconv_r+0x14>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	6a18      	ldr	r0, [r3, #32]
 80100d6:	4b04      	ldr	r3, [pc, #16]	; (80100e8 <_localeconv_r+0x18>)
 80100d8:	2800      	cmp	r0, #0
 80100da:	bf08      	it	eq
 80100dc:	4618      	moveq	r0, r3
 80100de:	30f0      	adds	r0, #240	; 0xf0
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	20000010 	.word	0x20000010
 80100e8:	20000074 	.word	0x20000074

080100ec <malloc>:
 80100ec:	4b02      	ldr	r3, [pc, #8]	; (80100f8 <malloc+0xc>)
 80100ee:	4601      	mov	r1, r0
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	f7fe bd8b 	b.w	800ec0c <_malloc_r>
 80100f6:	bf00      	nop
 80100f8:	20000010 	.word	0x20000010

080100fc <__malloc_lock>:
 80100fc:	4770      	bx	lr

080100fe <__malloc_unlock>:
 80100fe:	4770      	bx	lr

08010100 <_Balloc>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010104:	4604      	mov	r4, r0
 8010106:	460e      	mov	r6, r1
 8010108:	b93d      	cbnz	r5, 801011a <_Balloc+0x1a>
 801010a:	2010      	movs	r0, #16
 801010c:	f7ff ffee 	bl	80100ec <malloc>
 8010110:	6260      	str	r0, [r4, #36]	; 0x24
 8010112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010116:	6005      	str	r5, [r0, #0]
 8010118:	60c5      	str	r5, [r0, #12]
 801011a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801011c:	68eb      	ldr	r3, [r5, #12]
 801011e:	b183      	cbz	r3, 8010142 <_Balloc+0x42>
 8010120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010128:	b9b8      	cbnz	r0, 801015a <_Balloc+0x5a>
 801012a:	2101      	movs	r1, #1
 801012c:	fa01 f506 	lsl.w	r5, r1, r6
 8010130:	1d6a      	adds	r2, r5, #5
 8010132:	0092      	lsls	r2, r2, #2
 8010134:	4620      	mov	r0, r4
 8010136:	f000 fabf 	bl	80106b8 <_calloc_r>
 801013a:	b160      	cbz	r0, 8010156 <_Balloc+0x56>
 801013c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010140:	e00e      	b.n	8010160 <_Balloc+0x60>
 8010142:	2221      	movs	r2, #33	; 0x21
 8010144:	2104      	movs	r1, #4
 8010146:	4620      	mov	r0, r4
 8010148:	f000 fab6 	bl	80106b8 <_calloc_r>
 801014c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801014e:	60e8      	str	r0, [r5, #12]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e4      	bne.n	8010120 <_Balloc+0x20>
 8010156:	2000      	movs	r0, #0
 8010158:	bd70      	pop	{r4, r5, r6, pc}
 801015a:	6802      	ldr	r2, [r0, #0]
 801015c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010160:	2300      	movs	r3, #0
 8010162:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010166:	e7f7      	b.n	8010158 <_Balloc+0x58>

08010168 <_Bfree>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801016c:	4606      	mov	r6, r0
 801016e:	460d      	mov	r5, r1
 8010170:	b93c      	cbnz	r4, 8010182 <_Bfree+0x1a>
 8010172:	2010      	movs	r0, #16
 8010174:	f7ff ffba 	bl	80100ec <malloc>
 8010178:	6270      	str	r0, [r6, #36]	; 0x24
 801017a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801017e:	6004      	str	r4, [r0, #0]
 8010180:	60c4      	str	r4, [r0, #12]
 8010182:	b13d      	cbz	r5, 8010194 <_Bfree+0x2c>
 8010184:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010186:	686a      	ldr	r2, [r5, #4]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801018e:	6029      	str	r1, [r5, #0]
 8010190:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010194:	bd70      	pop	{r4, r5, r6, pc}

08010196 <__multadd>:
 8010196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	690d      	ldr	r5, [r1, #16]
 801019c:	461f      	mov	r7, r3
 801019e:	4606      	mov	r6, r0
 80101a0:	460c      	mov	r4, r1
 80101a2:	f101 0c14 	add.w	ip, r1, #20
 80101a6:	2300      	movs	r3, #0
 80101a8:	f8dc 0000 	ldr.w	r0, [ip]
 80101ac:	b281      	uxth	r1, r0
 80101ae:	fb02 7101 	mla	r1, r2, r1, r7
 80101b2:	0c0f      	lsrs	r7, r1, #16
 80101b4:	0c00      	lsrs	r0, r0, #16
 80101b6:	fb02 7000 	mla	r0, r2, r0, r7
 80101ba:	b289      	uxth	r1, r1
 80101bc:	3301      	adds	r3, #1
 80101be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80101c2:	429d      	cmp	r5, r3
 80101c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80101c8:	f84c 1b04 	str.w	r1, [ip], #4
 80101cc:	dcec      	bgt.n	80101a8 <__multadd+0x12>
 80101ce:	b1d7      	cbz	r7, 8010206 <__multadd+0x70>
 80101d0:	68a3      	ldr	r3, [r4, #8]
 80101d2:	42ab      	cmp	r3, r5
 80101d4:	dc12      	bgt.n	80101fc <__multadd+0x66>
 80101d6:	6861      	ldr	r1, [r4, #4]
 80101d8:	4630      	mov	r0, r6
 80101da:	3101      	adds	r1, #1
 80101dc:	f7ff ff90 	bl	8010100 <_Balloc>
 80101e0:	6922      	ldr	r2, [r4, #16]
 80101e2:	3202      	adds	r2, #2
 80101e4:	f104 010c 	add.w	r1, r4, #12
 80101e8:	4680      	mov	r8, r0
 80101ea:	0092      	lsls	r2, r2, #2
 80101ec:	300c      	adds	r0, #12
 80101ee:	f7fe fcf9 	bl	800ebe4 <memcpy>
 80101f2:	4621      	mov	r1, r4
 80101f4:	4630      	mov	r0, r6
 80101f6:	f7ff ffb7 	bl	8010168 <_Bfree>
 80101fa:	4644      	mov	r4, r8
 80101fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010200:	3501      	adds	r5, #1
 8010202:	615f      	str	r7, [r3, #20]
 8010204:	6125      	str	r5, [r4, #16]
 8010206:	4620      	mov	r0, r4
 8010208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801020c <__hi0bits>:
 801020c:	0c02      	lsrs	r2, r0, #16
 801020e:	0412      	lsls	r2, r2, #16
 8010210:	4603      	mov	r3, r0
 8010212:	b9b2      	cbnz	r2, 8010242 <__hi0bits+0x36>
 8010214:	0403      	lsls	r3, r0, #16
 8010216:	2010      	movs	r0, #16
 8010218:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801021c:	bf04      	itt	eq
 801021e:	021b      	lsleq	r3, r3, #8
 8010220:	3008      	addeq	r0, #8
 8010222:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010226:	bf04      	itt	eq
 8010228:	011b      	lsleq	r3, r3, #4
 801022a:	3004      	addeq	r0, #4
 801022c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010230:	bf04      	itt	eq
 8010232:	009b      	lsleq	r3, r3, #2
 8010234:	3002      	addeq	r0, #2
 8010236:	2b00      	cmp	r3, #0
 8010238:	db06      	blt.n	8010248 <__hi0bits+0x3c>
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	d503      	bpl.n	8010246 <__hi0bits+0x3a>
 801023e:	3001      	adds	r0, #1
 8010240:	4770      	bx	lr
 8010242:	2000      	movs	r0, #0
 8010244:	e7e8      	b.n	8010218 <__hi0bits+0xc>
 8010246:	2020      	movs	r0, #32
 8010248:	4770      	bx	lr

0801024a <__lo0bits>:
 801024a:	6803      	ldr	r3, [r0, #0]
 801024c:	f013 0207 	ands.w	r2, r3, #7
 8010250:	4601      	mov	r1, r0
 8010252:	d00b      	beq.n	801026c <__lo0bits+0x22>
 8010254:	07da      	lsls	r2, r3, #31
 8010256:	d423      	bmi.n	80102a0 <__lo0bits+0x56>
 8010258:	0798      	lsls	r0, r3, #30
 801025a:	bf49      	itett	mi
 801025c:	085b      	lsrmi	r3, r3, #1
 801025e:	089b      	lsrpl	r3, r3, #2
 8010260:	2001      	movmi	r0, #1
 8010262:	600b      	strmi	r3, [r1, #0]
 8010264:	bf5c      	itt	pl
 8010266:	600b      	strpl	r3, [r1, #0]
 8010268:	2002      	movpl	r0, #2
 801026a:	4770      	bx	lr
 801026c:	b298      	uxth	r0, r3
 801026e:	b9a8      	cbnz	r0, 801029c <__lo0bits+0x52>
 8010270:	0c1b      	lsrs	r3, r3, #16
 8010272:	2010      	movs	r0, #16
 8010274:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010278:	bf04      	itt	eq
 801027a:	0a1b      	lsreq	r3, r3, #8
 801027c:	3008      	addeq	r0, #8
 801027e:	071a      	lsls	r2, r3, #28
 8010280:	bf04      	itt	eq
 8010282:	091b      	lsreq	r3, r3, #4
 8010284:	3004      	addeq	r0, #4
 8010286:	079a      	lsls	r2, r3, #30
 8010288:	bf04      	itt	eq
 801028a:	089b      	lsreq	r3, r3, #2
 801028c:	3002      	addeq	r0, #2
 801028e:	07da      	lsls	r2, r3, #31
 8010290:	d402      	bmi.n	8010298 <__lo0bits+0x4e>
 8010292:	085b      	lsrs	r3, r3, #1
 8010294:	d006      	beq.n	80102a4 <__lo0bits+0x5a>
 8010296:	3001      	adds	r0, #1
 8010298:	600b      	str	r3, [r1, #0]
 801029a:	4770      	bx	lr
 801029c:	4610      	mov	r0, r2
 801029e:	e7e9      	b.n	8010274 <__lo0bits+0x2a>
 80102a0:	2000      	movs	r0, #0
 80102a2:	4770      	bx	lr
 80102a4:	2020      	movs	r0, #32
 80102a6:	4770      	bx	lr

080102a8 <__i2b>:
 80102a8:	b510      	push	{r4, lr}
 80102aa:	460c      	mov	r4, r1
 80102ac:	2101      	movs	r1, #1
 80102ae:	f7ff ff27 	bl	8010100 <_Balloc>
 80102b2:	2201      	movs	r2, #1
 80102b4:	6144      	str	r4, [r0, #20]
 80102b6:	6102      	str	r2, [r0, #16]
 80102b8:	bd10      	pop	{r4, pc}

080102ba <__multiply>:
 80102ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102be:	4614      	mov	r4, r2
 80102c0:	690a      	ldr	r2, [r1, #16]
 80102c2:	6923      	ldr	r3, [r4, #16]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	bfb8      	it	lt
 80102c8:	460b      	movlt	r3, r1
 80102ca:	4688      	mov	r8, r1
 80102cc:	bfbc      	itt	lt
 80102ce:	46a0      	movlt	r8, r4
 80102d0:	461c      	movlt	r4, r3
 80102d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80102d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80102da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80102e2:	eb07 0609 	add.w	r6, r7, r9
 80102e6:	42b3      	cmp	r3, r6
 80102e8:	bfb8      	it	lt
 80102ea:	3101      	addlt	r1, #1
 80102ec:	f7ff ff08 	bl	8010100 <_Balloc>
 80102f0:	f100 0514 	add.w	r5, r0, #20
 80102f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80102f8:	462b      	mov	r3, r5
 80102fa:	2200      	movs	r2, #0
 80102fc:	4573      	cmp	r3, lr
 80102fe:	d316      	bcc.n	801032e <__multiply+0x74>
 8010300:	f104 0214 	add.w	r2, r4, #20
 8010304:	f108 0114 	add.w	r1, r8, #20
 8010308:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801030c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	9b00      	ldr	r3, [sp, #0]
 8010314:	9201      	str	r2, [sp, #4]
 8010316:	4293      	cmp	r3, r2
 8010318:	d80c      	bhi.n	8010334 <__multiply+0x7a>
 801031a:	2e00      	cmp	r6, #0
 801031c:	dd03      	ble.n	8010326 <__multiply+0x6c>
 801031e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010322:	2b00      	cmp	r3, #0
 8010324:	d05d      	beq.n	80103e2 <__multiply+0x128>
 8010326:	6106      	str	r6, [r0, #16]
 8010328:	b003      	add	sp, #12
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032e:	f843 2b04 	str.w	r2, [r3], #4
 8010332:	e7e3      	b.n	80102fc <__multiply+0x42>
 8010334:	f8b2 b000 	ldrh.w	fp, [r2]
 8010338:	f1bb 0f00 	cmp.w	fp, #0
 801033c:	d023      	beq.n	8010386 <__multiply+0xcc>
 801033e:	4689      	mov	r9, r1
 8010340:	46ac      	mov	ip, r5
 8010342:	f04f 0800 	mov.w	r8, #0
 8010346:	f859 4b04 	ldr.w	r4, [r9], #4
 801034a:	f8dc a000 	ldr.w	sl, [ip]
 801034e:	b2a3      	uxth	r3, r4
 8010350:	fa1f fa8a 	uxth.w	sl, sl
 8010354:	fb0b a303 	mla	r3, fp, r3, sl
 8010358:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801035c:	f8dc 4000 	ldr.w	r4, [ip]
 8010360:	4443      	add	r3, r8
 8010362:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010366:	fb0b 840a 	mla	r4, fp, sl, r8
 801036a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801036e:	46e2      	mov	sl, ip
 8010370:	b29b      	uxth	r3, r3
 8010372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010376:	454f      	cmp	r7, r9
 8010378:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801037c:	f84a 3b04 	str.w	r3, [sl], #4
 8010380:	d82b      	bhi.n	80103da <__multiply+0x120>
 8010382:	f8cc 8004 	str.w	r8, [ip, #4]
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801038c:	3204      	adds	r2, #4
 801038e:	f1ba 0f00 	cmp.w	sl, #0
 8010392:	d020      	beq.n	80103d6 <__multiply+0x11c>
 8010394:	682b      	ldr	r3, [r5, #0]
 8010396:	4689      	mov	r9, r1
 8010398:	46a8      	mov	r8, r5
 801039a:	f04f 0b00 	mov.w	fp, #0
 801039e:	f8b9 c000 	ldrh.w	ip, [r9]
 80103a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80103a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80103aa:	445c      	add	r4, fp
 80103ac:	46c4      	mov	ip, r8
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80103b4:	f84c 3b04 	str.w	r3, [ip], #4
 80103b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80103bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80103c0:	0c1b      	lsrs	r3, r3, #16
 80103c2:	fb0a b303 	mla	r3, sl, r3, fp
 80103c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80103ca:	454f      	cmp	r7, r9
 80103cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80103d0:	d805      	bhi.n	80103de <__multiply+0x124>
 80103d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80103d6:	3504      	adds	r5, #4
 80103d8:	e79b      	b.n	8010312 <__multiply+0x58>
 80103da:	46d4      	mov	ip, sl
 80103dc:	e7b3      	b.n	8010346 <__multiply+0x8c>
 80103de:	46e0      	mov	r8, ip
 80103e0:	e7dd      	b.n	801039e <__multiply+0xe4>
 80103e2:	3e01      	subs	r6, #1
 80103e4:	e799      	b.n	801031a <__multiply+0x60>
	...

080103e8 <__pow5mult>:
 80103e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ec:	4615      	mov	r5, r2
 80103ee:	f012 0203 	ands.w	r2, r2, #3
 80103f2:	4606      	mov	r6, r0
 80103f4:	460f      	mov	r7, r1
 80103f6:	d007      	beq.n	8010408 <__pow5mult+0x20>
 80103f8:	3a01      	subs	r2, #1
 80103fa:	4c21      	ldr	r4, [pc, #132]	; (8010480 <__pow5mult+0x98>)
 80103fc:	2300      	movs	r3, #0
 80103fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010402:	f7ff fec8 	bl	8010196 <__multadd>
 8010406:	4607      	mov	r7, r0
 8010408:	10ad      	asrs	r5, r5, #2
 801040a:	d035      	beq.n	8010478 <__pow5mult+0x90>
 801040c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801040e:	b93c      	cbnz	r4, 8010420 <__pow5mult+0x38>
 8010410:	2010      	movs	r0, #16
 8010412:	f7ff fe6b 	bl	80100ec <malloc>
 8010416:	6270      	str	r0, [r6, #36]	; 0x24
 8010418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801041c:	6004      	str	r4, [r0, #0]
 801041e:	60c4      	str	r4, [r0, #12]
 8010420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010428:	b94c      	cbnz	r4, 801043e <__pow5mult+0x56>
 801042a:	f240 2171 	movw	r1, #625	; 0x271
 801042e:	4630      	mov	r0, r6
 8010430:	f7ff ff3a 	bl	80102a8 <__i2b>
 8010434:	2300      	movs	r3, #0
 8010436:	f8c8 0008 	str.w	r0, [r8, #8]
 801043a:	4604      	mov	r4, r0
 801043c:	6003      	str	r3, [r0, #0]
 801043e:	f04f 0800 	mov.w	r8, #0
 8010442:	07eb      	lsls	r3, r5, #31
 8010444:	d50a      	bpl.n	801045c <__pow5mult+0x74>
 8010446:	4639      	mov	r1, r7
 8010448:	4622      	mov	r2, r4
 801044a:	4630      	mov	r0, r6
 801044c:	f7ff ff35 	bl	80102ba <__multiply>
 8010450:	4639      	mov	r1, r7
 8010452:	4681      	mov	r9, r0
 8010454:	4630      	mov	r0, r6
 8010456:	f7ff fe87 	bl	8010168 <_Bfree>
 801045a:	464f      	mov	r7, r9
 801045c:	106d      	asrs	r5, r5, #1
 801045e:	d00b      	beq.n	8010478 <__pow5mult+0x90>
 8010460:	6820      	ldr	r0, [r4, #0]
 8010462:	b938      	cbnz	r0, 8010474 <__pow5mult+0x8c>
 8010464:	4622      	mov	r2, r4
 8010466:	4621      	mov	r1, r4
 8010468:	4630      	mov	r0, r6
 801046a:	f7ff ff26 	bl	80102ba <__multiply>
 801046e:	6020      	str	r0, [r4, #0]
 8010470:	f8c0 8000 	str.w	r8, [r0]
 8010474:	4604      	mov	r4, r0
 8010476:	e7e4      	b.n	8010442 <__pow5mult+0x5a>
 8010478:	4638      	mov	r0, r7
 801047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047e:	bf00      	nop
 8010480:	08011fa0 	.word	0x08011fa0

08010484 <__lshift>:
 8010484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010488:	460c      	mov	r4, r1
 801048a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801048e:	6923      	ldr	r3, [r4, #16]
 8010490:	6849      	ldr	r1, [r1, #4]
 8010492:	eb0a 0903 	add.w	r9, sl, r3
 8010496:	68a3      	ldr	r3, [r4, #8]
 8010498:	4607      	mov	r7, r0
 801049a:	4616      	mov	r6, r2
 801049c:	f109 0501 	add.w	r5, r9, #1
 80104a0:	42ab      	cmp	r3, r5
 80104a2:	db32      	blt.n	801050a <__lshift+0x86>
 80104a4:	4638      	mov	r0, r7
 80104a6:	f7ff fe2b 	bl	8010100 <_Balloc>
 80104aa:	2300      	movs	r3, #0
 80104ac:	4680      	mov	r8, r0
 80104ae:	f100 0114 	add.w	r1, r0, #20
 80104b2:	461a      	mov	r2, r3
 80104b4:	4553      	cmp	r3, sl
 80104b6:	db2b      	blt.n	8010510 <__lshift+0x8c>
 80104b8:	6920      	ldr	r0, [r4, #16]
 80104ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104be:	f104 0314 	add.w	r3, r4, #20
 80104c2:	f016 021f 	ands.w	r2, r6, #31
 80104c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104ce:	d025      	beq.n	801051c <__lshift+0x98>
 80104d0:	f1c2 0e20 	rsb	lr, r2, #32
 80104d4:	2000      	movs	r0, #0
 80104d6:	681e      	ldr	r6, [r3, #0]
 80104d8:	468a      	mov	sl, r1
 80104da:	4096      	lsls	r6, r2
 80104dc:	4330      	orrs	r0, r6
 80104de:	f84a 0b04 	str.w	r0, [sl], #4
 80104e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80104e6:	459c      	cmp	ip, r3
 80104e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80104ec:	d814      	bhi.n	8010518 <__lshift+0x94>
 80104ee:	6048      	str	r0, [r1, #4]
 80104f0:	b108      	cbz	r0, 80104f6 <__lshift+0x72>
 80104f2:	f109 0502 	add.w	r5, r9, #2
 80104f6:	3d01      	subs	r5, #1
 80104f8:	4638      	mov	r0, r7
 80104fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80104fe:	4621      	mov	r1, r4
 8010500:	f7ff fe32 	bl	8010168 <_Bfree>
 8010504:	4640      	mov	r0, r8
 8010506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801050a:	3101      	adds	r1, #1
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	e7c7      	b.n	80104a0 <__lshift+0x1c>
 8010510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010514:	3301      	adds	r3, #1
 8010516:	e7cd      	b.n	80104b4 <__lshift+0x30>
 8010518:	4651      	mov	r1, sl
 801051a:	e7dc      	b.n	80104d6 <__lshift+0x52>
 801051c:	3904      	subs	r1, #4
 801051e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010522:	f841 2f04 	str.w	r2, [r1, #4]!
 8010526:	459c      	cmp	ip, r3
 8010528:	d8f9      	bhi.n	801051e <__lshift+0x9a>
 801052a:	e7e4      	b.n	80104f6 <__lshift+0x72>

0801052c <__mcmp>:
 801052c:	6903      	ldr	r3, [r0, #16]
 801052e:	690a      	ldr	r2, [r1, #16]
 8010530:	1a9b      	subs	r3, r3, r2
 8010532:	b530      	push	{r4, r5, lr}
 8010534:	d10c      	bne.n	8010550 <__mcmp+0x24>
 8010536:	0092      	lsls	r2, r2, #2
 8010538:	3014      	adds	r0, #20
 801053a:	3114      	adds	r1, #20
 801053c:	1884      	adds	r4, r0, r2
 801053e:	4411      	add	r1, r2
 8010540:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010548:	4295      	cmp	r5, r2
 801054a:	d003      	beq.n	8010554 <__mcmp+0x28>
 801054c:	d305      	bcc.n	801055a <__mcmp+0x2e>
 801054e:	2301      	movs	r3, #1
 8010550:	4618      	mov	r0, r3
 8010552:	bd30      	pop	{r4, r5, pc}
 8010554:	42a0      	cmp	r0, r4
 8010556:	d3f3      	bcc.n	8010540 <__mcmp+0x14>
 8010558:	e7fa      	b.n	8010550 <__mcmp+0x24>
 801055a:	f04f 33ff 	mov.w	r3, #4294967295
 801055e:	e7f7      	b.n	8010550 <__mcmp+0x24>

08010560 <__mdiff>:
 8010560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010564:	460d      	mov	r5, r1
 8010566:	4607      	mov	r7, r0
 8010568:	4611      	mov	r1, r2
 801056a:	4628      	mov	r0, r5
 801056c:	4614      	mov	r4, r2
 801056e:	f7ff ffdd 	bl	801052c <__mcmp>
 8010572:	1e06      	subs	r6, r0, #0
 8010574:	d108      	bne.n	8010588 <__mdiff+0x28>
 8010576:	4631      	mov	r1, r6
 8010578:	4638      	mov	r0, r7
 801057a:	f7ff fdc1 	bl	8010100 <_Balloc>
 801057e:	2301      	movs	r3, #1
 8010580:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010588:	bfa4      	itt	ge
 801058a:	4623      	movge	r3, r4
 801058c:	462c      	movge	r4, r5
 801058e:	4638      	mov	r0, r7
 8010590:	6861      	ldr	r1, [r4, #4]
 8010592:	bfa6      	itte	ge
 8010594:	461d      	movge	r5, r3
 8010596:	2600      	movge	r6, #0
 8010598:	2601      	movlt	r6, #1
 801059a:	f7ff fdb1 	bl	8010100 <_Balloc>
 801059e:	692b      	ldr	r3, [r5, #16]
 80105a0:	60c6      	str	r6, [r0, #12]
 80105a2:	6926      	ldr	r6, [r4, #16]
 80105a4:	f105 0914 	add.w	r9, r5, #20
 80105a8:	f104 0214 	add.w	r2, r4, #20
 80105ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80105b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80105b4:	f100 0514 	add.w	r5, r0, #20
 80105b8:	f04f 0e00 	mov.w	lr, #0
 80105bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80105c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80105c4:	fa1e f18a 	uxtah	r1, lr, sl
 80105c8:	b2a3      	uxth	r3, r4
 80105ca:	1ac9      	subs	r1, r1, r3
 80105cc:	0c23      	lsrs	r3, r4, #16
 80105ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80105d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80105d6:	b289      	uxth	r1, r1
 80105d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80105dc:	45c8      	cmp	r8, r9
 80105de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80105e2:	4694      	mov	ip, r2
 80105e4:	f845 3b04 	str.w	r3, [r5], #4
 80105e8:	d8e8      	bhi.n	80105bc <__mdiff+0x5c>
 80105ea:	45bc      	cmp	ip, r7
 80105ec:	d304      	bcc.n	80105f8 <__mdiff+0x98>
 80105ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80105f2:	b183      	cbz	r3, 8010616 <__mdiff+0xb6>
 80105f4:	6106      	str	r6, [r0, #16]
 80105f6:	e7c5      	b.n	8010584 <__mdiff+0x24>
 80105f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80105fc:	fa1e f381 	uxtah	r3, lr, r1
 8010600:	141a      	asrs	r2, r3, #16
 8010602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010606:	b29b      	uxth	r3, r3
 8010608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801060c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010610:	f845 3b04 	str.w	r3, [r5], #4
 8010614:	e7e9      	b.n	80105ea <__mdiff+0x8a>
 8010616:	3e01      	subs	r6, #1
 8010618:	e7e9      	b.n	80105ee <__mdiff+0x8e>

0801061a <__d2b>:
 801061a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801061e:	460e      	mov	r6, r1
 8010620:	2101      	movs	r1, #1
 8010622:	ec59 8b10 	vmov	r8, r9, d0
 8010626:	4615      	mov	r5, r2
 8010628:	f7ff fd6a 	bl	8010100 <_Balloc>
 801062c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010630:	4607      	mov	r7, r0
 8010632:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010636:	bb34      	cbnz	r4, 8010686 <__d2b+0x6c>
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	f1b8 0300 	subs.w	r3, r8, #0
 801063e:	d027      	beq.n	8010690 <__d2b+0x76>
 8010640:	a802      	add	r0, sp, #8
 8010642:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010646:	f7ff fe00 	bl	801024a <__lo0bits>
 801064a:	9900      	ldr	r1, [sp, #0]
 801064c:	b1f0      	cbz	r0, 801068c <__d2b+0x72>
 801064e:	9a01      	ldr	r2, [sp, #4]
 8010650:	f1c0 0320 	rsb	r3, r0, #32
 8010654:	fa02 f303 	lsl.w	r3, r2, r3
 8010658:	430b      	orrs	r3, r1
 801065a:	40c2      	lsrs	r2, r0
 801065c:	617b      	str	r3, [r7, #20]
 801065e:	9201      	str	r2, [sp, #4]
 8010660:	9b01      	ldr	r3, [sp, #4]
 8010662:	61bb      	str	r3, [r7, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	bf14      	ite	ne
 8010668:	2102      	movne	r1, #2
 801066a:	2101      	moveq	r1, #1
 801066c:	6139      	str	r1, [r7, #16]
 801066e:	b1c4      	cbz	r4, 80106a2 <__d2b+0x88>
 8010670:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010674:	4404      	add	r4, r0
 8010676:	6034      	str	r4, [r6, #0]
 8010678:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801067c:	6028      	str	r0, [r5, #0]
 801067e:	4638      	mov	r0, r7
 8010680:	b003      	add	sp, #12
 8010682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801068a:	e7d5      	b.n	8010638 <__d2b+0x1e>
 801068c:	6179      	str	r1, [r7, #20]
 801068e:	e7e7      	b.n	8010660 <__d2b+0x46>
 8010690:	a801      	add	r0, sp, #4
 8010692:	f7ff fdda 	bl	801024a <__lo0bits>
 8010696:	9b01      	ldr	r3, [sp, #4]
 8010698:	617b      	str	r3, [r7, #20]
 801069a:	2101      	movs	r1, #1
 801069c:	6139      	str	r1, [r7, #16]
 801069e:	3020      	adds	r0, #32
 80106a0:	e7e5      	b.n	801066e <__d2b+0x54>
 80106a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80106a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106aa:	6030      	str	r0, [r6, #0]
 80106ac:	6918      	ldr	r0, [r3, #16]
 80106ae:	f7ff fdad 	bl	801020c <__hi0bits>
 80106b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80106b6:	e7e1      	b.n	801067c <__d2b+0x62>

080106b8 <_calloc_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	fb02 f401 	mul.w	r4, r2, r1
 80106be:	4621      	mov	r1, r4
 80106c0:	f7fe faa4 	bl	800ec0c <_malloc_r>
 80106c4:	4605      	mov	r5, r0
 80106c6:	b118      	cbz	r0, 80106d0 <_calloc_r+0x18>
 80106c8:	4622      	mov	r2, r4
 80106ca:	2100      	movs	r1, #0
 80106cc:	f7fe fa95 	bl	800ebfa <memset>
 80106d0:	4628      	mov	r0, r5
 80106d2:	bd38      	pop	{r3, r4, r5, pc}

080106d4 <_free_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4605      	mov	r5, r0
 80106d8:	2900      	cmp	r1, #0
 80106da:	d045      	beq.n	8010768 <_free_r+0x94>
 80106dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106e0:	1f0c      	subs	r4, r1, #4
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	bfb8      	it	lt
 80106e6:	18e4      	addlt	r4, r4, r3
 80106e8:	f7ff fd08 	bl	80100fc <__malloc_lock>
 80106ec:	4a1f      	ldr	r2, [pc, #124]	; (801076c <_free_r+0x98>)
 80106ee:	6813      	ldr	r3, [r2, #0]
 80106f0:	4610      	mov	r0, r2
 80106f2:	b933      	cbnz	r3, 8010702 <_free_r+0x2e>
 80106f4:	6063      	str	r3, [r4, #4]
 80106f6:	6014      	str	r4, [r2, #0]
 80106f8:	4628      	mov	r0, r5
 80106fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106fe:	f7ff bcfe 	b.w	80100fe <__malloc_unlock>
 8010702:	42a3      	cmp	r3, r4
 8010704:	d90c      	bls.n	8010720 <_free_r+0x4c>
 8010706:	6821      	ldr	r1, [r4, #0]
 8010708:	1862      	adds	r2, r4, r1
 801070a:	4293      	cmp	r3, r2
 801070c:	bf04      	itt	eq
 801070e:	681a      	ldreq	r2, [r3, #0]
 8010710:	685b      	ldreq	r3, [r3, #4]
 8010712:	6063      	str	r3, [r4, #4]
 8010714:	bf04      	itt	eq
 8010716:	1852      	addeq	r2, r2, r1
 8010718:	6022      	streq	r2, [r4, #0]
 801071a:	6004      	str	r4, [r0, #0]
 801071c:	e7ec      	b.n	80106f8 <_free_r+0x24>
 801071e:	4613      	mov	r3, r2
 8010720:	685a      	ldr	r2, [r3, #4]
 8010722:	b10a      	cbz	r2, 8010728 <_free_r+0x54>
 8010724:	42a2      	cmp	r2, r4
 8010726:	d9fa      	bls.n	801071e <_free_r+0x4a>
 8010728:	6819      	ldr	r1, [r3, #0]
 801072a:	1858      	adds	r0, r3, r1
 801072c:	42a0      	cmp	r0, r4
 801072e:	d10b      	bne.n	8010748 <_free_r+0x74>
 8010730:	6820      	ldr	r0, [r4, #0]
 8010732:	4401      	add	r1, r0
 8010734:	1858      	adds	r0, r3, r1
 8010736:	4282      	cmp	r2, r0
 8010738:	6019      	str	r1, [r3, #0]
 801073a:	d1dd      	bne.n	80106f8 <_free_r+0x24>
 801073c:	6810      	ldr	r0, [r2, #0]
 801073e:	6852      	ldr	r2, [r2, #4]
 8010740:	605a      	str	r2, [r3, #4]
 8010742:	4401      	add	r1, r0
 8010744:	6019      	str	r1, [r3, #0]
 8010746:	e7d7      	b.n	80106f8 <_free_r+0x24>
 8010748:	d902      	bls.n	8010750 <_free_r+0x7c>
 801074a:	230c      	movs	r3, #12
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	e7d3      	b.n	80106f8 <_free_r+0x24>
 8010750:	6820      	ldr	r0, [r4, #0]
 8010752:	1821      	adds	r1, r4, r0
 8010754:	428a      	cmp	r2, r1
 8010756:	bf04      	itt	eq
 8010758:	6811      	ldreq	r1, [r2, #0]
 801075a:	6852      	ldreq	r2, [r2, #4]
 801075c:	6062      	str	r2, [r4, #4]
 801075e:	bf04      	itt	eq
 8010760:	1809      	addeq	r1, r1, r0
 8010762:	6021      	streq	r1, [r4, #0]
 8010764:	605c      	str	r4, [r3, #4]
 8010766:	e7c7      	b.n	80106f8 <_free_r+0x24>
 8010768:	bd38      	pop	{r3, r4, r5, pc}
 801076a:	bf00      	nop
 801076c:	200047c0 	.word	0x200047c0

08010770 <__ascii_mbtowc>:
 8010770:	b082      	sub	sp, #8
 8010772:	b901      	cbnz	r1, 8010776 <__ascii_mbtowc+0x6>
 8010774:	a901      	add	r1, sp, #4
 8010776:	b142      	cbz	r2, 801078a <__ascii_mbtowc+0x1a>
 8010778:	b14b      	cbz	r3, 801078e <__ascii_mbtowc+0x1e>
 801077a:	7813      	ldrb	r3, [r2, #0]
 801077c:	600b      	str	r3, [r1, #0]
 801077e:	7812      	ldrb	r2, [r2, #0]
 8010780:	1c10      	adds	r0, r2, #0
 8010782:	bf18      	it	ne
 8010784:	2001      	movne	r0, #1
 8010786:	b002      	add	sp, #8
 8010788:	4770      	bx	lr
 801078a:	4610      	mov	r0, r2
 801078c:	e7fb      	b.n	8010786 <__ascii_mbtowc+0x16>
 801078e:	f06f 0001 	mvn.w	r0, #1
 8010792:	e7f8      	b.n	8010786 <__ascii_mbtowc+0x16>

08010794 <__ascii_wctomb>:
 8010794:	b149      	cbz	r1, 80107aa <__ascii_wctomb+0x16>
 8010796:	2aff      	cmp	r2, #255	; 0xff
 8010798:	bf85      	ittet	hi
 801079a:	238a      	movhi	r3, #138	; 0x8a
 801079c:	6003      	strhi	r3, [r0, #0]
 801079e:	700a      	strbls	r2, [r1, #0]
 80107a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107a4:	bf98      	it	ls
 80107a6:	2001      	movls	r0, #1
 80107a8:	4770      	bx	lr
 80107aa:	4608      	mov	r0, r1
 80107ac:	4770      	bx	lr
	...

080107b0 <pow>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	ed2d 8b04 	vpush	{d8-d9}
 80107b8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010a8c <pow+0x2dc>
 80107bc:	b08d      	sub	sp, #52	; 0x34
 80107be:	ec57 6b10 	vmov	r6, r7, d0
 80107c2:	ec55 4b11 	vmov	r4, r5, d1
 80107c6:	f000 f963 	bl	8010a90 <__ieee754_pow>
 80107ca:	f999 3000 	ldrsb.w	r3, [r9]
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	eeb0 8a40 	vmov.f32	s16, s0
 80107d6:	eef0 8a60 	vmov.f32	s17, s1
 80107da:	46c8      	mov	r8, r9
 80107dc:	d05f      	beq.n	801089e <pow+0xee>
 80107de:	4622      	mov	r2, r4
 80107e0:	462b      	mov	r3, r5
 80107e2:	4620      	mov	r0, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7f0 f959 	bl	8000a9c <__aeabi_dcmpun>
 80107ea:	4683      	mov	fp, r0
 80107ec:	2800      	cmp	r0, #0
 80107ee:	d156      	bne.n	801089e <pow+0xee>
 80107f0:	4632      	mov	r2, r6
 80107f2:	463b      	mov	r3, r7
 80107f4:	4630      	mov	r0, r6
 80107f6:	4639      	mov	r1, r7
 80107f8:	f7f0 f950 	bl	8000a9c <__aeabi_dcmpun>
 80107fc:	9001      	str	r0, [sp, #4]
 80107fe:	b1e8      	cbz	r0, 801083c <pow+0x8c>
 8010800:	2200      	movs	r2, #0
 8010802:	2300      	movs	r3, #0
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7f0 f916 	bl	8000a38 <__aeabi_dcmpeq>
 801080c:	2800      	cmp	r0, #0
 801080e:	d046      	beq.n	801089e <pow+0xee>
 8010810:	2301      	movs	r3, #1
 8010812:	9302      	str	r3, [sp, #8]
 8010814:	4b96      	ldr	r3, [pc, #600]	; (8010a70 <pow+0x2c0>)
 8010816:	9303      	str	r3, [sp, #12]
 8010818:	4b96      	ldr	r3, [pc, #600]	; (8010a74 <pow+0x2c4>)
 801081a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801081e:	2200      	movs	r2, #0
 8010820:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010824:	9b00      	ldr	r3, [sp, #0]
 8010826:	2b02      	cmp	r3, #2
 8010828:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801082c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010830:	d033      	beq.n	801089a <pow+0xea>
 8010832:	a802      	add	r0, sp, #8
 8010834:	f000 fefb 	bl	801162e <matherr>
 8010838:	bb48      	cbnz	r0, 801088e <pow+0xde>
 801083a:	e05d      	b.n	80108f8 <pow+0x148>
 801083c:	f04f 0a00 	mov.w	sl, #0
 8010840:	f04f 0b00 	mov.w	fp, #0
 8010844:	4652      	mov	r2, sl
 8010846:	465b      	mov	r3, fp
 8010848:	4630      	mov	r0, r6
 801084a:	4639      	mov	r1, r7
 801084c:	f7f0 f8f4 	bl	8000a38 <__aeabi_dcmpeq>
 8010850:	ec4b ab19 	vmov	d9, sl, fp
 8010854:	2800      	cmp	r0, #0
 8010856:	d054      	beq.n	8010902 <pow+0x152>
 8010858:	4652      	mov	r2, sl
 801085a:	465b      	mov	r3, fp
 801085c:	4620      	mov	r0, r4
 801085e:	4629      	mov	r1, r5
 8010860:	f7f0 f8ea 	bl	8000a38 <__aeabi_dcmpeq>
 8010864:	4680      	mov	r8, r0
 8010866:	b318      	cbz	r0, 80108b0 <pow+0x100>
 8010868:	2301      	movs	r3, #1
 801086a:	9302      	str	r3, [sp, #8]
 801086c:	4b80      	ldr	r3, [pc, #512]	; (8010a70 <pow+0x2c0>)
 801086e:	9303      	str	r3, [sp, #12]
 8010870:	9b01      	ldr	r3, [sp, #4]
 8010872:	930a      	str	r3, [sp, #40]	; 0x28
 8010874:	9b00      	ldr	r3, [sp, #0]
 8010876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801087a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801087e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d0d5      	beq.n	8010832 <pow+0x82>
 8010886:	4b7b      	ldr	r3, [pc, #492]	; (8010a74 <pow+0x2c4>)
 8010888:	2200      	movs	r2, #0
 801088a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801088e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010890:	b11b      	cbz	r3, 801089a <pow+0xea>
 8010892:	f7fe f97d 	bl	800eb90 <__errno>
 8010896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801089e:	eeb0 0a48 	vmov.f32	s0, s16
 80108a2:	eef0 0a68 	vmov.f32	s1, s17
 80108a6:	b00d      	add	sp, #52	; 0x34
 80108a8:	ecbd 8b04 	vpop	{d8-d9}
 80108ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b0:	ec45 4b10 	vmov	d0, r4, r5
 80108b4:	f000 feb3 	bl	801161e <finite>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d0f0      	beq.n	801089e <pow+0xee>
 80108bc:	4652      	mov	r2, sl
 80108be:	465b      	mov	r3, fp
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7f0 f8c2 	bl	8000a4c <__aeabi_dcmplt>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d0e8      	beq.n	801089e <pow+0xee>
 80108cc:	2301      	movs	r3, #1
 80108ce:	9302      	str	r3, [sp, #8]
 80108d0:	4b67      	ldr	r3, [pc, #412]	; (8010a70 <pow+0x2c0>)
 80108d2:	9303      	str	r3, [sp, #12]
 80108d4:	f999 3000 	ldrsb.w	r3, [r9]
 80108d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80108dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80108e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80108e4:	b913      	cbnz	r3, 80108ec <pow+0x13c>
 80108e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80108ea:	e7a2      	b.n	8010832 <pow+0x82>
 80108ec:	4962      	ldr	r1, [pc, #392]	; (8010a78 <pow+0x2c8>)
 80108ee:	2000      	movs	r0, #0
 80108f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	d19c      	bne.n	8010832 <pow+0x82>
 80108f8:	f7fe f94a 	bl	800eb90 <__errno>
 80108fc:	2321      	movs	r3, #33	; 0x21
 80108fe:	6003      	str	r3, [r0, #0]
 8010900:	e7c5      	b.n	801088e <pow+0xde>
 8010902:	eeb0 0a48 	vmov.f32	s0, s16
 8010906:	eef0 0a68 	vmov.f32	s1, s17
 801090a:	f000 fe88 	bl	801161e <finite>
 801090e:	9000      	str	r0, [sp, #0]
 8010910:	2800      	cmp	r0, #0
 8010912:	f040 8081 	bne.w	8010a18 <pow+0x268>
 8010916:	ec47 6b10 	vmov	d0, r6, r7
 801091a:	f000 fe80 	bl	801161e <finite>
 801091e:	2800      	cmp	r0, #0
 8010920:	d07a      	beq.n	8010a18 <pow+0x268>
 8010922:	ec45 4b10 	vmov	d0, r4, r5
 8010926:	f000 fe7a 	bl	801161e <finite>
 801092a:	2800      	cmp	r0, #0
 801092c:	d074      	beq.n	8010a18 <pow+0x268>
 801092e:	ec53 2b18 	vmov	r2, r3, d8
 8010932:	ee18 0a10 	vmov	r0, s16
 8010936:	4619      	mov	r1, r3
 8010938:	f7f0 f8b0 	bl	8000a9c <__aeabi_dcmpun>
 801093c:	f999 9000 	ldrsb.w	r9, [r9]
 8010940:	4b4b      	ldr	r3, [pc, #300]	; (8010a70 <pow+0x2c0>)
 8010942:	b1b0      	cbz	r0, 8010972 <pow+0x1c2>
 8010944:	2201      	movs	r2, #1
 8010946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801094a:	9b00      	ldr	r3, [sp, #0]
 801094c:	930a      	str	r3, [sp, #40]	; 0x28
 801094e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010952:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010956:	f1b9 0f00 	cmp.w	r9, #0
 801095a:	d0c4      	beq.n	80108e6 <pow+0x136>
 801095c:	4652      	mov	r2, sl
 801095e:	465b      	mov	r3, fp
 8010960:	4650      	mov	r0, sl
 8010962:	4659      	mov	r1, fp
 8010964:	f7ef ff2a 	bl	80007bc <__aeabi_ddiv>
 8010968:	f1b9 0f02 	cmp.w	r9, #2
 801096c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010970:	e7c1      	b.n	80108f6 <pow+0x146>
 8010972:	2203      	movs	r2, #3
 8010974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010978:	900a      	str	r0, [sp, #40]	; 0x28
 801097a:	4629      	mov	r1, r5
 801097c:	4620      	mov	r0, r4
 801097e:	2200      	movs	r2, #0
 8010980:	4b3e      	ldr	r3, [pc, #248]	; (8010a7c <pow+0x2cc>)
 8010982:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010986:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801098a:	f7ef fded 	bl	8000568 <__aeabi_dmul>
 801098e:	4604      	mov	r4, r0
 8010990:	460d      	mov	r5, r1
 8010992:	f1b9 0f00 	cmp.w	r9, #0
 8010996:	d124      	bne.n	80109e2 <pow+0x232>
 8010998:	4b39      	ldr	r3, [pc, #228]	; (8010a80 <pow+0x2d0>)
 801099a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801099e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80109a2:	4630      	mov	r0, r6
 80109a4:	4652      	mov	r2, sl
 80109a6:	465b      	mov	r3, fp
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7f0 f84f 	bl	8000a4c <__aeabi_dcmplt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d056      	beq.n	8010a60 <pow+0x2b0>
 80109b2:	ec45 4b10 	vmov	d0, r4, r5
 80109b6:	f000 fe47 	bl	8011648 <rint>
 80109ba:	4622      	mov	r2, r4
 80109bc:	462b      	mov	r3, r5
 80109be:	ec51 0b10 	vmov	r0, r1, d0
 80109c2:	f7f0 f839 	bl	8000a38 <__aeabi_dcmpeq>
 80109c6:	b920      	cbnz	r0, 80109d2 <pow+0x222>
 80109c8:	4b2e      	ldr	r3, [pc, #184]	; (8010a84 <pow+0x2d4>)
 80109ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80109ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80109d2:	f998 3000 	ldrsb.w	r3, [r8]
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d142      	bne.n	8010a60 <pow+0x2b0>
 80109da:	f7fe f8d9 	bl	800eb90 <__errno>
 80109de:	2322      	movs	r3, #34	; 0x22
 80109e0:	e78d      	b.n	80108fe <pow+0x14e>
 80109e2:	4b29      	ldr	r3, [pc, #164]	; (8010a88 <pow+0x2d8>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80109ea:	4630      	mov	r0, r6
 80109ec:	4652      	mov	r2, sl
 80109ee:	465b      	mov	r3, fp
 80109f0:	4639      	mov	r1, r7
 80109f2:	f7f0 f82b 	bl	8000a4c <__aeabi_dcmplt>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d0eb      	beq.n	80109d2 <pow+0x222>
 80109fa:	ec45 4b10 	vmov	d0, r4, r5
 80109fe:	f000 fe23 	bl	8011648 <rint>
 8010a02:	4622      	mov	r2, r4
 8010a04:	462b      	mov	r3, r5
 8010a06:	ec51 0b10 	vmov	r0, r1, d0
 8010a0a:	f7f0 f815 	bl	8000a38 <__aeabi_dcmpeq>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d1df      	bne.n	80109d2 <pow+0x222>
 8010a12:	2200      	movs	r2, #0
 8010a14:	4b18      	ldr	r3, [pc, #96]	; (8010a78 <pow+0x2c8>)
 8010a16:	e7da      	b.n	80109ce <pow+0x21e>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	ec51 0b18 	vmov	r0, r1, d8
 8010a20:	f7f0 f80a 	bl	8000a38 <__aeabi_dcmpeq>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	f43f af3a 	beq.w	801089e <pow+0xee>
 8010a2a:	ec47 6b10 	vmov	d0, r6, r7
 8010a2e:	f000 fdf6 	bl	801161e <finite>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	f43f af33 	beq.w	801089e <pow+0xee>
 8010a38:	ec45 4b10 	vmov	d0, r4, r5
 8010a3c:	f000 fdef 	bl	801161e <finite>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	f43f af2c 	beq.w	801089e <pow+0xee>
 8010a46:	2304      	movs	r3, #4
 8010a48:	9302      	str	r3, [sp, #8]
 8010a4a:	4b09      	ldr	r3, [pc, #36]	; (8010a70 <pow+0x2c0>)
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	930a      	str	r3, [sp, #40]	; 0x28
 8010a52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010a56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010a5a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010a5e:	e7b8      	b.n	80109d2 <pow+0x222>
 8010a60:	a802      	add	r0, sp, #8
 8010a62:	f000 fde4 	bl	801162e <matherr>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	f47f af11 	bne.w	801088e <pow+0xde>
 8010a6c:	e7b5      	b.n	80109da <pow+0x22a>
 8010a6e:	bf00      	nop
 8010a70:	080120b7 	.word	0x080120b7
 8010a74:	3ff00000 	.word	0x3ff00000
 8010a78:	fff00000 	.word	0xfff00000
 8010a7c:	3fe00000 	.word	0x3fe00000
 8010a80:	47efffff 	.word	0x47efffff
 8010a84:	c7efffff 	.word	0xc7efffff
 8010a88:	7ff00000 	.word	0x7ff00000
 8010a8c:	200001e0 	.word	0x200001e0

08010a90 <__ieee754_pow>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	b091      	sub	sp, #68	; 0x44
 8010a96:	ed8d 1b00 	vstr	d1, [sp]
 8010a9a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010a9e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010aa2:	ea58 0302 	orrs.w	r3, r8, r2
 8010aa6:	ec57 6b10 	vmov	r6, r7, d0
 8010aaa:	f000 84be 	beq.w	801142a <__ieee754_pow+0x99a>
 8010aae:	4b7a      	ldr	r3, [pc, #488]	; (8010c98 <__ieee754_pow+0x208>)
 8010ab0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010ab4:	429c      	cmp	r4, r3
 8010ab6:	463d      	mov	r5, r7
 8010ab8:	ee10 aa10 	vmov	sl, s0
 8010abc:	dc09      	bgt.n	8010ad2 <__ieee754_pow+0x42>
 8010abe:	d103      	bne.n	8010ac8 <__ieee754_pow+0x38>
 8010ac0:	b93e      	cbnz	r6, 8010ad2 <__ieee754_pow+0x42>
 8010ac2:	45a0      	cmp	r8, r4
 8010ac4:	dc0d      	bgt.n	8010ae2 <__ieee754_pow+0x52>
 8010ac6:	e001      	b.n	8010acc <__ieee754_pow+0x3c>
 8010ac8:	4598      	cmp	r8, r3
 8010aca:	dc02      	bgt.n	8010ad2 <__ieee754_pow+0x42>
 8010acc:	4598      	cmp	r8, r3
 8010ace:	d10e      	bne.n	8010aee <__ieee754_pow+0x5e>
 8010ad0:	b16a      	cbz	r2, 8010aee <__ieee754_pow+0x5e>
 8010ad2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010ad6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010ada:	ea54 030a 	orrs.w	r3, r4, sl
 8010ade:	f000 84a4 	beq.w	801142a <__ieee754_pow+0x99a>
 8010ae2:	486e      	ldr	r0, [pc, #440]	; (8010c9c <__ieee754_pow+0x20c>)
 8010ae4:	b011      	add	sp, #68	; 0x44
 8010ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aea:	f000 bda5 	b.w	8011638 <nan>
 8010aee:	2d00      	cmp	r5, #0
 8010af0:	da53      	bge.n	8010b9a <__ieee754_pow+0x10a>
 8010af2:	4b6b      	ldr	r3, [pc, #428]	; (8010ca0 <__ieee754_pow+0x210>)
 8010af4:	4598      	cmp	r8, r3
 8010af6:	dc4d      	bgt.n	8010b94 <__ieee754_pow+0x104>
 8010af8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010afc:	4598      	cmp	r8, r3
 8010afe:	dd4c      	ble.n	8010b9a <__ieee754_pow+0x10a>
 8010b00:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b08:	2b14      	cmp	r3, #20
 8010b0a:	dd26      	ble.n	8010b5a <__ieee754_pow+0xca>
 8010b0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010b10:	fa22 f103 	lsr.w	r1, r2, r3
 8010b14:	fa01 f303 	lsl.w	r3, r1, r3
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d13e      	bne.n	8010b9a <__ieee754_pow+0x10a>
 8010b1c:	f001 0101 	and.w	r1, r1, #1
 8010b20:	f1c1 0b02 	rsb	fp, r1, #2
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	d15b      	bne.n	8010be0 <__ieee754_pow+0x150>
 8010b28:	4b5b      	ldr	r3, [pc, #364]	; (8010c98 <__ieee754_pow+0x208>)
 8010b2a:	4598      	cmp	r8, r3
 8010b2c:	d124      	bne.n	8010b78 <__ieee754_pow+0xe8>
 8010b2e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010b32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010b36:	ea53 030a 	orrs.w	r3, r3, sl
 8010b3a:	f000 8476 	beq.w	801142a <__ieee754_pow+0x99a>
 8010b3e:	4b59      	ldr	r3, [pc, #356]	; (8010ca4 <__ieee754_pow+0x214>)
 8010b40:	429c      	cmp	r4, r3
 8010b42:	dd2d      	ble.n	8010ba0 <__ieee754_pow+0x110>
 8010b44:	f1b9 0f00 	cmp.w	r9, #0
 8010b48:	f280 8473 	bge.w	8011432 <__ieee754_pow+0x9a2>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	2100      	movs	r1, #0
 8010b50:	ec41 0b10 	vmov	d0, r0, r1
 8010b54:	b011      	add	sp, #68	; 0x44
 8010b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b5a:	2a00      	cmp	r2, #0
 8010b5c:	d13e      	bne.n	8010bdc <__ieee754_pow+0x14c>
 8010b5e:	f1c3 0314 	rsb	r3, r3, #20
 8010b62:	fa48 f103 	asr.w	r1, r8, r3
 8010b66:	fa01 f303 	lsl.w	r3, r1, r3
 8010b6a:	4543      	cmp	r3, r8
 8010b6c:	f040 8469 	bne.w	8011442 <__ieee754_pow+0x9b2>
 8010b70:	f001 0101 	and.w	r1, r1, #1
 8010b74:	f1c1 0b02 	rsb	fp, r1, #2
 8010b78:	4b4b      	ldr	r3, [pc, #300]	; (8010ca8 <__ieee754_pow+0x218>)
 8010b7a:	4598      	cmp	r8, r3
 8010b7c:	d118      	bne.n	8010bb0 <__ieee754_pow+0x120>
 8010b7e:	f1b9 0f00 	cmp.w	r9, #0
 8010b82:	f280 845a 	bge.w	801143a <__ieee754_pow+0x9aa>
 8010b86:	4948      	ldr	r1, [pc, #288]	; (8010ca8 <__ieee754_pow+0x218>)
 8010b88:	4632      	mov	r2, r6
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f7ef fe15 	bl	80007bc <__aeabi_ddiv>
 8010b92:	e7dd      	b.n	8010b50 <__ieee754_pow+0xc0>
 8010b94:	f04f 0b02 	mov.w	fp, #2
 8010b98:	e7c4      	b.n	8010b24 <__ieee754_pow+0x94>
 8010b9a:	f04f 0b00 	mov.w	fp, #0
 8010b9e:	e7c1      	b.n	8010b24 <__ieee754_pow+0x94>
 8010ba0:	f1b9 0f00 	cmp.w	r9, #0
 8010ba4:	dad2      	bge.n	8010b4c <__ieee754_pow+0xbc>
 8010ba6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bae:	e7cf      	b.n	8010b50 <__ieee754_pow+0xc0>
 8010bb0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010bb4:	d106      	bne.n	8010bc4 <__ieee754_pow+0x134>
 8010bb6:	4632      	mov	r2, r6
 8010bb8:	463b      	mov	r3, r7
 8010bba:	4610      	mov	r0, r2
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	f7ef fcd3 	bl	8000568 <__aeabi_dmul>
 8010bc2:	e7c5      	b.n	8010b50 <__ieee754_pow+0xc0>
 8010bc4:	4b39      	ldr	r3, [pc, #228]	; (8010cac <__ieee754_pow+0x21c>)
 8010bc6:	4599      	cmp	r9, r3
 8010bc8:	d10a      	bne.n	8010be0 <__ieee754_pow+0x150>
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	db08      	blt.n	8010be0 <__ieee754_pow+0x150>
 8010bce:	ec47 6b10 	vmov	d0, r6, r7
 8010bd2:	b011      	add	sp, #68	; 0x44
 8010bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd8:	f000 bc68 	b.w	80114ac <__ieee754_sqrt>
 8010bdc:	f04f 0b00 	mov.w	fp, #0
 8010be0:	ec47 6b10 	vmov	d0, r6, r7
 8010be4:	f000 fd12 	bl	801160c <fabs>
 8010be8:	ec51 0b10 	vmov	r0, r1, d0
 8010bec:	f1ba 0f00 	cmp.w	sl, #0
 8010bf0:	d127      	bne.n	8010c42 <__ieee754_pow+0x1b2>
 8010bf2:	b124      	cbz	r4, 8010bfe <__ieee754_pow+0x16e>
 8010bf4:	4b2c      	ldr	r3, [pc, #176]	; (8010ca8 <__ieee754_pow+0x218>)
 8010bf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d121      	bne.n	8010c42 <__ieee754_pow+0x1b2>
 8010bfe:	f1b9 0f00 	cmp.w	r9, #0
 8010c02:	da05      	bge.n	8010c10 <__ieee754_pow+0x180>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	2000      	movs	r0, #0
 8010c0a:	4927      	ldr	r1, [pc, #156]	; (8010ca8 <__ieee754_pow+0x218>)
 8010c0c:	f7ef fdd6 	bl	80007bc <__aeabi_ddiv>
 8010c10:	2d00      	cmp	r5, #0
 8010c12:	da9d      	bge.n	8010b50 <__ieee754_pow+0xc0>
 8010c14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c1c:	ea54 030b 	orrs.w	r3, r4, fp
 8010c20:	d108      	bne.n	8010c34 <__ieee754_pow+0x1a4>
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	4610      	mov	r0, r2
 8010c28:	4619      	mov	r1, r3
 8010c2a:	f7ef fae5 	bl	80001f8 <__aeabi_dsub>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	e7ac      	b.n	8010b8e <__ieee754_pow+0xfe>
 8010c34:	f1bb 0f01 	cmp.w	fp, #1
 8010c38:	d18a      	bne.n	8010b50 <__ieee754_pow+0xc0>
 8010c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c3e:	4619      	mov	r1, r3
 8010c40:	e786      	b.n	8010b50 <__ieee754_pow+0xc0>
 8010c42:	0fed      	lsrs	r5, r5, #31
 8010c44:	1e6b      	subs	r3, r5, #1
 8010c46:	930d      	str	r3, [sp, #52]	; 0x34
 8010c48:	ea5b 0303 	orrs.w	r3, fp, r3
 8010c4c:	d102      	bne.n	8010c54 <__ieee754_pow+0x1c4>
 8010c4e:	4632      	mov	r2, r6
 8010c50:	463b      	mov	r3, r7
 8010c52:	e7e8      	b.n	8010c26 <__ieee754_pow+0x196>
 8010c54:	4b16      	ldr	r3, [pc, #88]	; (8010cb0 <__ieee754_pow+0x220>)
 8010c56:	4598      	cmp	r8, r3
 8010c58:	f340 80fe 	ble.w	8010e58 <__ieee754_pow+0x3c8>
 8010c5c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010c60:	4598      	cmp	r8, r3
 8010c62:	dd0a      	ble.n	8010c7a <__ieee754_pow+0x1ea>
 8010c64:	4b0f      	ldr	r3, [pc, #60]	; (8010ca4 <__ieee754_pow+0x214>)
 8010c66:	429c      	cmp	r4, r3
 8010c68:	dc0d      	bgt.n	8010c86 <__ieee754_pow+0x1f6>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	f6bf af6d 	bge.w	8010b4c <__ieee754_pow+0xbc>
 8010c72:	a307      	add	r3, pc, #28	; (adr r3, 8010c90 <__ieee754_pow+0x200>)
 8010c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c78:	e79f      	b.n	8010bba <__ieee754_pow+0x12a>
 8010c7a:	4b0e      	ldr	r3, [pc, #56]	; (8010cb4 <__ieee754_pow+0x224>)
 8010c7c:	429c      	cmp	r4, r3
 8010c7e:	ddf4      	ble.n	8010c6a <__ieee754_pow+0x1da>
 8010c80:	4b09      	ldr	r3, [pc, #36]	; (8010ca8 <__ieee754_pow+0x218>)
 8010c82:	429c      	cmp	r4, r3
 8010c84:	dd18      	ble.n	8010cb8 <__ieee754_pow+0x228>
 8010c86:	f1b9 0f00 	cmp.w	r9, #0
 8010c8a:	dcf2      	bgt.n	8010c72 <__ieee754_pow+0x1e2>
 8010c8c:	e75e      	b.n	8010b4c <__ieee754_pow+0xbc>
 8010c8e:	bf00      	nop
 8010c90:	8800759c 	.word	0x8800759c
 8010c94:	7e37e43c 	.word	0x7e37e43c
 8010c98:	7ff00000 	.word	0x7ff00000
 8010c9c:	08011fb5 	.word	0x08011fb5
 8010ca0:	433fffff 	.word	0x433fffff
 8010ca4:	3fefffff 	.word	0x3fefffff
 8010ca8:	3ff00000 	.word	0x3ff00000
 8010cac:	3fe00000 	.word	0x3fe00000
 8010cb0:	41e00000 	.word	0x41e00000
 8010cb4:	3feffffe 	.word	0x3feffffe
 8010cb8:	2200      	movs	r2, #0
 8010cba:	4b63      	ldr	r3, [pc, #396]	; (8010e48 <__ieee754_pow+0x3b8>)
 8010cbc:	f7ef fa9c 	bl	80001f8 <__aeabi_dsub>
 8010cc0:	a355      	add	r3, pc, #340	; (adr r3, 8010e18 <__ieee754_pow+0x388>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	f7ef fc4d 	bl	8000568 <__aeabi_dmul>
 8010cce:	a354      	add	r3, pc, #336	; (adr r3, 8010e20 <__ieee754_pow+0x390>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	460f      	mov	r7, r1
 8010cd8:	4620      	mov	r0, r4
 8010cda:	4629      	mov	r1, r5
 8010cdc:	f7ef fc44 	bl	8000568 <__aeabi_dmul>
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ce6:	4b59      	ldr	r3, [pc, #356]	; (8010e4c <__ieee754_pow+0x3bc>)
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef fc3c 	bl	8000568 <__aeabi_dmul>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	a14c      	add	r1, pc, #304	; (adr r1, 8010e28 <__ieee754_pow+0x398>)
 8010cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cfa:	f7ef fa7d 	bl	80001f8 <__aeabi_dsub>
 8010cfe:	4622      	mov	r2, r4
 8010d00:	462b      	mov	r3, r5
 8010d02:	f7ef fc31 	bl	8000568 <__aeabi_dmul>
 8010d06:	4602      	mov	r2, r0
 8010d08:	460b      	mov	r3, r1
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	4950      	ldr	r1, [pc, #320]	; (8010e50 <__ieee754_pow+0x3c0>)
 8010d0e:	f7ef fa73 	bl	80001f8 <__aeabi_dsub>
 8010d12:	4622      	mov	r2, r4
 8010d14:	462b      	mov	r3, r5
 8010d16:	4680      	mov	r8, r0
 8010d18:	4689      	mov	r9, r1
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	f7ef fc23 	bl	8000568 <__aeabi_dmul>
 8010d22:	4602      	mov	r2, r0
 8010d24:	460b      	mov	r3, r1
 8010d26:	4640      	mov	r0, r8
 8010d28:	4649      	mov	r1, r9
 8010d2a:	f7ef fc1d 	bl	8000568 <__aeabi_dmul>
 8010d2e:	a340      	add	r3, pc, #256	; (adr r3, 8010e30 <__ieee754_pow+0x3a0>)
 8010d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d34:	f7ef fc18 	bl	8000568 <__aeabi_dmul>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d40:	f7ef fa5a 	bl	80001f8 <__aeabi_dsub>
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	4604      	mov	r4, r0
 8010d4a:	460d      	mov	r5, r1
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	4639      	mov	r1, r7
 8010d50:	f7ef fa54 	bl	80001fc <__adddf3>
 8010d54:	2000      	movs	r0, #0
 8010d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d5a:	4632      	mov	r2, r6
 8010d5c:	463b      	mov	r3, r7
 8010d5e:	f7ef fa4b 	bl	80001f8 <__aeabi_dsub>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	4620      	mov	r0, r4
 8010d68:	4629      	mov	r1, r5
 8010d6a:	f7ef fa45 	bl	80001f8 <__aeabi_dsub>
 8010d6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d70:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010d74:	4313      	orrs	r3, r2
 8010d76:	4606      	mov	r6, r0
 8010d78:	460f      	mov	r7, r1
 8010d7a:	f040 81eb 	bne.w	8011154 <__ieee754_pow+0x6c4>
 8010d7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010e38 <__ieee754_pow+0x3a8>
 8010d82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010d86:	2400      	movs	r4, #0
 8010d88:	4622      	mov	r2, r4
 8010d8a:	462b      	mov	r3, r5
 8010d8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d94:	f7ef fa30 	bl	80001f8 <__aeabi_dsub>
 8010d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d9c:	f7ef fbe4 	bl	8000568 <__aeabi_dmul>
 8010da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010da4:	4680      	mov	r8, r0
 8010da6:	4689      	mov	r9, r1
 8010da8:	4630      	mov	r0, r6
 8010daa:	4639      	mov	r1, r7
 8010dac:	f7ef fbdc 	bl	8000568 <__aeabi_dmul>
 8010db0:	4602      	mov	r2, r0
 8010db2:	460b      	mov	r3, r1
 8010db4:	4640      	mov	r0, r8
 8010db6:	4649      	mov	r1, r9
 8010db8:	f7ef fa20 	bl	80001fc <__adddf3>
 8010dbc:	4622      	mov	r2, r4
 8010dbe:	462b      	mov	r3, r5
 8010dc0:	4680      	mov	r8, r0
 8010dc2:	4689      	mov	r9, r1
 8010dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dc8:	f7ef fbce 	bl	8000568 <__aeabi_dmul>
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4604      	mov	r4, r0
 8010dd0:	460d      	mov	r5, r1
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	4649      	mov	r1, r9
 8010dd6:	4640      	mov	r0, r8
 8010dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8010ddc:	f7ef fa0e 	bl	80001fc <__adddf3>
 8010de0:	4b1c      	ldr	r3, [pc, #112]	; (8010e54 <__ieee754_pow+0x3c4>)
 8010de2:	4299      	cmp	r1, r3
 8010de4:	4606      	mov	r6, r0
 8010de6:	460f      	mov	r7, r1
 8010de8:	468b      	mov	fp, r1
 8010dea:	f340 82f7 	ble.w	80113dc <__ieee754_pow+0x94c>
 8010dee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010df2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010df6:	4303      	orrs	r3, r0
 8010df8:	f000 81ea 	beq.w	80111d0 <__ieee754_pow+0x740>
 8010dfc:	a310      	add	r3, pc, #64	; (adr r3, 8010e40 <__ieee754_pow+0x3b0>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e06:	f7ef fbaf 	bl	8000568 <__aeabi_dmul>
 8010e0a:	a30d      	add	r3, pc, #52	; (adr r3, 8010e40 <__ieee754_pow+0x3b0>)
 8010e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e10:	e6d5      	b.n	8010bbe <__ieee754_pow+0x12e>
 8010e12:	bf00      	nop
 8010e14:	f3af 8000 	nop.w
 8010e18:	60000000 	.word	0x60000000
 8010e1c:	3ff71547 	.word	0x3ff71547
 8010e20:	f85ddf44 	.word	0xf85ddf44
 8010e24:	3e54ae0b 	.word	0x3e54ae0b
 8010e28:	55555555 	.word	0x55555555
 8010e2c:	3fd55555 	.word	0x3fd55555
 8010e30:	652b82fe 	.word	0x652b82fe
 8010e34:	3ff71547 	.word	0x3ff71547
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	bff00000 	.word	0xbff00000
 8010e40:	8800759c 	.word	0x8800759c
 8010e44:	7e37e43c 	.word	0x7e37e43c
 8010e48:	3ff00000 	.word	0x3ff00000
 8010e4c:	3fd00000 	.word	0x3fd00000
 8010e50:	3fe00000 	.word	0x3fe00000
 8010e54:	408fffff 	.word	0x408fffff
 8010e58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010e5c:	f04f 0200 	mov.w	r2, #0
 8010e60:	da05      	bge.n	8010e6e <__ieee754_pow+0x3de>
 8010e62:	4bd3      	ldr	r3, [pc, #844]	; (80111b0 <__ieee754_pow+0x720>)
 8010e64:	f7ef fb80 	bl	8000568 <__aeabi_dmul>
 8010e68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	1523      	asrs	r3, r4, #20
 8010e70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e74:	4413      	add	r3, r2
 8010e76:	9309      	str	r3, [sp, #36]	; 0x24
 8010e78:	4bce      	ldr	r3, [pc, #824]	; (80111b4 <__ieee754_pow+0x724>)
 8010e7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010e7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010e82:	429c      	cmp	r4, r3
 8010e84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010e88:	dd08      	ble.n	8010e9c <__ieee754_pow+0x40c>
 8010e8a:	4bcb      	ldr	r3, [pc, #812]	; (80111b8 <__ieee754_pow+0x728>)
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	f340 815e 	ble.w	801114e <__ieee754_pow+0x6be>
 8010e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e94:	3301      	adds	r3, #1
 8010e96:	9309      	str	r3, [sp, #36]	; 0x24
 8010e98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010e9c:	f04f 0a00 	mov.w	sl, #0
 8010ea0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8010ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ea8:	4bc4      	ldr	r3, [pc, #784]	; (80111bc <__ieee754_pow+0x72c>)
 8010eaa:	4413      	add	r3, r2
 8010eac:	ed93 7b00 	vldr	d7, [r3]
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	ec53 2b17 	vmov	r2, r3, d7
 8010eb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010eba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010ebe:	f7ef f99b 	bl	80001f8 <__aeabi_dsub>
 8010ec2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ec6:	4606      	mov	r6, r0
 8010ec8:	460f      	mov	r7, r1
 8010eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ece:	f7ef f995 	bl	80001fc <__adddf3>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	49b9      	ldr	r1, [pc, #740]	; (80111c0 <__ieee754_pow+0x730>)
 8010eda:	f7ef fc6f 	bl	80007bc <__aeabi_ddiv>
 8010ede:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	4639      	mov	r1, r7
 8010eea:	f7ef fb3d 	bl	8000568 <__aeabi_dmul>
 8010eee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ef2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010ef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010efa:	2300      	movs	r3, #0
 8010efc:	9302      	str	r3, [sp, #8]
 8010efe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010f02:	106d      	asrs	r5, r5, #1
 8010f04:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010f08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010f12:	4640      	mov	r0, r8
 8010f14:	4649      	mov	r1, r9
 8010f16:	4614      	mov	r4, r2
 8010f18:	461d      	mov	r5, r3
 8010f1a:	f7ef fb25 	bl	8000568 <__aeabi_dmul>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	460b      	mov	r3, r1
 8010f22:	4630      	mov	r0, r6
 8010f24:	4639      	mov	r1, r7
 8010f26:	f7ef f967 	bl	80001f8 <__aeabi_dsub>
 8010f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f2e:	4606      	mov	r6, r0
 8010f30:	460f      	mov	r7, r1
 8010f32:	4620      	mov	r0, r4
 8010f34:	4629      	mov	r1, r5
 8010f36:	f7ef f95f 	bl	80001f8 <__aeabi_dsub>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f42:	f7ef f959 	bl	80001f8 <__aeabi_dsub>
 8010f46:	4642      	mov	r2, r8
 8010f48:	464b      	mov	r3, r9
 8010f4a:	f7ef fb0d 	bl	8000568 <__aeabi_dmul>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	460b      	mov	r3, r1
 8010f52:	4630      	mov	r0, r6
 8010f54:	4639      	mov	r1, r7
 8010f56:	f7ef f94f 	bl	80001f8 <__aeabi_dsub>
 8010f5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010f5e:	f7ef fb03 	bl	8000568 <__aeabi_dmul>
 8010f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f6a:	4610      	mov	r0, r2
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	f7ef fafb 	bl	8000568 <__aeabi_dmul>
 8010f72:	a37b      	add	r3, pc, #492	; (adr r3, 8011160 <__ieee754_pow+0x6d0>)
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	4604      	mov	r4, r0
 8010f7a:	460d      	mov	r5, r1
 8010f7c:	f7ef faf4 	bl	8000568 <__aeabi_dmul>
 8010f80:	a379      	add	r3, pc, #484	; (adr r3, 8011168 <__ieee754_pow+0x6d8>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	f7ef f939 	bl	80001fc <__adddf3>
 8010f8a:	4622      	mov	r2, r4
 8010f8c:	462b      	mov	r3, r5
 8010f8e:	f7ef faeb 	bl	8000568 <__aeabi_dmul>
 8010f92:	a377      	add	r3, pc, #476	; (adr r3, 8011170 <__ieee754_pow+0x6e0>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	f7ef f930 	bl	80001fc <__adddf3>
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	462b      	mov	r3, r5
 8010fa0:	f7ef fae2 	bl	8000568 <__aeabi_dmul>
 8010fa4:	a374      	add	r3, pc, #464	; (adr r3, 8011178 <__ieee754_pow+0x6e8>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f7ef f927 	bl	80001fc <__adddf3>
 8010fae:	4622      	mov	r2, r4
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	f7ef fad9 	bl	8000568 <__aeabi_dmul>
 8010fb6:	a372      	add	r3, pc, #456	; (adr r3, 8011180 <__ieee754_pow+0x6f0>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ef f91e 	bl	80001fc <__adddf3>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	f7ef fad0 	bl	8000568 <__aeabi_dmul>
 8010fc8:	a36f      	add	r3, pc, #444	; (adr r3, 8011188 <__ieee754_pow+0x6f8>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7ef f915 	bl	80001fc <__adddf3>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	4606      	mov	r6, r0
 8010fd6:	460f      	mov	r7, r1
 8010fd8:	462b      	mov	r3, r5
 8010fda:	4620      	mov	r0, r4
 8010fdc:	4629      	mov	r1, r5
 8010fde:	f7ef fac3 	bl	8000568 <__aeabi_dmul>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	4639      	mov	r1, r7
 8010fea:	f7ef fabd 	bl	8000568 <__aeabi_dmul>
 8010fee:	4642      	mov	r2, r8
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	460d      	mov	r5, r1
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ffa:	f7ef f8ff 	bl	80001fc <__adddf3>
 8010ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011002:	f7ef fab1 	bl	8000568 <__aeabi_dmul>
 8011006:	4622      	mov	r2, r4
 8011008:	462b      	mov	r3, r5
 801100a:	f7ef f8f7 	bl	80001fc <__adddf3>
 801100e:	4642      	mov	r2, r8
 8011010:	4606      	mov	r6, r0
 8011012:	460f      	mov	r7, r1
 8011014:	464b      	mov	r3, r9
 8011016:	4640      	mov	r0, r8
 8011018:	4649      	mov	r1, r9
 801101a:	f7ef faa5 	bl	8000568 <__aeabi_dmul>
 801101e:	2200      	movs	r2, #0
 8011020:	4b68      	ldr	r3, [pc, #416]	; (80111c4 <__ieee754_pow+0x734>)
 8011022:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011026:	f7ef f8e9 	bl	80001fc <__adddf3>
 801102a:	4632      	mov	r2, r6
 801102c:	463b      	mov	r3, r7
 801102e:	f7ef f8e5 	bl	80001fc <__adddf3>
 8011032:	9802      	ldr	r0, [sp, #8]
 8011034:	460d      	mov	r5, r1
 8011036:	4604      	mov	r4, r0
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	4640      	mov	r0, r8
 801103e:	4649      	mov	r1, r9
 8011040:	f7ef fa92 	bl	8000568 <__aeabi_dmul>
 8011044:	2200      	movs	r2, #0
 8011046:	4680      	mov	r8, r0
 8011048:	4689      	mov	r9, r1
 801104a:	4b5e      	ldr	r3, [pc, #376]	; (80111c4 <__ieee754_pow+0x734>)
 801104c:	4620      	mov	r0, r4
 801104e:	4629      	mov	r1, r5
 8011050:	f7ef f8d2 	bl	80001f8 <__aeabi_dsub>
 8011054:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011058:	f7ef f8ce 	bl	80001f8 <__aeabi_dsub>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4630      	mov	r0, r6
 8011062:	4639      	mov	r1, r7
 8011064:	f7ef f8c8 	bl	80001f8 <__aeabi_dsub>
 8011068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801106c:	f7ef fa7c 	bl	8000568 <__aeabi_dmul>
 8011070:	4622      	mov	r2, r4
 8011072:	4606      	mov	r6, r0
 8011074:	460f      	mov	r7, r1
 8011076:	462b      	mov	r3, r5
 8011078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801107c:	f7ef fa74 	bl	8000568 <__aeabi_dmul>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4630      	mov	r0, r6
 8011086:	4639      	mov	r1, r7
 8011088:	f7ef f8b8 	bl	80001fc <__adddf3>
 801108c:	4606      	mov	r6, r0
 801108e:	460f      	mov	r7, r1
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	4640      	mov	r0, r8
 8011096:	4649      	mov	r1, r9
 8011098:	f7ef f8b0 	bl	80001fc <__adddf3>
 801109c:	9802      	ldr	r0, [sp, #8]
 801109e:	a33c      	add	r3, pc, #240	; (adr r3, 8011190 <__ieee754_pow+0x700>)
 80110a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a4:	4604      	mov	r4, r0
 80110a6:	460d      	mov	r5, r1
 80110a8:	f7ef fa5e 	bl	8000568 <__aeabi_dmul>
 80110ac:	4642      	mov	r2, r8
 80110ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110b2:	464b      	mov	r3, r9
 80110b4:	4620      	mov	r0, r4
 80110b6:	4629      	mov	r1, r5
 80110b8:	f7ef f89e 	bl	80001f8 <__aeabi_dsub>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f7ef f898 	bl	80001f8 <__aeabi_dsub>
 80110c8:	a333      	add	r3, pc, #204	; (adr r3, 8011198 <__ieee754_pow+0x708>)
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f7ef fa4b 	bl	8000568 <__aeabi_dmul>
 80110d2:	a333      	add	r3, pc, #204	; (adr r3, 80111a0 <__ieee754_pow+0x710>)
 80110d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d8:	4606      	mov	r6, r0
 80110da:	460f      	mov	r7, r1
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7ef fa42 	bl	8000568 <__aeabi_dmul>
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	4630      	mov	r0, r6
 80110ea:	4639      	mov	r1, r7
 80110ec:	f7ef f886 	bl	80001fc <__adddf3>
 80110f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110f2:	4b35      	ldr	r3, [pc, #212]	; (80111c8 <__ieee754_pow+0x738>)
 80110f4:	4413      	add	r3, r2
 80110f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fa:	f7ef f87f 	bl	80001fc <__adddf3>
 80110fe:	4604      	mov	r4, r0
 8011100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011102:	460d      	mov	r5, r1
 8011104:	f7ef f9c6 	bl	8000494 <__aeabi_i2d>
 8011108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801110a:	4b30      	ldr	r3, [pc, #192]	; (80111cc <__ieee754_pow+0x73c>)
 801110c:	4413      	add	r3, r2
 801110e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011112:	4606      	mov	r6, r0
 8011114:	460f      	mov	r7, r1
 8011116:	4622      	mov	r2, r4
 8011118:	462b      	mov	r3, r5
 801111a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801111e:	f7ef f86d 	bl	80001fc <__adddf3>
 8011122:	4642      	mov	r2, r8
 8011124:	464b      	mov	r3, r9
 8011126:	f7ef f869 	bl	80001fc <__adddf3>
 801112a:	4632      	mov	r2, r6
 801112c:	463b      	mov	r3, r7
 801112e:	f7ef f865 	bl	80001fc <__adddf3>
 8011132:	9802      	ldr	r0, [sp, #8]
 8011134:	4632      	mov	r2, r6
 8011136:	463b      	mov	r3, r7
 8011138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801113c:	f7ef f85c 	bl	80001f8 <__aeabi_dsub>
 8011140:	4642      	mov	r2, r8
 8011142:	464b      	mov	r3, r9
 8011144:	f7ef f858 	bl	80001f8 <__aeabi_dsub>
 8011148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801114c:	e607      	b.n	8010d5e <__ieee754_pow+0x2ce>
 801114e:	f04f 0a01 	mov.w	sl, #1
 8011152:	e6a5      	b.n	8010ea0 <__ieee754_pow+0x410>
 8011154:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80111a8 <__ieee754_pow+0x718>
 8011158:	e613      	b.n	8010d82 <__ieee754_pow+0x2f2>
 801115a:	bf00      	nop
 801115c:	f3af 8000 	nop.w
 8011160:	4a454eef 	.word	0x4a454eef
 8011164:	3fca7e28 	.word	0x3fca7e28
 8011168:	93c9db65 	.word	0x93c9db65
 801116c:	3fcd864a 	.word	0x3fcd864a
 8011170:	a91d4101 	.word	0xa91d4101
 8011174:	3fd17460 	.word	0x3fd17460
 8011178:	518f264d 	.word	0x518f264d
 801117c:	3fd55555 	.word	0x3fd55555
 8011180:	db6fabff 	.word	0xdb6fabff
 8011184:	3fdb6db6 	.word	0x3fdb6db6
 8011188:	33333303 	.word	0x33333303
 801118c:	3fe33333 	.word	0x3fe33333
 8011190:	e0000000 	.word	0xe0000000
 8011194:	3feec709 	.word	0x3feec709
 8011198:	dc3a03fd 	.word	0xdc3a03fd
 801119c:	3feec709 	.word	0x3feec709
 80111a0:	145b01f5 	.word	0x145b01f5
 80111a4:	be3e2fe0 	.word	0xbe3e2fe0
 80111a8:	00000000 	.word	0x00000000
 80111ac:	3ff00000 	.word	0x3ff00000
 80111b0:	43400000 	.word	0x43400000
 80111b4:	0003988e 	.word	0x0003988e
 80111b8:	000bb679 	.word	0x000bb679
 80111bc:	080120c0 	.word	0x080120c0
 80111c0:	3ff00000 	.word	0x3ff00000
 80111c4:	40080000 	.word	0x40080000
 80111c8:	080120e0 	.word	0x080120e0
 80111cc:	080120d0 	.word	0x080120d0
 80111d0:	a3b4      	add	r3, pc, #720	; (adr r3, 80114a4 <__ieee754_pow+0xa14>)
 80111d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d6:	4640      	mov	r0, r8
 80111d8:	4649      	mov	r1, r9
 80111da:	f7ef f80f 	bl	80001fc <__adddf3>
 80111de:	4622      	mov	r2, r4
 80111e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111e4:	462b      	mov	r3, r5
 80111e6:	4630      	mov	r0, r6
 80111e8:	4639      	mov	r1, r7
 80111ea:	f7ef f805 	bl	80001f8 <__aeabi_dsub>
 80111ee:	4602      	mov	r2, r0
 80111f0:	460b      	mov	r3, r1
 80111f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111f6:	f7ef fc47 	bl	8000a88 <__aeabi_dcmpgt>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f47f adfe 	bne.w	8010dfc <__ieee754_pow+0x36c>
 8011200:	4aa3      	ldr	r2, [pc, #652]	; (8011490 <__ieee754_pow+0xa00>)
 8011202:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011206:	4293      	cmp	r3, r2
 8011208:	f340 810a 	ble.w	8011420 <__ieee754_pow+0x990>
 801120c:	151b      	asrs	r3, r3, #20
 801120e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011212:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011216:	fa4a f303 	asr.w	r3, sl, r3
 801121a:	445b      	add	r3, fp
 801121c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011220:	4e9c      	ldr	r6, [pc, #624]	; (8011494 <__ieee754_pow+0xa04>)
 8011222:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011226:	4116      	asrs	r6, r2
 8011228:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801122c:	2000      	movs	r0, #0
 801122e:	ea23 0106 	bic.w	r1, r3, r6
 8011232:	f1c2 0214 	rsb	r2, r2, #20
 8011236:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801123a:	fa4a fa02 	asr.w	sl, sl, r2
 801123e:	f1bb 0f00 	cmp.w	fp, #0
 8011242:	4602      	mov	r2, r0
 8011244:	460b      	mov	r3, r1
 8011246:	4620      	mov	r0, r4
 8011248:	4629      	mov	r1, r5
 801124a:	bfb8      	it	lt
 801124c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011250:	f7ee ffd2 	bl	80001f8 <__aeabi_dsub>
 8011254:	e9cd 0100 	strd	r0, r1, [sp]
 8011258:	4642      	mov	r2, r8
 801125a:	464b      	mov	r3, r9
 801125c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011260:	f7ee ffcc 	bl	80001fc <__adddf3>
 8011264:	2000      	movs	r0, #0
 8011266:	a378      	add	r3, pc, #480	; (adr r3, 8011448 <__ieee754_pow+0x9b8>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	4604      	mov	r4, r0
 801126e:	460d      	mov	r5, r1
 8011270:	f7ef f97a 	bl	8000568 <__aeabi_dmul>
 8011274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011278:	4606      	mov	r6, r0
 801127a:	460f      	mov	r7, r1
 801127c:	4620      	mov	r0, r4
 801127e:	4629      	mov	r1, r5
 8011280:	f7ee ffba 	bl	80001f8 <__aeabi_dsub>
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	4640      	mov	r0, r8
 801128a:	4649      	mov	r1, r9
 801128c:	f7ee ffb4 	bl	80001f8 <__aeabi_dsub>
 8011290:	a36f      	add	r3, pc, #444	; (adr r3, 8011450 <__ieee754_pow+0x9c0>)
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	f7ef f967 	bl	8000568 <__aeabi_dmul>
 801129a:	a36f      	add	r3, pc, #444	; (adr r3, 8011458 <__ieee754_pow+0x9c8>)
 801129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a0:	4680      	mov	r8, r0
 80112a2:	4689      	mov	r9, r1
 80112a4:	4620      	mov	r0, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	f7ef f95e 	bl	8000568 <__aeabi_dmul>
 80112ac:	4602      	mov	r2, r0
 80112ae:	460b      	mov	r3, r1
 80112b0:	4640      	mov	r0, r8
 80112b2:	4649      	mov	r1, r9
 80112b4:	f7ee ffa2 	bl	80001fc <__adddf3>
 80112b8:	4604      	mov	r4, r0
 80112ba:	460d      	mov	r5, r1
 80112bc:	4602      	mov	r2, r0
 80112be:	460b      	mov	r3, r1
 80112c0:	4630      	mov	r0, r6
 80112c2:	4639      	mov	r1, r7
 80112c4:	f7ee ff9a 	bl	80001fc <__adddf3>
 80112c8:	4632      	mov	r2, r6
 80112ca:	463b      	mov	r3, r7
 80112cc:	4680      	mov	r8, r0
 80112ce:	4689      	mov	r9, r1
 80112d0:	f7ee ff92 	bl	80001f8 <__aeabi_dsub>
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	4620      	mov	r0, r4
 80112da:	4629      	mov	r1, r5
 80112dc:	f7ee ff8c 	bl	80001f8 <__aeabi_dsub>
 80112e0:	4642      	mov	r2, r8
 80112e2:	4606      	mov	r6, r0
 80112e4:	460f      	mov	r7, r1
 80112e6:	464b      	mov	r3, r9
 80112e8:	4640      	mov	r0, r8
 80112ea:	4649      	mov	r1, r9
 80112ec:	f7ef f93c 	bl	8000568 <__aeabi_dmul>
 80112f0:	a35b      	add	r3, pc, #364	; (adr r3, 8011460 <__ieee754_pow+0x9d0>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	4604      	mov	r4, r0
 80112f8:	460d      	mov	r5, r1
 80112fa:	f7ef f935 	bl	8000568 <__aeabi_dmul>
 80112fe:	a35a      	add	r3, pc, #360	; (adr r3, 8011468 <__ieee754_pow+0x9d8>)
 8011300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011304:	f7ee ff78 	bl	80001f8 <__aeabi_dsub>
 8011308:	4622      	mov	r2, r4
 801130a:	462b      	mov	r3, r5
 801130c:	f7ef f92c 	bl	8000568 <__aeabi_dmul>
 8011310:	a357      	add	r3, pc, #348	; (adr r3, 8011470 <__ieee754_pow+0x9e0>)
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	f7ee ff71 	bl	80001fc <__adddf3>
 801131a:	4622      	mov	r2, r4
 801131c:	462b      	mov	r3, r5
 801131e:	f7ef f923 	bl	8000568 <__aeabi_dmul>
 8011322:	a355      	add	r3, pc, #340	; (adr r3, 8011478 <__ieee754_pow+0x9e8>)
 8011324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011328:	f7ee ff66 	bl	80001f8 <__aeabi_dsub>
 801132c:	4622      	mov	r2, r4
 801132e:	462b      	mov	r3, r5
 8011330:	f7ef f91a 	bl	8000568 <__aeabi_dmul>
 8011334:	a352      	add	r3, pc, #328	; (adr r3, 8011480 <__ieee754_pow+0x9f0>)
 8011336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133a:	f7ee ff5f 	bl	80001fc <__adddf3>
 801133e:	4622      	mov	r2, r4
 8011340:	462b      	mov	r3, r5
 8011342:	f7ef f911 	bl	8000568 <__aeabi_dmul>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	4640      	mov	r0, r8
 801134c:	4649      	mov	r1, r9
 801134e:	f7ee ff53 	bl	80001f8 <__aeabi_dsub>
 8011352:	4604      	mov	r4, r0
 8011354:	460d      	mov	r5, r1
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	4640      	mov	r0, r8
 801135c:	4649      	mov	r1, r9
 801135e:	f7ef f903 	bl	8000568 <__aeabi_dmul>
 8011362:	2200      	movs	r2, #0
 8011364:	e9cd 0100 	strd	r0, r1, [sp]
 8011368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801136c:	4620      	mov	r0, r4
 801136e:	4629      	mov	r1, r5
 8011370:	f7ee ff42 	bl	80001f8 <__aeabi_dsub>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	e9dd 0100 	ldrd	r0, r1, [sp]
 801137c:	f7ef fa1e 	bl	80007bc <__aeabi_ddiv>
 8011380:	4632      	mov	r2, r6
 8011382:	4604      	mov	r4, r0
 8011384:	460d      	mov	r5, r1
 8011386:	463b      	mov	r3, r7
 8011388:	4640      	mov	r0, r8
 801138a:	4649      	mov	r1, r9
 801138c:	f7ef f8ec 	bl	8000568 <__aeabi_dmul>
 8011390:	4632      	mov	r2, r6
 8011392:	463b      	mov	r3, r7
 8011394:	f7ee ff32 	bl	80001fc <__adddf3>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4620      	mov	r0, r4
 801139e:	4629      	mov	r1, r5
 80113a0:	f7ee ff2a 	bl	80001f8 <__aeabi_dsub>
 80113a4:	4642      	mov	r2, r8
 80113a6:	464b      	mov	r3, r9
 80113a8:	f7ee ff26 	bl	80001f8 <__aeabi_dsub>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	2000      	movs	r0, #0
 80113b2:	4939      	ldr	r1, [pc, #228]	; (8011498 <__ieee754_pow+0xa08>)
 80113b4:	f7ee ff20 	bl	80001f8 <__aeabi_dsub>
 80113b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80113bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	da2f      	bge.n	8011426 <__ieee754_pow+0x996>
 80113c6:	4650      	mov	r0, sl
 80113c8:	ec43 2b10 	vmov	d0, r2, r3
 80113cc:	f000 f9c0 	bl	8011750 <scalbn>
 80113d0:	ec51 0b10 	vmov	r0, r1, d0
 80113d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113d8:	f7ff bbf1 	b.w	8010bbe <__ieee754_pow+0x12e>
 80113dc:	4b2f      	ldr	r3, [pc, #188]	; (801149c <__ieee754_pow+0xa0c>)
 80113de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80113e2:	429e      	cmp	r6, r3
 80113e4:	f77f af0c 	ble.w	8011200 <__ieee754_pow+0x770>
 80113e8:	4b2d      	ldr	r3, [pc, #180]	; (80114a0 <__ieee754_pow+0xa10>)
 80113ea:	440b      	add	r3, r1
 80113ec:	4303      	orrs	r3, r0
 80113ee:	d00b      	beq.n	8011408 <__ieee754_pow+0x978>
 80113f0:	a325      	add	r3, pc, #148	; (adr r3, 8011488 <__ieee754_pow+0x9f8>)
 80113f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fa:	f7ef f8b5 	bl	8000568 <__aeabi_dmul>
 80113fe:	a322      	add	r3, pc, #136	; (adr r3, 8011488 <__ieee754_pow+0x9f8>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	f7ff bbdb 	b.w	8010bbe <__ieee754_pow+0x12e>
 8011408:	4622      	mov	r2, r4
 801140a:	462b      	mov	r3, r5
 801140c:	f7ee fef4 	bl	80001f8 <__aeabi_dsub>
 8011410:	4642      	mov	r2, r8
 8011412:	464b      	mov	r3, r9
 8011414:	f7ef fb2e 	bl	8000a74 <__aeabi_dcmpge>
 8011418:	2800      	cmp	r0, #0
 801141a:	f43f aef1 	beq.w	8011200 <__ieee754_pow+0x770>
 801141e:	e7e7      	b.n	80113f0 <__ieee754_pow+0x960>
 8011420:	f04f 0a00 	mov.w	sl, #0
 8011424:	e718      	b.n	8011258 <__ieee754_pow+0x7c8>
 8011426:	4621      	mov	r1, r4
 8011428:	e7d4      	b.n	80113d4 <__ieee754_pow+0x944>
 801142a:	2000      	movs	r0, #0
 801142c:	491a      	ldr	r1, [pc, #104]	; (8011498 <__ieee754_pow+0xa08>)
 801142e:	f7ff bb8f 	b.w	8010b50 <__ieee754_pow+0xc0>
 8011432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011436:	f7ff bb8b 	b.w	8010b50 <__ieee754_pow+0xc0>
 801143a:	4630      	mov	r0, r6
 801143c:	4639      	mov	r1, r7
 801143e:	f7ff bb87 	b.w	8010b50 <__ieee754_pow+0xc0>
 8011442:	4693      	mov	fp, r2
 8011444:	f7ff bb98 	b.w	8010b78 <__ieee754_pow+0xe8>
 8011448:	00000000 	.word	0x00000000
 801144c:	3fe62e43 	.word	0x3fe62e43
 8011450:	fefa39ef 	.word	0xfefa39ef
 8011454:	3fe62e42 	.word	0x3fe62e42
 8011458:	0ca86c39 	.word	0x0ca86c39
 801145c:	be205c61 	.word	0xbe205c61
 8011460:	72bea4d0 	.word	0x72bea4d0
 8011464:	3e663769 	.word	0x3e663769
 8011468:	c5d26bf1 	.word	0xc5d26bf1
 801146c:	3ebbbd41 	.word	0x3ebbbd41
 8011470:	af25de2c 	.word	0xaf25de2c
 8011474:	3f11566a 	.word	0x3f11566a
 8011478:	16bebd93 	.word	0x16bebd93
 801147c:	3f66c16c 	.word	0x3f66c16c
 8011480:	5555553e 	.word	0x5555553e
 8011484:	3fc55555 	.word	0x3fc55555
 8011488:	c2f8f359 	.word	0xc2f8f359
 801148c:	01a56e1f 	.word	0x01a56e1f
 8011490:	3fe00000 	.word	0x3fe00000
 8011494:	000fffff 	.word	0x000fffff
 8011498:	3ff00000 	.word	0x3ff00000
 801149c:	4090cbff 	.word	0x4090cbff
 80114a0:	3f6f3400 	.word	0x3f6f3400
 80114a4:	652b82fe 	.word	0x652b82fe
 80114a8:	3c971547 	.word	0x3c971547

080114ac <__ieee754_sqrt>:
 80114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b0:	4955      	ldr	r1, [pc, #340]	; (8011608 <__ieee754_sqrt+0x15c>)
 80114b2:	ec55 4b10 	vmov	r4, r5, d0
 80114b6:	43a9      	bics	r1, r5
 80114b8:	462b      	mov	r3, r5
 80114ba:	462a      	mov	r2, r5
 80114bc:	d112      	bne.n	80114e4 <__ieee754_sqrt+0x38>
 80114be:	ee10 2a10 	vmov	r2, s0
 80114c2:	ee10 0a10 	vmov	r0, s0
 80114c6:	4629      	mov	r1, r5
 80114c8:	f7ef f84e 	bl	8000568 <__aeabi_dmul>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4620      	mov	r0, r4
 80114d2:	4629      	mov	r1, r5
 80114d4:	f7ee fe92 	bl	80001fc <__adddf3>
 80114d8:	4604      	mov	r4, r0
 80114da:	460d      	mov	r5, r1
 80114dc:	ec45 4b10 	vmov	d0, r4, r5
 80114e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e4:	2d00      	cmp	r5, #0
 80114e6:	ee10 0a10 	vmov	r0, s0
 80114ea:	4621      	mov	r1, r4
 80114ec:	dc0f      	bgt.n	801150e <__ieee754_sqrt+0x62>
 80114ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80114f2:	4330      	orrs	r0, r6
 80114f4:	d0f2      	beq.n	80114dc <__ieee754_sqrt+0x30>
 80114f6:	b155      	cbz	r5, 801150e <__ieee754_sqrt+0x62>
 80114f8:	ee10 2a10 	vmov	r2, s0
 80114fc:	4620      	mov	r0, r4
 80114fe:	4629      	mov	r1, r5
 8011500:	f7ee fe7a 	bl	80001f8 <__aeabi_dsub>
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	f7ef f958 	bl	80007bc <__aeabi_ddiv>
 801150c:	e7e4      	b.n	80114d8 <__ieee754_sqrt+0x2c>
 801150e:	151b      	asrs	r3, r3, #20
 8011510:	d073      	beq.n	80115fa <__ieee754_sqrt+0x14e>
 8011512:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011516:	07dd      	lsls	r5, r3, #31
 8011518:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801151c:	bf48      	it	mi
 801151e:	0fc8      	lsrmi	r0, r1, #31
 8011520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011524:	bf44      	itt	mi
 8011526:	0049      	lslmi	r1, r1, #1
 8011528:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801152c:	2500      	movs	r5, #0
 801152e:	1058      	asrs	r0, r3, #1
 8011530:	0fcb      	lsrs	r3, r1, #31
 8011532:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011536:	0049      	lsls	r1, r1, #1
 8011538:	2316      	movs	r3, #22
 801153a:	462c      	mov	r4, r5
 801153c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011540:	19a7      	adds	r7, r4, r6
 8011542:	4297      	cmp	r7, r2
 8011544:	bfde      	ittt	le
 8011546:	19bc      	addle	r4, r7, r6
 8011548:	1bd2      	suble	r2, r2, r7
 801154a:	19ad      	addle	r5, r5, r6
 801154c:	0fcf      	lsrs	r7, r1, #31
 801154e:	3b01      	subs	r3, #1
 8011550:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011554:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011558:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801155c:	d1f0      	bne.n	8011540 <__ieee754_sqrt+0x94>
 801155e:	f04f 0c20 	mov.w	ip, #32
 8011562:	469e      	mov	lr, r3
 8011564:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011568:	42a2      	cmp	r2, r4
 801156a:	eb06 070e 	add.w	r7, r6, lr
 801156e:	dc02      	bgt.n	8011576 <__ieee754_sqrt+0xca>
 8011570:	d112      	bne.n	8011598 <__ieee754_sqrt+0xec>
 8011572:	428f      	cmp	r7, r1
 8011574:	d810      	bhi.n	8011598 <__ieee754_sqrt+0xec>
 8011576:	2f00      	cmp	r7, #0
 8011578:	eb07 0e06 	add.w	lr, r7, r6
 801157c:	da42      	bge.n	8011604 <__ieee754_sqrt+0x158>
 801157e:	f1be 0f00 	cmp.w	lr, #0
 8011582:	db3f      	blt.n	8011604 <__ieee754_sqrt+0x158>
 8011584:	f104 0801 	add.w	r8, r4, #1
 8011588:	1b12      	subs	r2, r2, r4
 801158a:	428f      	cmp	r7, r1
 801158c:	bf88      	it	hi
 801158e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011592:	1bc9      	subs	r1, r1, r7
 8011594:	4433      	add	r3, r6
 8011596:	4644      	mov	r4, r8
 8011598:	0052      	lsls	r2, r2, #1
 801159a:	f1bc 0c01 	subs.w	ip, ip, #1
 801159e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80115a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80115a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80115aa:	d1dd      	bne.n	8011568 <__ieee754_sqrt+0xbc>
 80115ac:	430a      	orrs	r2, r1
 80115ae:	d006      	beq.n	80115be <__ieee754_sqrt+0x112>
 80115b0:	1c5c      	adds	r4, r3, #1
 80115b2:	bf13      	iteet	ne
 80115b4:	3301      	addne	r3, #1
 80115b6:	3501      	addeq	r5, #1
 80115b8:	4663      	moveq	r3, ip
 80115ba:	f023 0301 	bicne.w	r3, r3, #1
 80115be:	106a      	asrs	r2, r5, #1
 80115c0:	085b      	lsrs	r3, r3, #1
 80115c2:	07e9      	lsls	r1, r5, #31
 80115c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80115c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80115cc:	bf48      	it	mi
 80115ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80115d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80115d6:	461c      	mov	r4, r3
 80115d8:	e780      	b.n	80114dc <__ieee754_sqrt+0x30>
 80115da:	0aca      	lsrs	r2, r1, #11
 80115dc:	3815      	subs	r0, #21
 80115de:	0549      	lsls	r1, r1, #21
 80115e0:	2a00      	cmp	r2, #0
 80115e2:	d0fa      	beq.n	80115da <__ieee754_sqrt+0x12e>
 80115e4:	02d6      	lsls	r6, r2, #11
 80115e6:	d50a      	bpl.n	80115fe <__ieee754_sqrt+0x152>
 80115e8:	f1c3 0420 	rsb	r4, r3, #32
 80115ec:	fa21 f404 	lsr.w	r4, r1, r4
 80115f0:	1e5d      	subs	r5, r3, #1
 80115f2:	4099      	lsls	r1, r3
 80115f4:	4322      	orrs	r2, r4
 80115f6:	1b43      	subs	r3, r0, r5
 80115f8:	e78b      	b.n	8011512 <__ieee754_sqrt+0x66>
 80115fa:	4618      	mov	r0, r3
 80115fc:	e7f0      	b.n	80115e0 <__ieee754_sqrt+0x134>
 80115fe:	0052      	lsls	r2, r2, #1
 8011600:	3301      	adds	r3, #1
 8011602:	e7ef      	b.n	80115e4 <__ieee754_sqrt+0x138>
 8011604:	46a0      	mov	r8, r4
 8011606:	e7bf      	b.n	8011588 <__ieee754_sqrt+0xdc>
 8011608:	7ff00000 	.word	0x7ff00000

0801160c <fabs>:
 801160c:	ec51 0b10 	vmov	r0, r1, d0
 8011610:	ee10 2a10 	vmov	r2, s0
 8011614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011618:	ec43 2b10 	vmov	d0, r2, r3
 801161c:	4770      	bx	lr

0801161e <finite>:
 801161e:	ee10 3a90 	vmov	r3, s1
 8011622:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011626:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801162a:	0fc0      	lsrs	r0, r0, #31
 801162c:	4770      	bx	lr

0801162e <matherr>:
 801162e:	2000      	movs	r0, #0
 8011630:	4770      	bx	lr
 8011632:	0000      	movs	r0, r0
 8011634:	0000      	movs	r0, r0
	...

08011638 <nan>:
 8011638:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011640 <nan+0x8>
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	00000000 	.word	0x00000000
 8011644:	7ff80000 	.word	0x7ff80000

08011648 <rint>:
 8011648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801164a:	ec51 0b10 	vmov	r0, r1, d0
 801164e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011652:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011656:	2e13      	cmp	r6, #19
 8011658:	460b      	mov	r3, r1
 801165a:	ee10 4a10 	vmov	r4, s0
 801165e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011662:	dc56      	bgt.n	8011712 <rint+0xca>
 8011664:	2e00      	cmp	r6, #0
 8011666:	da2b      	bge.n	80116c0 <rint+0x78>
 8011668:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801166c:	4302      	orrs	r2, r0
 801166e:	d023      	beq.n	80116b8 <rint+0x70>
 8011670:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011674:	4302      	orrs	r2, r0
 8011676:	4254      	negs	r4, r2
 8011678:	4314      	orrs	r4, r2
 801167a:	0c4b      	lsrs	r3, r1, #17
 801167c:	0b24      	lsrs	r4, r4, #12
 801167e:	045b      	lsls	r3, r3, #17
 8011680:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011684:	ea44 0103 	orr.w	r1, r4, r3
 8011688:	460b      	mov	r3, r1
 801168a:	492f      	ldr	r1, [pc, #188]	; (8011748 <rint+0x100>)
 801168c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011690:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011694:	4602      	mov	r2, r0
 8011696:	4639      	mov	r1, r7
 8011698:	4630      	mov	r0, r6
 801169a:	f7ee fdaf 	bl	80001fc <__adddf3>
 801169e:	e9cd 0100 	strd	r0, r1, [sp]
 80116a2:	463b      	mov	r3, r7
 80116a4:	4632      	mov	r2, r6
 80116a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116aa:	f7ee fda5 	bl	80001f8 <__aeabi_dsub>
 80116ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80116b6:	4639      	mov	r1, r7
 80116b8:	ec41 0b10 	vmov	d0, r0, r1
 80116bc:	b003      	add	sp, #12
 80116be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116c0:	4a22      	ldr	r2, [pc, #136]	; (801174c <rint+0x104>)
 80116c2:	4132      	asrs	r2, r6
 80116c4:	ea01 0702 	and.w	r7, r1, r2
 80116c8:	4307      	orrs	r7, r0
 80116ca:	d0f5      	beq.n	80116b8 <rint+0x70>
 80116cc:	0852      	lsrs	r2, r2, #1
 80116ce:	4011      	ands	r1, r2
 80116d0:	430c      	orrs	r4, r1
 80116d2:	d00b      	beq.n	80116ec <rint+0xa4>
 80116d4:	ea23 0202 	bic.w	r2, r3, r2
 80116d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80116dc:	2e13      	cmp	r6, #19
 80116de:	fa43 f306 	asr.w	r3, r3, r6
 80116e2:	bf0c      	ite	eq
 80116e4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80116e8:	2400      	movne	r4, #0
 80116ea:	4313      	orrs	r3, r2
 80116ec:	4916      	ldr	r1, [pc, #88]	; (8011748 <rint+0x100>)
 80116ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80116f2:	4622      	mov	r2, r4
 80116f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80116f8:	4620      	mov	r0, r4
 80116fa:	4629      	mov	r1, r5
 80116fc:	f7ee fd7e 	bl	80001fc <__adddf3>
 8011700:	e9cd 0100 	strd	r0, r1, [sp]
 8011704:	4622      	mov	r2, r4
 8011706:	462b      	mov	r3, r5
 8011708:	e9dd 0100 	ldrd	r0, r1, [sp]
 801170c:	f7ee fd74 	bl	80001f8 <__aeabi_dsub>
 8011710:	e7d2      	b.n	80116b8 <rint+0x70>
 8011712:	2e33      	cmp	r6, #51	; 0x33
 8011714:	dd07      	ble.n	8011726 <rint+0xde>
 8011716:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801171a:	d1cd      	bne.n	80116b8 <rint+0x70>
 801171c:	ee10 2a10 	vmov	r2, s0
 8011720:	f7ee fd6c 	bl	80001fc <__adddf3>
 8011724:	e7c8      	b.n	80116b8 <rint+0x70>
 8011726:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801172a:	f04f 32ff 	mov.w	r2, #4294967295
 801172e:	40f2      	lsrs	r2, r6
 8011730:	4210      	tst	r0, r2
 8011732:	d0c1      	beq.n	80116b8 <rint+0x70>
 8011734:	0852      	lsrs	r2, r2, #1
 8011736:	4210      	tst	r0, r2
 8011738:	bf1f      	itttt	ne
 801173a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801173e:	ea20 0202 	bicne.w	r2, r0, r2
 8011742:	4134      	asrne	r4, r6
 8011744:	4314      	orrne	r4, r2
 8011746:	e7d1      	b.n	80116ec <rint+0xa4>
 8011748:	080120f0 	.word	0x080120f0
 801174c:	000fffff 	.word	0x000fffff

08011750 <scalbn>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	ec55 4b10 	vmov	r4, r5, d0
 8011756:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801175a:	4606      	mov	r6, r0
 801175c:	462b      	mov	r3, r5
 801175e:	b9aa      	cbnz	r2, 801178c <scalbn+0x3c>
 8011760:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011764:	4323      	orrs	r3, r4
 8011766:	d03b      	beq.n	80117e0 <scalbn+0x90>
 8011768:	4b31      	ldr	r3, [pc, #196]	; (8011830 <scalbn+0xe0>)
 801176a:	4629      	mov	r1, r5
 801176c:	2200      	movs	r2, #0
 801176e:	ee10 0a10 	vmov	r0, s0
 8011772:	f7ee fef9 	bl	8000568 <__aeabi_dmul>
 8011776:	4b2f      	ldr	r3, [pc, #188]	; (8011834 <scalbn+0xe4>)
 8011778:	429e      	cmp	r6, r3
 801177a:	4604      	mov	r4, r0
 801177c:	460d      	mov	r5, r1
 801177e:	da12      	bge.n	80117a6 <scalbn+0x56>
 8011780:	a327      	add	r3, pc, #156	; (adr r3, 8011820 <scalbn+0xd0>)
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	f7ee feef 	bl	8000568 <__aeabi_dmul>
 801178a:	e009      	b.n	80117a0 <scalbn+0x50>
 801178c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011790:	428a      	cmp	r2, r1
 8011792:	d10c      	bne.n	80117ae <scalbn+0x5e>
 8011794:	ee10 2a10 	vmov	r2, s0
 8011798:	4620      	mov	r0, r4
 801179a:	4629      	mov	r1, r5
 801179c:	f7ee fd2e 	bl	80001fc <__adddf3>
 80117a0:	4604      	mov	r4, r0
 80117a2:	460d      	mov	r5, r1
 80117a4:	e01c      	b.n	80117e0 <scalbn+0x90>
 80117a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80117aa:	460b      	mov	r3, r1
 80117ac:	3a36      	subs	r2, #54	; 0x36
 80117ae:	4432      	add	r2, r6
 80117b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80117b4:	428a      	cmp	r2, r1
 80117b6:	dd0b      	ble.n	80117d0 <scalbn+0x80>
 80117b8:	ec45 4b11 	vmov	d1, r4, r5
 80117bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011828 <scalbn+0xd8>
 80117c0:	f000 f83c 	bl	801183c <copysign>
 80117c4:	a318      	add	r3, pc, #96	; (adr r3, 8011828 <scalbn+0xd8>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	ec51 0b10 	vmov	r0, r1, d0
 80117ce:	e7da      	b.n	8011786 <scalbn+0x36>
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	dd08      	ble.n	80117e6 <scalbn+0x96>
 80117d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80117d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80117dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80117e0:	ec45 4b10 	vmov	d0, r4, r5
 80117e4:	bd70      	pop	{r4, r5, r6, pc}
 80117e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80117ea:	da0d      	bge.n	8011808 <scalbn+0xb8>
 80117ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80117f0:	429e      	cmp	r6, r3
 80117f2:	ec45 4b11 	vmov	d1, r4, r5
 80117f6:	dce1      	bgt.n	80117bc <scalbn+0x6c>
 80117f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011820 <scalbn+0xd0>
 80117fc:	f000 f81e 	bl	801183c <copysign>
 8011800:	a307      	add	r3, pc, #28	; (adr r3, 8011820 <scalbn+0xd0>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	e7e0      	b.n	80117ca <scalbn+0x7a>
 8011808:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801180c:	3236      	adds	r2, #54	; 0x36
 801180e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011812:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	2200      	movs	r2, #0
 801181c:	4b06      	ldr	r3, [pc, #24]	; (8011838 <scalbn+0xe8>)
 801181e:	e7b2      	b.n	8011786 <scalbn+0x36>
 8011820:	c2f8f359 	.word	0xc2f8f359
 8011824:	01a56e1f 	.word	0x01a56e1f
 8011828:	8800759c 	.word	0x8800759c
 801182c:	7e37e43c 	.word	0x7e37e43c
 8011830:	43500000 	.word	0x43500000
 8011834:	ffff3cb0 	.word	0xffff3cb0
 8011838:	3c900000 	.word	0x3c900000

0801183c <copysign>:
 801183c:	ec51 0b10 	vmov	r0, r1, d0
 8011840:	ee11 0a90 	vmov	r0, s3
 8011844:	ee10 2a10 	vmov	r2, s0
 8011848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801184c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011850:	ea41 0300 	orr.w	r3, r1, r0
 8011854:	ec43 2b10 	vmov	d0, r2, r3
 8011858:	4770      	bx	lr
	...

0801185c <_init>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	bf00      	nop
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr

08011868 <_fini>:
 8011868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186a:	bf00      	nop
 801186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801186e:	bc08      	pop	{r3}
 8011870:	469e      	mov	lr, r3
 8011872:	4770      	bx	lr
