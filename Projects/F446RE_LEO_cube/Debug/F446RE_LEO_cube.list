
F446RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  08011188  08011188  00021188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011860  08011860  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011860  08011860  00021860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011868  08011868  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011868  08011868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801186c  0801186c  0002186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08011870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000142f8  200000e0  0801194c  000300e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200143d8  0801194c  000343d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af34  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ccd  00000000  00000000  0005b040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce8  00000000  00000000  00060d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a50  00000000  00000000  000629f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029635  00000000  00000000  00064448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd82  00000000  00000000  0008da7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7119  00000000  00000000  000ad7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00194918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007830  00000000  00000000  00194994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801116c 	.word	0x0801116c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	0801116c 	.word	0x0801116c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2uiz>:
 8000b38:	004a      	lsls	r2, r1, #1
 8000b3a:	d211      	bcs.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b40:	d211      	bcs.n	8000b66 <__aeabi_d2uiz+0x2e>
 8000b42:	d50d      	bpl.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b4c:	d40e      	bmi.n	8000b6c <__aeabi_d2uiz+0x34>
 8000b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_d2uiz+0x3a>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b972 	b.w	8000e74 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14b      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4615      	mov	r5, r2
 8000bba:	d967      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0720 	rsb	r7, r2, #32
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	fa20 f707 	lsr.w	r7, r0, r7
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	ea47 0803 	orr.w	r8, r7, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be0:	fa1f fc85 	uxth.w	ip, r5
 8000be4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bec:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfa:	f080 811b 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8118 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c04:	3f02      	subs	r7, #2
 8000c06:	442b      	add	r3, r5
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	192c      	adds	r4, r5, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c30:	3802      	subs	r0, #2
 8000c32:	442c      	add	r4, r5
 8000c34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c6 4300 	strd	r4, r3, [r6]
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xbe>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80eb 	beq.w	8000e2e <__udivmoddi4+0x286>
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f783 	clz	r7, r3
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	d147      	bne.n	8000cfe <__udivmoddi4+0x156>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd0>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fa 	bhi.w	8000e6c <__udivmoddi4+0x2c4>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xe8>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 808f 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c9a:	1b49      	subs	r1, r1, r5
 8000c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca0:	fa1f f885 	uxth.w	r8, r5
 8000ca4:	2701      	movs	r7, #1
 8000ca6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x14c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x14a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80b6 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e79f      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000d02:	40bb      	lsls	r3, r7
 8000d04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d22:	0c2c      	lsrs	r4, r5, #16
 8000d24:	fb08 3319 	mls	r3, r8, r9, r3
 8000d28:	fa1f fa8e 	uxth.w	sl, lr
 8000d2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d30:	fb09 f40a 	mul.w	r4, r9, sl
 8000d34:	429c      	cmp	r4, r3
 8000d36:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1e 0303 	adds.w	r3, lr, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	f080 8087 	bcs.w	8000e5a <__udivmoddi4+0x2b2>
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	f240 8084 	bls.w	8000e5a <__udivmoddi4+0x2b2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4473      	add	r3, lr
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1e 0404 	adds.w	r4, lr, r4
 8000d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d78:	d26b      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d969      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4474      	add	r4, lr
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c2      	mov	sl, r8
 8000d92:	464b      	mov	r3, r9
 8000d94:	d354      	bcc.n	8000e40 <__udivmoddi4+0x298>
 8000d96:	d051      	beq.n	8000e3c <__udivmoddi4+0x294>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d069      	beq.n	8000e70 <__udivmoddi4+0x2c8>
 8000d9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000da0:	eb64 0403 	sbc.w	r4, r4, r3
 8000da4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da8:	40fd      	lsrs	r5, r7
 8000daa:	40fc      	lsrs	r4, r7
 8000dac:	ea4c 0505 	orr.w	r5, ip, r5
 8000db0:	e9c6 5400 	strd	r5, r4, [r6]
 8000db4:	2700      	movs	r7, #0
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	4338      	orrs	r0, r7
 8000dd0:	0c01      	lsrs	r1, r0, #16
 8000dd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd6:	fa1f f885 	uxth.w	r8, r5
 8000dda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb07 f308 	mul.w	r3, r7, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x256>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df4:	d22f      	bcs.n	8000e56 <__udivmoddi4+0x2ae>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d92d      	bls.n	8000e56 <__udivmoddi4+0x2ae>
 8000dfa:	3f02      	subs	r7, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	b281      	uxth	r1, r0
 8000e02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb00 f308 	mul.w	r3, r0, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x27e>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1c:	d217      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d915      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e2c:	e73b      	b.n	8000ca6 <__udivmoddi4+0xfe>
 8000e2e:	4637      	mov	r7, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e709      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e34:	4607      	mov	r7, r0
 8000e36:	e6e7      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e3c:	4541      	cmp	r1, r8
 8000e3e:	d2ab      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 020e 	sbc.w	r2, r9, lr
 8000e48:	3801      	subs	r0, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7a4      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e4e:	4660      	mov	r0, ip
 8000e50:	e7e9      	b.n	8000e26 <__udivmoddi4+0x27e>
 8000e52:	4618      	mov	r0, r3
 8000e54:	e795      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e56:	4667      	mov	r7, ip
 8000e58:	e7d1      	b.n	8000dfe <__udivmoddi4+0x256>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e77c      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	442c      	add	r4, r5
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0x14c>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	442b      	add	r3, r5
 8000e6a:	e72f      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	e708      	b.n	8000c82 <__udivmoddi4+0xda>
 8000e70:	4637      	mov	r7, r6
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0xa0>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <CmdParserTask>:
/**
 * @brief  Command parser task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CmdParserTask(void const *argument){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

	//CASSERT(sizeof(IDN_STRING)<30); //IDN string is too long

	uint16_t message = 0xFFFF;
 8000e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e84:	82fb      	strh	r3, [r7, #22]
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8000e86:	2200      	movs	r2, #0
 8000e88:	2102      	movs	r1, #2
 8000e8a:	2020      	movs	r0, #32
 8000e8c:	f00a fb88 	bl	800b5a0 <xQueueGenericCreate>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <CmdParserTask+0x190>)
 8000e94:	601a      	str	r2, [r3, #0]
	uint8_t cmdIn[5];
	uint8_t chr;
	uint8_t byteRead;
	command tempCmd;
	while(1){
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <CmdParserTask+0x190>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f107 0116 	add.w	r1, r7, #22
 8000e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00a fe02 	bl	800baac <xQueueReceive>

		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8000ea8:	8afb      	ldrh	r3, [r7, #22]
 8000eaa:	2b31      	cmp	r3, #49	; 0x31
 8000eac:	d1f3      	bne.n	8000e96 <CmdParserTask+0x1e>
			do{
				cmdIn[0] = cmdIn[1];
 8000eae:	7c7b      	ldrb	r3, [r7, #17]
 8000eb0:	743b      	strb	r3, [r7, #16]
				cmdIn[1] = cmdIn[2];
 8000eb2:	7cbb      	ldrb	r3, [r7, #18]
 8000eb4:	747b      	strb	r3, [r7, #17]
				cmdIn[2] = cmdIn[3];
 8000eb6:	7cfb      	ldrb	r3, [r7, #19]
 8000eb8:	74bb      	strb	r3, [r7, #18]
				cmdIn[3] = chr;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	74fb      	strb	r3, [r7, #19]
				byteRead = commBufferReadByte(&chr);
 8000ebe:	f107 030f 	add.w	r3, r7, #15
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fc12 	bl	80026ec <commBufferReadByte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	77fb      	strb	r3, [r7, #31]
			}while(byteRead==0 && chr != ':' && chr != ';');
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <CmdParserTask+0x66>
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b3a      	cmp	r3, #58	; 0x3a
 8000ed6:	d002      	beq.n	8000ede <CmdParserTask+0x66>
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b3b      	cmp	r3, #59	; 0x3b
 8000edc:	d1e7      	bne.n	8000eae <CmdParserTask+0x36>

			uint16_t passMsg;

			if(byteRead==0){
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1d8      	bne.n	8000e96 <CmdParserTask+0x1e>
				switch (BUILD_CMD(cmdIn)){
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	061a      	lsls	r2, r3, #24
 8000ee8:	7cbb      	ldrb	r3, [r7, #18]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	431a      	orrs	r2, r3
 8000eee:	7c7b      	ldrb	r3, [r7, #17]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	7c3a      	ldrb	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	4a44      	ldr	r2, [pc, #272]	; (800100c <CmdParserTask+0x194>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d059      	beq.n	8000fb2 <CmdParserTask+0x13a>
 8000efe:	4a43      	ldr	r2, [pc, #268]	; (800100c <CmdParserTask+0x194>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	dc10      	bgt.n	8000f26 <CmdParserTask+0xae>
 8000f04:	4a42      	ldr	r2, [pc, #264]	; (8001010 <CmdParserTask+0x198>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01e      	beq.n	8000f48 <CmdParserTask+0xd0>
 8000f0a:	4a41      	ldr	r2, [pc, #260]	; (8001010 <CmdParserTask+0x198>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	dc03      	bgt.n	8000f18 <CmdParserTask+0xa0>
 8000f10:	4a40      	ldr	r2, [pc, #256]	; (8001014 <CmdParserTask+0x19c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d024      	beq.n	8000f60 <CmdParserTask+0xe8>
 8000f16:	e061      	b.n	8000fdc <CmdParserTask+0x164>
 8000f18:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <CmdParserTask+0x1a0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d023      	beq.n	8000f66 <CmdParserTask+0xee>
 8000f1e:	4a3f      	ldr	r2, [pc, #252]	; (800101c <CmdParserTask+0x1a4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d02c      	beq.n	8000f7e <CmdParserTask+0x106>
 8000f24:	e05a      	b.n	8000fdc <CmdParserTask+0x164>
 8000f26:	4a3e      	ldr	r2, [pc, #248]	; (8001020 <CmdParserTask+0x1a8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d03b      	beq.n	8000fa4 <CmdParserTask+0x12c>
 8000f2c:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <CmdParserTask+0x1a8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	dc03      	bgt.n	8000f3a <CmdParserTask+0xc2>
 8000f32:	4a3c      	ldr	r2, [pc, #240]	; (8001024 <CmdParserTask+0x1ac>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d04a      	beq.n	8000fce <CmdParserTask+0x156>
 8000f38:	e050      	b.n	8000fdc <CmdParserTask+0x164>
 8000f3a:	4a3b      	ldr	r2, [pc, #236]	; (8001028 <CmdParserTask+0x1b0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d02a      	beq.n	8000f96 <CmdParserTask+0x11e>
 8000f40:	4a3a      	ldr	r2, [pc, #232]	; (800102c <CmdParserTask+0x1b4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d03c      	beq.n	8000fc0 <CmdParserTask+0x148>
 8000f46:	e049      	b.n	8000fdc <CmdParserTask+0x164>
				case CMD_IDN: //send IDN
					passMsg = MSG_DEVICE_IDN;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <CmdParserTask+0x1b8>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	f107 010c 	add.w	r1, r7, #12
 8000f54:	2300      	movs	r3, #0
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	f00a fc19 	bl	800b790 <xQueueGenericSend>
					break;
 8000f5e:	e052      	b.n	8001006 <CmdParserTask+0x18e>
				case CMD_RESET_DEVICE:
					resetDevice();
 8000f60:	f00d fabc 	bl	800e4dc <resetDevice>
					break;
 8000f64:	e04f      	b.n	8001006 <CmdParserTask+0x18e>
				case CMD_VERSION:
					passMsg = MSG_SYSTEM_VERSION;
 8000f66:	2301      	movs	r3, #1
 8000f68:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <CmdParserTask+0x1b8>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f107 010c 	add.w	r1, r7, #12
 8000f72:	2300      	movs	r3, #0
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	f00a fc0a 	bl	800b790 <xQueueGenericSend>
					break;
 8000f7c:	e043      	b.n	8001006 <CmdParserTask+0x18e>
				case CMD_IS_SHIELD:
					passMsg = MSG_SHIELD_AVAIL;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <CmdParserTask+0x1b8>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	f107 010c 	add.w	r1, r7, #12
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	f00a fbfe 	bl	800b790 <xQueueGenericSend>
					break;
 8000f94:	e037      	b.n	8001006 <CmdParserTask+0x18e>
				case CMD_SYSTEM:
					tempCmd = parseSystemCmd();
 8000f96:	f000 f84f 	bl	8001038 <parseSystemCmd>
 8000f9a:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8000f9c:	69b8      	ldr	r0, [r7, #24]
 8000f9e:	f001 f865 	bl	800206c <printErrResponse>
					break;
 8000fa2:	e030      	b.n	8001006 <CmdParserTask+0x18e>
				case CMD_COMMS:
					tempCmd = parseCommsCmd();
 8000fa4:	f000 f880 	bl	80010a8 <parseCommsCmd>
 8000fa8:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	f001 f85e 	bl	800206c <printErrResponse>
					break;
 8000fb0:	e029      	b.n	8001006 <CmdParserTask+0x18e>
#ifdef USE_SCOPE
				case CMD_SCOPE: //parse scope command
					tempCmd = parseScopeCmd();
 8000fb2:	f000 f8b1 	bl	8001118 <parseScopeCmd>
 8000fb6:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8000fb8:	69b8      	ldr	r0, [r7, #24]
 8000fba:	f001 f857 	bl	800206c <printErrResponse>
					break;
 8000fbe:	e022      	b.n	8001006 <CmdParserTask+0x18e>
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
				case CMD_GENERATOR: //parse generator command
					tempCmd = parseGeneratorCmd();
 8000fc0:	f000 fdf6 	bl	8001bb0 <parseGeneratorCmd>
 8000fc4:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8000fc6:	69b8      	ldr	r0, [r7, #24]
 8000fc8:	f001 f850 	bl	800206c <printErrResponse>
					break;
 8000fcc:	e01b      	b.n	8001006 <CmdParserTask+0x18e>
					printErrResponse(tempCmd);
					break;
#endif //USE_COUNTER
#ifdef USE_SYNC_PWM
				case CMD_SYNC_PWM: //parse sync PWM command
					tempCmd = parseSyncPwmCmd();
 8000fce:	f000 fcc9 	bl	8001964 <parseSyncPwmCmd>
 8000fd2:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f001 f849 	bl	800206c <printErrResponse>
					break;
 8000fda:	e014      	b.n	8001006 <CmdParserTask+0x18e>
					tempCmd = parseLogAnlysCmd();
					printErrResponse(tempCmd);
					break;
#endif //USE_LOG_ANLYS
				default:
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <CmdParserTask+0x1b8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	4913      	ldr	r1, [pc, #76]	; (8001034 <CmdParserTask+0x1bc>)
 8000fe8:	f00a fbd2 	bl	800b790 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 8000fec:	bf00      	nop
 8000fee:	f107 030f 	add.w	r3, r7, #15
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fb7a 	bl	80026ec <commBufferReadByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f47f af4b 	bne.w	8000e96 <CmdParserTask+0x1e>
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b3b      	cmp	r3, #59	; 0x3b
 8001004:	d1f3      	bne.n	8000fee <CmdParserTask+0x176>
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8001006:	e746      	b.n	8000e96 <CmdParserTask+0x1e>
 8001008:	200047b0 	.word	0x200047b0
 800100c:	5043534f 	.word	0x5043534f
 8001010:	3f4e4449 	.word	0x3f4e4449
 8001014:	21534552 	.word	0x21534552
 8001018:	3f524556 	.word	0x3f524556
 800101c:	3f5f4853 	.word	0x3f5f4853
 8001020:	534d4f43 	.word	0x534d4f43
 8001024:	504e5953 	.word	0x504e5953
 8001028:	54535953 	.word	0x54535953
 800102c:	5f4e4547 	.word	0x5f4e4547
 8001030:	200047b4 	.word	0x200047b4
 8001034:	080111b0 	.word	0x080111b0

08001038 <parseSystemCmd>:
/**
 * @brief  System command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSystemCmd(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <parseSystemCmd+0x60>)
 8001040:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001042:	2300      	movs	r3, #0
 8001044:	70fb      	strb	r3, [r7, #3]
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001046:	f000 ffeb 	bl	8002020 <giveNextCmd>
 800104a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <parseSystemCmd+0x64>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d003      	beq.n	800105c <parseSystemCmd+0x24>
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <parseSystemCmd+0x68>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d010      	beq.n	800107c <parseSystemCmd+0x44>
 800105a:	e00a      	b.n	8001072 <parseSystemCmd+0x3a>
	uint16_t passMsg;
	case CMD_GET_CONFIG:
		passMsg = MSG_SYSTEM_CONFIG;
 800105c:	2302      	movs	r3, #2
 800105e:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <parseSystemCmd+0x6c>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	4639      	mov	r1, r7
 8001066:	2300      	movs	r3, #0
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	f00a fb90 	bl	800b790 <xQueueGenericSend>
		break;
 8001070:	e005      	b.n	800107e <parseSystemCmd+0x46>
	case CMD_END:break;
	default:
		error = SYSTEM_INVALID_FEATURE;
 8001072:	2301      	movs	r3, #1
 8001074:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <parseSystemCmd+0x60>)
 8001078:	607b      	str	r3, [r7, #4]
		break;
 800107a:	e000      	b.n	800107e <parseSystemCmd+0x46>
	case CMD_END:break;
 800107c:	bf00      	nop
	}
	if(error>0){
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <parseSystemCmd+0x52>
		cmdIn=error;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	e001      	b.n	800108e <parseSystemCmd+0x56>
	}else{
		cmdIn=CMD_END;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <parseSystemCmd+0x68>)
 800108c:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 800108e:	687b      	ldr	r3, [r7, #4]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	5f525245 	.word	0x5f525245
 800109c:	3f474643 	.word	0x3f474643
 80010a0:	5f444e45 	.word	0x5f444e45
 80010a4:	200047b4 	.word	0x200047b4

080010a8 <parseCommsCmd>:
/**
 * @brief  Communications command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseCommsCmd(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <parseCommsCmd+0x60>)
 80010b0:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 80010b6:	f000 ffb3 	bl	8002020 <giveNextCmd>
 80010ba:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <parseCommsCmd+0x64>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d003      	beq.n	80010cc <parseCommsCmd+0x24>
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <parseCommsCmd+0x68>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d010      	beq.n	80010ec <parseCommsCmd+0x44>
 80010ca:	e00a      	b.n	80010e2 <parseCommsCmd+0x3a>
	case CMD_GET_CONFIG:
		passMsg = MSG_COMMS_CONFIG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <parseCommsCmd+0x6c>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4639      	mov	r1, r7
 80010d6:	2300      	movs	r3, #0
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	f00a fb58 	bl	800b790 <xQueueGenericSend>
		break;
 80010e0:	e005      	b.n	80010ee <parseCommsCmd+0x46>
	case CMD_END:break;
	default:
		error = COMMS_INVALID_FEATURE;
 80010e2:	2302      	movs	r3, #2
 80010e4:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <parseCommsCmd+0x60>)
 80010e8:	607b      	str	r3, [r7, #4]
		break;
 80010ea:	e000      	b.n	80010ee <parseCommsCmd+0x46>
	case CMD_END:break;
 80010ec:	bf00      	nop
	}
	if(error>0){
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <parseCommsCmd+0x52>
		cmdIn=error;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e001      	b.n	80010fe <parseCommsCmd+0x56>
	}else{
		cmdIn=CMD_END;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <parseCommsCmd+0x68>)
 80010fc:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 80010fe:	687b      	ldr	r3, [r7, #4]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	5f525245 	.word	0x5f525245
 800110c:	3f474643 	.word	0x3f474643
 8001110:	5f444e45 	.word	0x5f444e45
 8001114:	200047b4 	.word	0x200047b4

08001118 <parseScopeCmd>:
 * @brief  Scope command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_SCOPE
command parseScopeCmd(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800111e:	4ba3      	ldr	r3, [pc, #652]	; (80013ac <parseScopeCmd+0x294>)
 8001120:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001122:	2300      	movs	r3, #0
 8001124:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001126:	f000 ff7b 	bl	8002020 <giveNextCmd>
 800112a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4aa0      	ldr	r2, [pc, #640]	; (80013b0 <parseScopeCmd+0x298>)
 8001130:	4293      	cmp	r3, r2
 8001132:	f000 80f9 	beq.w	8001328 <parseScopeCmd+0x210>
 8001136:	4a9e      	ldr	r2, [pc, #632]	; (80013b0 <parseScopeCmd+0x298>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d827      	bhi.n	800118c <parseScopeCmd+0x74>
 800113c:	4a9d      	ldr	r2, [pc, #628]	; (80013b4 <parseScopeCmd+0x29c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	f000 808e 	beq.w	8001260 <parseScopeCmd+0x148>
 8001144:	4a9b      	ldr	r2, [pc, #620]	; (80013b4 <parseScopeCmd+0x29c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d80c      	bhi.n	8001164 <parseScopeCmd+0x4c>
 800114a:	4a9b      	ldr	r2, [pc, #620]	; (80013b8 <parseScopeCmd+0x2a0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f000 83ca 	beq.w	80018e6 <parseScopeCmd+0x7ce>
 8001152:	4a9a      	ldr	r2, [pc, #616]	; (80013bc <parseScopeCmd+0x2a4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	f000 819b 	beq.w	8001490 <parseScopeCmd+0x378>
 800115a:	4a99      	ldr	r2, [pc, #612]	; (80013c0 <parseScopeCmd+0x2a8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f000 83b7 	beq.w	80018d0 <parseScopeCmd+0x7b8>
 8001162:	e3cb      	b.n	80018fc <parseScopeCmd+0x7e4>
 8001164:	4a97      	ldr	r2, [pc, #604]	; (80013c4 <parseScopeCmd+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f000 8187 	beq.w	800147a <parseScopeCmd+0x362>
 800116c:	4a95      	ldr	r2, [pc, #596]	; (80013c4 <parseScopeCmd+0x2ac>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d804      	bhi.n	800117c <parseScopeCmd+0x64>
 8001172:	4a95      	ldr	r2, [pc, #596]	; (80013c8 <parseScopeCmd+0x2b0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f000 8175 	beq.w	8001464 <parseScopeCmd+0x34c>
 800117a:	e3bf      	b.n	80018fc <parseScopeCmd+0x7e4>
 800117c:	4a93      	ldr	r2, [pc, #588]	; (80013cc <parseScopeCmd+0x2b4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d034      	beq.n	80011ec <parseScopeCmd+0xd4>
 8001182:	4a93      	ldr	r2, [pc, #588]	; (80013d0 <parseScopeCmd+0x2b8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f000 82fd 	beq.w	8001784 <parseScopeCmd+0x66c>
 800118a:	e3b7      	b.n	80018fc <parseScopeCmd+0x7e4>
 800118c:	4a91      	ldr	r2, [pc, #580]	; (80013d4 <parseScopeCmd+0x2bc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f000 81c0 	beq.w	8001514 <parseScopeCmd+0x3fc>
 8001194:	4a8f      	ldr	r2, [pc, #572]	; (80013d4 <parseScopeCmd+0x2bc>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d813      	bhi.n	80011c2 <parseScopeCmd+0xaa>
 800119a:	4a8f      	ldr	r2, [pc, #572]	; (80013d8 <parseScopeCmd+0x2c0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f000 82c5 	beq.w	800172c <parseScopeCmd+0x614>
 80011a2:	4a8d      	ldr	r2, [pc, #564]	; (80013d8 <parseScopeCmd+0x2c0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d804      	bhi.n	80011b2 <parseScopeCmd+0x9a>
 80011a8:	4a8c      	ldr	r2, [pc, #560]	; (80013dc <parseScopeCmd+0x2c4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f000 8138 	beq.w	8001420 <parseScopeCmd+0x308>
 80011b0:	e3a4      	b.n	80018fc <parseScopeCmd+0x7e4>
 80011b2:	4a8b      	ldr	r2, [pc, #556]	; (80013e0 <parseScopeCmd+0x2c8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d075      	beq.n	80012a4 <parseScopeCmd+0x18c>
 80011b8:	4a8a      	ldr	r2, [pc, #552]	; (80013e4 <parseScopeCmd+0x2cc>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f000 8382 	beq.w	80018c4 <parseScopeCmd+0x7ac>
 80011c0:	e39c      	b.n	80018fc <parseScopeCmd+0x7e4>
 80011c2:	4a89      	ldr	r2, [pc, #548]	; (80013e8 <parseScopeCmd+0x2d0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	f000 837a 	beq.w	80018be <parseScopeCmd+0x7a6>
 80011ca:	4a87      	ldr	r2, [pc, #540]	; (80013e8 <parseScopeCmd+0x2d0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d804      	bhi.n	80011da <parseScopeCmd+0xc2>
 80011d0:	4a86      	ldr	r2, [pc, #536]	; (80013ec <parseScopeCmd+0x2d4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	f000 82c0 	beq.w	8001758 <parseScopeCmd+0x640>
 80011d8:	e390      	b.n	80018fc <parseScopeCmd+0x7e4>
 80011da:	4a85      	ldr	r2, [pc, #532]	; (80013f0 <parseScopeCmd+0x2d8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	f000 8374 	beq.w	80018ca <parseScopeCmd+0x7b2>
 80011e2:	4a84      	ldr	r2, [pc, #528]	; (80013f4 <parseScopeCmd+0x2dc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	f000 838e 	beq.w	8001906 <parseScopeCmd+0x7ee>
 80011ea:	e387      	b.n	80018fc <parseScopeCmd+0x7e4>
	case CMD_SCOPE_TRIG_MODE://set trigger mode
		cmdIn = giveNextCmd();
 80011ec:	f000 ff18 	bl	8002020 <giveNextCmd>
 80011f0:	6078      	str	r0, [r7, #4]
		if(isScopeTrigMode(cmdIn)){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a80      	ldr	r2, [pc, #512]	; (80013f8 <parseScopeCmd+0x2e0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00b      	beq.n	8001212 <parseScopeCmd+0xfa>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a7f      	ldr	r2, [pc, #508]	; (80013fc <parseScopeCmd+0x2e4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <parseScopeCmd+0xfa>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a7e      	ldr	r2, [pc, #504]	; (8001400 <parseScopeCmd+0x2e8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d003      	beq.n	8001212 <parseScopeCmd+0xfa>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a7d      	ldr	r2, [pc, #500]	; (8001404 <parseScopeCmd+0x2ec>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11f      	bne.n	8001252 <parseScopeCmd+0x13a>
			if(cmdIn == CMD_MODE_NORMAL){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a78      	ldr	r2, [pc, #480]	; (80013f8 <parseScopeCmd+0x2e0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d103      	bne.n	8001222 <parseScopeCmd+0x10a>
				scopeSetTriggerMode(TRIG_NORMAL);
 800121a:	2000      	movs	r0, #0
 800121c:	f002 fe94 	bl	8003f48 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001220:	e01c      	b.n	800125c <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a75      	ldr	r2, [pc, #468]	; (80013fc <parseScopeCmd+0x2e4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d103      	bne.n	8001232 <parseScopeCmd+0x11a>
				scopeSetTriggerMode(TRIG_AUTO);
 800122a:	2001      	movs	r0, #1
 800122c:	f002 fe8c 	bl	8003f48 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001230:	e014      	b.n	800125c <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO_FAST){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a72      	ldr	r2, [pc, #456]	; (8001400 <parseScopeCmd+0x2e8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d103      	bne.n	8001242 <parseScopeCmd+0x12a>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 800123a:	2002      	movs	r0, #2
 800123c:	f002 fe84 	bl	8003f48 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001240:	e00c      	b.n	800125c <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_SINGLE){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a6f      	ldr	r2, [pc, #444]	; (8001404 <parseScopeCmd+0x2ec>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d108      	bne.n	800125c <parseScopeCmd+0x144>
				scopeSetTriggerMode(TRIG_SINGLE);
 800124a:	2003      	movs	r0, #3
 800124c:	f002 fe7c 	bl	8003f48 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001250:	e004      	b.n	800125c <parseScopeCmd+0x144>
			}
		}else{
			cmdIn = CMD_ERR;
 8001252:	4b56      	ldr	r3, [pc, #344]	; (80013ac <parseScopeCmd+0x294>)
 8001254:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001256:	2336      	movs	r3, #54	; 0x36
 8001258:	70fb      	strb	r3, [r7, #3]
		}
		break;
 800125a:	e359      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_MODE_NORMAL){
 800125c:	bf00      	nop
		break;
 800125e:	e357      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_EDGE: //set trigger edge
		cmdIn = giveNextCmd();
 8001260:	f000 fede 	bl	8002020 <giveNextCmd>
 8001264:	6078      	str	r0, [r7, #4]
		if(isScopeTrigEdge(cmdIn)){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a67      	ldr	r2, [pc, #412]	; (8001408 <parseScopeCmd+0x2f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d003      	beq.n	8001276 <parseScopeCmd+0x15e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a66      	ldr	r2, [pc, #408]	; (800140c <parseScopeCmd+0x2f4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10f      	bne.n	8001296 <parseScopeCmd+0x17e>
			if(cmdIn == CMD_EDGE_RISING){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a63      	ldr	r2, [pc, #396]	; (8001408 <parseScopeCmd+0x2f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d103      	bne.n	8001286 <parseScopeCmd+0x16e>
				scopeSetTriggerEdge(EDGE_RISING);
 800127e:	2000      	movs	r0, #0
 8001280:	f002 fe7e 	bl	8003f80 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 8001284:	e00c      	b.n	80012a0 <parseScopeCmd+0x188>
			}else if(cmdIn == CMD_EDGE_FALLING){
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <parseScopeCmd+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d108      	bne.n	80012a0 <parseScopeCmd+0x188>
				scopeSetTriggerEdge(EDGE_FALLING);
 800128e:	2001      	movs	r0, #1
 8001290:	f002 fe76 	bl	8003f80 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 8001294:	e004      	b.n	80012a0 <parseScopeCmd+0x188>
			}
		}else{
			cmdIn = CMD_ERR;
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <parseScopeCmd+0x294>)
 8001298:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800129a:	2336      	movs	r3, #54	; 0x36
 800129c:	70fb      	strb	r3, [r7, #3]
		}
		break;
 800129e:	e337      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_EDGE_RISING){
 80012a0:	bf00      	nop
		break;
 80012a2:	e335      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 80012a4:	f000 febc 	bl	8002020 <giveNextCmd>
 80012a8:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <parseScopeCmd+0x2f8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00b      	beq.n	80012ca <parseScopeCmd+0x1b2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <parseScopeCmd+0x2fc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <parseScopeCmd+0x1b2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a56      	ldr	r2, [pc, #344]	; (8001418 <parseScopeCmd+0x300>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d003      	beq.n	80012ca <parseScopeCmd+0x1b2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a55      	ldr	r2, [pc, #340]	; (800141c <parseScopeCmd+0x304>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d127      	bne.n	800131a <parseScopeCmd+0x202>
			if(cmdIn == CMD_CHANNELS_1){
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <parseScopeCmd+0x2f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d105      	bne.n	80012de <parseScopeCmd+0x1c6>
				error=scopeSetNumOfChannels(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f002 ffb6 	bl	8004244 <scopeSetNumOfChannels>
 80012d8:	4603      	mov	r3, r0
 80012da:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80012dc:	e022      	b.n	8001324 <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_2){
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <parseScopeCmd+0x2fc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d105      	bne.n	80012f2 <parseScopeCmd+0x1da>
				error=scopeSetNumOfChannels(2);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f002 ffac 	bl	8004244 <scopeSetNumOfChannels>
 80012ec:	4603      	mov	r3, r0
 80012ee:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80012f0:	e018      	b.n	8001324 <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_3){
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <parseScopeCmd+0x300>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d105      	bne.n	8001306 <parseScopeCmd+0x1ee>
				error=scopeSetNumOfChannels(3);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f002 ffa2 	bl	8004244 <scopeSetNumOfChannels>
 8001300:	4603      	mov	r3, r0
 8001302:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001304:	e00e      	b.n	8001324 <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_4){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a44      	ldr	r2, [pc, #272]	; (800141c <parseScopeCmd+0x304>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10a      	bne.n	8001324 <parseScopeCmd+0x20c>
				error=scopeSetNumOfChannels(4);
 800130e:	2004      	movs	r0, #4
 8001310:	f002 ff98 	bl	8004244 <scopeSetNumOfChannels>
 8001314:	4603      	mov	r3, r0
 8001316:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001318:	e004      	b.n	8001324 <parseScopeCmd+0x20c>
			}
		}else{
			cmdIn = CMD_ERR;
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <parseScopeCmd+0x294>)
 800131c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800131e:	2336      	movs	r3, #54	; 0x36
 8001320:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001322:	e2f5      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 8001324:	bf00      	nop
		break;
 8001326:	e2f3      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_CHANNEL: //set trigger channel
		cmdIn = giveNextCmd();
 8001328:	f000 fe7a 	bl	8002020 <giveNextCmd>
 800132c:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a37      	ldr	r2, [pc, #220]	; (8001410 <parseScopeCmd+0x2f8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00b      	beq.n	800134e <parseScopeCmd+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a36      	ldr	r2, [pc, #216]	; (8001414 <parseScopeCmd+0x2fc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <parseScopeCmd+0x236>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a35      	ldr	r2, [pc, #212]	; (8001418 <parseScopeCmd+0x300>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d003      	beq.n	800134e <parseScopeCmd+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a34      	ldr	r2, [pc, #208]	; (800141c <parseScopeCmd+0x304>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d127      	bne.n	800139e <parseScopeCmd+0x286>
			if(cmdIn == CMD_CHANNELS_1){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <parseScopeCmd+0x2f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d105      	bne.n	8001362 <parseScopeCmd+0x24a>
				error=scopeSetTrigChannel(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f003 f830 	bl	80043bc <scopeSetTrigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001360:	e022      	b.n	80013a8 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <parseScopeCmd+0x2fc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d105      	bne.n	8001376 <parseScopeCmd+0x25e>
				error=scopeSetTrigChannel(2);
 800136a:	2002      	movs	r0, #2
 800136c:	f003 f826 	bl	80043bc <scopeSetTrigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001374:	e018      	b.n	80013a8 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <parseScopeCmd+0x300>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d105      	bne.n	800138a <parseScopeCmd+0x272>
				error=scopeSetTrigChannel(3);
 800137e:	2003      	movs	r0, #3
 8001380:	f003 f81c 	bl	80043bc <scopeSetTrigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001388:	e00e      	b.n	80013a8 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_4){
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a23      	ldr	r2, [pc, #140]	; (800141c <parseScopeCmd+0x304>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10a      	bne.n	80013a8 <parseScopeCmd+0x290>
				error=scopeSetTrigChannel(4);
 8001392:	2004      	movs	r0, #4
 8001394:	f003 f812 	bl	80043bc <scopeSetTrigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 800139c:	e004      	b.n	80013a8 <parseScopeCmd+0x290>
			}
		}else{
			cmdIn = CMD_ERR;
 800139e:	4b03      	ldr	r3, [pc, #12]	; (80013ac <parseScopeCmd+0x294>)
 80013a0:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80013a2:	2336      	movs	r3, #54	; 0x36
 80013a4:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80013a6:	e2b3      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 80013a8:	bf00      	nop
		break;
 80013aa:	e2b1      	b.n	8001910 <parseScopeCmd+0x7f8>
 80013ac:	5f525245 	.word	0x5f525245
 80013b0:	48435254 	.word	0x48435254
 80013b4:	45474445 	.word	0x45474445
 80013b8:	3f504e49 	.word	0x3f504e49
 80013bc:	41544144 	.word	0x41544144
 80013c0:	3f474643 	.word	0x3f474643
 80013c4:	46455241 	.word	0x46455241
 80013c8:	46454441 	.word	0x46454441
 80013cc:	47495254 	.word	0x47495254
 80013d0:	474e454c 	.word	0x474e454c
 80013d4:	51455246 	.word	0x51455246
 80013d8:	4c56454c 	.word	0x4c56454c
 80013dc:	48435f41 	.word	0x48435f41
 80013e0:	4e414843 	.word	0x4e414843
 80013e4:	504f5453 	.word	0x504f5453
 80013e8:	54525453 	.word	0x54525453
 80013ec:	54455250 	.word	0x54455250
 80013f0:	5458454e 	.word	0x5458454e
 80013f4:	5f444e45 	.word	0x5f444e45
 80013f8:	4d524f4e 	.word	0x4d524f4e
 80013fc:	4f545541 	.word	0x4f545541
 8001400:	5f415f46 	.word	0x5f415f46
 8001404:	474e4953 	.word	0x474e4953
 8001408:	45534952 	.word	0x45534952
 800140c:	4c4c4146 	.word	0x4c4c4146
 8001410:	5f484331 	.word	0x5f484331
 8001414:	5f484332 	.word	0x5f484332
 8001418:	5f484333 	.word	0x5f484333
 800141c:	5f484334 	.word	0x5f484334

	case CMD_SCOPE_ADC_CHANNEL_SET: //set actual ADC channel
		cmdIn = giveNextCmd();
 8001420:	f000 fdfe 	bl	8002020 <giveNextCmd>
 8001424:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4aa5      	ldr	r2, [pc, #660]	; (80016c0 <parseScopeCmd+0x5a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d014      	beq.n	8001458 <parseScopeCmd+0x340>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4aa4      	ldr	r2, [pc, #656]	; (80016c4 <parseScopeCmd+0x5ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d010      	beq.n	8001458 <parseScopeCmd+0x340>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b2db      	uxtb	r3, r3
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fff8 	bl	8004438 <scopeSetADCInputChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	70fb      	strb	r3, [r7, #3]
			if(error!=0){
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <parseScopeCmd+0x34a>
				cmdIn = CMD_ERR;
 8001452:	4b9c      	ldr	r3, [pc, #624]	; (80016c4 <parseScopeCmd+0x5ac>)
 8001454:	607b      	str	r3, [r7, #4]
			if(error!=0){
 8001456:	e004      	b.n	8001462 <parseScopeCmd+0x34a>
			}
		}else{
			cmdIn = CMD_ERR;
 8001458:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <parseScopeCmd+0x5ac>)
 800145a:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800145c:	2336      	movs	r3, #54	; 0x36
 800145e:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001460:	e256      	b.n	8001910 <parseScopeCmd+0x7f8>
 8001462:	e255      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_ADC_CHANNEL_SET_DEFAULT: //set actual ADC channel for default
		error=scopeSetADCInputChannelDefault();
 8001464:	f003 f834 	bl	80044d0 <scopeSetADCInputChannelDefault>
 8001468:	4603      	mov	r3, r0
 800146a:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 824b 	beq.w	800190a <parseScopeCmd+0x7f2>
			cmdIn = CMD_ERR;
 8001474:	4b93      	ldr	r3, [pc, #588]	; (80016c4 <parseScopeCmd+0x5ac>)
 8001476:	607b      	str	r3, [r7, #4]
		}

		break;
 8001478:	e247      	b.n	800190a <parseScopeCmd+0x7f2>

	case CMD_SCOPE_ADC_CHANNEL_SET_VREF: //set actual ADC channel for Vref
		error=scopeSetADCInputChannelVref();
 800147a:	f003 f875 	bl	8004568 <scopeSetADCInputChannelVref>
 800147e:	4603      	mov	r3, r0
 8001480:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8242 	beq.w	800190e <parseScopeCmd+0x7f6>
			cmdIn = CMD_ERR;
 800148a:	4b8e      	ldr	r3, [pc, #568]	; (80016c4 <parseScopeCmd+0x5ac>)
 800148c:	607b      	str	r3, [r7, #4]
		}
		break;
 800148e:	e23e      	b.n	800190e <parseScopeCmd+0x7f6>


	case CMD_SCOPE_DATA_DEPTH: //set data bit depth
		cmdIn = giveNextCmd();
 8001490:	f000 fdc6 	bl	8002020 <giveNextCmd>
 8001494:	6078      	str	r0, [r7, #4]
		if(isScopeDataDepth(cmdIn)){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a8b      	ldr	r2, [pc, #556]	; (80016c8 <parseScopeCmd+0x5b0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00b      	beq.n	80014b6 <parseScopeCmd+0x39e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a8a      	ldr	r2, [pc, #552]	; (80016cc <parseScopeCmd+0x5b4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <parseScopeCmd+0x39e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a89      	ldr	r2, [pc, #548]	; (80016d0 <parseScopeCmd+0x5b8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d003      	beq.n	80014b6 <parseScopeCmd+0x39e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a88      	ldr	r2, [pc, #544]	; (80016d4 <parseScopeCmd+0x5bc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d127      	bne.n	8001506 <parseScopeCmd+0x3ee>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <parseScopeCmd+0x5b0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d105      	bne.n	80014ca <parseScopeCmd+0x3b2>
				error=scopeSetDataDepth(12);
 80014be:	200c      	movs	r0, #12
 80014c0:	f002 fd8a 	bl	8003fd8 <scopeSetDataDepth>
 80014c4:	4603      	mov	r3, r0
 80014c6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 80014c8:	e022      	b.n	8001510 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_10B){
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a7f      	ldr	r2, [pc, #508]	; (80016cc <parseScopeCmd+0x5b4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d105      	bne.n	80014de <parseScopeCmd+0x3c6>
				error=scopeSetDataDepth(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f002 fd80 	bl	8003fd8 <scopeSetDataDepth>
 80014d8:	4603      	mov	r3, r0
 80014da:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 80014dc:	e018      	b.n	8001510 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_8B){
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a7b      	ldr	r2, [pc, #492]	; (80016d0 <parseScopeCmd+0x5b8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d105      	bne.n	80014f2 <parseScopeCmd+0x3da>
				error=scopeSetDataDepth(8);
 80014e6:	2008      	movs	r0, #8
 80014e8:	f002 fd76 	bl	8003fd8 <scopeSetDataDepth>
 80014ec:	4603      	mov	r3, r0
 80014ee:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 80014f0:	e00e      	b.n	8001510 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_6B){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <parseScopeCmd+0x5bc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10a      	bne.n	8001510 <parseScopeCmd+0x3f8>
				error=scopeSetDataDepth(6);
 80014fa:	2006      	movs	r0, #6
 80014fc:	f002 fd6c 	bl	8003fd8 <scopeSetDataDepth>
 8001500:	4603      	mov	r3, r0
 8001502:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001504:	e004      	b.n	8001510 <parseScopeCmd+0x3f8>
			}
		}else{
			cmdIn = CMD_ERR;
 8001506:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <parseScopeCmd+0x5ac>)
 8001508:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800150a:	2336      	movs	r3, #54	; 0x36
 800150c:	70fb      	strb	r3, [r7, #3]
		}
		break;
 800150e:	e1ff      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001510:	bf00      	nop
		break;
 8001512:	e1fd      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_SAMPLING_FREQ: //set sampling frequency
		cmdIn = giveNextCmd();
 8001514:	f000 fd84 	bl	8002020 <giveNextCmd>
 8001518:	6078      	str	r0, [r7, #4]

		if(isScopeFreq(cmdIn)){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <parseScopeCmd+0x5c0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d034      	beq.n	800158c <parseScopeCmd+0x474>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a6d      	ldr	r2, [pc, #436]	; (80016dc <parseScopeCmd+0x5c4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d030      	beq.n	800158c <parseScopeCmd+0x474>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a6c      	ldr	r2, [pc, #432]	; (80016e0 <parseScopeCmd+0x5c8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02c      	beq.n	800158c <parseScopeCmd+0x474>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a6b      	ldr	r2, [pc, #428]	; (80016e4 <parseScopeCmd+0x5cc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d028      	beq.n	800158c <parseScopeCmd+0x474>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <parseScopeCmd+0x5d0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d024      	beq.n	800158c <parseScopeCmd+0x474>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a69      	ldr	r2, [pc, #420]	; (80016ec <parseScopeCmd+0x5d4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d020      	beq.n	800158c <parseScopeCmd+0x474>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <parseScopeCmd+0x5d8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01c      	beq.n	800158c <parseScopeCmd+0x474>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a67      	ldr	r2, [pc, #412]	; (80016f4 <parseScopeCmd+0x5dc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d018      	beq.n	800158c <parseScopeCmd+0x474>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <parseScopeCmd+0x5e0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d014      	beq.n	800158c <parseScopeCmd+0x474>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a65      	ldr	r2, [pc, #404]	; (80016fc <parseScopeCmd+0x5e4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d010      	beq.n	800158c <parseScopeCmd+0x474>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a64      	ldr	r2, [pc, #400]	; (8001700 <parseScopeCmd+0x5e8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00c      	beq.n	800158c <parseScopeCmd+0x474>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a63      	ldr	r2, [pc, #396]	; (8001704 <parseScopeCmd+0x5ec>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d008      	beq.n	800158c <parseScopeCmd+0x474>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a62      	ldr	r2, [pc, #392]	; (8001708 <parseScopeCmd+0x5f0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d004      	beq.n	800158c <parseScopeCmd+0x474>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a61      	ldr	r2, [pc, #388]	; (800170c <parseScopeCmd+0x5f4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	f040 8093 	bne.w	80016b2 <parseScopeCmd+0x59a>
			if(cmdIn == CMD_FREQ_1K){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <parseScopeCmd+0x5c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d106      	bne.n	80015a2 <parseScopeCmd+0x48a>
				error=scopeSetSamplingFreq(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f002 fd90 	bl	80040bc <scopeSetSamplingFreq>
 800159c:	4603      	mov	r3, r0
 800159e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80015a0:	e08c      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2K){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <parseScopeCmd+0x5c4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d106      	bne.n	80015b8 <parseScopeCmd+0x4a0>
				error=scopeSetSamplingFreq(2000);
 80015aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ae:	f002 fd85 	bl	80040bc <scopeSetSamplingFreq>
 80015b2:	4603      	mov	r3, r0
 80015b4:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80015b6:	e081      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5K){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <parseScopeCmd+0x5c8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d106      	bne.n	80015ce <parseScopeCmd+0x4b6>
				error=scopeSetSamplingFreq(5000);
 80015c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80015c4:	f002 fd7a 	bl	80040bc <scopeSetSamplingFreq>
 80015c8:	4603      	mov	r3, r0
 80015ca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80015cc:	e076      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10K){
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <parseScopeCmd+0x5cc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d106      	bne.n	80015e4 <parseScopeCmd+0x4cc>
				//error=scopeSetADCInputChannelDefault(); //workaround - PC app don't return ADc channels from Vref back to pins when leaving the Voltmeter mode
				error=scopeSetSamplingFreq(10000);
 80015d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80015da:	f002 fd6f 	bl	80040bc <scopeSetSamplingFreq>
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80015e2:	e06b      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_20K){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <parseScopeCmd+0x5d0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d106      	bne.n	80015fa <parseScopeCmd+0x4e2>
				error=scopeSetSamplingFreq(20000);
 80015ec:	f644 6020 	movw	r0, #20000	; 0x4e20
 80015f0:	f002 fd64 	bl	80040bc <scopeSetSamplingFreq>
 80015f4:	4603      	mov	r3, r0
 80015f6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80015f8:	e060      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_50K){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a3b      	ldr	r2, [pc, #236]	; (80016ec <parseScopeCmd+0x5d4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d106      	bne.n	8001610 <parseScopeCmd+0x4f8>
				error=scopeSetSamplingFreq(50000);
 8001602:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001606:	f002 fd59 	bl	80040bc <scopeSetSamplingFreq>
 800160a:	4603      	mov	r3, r0
 800160c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 800160e:	e055      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_100K){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <parseScopeCmd+0x5d8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d105      	bne.n	8001624 <parseScopeCmd+0x50c>
				error=scopeSetSamplingFreq(100000);
 8001618:	483d      	ldr	r0, [pc, #244]	; (8001710 <parseScopeCmd+0x5f8>)
 800161a:	f002 fd4f 	bl	80040bc <scopeSetSamplingFreq>
 800161e:	4603      	mov	r3, r0
 8001620:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001622:	e04b      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_200K){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <parseScopeCmd+0x5dc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d105      	bne.n	8001638 <parseScopeCmd+0x520>
				error=scopeSetSamplingFreq(200000);
 800162c:	4839      	ldr	r0, [pc, #228]	; (8001714 <parseScopeCmd+0x5fc>)
 800162e:	f002 fd45 	bl	80040bc <scopeSetSamplingFreq>
 8001632:	4603      	mov	r3, r0
 8001634:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001636:	e041      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_500K){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <parseScopeCmd+0x5e0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d105      	bne.n	800164c <parseScopeCmd+0x534>
				error=scopeSetSamplingFreq(500000);
 8001640:	4835      	ldr	r0, [pc, #212]	; (8001718 <parseScopeCmd+0x600>)
 8001642:	f002 fd3b 	bl	80040bc <scopeSetSamplingFreq>
 8001646:	4603      	mov	r3, r0
 8001648:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 800164a:	e037      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_1M){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <parseScopeCmd+0x5e4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d105      	bne.n	8001660 <parseScopeCmd+0x548>
				error=scopeSetSamplingFreq(1000000);
 8001654:	4831      	ldr	r0, [pc, #196]	; (800171c <parseScopeCmd+0x604>)
 8001656:	f002 fd31 	bl	80040bc <scopeSetSamplingFreq>
 800165a:	4603      	mov	r3, r0
 800165c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 800165e:	e02d      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2M){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <parseScopeCmd+0x5e8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d105      	bne.n	8001674 <parseScopeCmd+0x55c>
				error=scopeSetSamplingFreq(2000000);
 8001668:	482d      	ldr	r0, [pc, #180]	; (8001720 <parseScopeCmd+0x608>)
 800166a:	f002 fd27 	bl	80040bc <scopeSetSamplingFreq>
 800166e:	4603      	mov	r3, r0
 8001670:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001672:	e023      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5M){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <parseScopeCmd+0x5ec>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d105      	bne.n	8001688 <parseScopeCmd+0x570>
				error=scopeSetSamplingFreq(5000000);
 800167c:	4829      	ldr	r0, [pc, #164]	; (8001724 <parseScopeCmd+0x60c>)
 800167e:	f002 fd1d 	bl	80040bc <scopeSetSamplingFreq>
 8001682:	4603      	mov	r3, r0
 8001684:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001686:	e019      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10M){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <parseScopeCmd+0x5f0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d105      	bne.n	800169c <parseScopeCmd+0x584>
				error=scopeSetSamplingFreq(10000000);
 8001690:	4825      	ldr	r0, [pc, #148]	; (8001728 <parseScopeCmd+0x610>)
 8001692:	f002 fd13 	bl	80040bc <scopeSetSamplingFreq>
 8001696:	4603      	mov	r3, r0
 8001698:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 800169a:	e00f      	b.n	80016bc <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_MAX){
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a1b      	ldr	r2, [pc, #108]	; (800170c <parseScopeCmd+0x5f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10b      	bne.n	80016bc <parseScopeCmd+0x5a4>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f002 fd08 	bl	80040bc <scopeSetSamplingFreq>
 80016ac:	4603      	mov	r3, r0
 80016ae:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 80016b0:	e004      	b.n	80016bc <parseScopeCmd+0x5a4>
			}

		}else{
			cmdIn = CMD_ERR;
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <parseScopeCmd+0x5ac>)
 80016b4:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80016b6:	2336      	movs	r3, #54	; 0x36
 80016b8:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80016ba:	e129      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_FREQ_1K){
 80016bc:	bf00      	nop
		break;
 80016be:	e127      	b.n	8001910 <parseScopeCmd+0x7f8>
 80016c0:	5f444e45 	.word	0x5f444e45
 80016c4:	5f525245 	.word	0x5f525245
 80016c8:	5f423231 	.word	0x5f423231
 80016cc:	5f423031 	.word	0x5f423031
 80016d0:	5f5f4238 	.word	0x5f5f4238
 80016d4:	5f5f4236 	.word	0x5f5f4236
 80016d8:	5f5f4b31 	.word	0x5f5f4b31
 80016dc:	5f5f4b32 	.word	0x5f5f4b32
 80016e0:	5f5f4b35 	.word	0x5f5f4b35
 80016e4:	5f4b3031 	.word	0x5f4b3031
 80016e8:	5f4b3032 	.word	0x5f4b3032
 80016ec:	5f4b3035 	.word	0x5f4b3035
 80016f0:	4b303031 	.word	0x4b303031
 80016f4:	4b303032 	.word	0x4b303032
 80016f8:	4b303035 	.word	0x4b303035
 80016fc:	5f5f4d31 	.word	0x5f5f4d31
 8001700:	5f5f4d32 	.word	0x5f5f4d32
 8001704:	5f5f4d35 	.word	0x5f5f4d35
 8001708:	5f4d3031 	.word	0x5f4d3031
 800170c:	5f58414d 	.word	0x5f58414d
 8001710:	000186a0 	.word	0x000186a0
 8001714:	00030d40 	.word	0x00030d40
 8001718:	0007a120 	.word	0x0007a120
 800171c:	000f4240 	.word	0x000f4240
 8001720:	001e8480 	.word	0x001e8480
 8001724:	004c4b40 	.word	0x004c4b40
 8001728:	00989680 	.word	0x00989680

	case CMD_SCOPE_TRIG_LEVEL: //set trigger level
		cmdIn = giveNextCmd();
 800172c:	f000 fc78 	bl	8002020 <giveNextCmd>
 8001730:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a7d      	ldr	r2, [pc, #500]	; (800192c <parseScopeCmd+0x814>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d009      	beq.n	800174e <parseScopeCmd+0x636>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a7c      	ldr	r2, [pc, #496]	; (8001930 <parseScopeCmd+0x818>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d005      	beq.n	800174e <parseScopeCmd+0x636>
			scopeSetTrigLevel((uint16_t)cmdIn);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fd0e 	bl	8004168 <scopeSetTrigLevel>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 800174c:	e0e0      	b.n	8001910 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 800174e:	4b78      	ldr	r3, [pc, #480]	; (8001930 <parseScopeCmd+0x818>)
 8001750:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001752:	2336      	movs	r3, #54	; 0x36
 8001754:	70fb      	strb	r3, [r7, #3]
		break;
 8001756:	e0db      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_PRETRIGGER: //set prettriger
		cmdIn = giveNextCmd();
 8001758:	f000 fc62 	bl	8002020 <giveNextCmd>
 800175c:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a72      	ldr	r2, [pc, #456]	; (800192c <parseScopeCmd+0x814>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d009      	beq.n	800177a <parseScopeCmd+0x662>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a71      	ldr	r2, [pc, #452]	; (8001930 <parseScopeCmd+0x818>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d005      	beq.n	800177a <parseScopeCmd+0x662>
			scopeSetPretrigger((uint16_t)cmdIn);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fd14 	bl	80041a0 <scopeSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001778:	e0ca      	b.n	8001910 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 800177a:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <parseScopeCmd+0x818>)
 800177c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800177e:	2336      	movs	r3, #54	; 0x36
 8001780:	70fb      	strb	r3, [r7, #3]
		break;
 8001782:	e0c5      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_DATA_LENGTH: //set trigger edge
		cmdIn = giveNextCmd();
 8001784:	f000 fc4c 	bl	8002020 <giveNextCmd>
 8001788:	6078      	str	r0, [r7, #4]
		if(isScopeNumOfSamples(cmdIn)){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a69      	ldr	r2, [pc, #420]	; (8001934 <parseScopeCmd+0x81c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d023      	beq.n	80017da <parseScopeCmd+0x6c2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a68      	ldr	r2, [pc, #416]	; (8001938 <parseScopeCmd+0x820>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <parseScopeCmd+0x6c2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <parseScopeCmd+0x824>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01b      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a66      	ldr	r2, [pc, #408]	; (8001940 <parseScopeCmd+0x828>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d017      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <parseScopeCmd+0x82c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a64      	ldr	r2, [pc, #400]	; (8001948 <parseScopeCmd+0x830>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00f      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a63      	ldr	r2, [pc, #396]	; (800194c <parseScopeCmd+0x834>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00b      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a62      	ldr	r2, [pc, #392]	; (8001950 <parseScopeCmd+0x838>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a61      	ldr	r2, [pc, #388]	; (8001954 <parseScopeCmd+0x83c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d003      	beq.n	80017da <parseScopeCmd+0x6c2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <parseScopeCmd+0x840>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d16a      	bne.n	80018b0 <parseScopeCmd+0x798>
			if(cmdIn == CMD_SAMPLES_100){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a55      	ldr	r2, [pc, #340]	; (8001934 <parseScopeCmd+0x81c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d105      	bne.n	80017ee <parseScopeCmd+0x6d6>
				error=scopeSetNumOfSamples(100);
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f002 fcf8 	bl	80041d8 <scopeSetNumOfSamples>
 80017e8:	4603      	mov	r3, r0
 80017ea:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 80017ec:	e065      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_200){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	; (8001938 <parseScopeCmd+0x820>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d105      	bne.n	8001802 <parseScopeCmd+0x6ea>
				error=scopeSetNumOfSamples(200);
 80017f6:	20c8      	movs	r0, #200	; 0xc8
 80017f8:	f002 fcee 	bl	80041d8 <scopeSetNumOfSamples>
 80017fc:	4603      	mov	r3, r0
 80017fe:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001800:	e05b      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_500){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4d      	ldr	r2, [pc, #308]	; (800193c <parseScopeCmd+0x824>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d106      	bne.n	8001818 <parseScopeCmd+0x700>
				error=scopeSetNumOfSamples(500);
 800180a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180e:	f002 fce3 	bl	80041d8 <scopeSetNumOfSamples>
 8001812:	4603      	mov	r3, r0
 8001814:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001816:	e050      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_1K){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a49      	ldr	r2, [pc, #292]	; (8001940 <parseScopeCmd+0x828>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d106      	bne.n	800182e <parseScopeCmd+0x716>
				error=scopeSetNumOfSamples(1000);
 8001820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001824:	f002 fcd8 	bl	80041d8 <scopeSetNumOfSamples>
 8001828:	4603      	mov	r3, r0
 800182a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 800182c:	e045      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_2K){
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a44      	ldr	r2, [pc, #272]	; (8001944 <parseScopeCmd+0x82c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d106      	bne.n	8001844 <parseScopeCmd+0x72c>
				error=scopeSetNumOfSamples(2000);
 8001836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800183a:	f002 fccd 	bl	80041d8 <scopeSetNumOfSamples>
 800183e:	4603      	mov	r3, r0
 8001840:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001842:	e03a      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_5K){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <parseScopeCmd+0x830>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d106      	bne.n	800185a <parseScopeCmd+0x742>
				error=scopeSetNumOfSamples(5000);
 800184c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001850:	f002 fcc2 	bl	80041d8 <scopeSetNumOfSamples>
 8001854:	4603      	mov	r3, r0
 8001856:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001858:	e02f      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_10K){
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a3b      	ldr	r2, [pc, #236]	; (800194c <parseScopeCmd+0x834>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d106      	bne.n	8001870 <parseScopeCmd+0x758>
				error=scopeSetNumOfSamples(10000);
 8001862:	f242 7010 	movw	r0, #10000	; 0x2710
 8001866:	f002 fcb7 	bl	80041d8 <scopeSetNumOfSamples>
 800186a:	4603      	mov	r3, r0
 800186c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 800186e:	e024      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_20K){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a37      	ldr	r2, [pc, #220]	; (8001950 <parseScopeCmd+0x838>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d106      	bne.n	8001886 <parseScopeCmd+0x76e>
				error=scopeSetNumOfSamples(20000);
 8001878:	f644 6020 	movw	r0, #20000	; 0x4e20
 800187c:	f002 fcac 	bl	80041d8 <scopeSetNumOfSamples>
 8001880:	4603      	mov	r3, r0
 8001882:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001884:	e019      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_50K){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <parseScopeCmd+0x83c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d106      	bne.n	800189c <parseScopeCmd+0x784>
				error=scopeSetNumOfSamples(50000);
 800188e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001892:	f002 fca1 	bl	80041d8 <scopeSetNumOfSamples>
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 800189a:	e00e      	b.n	80018ba <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_100K){
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <parseScopeCmd+0x840>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d10a      	bne.n	80018ba <parseScopeCmd+0x7a2>
				error=scopeSetNumOfSamples(100000);
 80018a4:	482d      	ldr	r0, [pc, #180]	; (800195c <parseScopeCmd+0x844>)
 80018a6:	f002 fc97 	bl	80041d8 <scopeSetNumOfSamples>
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 80018ae:	e004      	b.n	80018ba <parseScopeCmd+0x7a2>
			}
		}else{
			cmdIn = CMD_ERR;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <parseScopeCmd+0x818>)
 80018b2:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80018b4:	2336      	movs	r3, #54	; 0x36
 80018b6:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80018b8:	e02a      	b.n	8001910 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_SAMPLES_100){
 80018ba:	bf00      	nop
		break;
 80018bc:	e028      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_START: //start sampling
		scopeStart();
 80018be:	f002 fedd 	bl	800467c <scopeStart>
		break;
 80018c2:	e025      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_STOP: //stop sampling
		scopeStop();
 80018c4:	f002 feee 	bl	80046a4 <scopeStop>
		break;
 80018c8:	e022      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_NEXT: //restart sampling
		scopeRestart();
 80018ca:	f002 fec3 	bl	8004654 <scopeRestart>

		break;
 80018ce:	e01f      	b.n	8001910 <parseScopeCmd+0x7f8>
	case CMD_GET_CONFIG:
		passMsg = MSG_SCOPE_CONFIG;
 80018d0:	230f      	movs	r3, #15
 80018d2:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <parseScopeCmd+0x848>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4639      	mov	r1, r7
 80018da:	2300      	movs	r3, #0
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	f009 ff56 	bl	800b790 <xQueueGenericSend>
		break;
 80018e4:	e014      	b.n	8001910 <parseScopeCmd+0x7f8>
	case CMD_GET_INPUTS:
		passMsg = MSG_SCOPE_INPUTS;
 80018e6:	2310      	movs	r3, #16
 80018e8:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <parseScopeCmd+0x848>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	4639      	mov	r1, r7
 80018f0:	2300      	movs	r3, #0
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	f009 ff4b 	bl	800b790 <xQueueGenericSend>
		break;
 80018fa:	e009      	b.n	8001910 <parseScopeCmd+0x7f8>

	case CMD_END:break;
	default:
		error = SCOPE_INVALID_FEATURE;
 80018fc:	2332      	movs	r3, #50	; 0x32
 80018fe:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <parseScopeCmd+0x818>)
 8001902:	607b      	str	r3, [r7, #4]
		break;
 8001904:	e004      	b.n	8001910 <parseScopeCmd+0x7f8>
	case CMD_END:break;
 8001906:	bf00      	nop
 8001908:	e002      	b.n	8001910 <parseScopeCmd+0x7f8>
		break;
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <parseScopeCmd+0x7f8>
		break;
 800190e:	bf00      	nop
	}
	if(error>0){
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <parseScopeCmd+0x804>
		cmdIn=error;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	e001      	b.n	8001920 <parseScopeCmd+0x808>
	}else{
		cmdIn=CMD_END;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <parseScopeCmd+0x814>)
 800191e:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	5f444e45 	.word	0x5f444e45
 8001930:	5f525245 	.word	0x5f525245
 8001934:	5f303031 	.word	0x5f303031
 8001938:	5f303032 	.word	0x5f303032
 800193c:	5f303035 	.word	0x5f303035
 8001940:	5f5f4b31 	.word	0x5f5f4b31
 8001944:	5f5f4b32 	.word	0x5f5f4b32
 8001948:	5f5f4b35 	.word	0x5f5f4b35
 800194c:	5f4b3031 	.word	0x5f4b3031
 8001950:	5f4b3032 	.word	0x5f4b3032
 8001954:	5f4b3035 	.word	0x5f4b3035
 8001958:	4b303031 	.word	0x4b303031
 800195c:	000186a0 	.word	0x000186a0
 8001960:	200047b4 	.word	0x200047b4

08001964 <parseSyncPwmCmd>:
/**
 * @brief  Synchronized PWM generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSyncPwmCmd(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 800196c:	61bb      	str	r3, [r7, #24]
	uint8_t error=0;
 800196e:	2300      	movs	r3, #0
 8001970:	77fb      	strb	r3, [r7, #31]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 8001972:	f000 fb55 	bl	8002020 <giveNextCmd>
 8001976:	61b8      	str	r0, [r7, #24]
	switch(cmdIn){
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4a7e      	ldr	r2, [pc, #504]	; (8001b74 <parseSyncPwmCmd+0x210>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d077      	beq.n	8001a70 <parseSyncPwmCmd+0x10c>
 8001980:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <parseSyncPwmCmd+0x210>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d80b      	bhi.n	800199e <parseSyncPwmCmd+0x3a>
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <parseSyncPwmCmd+0x214>)
 8001988:	4293      	cmp	r3, r2
 800198a:	f000 80ba 	beq.w	8001b02 <parseSyncPwmCmd+0x19e>
 800198e:	4a7b      	ldr	r2, [pc, #492]	; (8001b7c <parseSyncPwmCmd+0x218>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d017      	beq.n	80019c4 <parseSyncPwmCmd+0x60>
 8001994:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <parseSyncPwmCmd+0x21c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	f000 80cd 	beq.w	8001b36 <parseSyncPwmCmd+0x1d2>
 800199c:	e0d6      	b.n	8001b4c <parseSyncPwmCmd+0x1e8>
 800199e:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <parseSyncPwmCmd+0x220>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d045      	beq.n	8001a30 <parseSyncPwmCmd+0xcc>
 80019a4:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <parseSyncPwmCmd+0x220>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d803      	bhi.n	80019b2 <parseSyncPwmCmd+0x4e>
 80019aa:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <parseSyncPwmCmd+0x224>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d073      	beq.n	8001a98 <parseSyncPwmCmd+0x134>
 80019b0:	e0cc      	b.n	8001b4c <parseSyncPwmCmd+0x1e8>
 80019b2:	4a76      	ldr	r2, [pc, #472]	; (8001b8c <parseSyncPwmCmd+0x228>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	f000 8086 	beq.w	8001ac6 <parseSyncPwmCmd+0x162>
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	f000 80ca 	beq.w	8001b56 <parseSyncPwmCmd+0x1f2>
 80019c2:	e0c3      	b.n	8001b4c <parseSyncPwmCmd+0x1e8>
	case CMD_SYNC_PWM_COMMAND:
		cmdIn = giveNextCmd();
 80019c4:	f000 fb2c 	bl	8002020 <giveNextCmd>
 80019c8:	61b8      	str	r0, [r7, #24]
		if(isSyncPwm(cmdIn)){
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <parseSyncPwmCmd+0x230>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00b      	beq.n	80019ea <parseSyncPwmCmd+0x86>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <parseSyncPwmCmd+0x234>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <parseSyncPwmCmd+0x86>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <parseSyncPwmCmd+0x238>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d003      	beq.n	80019ea <parseSyncPwmCmd+0x86>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <parseSyncPwmCmd+0x23c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d11b      	bne.n	8001a22 <parseSyncPwmCmd+0xbe>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <parseSyncPwmCmd+0x230>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d102      	bne.n	80019f8 <parseSyncPwmCmd+0x94>
				syncPwmSendInit();
 80019f2:	f002 fe6b 	bl	80046cc <syncPwmSendInit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80019f6:	e019      	b.n	8001a2c <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_DEINIT){
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4a67      	ldr	r2, [pc, #412]	; (8001b98 <parseSyncPwmCmd+0x234>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d102      	bne.n	8001a06 <parseSyncPwmCmd+0xa2>
				syncPwmSendDeinit();
 8001a00:	f002 fe78 	bl	80046f4 <syncPwmSendDeinit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 8001a04:	e012      	b.n	8001a2c <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_START){
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <parseSyncPwmCmd+0x238>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d102      	bne.n	8001a14 <parseSyncPwmCmd+0xb0>
				syncPwmSendStart();
 8001a0e:	f002 fe85 	bl	800471c <syncPwmSendStart>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 8001a12:	e00b      	b.n	8001a2c <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_STOP){
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4a62      	ldr	r2, [pc, #392]	; (8001ba0 <parseSyncPwmCmd+0x23c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d107      	bne.n	8001a2c <parseSyncPwmCmd+0xc8>
				syncPwmSendStop();
 8001a1c:	f002 fe92 	bl	8004744 <syncPwmSendStop>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 8001a20:	e004      	b.n	8001a2c <parseSyncPwmCmd+0xc8>
			}
		}else{
			cmdIn = CMD_ERR;
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001a24:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8001a26:	2397      	movs	r3, #151	; 0x97
 8001a28:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001a2a:	e095      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 8001a2c:	bf00      	nop
		break;
 8001a2e:	e093      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_STEP:
		cmdIn = giveNextCmd();
 8001a30:	f000 faf6 	bl	8002020 <giveNextCmd>
 8001a34:	61b8      	str	r0, [r7, #24]
		if(isSyncPwmStepMode(cmdIn)){
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <parseSyncPwmCmd+0x240>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d003      	beq.n	8001a46 <parseSyncPwmCmd+0xe2>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <parseSyncPwmCmd+0x244>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10d      	bne.n	8001a62 <parseSyncPwmCmd+0xfe>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <parseSyncPwmCmd+0x240>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d102      	bne.n	8001a54 <parseSyncPwmCmd+0xf0>
				syncPwmSetStepMode();
 8001a4e:	f002 feeb 	bl	8004828 <syncPwmSetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8001a52:	e00b      	b.n	8001a6c <parseSyncPwmCmd+0x108>
			}else if(cmdIn == CMD_SYNC_PWM_STEP_DISABLE){
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4a54      	ldr	r2, [pc, #336]	; (8001ba8 <parseSyncPwmCmd+0x244>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d107      	bne.n	8001a6c <parseSyncPwmCmd+0x108>
				syncPwmResetStepMode();
 8001a5c:	f002 feea 	bl	8004834 <syncPwmResetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8001a60:	e004      	b.n	8001a6c <parseSyncPwmCmd+0x108>
			}	
		}else{
			cmdIn = CMD_ERR;
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001a64:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8001a66:	2397      	movs	r3, #151	; 0x97
 8001a68:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001a6a:	e075      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8001a6c:	bf00      	nop
		break;
 8001a6e:	e073      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_NUM:
		cmdIn = giveNextCmd();
 8001a70:	f000 fad6 	bl	8002020 <giveNextCmd>
 8001a74:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d009      	beq.n	8001a92 <parseSyncPwmCmd+0x12e>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d005      	beq.n	8001a92 <parseSyncPwmCmd+0x12e>
			syncPwmChannelNumber((uint8_t)cmdIn);
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fe6e 	bl	800476c <syncPwmChannelNumber>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8001a90:	e062      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001a94:	61bb      	str	r3, [r7, #24]
		break;
 8001a96:	e05f      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_CONFIG:
		cmdIn = giveNextCmd();
 8001a98:	f000 fac2 	bl	8002020 <giveNextCmd>
 8001a9c:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00c      	beq.n	8001ac0 <parseSyncPwmCmd+0x15c>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d008      	beq.n	8001ac0 <parseSyncPwmCmd+0x15c>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fe69 	bl	8004790 <syncPwmChannelConfig>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8001abe:	e04b      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001ac2:	61bb      	str	r3, [r7, #24]
		break;
 8001ac4:	e048      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_FREQ:
		cmdIn = giveNextCmd();
 8001ac6:	f000 faab 	bl	8002020 <giveNextCmd>
 8001aca:	61b8      	str	r0, [r7, #24]
		secondHalfOfDouble = commBufferReadUInt32();
 8001acc:	f000 fe6e 	bl	80027ac <commBufferReadUInt32>
 8001ad0:	6178      	str	r0, [r7, #20]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f000 faf3 	bl	80020c0 <makeDoubleFromTwo32bit>
 8001ada:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d008      	beq.n	8001af8 <parseSyncPwmCmd+0x194>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <parseSyncPwmCmd+0x194>
			syncPwmSetFreq(freq);
 8001aee:	ed97 0b02 	vldr	d0, [r7, #8]
 8001af2:	f002 fe5f 	bl	80047b4 <syncPwmSetFreq>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 8001af6:	e02f      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001afa:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8001afc:	2397      	movs	r3, #151	; 0x97
 8001afe:	77fb      	strb	r3, [r7, #31]
		break;
 8001b00:	e02a      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_STATE:
		cmdIn = giveNextCmd();
 8001b02:	f000 fa8d 	bl	8002020 <giveNextCmd>
 8001b06:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <parseSyncPwmCmd+0x1c8>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d009      	beq.n	8001b2c <parseSyncPwmCmd+0x1c8>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fe6d 	bl	8004804 <syncPwmSetChannelState>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 8001b2a:	e015      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001b2e:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8001b30:	2397      	movs	r3, #151	; 0x97
 8001b32:	77fb      	strb	r3, [r7, #31]
		break;
 8001b34:	e010      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_GET_CONFIG:
		passMsg = MSG_SYNCPWM_CONFIG;
 8001b36:	232b      	movs	r3, #43	; 0x2b
 8001b38:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <parseSyncPwmCmd+0x248>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	1db9      	adds	r1, r7, #6
 8001b40:	2300      	movs	r3, #0
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	f009 fe23 	bl	800b790 <xQueueGenericSend>
		break;
 8001b4a:	e005      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
	case CMD_END:
		break;
	default:
		error = SYNC_PWM_INVALID_FEATURE;
 8001b4c:	2397      	movs	r3, #151	; 0x97
 8001b4e:	77fb      	strb	r3, [r7, #31]
		cmdIn = CMD_ERR;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <parseSyncPwmCmd+0x20c>)
 8001b52:	61bb      	str	r3, [r7, #24]
		break;
 8001b54:	e000      	b.n	8001b58 <parseSyncPwmCmd+0x1f4>
		break;
 8001b56:	bf00      	nop
	}

	cmdIn = (error > 0) ? error : CMD_END;	
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <parseSyncPwmCmd+0x1fe>
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	e000      	b.n	8001b64 <parseSyncPwmCmd+0x200>
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <parseSyncPwmCmd+0x22c>)
 8001b64:	61bb      	str	r3, [r7, #24]
	return cmdIn;			
 8001b66:	69bb      	ldr	r3, [r7, #24]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	5f525245 	.word	0x5f525245
 8001b74:	4d554e43 	.word	0x4d554e43
 8001b78:	41545353 	.word	0x41545353
 8001b7c:	4d4f4353 	.word	0x4d4f4353
 8001b80:	3f474643 	.word	0x3f474643
 8001b84:	50455453 	.word	0x50455453
 8001b88:	4e4f4343 	.word	0x4e4f4343
 8001b8c:	51524653 	.word	0x51524653
 8001b90:	5f444e45 	.word	0x5f444e45
 8001b94:	54494e49 	.word	0x54494e49
 8001b98:	494e4944 	.word	0x494e4944
 8001b9c:	54525453 	.word	0x54525453
 8001ba0:	504f5453 	.word	0x504f5453
 8001ba4:	45455453 	.word	0x45455453
 8001ba8:	44455453 	.word	0x44455453
 8001bac:	200047b4 	.word	0x200047b4

08001bb0 <parseGeneratorCmd>:
/**
 * @brief  Generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseGeneratorCmd(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 8001bb6:	4bab      	ldr	r3, [pc, #684]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001bb8:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	76fb      	strb	r3, [r7, #27]
	uint16_t index;
	uint8_t length,chan;
	uint16_t watchDog=5000;
 8001bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bc2:	833b      	strh	r3, [r7, #24]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 8001bc4:	f000 fa2c 	bl	8002020 <giveNextCmd>
 8001bc8:	61f8      	str	r0, [r7, #28]
	switch(cmdIn){
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4aa6      	ldr	r2, [pc, #664]	; (8001e68 <parseGeneratorCmd+0x2b8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f000 81cc 	beq.w	8001f6c <parseGeneratorCmd+0x3bc>
 8001bd4:	4aa4      	ldr	r2, [pc, #656]	; (8001e68 <parseGeneratorCmd+0x2b8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d82e      	bhi.n	8001c38 <parseGeneratorCmd+0x88>
 8001bda:	4aa4      	ldr	r2, [pc, #656]	; (8001e6c <parseGeneratorCmd+0x2bc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f000 81ef 	beq.w	8001fc0 <parseGeneratorCmd+0x410>
 8001be2:	4aa2      	ldr	r2, [pc, #648]	; (8001e6c <parseGeneratorCmd+0x2bc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d814      	bhi.n	8001c12 <parseGeneratorCmd+0x62>
 8001be8:	4aa1      	ldr	r2, [pc, #644]	; (8001e70 <parseGeneratorCmd+0x2c0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f000 80e4 	beq.w	8001db8 <parseGeneratorCmd+0x208>
 8001bf0:	4a9f      	ldr	r2, [pc, #636]	; (8001e70 <parseGeneratorCmd+0x2c0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d804      	bhi.n	8001c00 <parseGeneratorCmd+0x50>
 8001bf6:	4a9f      	ldr	r2, [pc, #636]	; (8001e74 <parseGeneratorCmd+0x2c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f000 811d 	beq.w	8001e38 <parseGeneratorCmd+0x288>
 8001bfe:	e1ea      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c00:	4a9d      	ldr	r2, [pc, #628]	; (8001e78 <parseGeneratorCmd+0x2c8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f000 815a 	beq.w	8001ebc <parseGeneratorCmd+0x30c>
 8001c08:	4a9c      	ldr	r2, [pc, #624]	; (8001e7c <parseGeneratorCmd+0x2cc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	f000 80f1 	beq.w	8001df2 <parseGeneratorCmd+0x242>
 8001c10:	e1e1      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c12:	4a9b      	ldr	r2, [pc, #620]	; (8001e80 <parseGeneratorCmd+0x2d0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	f000 810c 	beq.w	8001e32 <parseGeneratorCmd+0x282>
 8001c1a:	4a99      	ldr	r2, [pc, #612]	; (8001e80 <parseGeneratorCmd+0x2d0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d804      	bhi.n	8001c2a <parseGeneratorCmd+0x7a>
 8001c20:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <parseGeneratorCmd+0x2d4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f000 81c1 	beq.w	8001faa <parseGeneratorCmd+0x3fa>
 8001c28:	e1d5      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c2a:	4a97      	ldr	r2, [pc, #604]	; (8001e88 <parseGeneratorCmd+0x2d8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d055      	beq.n	8001cdc <parseGeneratorCmd+0x12c>
 8001c30:	4a96      	ldr	r2, [pc, #600]	; (8001e8c <parseGeneratorCmd+0x2dc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d035      	beq.n	8001ca2 <parseGeneratorCmd+0xf2>
 8001c36:	e1ce      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c38:	4a95      	ldr	r2, [pc, #596]	; (8001e90 <parseGeneratorCmd+0x2e0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 80a3 	beq.w	8001d86 <parseGeneratorCmd+0x1d6>
 8001c40:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <parseGeneratorCmd+0x2e0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d814      	bhi.n	8001c70 <parseGeneratorCmd+0xc0>
 8001c46:	4a93      	ldr	r2, [pc, #588]	; (8001e94 <parseGeneratorCmd+0x2e4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	f000 814c 	beq.w	8001ee6 <parseGeneratorCmd+0x336>
 8001c4e:	4a91      	ldr	r2, [pc, #580]	; (8001e94 <parseGeneratorCmd+0x2e4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d804      	bhi.n	8001c5e <parseGeneratorCmd+0xae>
 8001c54:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <parseGeneratorCmd+0x2e8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f000 80e8 	beq.w	8001e2c <parseGeneratorCmd+0x27c>
 8001c5c:	e1bb      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c5e:	4a8f      	ldr	r2, [pc, #572]	; (8001e9c <parseGeneratorCmd+0x2ec>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f000 8180 	beq.w	8001f66 <parseGeneratorCmd+0x3b6>
 8001c66:	4a8e      	ldr	r2, [pc, #568]	; (8001ea0 <parseGeneratorCmd+0x2f0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	f000 8198 	beq.w	8001f9e <parseGeneratorCmd+0x3ee>
 8001c6e:	e1b2      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c70:	4a8c      	ldr	r2, [pc, #560]	; (8001ea4 <parseGeneratorCmd+0x2f4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	f000 817d 	beq.w	8001f72 <parseGeneratorCmd+0x3c2>
 8001c78:	4a8a      	ldr	r2, [pc, #552]	; (8001ea4 <parseGeneratorCmd+0x2f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d808      	bhi.n	8001c90 <parseGeneratorCmd+0xe0>
 8001c7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <parseGeneratorCmd+0x2f8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f000 818f 	beq.w	8001fa4 <parseGeneratorCmd+0x3f4>
 8001c86:	4a89      	ldr	r2, [pc, #548]	; (8001eac <parseGeneratorCmd+0x2fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f000 8183 	beq.w	8001f94 <parseGeneratorCmd+0x3e4>
 8001c8e:	e1a2      	b.n	8001fd6 <parseGeneratorCmd+0x426>
 8001c90:	4a87      	ldr	r2, [pc, #540]	; (8001eb0 <parseGeneratorCmd+0x300>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f000 81a4 	beq.w	8001fe0 <parseGeneratorCmd+0x430>
 8001c98:	4a86      	ldr	r2, [pc, #536]	; (8001eb4 <parseGeneratorCmd+0x304>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	f000 81a2 	beq.w	8001fe4 <parseGeneratorCmd+0x434>
 8001ca0:	e199      	b.n	8001fd6 <parseGeneratorCmd+0x426>
	case CMD_GEN_MODE:
		cmdIn = giveNextCmd();
 8001ca2:	f000 f9bd 	bl	8002020 <giveNextCmd>
 8001ca6:	61f8      	str	r0, [r7, #28]
		if(isGeneratorMode(cmdIn)){
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4a83      	ldr	r2, [pc, #524]	; (8001eb8 <parseGeneratorCmd+0x308>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <parseGeneratorCmd+0x10a>
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4a7c      	ldr	r2, [pc, #496]	; (8001ea4 <parseGeneratorCmd+0x2f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	f040 8197 	bne.w	8001fe8 <parseGeneratorCmd+0x438>
			if(cmdIn == CMD_MODE_PWM){
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4a7e      	ldr	r2, [pc, #504]	; (8001eb8 <parseGeneratorCmd+0x308>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d103      	bne.n	8001cca <parseGeneratorCmd+0x11a>
				genSetMode(GEN_PWM);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f001 f8b6 	bl	8002e34 <genSetMode>
			}else if(cmdIn == CMD_MODE_DAC){
				genSetMode(GEN_DAC);
			}
		}
		break;
 8001cc8:	e18e      	b.n	8001fe8 <parseGeneratorCmd+0x438>
			}else if(cmdIn == CMD_MODE_DAC){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <parseGeneratorCmd+0x2f4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	f040 818a 	bne.w	8001fe8 <parseGeneratorCmd+0x438>
				genSetMode(GEN_DAC);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f001 f8ad 	bl	8002e34 <genSetMode>
		break;
 8001cda:	e185      	b.n	8001fe8 <parseGeneratorCmd+0x438>
	case CMD_GEN_DATA://set data
		cmdIn = giveNextCmd();
 8001cdc:	f000 f9a0 	bl	8002020 <giveNextCmd>
 8001ce0:	61f8      	str	r0, [r7, #28]
		index=SWAP_UINT16(cmdIn);
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	82fb      	strh	r3, [r7, #22]
		length=cmdIn>>16;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	757b      	strb	r3, [r7, #21]
		chan=cmdIn>>24;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	0e1b      	lsrs	r3, r3, #24
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	71fb      	strb	r3, [r7, #7]
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001d06:	e005      	b.n	8001d14 <parseGeneratorCmd+0x164>
			watchDog--;
 8001d08:	8b3b      	ldrh	r3, [r7, #24]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	833b      	strh	r3, [r7, #24]
			osDelay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f009 fb16 	bl	800b340 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001d14:	8b3b      	ldrh	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <parseGeneratorCmd+0x17c>
 8001d1a:	f000 fd91 	bl	8002840 <getBytesAvailable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	7d7b      	ldrb	r3, [r7, #21]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	3301      	adds	r3, #1
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbed      	blt.n	8001d08 <parseGeneratorCmd+0x158>
		}
		if(getBytesAvailable()<length*2+1){
 8001d2c:	f000 fd88 	bl	8002840 <getBytesAvailable>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	7d7b      	ldrb	r3, [r7, #21]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	3301      	adds	r3, #1
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	da0a      	bge.n	8001d54 <parseGeneratorCmd+0x1a4>
			error=GEN_MISSING_DATA;
 8001d3e:	2368      	movs	r3, #104	; 0x68
 8001d40:	76fb      	strb	r3, [r7, #27]
			while(commBufferReadByte(&chan)==0);
 8001d42:	bf00      	nop
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fcd0 	bl	80026ec <commBufferReadByte>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f8      	beq.n	8001d44 <parseGeneratorCmd+0x194>
				while(commBufferReadByte(&chan)==0);
			}else{
				genDataOKSendNext();
			}
		}
		break;
 8001d52:	e14a      	b.n	8001fea <parseGeneratorCmd+0x43a>
			error=genSetData(index,length*2,chan);
 8001d54:	7d7b      	ldrb	r3, [r7, #21]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	b2d9      	uxtb	r1, r3
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 f99c 	bl	800309c <genSetData>
 8001d64:	4603      	mov	r3, r0
 8001d66:	76fb      	strb	r3, [r7, #27]
			if (error){
 8001d68:	7efb      	ldrb	r3, [r7, #27]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <parseGeneratorCmd+0x1d0>
				while(commBufferReadByte(&chan)==0);
 8001d6e:	bf00      	nop
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fcba 	bl	80026ec <commBufferReadByte>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f8      	beq.n	8001d70 <parseGeneratorCmd+0x1c0>
		break;
 8001d7e:	e134      	b.n	8001fea <parseGeneratorCmd+0x43a>
				genDataOKSendNext();
 8001d80:	f001 fa3c 	bl	80031fc <genDataOKSendNext>
		break;
 8001d84:	e131      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_SAMPLING_FREQ: //set sampling freq
		cmdIn = giveNextCmd();
 8001d86:	f000 f94b 	bl	8002020 <giveNextCmd>
 8001d8a:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <parseGeneratorCmd+0x300>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <parseGeneratorCmd+0x202>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00a      	beq.n	8001db2 <parseGeneratorCmd+0x202>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 f9e0 	bl	800316c <genSetFrequency>
 8001dac:	4603      	mov	r3, r0
 8001dae:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8001db0:	e11b      	b.n	8001fea <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001db4:	61fb      	str	r3, [r7, #28]
		break;	
 8001db6:	e118      	b.n	8001fea <parseGeneratorCmd+0x43a>

#ifdef USE_GEN_PWM
	case CMD_GEN_PWM_FREQ_CH1:
		cmdIn = giveNextCmd();
 8001db8:	f000 f932 	bl	8002020 <giveNextCmd>
 8001dbc:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 8001dbe:	f000 fcf5 	bl	80027ac <commBufferReadUInt32>
 8001dc2:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001dc4:	69f9      	ldr	r1, [r7, #28]
 8001dc6:	6938      	ldr	r0, [r7, #16]
 8001dc8:	f000 f97a 	bl	80020c0 <makeDoubleFromTwo32bit>
 8001dcc:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <parseGeneratorCmd+0x300>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d009      	beq.n	8001dec <parseGeneratorCmd+0x23c>
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d005      	beq.n	8001dec <parseGeneratorCmd+0x23c>
			genPwmSetFrequency(freq, 0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	ed97 0b02 	vldr	d0, [r7, #8]
 8001de6:	f001 f923 	bl	8003030 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8001dea:	e0fe      	b.n	8001fea <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001dee:	61fb      	str	r3, [r7, #28]
		break;
 8001df0:	e0fb      	b.n	8001fea <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_FREQ_CH2:
		cmdIn = giveNextCmd();
 8001df2:	f000 f915 	bl	8002020 <giveNextCmd>
 8001df6:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 8001df8:	f000 fcd8 	bl	80027ac <commBufferReadUInt32>
 8001dfc:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001dfe:	69f9      	ldr	r1, [r7, #28]
 8001e00:	6938      	ldr	r0, [r7, #16]
 8001e02:	f000 f95d 	bl	80020c0 <makeDoubleFromTwo32bit>
 8001e06:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <parseGeneratorCmd+0x300>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <parseGeneratorCmd+0x276>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d005      	beq.n	8001e26 <parseGeneratorCmd+0x276>
			genPwmSetFrequency(freq, 1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e20:	f001 f906 	bl	8003030 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8001e24:	e0e1      	b.n	8001fea <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001e28:	61fb      	str	r3, [r7, #28]
		break;
 8001e2a:	e0de      	b.n	8001fea <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_DEINIT:
		generator_deinit();
 8001e2c:	f001 f848 	bl	8002ec0 <generator_deinit>
		break;
 8001e30:	e0db      	b.n	8001fea <parseGeneratorCmd+0x43a>
#endif // USE_GEN_PWM

	case CMD_GET_REAL_FREQ: //get sampling freq
		genSendRealSamplingFreq();
 8001e32:	f001 f9cf 	bl	80031d4 <genSendRealSamplingFreq>
		break;	
 8001e36:	e0d8      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_DATA_LENGTH_CH1: //set data length
		cmdIn = giveNextCmd();
 8001e38:	f000 f8f2 	bl	8002020 <giveNextCmd>
 8001e3c:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <parseGeneratorCmd+0x300>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00a      	beq.n	8001e5c <parseGeneratorCmd+0x2ac>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d006      	beq.n	8001e5c <parseGeneratorCmd+0x2ac>
			error=genSetLength(cmdIn, 1);
 8001e4e:	2101      	movs	r1, #1
 8001e50:	69f8      	ldr	r0, [r7, #28]
 8001e52:	f001 fa0f 	bl	8003274 <genSetLength>
 8001e56:	4603      	mov	r3, r0
 8001e58:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8001e5a:	e0c6      	b.n	8001fea <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8001e5c:	4b01      	ldr	r3, [pc, #4]	; (8001e64 <parseGeneratorCmd+0x2b4>)
 8001e5e:	61fb      	str	r3, [r7, #28]
		break;	
 8001e60:	e0c3      	b.n	8001fea <parseGeneratorCmd+0x43a>
 8001e62:	bf00      	nop
 8001e64:	5f525245 	.word	0x5f525245
 8001e68:	464f5f42 	.word	0x464f5f42
 8001e6c:	3f464350 	.word	0x3f464350
 8001e70:	31524647 	.word	0x31524647
 8001e74:	3148434c 	.word	0x3148434c
 8001e78:	3248434c 	.word	0x3248434c
 8001e7c:	32524647 	.word	0x32524647
 8001e80:	3f515246 	.word	0x3f515246
 8001e84:	3f474643 	.word	0x3f474643
 8001e88:	41544144 	.word	0x41544144
 8001e8c:	45444f4d 	.word	0x45444f4d
 8001e90:	51455246 	.word	0x51455246
 8001e94:	4e414843 	.word	0x4e414843
 8001e98:	49445047 	.word	0x49445047
 8001e9c:	4e4f5f42 	.word	0x4e4f5f42
 8001ea0:	504f5453 	.word	0x504f5453
 8001ea4:	5f434144 	.word	0x5f434144
 8001ea8:	54455352 	.word	0x54455352
 8001eac:	54525453 	.word	0x54525453
 8001eb0:	5f444e45 	.word	0x5f444e45
 8001eb4:	5f4e4547 	.word	0x5f4e4547
 8001eb8:	5f4d5750 	.word	0x5f4d5750

	case CMD_GEN_DATA_LENGTH_CH2: //set data length
		cmdIn = giveNextCmd();
 8001ebc:	f000 f8b0 	bl	8002020 <giveNextCmd>
 8001ec0:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4a4f      	ldr	r2, [pc, #316]	; (8002004 <parseGeneratorCmd+0x454>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00a      	beq.n	8001ee0 <parseGeneratorCmd+0x330>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <parseGeneratorCmd+0x458>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d006      	beq.n	8001ee0 <parseGeneratorCmd+0x330>
			error=genSetLength(cmdIn, 2);
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	69f8      	ldr	r0, [r7, #28]
 8001ed6:	f001 f9cd 	bl	8003274 <genSetLength>
 8001eda:	4603      	mov	r3, r0
 8001edc:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8001ede:	e084      	b.n	8001fea <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <parseGeneratorCmd+0x458>)
 8001ee2:	61fb      	str	r3, [r7, #28]
		break;	
 8001ee4:	e081      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 8001ee6:	f000 f89b 	bl	8002020 <giveNextCmd>
 8001eea:	61f8      	str	r0, [r7, #28]
		if(isChannel(cmdIn)){
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <parseGeneratorCmd+0x45c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00b      	beq.n	8001f0c <parseGeneratorCmd+0x35c>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4a46      	ldr	r2, [pc, #280]	; (8002010 <parseGeneratorCmd+0x460>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <parseGeneratorCmd+0x35c>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	4a45      	ldr	r2, [pc, #276]	; (8002014 <parseGeneratorCmd+0x464>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <parseGeneratorCmd+0x35c>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4a44      	ldr	r2, [pc, #272]	; (8002018 <parseGeneratorCmd+0x468>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d127      	bne.n	8001f5c <parseGeneratorCmd+0x3ac>
			if(cmdIn == CMD_CHANNELS_1){
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	; (800200c <parseGeneratorCmd+0x45c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d105      	bne.n	8001f20 <parseGeneratorCmd+0x370>
				error=genSetNumOfChannels(1);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f001 f9e9 	bl	80032ec <genSetNumOfChannels>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8001f1e:	e020      	b.n	8001f62 <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4a3b      	ldr	r2, [pc, #236]	; (8002010 <parseGeneratorCmd+0x460>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d105      	bne.n	8001f34 <parseGeneratorCmd+0x384>
				error=genSetNumOfChannels(2);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f001 f9df 	bl	80032ec <genSetNumOfChannels>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8001f32:	e016      	b.n	8001f62 <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4a37      	ldr	r2, [pc, #220]	; (8002014 <parseGeneratorCmd+0x464>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d105      	bne.n	8001f48 <parseGeneratorCmd+0x398>
				error=genSetNumOfChannels(3);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f001 f9d5 	bl	80032ec <genSetNumOfChannels>
 8001f42:	4603      	mov	r3, r0
 8001f44:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8001f46:	e00c      	b.n	8001f62 <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_4){
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4a33      	ldr	r2, [pc, #204]	; (8002018 <parseGeneratorCmd+0x468>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <parseGeneratorCmd+0x3b2>
				error=genSetNumOfChannels(4);
 8001f50:	2004      	movs	r0, #4
 8001f52:	f001 f9cb 	bl	80032ec <genSetNumOfChannels>
 8001f56:	4603      	mov	r3, r0
 8001f58:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8001f5a:	e002      	b.n	8001f62 <parseGeneratorCmd+0x3b2>
			}
		}else{
			cmdIn = CMD_ERR;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <parseGeneratorCmd+0x458>)
 8001f5e:	61fb      	str	r3, [r7, #28]
		}
		break;
 8001f60:	e043      	b.n	8001fea <parseGeneratorCmd+0x43a>
			if(cmdIn == CMD_CHANNELS_1){
 8001f62:	bf00      	nop
		break;
 8001f64:	e041      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_OUTBUFF_ON: //buffer on
		genSetOutputBuffer();
 8001f66:	f001 fa43 	bl	80033f0 <genSetOutputBuffer>
		break;			
 8001f6a:	e03e      	b.n	8001fea <parseGeneratorCmd+0x43a>
	case CMD_GEN_OUTBUFF_OFF: //buffer off
		genUnsetOutputBuffer();
 8001f6c:	f001 fa46 	bl	80033fc <genUnsetOutputBuffer>
		break;	
 8001f70:	e03b      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_DAC_VAL:
		cmdIn = giveNextCmd();
 8001f72:	f000 f855 	bl	8002020 <giveNextCmd>
 8001f76:	61f8      	str	r0, [r7, #28]
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f001 fa3f 	bl	8003408 <genSetDAC>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	76fb      	strb	r3, [r7, #27]
		genStatusOK();
 8001f8e:	f001 f949 	bl	8003224 <genStatusOK>
		break;
 8001f92:	e02a      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_START: //start generating
		genStart();
 8001f94:	f001 fa88 	bl	80034a8 <genStart>
		genStatusOK();
 8001f98:	f001 f944 	bl	8003224 <genStatusOK>
		break;	
 8001f9c:	e025      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_STOP: //stop generating
		genStop();
 8001f9e:	f001 fa97 	bl	80034d0 <genStop>
		break;	
 8001fa2:	e022      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GEN_RESET:
		genReset();
 8001fa4:	f001 faa8 	bl	80034f8 <genReset>
		break;
 8001fa8:	e01f      	b.n	8001fea <parseGeneratorCmd+0x43a>

	case CMD_GET_CONFIG:
		passMsg = MSG_GEN_CONFIG;
 8001faa:	231f      	movs	r3, #31
 8001fac:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <parseGeneratorCmd+0x46c>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	1d39      	adds	r1, r7, #4
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	f009 fbe9 	bl	800b790 <xQueueGenericSend>
		break;
 8001fbe:	e014      	b.n	8001fea <parseGeneratorCmd+0x43a>
#ifdef USE_GEN_PWM
	case CMD_GET_PWM_CONFIG:
		passMsg = MSG_GEN_PWM_CONFIG;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <parseGeneratorCmd+0x46c>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	1d39      	adds	r1, r7, #4
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	f009 fbde 	bl	800b790 <xQueueGenericSend>
		break;
 8001fd4:	e009      	b.n	8001fea <parseGeneratorCmd+0x43a>
	case CMD_GENERATOR:
		break;	

	case CMD_END:break;
	default:
		error = GEN_INVALID_FEATURE;
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <parseGeneratorCmd+0x458>)
 8001fdc:	61fb      	str	r3, [r7, #28]
		break;
 8001fde:	e004      	b.n	8001fea <parseGeneratorCmd+0x43a>
	case CMD_END:break;
 8001fe0:	bf00      	nop
 8001fe2:	e002      	b.n	8001fea <parseGeneratorCmd+0x43a>
		break;	
 8001fe4:	bf00      	nop
 8001fe6:	e000      	b.n	8001fea <parseGeneratorCmd+0x43a>
		break;
 8001fe8:	bf00      	nop
	}
	if(error>0){
 8001fea:	7efb      	ldrb	r3, [r7, #27]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <parseGeneratorCmd+0x446>
		cmdIn=error;
 8001ff0:	7efb      	ldrb	r3, [r7, #27]
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	e001      	b.n	8001ffa <parseGeneratorCmd+0x44a>
	}else{
		cmdIn=CMD_END;
 8001ff6:	4b03      	ldr	r3, [pc, #12]	; (8002004 <parseGeneratorCmd+0x454>)
 8001ff8:	61fb      	str	r3, [r7, #28]
	}
	return cmdIn;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	5f444e45 	.word	0x5f444e45
 8002008:	5f525245 	.word	0x5f525245
 800200c:	5f484331 	.word	0x5f484331
 8002010:	5f484332 	.word	0x5f484332
 8002014:	5f484333 	.word	0x5f484333
 8002018:	5f484334 	.word	0x5f484334
 800201c:	200047b4 	.word	0x200047b4

08002020 <giveNextCmd>:
/**
 * @brief  Read command from input buffer
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002026:	463b      	mov	r3, r7
 8002028:	2105      	movs	r1, #5
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fb9c 	bl	8002768 <commBufferReadNBytes>
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
	if(bytesRead >= 4){
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d90a      	bls.n	8002050 <giveNextCmd+0x30>
		return BUILD_CMD(cmdNext);
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	061a      	lsls	r2, r3, #24
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	4313      	orrs	r3, r2
 800204a:	783a      	ldrb	r2, [r7, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	e005      	b.n	800205c <giveNextCmd+0x3c>
	}else if(bytesRead == 0){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <giveNextCmd+0x3a>
		return CMD_END;
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <giveNextCmd+0x44>)
 8002058:	e000      	b.n	800205c <giveNextCmd+0x3c>
	}else{
		return CMD_ERR;
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <giveNextCmd+0x48>)
	}
} 
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	5f444e45 	.word	0x5f444e45
 8002068:	5f525245 	.word	0x5f525245

0800206c <printErrResponse>:
/**
 * @brief  Printr error code
 * @param  Command
 * @retval None
 */
void printErrResponse(command cmd){
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	uint8_t err[2];
	if(cmd == CMD_END){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <printErrResponse+0x4c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d10b      	bne.n	8002094 <printErrResponse+0x28>
		uint16_t passMsg = MSG_ACK;
 800207c:	2334      	movs	r3, #52	; 0x34
 800207e:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <printErrResponse+0x50>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	f107 010a 	add.w	r1, r7, #10
 8002088:	2300      	movs	r3, #0
 800208a:	f04f 32ff 	mov.w	r2, #4294967295
 800208e:	f009 fb7f 	bl	800b790 <xQueueGenericSend>
	}else{
		err[0]=ERROR_PREFIX;
		err[1]=cmd;
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
	}
}
 8002092:	e00d      	b.n	80020b0 <printErrResponse+0x44>
		err[0]=ERROR_PREFIX;
 8002094:	2345      	movs	r3, #69	; 0x45
 8002096:	733b      	strb	r3, [r7, #12]
		err[1]=cmd;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <printErrResponse+0x50>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f107 010c 	add.w	r1, r7, #12
 80020a6:	2300      	movs	r3, #0
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	f009 fb70 	bl	800b790 <xQueueGenericSend>
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	5f444e45 	.word	0x5f444e45
 80020bc:	200047b4 	.word	0x200047b4

080020c0 <makeDoubleFromTwo32bit>:

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	uint32_t makeArray[2];
	makeArray[0] = word1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	613b      	str	r3, [r7, #16]
	makeArray[1] = word2;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	617b      	str	r3, [r7, #20]

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 80020d2:	f107 0110 	add.w	r1, r7, #16
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2208      	movs	r2, #8
 80020dc:	4618      	mov	r0, r3
 80020de:	f00d ffdb 	bl	8010098 <memcpy>
	return doubleVal;
 80020e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80020ea:	eeb0 0a47 	vmov.f32	s0, s14
 80020ee:	eef0 0a67 	vmov.f32	s1, s15
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}

080020f8 <CommTask>:
 * @brief  Communication task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vPrintTask, pvParameters) {
void CommTask(void const *argument){
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b096      	sub	sp, #88	; 0x58
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(USB_DP_PIN_STR)==5);
	CASSERT(sizeof(USB_DM_PIN_STR)==5);
#endif //USE_USB


	uint16_t message = 0xFFFF;
 8002100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002104:	85fb      	strh	r3, [r7, #46]	; 0x2e
	messageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8002106:	2200      	movs	r2, #0
 8002108:	2102      	movs	r1, #2
 800210a:	2020      	movs	r0, #32
 800210c:	f009 fa48 	bl	800b5a0 <xQueueGenericCreate>
 8002110:	4602      	mov	r2, r0
 8002112:	4bbf      	ldr	r3, [pc, #764]	; (8002410 <CommTask+0x318>)
 8002114:	601a      	str	r2, [r3, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002116:	2004      	movs	r0, #4
 8002118:	f009 faba 	bl	800b690 <xQueueCreateMutex>
 800211c:	4602      	mov	r2, r0
 800211e:	4bbd      	ldr	r3, [pc, #756]	; (8002414 <CommTask+0x31c>)
 8002120:	601a      	str	r2, [r3, #0]

	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002122:	4bbc      	ldr	r3, [pc, #752]	; (8002414 <CommTask+0x31c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 31ff 	mov.w	r1, #4294967295
 800212a:	4618      	mov	r0, r3
 800212c:	f009 fafb 	bl	800b726 <xQueueTakeMutexRecursive>
	commsInit();
 8002130:	f000 fa84 	bl	800263c <commsInit>
	xSemaphoreGiveRecursive(commsMutex);
 8002134:	4bb7      	ldr	r3, [pc, #732]	; (8002414 <CommTask+0x31c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f009 fac1 	bl	800b6c0 <xQueueGiveMutexRecursive>

#ifdef USE_SCOPE
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 800213e:	4bb6      	ldr	r3, [pc, #728]	; (8002418 <CommTask+0x320>)
 8002140:	f107 041c 	add.w	r4, r7, #28
 8002144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t channels;
	uint32_t oneChanMemSize;
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 800214a:	4ab4      	ldr	r2, [pc, #720]	; (800241c <CommTask+0x324>)
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	ca07      	ldmia	r2, {r0, r1, r2}
 8002152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t i;
	uint32_t j;
#endif //USE_GEN || USE_SCOPE

	while(1){	
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002156:	4bae      	ldr	r3, [pc, #696]	; (8002410 <CommTask+0x318>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fca2 	bl	800baac <xQueueReceive>
		///commsSendString("COMMS_Run\r\n");
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002168:	4baa      	ldr	r3, [pc, #680]	; (8002414 <CommTask+0x31c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	4618      	mov	r0, r3
 8002172:	f009 fad8 	bl	800b726 <xQueueTakeMutexRecursive>


		switch(message){
 8002176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002178:	2b34      	cmp	r3, #52	; 0x34
 800217a:	f200 8236 	bhi.w	80025ea <CommTask+0x4f2>
 800217e:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <CommTask+0x8c>)
 8002180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002184:	08002259 	.word	0x08002259
 8002188:	080025cd 	.word	0x080025cd
 800218c:	08002593 	.word	0x08002593
 8002190:	08002599 	.word	0x08002599
 8002194:	080025eb 	.word	0x080025eb
 8002198:	080025eb 	.word	0x080025eb
 800219c:	080025eb 	.word	0x080025eb
 80021a0:	080025eb 	.word	0x080025eb
 80021a4:	080025eb 	.word	0x080025eb
 80021a8:	080025eb 	.word	0x080025eb
 80021ac:	080025eb 	.word	0x080025eb
 80021b0:	080025eb 	.word	0x080025eb
 80021b4:	080025eb 	.word	0x080025eb
 80021b8:	080025eb 	.word	0x080025eb
 80021bc:	080025eb 	.word	0x080025eb
 80021c0:	0800259f 	.word	0x0800259f
 80021c4:	080025a5 	.word	0x080025a5
 80021c8:	080025eb 	.word	0x080025eb
 80021cc:	080025eb 	.word	0x080025eb
 80021d0:	080025eb 	.word	0x080025eb
 80021d4:	080025eb 	.word	0x080025eb
 80021d8:	08002267 	.word	0x08002267
 80021dc:	080025db 	.word	0x080025db
 80021e0:	080025e3 	.word	0x080025e3
 80021e4:	080025eb 	.word	0x080025eb
 80021e8:	080025eb 	.word	0x080025eb
 80021ec:	080025eb 	.word	0x080025eb
 80021f0:	080025eb 	.word	0x080025eb
 80021f4:	080025eb 	.word	0x080025eb
 80021f8:	080025eb 	.word	0x080025eb
 80021fc:	080025eb 	.word	0x080025eb
 8002200:	080025ab 	.word	0x080025ab
 8002204:	080025b1 	.word	0x080025b1
 8002208:	080025eb 	.word	0x080025eb
 800220c:	080025eb 	.word	0x080025eb
 8002210:	08002545 	.word	0x08002545
 8002214:	0800255f 	.word	0x0800255f
 8002218:	080025eb 	.word	0x080025eb
 800221c:	080025eb 	.word	0x080025eb
 8002220:	080025eb 	.word	0x080025eb
 8002224:	080024ed 	.word	0x080024ed
 8002228:	080025bd 	.word	0x080025bd
 800222c:	080025c5 	.word	0x080025c5
 8002230:	080025b7 	.word	0x080025b7
 8002234:	080025eb 	.word	0x080025eb
 8002238:	080025eb 	.word	0x080025eb
 800223c:	080025eb 	.word	0x080025eb
 8002240:	080025eb 	.word	0x080025eb
 8002244:	08002579 	.word	0x08002579
 8002248:	080025eb 	.word	0x080025eb
 800224c:	080025f5 	.word	0x080025f5
 8002250:	080025eb 	.word	0x080025eb
 8002254:	080025d3 	.word	0x080025d3
		case MSG_DEVICE_IDN:		/* send IDN string */
			commsSendString(STR_ACK);
 8002258:	4871      	ldr	r0, [pc, #452]	; (8002420 <CommTask+0x328>)
 800225a:	f00c f982 	bl	800e562 <commsSendString>
			commsSendString(IDN_STRING);
 800225e:	4871      	ldr	r0, [pc, #452]	; (8002424 <CommTask+0x32c>)
 8002260:	f00c f97f 	bl	800e562 <commsSendString>
				commsSendString(SHIELD_STRING);
			}else if(isScopeShieldConnected()==2){
				commsSendString(SHIELD_STRING_2);
			}
#endif
			break;
 8002264:	e1c9      	b.n	80025fa <CommTask+0x502>
			//send data
#ifdef USE_SCOPE
		case MSG_SCOPE_DATA_READY:
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002266:	f001 fe61 	bl	8003f2c <getScopeState>
 800226a:	4603      	mov	r3, r0
 800226c:	2b04      	cmp	r3, #4
 800226e:	f040 81c3 	bne.w	80025f8 <CommTask+0x500>
				oneChanMemSize=getOneChanMemSize();
 8002272:	f001 fe1f 	bl	8003eb4 <getOneChanMemSize>
 8002276:	63b8      	str	r0, [r7, #56]	; 0x38
				dataLength = getSamples();
 8002278:	f001 fe34 	bl	8003ee4 <getSamples>
 800227c:	64f8      	str	r0, [r7, #76]	; 0x4c
				adcRes = getADCRes();
 800227e:	f001 fe3d 	bl	8003efc <getADCRes>
 8002282:	4603      	mov	r3, r0
 8002284:	86fb      	strh	r3, [r7, #54]	; 0x36
				channels=GetNumOfChannels();
 8002286:	f001 fdf3 	bl	8003e70 <GetNumOfChannels>
 800228a:	4603      	mov	r3, r0
 800228c:	86bb      	strh	r3, [r7, #52]	; 0x34

				j=scopeGetRealSmplFreq();
 800228e:	f002 f8c7 	bl	8004420 <scopeGetRealSmplFreq>
 8002292:	63f8      	str	r0, [r7, #60]	; 0x3c
				header[4]=(uint8_t)(j>>24);
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	0e1b      	lsrs	r3, r3, #24
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f887 3020 	strb.w	r3, [r7, #32]
				header[5]=(uint8_t)(j>>16);
 800229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				header[6]=(uint8_t)(j>>8);
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				header[7]=(uint8_t)(j);
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				if(adcRes>8){
 80022ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d91b      	bls.n	80022f8 <CommTask+0x200>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 80022c0:	f001 fe04 	bl	8003ecc <getTriggerIndex>
 80022c4:	4604      	mov	r4, r0
 80022c6:	f001 fe0d 	bl	8003ee4 <getSamples>
 80022ca:	4605      	mov	r5, r0
 80022cc:	f001 fe22 	bl	8003f14 <getPretrigger>
 80022d0:	4603      	mov	r3, r0
 80022d2:	fb03 f305 	mul.w	r3, r3, r5
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	1ae3      	subs	r3, r4, r3
 80022da:	005a      	lsls	r2, r3, #1
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	4413      	add	r3, r2
 80022e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80022e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022e8:	fb01 f202 	mul.w	r2, r1, r2
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
					dataLength*=2;
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f6:	e016      	b.n	8002326 <CommTask+0x22e>
				}else{
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 80022f8:	f001 fde8 	bl	8003ecc <getTriggerIndex>
 80022fc:	4604      	mov	r4, r0
 80022fe:	f001 fdf1 	bl	8003ee4 <getSamples>
 8002302:	4605      	mov	r5, r0
 8002304:	f001 fe06 	bl	8003f14 <getPretrigger>
 8002308:	4603      	mov	r3, r0
 800230a:	fb03 f305 	mul.w	r3, r3, r5
 800230e:	0c1b      	lsrs	r3, r3, #16
 8002310:	1ae2      	subs	r2, r4, r3
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	4413      	add	r3, r2
 8002316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002318:	fbb3 f2f2 	udiv	r2, r3, r2
 800231c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231e:	fb01 f202 	mul.w	r2, r1, r2
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
				} 

				header[8]=(uint8_t)adcRes;	
 8002326:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				header[9]=(uint8_t)(dataLength >> 16);
 800232e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				header[10]=(uint8_t)(dataLength >> 8);
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				header[11]=(uint8_t)dataLength;
 8002342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				header[15]=channels;
 800234a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(j+dataLength>oneChanMemSize){
 8002352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002356:	4413      	add	r3, r2
 8002358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235a:	429a      	cmp	r2, r3
 800235c:	d208      	bcs.n	8002370 <CommTask+0x278>
					dataLenFirst=oneChanMemSize-j;
 800235e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=dataLength-dataLenFirst;
 8002366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
 800236e:	e003      	b.n	8002378 <CommTask+0x280>
				}else{
					dataLenFirst=dataLength;
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=0;
 8002374:	2300      	movs	r3, #0
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
				}

				for(i=0;i<channels;i++){
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800237e:	e09f      	b.n	80024c0 <CommTask+0x3c8>

					pointer = (uint8_t*)getDataPointer(i);
 8002380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fd81 	bl	8003e8c <getDataPointer>
 800238a:	6338      	str	r0, [r7, #48]	; 0x30

					//sending header
					header[14]=(i+1);
 800238c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002390:	3301      	adds	r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					commsSendBuff(header,16);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	2110      	movs	r1, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f00c f8d0 	bl	800e544 <commsSendBuff>

					if(dataLenFirst>COMMS_BULK_SIZE ){
 80023a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a6:	2bc8      	cmp	r3, #200	; 0xc8
 80023a8:	d93e      	bls.n	8002428 <CommTask+0x330>
						tmpToSend=dataLenFirst;
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 80023b4:	e015      	b.n	80023e2 <CommTask+0x2ea>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 80023b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80023ba:	22c8      	movs	r2, #200	; 0xc8
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	4413      	add	r3, r2
 80023c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c8:	4413      	add	r3, r2
 80023ca:	21c8      	movs	r1, #200	; 0xc8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00c f8b9 	bl	800e544 <commsSendBuff>
							k++;
 80023d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80023d6:	3301      	adds	r3, #1
 80023d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 80023dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023de:	3bc8      	subs	r3, #200	; 0xc8
 80023e0:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 80023e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e4:	2bc8      	cmp	r3, #200	; 0xc8
 80023e6:	d8e6      	bhi.n	80023b6 <CommTask+0x2be>
						}
						if(tmpToSend>0){
 80023e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d028      	beq.n	8002440 <CommTask+0x348>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 80023ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80023f2:	22c8      	movs	r2, #200	; 0xc8
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fc:	4413      	add	r3, r2
 80023fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002400:	4413      	add	r3, r2
 8002402:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002404:	b292      	uxth	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f00c f89b 	bl	800e544 <commsSendBuff>
 800240e:	e017      	b.n	8002440 <CommTask+0x348>
 8002410:	200047b4 	.word	0x200047b4
 8002414:	200000fc 	.word	0x200000fc
 8002418:	08011238 	.word	0x08011238
 800241c:	0801124c 	.word	0x0801124c
 8002420:	080111dc 	.word	0x080111dc
 8002424:	080111e4 	.word	0x080111e4
						}
					}else if(dataLenFirst>0){
 8002428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <CommTask+0x348>
						commsSendBuff(pointer + j, dataLenFirst);
 800242e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	4413      	add	r3, r2
 8002434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002436:	b292      	uxth	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f00c f882 	bl	800e544 <commsSendBuff>
					}

					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002442:	2bc8      	cmp	r3, #200	; 0xc8
 8002444:	d92e      	bls.n	80024a4 <CommTask+0x3ac>
						tmpToSend=dataLenSecond;
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002450:	e013      	b.n	800247a <CommTask+0x382>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002456:	22c8      	movs	r2, #200	; 0xc8
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	461a      	mov	r2, r3
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	4413      	add	r3, r2
 8002462:	21c8      	movs	r1, #200	; 0xc8
 8002464:	4618      	mov	r0, r3
 8002466:	f00c f86d 	bl	800e544 <commsSendBuff>
							k++;
 800246a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800246e:	3301      	adds	r3, #1
 8002470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	3bc8      	subs	r3, #200	; 0xc8
 8002478:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	2bc8      	cmp	r3, #200	; 0xc8
 800247e:	d8e8      	bhi.n	8002452 <CommTask+0x35a>
						}
						if(tmpToSend>0){
 8002480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d017      	beq.n	80024b6 <CommTask+0x3be>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800248a:	22c8      	movs	r2, #200	; 0xc8
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	4413      	add	r3, r2
 8002496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002498:	b292      	uxth	r2, r2
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f00c f851 	bl	800e544 <commsSendBuff>
 80024a2:	e008      	b.n	80024b6 <CommTask+0x3be>
						}
					}else if(dataLenSecond>0){
 80024a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <CommTask+0x3be>
						commsSendBuff(pointer, dataLenSecond);
 80024aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b2:	f00c f847 	bl	800e544 <commsSendBuff>
				for(i=0;i<channels;i++){
 80024b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024ba:	3301      	adds	r3, #1
 80024bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80024c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f63f af59 	bhi.w	8002380 <CommTask+0x288>
					}
				}	
				///commsSendString("COMMS_DataSending\r\n");
				commsSendString(STR_SCOPE_OK);
 80024ce:	484e      	ldr	r0, [pc, #312]	; (8002608 <CommTask+0x510>)
 80024d0:	f00c f847 	bl	800e562 <commsSendString>
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 80024d4:	2314      	movs	r3, #20
 80024d6:	81fb      	strh	r3, [r7, #14]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <CommTask+0x514>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	f107 010e 	add.w	r1, r7, #14
 80024e0:	2300      	movs	r3, #0
 80024e2:	f04f 32ff 	mov.w	r2, #4294967295
 80024e6:	f009 f953 	bl	800b790 <xQueueGenericSend>

			}
			break;
 80024ea:	e085      	b.n	80025f8 <CommTask+0x500>
#endif //USE_SCOPE
			//send generating frequency
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_SEND_FREQ:
			for(i = 0;i<MAX_DAC_CHANNELS;i++){
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80024f2:	e022      	b.n	800253a <CommTask+0x442>
				header_gen[4]=i+1+48;
 80024f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024f8:	3331      	adds	r3, #49	; 0x31
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	753b      	strb	r3, [r7, #20]
				j=genGetRealSmplFreq(i+1);
 80024fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002502:	3301      	adds	r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fea0 	bl	800324c <genGetRealSmplFreq>
 800250c:	63f8      	str	r0, [r7, #60]	; 0x3c
				header_gen[9]=(uint8_t)(j>>16);
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	b2db      	uxtb	r3, r3
 8002514:	767b      	strb	r3, [r7, #25]
				header_gen[10]=(uint8_t)(j>>8);
 8002516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	b2db      	uxtb	r3, r3
 800251c:	76bb      	strb	r3, [r7, #26]
				header_gen[11]=(uint8_t)(j);
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	b2db      	uxtb	r3, r3
 8002522:	76fb      	strb	r3, [r7, #27]
				commsSendBuff(header_gen,12);
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	210c      	movs	r1, #12
 800252a:	4618      	mov	r0, r3
 800252c:	f00c f80a 	bl	800e544 <commsSendBuff>
			for(i = 0;i<MAX_DAC_CHANNELS;i++){
 8002530:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002534:	3301      	adds	r3, #1
 8002536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800253a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800253e:	2b01      	cmp	r3, #1
 8002540:	d9d8      	bls.n	80024f4 <CommTask+0x3fc>
			}
			break;
 8002542:	e05a      	b.n	80025fa <CommTask+0x502>
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_REAL_FREQ_CH1:
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002544:	4832      	ldr	r0, [pc, #200]	; (8002610 <CommTask+0x518>)
 8002546:	f00c f80c 	bl	800e562 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 800254a:	4b32      	ldr	r3, [pc, #200]	; (8002614 <CommTask+0x51c>)
 800254c:	ed93 7b06 	vldr	d7, [r3, #24]
 8002550:	eeb0 0a47 	vmov.f32	s0, s14
 8002554:	eef0 0a67 	vmov.f32	s1, s15
 8002558:	f00c f81e 	bl	800e598 <commsSendDouble>
			break;
 800255c:	e04d      	b.n	80025fa <CommTask+0x502>
		case MSG_GEN_PWM_REAL_FREQ_CH2:
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 800255e:	482e      	ldr	r0, [pc, #184]	; (8002618 <CommTask+0x520>)
 8002560:	f00b ffff 	bl	800e562 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <CommTask+0x51c>)
 8002566:	ed93 7b08 	vldr	d7, [r3, #32]
 800256a:	eeb0 0a47 	vmov.f32	s0, s14
 800256e:	eef0 0a67 	vmov.f32	s1, s15
 8002572:	f00c f811 	bl	800e598 <commsSendDouble>
			break;
 8002576:	e040      	b.n	80025fa <CommTask+0x502>
			/* ---------------------------------------------------- */
			/* ------------------ END OF COUNTER ------------------ */
			/* ---------------------------------------------------- */
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_REAL_FREQ:
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 8002578:	4828      	ldr	r0, [pc, #160]	; (800261c <CommTask+0x524>)
 800257a:	f00b fff2 	bl	800e562 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <CommTask+0x528>)
 8002580:	ed93 7b06 	vldr	d7, [r3, #24]
 8002584:	eeb0 0a47 	vmov.f32	s0, s14
 8002588:	eef0 0a67 	vmov.f32	s1, s15
 800258c:	f00c f804 	bl	800e598 <commsSendDouble>
			break;
 8002590:	e033      	b.n	80025fa <CommTask+0x502>
			//				taskYIELD();
			//      }
			break;
#endif //USE_LOG_ANLYS
		case MSG_SYSTEM_CONFIG:
			sendSystConf();
 8002592:	f000 f97d 	bl	8002890 <sendSystConf>
			break;
 8002596:	e030      	b.n	80025fa <CommTask+0x502>
		case MSG_COMMS_CONFIG:
			sendCommsConf();
 8002598:	f000 f994 	bl	80028c4 <sendCommsConf>
			break;
 800259c:	e02d      	b.n	80025fa <CommTask+0x502>
#ifdef USE_SCOPE
		case MSG_SCOPE_CONFIG:
			sendScopeConf();
 800259e:	f000 f9fb 	bl	8002998 <sendScopeConf>
			break;
 80025a2:	e02a      	b.n	80025fa <CommTask+0x502>
		case MSG_SCOPE_INPUTS:
			sendScopeInputs();
 80025a4:	f000 fa58 	bl	8002a58 <sendScopeInputs>
			break;
 80025a8:	e027      	b.n	80025fa <CommTask+0x502>
			sendShieldPresence();
			break;
#endif //USE_SHIELD
#ifdef USE_GEN
		case MSG_GEN_CONFIG:
			sendGenConf();
 80025aa:	f000 fad1 	bl	8002b50 <sendGenConf>
			break;
 80025ae:	e024      	b.n	80025fa <CommTask+0x502>
#endif //USE_GEN
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_CONFIG:
			sendGenPwmConf();
 80025b0:	f000 fb14 	bl	8002bdc <sendGenPwmConf>
			break;
 80025b4:	e021      	b.n	80025fa <CommTask+0x502>
#endif //USE_GEN_PWM
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_CONFIG:
			sendSyncPwmConf();
 80025b6:	f000 fb45 	bl	8002c44 <sendSyncPwmConf>
			break;
 80025ba:	e01e      	b.n	80025fa <CommTask+0x502>
			sendLogAnlysConf();
			break;
#endif //USE_LOG_ANLYS
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_NEXT:	/* Gen send next data block */
			commsSendString(STR_GEN_NEXT);
 80025bc:	4819      	ldr	r0, [pc, #100]	; (8002624 <CommTask+0x52c>)
 80025be:	f00b ffd0 	bl	800e562 <commsSendString>
			break;
 80025c2:	e01a      	b.n	80025fa <CommTask+0x502>
#endif //USE_GEN || USE_GEN_PWM
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_OK:	/* Gen send OK status */
			commsSendString(STR_GEN_OK);
 80025c4:	4818      	ldr	r0, [pc, #96]	; (8002628 <CommTask+0x530>)
 80025c6:	f00b ffcc 	bl	800e562 <commsSendString>
			break;
 80025ca:	e016      	b.n	80025fa <CommTask+0x502>
#endif //USE_GEN || USE_GEN_PWM
		case MSG_SYSTEM_VERSION:
			sendSystemVersion();
 80025cc:	f000 f996 	bl	80028fc <sendSystemVersion>
			break;
 80025d0:	e013      	b.n	80025fa <CommTask+0x502>
		case MSG_COMMS_FLUSH:
			break;
		case MSG_ACK:
			commsSendString(STR_ACK);
 80025d2:	4816      	ldr	r0, [pc, #88]	; (800262c <CommTask+0x534>)
 80025d4:	f00b ffc5 	bl	800e562 <commsSendString>
			break;
 80025d8:	e00f      	b.n	80025fa <CommTask+0x502>
#ifdef USE_SCOPE
		case MSG_SCOPE_TRIGGER:
			commsSendString(STR_SCOPE_TRIG);
 80025da:	4815      	ldr	r0, [pc, #84]	; (8002630 <CommTask+0x538>)
 80025dc:	f00b ffc1 	bl	800e562 <commsSendString>
			break;
 80025e0:	e00b      	b.n	80025fa <CommTask+0x502>
		case MSG_SCOPE_SMPL_STARTED:
			commsSendString(STR_SCOPE_SMPL);
 80025e2:	4814      	ldr	r0, [pc, #80]	; (8002634 <CommTask+0x53c>)
 80025e4:	f00b ffbd 	bl	800e562 <commsSendString>
			break;
 80025e8:	e007      	b.n	80025fa <CommTask+0x502>
#endif
		default:
			/* Not known message send */
			commsSendUint32(message);
 80025ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00b ff8c 	bl	800e50a <commsSendUint32>
 80025f2:	e002      	b.n	80025fa <CommTask+0x502>
			break;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <CommTask+0x502>
			break;
 80025f8:	bf00      	nop
			//commsSendString(STR_UNKNOWN_MSG);
		}
		//flushBuff(200);
		xSemaphoreGiveRecursive(commsMutex);
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <CommTask+0x540>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f009 f85e 	bl	800b6c0 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002604:	e5a7      	b.n	8002156 <CommTask+0x5e>
 8002606:	bf00      	nop
 8002608:	080111f8 	.word	0x080111f8
 800260c:	20004fd8 	.word	0x20004fd8
 8002610:	08011200 	.word	0x08011200
 8002614:	200047c0 	.word	0x200047c0
 8002618:	08011208 	.word	0x08011208
 800261c:	08011210 	.word	0x08011210
 8002620:	20013c98 	.word	0x20013c98
 8002624:	08011218 	.word	0x08011218
 8002628:	08011220 	.word	0x08011220
 800262c:	080111dc 	.word	0x080111dc
 8002630:	08011228 	.word	0x08011228
 8002634:	08011230 	.word	0x08011230
 8002638:	200000fc 	.word	0x200000fc

0800263c <commsInit>:
/**
 * @brief  Communication initialisation.
 * @param  None
 * @retval None
 */
void commsInit(void){
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
#ifdef USE_USB
	MX_USB_DEVICE_Init();
#endif //USE_USB
	MX_UART_Init();
 8002640:	f00d fc40 	bl	800fec4 <MX_UART_Init>
	comm.memory = commBuffMem;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <commsInit+0x2c>)
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <commsInit+0x30>)
 8002648:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <commsInit+0x2c>)
 800264c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002650:	809a      	strh	r2, [r3, #4]
	comm.writePointer = 0;
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <commsInit+0x2c>)
 8002654:	2200      	movs	r2, #0
 8002656:	80da      	strh	r2, [r3, #6]
	comm.readPointer = 0;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <commsInit+0x2c>)
 800265a:	2200      	movs	r2, #0
 800265c:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 800265e:	4b02      	ldr	r3, [pc, #8]	; (8002668 <commsInit+0x2c>)
 8002660:	2200      	movs	r2, #0
 8002662:	729a      	strb	r2, [r3, #10]
	//	commTX.bufferSize = COMM_TX_BUFFER_SIZE;
	//	commTX.writePointer = 0;
	//	commTX.readPointer = 0;
	//	commTX.state = BUFF_EMPTY;
	//HAL_UART_Receive_DMA(&huart2,comm.memory,comm.bufferSize);
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000300 	.word	0x20000300
 800266c:	20000100 	.word	0x20000100

08002670 <commBufferStoreByte>:
/**
 * @brief  Store incoming byte to buffer
 * @param  incoming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commBufferStoreByte(uint8_t chr){
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	if(comm.state == BUFF_FULL){
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <commBufferStoreByte+0x78>)
 800267c:	7a9b      	ldrb	r3, [r3, #10]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d101      	bne.n	8002686 <commBufferStoreByte+0x16>
		return 1;
 8002682:	2301      	movs	r3, #1
 8002684:	e029      	b.n	80026da <commBufferStoreByte+0x6a>
	}else{
		*(comm.memory + comm.writePointer) = chr;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <commBufferStoreByte+0x78>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <commBufferStoreByte+0x78>)
 800268c:	88d2      	ldrh	r2, [r2, #6]
 800268e:	4413      	add	r3, r2
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	701a      	strb	r2, [r3, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <commBufferStoreByte+0x78>)
 8002696:	88db      	ldrh	r3, [r3, #6]
 8002698:	3301      	adds	r3, #1
 800269a:	425a      	negs	r2, r3
 800269c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a4:	bf58      	it	pl
 80026a6:	4253      	negpl	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <commBufferStoreByte+0x78>)
 80026ac:	80da      	strh	r2, [r3, #6]
		if(comm.state == BUFF_EMPTY){
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <commBufferStoreByte+0x78>)
 80026b0:	7a9b      	ldrb	r3, [r3, #10]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <commBufferStoreByte+0x4e>
			comm.state = BUFF_DATA;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <commBufferStoreByte+0x78>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	729a      	strb	r2, [r3, #10]
 80026bc:	e00c      	b.n	80026d8 <commBufferStoreByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <commBufferStoreByte+0x78>)
 80026c0:	7a9b      	ldrb	r3, [r3, #10]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <commBufferStoreByte+0x68>
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <commBufferStoreByte+0x78>)
 80026c8:	88da      	ldrh	r2, [r3, #6]
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <commBufferStoreByte+0x78>)
 80026cc:	891b      	ldrh	r3, [r3, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d102      	bne.n	80026d8 <commBufferStoreByte+0x68>
			comm.state = BUFF_FULL;
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <commBufferStoreByte+0x78>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 80026d8:	2300      	movs	r3, #0
	}
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000300 	.word	0x20000300

080026ec <commBufferReadByte>:
/**
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(comm.state == BUFF_EMPTY){
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <commBufferReadByte+0x78>)
 80026f6:	7a9b      	ldrb	r3, [r3, #10]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <commBufferReadByte+0x14>
		return 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e02a      	b.n	8002756 <commBufferReadByte+0x6a>
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <commBufferReadByte+0x78>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <commBufferReadByte+0x78>)
 8002706:	8912      	ldrh	r2, [r2, #8]
 8002708:	4413      	add	r3, r2
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	701a      	strb	r2, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <commBufferReadByte+0x78>)
 8002712:	891b      	ldrh	r3, [r3, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	425a      	negs	r2, r3
 8002718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	bf58      	it	pl
 8002722:	4253      	negpl	r3, r2
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <commBufferReadByte+0x78>)
 8002728:	811a      	strh	r2, [r3, #8]
		if(comm.state == BUFF_FULL){
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <commBufferReadByte+0x78>)
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d103      	bne.n	800273a <commBufferReadByte+0x4e>
			comm.state = BUFF_DATA;
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <commBufferReadByte+0x78>)
 8002734:	2201      	movs	r2, #1
 8002736:	729a      	strb	r2, [r3, #10]
 8002738:	e00c      	b.n	8002754 <commBufferReadByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <commBufferReadByte+0x78>)
 800273c:	7a9b      	ldrb	r3, [r3, #10]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <commBufferReadByte+0x68>
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <commBufferReadByte+0x78>)
 8002744:	88da      	ldrh	r2, [r3, #6]
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <commBufferReadByte+0x78>)
 8002748:	891b      	ldrh	r3, [r3, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d102      	bne.n	8002754 <commBufferReadByte+0x68>
			comm.state = BUFF_EMPTY;
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <commBufferReadByte+0x78>)
 8002750:	2200      	movs	r2, #0
 8002752:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 8002754:	2300      	movs	r3, #0
	}
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000300 	.word	0x20000300

08002768 <commBufferReadNBytes>:
/**
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0; i < count; i++){
 8002774:	2300      	movs	r3, #0
 8002776:	81fb      	strh	r3, [r7, #14]
 8002778:	e00e      	b.n	8002798 <commBufferReadNBytes+0x30>
		if(commBufferReadByte(mem++) == 1){
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ffb3 	bl	80026ec <commBufferReadByte>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <commBufferReadNBytes+0x2a>
			return i;
 800278c:	89fb      	ldrh	r3, [r7, #14]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e008      	b.n	80027a4 <commBufferReadNBytes+0x3c>
	for(uint16_t i = 0; i < count; i++){
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	3301      	adds	r3, #1
 8002796:	81fb      	strh	r3, [r7, #14]
 8002798:	89fa      	ldrh	r2, [r7, #14]
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3ec      	bcc.n	800277a <commBufferReadNBytes+0x12>
		}
	}
	return count;
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	b2db      	uxtb	r3, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
 80027b2:	463b      	mov	r3, r7
 80027b4:	2104      	movs	r1, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffd6 	bl	8002768 <commBufferReadNBytes>
	uint32_t finalVal = array[0] & 0xFF;
 80027bc:	783b      	ldrb	r3, [r7, #0]
 80027be:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[1]) << 8;
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[2]) << 16;
 80027cc:	78bb      	ldrb	r3, [r7, #2]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[3]) << 24;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	607b      	str	r3, [r7, #4]
	return finalVal;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]
	if (chr==';'){
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b3b      	cmp	r3, #59	; 0x3b
 8002802:	d112      	bne.n	800282a <commInputByte+0x3a>
		result = commBufferStoreByte(chr);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff32 	bl	8002670 <commBufferStoreByte>
 800280c:	4603      	mov	r3, r0
 800280e:	75fb      	strb	r3, [r7, #23]
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 8002810:	2331      	movs	r3, #49	; 0x31
 8002812:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <commInputByte+0x4c>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f107 0210 	add.w	r2, r7, #16
 800281c:	f107 010e 	add.w	r1, r7, #14
 8002820:	2300      	movs	r3, #0
 8002822:	f009 f8af 	bl	800b984 <xQueueGenericSendFromISR>
		return result;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	e004      	b.n	8002834 <commInputByte+0x44>
	}else{
		return commBufferStoreByte(chr);
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff1f 	bl	8002670 <commBufferStoreByte>
 8002832:	4603      	mov	r3, r0
	}
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200047b0 	.word	0x200047b0

08002840 <getBytesAvailable>:

uint16_t getBytesAvailable(){
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <getBytesAvailable+0x4c>)
 8002848:	7a9b      	ldrb	r3, [r3, #10]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d102      	bne.n	8002854 <getBytesAvailable+0x14>
		return COMM_BUFFER_SIZE;
 800284e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002852:	e015      	b.n	8002880 <getBytesAvailable+0x40>
	}else if(comm.state==BUFF_EMPTY){
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <getBytesAvailable+0x4c>)
 8002856:	7a9b      	ldrb	r3, [r3, #10]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <getBytesAvailable+0x20>
		return 0;
 800285c:	2300      	movs	r3, #0
 800285e:	e00f      	b.n	8002880 <getBytesAvailable+0x40>
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <getBytesAvailable+0x4c>)
 8002862:	88db      	ldrh	r3, [r3, #6]
 8002864:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <getBytesAvailable+0x4c>)
 800286a:	8912      	ldrh	r2, [r2, #8]
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	425a      	negs	r2, r3
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002878:	bf58      	it	pl
 800287a:	4253      	negpl	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
		return result;
 800287e:	88fb      	ldrh	r3, [r7, #6]
	}
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	20000300 	.word	0x20000300

08002890 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	commsSendString("SYST");
 8002894:	4809      	ldr	r0, [pc, #36]	; (80028bc <sendSystConf+0x2c>)
 8002896:	f00b fe64 	bl	800e562 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 800289a:	f004 ff8d 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800289e:	4603      	mov	r3, r0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00b fe32 	bl	800e50a <commsSendUint32>
	commsSendUint32(HAL_RCC_GetPCLK2Freq()); //PCLK
 80028a6:	f004 ffa7 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00b fe2c 	bl	800e50a <commsSendUint32>
	commsSendString(MCU);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <sendSystConf+0x30>)
 80028b4:	f00b fe55 	bl	800e562 <commsSendString>
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	0801125c 	.word	0x0801125c
 80028c0:	08011264 	.word	0x08011264

080028c4 <sendCommsConf>:
/**
 * @brief  Send Communication configuration.
 * @param  None
 * @retval None
 */
void sendCommsConf(){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	commsSendString("COMM");
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <sendCommsConf+0x2c>)
 80028ca:	f00b fe4a 	bl	800e562 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 80028ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028d2:	f00b fe1a 	bl	800e50a <commsSendUint32>
	commsSendUint32(UART_SPEED);
 80028d6:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 80028da:	f00b fe16 	bl	800e50a <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <sendCommsConf+0x30>)
 80028e0:	f00b fe3f 	bl	800e562 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <sendCommsConf+0x34>)
 80028e6:	f00b fe3c 	bl	800e562 <commsSendString>
#ifdef USE_USB
	commsSendString("USB_");
	commsSendString(USB_DP_PIN_STR);
	commsSendString(USB_DM_PIN_STR);
#endif
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	08011270 	.word	0x08011270
 80028f4:	08011278 	.word	0x08011278
 80028f8:	08011280 	.word	0x08011280

080028fc <sendSystemVersion>:
/**
 * @brief  Send System version.
 * @param  None
 * @retval None
 */
void sendSystemVersion(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	commsSendString("VER_");
 8002900:	481e      	ldr	r0, [pc, #120]	; (800297c <sendSystemVersion+0x80>)
 8002902:	f00b fe2e 	bl	800e562 <commsSendString>
	commsSendString("Instrulab FW"); 	//12
 8002906:	481e      	ldr	r0, [pc, #120]	; (8002980 <sendSystemVersion+0x84>)
 8002908:	f00b fe2b 	bl	800e562 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 800290c:	481d      	ldr	r0, [pc, #116]	; (8002984 <sendSystemVersion+0x88>)
 800290e:	f00b fe28 	bl	800e562 <commsSendString>
	commsSendString(BUILD);						//4
 8002912:	481d      	ldr	r0, [pc, #116]	; (8002988 <sendSystemVersion+0x8c>)
 8002914:	f00b fe25 	bl	800e562 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002918:	481c      	ldr	r0, [pc, #112]	; (800298c <sendSystemVersion+0x90>)
 800291a:	f00b fe22 	bl	800e562 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 800291e:	481c      	ldr	r0, [pc, #112]	; (8002990 <sendSystemVersion+0x94>)
 8002920:	f00b fe1f 	bl	800e562 <commsSendString>
	commsSendString("ST HAL");				//6
 8002924:	481b      	ldr	r0, [pc, #108]	; (8002994 <sendSystemVersion+0x98>)
 8002926:	f00b fe1c 	bl	800e562 <commsSendString>
	commsSend('V');
 800292a:	2056      	movs	r0, #86	; 0x56
 800292c:	f00b fde0 	bl	800e4f0 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8002930:	f001 ffc8 	bl	80048c4 <HAL_GetHalVersion>
 8002934:	4603      	mov	r3, r0
 8002936:	0e1b      	lsrs	r3, r3, #24
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3330      	adds	r3, #48	; 0x30
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f00b fdd6 	bl	800e4f0 <commsSend>
	commsSend('.');
 8002944:	202e      	movs	r0, #46	; 0x2e
 8002946:	f00b fdd3 	bl	800e4f0 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 800294a:	f001 ffbb 	bl	80048c4 <HAL_GetHalVersion>
 800294e:	4603      	mov	r3, r0
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3330      	adds	r3, #48	; 0x30
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f00b fdc9 	bl	800e4f0 <commsSend>
	commsSend('.');
 800295e:	202e      	movs	r0, #46	; 0x2e
 8002960:	f00b fdc6 	bl	800e4f0 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002964:	f001 ffae 	bl	80048c4 <HAL_GetHalVersion>
 8002968:	4603      	mov	r3, r0
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3330      	adds	r3, #48	; 0x30
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f00b fdbc 	bl	800e4f0 <commsSend>

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	08011288 	.word	0x08011288
 8002980:	08011290 	.word	0x08011290
 8002984:	080112a0 	.word	0x080112a0
 8002988:	080112a8 	.word	0x080112a8
 800298c:	080112b0 	.word	0x080112b0
 8002990:	080112bc 	.word	0x080112bc
 8002994:	080112c4 	.word	0x080112c4

08002998 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("OSCP");
 800299e:	4827      	ldr	r0, [pc, #156]	; (8002a3c <sendScopeConf+0xa4>)
 80029a0:	f00b fddf 	bl	800e562 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 80029a4:	4826      	ldr	r0, [pc, #152]	; (8002a40 <sendScopeConf+0xa8>)
 80029a6:	f00b fdb0 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 80029aa:	f64e 2060 	movw	r0, #60000	; 0xea60
 80029ae:	f00b fdac 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f00b fda9 	bl	800e50a <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80029b8:	2300      	movs	r3, #0
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	e022      	b.n	8002a04 <sendScopeConf+0x6c>
		switch(i){
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d81b      	bhi.n	80029fc <sendScopeConf+0x64>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <sendScopeConf+0x34>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029e5 	.word	0x080029e5
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	080029f5 	.word	0x080029f5
		case 0:
			commsSendString(SCOPE_CH1_PIN_STR);
 80029dc:	4819      	ldr	r0, [pc, #100]	; (8002a44 <sendScopeConf+0xac>)
 80029de:	f00b fdc0 	bl	800e562 <commsSendString>
			break;
 80029e2:	e00b      	b.n	80029fc <sendScopeConf+0x64>
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
 80029e4:	4818      	ldr	r0, [pc, #96]	; (8002a48 <sendScopeConf+0xb0>)
 80029e6:	f00b fdbc 	bl	800e562 <commsSendString>
			break;
 80029ea:	e007      	b.n	80029fc <sendScopeConf+0x64>
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 80029ec:	4817      	ldr	r0, [pc, #92]	; (8002a4c <sendScopeConf+0xb4>)
 80029ee:	f00b fdb8 	bl	800e562 <commsSendString>
			break;
 80029f2:	e003      	b.n	80029fc <sendScopeConf+0x64>
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 80029f4:	4816      	ldr	r0, [pc, #88]	; (8002a50 <sendScopeConf+0xb8>)
 80029f6:	f00b fdb4 	bl	800e562 <commsSendString>
			break;
 80029fa:	bf00      	nop
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d9d9      	bls.n	80029be <sendScopeConf+0x26>
		}
	}
	commsSendUint32(SCOPE_VREF);
 8002a0a:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002a0e:	f00b fd7c 	bl	800e50a <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <sendScopeConf+0xbc>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00b fd77 	bl	800e50a <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fe08 	bl	8004634 <scopeGetRanges>
 8002a24:	4602      	mov	r2, r0
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f00b fd89 	bl	800e544 <commsSendBuff>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	080112cc 	.word	0x080112cc
 8002a40:	00249f00 	.word	0x00249f00
 8002a44:	080112d4 	.word	0x080112d4
 8002a48:	080112dc 	.word	0x080112dc
 8002a4c:	080112e4 	.word	0x080112e4
 8002a50:	080112ec 	.word	0x080112ec
 8002a54:	1fff7a2a 	.word	0x1fff7a2a

08002a58 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	commsSendString("INP_");
 8002a5e:	4833      	ldr	r0, [pc, #204]	; (8002b2c <sendScopeInputs+0xd4>)
 8002a60:	f00b fd7f 	bl	800e562 <commsSendString>

	if(MAX_ADC_CHANNELS>=1){
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8002a64:	2300      	movs	r3, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f00b fd42 	bl	800e4f0 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=2){
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00b fd3e 	bl	800e4f0 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=3){
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 8002a74:	2300      	movs	r3, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00b fd3a 	bl	800e4f0 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	e046      	b.n	8002b10 <sendScopeInputs+0xb8>
		commsSendString("/");
 8002a82:	482b      	ldr	r0, [pc, #172]	; (8002b30 <sendScopeInputs+0xd8>)
 8002a84:	f00b fd6d 	bl	800e562 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002a88:	2300      	movs	r3, #0
 8002a8a:	71bb      	strb	r3, [r7, #6]
 8002a8c:	e037      	b.n	8002afe <sendScopeInputs+0xa6>
			if(j>0){
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <sendScopeInputs+0x42>
				commsSendString(":");
 8002a94:	4827      	ldr	r0, [pc, #156]	; (8002b34 <sendScopeInputs+0xdc>)
 8002a96:	f00b fd64 	bl	800e562 <commsSendString>
			}
			switch(i){
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d82b      	bhi.n	8002af8 <sendScopeInputs+0xa0>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <sendScopeInputs+0x50>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ae9 	.word	0x08002ae9
			case 0:
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <sendScopeInputs+0xe0>)
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f00b fd4e 	bl	800e562 <commsSendString>
				break;
 8002ac6:	e017      	b.n	8002af8 <sendScopeInputs+0xa0>
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8002ac8:	79bb      	ldrb	r3, [r7, #6]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <sendScopeInputs+0xe4>)
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00b fd46 	bl	800e562 <commsSendString>
				break;
 8002ad6:	e00f      	b.n	8002af8 <sendScopeInputs+0xa0>
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 8002ad8:	79bb      	ldrb	r3, [r7, #6]
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <sendScopeInputs+0xe8>)
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00b fd3e 	bl	800e562 <commsSendString>
				break;
 8002ae6:	e007      	b.n	8002af8 <sendScopeInputs+0xa0>
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <sendScopeInputs+0xec>)
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00b fd36 	bl	800e562 <commsSendString>
				break;
 8002af6:	bf00      	nop
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002af8:	79bb      	ldrb	r3, [r7, #6]
 8002afa:	3301      	adds	r3, #1
 8002afc:	71bb      	strb	r3, [r7, #6]
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <sendScopeInputs+0xf0>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	79ba      	ldrb	r2, [r7, #6]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3c1      	bcc.n	8002a8e <sendScopeInputs+0x36>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d9b5      	bls.n	8002a82 <sendScopeInputs+0x2a>
			}
		}
	}
	commsSendString("/");
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <sendScopeInputs+0xd8>)
 8002b18:	f00b fd23 	bl	800e562 <commsSendString>
	commsSendString(";");
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <sendScopeInputs+0xf4>)
 8002b1e:	f00b fd20 	bl	800e562 <commsSendString>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	080112f4 	.word	0x080112f4
 8002b30:	080112fc 	.word	0x080112fc
 8002b34:	08011300 	.word	0x08011300
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	2000001c 	.word	0x2000001c
 8002b40:	20000028 	.word	0x20000028
 8002b44:	20000030 	.word	0x20000030
 8002b48:	0801178c 	.word	0x0801178c
 8002b4c:	08011304 	.word	0x08011304

08002b50 <sendGenConf>:
/**
 * @brief  Send Arb. DAC Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenConf(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GEN_");
 8002b56:	481d      	ldr	r0, [pc, #116]	; (8002bcc <sendGenConf+0x7c>)
 8002b58:	f00b fd03 	bl	800e562 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8002b5c:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <sendGenConf+0x80>)
 8002b5e:	f00b fcd4 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 8002b62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b66:	f00b fcd0 	bl	800e50a <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 8002b6a:	200c      	movs	r0, #12
 8002b6c:	f00b fccd 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8002b70:	2002      	movs	r0, #2
 8002b72:	f00b fcca 	bl	800e50a <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	e010      	b.n	8002b9e <sendGenConf+0x4e>
		switch(i){
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <sendGenConf+0x38>
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d004      	beq.n	8002b90 <sendGenConf+0x40>
 8002b86:	e007      	b.n	8002b98 <sendGenConf+0x48>
		case 0:
			commsSendString(GEN_CH1_PIN_STR);
 8002b88:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <sendGenConf+0x84>)
 8002b8a:	f00b fcea 	bl	800e562 <commsSendString>
			break;
 8002b8e:	e003      	b.n	8002b98 <sendGenConf+0x48>
		case 1:
			commsSendString(GEN_CH2_PIN_STR);
 8002b90:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <sendGenConf+0x88>)
 8002b92:	f00b fce6 	bl	800e562 <commsSendString>
			break;
 8002b96:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d9eb      	bls.n	8002b7c <sendGenConf+0x2c>
	}else{
		commsSendUint32(0);
		commsSendUint32(GEN_VREF);
	}
#else
	commsSendUint32(0);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f00b fcb0 	bl	800e50a <commsSendUint32>
	commsSendUint32(GEN_VREF);
 8002baa:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002bae:	f00b fcac 	bl	800e50a <commsSendUint32>
#endif
	commsSendUint32(GEN_VDDA);
 8002bb2:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002bb6:	f00b fca8 	bl	800e50a <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 8002bba:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002bbe:	f00b fca4 	bl	800e50a <commsSendUint32>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	08011308 	.word	0x08011308
 8002bd0:	001e8480 	.word	0x001e8480
 8002bd4:	08011310 	.word	0x08011310
 8002bd8:	08011318 	.word	0x08011318

08002bdc <sendGenPwmConf>:
/**
 * @brief  Send Arb. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenPwmConf(void){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GENP");		
 8002be2:	4813      	ldr	r0, [pc, #76]	; (8002c30 <sendGenPwmConf+0x54>)
 8002be4:	f00b fcbd 	bl	800e562 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8002be8:	2002      	movs	r0, #2
 8002bea:	f00b fc8e 	bl	800e50a <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 8002bee:	4811      	ldr	r0, [pc, #68]	; (8002c34 <sendGenPwmConf+0x58>)
 8002bf0:	f00b fc8b 	bl	800e50a <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 8002bf4:	4810      	ldr	r0, [pc, #64]	; (8002c38 <sendGenPwmConf+0x5c>)
 8002bf6:	f00b fc88 	bl	800e50a <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71fb      	strb	r3, [r7, #7]
 8002bfe:	e010      	b.n	8002c22 <sendGenPwmConf+0x46>
		switch(i){
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <sendGenPwmConf+0x30>
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d004      	beq.n	8002c14 <sendGenPwmConf+0x38>
 8002c0a:	e007      	b.n	8002c1c <sendGenPwmConf+0x40>
		case 0:
			commsSendString(GEN_PWM_CH1_PIN);
 8002c0c:	480b      	ldr	r0, [pc, #44]	; (8002c3c <sendGenPwmConf+0x60>)
 8002c0e:	f00b fca8 	bl	800e562 <commsSendString>
			break;
 8002c12:	e003      	b.n	8002c1c <sendGenPwmConf+0x40>
		case 1:
			commsSendString(GEN_PWM_CH2_PIN);
 8002c14:	480a      	ldr	r0, [pc, #40]	; (8002c40 <sendGenPwmConf+0x64>)
 8002c16:	f00b fca4 	bl	800e562 <commsSendString>
			break;
 8002c1a:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d9eb      	bls.n	8002c00 <sendGenPwmConf+0x24>
		}
	}
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08011320 	.word	0x08011320
 8002c34:	08f0d180 	.word	0x08f0d180
 8002c38:	047868c0 	.word	0x047868c0
 8002c3c:	08011328 	.word	0x08011328
 8002c40:	08011330 	.word	0x08011330

08002c44 <sendSyncPwmConf>:
 * @brief  Send Synch. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendSyncPwmConf(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("SYNP");		
 8002c4a:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <sendSyncPwmConf+0x74>)
 8002c4c:	f00b fc89 	bl	800e562 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8002c50:	481a      	ldr	r0, [pc, #104]	; (8002cbc <sendSyncPwmConf+0x78>)
 8002c52:	f00b fc5a 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 8002c56:	481a      	ldr	r0, [pc, #104]	; (8002cc0 <sendSyncPwmConf+0x7c>)
 8002c58:	f00b fc57 	bl	800e50a <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8002c5c:	2004      	movs	r0, #4
 8002c5e:	f00b fc54 	bl	800e50a <commsSendUint32>
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8002c62:	2300      	movs	r3, #0
 8002c64:	71fb      	strb	r3, [r7, #7]
 8002c66:	e020      	b.n	8002caa <sendSyncPwmConf+0x66>
		switch(i){
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d81a      	bhi.n	8002ca4 <sendSyncPwmConf+0x60>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <sendSyncPwmConf+0x30>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002c95 	.word	0x08002c95
 8002c80:	08002c9d 	.word	0x08002c9d
		case 0:
			commsSendString(SYNC_PWM_CH1_PIN);
 8002c84:	480f      	ldr	r0, [pc, #60]	; (8002cc4 <sendSyncPwmConf+0x80>)
 8002c86:	f00b fc6c 	bl	800e562 <commsSendString>
			break;
 8002c8a:	e00b      	b.n	8002ca4 <sendSyncPwmConf+0x60>
		case 1:
			commsSendString(SYNC_PWM_CH2_PIN);
 8002c8c:	480e      	ldr	r0, [pc, #56]	; (8002cc8 <sendSyncPwmConf+0x84>)
 8002c8e:	f00b fc68 	bl	800e562 <commsSendString>
			break;
 8002c92:	e007      	b.n	8002ca4 <sendSyncPwmConf+0x60>
		case 2:
			commsSendString(SYNC_PWM_CH3_PIN);
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <sendSyncPwmConf+0x88>)
 8002c96:	f00b fc64 	bl	800e562 <commsSendString>
			break;
 8002c9a:	e003      	b.n	8002ca4 <sendSyncPwmConf+0x60>
		case 3:
			commsSendString(SYNC_PWM_CH4_PIN);
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <sendSyncPwmConf+0x8c>)
 8002c9e:	f00b fc60 	bl	800e562 <commsSendString>
			break;
 8002ca2:	bf00      	nop
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d9db      	bls.n	8002c68 <sendSyncPwmConf+0x24>
		}
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08011338 	.word	0x08011338
 8002cbc:	023c3460 	.word	0x023c3460
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	08011340 	.word	0x08011340
 8002cc8:	08011348 	.word	0x08011348
 8002ccc:	08011350 	.word	0x08011350
 8002cd0:	08011358 	.word	0x08011358

08002cd4 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8002cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce0:	81fb      	strh	r3, [r7, #14]
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	2005      	movs	r0, #5
 8002ce8:	f008 fc5a 	bl	800b5a0 <xQueueGenericCreate>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <GeneratorTask+0x158>)
 8002cf0:	601a      	str	r2, [r3, #0]
	generatorSetDefault();
 8002cf2:	f000 f8fb 	bl	8002eec <generatorSetDefault>

	while(1){

		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <GeneratorTask+0x158>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f107 010e 	add.w	r1, r7, #14
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	4618      	mov	r0, r3
 8002d04:	f008 fed2 	bl	800baac <xQueueReceive>

		switch(message){
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	3b21      	subs	r3, #33	; 0x21
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	f200 8085 	bhi.w	8002e1c <GeneratorTask+0x148>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <GeneratorTask+0x44>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002def 	.word	0x08002def
 8002d1c:	08002de5 	.word	0x08002de5
 8002d20:	08002e1d 	.word	0x08002e1d
 8002d24:	08002e1d 	.word	0x08002e1d
 8002d28:	08002d6d 	.word	0x08002d6d
 8002d2c:	08002dad 	.word	0x08002dad
 8002d30:	08002df9 	.word	0x08002df9
 8002d34:	08002e1d 	.word	0x08002e1d
 8002d38:	08002e1d 	.word	0x08002e1d
 8002d3c:	08002e1d 	.word	0x08002e1d
 8002d40:	08002e1d 	.word	0x08002e1d
 8002d44:	08002e1d 	.word	0x08002e1d
 8002d48:	08002e1d 	.word	0x08002e1d
 8002d4c:	08002e1d 	.word	0x08002e1d
 8002d50:	08002e1d 	.word	0x08002e1d
 8002d54:	08002e1d 	.word	0x08002e1d
 8002d58:	08002e1d 	.word	0x08002e1d
 8002d5c:	08002e1d 	.word	0x08002e1d
 8002d60:	08002d65 	.word	0x08002d65
		case MSG_INVALIDATE:
			if(generator.state==GENERATOR_IDLE){}
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <GeneratorTask+0x15c>)
 8002d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			break;
 8002d6a:	e05e      	b.n	8002e2a <GeneratorTask+0x156>
		case MSG_GEN_START:
			if(generator.state==GENERATOR_IDLE){
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <GeneratorTask+0x15c>)
 8002d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d153      	bne.n	8002e20 <GeneratorTask+0x14c>
				if(generator.modeState==GENERATOR_DAC){
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <GeneratorTask+0x15c>)
 8002d7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <GeneratorTask+0xba>
					genInit();
 8002d84:	f000 f8f0 	bl	8002f68 <genInit>
					GeneratingEnable();
 8002d88:	f00b fd64 	bl	800e854 <GeneratingEnable>
 8002d8c:	e009      	b.n	8002da2 <GeneratorTask+0xce>
				}else if(generator.modeState==GENERATOR_PWM){
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <GeneratorTask+0x15c>)
 8002d90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d103      	bne.n	8002da2 <GeneratorTask+0xce>
#ifdef USE_GEN_PWM
					genPwmInit();
 8002d9a:	f000 f921 	bl	8002fe0 <genPwmInit>
					PWMGeneratingEnable();
 8002d9e:	f00c fd49 	bl	800f834 <PWMGeneratingEnable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_RUN;
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <GeneratorTask+0x15c>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8002daa:	e039      	b.n	8002e20 <GeneratorTask+0x14c>
		case MSG_GEN_STOP:
			if(generator.state==GENERATOR_RUN){
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <GeneratorTask+0x15c>)
 8002dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d135      	bne.n	8002e24 <GeneratorTask+0x150>
				if(generator.modeState==GENERATOR_DAC){
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <GeneratorTask+0x15c>)
 8002dba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <GeneratorTask+0xf6>
					GeneratingDisable();
 8002dc4:	f00b fd50 	bl	800e868 <GeneratingDisable>
 8002dc8:	e007      	b.n	8002dda <GeneratorTask+0x106>
				}else if(generator.modeState==GENERATOR_PWM){
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <GeneratorTask+0x15c>)
 8002dcc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <GeneratorTask+0x106>
#ifdef USE_GEN_PWM
					PWMGeneratingDisable();
 8002dd6:	f00c fd7f 	bl	800f8d8 <PWMGeneratingDisable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_IDLE;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <GeneratorTask+0x15c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8002de2:	e01f      	b.n	8002e24 <GeneratorTask+0x150>
		case MSG_GEN_PWM_MODE: /* Set PWM mode */
#ifdef USE_GEN_PWM
			generatorSetModePWM();
 8002de4:	f000 f850 	bl	8002e88 <generatorSetModePWM>
			TIMGenPwmInit();
 8002de8:	f00c fda6 	bl	800f938 <TIMGenPwmInit>
#endif //USE_GEN_PWM
			break;
 8002dec:	e01d      	b.n	8002e2a <GeneratorTask+0x156>
		case MSG_GEN_DAC_MODE:  /* Set DAC mode */
			generatorSetModeDAC();
 8002dee:	f000 f859 	bl	8002ea4 <generatorSetModeDAC>
			TIMGenInit();
 8002df2:	f00c fc61 	bl	800f6b8 <TIMGenInit>
			break;
 8002df6:	e018      	b.n	8002e2a <GeneratorTask+0x156>
		case MSG_GEN_DEINIT:
			if(generator.modeState==GENERATOR_DAC){				
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <GeneratorTask+0x15c>)
 8002dfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <GeneratorTask+0x136>
				TIMGenDacDeinit();
 8002e04:	f00c fc62 	bl	800f6cc <TIMGenDacDeinit>
#ifdef USE_GEN_PWM
				TIMGenPwmDeinit();

#endif //USE_GEN_PWM
			}
			break;
 8002e08:	e00e      	b.n	8002e28 <GeneratorTask+0x154>
			}else if(generator.modeState==GENERATOR_PWM){
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <GeneratorTask+0x15c>)
 8002e0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <GeneratorTask+0x154>
				TIMGenPwmDeinit();
 8002e16:	f00c fd9b 	bl	800f950 <TIMGenPwmDeinit>
			break;
 8002e1a:	e005      	b.n	8002e28 <GeneratorTask+0x154>
		default:
			break;
 8002e1c:	bf00      	nop
 8002e1e:	e76a      	b.n	8002cf6 <GeneratorTask+0x22>
			break;
 8002e20:	bf00      	nop
 8002e22:	e768      	b.n	8002cf6 <GeneratorTask+0x22>
			break;
 8002e24:	bf00      	nop
 8002e26:	e766      	b.n	8002cf6 <GeneratorTask+0x22>
			break;
 8002e28:	bf00      	nop
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8002e2a:	e764      	b.n	8002cf6 <GeneratorTask+0x22>
 8002e2c:	20004800 	.word	0x20004800
 8002e30:	200047c0 	.word	0x200047c0

08002e34 <genSetMode>:
 * @brief  Sets arb. generator mode.
 * @param  mode: GEN_DAC or GEN_PWM
 * @retval None
 */
void genSetMode(uint8_t mode)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;

	switch(mode){
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <genSetMode+0x2e>
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d000      	beq.n	8002e4a <genSetMode+0x16>
	case GEN_DAC:
		passMsg = MSG_GEN_DAC_MODE;
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		break;
	default:
		break;
 8002e48:	e017      	b.n	8002e7a <genSetMode+0x46>
		passMsg = MSG_GEN_PWM_MODE;
 8002e4a:	2322      	movs	r3, #34	; 0x22
 8002e4c:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <genSetMode+0x50>)
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f107 010e 	add.w	r1, r7, #14
 8002e56:	2300      	movs	r3, #0
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	f008 fc98 	bl	800b790 <xQueueGenericSend>
		break;
 8002e60:	e00b      	b.n	8002e7a <genSetMode+0x46>
		passMsg = MSG_GEN_DAC_MODE;
 8002e62:	2321      	movs	r3, #33	; 0x21
 8002e64:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <genSetMode+0x50>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	f107 010e 	add.w	r1, r7, #14
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	f008 fc8c 	bl	800b790 <xQueueGenericSend>
		break;
 8002e78:	bf00      	nop
	}
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20004800 	.word	0x20004800

08002e88 <generatorSetModePWM>:
/**
 * @brief  Sets generator mode to PWM.
 * @param  None
 * @retval None
 */
void generatorSetModePWM(void){
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
	//generator_deinit();
	generator.modeState = GENERATOR_PWM;
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <generatorSetModePWM+0x18>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200047c0 	.word	0x200047c0

08002ea4 <generatorSetModeDAC>:
/**
 * @brief  Sets generator mode to DAC.
 * @param  None
 * @retval None
 */
void generatorSetModeDAC(void){
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
	//generator_deinit();
	//TIMGenPwmDeinit();	
	generator.modeState = GENERATOR_DAC;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <generatorSetModeDAC+0x18>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200047c0 	.word	0x200047c0

08002ec0 <generator_deinit>:
/**
 * @brief  Generator deinitialization.
 * @param  None
 * @retval None
 */
void generator_deinit(void){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	switch(generator.modeState){
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <generator_deinit+0x28>)
 8002ec6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <generator_deinit+0x1c>
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d000      	beq.n	8002ed6 <generator_deinit+0x16>
		break;
	case GENERATOR_DAC:
		TIMGenDacDeinit();
		break;
	}
}
 8002ed4:	e005      	b.n	8002ee2 <generator_deinit+0x22>
		TIMGenPwmDeinit();
 8002ed6:	f00c fd3b 	bl	800f950 <TIMGenPwmDeinit>
		break;
 8002eda:	e002      	b.n	8002ee2 <generator_deinit+0x22>
		TIMGenDacDeinit();
 8002edc:	f00c fbf6 	bl	800f6cc <TIMGenDacDeinit>
		break;
 8002ee0:	bf00      	nop
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200047c0 	.word	0x200047c0

08002eec <generatorSetDefault>:
 * @brief  Generator set Default values
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
	generator.bufferMemory=generatorBuffer;
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <generatorSetDefault+0x74>)
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <generatorSetDefault+0x78>)
 8002ef6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8002ef8:	2300      	movs	r3, #0
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	e011      	b.n	8002f22 <generatorSetDefault+0x36>
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <generatorSetDefault+0x74>)
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f0a:	605a      	str	r2, [r3, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <generatorSetDefault+0x74>)
 8002f10:	3302      	adds	r3, #2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f1a:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d9ea      	bls.n	8002efe <generatorSetDefault+0x12>
	}

	generator.numOfChannles=1;
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <generatorSetDefault+0x74>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <generatorSetDefault+0x74>)
 8002f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <generatorSetDefault+0x74>)
 8002f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f3e:	869a      	strh	r2, [r3, #52]	; 0x34
	generator.pChanMem[0]=generatorBuffer;
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <generatorSetDefault+0x74>)
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <generatorSetDefault+0x78>)
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
	generator.state=GENERATOR_IDLE;
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <generatorSetDefault+0x74>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <generatorSetDefault+0x74>)
 8002f50:	220c      	movs	r2, #12
 8002f52:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	200047c0 	.word	0x200047c0
 8002f64:	20004804 	.word	0x20004804

08002f68 <genInit>:
 * @brief  Arb. DAC Generator initialization function.
 * @param  None
 * @retval None
 */
void genInit(void)
{	
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	e02c      	b.n	8002fce <genInit+0x66>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <genInit+0x74>)
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	79f9      	ldrb	r1, [r7, #7]
 8002f80:	2200      	movs	r2, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f00c fb0c 	bl	800f5a0 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <genInit+0x74>)
 8002f8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	79fa      	ldrb	r2, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d212      	bcs.n	8002fbc <genInit+0x54>
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <genInit+0x74>)
 8002f9a:	330a      	adds	r3, #10
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <genInit+0x74>)
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	889b      	ldrh	r3, [r3, #4]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f00b fbe5 	bl	800e784 <DAC_DMA_Reconfig>
 8002fba:	e005      	b.n	8002fc8 <genInit+0x60>
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f00b fbde 	bl	800e784 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	71fb      	strb	r3, [r7, #7]
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d9cf      	bls.n	8002f74 <genInit+0xc>
		}
	}	
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200047c0 	.word	0x200047c0

08002fe0 <genPwmInit>:
 * @brief  Arb. PWM Generator initialization function.
 * @param  None
 * @retval None
 */
void genPwmInit(void)
{	
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	e017      	b.n	800301c <genPwmInit+0x3c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	4a0f      	ldr	r2, [pc, #60]	; (800302c <genPwmInit+0x4c>)
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	79f9      	ldrb	r1, [r7, #7]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00c fad0 	bl	800f5a0 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <genPwmInit+0x4c>)
 8003002:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003006:	b2db      	uxtb	r3, r3
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	429a      	cmp	r2, r3
 800300c:	d203      	bcs.n	8003016 <genPwmInit+0x36>
			TIM_DMA_Reconfig(i);			
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f00c fb89 	bl	800f728 <TIM_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	3301      	adds	r3, #1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d9e4      	bls.n	8002fec <genPwmInit+0xc>
		}
	}
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200047c0 	.word	0x200047c0

08003030 <genPwmSetFrequency>:

void genPwmSetFrequency(double freq, uint8_t channel){
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	ed87 0b02 	vstr	d0, [r7, #8]
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4618      	mov	r0, r3
 8003042:	ed97 0b02 	vldr	d0, [r7, #8]
 8003046:	f00c fadb 	bl	800f600 <TIM_Reconfig_GenPwm>
 800304a:	ed87 0b06 	vstr	d0, [r7, #24]

	uint16_t passMsg;
	if(channel == 0){
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003054:	2323      	movs	r3, #35	; 0x23
 8003056:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh1 = realPwmFrq;
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <genPwmSetFrequency+0x64>)
 800305a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800305e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003062:	e009      	b.n	8003078 <genPwmSetFrequency+0x48>
	}else if(channel == 1){
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d106      	bne.n	8003078 <genPwmSetFrequency+0x48>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 800306a:	2324      	movs	r3, #36	; 0x24
 800306c:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh2 = realPwmFrq;
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <genPwmSetFrequency+0x64>)
 8003070:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003074:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <genPwmSetFrequency+0x68>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	f107 0116 	add.w	r1, r7, #22
 8003080:	2300      	movs	r3, #0
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	f008 fb83 	bl	800b790 <xQueueGenericSend>
}
 800308a:	bf00      	nop
 800308c:	3724      	adds	r7, #36	; 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	bf00      	nop
 8003094:	200047c0 	.word	0x200047c0
 8003098:	200047b4 	.word	0x200047b4

0800309c <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
 80030a6:	460b      	mov	r3, r1
 80030a8:	717b      	strb	r3, [r7, #5]
 80030aa:	4613      	mov	r3, r2
 80030ac:	713b      	strb	r3, [r7, #4]
	uint8_t result = GEN_INVALID_STATE;
 80030ae:	2365      	movs	r3, #101	; 0x65
 80030b0:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE ){
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <genSetData+0xc8>)
 80030b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14c      	bne.n	8003158 <genSetData+0xbc>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	797b      	ldrb	r3, [r7, #5]
 80030c4:	4413      	add	r3, r2
 80030c6:	0fda      	lsrs	r2, r3, #31
 80030c8:	4413      	add	r3, r2
 80030ca:	105b      	asrs	r3, r3, #1
 80030cc:	4619      	mov	r1, r3
 80030ce:	793b      	ldrb	r3, [r7, #4]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <genSetData+0xc8>)
 80030d4:	3318      	adds	r3, #24
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	889b      	ldrh	r3, [r3, #4]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4299      	cmp	r1, r3
 80030e0:	dc38      	bgt.n	8003154 <genSetData+0xb8>
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <genSetData+0xc8>)
 80030e4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	793a      	ldrb	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d831      	bhi.n	8003154 <genSetData+0xb8>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 80030f0:	793b      	ldrb	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <genSetData+0xc8>)
 80030f6:	330a      	adds	r3, #10
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	0052      	lsls	r2, r2, #1
 8003102:	4413      	add	r3, r2
 8003104:	797a      	ldrb	r2, [r7, #5]
 8003106:	b292      	uxth	r2, r2
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fb2c 	bl	8002768 <commBufferReadNBytes>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	797b      	ldrb	r3, [r7, #5]
 8003116:	4293      	cmp	r3, r2
 8003118:	d119      	bne.n	800314e <genSetData+0xb2>
 800311a:	f107 030f 	add.w	r3, r7, #15
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fae4 	bl	80026ec <commBufferReadByte>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <genSetData+0xb2>
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b3b      	cmp	r3, #59	; 0x3b
 800312e:	d10e      	bne.n	800314e <genSetData+0xb2>
				result = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
				uint16_t passMsg = MSG_INVALIDATE;
 8003134:	2333      	movs	r3, #51	; 0x33
 8003136:	81bb      	strh	r3, [r7, #12]
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <genSetData+0xcc>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	f107 010c 	add.w	r1, r7, #12
 8003140:	2300      	movs	r3, #0
 8003142:	f04f 32ff 	mov.w	r2, #4294967295
 8003146:	f008 fb23 	bl	800b790 <xQueueGenericSend>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <genSetData+0xbc>
			}else{
				result = GEN_INVALID_DATA;
 800314e:	236d      	movs	r3, #109	; 0x6d
 8003150:	73fb      	strb	r3, [r7, #15]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003152:	e001      	b.n	8003158 <genSetData+0xbc>
			}
		}else{
			result = GEN_OUT_OF_MEMORY;
 8003154:	2366      	movs	r3, #102	; 0x66
 8003156:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200047c0 	.word	0x200047c0
 8003168:	20004800 	.word	0x20004800

0800316c <genSetFrequency>:
 * @brief  Arb. DAC Generator set frequency function.
 * @param  Freq: required generating frequency
 * @param  chan: channel number 1 or 2
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
	uint8_t result = GEN_TO_HIGH_FREQ;
 8003178:	2369      	movs	r3, #105	; 0x69
 800317a:	73fb      	strb	r3, [r7, #15]
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a13      	ldr	r2, [pc, #76]	; (80031cc <genSetFrequency+0x60>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d81e      	bhi.n	80031c2 <genSetFrequency+0x56>
		generator.generatingFrequency[chan-1] = freq;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	3b01      	subs	r3, #1
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <genSetFrequency+0x64>)
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	3b01      	subs	r3, #1
 8003196:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <genSetFrequency+0x64>)
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	6858      	ldr	r0, [r3, #4]
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	4619      	mov	r1, r3
 80031aa:	f00c f9f9 	bl	800f5a0 <TIM_Reconfig_gen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]
		generator.realGenFrequency[chan-1] = realFreq;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4905      	ldr	r1, [pc, #20]	; (80031d0 <genSetFrequency+0x64>)
 80031ba:	3302      	adds	r3, #2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	605a      	str	r2, [r3, #4]
	}
	return result;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	001e8480 	.word	0x001e8480
 80031d0:	200047c0 	.word	0x200047c0

080031d4 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_SEND_FREQ;
 80031da:	2328      	movs	r3, #40	; 0x28
 80031dc:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <genSendRealSamplingFreq+0x24>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	1db9      	adds	r1, r7, #6
 80031e4:	2300      	movs	r3, #0
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ea:	f008 fad1 	bl	800b790 <xQueueGenericSend>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200047b4 	.word	0x200047b4

080031fc <genDataOKSendNext>:

void genDataOKSendNext(void){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_NEXT;
 8003202:	2329      	movs	r3, #41	; 0x29
 8003204:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <genDataOKSendNext+0x24>)
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	1db9      	adds	r1, r7, #6
 800320c:	2300      	movs	r3, #0
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	f008 fabd 	bl	800b790 <xQueueGenericSend>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200047b4 	.word	0x200047b4

08003224 <genStatusOK>:

void genStatusOK(void){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_OK;
 800322a:	232a      	movs	r3, #42	; 0x2a
 800322c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <genStatusOK+0x24>)
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	1db9      	adds	r1, r7, #6
 8003234:	2300      	movs	r3, #0
 8003236:	f04f 32ff 	mov.w	r2, #4294967295
 800323a:	f008 faa9 	bl	800b790 <xQueueGenericSend>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200047b4 	.word	0x200047b4

0800324c <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
	return generator.realGenFrequency[chan-1];
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	3b01      	subs	r3, #1
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <genGetRealSmplFreq+0x24>)
 800325c:	3302      	adds	r3, #2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	685b      	ldr	r3, [r3, #4]
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	200047c0 	.word	0x200047c0

08003274 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
	uint8_t result=GEN_INVALID_STATE;
 8003280:	2365      	movs	r3, #101	; 0x65
 8003282:	75fb      	strb	r3, [r7, #23]
	if(generator.state==GENERATOR_IDLE){
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <genSetLength+0x70>)
 8003286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <genSetLength+0x64>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <genSetLength+0x70>)
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	613b      	str	r3, [r7, #16]
		if(length<=generator.maxOneChanSamples){
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <genSetLength+0x70>)
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d80e      	bhi.n	80032be <genSetLength+0x4a>
			generator.oneChanSamples[chan-1]=length;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	b291      	uxth	r1, r2
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <genSetLength+0x70>)
 80032aa:	3318      	adds	r3, #24
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	460a      	mov	r2, r1
 80032b2:	809a      	strh	r2, [r3, #4]
			clearGenBuffer();
 80032b4:	f000 f882 	bl	80033bc <clearGenBuffer>
			result=0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e001      	b.n	80032c2 <genSetLength+0x4e>
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 80032be:	2367      	movs	r3, #103	; 0x67
 80032c0:	75fb      	strb	r3, [r7, #23]
		}
		uint16_t passMsg = MSG_INVALIDATE;
 80032c2:	2333      	movs	r3, #51	; 0x33
 80032c4:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <genSetLength+0x74>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	f107 010e 	add.w	r1, r7, #14
 80032ce:	2300      	movs	r3, #0
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295
 80032d4:	f008 fa5c 	bl	800b790 <xQueueGenericSend>
	}
	return result;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200047c0 	.word	0x200047c0
 80032e8:	20004800 	.word	0x20004800

080032ec <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
	uint8_t result=GEN_INVALID_STATE;
 80032f6:	2365      	movs	r3, #101	; 0x65
 80032f8:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=generator.numOfChannles;
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <genSetNumOfChannels+0xc4>)
 80032fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003300:	73bb      	strb	r3, [r7, #14]
	if(generator.state==GENERATOR_IDLE){
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <genSetNumOfChannels+0xc4>)
 8003304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14b      	bne.n	80033a6 <genSetNumOfChannels+0xba>
		if(chan<=MAX_DAC_CHANNELS){
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d848      	bhi.n	80033a6 <genSetNumOfChannels+0xba>
			while(chanTmp>0){
 8003314:	e013      	b.n	800333e <genSetNumOfChannels+0x52>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003316:	7bbb      	ldrb	r3, [r7, #14]
 8003318:	3b01      	subs	r3, #1
 800331a:	73bb      	strb	r3, [r7, #14]
 800331c:	7bbb      	ldrb	r3, [r7, #14]
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <genSetNumOfChannels+0xc4>)
 8003320:	3318      	adds	r3, #24
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	889b      	ldrh	r3, [r3, #4]
 8003328:	b29b      	uxth	r3, r3
 800332a:	4619      	mov	r1, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003332:	fb92 f3f3 	sdiv	r3, r2, r3
 8003336:	4299      	cmp	r1, r3
 8003338:	dd01      	ble.n	800333e <genSetNumOfChannels+0x52>
					return GEN_BUFFER_SIZE_ERR;
 800333a:	2367      	movs	r3, #103	; 0x67
 800333c:	e034      	b.n	80033a8 <genSetNumOfChannels+0xbc>
			while(chanTmp>0){
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e8      	bne.n	8003316 <genSetNumOfChannels+0x2a>
				}
			}
			generator.numOfChannles=chan;
 8003344:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <genSetNumOfChannels+0xc4>)
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003352:	fb92 f3f3 	sdiv	r3, r2, r3
 8003356:	461a      	mov	r2, r3
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <genSetNumOfChannels+0xc4>)
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 800335c:	2300      	movs	r3, #0
 800335e:	737b      	strb	r3, [r7, #13]
 8003360:	e010      	b.n	8003384 <genSetNumOfChannels+0x98>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003362:	7b7b      	ldrb	r3, [r7, #13]
 8003364:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <genSetNumOfChannels+0xc4>)
 8003366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003368:	fb02 f203 	mul.w	r2, r2, r3
 800336c:	7b7b      	ldrb	r3, [r7, #13]
 800336e:	0052      	lsls	r2, r2, #1
 8003370:	4910      	ldr	r1, [pc, #64]	; (80033b4 <genSetNumOfChannels+0xc8>)
 8003372:	440a      	add	r2, r1
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <genSetNumOfChannels+0xc4>)
 8003376:	330a      	adds	r3, #10
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 800337e:	7b7b      	ldrb	r3, [r7, #13]
 8003380:	3301      	adds	r3, #1
 8003382:	737b      	strb	r3, [r7, #13]
 8003384:	7b7a      	ldrb	r2, [r7, #13]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d3ea      	bcc.n	8003362 <genSetNumOfChannels+0x76>
			}
			result=0;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
			uint16_t passMsg = MSG_INVALIDATE;
 8003390:	2333      	movs	r3, #51	; 0x33
 8003392:	817b      	strh	r3, [r7, #10]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <genSetNumOfChannels+0xcc>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f107 010a 	add.w	r1, r7, #10
 800339c:	2300      	movs	r3, #0
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	f008 f9f5 	bl	800b790 <xQueueGenericSend>
		}
	}
	return result;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200047c0 	.word	0x200047c0
 80033b4:	20004804 	.word	0x20004804
 80033b8:	20004800 	.word	0x20004800

080033bc <clearGenBuffer>:
/**
 * @brief 	Clears generator buffer
 * @param  None
 * @retval None
 */
void clearGenBuffer(void){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e007      	b.n	80033d8 <clearGenBuffer+0x1c>
		generatorBuffer[i]=0;
 80033c8:	4a08      	ldr	r2, [pc, #32]	; (80033ec <clearGenBuffer+0x30>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2100      	movs	r1, #0
 80033ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3301      	adds	r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033de:	d3f3      	bcc.n	80033c8 <clearGenBuffer+0xc>
	}
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20004804 	.word	0x20004804

080033f0 <genSetOutputBuffer>:

void genSetOutputBuffer(void){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	DACSetOutputBuffer();
 80033f4:	f00b fa16 	bl	800e824 <DACSetOutputBuffer>
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}

080033fc <genUnsetOutputBuffer>:

void genUnsetOutputBuffer(void){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	DACUnsetOutputBuffer();
 8003400:	f00b fa1c 	bl	800e83c <DACUnsetOutputBuffer>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <genSetDAC>:

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	460a      	mov	r2, r1
 8003412:	80fb      	strh	r3, [r7, #6]
 8003414:	4613      	mov	r3, r2
 8003416:	80bb      	strh	r3, [r7, #4]
	uint8_t result=0;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE){
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <genSetDAC+0x9c>)
 800341e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11c      	bne.n	8003462 <genSetDAC+0x5a>
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003428:	2300      	movs	r3, #0
 800342a:	73bb      	strb	r3, [r7, #14]
 800342c:	e00e      	b.n	800344c <genSetDAC+0x44>
			result+=genSetLength(1,i+1);
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	2001      	movs	r0, #1
 8003438:	f7ff ff1c 	bl	8003274 <genSetLength>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4413      	add	r3, r2
 8003444:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	3301      	adds	r3, #1
 800344a:	73bb      	strb	r3, [r7, #14]
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d9ed      	bls.n	800342e <genSetDAC+0x26>
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 8003452:	2002      	movs	r0, #2
 8003454:	f7ff ff4a 	bl	80032ec <genSetNumOfChannels>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	4413      	add	r3, r2
 8003460:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <genSetDAC+0x9c>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,1);
 800346a:	2101      	movs	r1, #1
 800346c:	2064      	movs	r0, #100	; 0x64
 800346e:	f7ff fe7d 	bl	800316c <genSetFrequency>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	4413      	add	r3, r2
 800347a:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <genSetDAC+0x9c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	88ba      	ldrh	r2, [r7, #4]
 8003482:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,2);
 8003484:	2102      	movs	r1, #2
 8003486:	2064      	movs	r0, #100	; 0x64
 8003488:	f7ff fe70 	bl	800316c <genSetFrequency>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	4413      	add	r3, r2
 8003494:	73fb      	strb	r3, [r7, #15]
	}
	genStart();	
 8003496:	f000 f807 	bl	80034a8 <genStart>


	return result;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200047c0 	.word	0x200047c0

080034a8 <genStart>:
/**
 * @brief  Start generator terminator skynet
 * @param  None
 * @retval None
 */
void genStart(void){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_START;
 80034ae:	2325      	movs	r3, #37	; 0x25
 80034b0:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <genStart+0x24>)
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	1db9      	adds	r1, r7, #6
 80034b8:	2300      	movs	r3, #0
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	f008 f967 	bl	800b790 <xQueueGenericSend>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20004800 	.word	0x20004800

080034d0 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_STOP;
 80034d6:	2326      	movs	r3, #38	; 0x26
 80034d8:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <genStop+0x24>)
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	1db9      	adds	r1, r7, #6
 80034e0:	2300      	movs	r3, #0
 80034e2:	f04f 32ff 	mov.w	r2, #4294967295
 80034e6:	f008 f953 	bl	800b790 <xQueueGenericSend>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20004800 	.word	0x20004800

080034f8 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_DEINIT;
 80034fe:	2327      	movs	r3, #39	; 0x27
 8003500:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <genReset+0x24>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	1db9      	adds	r1, r7, #6
 8003508:	2300      	movs	r3, #0
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	f008 f93f 	bl	800b790 <xQueueGenericSend>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20004800 	.word	0x20004800

08003520 <ScopeTask>:
 * 				task is getting messages from other tasks and takes care about oscilloscope functions
 * @param  Task handler, parameters pointer
 * @retval None
 */

void ScopeTask(void const *argument){
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(SCOPE_CH1_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH2_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH3_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH4_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8003528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800352c:	81fb      	strh	r3, [r7, #14]
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800352e:	2200      	movs	r2, #0
 8003530:	2102      	movs	r1, #2
 8003532:	2005      	movs	r0, #5
 8003534:	f008 f834 	bl	800b5a0 <xQueueGenericCreate>
 8003538:	4602      	mov	r2, r0
 800353a:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <ScopeTask+0x158>)
 800353c:	601a      	str	r2, [r3, #0]

	scopeMutex = xSemaphoreCreateRecursiveMutex();
 800353e:	2004      	movs	r0, #4
 8003540:	f008 f8a6 	bl	800b690 <xQueueCreateMutex>
 8003544:	4602      	mov	r2, r0
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <ScopeTask+0x15c>)
 8003548:	601a      	str	r2, [r3, #0]
	scopeSetDefault();
 800354a:	f000 fc49 	bl	8003de0 <scopeSetDefault>

	while(1){
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <ScopeTask+0x158>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f107 010e 	add.w	r1, r7, #14
 8003556:	f04f 32ff 	mov.w	r2, #4294967295
 800355a:	4618      	mov	r0, r3
 800355c:	f008 faa6 	bl	800baac <xQueueReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <ScopeTask+0x15c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	4618      	mov	r0, r3
 800356a:	f008 f8dc 	bl	800b726 <xQueueTakeMutexRecursive>

		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	2b14      	cmp	r3, #20
 8003572:	d10a      	bne.n	800358a <ScopeTask+0x6a>
 8003574:	4b42      	ldr	r3, [pc, #264]	; (8003680 <ScopeTask+0x160>)
 8003576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <ScopeTask+0x6a>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8003580:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <ScopeTask+0x160>)
 8003582:	2206      	movs	r2, #6
 8003584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003588:	e070      	b.n	800366c <ScopeTask+0x14c>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	2b33      	cmp	r3, #51	; 0x33
 800358e:	d125      	bne.n	80035dc <ScopeTask+0xbc>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8003590:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <ScopeTask+0x160>)
 8003592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b05      	cmp	r3, #5
 800359a:	d067      	beq.n	800366c <ScopeTask+0x14c>
 800359c:	4b38      	ldr	r3, [pc, #224]	; (8003680 <ScopeTask+0x160>)
 800359e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d061      	beq.n	800366c <ScopeTask+0x14c>
			}else{
				samplingDisable();
 80035a8:	f00a fe26 	bl	800e1f8 <samplingDisable>
				scopeInit();
 80035ac:	f000 fb56 	bl	8003c5c <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <ScopeTask+0x160>)
 80035b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	d057      	beq.n	800366c <ScopeTask+0x14c>
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <ScopeTask+0x160>)
 80035be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d051      	beq.n	800366c <ScopeTask+0x14c>
					scope.state=SCOPE_SAMPLING_WAITING;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <ScopeTask+0x160>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					samplesTaken=0;
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <ScopeTask+0x164>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
					samplingEnable();
 80035d6:	f00a fe09 	bl	800e1ec <samplingEnable>
 80035da:	e047      	b.n	800366c <ScopeTask+0x14c>
				}
			}	
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	2b12      	cmp	r3, #18
 80035e0:	d12b      	bne.n	800363a <ScopeTask+0x11a>
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <ScopeTask+0x160>)
 80035e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d025      	beq.n	800363a <ScopeTask+0x11a>
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <ScopeTask+0x160>)
 80035f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d01f      	beq.n	800363a <ScopeTask+0x11a>
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <ScopeTask+0x160>)
 80035fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d019      	beq.n	800363a <ScopeTask+0x11a>
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <ScopeTask+0x160>)
 8003608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b04      	cmp	r3, #4
 8003610:	d013      	beq.n	800363a <ScopeTask+0x11a>
			scopeInit();
 8003612:	f000 fb23 	bl	8003c5c <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <ScopeTask+0x160>)
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			samplingEnable();
 800361e:	f00a fde5 	bl	800e1ec <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8003622:	2317      	movs	r3, #23
 8003624:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <ScopeTask+0x168>)
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	f107 010c 	add.w	r1, r7, #12
 800362e:	2300      	movs	r3, #0
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	f008 f8ac 	bl	800b790 <xQueueGenericSend>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8003638:	e018      	b.n	800366c <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	2b13      	cmp	r3, #19
 800363e:	d106      	bne.n	800364e <ScopeTask+0x12e>
			samplingDisable();
 8003640:	f00a fdda 	bl	800e1f8 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <ScopeTask+0x160>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800364c:	e00e      	b.n	800366c <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	2b11      	cmp	r3, #17
 8003652:	d10b      	bne.n	800366c <ScopeTask+0x14c>
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <ScopeTask+0x160>)
 8003656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b06      	cmp	r3, #6
 800365e:	d105      	bne.n	800366c <ScopeTask+0x14c>
			//scopeInit();
			samplingEnable();
 8003660:	f00a fdc4 	bl	800e1ec <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <ScopeTask+0x160>)
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		xSemaphoreGiveRecursive(scopeMutex);
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <ScopeTask+0x15c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f008 f825 	bl	800b6c0 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8003676:	e76a      	b.n	800354e <ScopeTask+0x2e>
 8003678:	20004fd8 	.word	0x20004fd8
 800367c:	20000320 	.word	0x20000320
 8003680:	2000032c 	.word	0x2000032c
 8003684:	2000037c 	.word	0x2000037c
 8003688:	200047b4 	.word	0x200047b4

0800368c <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8003694:	4b8b      	ldr	r3, [pc, #556]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00c      	beq.n	80036ba <ScopeTriggerTask+0x2e>
 80036a0:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d006      	beq.n	80036ba <ScopeTriggerTask+0x2e>
 80036ac:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	f040 8275 	bne.w	8003ba4 <ScopeTriggerTask+0x518>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 80036ba:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <ScopeTriggerTask+0x23c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f04f 31ff 	mov.w	r1, #4294967295
 80036c2:	4618      	mov	r0, r3
 80036c4:	f008 f82f 	bl	800b726 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 80036c8:	4b80      	ldr	r3, [pc, #512]	; (80038cc <ScopeTriggerTask+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a80      	ldr	r2, [pc, #512]	; (80038d0 <ScopeTriggerTask+0x244>)
 80036ce:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80036d0:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036d2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80036d4:	4b7b      	ldr	r3, [pc, #492]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f00a fcc7 	bl	800e070 <DMA_GetCurrDataCounter>
 80036e2:	4603      	mov	r3, r0
 80036e4:	1ae3      	subs	r3, r4, r3
 80036e6:	4a79      	ldr	r2, [pc, #484]	; (80038cc <ScopeTriggerTask+0x240>)
 80036e8:	6013      	str	r3, [r2, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ee:	4b77      	ldr	r3, [pc, #476]	; (80038cc <ScopeTriggerTask+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	3b01      	subs	r3, #1
 80036f6:	4a73      	ldr	r2, [pc, #460]	; (80038c4 <ScopeTriggerTask+0x238>)
 80036f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80036fe:	fb02 f201 	mul.w	r2, r2, r1
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	4a73      	ldr	r2, [pc, #460]	; (80038d4 <ScopeTriggerTask+0x248>)
 8003706:	6013      	str	r3, [r2, #0]
			uint16_t passMsg;

			//wait for right level before finding trigger (lower level then trigger level for rising edge, higher level for falling edge)
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8003708:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <ScopeTriggerTask+0x238>)
 800370a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 80a0 	bne.w	8003856 <ScopeTriggerTask+0x1ca>
				if(scope.settings.adcRes<=8){
 8003716:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003718:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b08      	cmp	r3, #8
 800371e:	d818      	bhi.n	8003752 <ScopeTriggerTask+0xc6>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8003720:	4b68      	ldr	r3, [pc, #416]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	4a66      	ldr	r2, [pc, #408]	; (80038c4 <ScopeTriggerTask+0x238>)
 800372c:	330a      	adds	r3, #10
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <ScopeTriggerTask+0x248>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	881a      	ldrh	r2, [r3, #0]
 8003740:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <ScopeTriggerTask+0x24c>)
 8003742:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <ScopeTriggerTask+0x24c>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <ScopeTriggerTask+0x24c>)
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e010      	b.n	8003774 <ScopeTriggerTask+0xe8>
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8003752:	4b5c      	ldr	r3, [pc, #368]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	4a59      	ldr	r2, [pc, #356]	; (80038c4 <ScopeTriggerTask+0x238>)
 800375e:	330a      	adds	r3, #10
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <ScopeTriggerTask+0x248>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <ScopeTriggerTask+0x24c>)
 8003772:	801a      	strh	r2, [r3, #0]
				}

				updateTrigger();
 8003774:	f000 fb00 	bl	8003d78 <updateTrigger>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8003778:	4b54      	ldr	r3, [pc, #336]	; (80038cc <ScopeTriggerTask+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29a      	uxth	r2, r3
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <ScopeTriggerTask+0x244>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fa18 	bl	8003bbc <samplesPassed>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b52      	ldr	r3, [pc, #328]	; (80038dc <ScopeTriggerTask+0x250>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4413      	add	r3, r2
 8003796:	4a51      	ldr	r2, [pc, #324]	; (80038dc <ScopeTriggerTask+0x250>)
 8003798:	6013      	str	r3, [r2, #0]
				//start finding right level before trigger (cannot start to find it earlier because pretrigger was not taken yet)
				if (samplesTaken > samplesToStart){
 800379a:	4b50      	ldr	r3, [pc, #320]	; (80038dc <ScopeTriggerTask+0x250>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <ScopeTriggerTask+0x254>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	f240 81dd 	bls.w	8003b62 <ScopeTriggerTask+0x4d6>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 80037a8:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <ScopeTriggerTask+0x238>)
 80037aa:	7e1b      	ldrb	r3, [r3, #24]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <ScopeTriggerTask+0x134>
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <ScopeTriggerTask+0x24c>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	3310      	adds	r3, #16
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <ScopeTriggerTask+0x258>)
 80037ba:	8812      	ldrh	r2, [r2, #0]
 80037bc:	4293      	cmp	r3, r2
 80037be:	db0b      	blt.n	80037d8 <ScopeTriggerTask+0x14c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 80037c0:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <ScopeTriggerTask+0x238>)
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d119      	bne.n	80037fe <ScopeTriggerTask+0x172>
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <ScopeTriggerTask+0x24c>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	3b10      	subs	r3, #16
 80037d0:	4a44      	ldr	r2, [pc, #272]	; (80038e4 <ScopeTriggerTask+0x258>)
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	dd12      	ble.n	80037fe <ScopeTriggerTask+0x172>
						autoTrigged=0;
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <ScopeTriggerTask+0x25c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <ScopeTriggerTask+0x238>)
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 80037e6:	2317      	movs	r3, #23
 80037e8:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80037ea:	4b40      	ldr	r3, [pc, #256]	; (80038ec <ScopeTriggerTask+0x260>)
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f107 010e 	add.w	r1, r7, #14
 80037f2:	2300      	movs	r3, #0
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	f007 ffca 	bl	800b790 <xQueueGenericSend>
 80037fc:	e1b1      	b.n	8003b62 <ScopeTriggerTask+0x4d6>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003800:	7e5b      	ldrb	r3, [r3, #25]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <ScopeTriggerTask+0x18a>
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <ScopeTriggerTask+0x238>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	4b33      	ldr	r3, [pc, #204]	; (80038dc <ScopeTriggerTask+0x250>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d30c      	bcc.n	8003830 <ScopeTriggerTask+0x1a4>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003818:	7e5b      	ldrb	r3, [r3, #25]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	f040 81a0 	bne.w	8003b62 <ScopeTriggerTask+0x4d6>
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <ScopeTriggerTask+0x250>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	f080 8199 	bcs.w	8003b62 <ScopeTriggerTask+0x4d6>
						autoTrigged=1;
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <ScopeTriggerTask+0x25c>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 800383e:	2317      	movs	r3, #23
 8003840:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003842:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <ScopeTriggerTask+0x260>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f107 010e 	add.w	r1, r7, #14
 800384a:	2300      	movs	r3, #0
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	f007 ff9e 	bl	800b790 <xQueueGenericSend>
 8003854:	e185      	b.n	8003b62 <ScopeTriggerTask+0x4d6>
					}
				}
				//looking for trigger
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	f040 80c1 	bne.w	80039e6 <ScopeTriggerTask+0x35a>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <ScopeTriggerTask+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <ScopeTriggerTask+0x244>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 f9a2 	bl	8003bbc <samplesPassed>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <ScopeTriggerTask+0x250>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4413      	add	r3, r2
 8003882:	4a16      	ldr	r2, [pc, #88]	; (80038dc <ScopeTriggerTask+0x250>)
 8003884:	6013      	str	r3, [r2, #0]
				if(scope.settings.adcRes<=8){
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003888:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b08      	cmp	r3, #8
 800388e:	d82f      	bhi.n	80038f0 <ScopeTriggerTask+0x264>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <ScopeTriggerTask+0x238>)
 8003892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <ScopeTriggerTask+0x238>)
 800389c:	330a      	adds	r3, #10
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <ScopeTriggerTask+0x248>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <ScopeTriggerTask+0x24c>)
 80038b2:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <ScopeTriggerTask+0x24c>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <ScopeTriggerTask+0x24c>)
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	e027      	b.n	8003912 <ScopeTriggerTask+0x286>
 80038c2:	bf00      	nop
 80038c4:	2000032c 	.word	0x2000032c
 80038c8:	20000320 	.word	0x20000320
 80038cc:	20000324 	.word	0x20000324
 80038d0:	20000328 	.word	0x20000328
 80038d4:	20000374 	.word	0x20000374
 80038d8:	20000378 	.word	0x20000378
 80038dc:	2000037c 	.word	0x2000037c
 80038e0:	20000318 	.word	0x20000318
 80038e4:	20000310 	.word	0x20000310
 80038e8:	2000031c 	.word	0x2000031c
 80038ec:	200047b4 	.word	0x200047b4
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80038f0:	4b9f      	ldr	r3, [pc, #636]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 80038f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	4a9d      	ldr	r2, [pc, #628]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 80038fc:	330a      	adds	r3, #10
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4b9b      	ldr	r3, [pc, #620]	; (8003b74 <ScopeTriggerTask+0x4e8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	4b9a      	ldr	r3, [pc, #616]	; (8003b78 <ScopeTriggerTask+0x4ec>)
 8003910:	801a      	strh	r2, [r3, #0]
				}
				updateTrigger();
 8003912:	f000 fa31 	bl	8003d78 <updateTrigger>
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8003916:	4b96      	ldr	r3, [pc, #600]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003918:	7e1b      	ldrb	r3, [r3, #24]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <ScopeTriggerTask+0x2a0>
 8003920:	4b95      	ldr	r3, [pc, #596]	; (8003b78 <ScopeTriggerTask+0x4ec>)
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	4b95      	ldr	r3, [pc, #596]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d80a      	bhi.n	8003942 <ScopeTriggerTask+0x2b6>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 800392c:	4b90      	ldr	r3, [pc, #576]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 800392e:	7e1b      	ldrb	r3, [r3, #24]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d120      	bne.n	8003978 <ScopeTriggerTask+0x2ec>
 8003936:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <ScopeTriggerTask+0x4ec>)
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	4b90      	ldr	r3, [pc, #576]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d21a      	bcs.n	8003978 <ScopeTriggerTask+0x2ec>
					totalSmpTaken = samplesTaken;
 8003942:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a8f      	ldr	r2, [pc, #572]	; (8003b84 <ScopeTriggerTask+0x4f8>)
 8003948:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8003950:	4b87      	ldr	r3, [pc, #540]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003952:	2203      	movs	r2, #3
 8003954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8003958:	4b86      	ldr	r3, [pc, #536]	; (8003b74 <ScopeTriggerTask+0x4e8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a8a      	ldr	r2, [pc, #552]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 800395e:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8003960:	2316      	movs	r3, #22
 8003962:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003964:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <ScopeTriggerTask+0x500>)
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	f107 010e 	add.w	r1, r7, #14
 800396c:	2300      	movs	r3, #0
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	f007 ff0d 	bl	800b790 <xQueueGenericSend>
 8003976:	e0f4      	b.n	8003b62 <ScopeTriggerTask+0x4d6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8003978:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 800397a:	7e5b      	ldrb	r3, [r3, #25]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d106      	bne.n	8003990 <ScopeTriggerTask+0x304>
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	4b7d      	ldr	r3, [pc, #500]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d30c      	bcc.n	80039aa <ScopeTriggerTask+0x31e>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 8003990:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003992:	7e5b      	ldrb	r3, [r3, #25]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	f040 80e3 	bne.w	8003b62 <ScopeTriggerTask+0x4d6>
 800399c:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f080 80dc 	bcs.w	8003b62 <ScopeTriggerTask+0x4d6>
					totalSmpTaken = samplesTaken;
 80039aa:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a75      	ldr	r2, [pc, #468]	; (8003b84 <ScopeTriggerTask+0x4f8>)
 80039b0:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 80039b8:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 80039ba:	2203      	movs	r2, #3
 80039bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 80039c0:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <ScopeTriggerTask+0x4e8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a70      	ldr	r2, [pc, #448]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 80039c6:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 80039c8:	2316      	movs	r3, #22
 80039ca:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <ScopeTriggerTask+0x500>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	f107 010e 	add.w	r1, r7, #14
 80039d4:	2300      	movs	r3, #0
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295
 80039da:	f007 fed9 	bl	800b790 <xQueueGenericSend>
					autoTrigged=1;
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <ScopeTriggerTask+0x504>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e0bd      	b.n	8003b62 <ScopeTriggerTask+0x4d6>
				}
				//sampling after trigger event
			}else if(scope.state == SCOPE_SAMPLING){
 80039e6:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 80039e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	f040 80b7 	bne.w	8003b62 <ScopeTriggerTask+0x4d6>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <ScopeTriggerTask+0x508>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <ScopeTriggerTask+0x50c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 f8da 	bl	8003bbc <samplesPassed>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b5c      	ldr	r3, [pc, #368]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 8003a14:	6013      	str	r3, [r2, #0]


				//sampling is done
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	f040 809f 	bne.w	8003b62 <ScopeTriggerTask+0x4d6>
 8003a24:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b5c      	ldr	r3, [pc, #368]	; (8003b9c <ScopeTriggerTask+0x510>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f0c0 8098 	bcc.w	8003b62 <ScopeTriggerTask+0x4d6>
					samplingDisable();
 8003a32:	f00a fbe1 	bl	800e1f8 <samplingDisable>

					//finding exact trigger position because not every samples are chcecked 
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 8003a36:	4b56      	ldr	r3, [pc, #344]	; (8003b90 <ScopeTriggerTask+0x504>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d178      	bne.n	8003b30 <ScopeTriggerTask+0x4a4>
						if(scope.settings.adcRes>8){
 8003a3e:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a40:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d937      	bls.n	8003ab8 <ScopeTriggerTask+0x42c>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8003a48:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a4a:	7e1b      	ldrb	r3, [r3, #24]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11e      	bne.n	8003a90 <ScopeTriggerTask+0x404>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8003a52:	e004      	b.n	8003a5e <ScopeTriggerTask+0x3d2>
									triggerIndex--;
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003a5c:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4a41      	ldr	r2, [pc, #260]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a6a:	330a      	adds	r3, #10
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4b45      	ldr	r3, [pc, #276]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8e7      	bhi.n	8003a54 <ScopeTriggerTask+0x3c8>
 8003a84:	e04f      	b.n	8003b26 <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8003a86:	4b40      	ldr	r3, [pc, #256]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	4a3e      	ldr	r2, [pc, #248]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003a8e:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8003a90:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003a9c:	330a      	adds	r3, #10
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3e7      	bcc.n	8003a86 <ScopeTriggerTask+0x3fa>
 8003ab6:	e036      	b.n	8003b26 <ScopeTriggerTask+0x49a>
								}
							}
						}else{							
							if(scope.settings.triggerEdge == EDGE_RISING){
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003aba:	7e1b      	ldrb	r3, [r3, #24]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11e      	bne.n	8003b00 <ScopeTriggerTask+0x474>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8003ac2:	e004      	b.n	8003ace <ScopeTriggerTask+0x442>
									triggerIndex--;
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003acc:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003ada:	330a      	adds	r3, #10
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8e7      	bhi.n	8003ac4 <ScopeTriggerTask+0x438>
 8003af4:	e017      	b.n	8003b26 <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003afe:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003b0c:	330a      	adds	r3, #10
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <ScopeTriggerTask+0x4f0>)
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3e7      	bcc.n	8003af6 <ScopeTriggerTask+0x46a>
								}
							}
						}
						triggerIndex++;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003b2e:	6013      	str	r3, [r2, #0]
					}

					scope.triggerIndex = triggerIndex;
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <ScopeTriggerTask+0x4fc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003b36:	6053      	str	r3, [r2, #4]
					scope.state = SCOPE_DATA_SENDING;
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <ScopeTriggerTask+0x4e4>)
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

					samplesTaken = 0;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <ScopeTriggerTask+0x4f4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
					totalSmpTaken = 0;
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <ScopeTriggerTask+0x4f8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 8003b4c:	2315      	movs	r3, #21
 8003b4e:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <ScopeTriggerTask+0x500>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	f107 010e 	add.w	r1, r7, #14
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	f007 fe17 	bl	800b790 <xQueueGenericSend>
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <ScopeTriggerTask+0x514>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fdaa 	bl	800b6c0 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8003b6c:	e022      	b.n	8003bb4 <ScopeTriggerTask+0x528>
 8003b6e:	bf00      	nop
 8003b70:	2000032c 	.word	0x2000032c
 8003b74:	20000374 	.word	0x20000374
 8003b78:	20000378 	.word	0x20000378
 8003b7c:	20000310 	.word	0x20000310
 8003b80:	2000037c 	.word	0x2000037c
 8003b84:	20000380 	.word	0x20000380
 8003b88:	2000030c 	.word	0x2000030c
 8003b8c:	200047b4 	.word	0x200047b4
 8003b90:	2000031c 	.word	0x2000031c
 8003b94:	20000324 	.word	0x20000324
 8003b98:	20000328 	.word	0x20000328
 8003b9c:	20000314 	.word	0x20000314
 8003ba0:	20000320 	.word	0x20000320
		}else{
			taskYIELD();
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <ScopeTriggerTask+0x52c>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8003bb4:	e56e      	b.n	8003694 <ScopeTriggerTask+0x8>
 8003bb6:	bf00      	nop
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <samplesPassed>:
/**
 * @brief 	Returns number of samples between indexes.
 * @param  actual index, last index
 * @retval None
 */
uint16_t samplesPassed(uint16_t index, uint16_t lastIndex){
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	80fb      	strh	r3, [r7, #6]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80bb      	strh	r3, [r7, #4]
	uint16_t result=0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	81fb      	strh	r3, [r7, #14]
	if(index < lastIndex){
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	88bb      	ldrh	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d209      	bcs.n	8003bec <samplesPassed+0x30>
		result = index + scope.oneChanSamples - lastIndex;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <samplesPassed+0x48>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4413      	add	r3, r2
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	88bb      	ldrh	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	81fb      	strh	r3, [r7, #14]
 8003bea:	e003      	b.n	8003bf4 <samplesPassed+0x38>
	}else{
		result = index - lastIndex;
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	88bb      	ldrh	r3, [r7, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000032c 	.word	0x2000032c

08003c08 <validateBuffUsage>:
/**
 * @brief 	Checks if scope settings doesn't exceed memory
 * @param  None
 * @retval 1=err / 0=ok
 */
uint8_t validateBuffUsage(){
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
	uint8_t result=1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	71fb      	strb	r3, [r7, #7]
	uint32_t data_len=scope.settings.samplesToSend;
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <validateBuffUsage+0x50>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	603b      	str	r3, [r7, #0]
	if(scope.settings.adcRes>8){
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <validateBuffUsage+0x50>)
 8003c1a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d902      	bls.n	8003c28 <validateBuffUsage+0x20>
		data_len=data_len*2;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]
	}
	data_len=data_len*scope.numOfChannles;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <validateBuffUsage+0x50>)
 8003c2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	fb02 f303 	mul.w	r3, r2, r3
 8003c38:	603b      	str	r3, [r7, #0]
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d801      	bhi.n	8003c48 <validateBuffUsage+0x40>
		result=0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8003c48:	79fb      	ldrb	r3, [r7, #7]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000032c 	.word	0x2000032c

08003c5c <scopeInit>:
 * @brief  Oscilloscope initialisation.
 *					Configurstion of DMA and TIM time base
 * @param  None
 * @retval None
 */
void scopeInit(void){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	writingIndex = 0;
 8003c62:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <scopeInit+0x114>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
	uint32_t realfreq=0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	603b      	str	r3, [r7, #0]

	ADC_DMA_Stop();
 8003c6c:	f00a f9ec 	bl	800e048 <ADC_DMA_Stop>

	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8003c70:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <scopeInit+0x118>)
 8003c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d136      	bne.n	8003cea <scopeInit+0x8e>
		scope.settings.interleaved=2;
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <scopeInit+0x118>)
 8003c7e:	2202      	movs	r2, #2
 8003c80:	779a      	strb	r2, [r3, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <scopeInit+0x118>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	463a      	mov	r2, r7
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f00b fef7 	bl	800fa80 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00a fa35 	bl	800e104 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <scopeInit+0x118>)
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fcac 	bl	8004600 <scopeInitADCMode>

		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8003ca8:	2300      	movs	r3, #0
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	e016      	b.n	8003cdc <scopeInit+0x80>
			if(scope.numOfChannles>i){
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <scopeInit+0x118>)
 8003cb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	79fa      	ldrb	r2, [r7, #7]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d20c      	bcs.n	8003cd6 <scopeInit+0x7a>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8003cbc:	79f8      	ldrb	r0, [r7, #7]
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	4a2c      	ldr	r2, [pc, #176]	; (8003d74 <scopeInit+0x118>)
 8003cc2:	330a      	adds	r3, #10
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <scopeInit+0x118>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f00a f997 	bl	800e004 <ADC_DMA_Reconfig_Interleave>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	71fb      	strb	r3, [r7, #7]
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0e5      	beq.n	8003cae <scopeInit+0x52>
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <scopeInit+0x118>)
 8003ce6:	60d3      	str	r3, [r2, #12]
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
	}
}
 8003ce8:	e03e      	b.n	8003d68 <scopeInit+0x10c>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <scopeInit+0x118>)
 8003cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d103      	bne.n	8003cfe <scopeInit+0xa2>
		scope.settings.ADCmux=2;
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <scopeInit+0x118>)
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	77da      	strb	r2, [r3, #31]
}
 8003cfc:	e034      	b.n	8003d68 <scopeInit+0x10c>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <scopeInit+0x118>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2020 	strb.w	r2, [r3, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <scopeInit+0x118>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	463a      	mov	r2, r7
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b feb6 	bl	800fa80 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f00a f9f4 	bl	800e104 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <scopeInit+0x118>)
 8003d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fc6b 	bl	8004600 <scopeInitADCMode>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	71bb      	strb	r3, [r7, #6]
 8003d2e:	e015      	b.n	8003d5c <scopeInit+0x100>
			if(scope.numOfChannles>i){
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <scopeInit+0x118>)
 8003d32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	79ba      	ldrb	r2, [r7, #6]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20b      	bcs.n	8003d56 <scopeInit+0xfa>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8003d3e:	79bb      	ldrb	r3, [r7, #6]
 8003d40:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <scopeInit+0x118>)
 8003d42:	330a      	adds	r3, #10
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <scopeInit+0x118>)
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4e:	79bb      	ldrb	r3, [r7, #6]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f00a f917 	bl	800df84 <ADC_DMA_Reconfig>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8003d56:	79bb      	ldrb	r3, [r7, #6]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	71bb      	strb	r3, [r7, #6]
 8003d5c:	79bb      	ldrb	r3, [r7, #6]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d9e6      	bls.n	8003d30 <scopeInit+0xd4>
		scope.settings.ADCSamplingFreq=realfreq;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <scopeInit+0x118>)
 8003d66:	60d3      	str	r3, [r2, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000324 	.word	0x20000324
 8003d74:	2000032c 	.word	0x2000032c

08003d78 <updateTrigger>:
 * @brief  Update trigger level and pretriger values
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <updateTrigger+0x58>)
 8003d7e:	8b5b      	ldrh	r3, [r3, #26]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <updateTrigger+0x58>)
 8003d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	fb03 f302 	mul.w	r3, r3, r2
 8003d8e:	141b      	asrs	r3, r3, #16
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <updateTrigger+0x5c>)
 8003d94:	801a      	strh	r2, [r3, #0]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <updateTrigger+0x58>)
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <updateTrigger+0x58>)
 8003d9c:	8b9b      	ldrh	r3, [r3, #28]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003da4:	33ff      	adds	r3, #255	; 0xff
 8003da6:	fb03 f302 	mul.w	r3, r3, r2
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <updateTrigger+0x60>)
 8003db0:	6013      	str	r3, [r2, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <updateTrigger+0x58>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <updateTrigger+0x58>)
 8003db8:	8b92      	ldrh	r2, [r2, #28]
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	4a06      	ldr	r2, [pc, #24]	; (8003ddc <updateTrigger+0x64>)
 8003dc4:	6013      	str	r3, [r2, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	2000032c 	.word	0x2000032c
 8003dd4:	20000310 	.word	0x20000310
 8003dd8:	20000314 	.word	0x20000314
 8003ddc:	20000318 	.word	0x20000318

08003de0 <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	scope.bufferMemory = scopeBuffer;
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <scopeSetDefault+0x88>)
 8003de6:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <scopeSetDefault+0x8c>)
 8003de8:	601a      	str	r2, [r3, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <scopeSetDefault+0x88>)
 8003dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003df0:	609a      	str	r2, [r3, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <scopeSetDefault+0x88>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	761a      	strb	r2, [r3, #24]
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <scopeSetDefault+0x88>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	765a      	strb	r2, [r3, #25]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <scopeSetDefault+0x88>)
 8003e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e04:	835a      	strh	r2, [r3, #26]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <scopeSetDefault+0x88>)
 8003e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e0c:	839a      	strh	r2, [r3, #28]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <scopeSetDefault+0x88>)
 8003e10:	220c      	movs	r2, #12
 8003e12:	845a      	strh	r2, [r3, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <scopeSetDefault+0x88>)
 8003e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e1a:	849a      	strh	r2, [r3, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <scopeSetDefault+0x88>)
 8003e1e:	2264      	movs	r2, #100	; 0x64
 8003e20:	615a      	str	r2, [r3, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <scopeSetDefault+0x88>)
 8003e24:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <scopeSetDefault+0x8c>)
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <scopeSetDefault+0x88>)
 8003e2a:	f64e 3228 	movw	r2, #60200	; 0xeb28
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
	if(scope.settings.adcRes>8){
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <scopeSetDefault+0x88>)
 8003e32:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d905      	bls.n	8003e46 <scopeSetDefault+0x66>
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <scopeSetDefault+0x88>)
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <scopeSetDefault+0x88>)
 8003e42:	6413      	str	r3, [r2, #64]	; 0x40
 8003e44:	e003      	b.n	8003e4e <scopeSetDefault+0x6e>
	}else{
		scope.oneChanSamples = scope.oneChanMemSize;
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <scopeSetDefault+0x88>)
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <scopeSetDefault+0x88>)
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
	}
	scope.numOfChannles = 1;
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <scopeSetDefault+0x88>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	scope.triggerChannel = 1;
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <scopeSetDefault+0x88>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	scopeSetADCInputChannelDefault();
 8003e5e:	f000 fb37 	bl	80044d0 <scopeSetADCInputChannelDefault>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000032c 	.word	0x2000032c
 8003e6c:	20004fdc 	.word	0x20004fdc

08003e70 <GetNumOfChannels>:
/**
 * @brief  Getter function number of scope channels being used
 * @param  None
 * @retval Number of channels
 */
uint8_t GetNumOfChannels (void){
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
	return scope.numOfChannles;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <GetNumOfChannels+0x18>)
 8003e76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e7a:	b2db      	uxtb	r3, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000032c 	.word	0x2000032c

08003e8c <getDataPointer>:
/**
 * @brief  Getter function of pointer for data buffer.
 * @param  None
 * @retval Pointer to buffer
 */
uint16_t *getDataPointer(uint8_t chan){
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
	return scope.pChanMem[chan];
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <getDataPointer+0x24>)
 8003e9a:	330a      	adds	r3, #10
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	685b      	ldr	r3, [r3, #4]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000032c 	.word	0x2000032c

08003eb4 <getOneChanMemSize>:
/**
 * @brief  Getter function of one channel memory size.
 * @param  None
 * @retval One channel memory size
 */
uint32_t getOneChanMemSize(){
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	return scope.oneChanMemSize;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <getOneChanMemSize+0x14>)
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	2000032c 	.word	0x2000032c

08003ecc <getTriggerIndex>:
/**
 * @brief  Getter function of trigger index.
 * @param  None
 * @retval Pointer to sample where trigger occured
 */
uint32_t getTriggerIndex(void){
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	return triggerIndex;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <getTriggerIndex+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	2000030c 	.word	0x2000030c

08003ee4 <getSamples>:
/**
 * @brief  Getter function of data length.
 * @param  None
 * @retval Data length
 */
uint32_t getSamples(void){
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	return scope.settings.samplesToSend;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <getSamples+0x14>)
 8003eea:	695b      	ldr	r3, [r3, #20]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	2000032c 	.word	0x2000032c

08003efc <getADCRes>:
/**
 * @brief  Getter function of ADC resolution.
 * @param  None
 * @retval ADC resolution
 */
uint16_t getADCRes(void){
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	return scope.settings.adcRes;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <getADCRes+0x14>)
 8003f02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003f04:	b29b      	uxth	r3, r3
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	2000032c 	.word	0x2000032c

08003f14 <getPretrigger>:
/**
 * @brief  Getter function of pretrigger.
 * @param  None
 * @retval Pretrigger value
 */
uint16_t getPretrigger(void){
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	return scope.settings.pretrigger;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <getPretrigger+0x14>)
 8003f1a:	8b9b      	ldrh	r3, [r3, #28]
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	2000032c 	.word	0x2000032c

08003f2c <getScopeState>:
/**
 * @brief  Getter for oscilloscope state.
 * @param  None
 * @retval Scope state
 */
scopeState getScopeState(void){
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
	return scope.state;
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <getScopeState+0x18>)
 8003f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000032c 	.word	0x2000032c

08003f48 <scopeSetTriggerMode>:
/**
 * @brief  Setter for trigger mode
 * @param  Scope Trigger mode
 * @retval None
 */
void scopeSetTriggerMode(scopeTriggerMode mode){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <scopeSetTriggerMode+0x30>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f007 fbe3 	bl	800b726 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8003f60:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <scopeSetTriggerMode+0x34>)
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	7653      	strb	r3, [r2, #25]
	xSemaphoreGiveRecursive(scopeMutex);
 8003f66:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <scopeSetTriggerMode+0x30>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f007 fba8 	bl	800b6c0 <xQueueGiveMutexRecursive>
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000320 	.word	0x20000320
 8003f7c:	2000032c 	.word	0x2000032c

08003f80 <scopeSetTriggerEdge>:
/**
 * @brief  Setter for trigger edge
 * @param  Scope Trigger edge
 * @retval None
 */
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <scopeSetTriggerEdge+0x48>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f92:	4618      	mov	r0, r3
 8003f94:	f007 fbc7 	bl	800b726 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <scopeSetTriggerEdge+0x4c>)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	7613      	strb	r3, [r2, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <scopeSetTriggerEdge+0x48>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f007 fb8c 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8003fa8:	2333      	movs	r3, #51	; 0x33
 8003faa:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <scopeSetTriggerEdge+0x50>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	f107 010e 	add.w	r1, r7, #14
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	f007 fbe9 	bl	800b790 <xQueueGenericSend>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000320 	.word	0x20000320
 8003fcc:	2000032c 	.word	0x2000032c
 8003fd0:	20004fd8 	.word	0x20004fd8
 8003fd4:	00000000 	.word	0x00000000

08003fd8 <scopeSetDataDepth>:
/**
 * @brief  Setter for ADC resolution
 * @param  ADC resolution 2^N where N is number of bits
 * @retval success=0/error
 */
uint8_t scopeSetDataDepth(uint16_t res){
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
	uint8_t result=BUFFER_SIZE_ERR;
 8003fe2:	233a      	movs	r3, #58	; 0x3a
 8003fe4:	73fb      	strb	r3, [r7, #15]
	uint8_t resTmp=res;
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <scopeSetDataDepth+0xd8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f007 fb97 	bl	800b726 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <scopeSetDataDepth+0xdc>)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	8453      	strh	r3, [r2, #34]	; 0x22
	if(validateBuffUsage()){
 8003ffe:	f7ff fe03 	bl	8003c08 <validateBuffUsage>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <scopeSetDataDepth+0x3a>
		scope.settings.adcRes = resTmp;
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	b29a      	uxth	r2, r3
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <scopeSetDataDepth+0xdc>)
 800400e:	845a      	strh	r2, [r3, #34]	; 0x22
 8004010:	e034      	b.n	800407c <scopeSetDataDepth+0xa4>
	}else{
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <scopeSetDataDepth+0xdc>)
 8004014:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004016:	b29b      	uxth	r3, r3
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa3b 	bl	8000494 <__aeabi_ui2d>
 800401e:	4603      	mov	r3, r0
 8004020:	460c      	mov	r4, r1
 8004022:	ec44 3b11 	vmov	d1, r3, r4
 8004026:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80040a8 <scopeSetDataDepth+0xd0>
 800402a:	f00c f849 	bl	80100c0 <pow>
 800402e:	ec54 3b10 	vmov	r3, r4, d0
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	f7fc fd7f 	bl	8000b38 <__aeabi_d2uiz>
 800403a:	4603      	mov	r3, r0
 800403c:	b29a      	uxth	r2, r3
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <scopeSetDataDepth+0xdc>)
 8004040:	849a      	strh	r2, [r3, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <scopeSetDataDepth+0xdc>)
 8004044:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b08      	cmp	r3, #8
 800404a:	d905      	bls.n	8004058 <scopeSetDataDepth+0x80>
			scope.oneChanSamples=scope.oneChanMemSize/2;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <scopeSetDataDepth+0xdc>)
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <scopeSetDataDepth+0xdc>)
 8004054:	6413      	str	r3, [r2, #64]	; 0x40
 8004056:	e003      	b.n	8004060 <scopeSetDataDepth+0x88>
		}else{
			scope.oneChanSamples=scope.oneChanMemSize;
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <scopeSetDataDepth+0xdc>)
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <scopeSetDataDepth+0xdc>)
 800405e:	6413      	str	r3, [r2, #64]	; 0x40
		}
		adcSetResolution(res);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	4618      	mov	r0, r3
 8004066:	f00a f925 	bl	800e2b4 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <scopeSetDataDepth+0xdc>)
 800406c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fac4 	bl	8004600 <scopeInitADCMode>
		result=0;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <scopeSetDataDepth+0xd8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f007 fb1d 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004086:	2333      	movs	r3, #51	; 0x33
 8004088:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <scopeSetDataDepth+0xe0>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 010c 	add.w	r1, r7, #12
 8004092:	2300      	movs	r3, #0
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	f007 fb7a 	bl	800b790 <xQueueGenericSend>

	return result;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	00000000 	.word	0x00000000
 80040ac:	40000000 	.word	0x40000000
 80040b0:	20000320 	.word	0x20000320
 80040b4:	2000032c 	.word	0x2000032c
 80040b8:	20004fd8 	.word	0x20004fd8

080040bc <scopeSetSamplingFreq>:
/**
 * @brief  Setter for sampling frequency
 * @param  Samples per second
 * @retval success=0/error
 */
uint8_t scopeSetSamplingFreq(uint32_t freq){
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 80040c4:	2339      	movs	r3, #57	; 0x39
 80040c6:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80040c8:	4b24      	ldr	r3, [pc, #144]	; (800415c <scopeSetSamplingFreq+0xa0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295
 80040d0:	4618      	mov	r0, r3
 80040d2:	f007 fb28 	bl	800b726 <xQueueTakeMutexRecursive>

	if (freq<UINT32_MAX){
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d007      	beq.n	80040ee <scopeSetSamplingFreq+0x32>
		scope.settings.samplingFrequency = freq;
 80040de:	4a20      	ldr	r2, [pc, #128]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6093      	str	r3, [r2, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80040e4:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2020 	strb.w	r2, [r3, #32]
 80040ec:	e01e      	b.n	800412c <scopeSetSamplingFreq+0x70>
	}else{
		if(scope.numOfChannles==1){
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 80040f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10e      	bne.n	8004118 <scopeSetSamplingFreq+0x5c>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 80040fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4618      	mov	r0, r3
 8004102:	f00b fcf3 	bl	800faec <getMaxScopeSamplingFreqInterleaved>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 800410c:	609a      	str	r2, [r3, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2020 	strb.w	r2, [r3, #32]
 8004116:	e009      	b.n	800412c <scopeSetSamplingFreq+0x70>
		}else{
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 800411a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	f00b fcc5 	bl	800fab0 <getMaxScopeSamplingFreq>
 8004126:	4602      	mov	r2, r0
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <scopeSetSamplingFreq+0xa4>)
 800412a:	609a      	str	r2, [r3, #8]
		}
	}
	result=0;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGiveRecursive(scopeMutex);
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <scopeSetSamplingFreq+0xa0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f007 fac3 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800413a:	2333      	movs	r3, #51	; 0x33
 800413c:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <scopeSetSamplingFreq+0xa8>)
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f107 010c 	add.w	r1, r7, #12
 8004146:	2300      	movs	r3, #0
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	f007 fb20 	bl	800b790 <xQueueGenericSend>

	return result;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000320 	.word	0x20000320
 8004160:	2000032c 	.word	0x2000032c
 8004164:	20004fd8 	.word	0x20004fd8

08004168 <scopeSetTrigLevel>:
/**
 * @brief  Setter for trigger level
 * @param  Signal level to trigger (0xFFFF is 100%)
 * @retval None
 */
void scopeSetTrigLevel(uint16_t level){
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <scopeSetTrigLevel+0x30>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f04f 31ff 	mov.w	r1, #4294967295
 800417a:	4618      	mov	r0, r3
 800417c:	f007 fad3 	bl	800b726 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <scopeSetTrigLevel+0x34>)
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	8353      	strh	r3, [r2, #26]
	xSemaphoreGiveRecursive(scopeMutex);
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <scopeSetTrigLevel+0x30>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f007 fa98 	bl	800b6c0 <xQueueGiveMutexRecursive>
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000320 	.word	0x20000320
 800419c:	2000032c 	.word	0x2000032c

080041a0 <scopeSetPretrigger>:
/**
 * @brief  Setter for pretrigger
 * @param  Fraction of buffer before trigger event (0xFFFF is 100%)
 * @retval None
 */
void scopeSetPretrigger(uint16_t pretrig){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <scopeSetPretrigger+0x30>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f04f 31ff 	mov.w	r1, #4294967295
 80041b2:	4618      	mov	r0, r3
 80041b4:	f007 fab7 	bl	800b726 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <scopeSetPretrigger+0x34>)
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	8393      	strh	r3, [r2, #28]
	xSemaphoreGiveRecursive(scopeMutex);
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <scopeSetPretrigger+0x30>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f007 fa7c 	bl	800b6c0 <xQueueGiveMutexRecursive>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000320 	.word	0x20000320
 80041d4:	2000032c 	.word	0x2000032c

080041d8 <scopeSetNumOfSamples>:
/**
 * @brief  Setter for number of samples
 * @param  Numbr of samples
 * @retval success=0/error
 */
uint8_t scopeSetNumOfSamples(uint32_t smp){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	uint8_t result=BUFFER_SIZE_ERR;
 80041e0:	233a      	movs	r3, #58	; 0x3a
 80041e2:	75fb      	strb	r3, [r7, #23]
	uint32_t smpTmp=scope.settings.samplesToSend;
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <scopeSetNumOfSamples+0x60>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	613b      	str	r3, [r7, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <scopeSetNumOfSamples+0x64>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f04f 31ff 	mov.w	r1, #4294967295
 80041f2:	4618      	mov	r0, r3
 80041f4:	f007 fa97 	bl	800b726 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <scopeSetNumOfSamples+0x60>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d204      	bcs.n	800420c <scopeSetNumOfSamples+0x34>
		scope.settings.samplesToSend = smp;
 8004202:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <scopeSetNumOfSamples+0x60>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6153      	str	r3, [r2, #20]
		result=0;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <scopeSetNumOfSamples+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f007 fa55 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004216:	2333      	movs	r3, #51	; 0x33
 8004218:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <scopeSetNumOfSamples+0x68>)
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f107 010e 	add.w	r1, r7, #14
 8004222:	2300      	movs	r3, #0
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	f007 fab2 	bl	800b790 <xQueueGenericSend>
	return result;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000032c 	.word	0x2000032c
 800423c:	20000320 	.word	0x20000320
 8004240:	20004fd8 	.word	0x20004fd8

08004244 <scopeSetNumOfChannels>:
/**
 * @brief  Setter for number of channels
 * @param  Number of channels
 * @retval success=0/error
 */
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
	uint8_t result=BUFFER_SIZE_ERR;
 800424e:	233a      	movs	r3, #58	; 0x3a
 8004250:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=scope.numOfChannles;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004254:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004258:	737b      	strb	r3, [r7, #13]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800425a:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <scopeSetNumOfChannels+0x16c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f04f 31ff 	mov.w	r1, #4294967295
 8004262:	4618      	mov	r0, r3
 8004264:	f007 fa5f 	bl	800b726 <xQueueTakeMutexRecursive>

	 //workaround to exit interleave mode when more channels needed
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d913      	bls.n	8004296 <scopeSetNumOfChannels+0x52>
 800426e:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <scopeSetNumOfChannels+0x52>
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <scopeSetNumOfChannels+0x168>)
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004284:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004286:	b29b      	uxth	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	f00b fc10 	bl	800fab0 <getMaxScopeSamplingFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004294:	609a      	str	r2, [r3, #8]
	}
	//workaround to enter interleave mode again when one channel selected
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <scopeSetNumOfChannels+0x8c>
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <scopeSetNumOfChannels+0x168>)
 800429e:	689c      	ldr	r4, [r3, #8]
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f00b fc01 	bl	800fab0 <getMaxScopeSamplingFreq>
 80042ae:	4603      	mov	r3, r0
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d10d      	bne.n	80042d0 <scopeSetNumOfChannels+0x8c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 80042b4:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	4618      	mov	r0, r3
 80042c4:	f00b fc12 	bl	800faec <getMaxScopeSamplingFreqInterleaved>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b37      	ldr	r3, [pc, #220]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042ce:	609a      	str	r2, [r3, #8]
	}


	if(chan<=MAX_ADC_CHANNELS){
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d865      	bhi.n	80043a2 <scopeSetNumOfChannels+0x15e>
		scope.numOfChannles=chan;
 80042d6:	4a35      	ldr	r2, [pc, #212]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		if(validateBuffUsage()){
 80042de:	f7ff fc93 	bl	8003c08 <validateBuffUsage>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <scopeSetNumOfChannels+0x168>)
 80042ea:	7b7b      	ldrb	r3, [r7, #13]
 80042ec:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80042f0:	e047      	b.n	8004382 <scopeSetNumOfChannels+0x13e>
		}else{
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80042f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80042fc:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	f64e 2160 	movw	r1, #60000	; 0xea60
 8004306:	fb91 f3f3 	sdiv	r3, r1, r3
 800430a:	33c8      	adds	r3, #200	; 0xc8
 800430c:	2b00      	cmp	r3, #0
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	bfb8      	it	lt
 8004314:	425b      	neglt	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	461a      	mov	r2, r3
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <scopeSetNumOfChannels+0x168>)
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c
			if(scope.settings.adcRes>8){
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004320:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b08      	cmp	r3, #8
 8004326:	d905      	bls.n	8004334 <scopeSetNumOfChannels+0xf0>
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <scopeSetNumOfChannels+0x168>)
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	e003      	b.n	800433c <scopeSetNumOfChannels+0xf8>
			}else{
				scope.oneChanSamples=scope.oneChanMemSize;
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <scopeSetNumOfChannels+0x168>)
 800433a:	6413      	str	r3, [r2, #64]	; 0x40
			}
			for(uint8_t i=0;i<chan;i++){
 800433c:	2300      	movs	r3, #0
 800433e:	73bb      	strb	r3, [r7, #14]
 8004340:	e019      	b.n	8004376 <scopeSetNumOfChannels+0x132>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004342:	7bbb      	ldrb	r3, [r7, #14]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004346:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <scopeSetNumOfChannels+0x170>)
 800434e:	1899      	adds	r1, r3, r2
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	4a16      	ldr	r2, [pc, #88]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004354:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <scopeSetNumOfChannels+0x170>)
 800435c:	4413      	add	r3, r2
 800435e:	f003 0201 	and.w	r2, r3, #1
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	440a      	add	r2, r1
 8004366:	4911      	ldr	r1, [pc, #68]	; (80043ac <scopeSetNumOfChannels+0x168>)
 8004368:	330a      	adds	r3, #10
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 8004370:	7bbb      	ldrb	r3, [r7, #14]
 8004372:	3301      	adds	r3, #1
 8004374:	73bb      	strb	r3, [r7, #14]
 8004376:	7bba      	ldrb	r2, [r7, #14]
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	429a      	cmp	r2, r3
 800437c:	d3e1      	bcc.n	8004342 <scopeSetNumOfChannels+0xfe>
			}
			result=0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <scopeSetNumOfChannels+0x16c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f007 f99a 	bl	800b6c0 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 800438c:	2333      	movs	r3, #51	; 0x33
 800438e:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <scopeSetNumOfChannels+0x174>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f107 010a 	add.w	r1, r7, #10
 8004398:	2300      	movs	r3, #0
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	f007 f9f7 	bl	800b790 <xQueueGenericSend>
	}
	return result;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	2000032c 	.word	0x2000032c
 80043b0:	20000320 	.word	0x20000320
 80043b4:	20004fdc 	.word	0x20004fdc
 80043b8:	20004fd8 	.word	0x20004fd8

080043bc <scopeSetTrigChannel>:
/**
 * @brief  Setter for trigger channel
 * @param  Trigger channel
 * @retval success=0/error
 */
uint8_t scopeSetTrigChannel(uint8_t chan){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 80043c6:	2338      	movs	r3, #56	; 0x38
 80043c8:	73fb      	strb	r3, [r7, #15]
	if(chan<=MAX_ADC_CHANNELS){
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d81c      	bhi.n	800440a <scopeSetTrigChannel+0x4e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <scopeSetTrigChannel+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f04f 31ff 	mov.w	r1, #4294967295
 80043d8:	4618      	mov	r0, r3
 80043da:	f007 f9a4 	bl	800b726 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <scopeSetTrigChannel+0x5c>)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
		result=0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <scopeSetTrigChannel+0x58>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f007 f966 	bl	800b6c0 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80043f4:	2333      	movs	r3, #51	; 0x33
 80043f6:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <scopeSetTrigChannel+0x60>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	f107 010c 	add.w	r1, r7, #12
 8004400:	2300      	movs	r3, #0
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	f007 f9c3 	bl	800b790 <xQueueGenericSend>
	}
	return result;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000320 	.word	0x20000320
 8004418:	2000032c 	.word	0x2000032c
 800441c:	20004fd8 	.word	0x20004fd8

08004420 <scopeGetRealSmplFreq>:

uint32_t scopeGetRealSmplFreq(){
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	return scope.settings.samplingFrequency;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <scopeGetRealSmplFreq+0x14>)
 8004426:	689b      	ldr	r3, [r3, #8]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000032c 	.word	0x2000032c

08004438 <scopeSetADCInputChannel>:
 * @brief  ADC channel selections
 *					Selects ADC channel to be sampled. Possible selection defined in mcu_config.h
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	460a      	mov	r2, r1
 8004442:	71fb      	strb	r3, [r7, #7]
 8004444:	4613      	mov	r3, r2
 8004446:	71bb      	strb	r3, [r7, #6]
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8004448:	233d      	movs	r3, #61	; 0x3d
 800444a:	73fb      	strb	r3, [r7, #15]
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d831      	bhi.n	80044b6 <scopeSetADCInputChannel+0x7e>
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <scopeSetADCInputChannel+0x88>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	79ba      	ldrb	r2, [r7, #6]
 800445a:	429a      	cmp	r2, r3
 800445c:	d22b      	bcs.n	80044b6 <scopeSetADCInputChannel+0x7e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <scopeSetADCInputChannel+0x8c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f04f 31ff 	mov.w	r1, #4294967295
 8004466:	4618      	mov	r0, r3
 8004468:	f007 f95d 	bl	800b726 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <scopeSetADCInputChannel+0x90>)
 8004470:	4413      	add	r3, r2
 8004472:	79ba      	ldrb	r2, [r7, #6]
 8004474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		adcSetInputChannel(adc, chann);
 8004478:	79ba      	ldrb	r2, [r7, #6]
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f009 fec0 	bl	800e204 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <scopeSetADCInputChannel+0x90>)
 8004486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f8b7 	bl	8004600 <scopeInitADCMode>

		result = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <scopeSetADCInputChannel+0x8c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f007 f910 	bl	800b6c0 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80044a0:	2333      	movs	r3, #51	; 0x33
 80044a2:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <scopeSetADCInputChannel+0x94>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	f107 010c 	add.w	r1, r7, #12
 80044ac:	2300      	movs	r3, #0
 80044ae:	f04f 32ff 	mov.w	r2, #4294967295
 80044b2:	f007 f96d 	bl	800b790 <xQueueGenericSend>
	}
	return result;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08011798 	.word	0x08011798
 80044c4:	20000320 	.word	0x20000320
 80044c8:	2000032c 	.word	0x2000032c
 80044cc:	20004fd8 	.word	0x20004fd8

080044d0 <scopeSetADCInputChannelDefault>:
/**
 * @brief  Set ADC channels to default input
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 80044d6:	233d      	movs	r3, #61	; 0x3d
 80044d8:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <scopeSetADCInputChannelDefault+0x88>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f04f 31ff 	mov.w	r1, #4294967295
 80044e2:	4618      	mov	r0, r3
 80044e4:	f007 f91f 	bl	800b726 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80044e8:	2300      	movs	r3, #0
 80044ea:	71bb      	strb	r3, [r7, #6]
 80044ec:	e01c      	b.n	8004528 <scopeSetADCInputChannelDefault+0x58>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80044ee:	79ba      	ldrb	r2, [r7, #6]
 80044f0:	79bb      	ldrb	r3, [r7, #6]
 80044f2:	491a      	ldr	r1, [pc, #104]	; (800455c <scopeSetADCInputChannelDefault+0x8c>)
 80044f4:	5c89      	ldrb	r1, [r1, r2]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <scopeSetADCInputChannelDefault+0x90>)
 80044f8:	4413      	add	r3, r2
 80044fa:	460a      	mov	r2, r1
 80044fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004500:	79bb      	ldrb	r3, [r7, #6]
 8004502:	4a16      	ldr	r2, [pc, #88]	; (800455c <scopeSetADCInputChannelDefault+0x8c>)
 8004504:	5cd2      	ldrb	r2, [r2, r3]
 8004506:	79bb      	ldrb	r3, [r7, #6]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f009 fe7a 	bl	800e204 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <scopeSetADCInputChannelDefault+0x90>)
 8004512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4618      	mov	r0, r3
 800451a:	f000 f871 	bl	8004600 <scopeInitADCMode>

		result = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8004522:	79bb      	ldrb	r3, [r7, #6]
 8004524:	3301      	adds	r3, #1
 8004526:	71bb      	strb	r3, [r7, #6]
 8004528:	79bb      	ldrb	r3, [r7, #6]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d9df      	bls.n	80044ee <scopeSetADCInputChannelDefault+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <scopeSetADCInputChannelDefault+0x88>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f007 f8c4 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004538:	2333      	movs	r3, #51	; 0x33
 800453a:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <scopeSetADCInputChannelDefault+0x94>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	1d39      	adds	r1, r7, #4
 8004542:	2300      	movs	r3, #0
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	f007 f922 	bl	800b790 <xQueueGenericSend>
	return result;
 800454c:	79fb      	ldrb	r3, [r7, #7]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000320 	.word	0x20000320
 800455c:	08011790 	.word	0x08011790
 8004560:	2000032c 	.word	0x2000032c
 8004564:	20004fd8 	.word	0x20004fd8

08004568 <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 800456e:	233d      	movs	r3, #61	; 0x3d
 8004570:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004572:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <scopeSetADCInputChannelVref+0x88>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f04f 31ff 	mov.w	r1, #4294967295
 800457a:	4618      	mov	r0, r3
 800457c:	f007 f8d3 	bl	800b726 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8004580:	2300      	movs	r3, #0
 8004582:	71bb      	strb	r3, [r7, #6]
 8004584:	e01c      	b.n	80045c0 <scopeSetADCInputChannelVref+0x58>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004586:	79ba      	ldrb	r2, [r7, #6]
 8004588:	79bb      	ldrb	r3, [r7, #6]
 800458a:	491a      	ldr	r1, [pc, #104]	; (80045f4 <scopeSetADCInputChannelVref+0x8c>)
 800458c:	5c89      	ldrb	r1, [r1, r2]
 800458e:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <scopeSetADCInputChannelVref+0x90>)
 8004590:	4413      	add	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8004598:	79bb      	ldrb	r3, [r7, #6]
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <scopeSetADCInputChannelVref+0x8c>)
 800459c:	5cd2      	ldrb	r2, [r2, r3]
 800459e:	79bb      	ldrb	r3, [r7, #6]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f009 fe2e 	bl	800e204 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <scopeSetADCInputChannelVref+0x90>)
 80045aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f825 	bl	8004600 <scopeInitADCMode>

		result = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80045ba:	79bb      	ldrb	r3, [r7, #6]
 80045bc:	3301      	adds	r3, #1
 80045be:	71bb      	strb	r3, [r7, #6]
 80045c0:	79bb      	ldrb	r3, [r7, #6]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d9df      	bls.n	8004586 <scopeSetADCInputChannelVref+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <scopeSetADCInputChannelVref+0x88>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f007 f878 	bl	800b6c0 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80045d0:	2333      	movs	r3, #51	; 0x33
 80045d2:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <scopeSetADCInputChannelVref+0x94>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	1d39      	adds	r1, r7, #4
 80045da:	2300      	movs	r3, #0
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	f007 f8d6 	bl	800b790 <xQueueGenericSend>
	return result;
 80045e4:	79fb      	ldrb	r3, [r7, #7]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000320 	.word	0x20000320
 80045f4:	08011794 	.word	0x08011794
 80045f8:	2000032c 	.word	0x2000032c
 80045fc:	20004fd8 	.word	0x20004fd8

08004600 <scopeInitADCMode>:


uint8_t scopeInitADCMode(scopeMode mode){
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
	switch (mode){
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d006      	beq.n	800461e <scopeInitADCMode+0x1e>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d007      	beq.n	8004624 <scopeInitADCMode+0x24>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d108      	bne.n	800462a <scopeInitADCMode+0x2a>
	case SCOPE_NORMAL_MODE:
		ADCInitNormalMode();
 8004618:	f009 fe98 	bl	800e34c <ADCInitNormalMode>
		break;
 800461c:	e005      	b.n	800462a <scopeInitADCMode+0x2a>
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
 800461e:	f009 fec1 	bl	800e3a4 <ADCInitInterleavedMode>
		break;
 8004622:	e002      	b.n	800462a <scopeInitADCMode+0x2a>
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 8004624:	f009 fee6 	bl	800e3f4 <ADCInitMultiMode>
		break;
 8004628:	bf00      	nop
	}

}
 800462a:	bf00      	nop
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <scopeGetRanges>:
/**
 * @brief  getter of pointer to dafinition of input voltage ranges
 * @param  uint8 pointer - Number of ranges
 * @retval uint16 pointer - Pointer to ranges
 */
const int16_t* scopeGetRanges(uint8_t * len){
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2210      	movs	r2, #16
 8004640:	701a      	strb	r2, [r3, #0]
	return RANGES;	
 8004642:	4b03      	ldr	r3, [pc, #12]	; (8004650 <scopeGetRanges+0x1c>)
#endif


}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	0801179c 	.word	0x0801179c

08004654 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_RESTART;
 800465a:	2311      	movs	r3, #17
 800465c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <scopeRestart+0x24>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	1db9      	adds	r1, r7, #6
 8004664:	2300      	movs	r3, #0
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	f007 f891 	bl	800b790 <xQueueGenericSend>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20004fd8 	.word	0x20004fd8

0800467c <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_START;
 8004682:	2312      	movs	r3, #18
 8004684:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <scopeStart+0x24>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	1db9      	adds	r1, r7, #6
 800468c:	2300      	movs	r3, #0
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	f007 f87d 	bl	800b790 <xQueueGenericSend>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20004fd8 	.word	0x20004fd8

080046a4 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_STOP;
 80046aa:	2313      	movs	r3, #19
 80046ac:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <scopeStop+0x24>)
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	1db9      	adds	r1, r7, #6
 80046b4:	2300      	movs	r3, #0
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ba:	f007 f869 	bl	800b790 <xQueueGenericSend>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20004fd8 	.word	0x20004fd8

080046cc <syncPwmSendInit>:
}

/* ************************************************************************************** */
/* -------------------- Sync PWM generator basic settings via queue --------------------- */
/* ************************************************************************************** */
void syncPwmSendInit(void){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 80046d2:	232c      	movs	r3, #44	; 0x2c
 80046d4:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <syncPwmSendInit+0x24>)
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	1db9      	adds	r1, r7, #6
 80046dc:	2300      	movs	r3, #0
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	f007 f855 	bl	800b790 <xQueueGenericSend>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20013cc0 	.word	0x20013cc0

080046f4 <syncPwmSendDeinit>:

void syncPwmSendDeinit(void){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 80046fa:	232d      	movs	r3, #45	; 0x2d
 80046fc:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <syncPwmSendDeinit+0x24>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	1db9      	adds	r1, r7, #6
 8004704:	2300      	movs	r3, #0
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	f007 f841 	bl	800b790 <xQueueGenericSend>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20013cc0 	.word	0x20013cc0

0800471c <syncPwmSendStart>:

void syncPwmSendStart(void){
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_START;
 8004722:	232e      	movs	r3, #46	; 0x2e
 8004724:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <syncPwmSendStart+0x24>)
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	1db9      	adds	r1, r7, #6
 800472c:	2300      	movs	r3, #0
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	f007 f82d 	bl	800b790 <xQueueGenericSend>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20013cc0 	.word	0x20013cc0

08004744 <syncPwmSendStop>:

void syncPwmSendStop(void){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 800474a:	232f      	movs	r3, #47	; 0x2f
 800474c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <syncPwmSendStop+0x24>)
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	1db9      	adds	r1, r7, #6
 8004754:	2300      	movs	r3, #0
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	f007 f819 	bl	800b790 <xQueueGenericSend>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20013cc0 	.word	0x20013cc0

0800476c <syncPwmChannelNumber>:
	TIM_SYNC_PWM_Stop();
}	

/* The received number determines what channel needs to be configured. */
void syncPwmChannelNumber(uint8_t chanNum)
{	
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <syncPwmChannelNumber+0x20>)
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	f882 3020 	strb.w	r3, [r2, #32]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20013c98 	.word	0x20013c98

08004790 <syncPwmChannelConfig>:

/* Set two DMA transfers to transfer the required data to CCR1 register
	 upon DMA Output Compare event. */
void syncPwmChannelConfig(uint32_t ccr1st, uint16_t ccr2nd)
{	
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f00b fb0d 	bl	800fdc4 <TIM_SYNC_PWM_DMA_ChanConfig>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <syncPwmSetFreq>:

/* Frequency reconfiguring. */
double syncPwmSetFreq(double freq)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	ed87 0b00 	vstr	d0, [r7]
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 80047be:	ed97 0b00 	vldr	d0, [r7]
 80047c2:	f00b fb63 	bl	800fe8c <TIM_Reconfig_SyncPwm>
 80047c6:	eeb0 7a40 	vmov.f32	s14, s0
 80047ca:	eef0 7a60 	vmov.f32	s15, s1
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <syncPwmSetFreq+0x48>)
 80047d0:	ed83 7b06 	vstr	d7, [r3, #24]
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 80047d4:	2330      	movs	r3, #48	; 0x30
 80047d6:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <syncPwmSetFreq+0x4c>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	f107 010e 	add.w	r1, r7, #14
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	f006 ffd3 	bl	800b790 <xQueueGenericSend>
}
 80047ea:	bf00      	nop
 80047ec:	eeb0 0a47 	vmov.f32	s0, s14
 80047f0:	eef0 0a67 	vmov.f32	s1, s15
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20013c98 	.word	0x20013c98
 8004800:	200047b4 	.word	0x200047b4

08004804 <syncPwmSetChannelState>:

void syncPwmSetChannelState(uint8_t channel, uint8_t state)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	460a      	mov	r2, r1
 800480e:	71fb      	strb	r3, [r7, #7]
 8004810:	4613      	mov	r3, r2
 8004812:	71bb      	strb	r3, [r7, #6]
	TIM_SYNC_PWM_ChannelState(channel, state);
 8004814:	79ba      	ldrb	r2, [r7, #6]
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f00b fa8a 	bl	800fd34 <TIM_SYNC_PWM_ChannelState>
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <syncPwmSetStepMode>:

void syncPwmSetStepMode(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Enable();
 800482c:	f00b fb0a 	bl	800fe44 <TIM_SYNC_PWM_StepMode_Enable>
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}

08004834 <syncPwmResetStepMode>:

void syncPwmResetStepMode(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Disable();
 8004838:	f00b fb16 	bl	800fe68 <TIM_SYNC_PWM_StepMode_Disable>
}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_Init+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <HAL_Init+0x40>)
 800484a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_Init+0x40>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_Init+0x40>)
 8004856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_Init+0x40>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <HAL_Init+0x40>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004868:	2003      	movs	r0, #3
 800486a:	f001 fa9d 	bl	8005da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800486e:	2000      	movs	r0, #0
 8004870:	f00a f962 	bl	800eb38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004874:	f00a f934 	bl	800eae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00

08004884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_IncTick+0x20>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_IncTick+0x24>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4413      	add	r3, r2
 8004894:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <HAL_IncTick+0x24>)
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000038 	.word	0x20000038
 80048a8:	20013cc8 	.word	0x20013cc8

080048ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return uwTick;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_GetTick+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20013cc8 	.word	0x20013cc8

080048c4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 80048c8:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <HAL_GetHalVersion+0x10>)
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	01070800 	.word	0x01070800

080048d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e15b      	b.n	8004ba6 <HAL_ADC_Init+0x2ce>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4aa4      	ldr	r2, [pc, #656]	; (8004b84 <HAL_ADC_Init+0x2ac>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_ADC_Init+0x3e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4aa2      	ldr	r2, [pc, #648]	; (8004b88 <HAL_ADC_Init+0x2b0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_ADC_Init+0x3e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4aa1      	ldr	r2, [pc, #644]	; (8004b8c <HAL_ADC_Init+0x2b4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x3e>
 800490c:	f240 1143 	movw	r1, #323	; 0x143
 8004910:	489f      	ldr	r0, [pc, #636]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004912:	f00a f8c5 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d013      	beq.n	8004946 <HAL_ADC_Init+0x6e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d00e      	beq.n	8004946 <HAL_ADC_Init+0x6e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004930:	d009      	beq.n	8004946 <HAL_ADC_Init+0x6e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800493a:	d004      	beq.n	8004946 <HAL_ADC_Init+0x6e>
 800493c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004940:	4893      	ldr	r0, [pc, #588]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004942:	f00a f8ad 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <HAL_ADC_Init+0x9e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004956:	d00e      	beq.n	8004976 <HAL_ADC_Init+0x9e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004960:	d009      	beq.n	8004976 <HAL_ADC_Init+0x9e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800496a:	d004      	beq.n	8004976 <HAL_ADC_Init+0x9e>
 800496c:	f240 1145 	movw	r1, #325	; 0x145
 8004970:	4887      	ldr	r0, [pc, #540]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004972:	f00a f895 	bl	800eaa0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_ADC_Init+0xb8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d004      	beq.n	8004990 <HAL_ADC_Init+0xb8>
 8004986:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800498a:	4881      	ldr	r0, [pc, #516]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 800498c:	f00a f888 	bl	800eaa0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7e1b      	ldrb	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_ADC_Init+0xd2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7e1b      	ldrb	r3, [r3, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d004      	beq.n	80049aa <HAL_ADC_Init+0xd2>
 80049a0:	f240 1147 	movw	r1, #327	; 0x147
 80049a4:	487a      	ldr	r0, [pc, #488]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 80049a6:	f00a f87b 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d054      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ba:	d04f      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c4:	d04a      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ce:	d045      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d8:	d040      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049e2:	d03b      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80049ec:	d036      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80049f6:	d031      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a00:	d02c      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8004a0a:	d027      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004a14:	d022      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8004a1e:	d01d      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a28:	d018      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8004a32:	d013      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004a3c:	d00e      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004a46:	d009      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	4a51      	ldr	r2, [pc, #324]	; (8004b94 <HAL_ADC_Init+0x2bc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_ADC_Init+0x184>
 8004a52:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a56:	484e      	ldr	r0, [pc, #312]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004a58:	f00a f822 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <HAL_ADC_Init+0x1a0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d004      	beq.n	8004a78 <HAL_ADC_Init+0x1a0>
 8004a6e:	f240 1149 	movw	r1, #329	; 0x149
 8004a72:	4847      	ldr	r0, [pc, #284]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004a74:	f00a f814 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_ADC_Init+0x1b0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d904      	bls.n	8004a92 <HAL_ADC_Init+0x1ba>
 8004a88:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004a8c:	4840      	ldr	r0, [pc, #256]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004a8e:	f00a f807 	bl	800eaa0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_ADC_Init+0x1d8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d004      	beq.n	8004ab0 <HAL_ADC_Init+0x1d8>
 8004aa6:	f240 114b 	movw	r1, #331	; 0x14b
 8004aaa:	4839      	ldr	r0, [pc, #228]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004aac:	f009 fff8 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_ADC_Init+0x1fa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_ADC_Init+0x1fa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_ADC_Init+0x1fa>
 8004ac8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004acc:	4830      	ldr	r0, [pc, #192]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004ace:	f009 ffe7 	bl	800eaa0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_ADC_Init+0x218>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d004      	beq.n	8004af0 <HAL_ADC_Init+0x218>
 8004ae6:	f240 114d 	movw	r1, #333	; 0x14d
 8004aea:	4829      	ldr	r0, [pc, #164]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004aec:	f009 ffd8 	bl	800eaa0 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_ADC_Init+0x2bc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d017      	beq.n	8004b2a <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d013      	beq.n	8004b2a <HAL_ADC_Init+0x252>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d00e      	beq.n	8004b2a <HAL_ADC_Init+0x252>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b14:	d009      	beq.n	8004b2a <HAL_ADC_Init+0x252>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b1e:	d004      	beq.n	8004b2a <HAL_ADC_Init+0x252>
 8004b20:	f240 1151 	movw	r1, #337	; 0x151
 8004b24:	481a      	ldr	r0, [pc, #104]	; (8004b90 <HAL_ADC_Init+0x2b8>)
 8004b26:	f009 ffbb 	bl	800eaa0 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_ADC_Init+0x26e>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f008 fff6 	bl	800db24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d122      	bne.n	8004b98 <HAL_ADC_Init+0x2c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b5a:	f023 0302 	bic.w	r3, r3, #2
 8004b5e:	f043 0202 	orr.w	r2, r3, #2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fc6e 	bl	8005448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
 8004b82:	e00b      	b.n	8004b9c <HAL_ADC_Init+0x2c4>
 8004b84:	40012000 	.word	0x40012000
 8004b88:	40012100 	.word	0x40012100
 8004b8c:	40012200 	.word	0x40012200
 8004b90:	08011360 	.word	0x08011360
 8004b94:	0f000001 	.word	0x0f000001
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop

08004bb0 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e036      	b.n	8004c34 <HAL_ADC_DeInit+0x84>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_ADC_DeInit+0x8c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_ADC_DeInit+0x3e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_ADC_DeInit+0x90>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_ADC_DeInit+0x3e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_ADC_DeInit+0x94>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_ADC_DeInit+0x3e>
 8004be4:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004be8:	4817      	ldr	r0, [pc, #92]	; (8004c48 <HAL_ADC_DeInit+0x98>)
 8004bea:	f009 ff59 	bl	800eaa0 <assert_failed>
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0202 	orr.w	r2, r3, #2
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <HAL_ADC_DeInit+0x7a>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f009 f971 	bl	800df00 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40012000 	.word	0x40012000
 8004c40:	40012100 	.word	0x40012100
 8004c44:	40012200 	.word	0x40012200
 8004c48:	08011360 	.word	0x08011360

08004c4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7e1b      	ldrb	r3, [r3, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_ADC_Start+0x26>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7e1b      	ldrb	r3, [r3, #24]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_Start+0x26>
 8004c68:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004c6c:	4865      	ldr	r0, [pc, #404]	; (8004e04 <HAL_ADC_Start+0x1b8>)
 8004c6e:	f009 ff17 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <HAL_ADC_Start+0x56>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c82:	d00e      	beq.n	8004ca2 <HAL_ADC_Start+0x56>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8c:	d009      	beq.n	8004ca2 <HAL_ADC_Start+0x56>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c96:	d004      	beq.n	8004ca2 <HAL_ADC_Start+0x56>
 8004c98:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004c9c:	4859      	ldr	r0, [pc, #356]	; (8004e04 <HAL_ADC_Start+0x1b8>)
 8004c9e:	f009 feff 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_Start+0x64>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0a5      	b.n	8004dfc <HAL_ADC_Start+0x1b0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d018      	beq.n	8004cf8 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_ADC_Start+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4c      	ldr	r2, [pc, #304]	; (8004e0c <HAL_ADC_Start+0x1c0>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0c9a      	lsrs	r2, r3, #18
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004cea:	e002      	b.n	8004cf2 <HAL_ADC_Start+0xa6>
    {
      counter--;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f9      	bne.n	8004cec <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d179      	bne.n	8004dfa <HAL_ADC_Start+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d106      	bne.n	8004d54 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f023 0206 	bic.w	r2, r3, #6
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
 8004d52:	e002      	b.n	8004d5a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_ADC_Start+0x1c4>)
 8004d64:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d6e:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d12a      	bne.n	8004dd2 <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_ADC_Start+0x1c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d015      	beq.n	8004db2 <HAL_ADC_Start+0x166>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_ADC_Start+0x1cc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d105      	bne.n	8004d9c <HAL_ADC_Start+0x150>
 8004d90:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <HAL_ADC_Start+0x1c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_ADC_Start+0x166>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <HAL_ADC_Start+0x1d0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d129      	bne.n	8004dfa <HAL_ADC_Start+0x1ae>
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_ADC_Start+0x1c4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d823      	bhi.n	8004dfa <HAL_ADC_Start+0x1ae>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11c      	bne.n	8004dfa <HAL_ADC_Start+0x1ae>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e013      	b.n	8004dfa <HAL_ADC_Start+0x1ae>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_ADC_Start+0x1c8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10e      	bne.n	8004dfa <HAL_ADC_Start+0x1ae>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_ADC_Start+0x1ae>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004df8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	08011360 	.word	0x08011360
 8004e08:	20000070 	.word	0x20000070
 8004e0c:	431bde83 	.word	0x431bde83
 8004e10:	40012300 	.word	0x40012300
 8004e14:	40012000 	.word	0x40012000
 8004e18:	40012100 	.word	0x40012100
 8004e1c:	40012200 	.word	0x40012200

08004e20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	7e1b      	ldrb	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_ADC_Start_DMA+0x2a>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	7e1b      	ldrb	r3, [r3, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d004      	beq.n	8004e4a <HAL_ADC_Start_DMA+0x2a>
 8004e40:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8004e44:	4879      	ldr	r0, [pc, #484]	; (800502c <HAL_ADC_Start_DMA+0x20c>)
 8004e46:	f009 fe2b 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d013      	beq.n	8004e7a <HAL_ADC_Start_DMA+0x5a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5a:	d00e      	beq.n	8004e7a <HAL_ADC_Start_DMA+0x5a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e64:	d009      	beq.n	8004e7a <HAL_ADC_Start_DMA+0x5a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6e:	d004      	beq.n	8004e7a <HAL_ADC_Start_DMA+0x5a>
 8004e70:	f240 5141 	movw	r1, #1345	; 0x541
 8004e74:	486d      	ldr	r0, [pc, #436]	; (800502c <HAL_ADC_Start_DMA+0x20c>)
 8004e76:	f009 fe13 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_ADC_Start_DMA+0x68>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0cc      	b.n	8005022 <HAL_ADC_Start_DMA+0x202>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d018      	beq.n	8004ed0 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004eae:	4b60      	ldr	r3, [pc, #384]	; (8005030 <HAL_ADC_Start_DMA+0x210>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a60      	ldr	r2, [pc, #384]	; (8005034 <HAL_ADC_Start_DMA+0x214>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	0c9a      	lsrs	r2, r3, #18
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ec2:	e002      	b.n	8004eca <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 80a0 	bne.w	8005020 <HAL_ADC_Start_DMA+0x200>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_ADC_Start_DMA+0xf2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d106      	bne.n	8004f2e <HAL_ADC_Start_DMA+0x10e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f023 0206 	bic.w	r2, r3, #6
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
 8004f2c:	e002      	b.n	8004f34 <HAL_ADC_Start_DMA+0x114>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <HAL_ADC_Start_DMA+0x218>)
 8004f3e:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	4a3d      	ldr	r2, [pc, #244]	; (800503c <HAL_ADC_Start_DMA+0x21c>)
 8004f46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <HAL_ADC_Start_DMA+0x220>)
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <HAL_ADC_Start_DMA+0x224>)
 8004f56:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f60:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004f70:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f80:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	334c      	adds	r3, #76	; 0x4c
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f001 fd67 	bl	8006a64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d12a      	bne.n	8004ff8 <HAL_ADC_Start_DMA+0x1d8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_ADC_Start_DMA+0x228>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d015      	beq.n	8004fd8 <HAL_ADC_Start_DMA+0x1b8>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_ADC_Start_DMA+0x22c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d105      	bne.n	8004fc2 <HAL_ADC_Start_DMA+0x1a2>
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_ADC_Start_DMA+0x218>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_ADC_Start_DMA+0x1b8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_ADC_Start_DMA+0x230>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d129      	bne.n	8005020 <HAL_ADC_Start_DMA+0x200>
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_ADC_Start_DMA+0x218>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2b0f      	cmp	r3, #15
 8004fd6:	d823      	bhi.n	8005020 <HAL_ADC_Start_DMA+0x200>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11c      	bne.n	8005020 <HAL_ADC_Start_DMA+0x200>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	e013      	b.n	8005020 <HAL_ADC_Start_DMA+0x200>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a12      	ldr	r2, [pc, #72]	; (8005048 <HAL_ADC_Start_DMA+0x228>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10e      	bne.n	8005020 <HAL_ADC_Start_DMA+0x200>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_ADC_Start_DMA+0x200>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800501e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08011360 	.word	0x08011360
 8005030:	20000070 	.word	0x20000070
 8005034:	431bde83 	.word	0x431bde83
 8005038:	40012300 	.word	0x40012300
 800503c:	0800565d 	.word	0x0800565d
 8005040:	08005717 	.word	0x08005717
 8005044:	08005733 	.word	0x08005733
 8005048:	40012000 	.word	0x40012000
 800504c:	40012100 	.word	0x40012100
 8005050:	40012200 	.word	0x40012200

08005054 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <HAL_ADC_Stop_DMA+0xbc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_ADC_Stop_DMA+0x34>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_ADC_Stop_DMA+0xc0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_ADC_Stop_DMA+0x34>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_ADC_Stop_DMA+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_ADC_Stop_DMA+0x34>
 800507e:	f240 51c4 	movw	r1, #1476	; 0x5c4
 8005082:	4826      	ldr	r0, [pc, #152]	; (800511c <HAL_ADC_Stop_DMA+0xc8>)
 8005084:	f009 fd0c 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_ADC_Stop_DMA+0x42>
 8005092:	2302      	movs	r3, #2
 8005094:	e038      	b.n	8005108 <HAL_ADC_Stop_DMA+0xb4>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d120      	bne.n	80050fe <HAL_ADC_Stop_DMA+0xaa>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ca:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fd2d 	bl	8006b30 <HAL_DMA_Abort>
 80050d6:	4603      	mov	r3, r0
 80050d8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80050e8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40012000 	.word	0x40012000
 8005114:	40012100 	.word	0x40012100
 8005118:	40012200 	.word	0x40012200
 800511c:	08011360 	.word	0x08011360

08005120 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b12      	cmp	r3, #18
 8005170:	d909      	bls.n	8005186 <HAL_ADC_ConfigChannel+0x2a>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a72      	ldr	r2, [pc, #456]	; (8005340 <HAL_ADC_ConfigChannel+0x1e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_ADC_ConfigChannel+0x2a>
 800517c:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 8005180:	4870      	ldr	r0, [pc, #448]	; (8005344 <HAL_ADC_ConfigChannel+0x1e8>)
 8005182:	f009 fc8d 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_ADC_ConfigChannel+0x3a>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b10      	cmp	r3, #16
 8005194:	d904      	bls.n	80051a0 <HAL_ADC_ConfigChannel+0x44>
 8005196:	f240 6159 	movw	r1, #1625	; 0x659
 800519a:	486a      	ldr	r0, [pc, #424]	; (8005344 <HAL_ADC_ConfigChannel+0x1e8>)
 800519c:	f009 fc80 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d01c      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d018      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d014      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d010      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d00c      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d008      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b07      	cmp	r3, #7
 80051de:	d004      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x8e>
 80051e0:	f240 615a 	movw	r1, #1626	; 0x65a
 80051e4:	4857      	ldr	r0, [pc, #348]	; (8005344 <HAL_ADC_ConfigChannel+0x1e8>)
 80051e6:	f009 fc5b 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x9c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e118      	b.n	800542a <HAL_ADC_ConfigChannel+0x2ce>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b09      	cmp	r3, #9
 8005206:	d925      	bls.n	8005254 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68d9      	ldr	r1, [r3, #12]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	3b1e      	subs	r3, #30
 800521e:	2207      	movs	r2, #7
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43da      	mvns	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	400a      	ands	r2, r1
 800522c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68d9      	ldr	r1, [r3, #12]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	4618      	mov	r0, r3
 8005240:	4603      	mov	r3, r0
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4403      	add	r3, r0
 8005246:	3b1e      	subs	r3, #30
 8005248:	409a      	lsls	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e022      	b.n	800529a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6919      	ldr	r1, [r3, #16]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	2207      	movs	r2, #7
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43da      	mvns	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	400a      	ands	r2, r1
 8005276:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6919      	ldr	r1, [r3, #16]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	4618      	mov	r0, r3
 800528a:	4603      	mov	r3, r0
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4403      	add	r3, r0
 8005290:	409a      	lsls	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d824      	bhi.n	80052ec <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	3b05      	subs	r3, #5
 80052b4:	221f      	movs	r2, #31
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43da      	mvns	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	400a      	ands	r2, r1
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4618      	mov	r0, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	3b05      	subs	r3, #5
 80052de:	fa00 f203 	lsl.w	r2, r0, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34
 80052ea:	e051      	b.n	8005390 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d829      	bhi.n	8005348 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	3b23      	subs	r3, #35	; 0x23
 8005306:	221f      	movs	r2, #31
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43da      	mvns	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	400a      	ands	r2, r1
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	4618      	mov	r0, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	3b23      	subs	r3, #35	; 0x23
 8005330:	fa00 f203 	lsl.w	r2, r0, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
 800533c:	e028      	b.n	8005390 <HAL_ADC_ConfigChannel+0x234>
 800533e:	bf00      	nop
 8005340:	10000012 	.word	0x10000012
 8005344:	08011360 	.word	0x08011360
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	3b41      	subs	r3, #65	; 0x41
 800535a:	221f      	movs	r2, #31
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43da      	mvns	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	400a      	ands	r2, r1
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4618      	mov	r0, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	3b41      	subs	r3, #65	; 0x41
 8005384:	fa00 f203 	lsl.w	r2, r0, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <HAL_ADC_ConfigChannel+0x2d8>)
 8005392:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a27      	ldr	r2, [pc, #156]	; (8005438 <HAL_ADC_ConfigChannel+0x2dc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10f      	bne.n	80053be <HAL_ADC_ConfigChannel+0x262>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b12      	cmp	r3, #18
 80053a4:	d10b      	bne.n	80053be <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_ADC_ConfigChannel+0x2dc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d12b      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x2c4>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_ADC_ConfigChannel+0x2e0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <HAL_ADC_ConfigChannel+0x27e>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b11      	cmp	r3, #17
 80053d8:	d122      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <HAL_ADC_ConfigChannel+0x2e0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d111      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053fc:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_ADC_ConfigChannel+0x2e4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a10      	ldr	r2, [pc, #64]	; (8005444 <HAL_ADC_ConfigChannel+0x2e8>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0c9a      	lsrs	r2, r3, #18
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005412:	e002      	b.n	800541a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3b01      	subs	r3, #1
 8005418:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f9      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40012300 	.word	0x40012300
 8005438:	40012000 	.word	0x40012000
 800543c:	10000012 	.word	0x10000012
 8005440:	20000070 	.word	0x20000070
 8005444:	431bde83 	.word	0x431bde83

08005448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005450:	4b7f      	ldr	r3, [pc, #508]	; (8005650 <ADC_Init+0x208>)
 8005452:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	4a5e      	ldr	r2, [pc, #376]	; (8005654 <ADC_Init+0x20c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6899      	ldr	r1, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6899      	ldr	r1, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	e00f      	b.n	8005546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0202 	bic.w	r2, r2, #2
 8005554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7e1b      	ldrb	r3, [r3, #24]
 8005560:	005a      	lsls	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d028      	beq.n	80055c6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <ADC_Init+0x13c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b08      	cmp	r3, #8
 8005582:	d904      	bls.n	800558e <ADC_Init+0x146>
 8005584:	f240 7175 	movw	r1, #1909	; 0x775
 8005588:	4833      	ldr	r0, [pc, #204]	; (8005658 <ADC_Init+0x210>)
 800558a:	f009 fa89 	bl	800eaa0 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80055ac:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	3b01      	subs	r3, #1
 80055ba:	035a      	lsls	r2, r3, #13
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	e007      	b.n	80055d6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	051a      	lsls	r2, r3, #20
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800560a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005618:	025a      	lsls	r2, r3, #9
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6899      	ldr	r1, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	029a      	lsls	r2, r3, #10
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40012300 	.word	0x40012300
 8005654:	0f000001 	.word	0x0f000001
 8005658:	08011360 	.word	0x08011360

0800565c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005672:	2b00      	cmp	r3, #0
 8005674:	d13c      	bne.n	80056f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d12b      	bne.n	80056e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005694:	2b00      	cmp	r3, #0
 8005696:	d127      	bne.n	80056e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d119      	bne.n	80056e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0220 	bic.w	r2, r2, #32
 80056c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fd19 	bl	8005120 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056ee:	e00e      	b.n	800570e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff fd23 	bl	8005148 <HAL_ADC_ErrorCallback>
}
 8005702:	e004      	b.n	800570e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fd05 	bl	8005134 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f043 0204 	orr.w	r2, r3, #4
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fcf8 	bl	8005148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	7e1b      	ldrb	r3, [r3, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	7e1b      	ldrb	r3, [r3, #24]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d004      	beq.n	800578a <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 8005780:	f240 2149 	movw	r1, #585	; 0x249
 8005784:	4869      	ldr	r0, [pc, #420]	; (800592c <HAL_ADCEx_MultiModeStart_DMA+0x1cc>)
 8005786:	f009 f98b 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800579a:	d00e      	beq.n	80057ba <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d009      	beq.n	80057ba <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ae:	d004      	beq.n	80057ba <HAL_ADCEx_MultiModeStart_DMA+0x5a>
 80057b0:	f240 214a 	movw	r1, #586	; 0x24a
 80057b4:	485d      	ldr	r0, [pc, #372]	; (800592c <HAL_ADCEx_MultiModeStart_DMA+0x1cc>)
 80057b6:	f009 f973 	bl	800eaa0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <HAL_ADCEx_MultiModeStart_DMA+0x78>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d004      	beq.n	80057d8 <HAL_ADCEx_MultiModeStart_DMA+0x78>
 80057ce:	f240 214b 	movw	r1, #587	; 0x24b
 80057d2:	4856      	ldr	r0, [pc, #344]	; (800592c <HAL_ADCEx_MultiModeStart_DMA+0x1cc>)
 80057d4:	f009 f964 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_ADCEx_MultiModeStart_DMA+0x86>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e09e      	b.n	8005924 <HAL_ADCEx_MultiModeStart_DMA+0x1c4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d018      	beq.n	800582e <HAL_ADCEx_MultiModeStart_DMA+0xce>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800580c:	4b48      	ldr	r3, [pc, #288]	; (8005930 <HAL_ADCEx_MultiModeStart_DMA+0x1d0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a48      	ldr	r2, [pc, #288]	; (8005934 <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0c9a      	lsrs	r2, r3, #18
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005820:	e002      	b.n	8005828 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    {
      counter--;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3b01      	subs	r3, #1
 8005826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f9      	bne.n	8005822 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d172      	bne.n	8005922 <HAL_ADCEx_MultiModeStart_DMA+0x1c2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <HAL_ADCEx_MultiModeStart_DMA+0x10e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d106      	bne.n	800588a <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f023 0206 	bic.w	r2, r3, #6
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
 8005888:	e002      	b.n	8005890 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 800589e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	4a24      	ldr	r2, [pc, #144]	; (8005940 <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0202 	mvn.w	r2, #2
 80058b8:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058c8:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
 80058cc:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <HAL_ADCEx_MultiModeStart_DMA+0x186>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	e005      	b.n	80058f2 <HAL_ADCEx_MultiModeStart_DMA+0x192>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3308      	adds	r3, #8
 80058fa:	4619      	mov	r1, r3
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f001 f8b0 	bl	8006a64 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <HAL_ADCEx_MultiModeStart_DMA+0x1c2>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005920:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	080113a8 	.word	0x080113a8
 8005930:	20000070 	.word	0x20000070
 8005934:	431bde83 	.word	0x431bde83
 8005938:	08005b21 	.word	0x08005b21
 800593c:	08005bc7 	.word	0x08005bc7
 8005940:	08005be3 	.word	0x08005be3
 8005944:	40012300 	.word	0x40012300

08005948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]

  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d034      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d030      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d02c      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b05      	cmp	r3, #5
 8005970:	d028      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d024      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b07      	cmp	r3, #7
 8005980:	d020      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b09      	cmp	r3, #9
 8005988:	d01c      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b11      	cmp	r3, #17
 8005990:	d018      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b12      	cmp	r3, #18
 8005998:	d014      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b15      	cmp	r3, #21
 80059a0:	d010      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b16      	cmp	r3, #22
 80059a8:	d00c      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b17      	cmp	r3, #23
 80059b0:	d008      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b19      	cmp	r3, #25
 80059b8:	d004      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80059ba:	f240 31bd 	movw	r1, #957	; 0x3bd
 80059be:	4856      	ldr	r0, [pc, #344]	; (8005b18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059c0:	f009 f86e 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d4:	d00e      	beq.n	80059f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059de:	d009      	beq.n	80059f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059e8:	d004      	beq.n	80059f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80059ea:	f240 31be 	movw	r1, #958	; 0x3be
 80059ee:	484a      	ldr	r0, [pc, #296]	; (8005b18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059f0:	f009 f856 	bl	800eaa0 <assert_failed>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d04f      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d04a      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d045      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a18:	d040      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a22:	d03b      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a2c:	d036      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a36:	d031      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a40:	d02c      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4a:	d027      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005a54:	d022      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a5e:	d01d      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005a68:	d018      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a72:	d013      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005a7c:	d00e      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005a86:	d009      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a90:	d004      	beq.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005a92:	f240 31bf 	movw	r1, #959	; 0x3bf
 8005a96:	4820      	ldr	r0, [pc, #128]	; (8005b18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a98:	f009 f802 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e031      	b.n	8005b0e <HAL_ADCEx_MultiModeConfigChannel+0x1c6>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f023 021f 	bic.w	r2, r3, #31
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	080113a8 	.word	0x080113a8
 8005b1c:	40012300 	.word	0x40012300

08005b20 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d13c      	bne.n	8005bb4 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d12b      	bne.n	8005bac <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d127      	bne.n	8005bac <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d119      	bne.n	8005bac <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0220 	bic.w	r2, r2, #32
 8005b86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fab7 	bl	8005120 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005bb2:	e004      	b.n	8005bbe <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff faad 	bl	8005134 <HAL_ADC_ConvHalfCpltCallback>
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff faa0 	bl	8005148 <HAL_ADC_ErrorCallback>
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c20:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <__NVIC_SetPriorityGrouping+0x44>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c42:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <__NVIC_SetPriorityGrouping+0x44>)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	60d3      	str	r3, [r2, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <__NVIC_GetPriorityGrouping+0x18>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	f003 0307 	and.w	r3, r3, #7
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	e000ed00 	.word	0xe000ed00

08005c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	db0b      	blt.n	8005c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	f003 021f 	and.w	r2, r3, #31
 8005c8c:	4907      	ldr	r1, [pc, #28]	; (8005cac <__NVIC_EnableIRQ+0x38>)
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	2001      	movs	r0, #1
 8005c96:	fa00 f202 	lsl.w	r2, r0, r2
 8005c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	e000e100 	.word	0xe000e100

08005cb0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	db0c      	blt.n	8005cdc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	f003 021f 	and.w	r2, r3, #31
 8005cc8:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <__NVIC_ClearPendingIRQ+0x38>)
 8005cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cd6:	3360      	adds	r3, #96	; 0x60
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000e100 	.word	0xe000e100

08005cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db0a      	blt.n	8005d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	490c      	ldr	r1, [pc, #48]	; (8005d38 <__NVIC_SetPriority+0x4c>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	0112      	lsls	r2, r2, #4
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d14:	e00a      	b.n	8005d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <__NVIC_SetPriority+0x50>)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3b04      	subs	r3, #4
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	761a      	strb	r2, [r3, #24]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000e100 	.word	0xe000e100
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f1c3 0307 	rsb	r3, r3, #7
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	bf28      	it	cs
 8005d5e:	2304      	movcs	r3, #4
 8005d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d902      	bls.n	8005d70 <NVIC_EncodePriority+0x30>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3b03      	subs	r3, #3
 8005d6e:	e000      	b.n	8005d72 <NVIC_EncodePriority+0x32>
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	401a      	ands	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	43d9      	mvns	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	4313      	orrs	r3, r2
         );
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3724      	adds	r7, #36	; 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b07      	cmp	r3, #7
 8005db4:	d00f      	beq.n	8005dd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d00c      	beq.n	8005dd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d009      	beq.n	8005dd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d006      	beq.n	8005dd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d003      	beq.n	8005dd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005dce:	2192      	movs	r1, #146	; 0x92
 8005dd0:	4804      	ldr	r0, [pc, #16]	; (8005de4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005dd2:	f008 fe65 	bl	800eaa0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff1a 	bl	8005c10 <__NVIC_SetPriorityGrouping>
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	080113f4 	.word	0x080113f4

08005de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b0f      	cmp	r3, #15
 8005dfe:	d903      	bls.n	8005e08 <HAL_NVIC_SetPriority+0x20>
 8005e00:	21aa      	movs	r1, #170	; 0xaa
 8005e02:	480e      	ldr	r0, [pc, #56]	; (8005e3c <HAL_NVIC_SetPriority+0x54>)
 8005e04:	f008 fe4c 	bl	800eaa0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	d903      	bls.n	8005e16 <HAL_NVIC_SetPriority+0x2e>
 8005e0e:	21ab      	movs	r1, #171	; 0xab
 8005e10:	480a      	ldr	r0, [pc, #40]	; (8005e3c <HAL_NVIC_SetPriority+0x54>)
 8005e12:	f008 fe45 	bl	800eaa0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e16:	f7ff ff1f 	bl	8005c58 <__NVIC_GetPriorityGrouping>
 8005e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	6978      	ldr	r0, [r7, #20]
 8005e22:	f7ff ff8d 	bl	8005d40 <NVIC_EncodePriority>
 8005e26:	4602      	mov	r2, r0
 8005e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ff5c 	bl	8005cec <__NVIC_SetPriority>
}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	080113f4 	.word	0x080113f4

08005e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da03      	bge.n	8005e5a <HAL_NVIC_EnableIRQ+0x1a>
 8005e52:	21be      	movs	r1, #190	; 0xbe
 8005e54:	4805      	ldr	r0, [pc, #20]	; (8005e6c <HAL_NVIC_EnableIRQ+0x2c>)
 8005e56:	f008 fe23 	bl	800eaa0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff08 	bl	8005c74 <__NVIC_EnableIRQ>
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	080113f4 	.word	0x080113f4

08005e70 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da04      	bge.n	8005e8c <HAL_NVIC_ClearPendingIRQ+0x1c>
 8005e82:	f240 11a7 	movw	r1, #423	; 0x1a7
 8005e86:	4806      	ldr	r0, [pc, #24]	; (8005ea0 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8005e88:	f008 fe0a 	bl	800eaa0 <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ff0d 	bl	8005cb0 <__NVIC_ClearPendingIRQ>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	080113f4 	.word	0x080113f4

08005ea4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e01e      	b.n	8005ef4 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a10      	ldr	r2, [pc, #64]	; (8005efc <HAL_DAC_Init+0x58>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_DAC_Init+0x26>
 8005ec0:	f240 1115 	movw	r1, #277	; 0x115
 8005ec4:	480e      	ldr	r0, [pc, #56]	; (8005f00 <HAL_DAC_Init+0x5c>)
 8005ec6:	f008 fdeb 	bl	800eaa0 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_DAC_Init+0x3c>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f008 fbb0 	bl	800e640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40007400 	.word	0x40007400
 8005f00:	08011440 	.word	0x08011440

08005f04 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_DAC_Stop+0x20>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d004      	beq.n	8005f24 <HAL_DAC_Stop+0x20>
 8005f1a:	f240 11eb 	movw	r1, #491	; 0x1eb
 8005f1e:	480b      	ldr	r0, [pc, #44]	; (8005f4c <HAL_DAC_Stop+0x48>)
 8005f20:	f008 fdbe 	bl	800eaa0 <assert_failed>
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43da      	mvns	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	400a      	ands	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	08011440 	.word	0x08011440

08005f50 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_DAC_Start_DMA+0x28>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d004      	beq.n	8005f78 <HAL_DAC_Start_DMA+0x28>
 8005f6e:	f240 210d 	movw	r1, #525	; 0x20d
 8005f72:	4855      	ldr	r0, [pc, #340]	; (80060c8 <HAL_DAC_Start_DMA+0x178>)
 8005f74:	f008 fd94 	bl	800eaa0 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_DAC_Start_DMA+0x44>
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d007      	beq.n	8005f94 <HAL_DAC_Start_DMA+0x44>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d004      	beq.n	8005f94 <HAL_DAC_Start_DMA+0x44>
 8005f8a:	f240 210e 	movw	r1, #526	; 0x20e
 8005f8e:	484e      	ldr	r0, [pc, #312]	; (80060c8 <HAL_DAC_Start_DMA+0x178>)
 8005f90:	f008 fd86 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	795b      	ldrb	r3, [r3, #5]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_DAC_Start_DMA+0x50>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e08e      	b.n	80060be <HAL_DAC_Start_DMA+0x16e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d12a      	bne.n	8006008 <HAL_DAC_Start_DMA+0xb8>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4a45      	ldr	r2, [pc, #276]	; (80060cc <HAL_DAC_Start_DMA+0x17c>)
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4a44      	ldr	r2, [pc, #272]	; (80060d0 <HAL_DAC_Start_DMA+0x180>)
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4a43      	ldr	r2, [pc, #268]	; (80060d4 <HAL_DAC_Start_DMA+0x184>)
 8005fc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fd8:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d009      	beq.n	8005ff4 <HAL_DAC_Start_DMA+0xa4>
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d00c      	beq.n	8005ffe <HAL_DAC_Start_DMA+0xae>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d000      	beq.n	8005fea <HAL_DAC_Start_DMA+0x9a>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005fe8:	e039      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	617b      	str	r3, [r7, #20]
        break;
 8005ff2:	e034      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330c      	adds	r3, #12
 8005ffa:	617b      	str	r3, [r7, #20]
        break;
 8005ffc:	e02f      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3310      	adds	r3, #16
 8006004:	617b      	str	r3, [r7, #20]
        break;
 8006006:	e02a      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a32      	ldr	r2, [pc, #200]	; (80060d8 <HAL_DAC_Start_DMA+0x188>)
 800600e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a31      	ldr	r2, [pc, #196]	; (80060dc <HAL_DAC_Start_DMA+0x18c>)
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <HAL_DAC_Start_DMA+0x190>)
 800601e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800602e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	2b04      	cmp	r3, #4
 8006034:	d009      	beq.n	800604a <HAL_DAC_Start_DMA+0xfa>
 8006036:	2b08      	cmp	r3, #8
 8006038:	d00c      	beq.n	8006054 <HAL_DAC_Start_DMA+0x104>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d000      	beq.n	8006040 <HAL_DAC_Start_DMA+0xf0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800603e:	e00e      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	617b      	str	r3, [r7, #20]
        break;
 8006048:	e009      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3318      	adds	r3, #24
 8006050:	617b      	str	r3, [r7, #20]
        break;
 8006052:	e004      	b.n	800605e <HAL_DAC_Start_DMA+0x10e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	331c      	adds	r3, #28
 800605a:	617b      	str	r3, [r7, #20]
        break;
 800605c:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <HAL_DAC_Start_DMA+0x134>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006072:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6898      	ldr	r0, [r3, #8]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	f000 fcf1 	bl	8006a64 <HAL_DMA_Start_IT>
 8006082:	e00e      	b.n	80060a2 <HAL_DAC_Start_DMA+0x152>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006092:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68d8      	ldr	r0, [r3, #12]
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	f000 fce1 	bl	8006a64 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6819      	ldr	r1, [r3, #0]
 80060a8:	2201      	movs	r2, #1
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	409a      	lsls	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08011440 	.word	0x08011440
 80060cc:	080062d9 	.word	0x080062d9
 80060d0:	080062fb 	.word	0x080062fb
 80060d4:	08006317 	.word	0x08006317
 80060d8:	08006381 	.word	0x08006381
 80060dc:	080063a3 	.word	0x080063a3
 80060e0:	080063bf 	.word	0x080063bf

080060e4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_DAC_Stop_DMA+0x24>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d004      	beq.n	8006108 <HAL_DAC_Stop_DMA+0x24>
 80060fe:	f44f 7121 	mov.w	r1, #644	; 0x284
 8006102:	481e      	ldr	r0, [pc, #120]	; (800617c <HAL_DAC_Stop_DMA+0x98>)
 8006104:	f008 fccc 	bl	800eaa0 <assert_failed>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	43da      	mvns	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	400a      	ands	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6819      	ldr	r1, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43da      	mvns	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	400a      	ands	r2, r1
 8006138:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_DAC_Stop_DMA+0x6c>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fcf3 	bl	8006b30 <HAL_DMA_Abort>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e006      	b.n	800615e <HAL_DAC_Stop_DMA+0x7a>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fceb 	bl	8006b30 <HAL_DMA_Abort>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_DAC_Stop_DMA+0x88>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2204      	movs	r2, #4
 8006168:	711a      	strb	r2, [r3, #4]
 800616a:	e002      	b.n	8006172 <HAL_DAC_Stop_DMA+0x8e>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	08011440 	.word	0x08011440

08006180 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d024      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b24      	cmp	r3, #36	; 0x24
 80061de:	d020      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d01c      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b14      	cmp	r3, #20
 80061ee:	d018      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b1c      	cmp	r3, #28
 80061f6:	d014      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d010      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b2c      	cmp	r3, #44	; 0x2c
 8006206:	d00c      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b34      	cmp	r3, #52	; 0x34
 800620e:	d008      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b3c      	cmp	r3, #60	; 0x3c
 8006216:	d004      	beq.n	8006222 <HAL_DAC_ConfigChannel+0x66>
 8006218:	f240 3156 	movw	r1, #854	; 0x356
 800621c:	482d      	ldr	r0, [pc, #180]	; (80062d4 <HAL_DAC_ConfigChannel+0x118>)
 800621e:	f008 fc3f 	bl	800eaa0 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_DAC_ConfigChannel+0x80>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d004      	beq.n	800623c <HAL_DAC_ConfigChannel+0x80>
 8006232:	f240 3157 	movw	r1, #855	; 0x357
 8006236:	4827      	ldr	r0, [pc, #156]	; (80062d4 <HAL_DAC_ConfigChannel+0x118>)
 8006238:	f008 fc32 	bl	800eaa0 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <HAL_DAC_ConfigChannel+0x96>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b10      	cmp	r3, #16
 8006246:	d004      	beq.n	8006252 <HAL_DAC_ConfigChannel+0x96>
 8006248:	f44f 7156 	mov.w	r1, #856	; 0x358
 800624c:	4821      	ldr	r0, [pc, #132]	; (80062d4 <HAL_DAC_ConfigChannel+0x118>)
 800624e:	f008 fc27 	bl	800eaa0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	795b      	ldrb	r3, [r3, #5]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_DAC_ConfigChannel+0xa2>
 800625a:	2302      	movs	r3, #2
 800625c:	e036      	b.n	80062cc <HAL_DAC_ConfigChannel+0x110>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2202      	movs	r2, #2
 8006268:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006272:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4013      	ands	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	22c0      	movs	r2, #192	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43da      	mvns	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	400a      	ands	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	08011440 	.word	0x08011440

080062d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff ff4a 	bl	8006180 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	711a      	strb	r2, [r3, #4]
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff ff43 	bl	8006194 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ff39 	bl	80061a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	711a      	strb	r2, [r3, #4]
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff ffd8 	bl	8006344 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	711a      	strb	r2, [r3, #4]
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff ffd1 	bl	8006358 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f043 0204 	orr.w	r2, r3, #4
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff ffc7 	bl	800636c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	711a      	strb	r2, [r3, #4]
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063f8:	f7fe fa58 	bl	80048ac <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e204      	b.n	8006812 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a97      	ldr	r2, [pc, #604]	; (800666c <HAL_DMA_Init+0x280>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d04e      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a96      	ldr	r2, [pc, #600]	; (8006670 <HAL_DMA_Init+0x284>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d049      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a94      	ldr	r2, [pc, #592]	; (8006674 <HAL_DMA_Init+0x288>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d044      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a93      	ldr	r2, [pc, #588]	; (8006678 <HAL_DMA_Init+0x28c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d03f      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a91      	ldr	r2, [pc, #580]	; (800667c <HAL_DMA_Init+0x290>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d03a      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a90      	ldr	r2, [pc, #576]	; (8006680 <HAL_DMA_Init+0x294>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d035      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a8e      	ldr	r2, [pc, #568]	; (8006684 <HAL_DMA_Init+0x298>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d030      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a8d      	ldr	r2, [pc, #564]	; (8006688 <HAL_DMA_Init+0x29c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d02b      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a8b      	ldr	r2, [pc, #556]	; (800668c <HAL_DMA_Init+0x2a0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d026      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a8a      	ldr	r2, [pc, #552]	; (8006690 <HAL_DMA_Init+0x2a4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d021      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a88      	ldr	r2, [pc, #544]	; (8006694 <HAL_DMA_Init+0x2a8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01c      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a87      	ldr	r2, [pc, #540]	; (8006698 <HAL_DMA_Init+0x2ac>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d017      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a85      	ldr	r2, [pc, #532]	; (800669c <HAL_DMA_Init+0x2b0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d012      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a84      	ldr	r2, [pc, #528]	; (80066a0 <HAL_DMA_Init+0x2b4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00d      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a82      	ldr	r2, [pc, #520]	; (80066a4 <HAL_DMA_Init+0x2b8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d008      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a81      	ldr	r2, [pc, #516]	; (80066a8 <HAL_DMA_Init+0x2bc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <HAL_DMA_Init+0xc4>
 80064a8:	21b8      	movs	r1, #184	; 0xb8
 80064aa:	4880      	ldr	r0, [pc, #512]	; (80066ac <HAL_DMA_Init+0x2c0>)
 80064ac:	f008 faf8 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d026      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c0:	d021      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ca:	d01c      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80064d4:	d017      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064de:	d012      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80064e8:	d00d      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064f2:	d008      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80064fc:	d003      	beq.n	8006506 <HAL_DMA_Init+0x11a>
 80064fe:	21b9      	movs	r1, #185	; 0xb9
 8006500:	486a      	ldr	r0, [pc, #424]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006502:	f008 facd 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <HAL_DMA_Init+0x13a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d007      	beq.n	8006526 <HAL_DMA_Init+0x13a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d003      	beq.n	8006526 <HAL_DMA_Init+0x13a>
 800651e:	21ba      	movs	r1, #186	; 0xba
 8006520:	4862      	ldr	r0, [pc, #392]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006522:	f008 fabd 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652e:	d007      	beq.n	8006540 <HAL_DMA_Init+0x154>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_DMA_Init+0x154>
 8006538:	21bb      	movs	r1, #187	; 0xbb
 800653a:	485c      	ldr	r0, [pc, #368]	; (80066ac <HAL_DMA_Init+0x2c0>)
 800653c:	f008 fab0 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006548:	d007      	beq.n	800655a <HAL_DMA_Init+0x16e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_DMA_Init+0x16e>
 8006552:	21bc      	movs	r1, #188	; 0xbc
 8006554:	4855      	ldr	r0, [pc, #340]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006556:	f008 faa3 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <HAL_DMA_Init+0x192>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656a:	d008      	beq.n	800657e <HAL_DMA_Init+0x192>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006574:	d003      	beq.n	800657e <HAL_DMA_Init+0x192>
 8006576:	21bd      	movs	r1, #189	; 0xbd
 8006578:	484c      	ldr	r0, [pc, #304]	; (80066ac <HAL_DMA_Init+0x2c0>)
 800657a:	f008 fa91 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <HAL_DMA_Init+0x1b6>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658e:	d008      	beq.n	80065a2 <HAL_DMA_Init+0x1b6>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006598:	d003      	beq.n	80065a2 <HAL_DMA_Init+0x1b6>
 800659a:	21be      	movs	r1, #190	; 0xbe
 800659c:	4843      	ldr	r0, [pc, #268]	; (80066ac <HAL_DMA_Init+0x2c0>)
 800659e:	f008 fa7f 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <HAL_DMA_Init+0x1d8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d007      	beq.n	80065c4 <HAL_DMA_Init+0x1d8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d003      	beq.n	80065c4 <HAL_DMA_Init+0x1d8>
 80065bc:	21bf      	movs	r1, #191	; 0xbf
 80065be:	483b      	ldr	r0, [pc, #236]	; (80066ac <HAL_DMA_Init+0x2c0>)
 80065c0:	f008 fa6e 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <HAL_DMA_Init+0x206>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d4:	d00d      	beq.n	80065f2 <HAL_DMA_Init+0x206>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065de:	d008      	beq.n	80065f2 <HAL_DMA_Init+0x206>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065e8:	d003      	beq.n	80065f2 <HAL_DMA_Init+0x206>
 80065ea:	21c0      	movs	r1, #192	; 0xc0
 80065ec:	482f      	ldr	r0, [pc, #188]	; (80066ac <HAL_DMA_Init+0x2c0>)
 80065ee:	f008 fa57 	bl	800eaa0 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_DMA_Init+0x21e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_DMA_Init+0x21e>
 8006602:	21c1      	movs	r1, #193	; 0xc1
 8006604:	4829      	ldr	r0, [pc, #164]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006606:	f008 fa4b 	bl	800eaa0 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d065      	beq.n	80066de <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00f      	beq.n	800663a <HAL_DMA_Init+0x24e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	2b01      	cmp	r3, #1
 8006620:	d00b      	beq.n	800663a <HAL_DMA_Init+0x24e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	2b02      	cmp	r3, #2
 8006628:	d007      	beq.n	800663a <HAL_DMA_Init+0x24e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	2b03      	cmp	r3, #3
 8006630:	d003      	beq.n	800663a <HAL_DMA_Init+0x24e>
 8006632:	21c6      	movs	r1, #198	; 0xc6
 8006634:	481d      	ldr	r0, [pc, #116]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006636:	f008 fa33 	bl	800eaa0 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d036      	beq.n	80066b0 <HAL_DMA_Init+0x2c4>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800664a:	d031      	beq.n	80066b0 <HAL_DMA_Init+0x2c4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006654:	d02c      	beq.n	80066b0 <HAL_DMA_Init+0x2c4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800665e:	d027      	beq.n	80066b0 <HAL_DMA_Init+0x2c4>
 8006660:	21c7      	movs	r1, #199	; 0xc7
 8006662:	4812      	ldr	r0, [pc, #72]	; (80066ac <HAL_DMA_Init+0x2c0>)
 8006664:	f008 fa1c 	bl	800eaa0 <assert_failed>
 8006668:	e022      	b.n	80066b0 <HAL_DMA_Init+0x2c4>
 800666a:	bf00      	nop
 800666c:	40026010 	.word	0x40026010
 8006670:	40026028 	.word	0x40026028
 8006674:	40026040 	.word	0x40026040
 8006678:	40026058 	.word	0x40026058
 800667c:	40026070 	.word	0x40026070
 8006680:	40026088 	.word	0x40026088
 8006684:	400260a0 	.word	0x400260a0
 8006688:	400260b8 	.word	0x400260b8
 800668c:	40026410 	.word	0x40026410
 8006690:	40026428 	.word	0x40026428
 8006694:	40026440 	.word	0x40026440
 8006698:	40026458 	.word	0x40026458
 800669c:	40026470 	.word	0x40026470
 80066a0:	40026488 	.word	0x40026488
 80066a4:	400264a0 	.word	0x400264a0
 80066a8:	400264b8 	.word	0x400264b8
 80066ac:	08011488 	.word	0x08011488
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d012      	beq.n	80066de <HAL_DMA_Init+0x2f2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066c0:	d00d      	beq.n	80066de <HAL_DMA_Init+0x2f2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ca:	d008      	beq.n	80066de <HAL_DMA_Init+0x2f2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066d4:	d003      	beq.n	80066de <HAL_DMA_Init+0x2f2>
 80066d6:	21c8      	movs	r1, #200	; 0xc8
 80066d8:	4850      	ldr	r0, [pc, #320]	; (800681c <HAL_DMA_Init+0x430>)
 80066da:	f008 f9e1 	bl	800eaa0 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066fe:	e00f      	b.n	8006720 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006700:	f7fe f8d4 	bl	80048ac <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b05      	cmp	r3, #5
 800670c:	d908      	bls.n	8006720 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2203      	movs	r2, #3
 8006718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e078      	b.n	8006812 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e8      	bne.n	8006700 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4b39      	ldr	r3, [pc, #228]	; (8006820 <HAL_DMA_Init+0x434>)
 800673a:	4013      	ands	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800674c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	2b04      	cmp	r3, #4
 8006778:	d107      	bne.n	800678a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4313      	orrs	r3, r2
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0307 	bic.w	r3, r3, #7
 80067a0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d117      	bne.n	80067e4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 faa8 	bl	8006d1c <DMA_CheckFifoParam>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2240      	movs	r2, #64	; 0x40
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067e0:	2301      	movs	r3, #1
 80067e2:	e016      	b.n	8006812 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa5f 	bl	8006cb0 <DMA_CalcBaseAndBitshift>
 80067f2:	4603      	mov	r3, r0
 80067f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	223f      	movs	r2, #63	; 0x3f
 80067fc:	409a      	lsls	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	08011488 	.word	0x08011488
 8006820:	f010803f 	.word	0xf010803f

08006824 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0a5      	b.n	8006982 <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d101      	bne.n	8006846 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
 8006844:	e09d      	b.n	8006982 <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a50      	ldr	r2, [pc, #320]	; (800698c <HAL_DMA_DeInit+0x168>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d04f      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a4e      	ldr	r2, [pc, #312]	; (8006990 <HAL_DMA_DeInit+0x16c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4d      	ldr	r2, [pc, #308]	; (8006994 <HAL_DMA_DeInit+0x170>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4b      	ldr	r2, [pc, #300]	; (8006998 <HAL_DMA_DeInit+0x174>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d040      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4a      	ldr	r2, [pc, #296]	; (800699c <HAL_DMA_DeInit+0x178>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a48      	ldr	r2, [pc, #288]	; (80069a0 <HAL_DMA_DeInit+0x17c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a47      	ldr	r2, [pc, #284]	; (80069a4 <HAL_DMA_DeInit+0x180>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a45      	ldr	r2, [pc, #276]	; (80069a8 <HAL_DMA_DeInit+0x184>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a44      	ldr	r2, [pc, #272]	; (80069ac <HAL_DMA_DeInit+0x188>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a42      	ldr	r2, [pc, #264]	; (80069b0 <HAL_DMA_DeInit+0x18c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a41      	ldr	r2, [pc, #260]	; (80069b4 <HAL_DMA_DeInit+0x190>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <HAL_DMA_DeInit+0x194>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3e      	ldr	r2, [pc, #248]	; (80069bc <HAL_DMA_DeInit+0x198>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <HAL_DMA_DeInit+0x19c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3b      	ldr	r2, [pc, #236]	; (80069c4 <HAL_DMA_DeInit+0x1a0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a39      	ldr	r2, [pc, #228]	; (80069c8 <HAL_DMA_DeInit+0x1a4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_DeInit+0xcc>
 80068e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80068ea:	4838      	ldr	r0, [pc, #224]	; (80069cc <HAL_DMA_DeInit+0x1a8>)
 80068ec:	f008 f8d8 	bl	800eaa0 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2221      	movs	r2, #33	; 0x21
 800692e:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9bd 	bl	8006cb0 <DMA_CalcBaseAndBitshift>
 8006936:	4603      	mov	r3, r0
 8006938:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	223f      	movs	r2, #63	; 0x3f
 8006964:	409a      	lsls	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40026010 	.word	0x40026010
 8006990:	40026028 	.word	0x40026028
 8006994:	40026040 	.word	0x40026040
 8006998:	40026058 	.word	0x40026058
 800699c:	40026070 	.word	0x40026070
 80069a0:	40026088 	.word	0x40026088
 80069a4:	400260a0 	.word	0x400260a0
 80069a8:	400260b8 	.word	0x400260b8
 80069ac:	40026410 	.word	0x40026410
 80069b0:	40026428 	.word	0x40026428
 80069b4:	40026440 	.word	0x40026440
 80069b8:	40026458 	.word	0x40026458
 80069bc:	40026470 	.word	0x40026470
 80069c0:	40026488 	.word	0x40026488
 80069c4:	400264a0 	.word	0x400264a0
 80069c8:	400264b8 	.word	0x400264b8
 80069cc:	08011488 	.word	0x08011488

080069d0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_DMA_Start+0x20>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ee:	d304      	bcc.n	80069fa <HAL_DMA_Start+0x2a>
 80069f0:	f240 119d 	movw	r1, #413	; 0x19d
 80069f4:	481a      	ldr	r0, [pc, #104]	; (8006a60 <HAL_DMA_Start+0x90>)
 80069f6:	f008 f853 	bl	800eaa0 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_DMA_Start+0x38>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e026      	b.n	8006a56 <HAL_DMA_Start+0x86>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d115      	bne.n	8006a48 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f90f 	bl	8006c54 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0201 	orr.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e005      	b.n	8006a54 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
 8006a52:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	08011488 	.word	0x08011488

08006a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_DMA_Start_IT+0x26>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d304      	bcc.n	8006a94 <HAL_DMA_Start_IT+0x30>
 8006a8a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8006a8e:	4827      	ldr	r0, [pc, #156]	; (8006b2c <HAL_DMA_Start_IT+0xc8>)
 8006a90:	f008 f806 	bl	800eaa0 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_DMA_Start_IT+0x3e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e040      	b.n	8006b24 <HAL_DMA_Start_IT+0xc0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12f      	bne.n	8006b16 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f8c2 	bl	8006c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	223f      	movs	r2, #63	; 0x3f
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0216 	orr.w	r2, r2, #22
 8006aea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0208 	orr.w	r2, r2, #8
 8006b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e005      	b.n	8006b22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08011488 	.word	0x08011488

08006b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b3e:	f7fd feb5 	bl	80048ac <HAL_GetTick>
 8006b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d008      	beq.n	8006b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e052      	b.n	8006c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0216 	bic.w	r2, r2, #22
 8006b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <HAL_DMA_Abort+0x62>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0208 	bic.w	r2, r2, #8
 8006ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bb2:	e013      	b.n	8006bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bb4:	f7fd fe7a 	bl	80048ac <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	d90c      	bls.n	8006bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e015      	b.n	8006c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e4      	bne.n	8006bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bee:	223f      	movs	r2, #63	; 0x3f
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d004      	beq.n	8006c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2280      	movs	r2, #128	; 0x80
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e00c      	b.n	8006c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2205      	movs	r2, #5
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d108      	bne.n	8006c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c92:	e007      	b.n	8006ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3b10      	subs	r3, #16
 8006cc0:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <DMA_CalcBaseAndBitshift+0x64>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cca:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <DMA_CalcBaseAndBitshift+0x68>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d909      	bls.n	8006cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	659a      	str	r2, [r3, #88]	; 0x58
 8006cf0:	e007      	b.n	8006d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	aaaaaaab 	.word	0xaaaaaaab
 8006d18:	080117ac 	.word	0x080117ac

08006d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d11f      	bne.n	8006d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d855      	bhi.n	8006de8 <DMA_CheckFifoParam+0xcc>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x28>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d67 	.word	0x08006d67
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006de9 	.word	0x08006de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d045      	beq.n	8006dec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e042      	b.n	8006dec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d6e:	d13f      	bne.n	8006df0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d74:	e03c      	b.n	8006df0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	d121      	bne.n	8006dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d836      	bhi.n	8006df4 <DMA_CheckFifoParam+0xd8>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <DMA_CheckFifoParam+0x70>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006da3 	.word	0x08006da3
 8006d94:	08006d9d 	.word	0x08006d9d
 8006d98:	08006db5 	.word	0x08006db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e02f      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d024      	beq.n	8006df8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db2:	e021      	b.n	8006df8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dbc:	d11e      	bne.n	8006dfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dc2:	e01b      	b.n	8006dfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d902      	bls.n	8006dd0 <DMA_CheckFifoParam+0xb4>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d003      	beq.n	8006dd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006dce:	e018      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd4:	e015      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
      break;
 8006de6:	e00b      	b.n	8006e00 <DMA_CheckFifoParam+0xe4>
      break;
 8006de8:	bf00      	nop
 8006dea:	e00a      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006dec:	bf00      	nop
 8006dee:	e008      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006df0:	bf00      	nop
 8006df2:	e006      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;   
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006e00:	bf00      	nop
    }
  } 
  
  return status; 
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a3f      	ldr	r2, [pc, #252]	; (8006f28 <HAL_GPIO_Init+0x118>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01f      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a3e      	ldr	r2, [pc, #248]	; (8006f2c <HAL_GPIO_Init+0x11c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01b      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a3d      	ldr	r2, [pc, #244]	; (8006f30 <HAL_GPIO_Init+0x120>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d017      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a3c      	ldr	r2, [pc, #240]	; (8006f34 <HAL_GPIO_Init+0x124>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a3b      	ldr	r2, [pc, #236]	; (8006f38 <HAL_GPIO_Init+0x128>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00f      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a3a      	ldr	r2, [pc, #232]	; (8006f3c <HAL_GPIO_Init+0x12c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <HAL_GPIO_Init+0x130>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d007      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <HAL_GPIO_Init+0x134>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d003      	beq.n	8006e6e <HAL_GPIO_Init+0x5e>
 8006e66:	21b3      	movs	r1, #179	; 0xb3
 8006e68:	4837      	ldr	r0, [pc, #220]	; (8006f48 <HAL_GPIO_Init+0x138>)
 8006e6a:	f007 fe19 	bl	800eaa0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_GPIO_Init+0x74>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_GPIO_Init+0x7c>
 8006e84:	21b4      	movs	r1, #180	; 0xb4
 8006e86:	4830      	ldr	r0, [pc, #192]	; (8006f48 <HAL_GPIO_Init+0x138>)
 8006e88:	f007 fe0a 	bl	800eaa0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d035      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d031      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b11      	cmp	r3, #17
 8006ea2:	d02d      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d029      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b12      	cmp	r3, #18
 8006eb2:	d025      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a24      	ldr	r2, [pc, #144]	; (8006f4c <HAL_GPIO_Init+0x13c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d020      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a23      	ldr	r2, [pc, #140]	; (8006f50 <HAL_GPIO_Init+0x140>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d01b      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <HAL_GPIO_Init+0x144>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d016      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4a20      	ldr	r2, [pc, #128]	; (8006f58 <HAL_GPIO_Init+0x148>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d011      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_GPIO_Init+0x14c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00c      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <HAL_GPIO_Init+0x150>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_Init+0xf0>
 8006ef8:	21b5      	movs	r1, #181	; 0xb5
 8006efa:	4813      	ldr	r0, [pc, #76]	; (8006f48 <HAL_GPIO_Init+0x138>)
 8006efc:	f007 fdd0 	bl	800eaa0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <HAL_GPIO_Init+0x110>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d007      	beq.n	8006f20 <HAL_GPIO_Init+0x110>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d003      	beq.n	8006f20 <HAL_GPIO_Init+0x110>
 8006f18:	21b6      	movs	r1, #182	; 0xb6
 8006f1a:	480b      	ldr	r0, [pc, #44]	; (8006f48 <HAL_GPIO_Init+0x138>)
 8006f1c:	f007 fdc0 	bl	800eaa0 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e286      	b.n	8007434 <HAL_GPIO_Init+0x624>
 8006f26:	bf00      	nop
 8006f28:	40020000 	.word	0x40020000
 8006f2c:	40020400 	.word	0x40020400
 8006f30:	40020800 	.word	0x40020800
 8006f34:	40020c00 	.word	0x40020c00
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40021400 	.word	0x40021400
 8006f40:	40021800 	.word	0x40021800
 8006f44:	40021c00 	.word	0x40021c00
 8006f48:	080114d0 	.word	0x080114d0
 8006f4c:	10110000 	.word	0x10110000
 8006f50:	10210000 	.word	0x10210000
 8006f54:	10310000 	.word	0x10310000
 8006f58:	10120000 	.word	0x10120000
 8006f5c:	10220000 	.word	0x10220000
 8006f60:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f64:	2201      	movs	r2, #1
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4013      	ands	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	f040 8256 	bne.w	800742e <HAL_GPIO_Init+0x61e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d00b      	beq.n	8006fa2 <HAL_GPIO_Init+0x192>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d007      	beq.n	8006fa2 <HAL_GPIO_Init+0x192>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f96:	2b11      	cmp	r3, #17
 8006f98:	d003      	beq.n	8006fa2 <HAL_GPIO_Init+0x192>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b12      	cmp	r3, #18
 8006fa0:	d144      	bne.n	800702c <HAL_GPIO_Init+0x21c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00f      	beq.n	8006fca <HAL_GPIO_Init+0x1ba>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d00b      	beq.n	8006fca <HAL_GPIO_Init+0x1ba>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d007      	beq.n	8006fca <HAL_GPIO_Init+0x1ba>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d003      	beq.n	8006fca <HAL_GPIO_Init+0x1ba>
 8006fc2:	21c8      	movs	r1, #200	; 0xc8
 8006fc4:	489f      	ldr	r0, [pc, #636]	; (8007244 <HAL_GPIO_Init+0x434>)
 8006fc6:	f007 fd6b 	bl	800eaa0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007000:	2201      	movs	r2, #1
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	43db      	mvns	r3, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4013      	ands	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	f003 0201 	and.w	r2, r3, #1
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	2203      	movs	r2, #3
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43db      	mvns	r3, r3
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	4013      	ands	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4313      	orrs	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d004      	beq.n	800706e <HAL_GPIO_Init+0x25e>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b12      	cmp	r3, #18
 800706a:	f040 8111 	bne.w	8007290 <HAL_GPIO_Init+0x480>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80e8 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b09      	cmp	r3, #9
 800707e:	f000 80e3 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80de 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80d9 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 80d4 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80cf 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	f000 80ca 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	f000 80c5 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	f000 80c0 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	f000 80bb 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	f000 80b6 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	f000 80b1 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	f000 80ac 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	f000 80a7 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	f000 80a2 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b05      	cmp	r3, #5
 800710a:	f000 809d 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b05      	cmp	r3, #5
 8007114:	f000 8098 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b09      	cmp	r3, #9
 800711e:	f000 8093 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b06      	cmp	r3, #6
 8007128:	f000 808e 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b09      	cmp	r3, #9
 8007132:	f000 8089 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b07      	cmp	r3, #7
 800713c:	f000 8084 	beq.w	8007248 <HAL_GPIO_Init+0x438>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b07      	cmp	r3, #7
 8007146:	d07f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b07      	cmp	r3, #7
 800714e:	d07b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d077      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d073      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b08      	cmp	r3, #8
 8007166:	d06f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b09      	cmp	r3, #9
 800716e:	d06b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b09      	cmp	r3, #9
 8007176:	d067      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b0a      	cmp	r3, #10
 800717e:	d063      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b0a      	cmp	r3, #10
 8007186:	d05f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b0b      	cmp	r3, #11
 800718e:	d05b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b0c      	cmp	r3, #12
 8007196:	d057      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b0c      	cmp	r3, #12
 800719e:	d053      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b0d      	cmp	r3, #13
 80071a6:	d04f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b0f      	cmp	r3, #15
 80071ae:	d04b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	d047      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b0c      	cmp	r3, #12
 80071be:	d043      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b06      	cmp	r3, #6
 80071c6:	d03f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d03b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d037      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b05      	cmp	r3, #5
 80071de:	d033      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d02f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d02b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b07      	cmp	r3, #7
 80071f6:	d027      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	d023      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b07      	cmp	r3, #7
 8007206:	d01f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b07      	cmp	r3, #7
 800720e:	d01b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d017      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d013      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b09      	cmp	r3, #9
 8007226:	d00f      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b0a      	cmp	r3, #10
 800722e:	d00b      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b0a      	cmp	r3, #10
 8007236:	d007      	beq.n	8007248 <HAL_GPIO_Init+0x438>
 8007238:	21e0      	movs	r1, #224	; 0xe0
 800723a:	4802      	ldr	r0, [pc, #8]	; (8007244 <HAL_GPIO_Init+0x434>)
 800723c:	f007 fc30 	bl	800eaa0 <assert_failed>
 8007240:	e002      	b.n	8007248 <HAL_GPIO_Init+0x438>
 8007242:	bf00      	nop
 8007244:	080114d0 	.word	0x080114d0
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	08da      	lsrs	r2, r3, #3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3208      	adds	r2, #8
 8007250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	220f      	movs	r2, #15
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4013      	ands	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4313      	orrs	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	08da      	lsrs	r2, r3, #3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3208      	adds	r2, #8
 800728a:	69b9      	ldr	r1, [r7, #24]
 800728c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	2203      	movs	r2, #3
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4013      	ands	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f003 0203 	and.w	r2, r3, #3
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80ae 	beq.w	800742e <HAL_GPIO_Init+0x61e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	4b5b      	ldr	r3, [pc, #364]	; (8007444 <HAL_GPIO_Init+0x634>)
 80072d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072da:	4a5a      	ldr	r2, [pc, #360]	; (8007444 <HAL_GPIO_Init+0x634>)
 80072dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072e0:	6453      	str	r3, [r2, #68]	; 0x44
 80072e2:	4b58      	ldr	r3, [pc, #352]	; (8007444 <HAL_GPIO_Init+0x634>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072ee:	4a56      	ldr	r2, [pc, #344]	; (8007448 <HAL_GPIO_Init+0x638>)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	089b      	lsrs	r3, r3, #2
 80072f4:	3302      	adds	r3, #2
 80072f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	220f      	movs	r2, #15
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	43db      	mvns	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4013      	ands	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a4d      	ldr	r2, [pc, #308]	; (800744c <HAL_GPIO_Init+0x63c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d025      	beq.n	8007366 <HAL_GPIO_Init+0x556>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a4c      	ldr	r2, [pc, #304]	; (8007450 <HAL_GPIO_Init+0x640>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01f      	beq.n	8007362 <HAL_GPIO_Init+0x552>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a4b      	ldr	r2, [pc, #300]	; (8007454 <HAL_GPIO_Init+0x644>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d019      	beq.n	800735e <HAL_GPIO_Init+0x54e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a4a      	ldr	r2, [pc, #296]	; (8007458 <HAL_GPIO_Init+0x648>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_GPIO_Init+0x54a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a49      	ldr	r2, [pc, #292]	; (800745c <HAL_GPIO_Init+0x64c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00d      	beq.n	8007356 <HAL_GPIO_Init+0x546>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a48      	ldr	r2, [pc, #288]	; (8007460 <HAL_GPIO_Init+0x650>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <HAL_GPIO_Init+0x542>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a47      	ldr	r2, [pc, #284]	; (8007464 <HAL_GPIO_Init+0x654>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <HAL_GPIO_Init+0x53e>
 800734a:	2306      	movs	r3, #6
 800734c:	e00c      	b.n	8007368 <HAL_GPIO_Init+0x558>
 800734e:	2307      	movs	r3, #7
 8007350:	e00a      	b.n	8007368 <HAL_GPIO_Init+0x558>
 8007352:	2305      	movs	r3, #5
 8007354:	e008      	b.n	8007368 <HAL_GPIO_Init+0x558>
 8007356:	2304      	movs	r3, #4
 8007358:	e006      	b.n	8007368 <HAL_GPIO_Init+0x558>
 800735a:	2303      	movs	r3, #3
 800735c:	e004      	b.n	8007368 <HAL_GPIO_Init+0x558>
 800735e:	2302      	movs	r3, #2
 8007360:	e002      	b.n	8007368 <HAL_GPIO_Init+0x558>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <HAL_GPIO_Init+0x558>
 8007366:	2300      	movs	r3, #0
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	f002 0203 	and.w	r2, r2, #3
 800736e:	0092      	lsls	r2, r2, #2
 8007370:	4093      	lsls	r3, r2
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4313      	orrs	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007378:	4933      	ldr	r1, [pc, #204]	; (8007448 <HAL_GPIO_Init+0x638>)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	089b      	lsrs	r3, r3, #2
 800737e:	3302      	adds	r3, #2
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007386:	4b38      	ldr	r3, [pc, #224]	; (8007468 <HAL_GPIO_Init+0x658>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	43db      	mvns	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_GPIO_Init+0x59a>
        {
          temp |= iocurrent;
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073aa:	4a2f      	ldr	r2, [pc, #188]	; (8007468 <HAL_GPIO_Init+0x658>)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80073b0:	4b2d      	ldr	r3, [pc, #180]	; (8007468 <HAL_GPIO_Init+0x658>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	43db      	mvns	r3, r3
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4013      	ands	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_GPIO_Init+0x5c4>
        {
          temp |= iocurrent;
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073d4:	4a24      	ldr	r2, [pc, #144]	; (8007468 <HAL_GPIO_Init+0x658>)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073da:	4b23      	ldr	r3, [pc, #140]	; (8007468 <HAL_GPIO_Init+0x658>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_GPIO_Init+0x5ee>
        {
          temp |= iocurrent;
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073fe:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <HAL_GPIO_Init+0x658>)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007404:	4b18      	ldr	r3, [pc, #96]	; (8007468 <HAL_GPIO_Init+0x658>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_GPIO_Init+0x618>
        {
          temp |= iocurrent;
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <HAL_GPIO_Init+0x658>)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3301      	adds	r3, #1
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	f67f ad94 	bls.w	8006f64 <HAL_GPIO_Init+0x154>
      }
    }
  }
}
 800743c:	bf00      	nop
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	40013800 	.word	0x40013800
 800744c:	40020000 	.word	0x40020000
 8007450:	40020400 	.word	0x40020400
 8007454:	40020800 	.word	0x40020800
 8007458:	40020c00 	.word	0x40020c00
 800745c:	40021000 	.word	0x40021000
 8007460:	40021400 	.word	0x40021400
 8007464:	40021800 	.word	0x40021800
 8007468:	40013c00 	.word	0x40013c00

0800746c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e18c      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_RCC_ClockConfig+0x24>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b0f      	cmp	r3, #15
 800748e:	d904      	bls.n	800749a <HAL_RCC_ClockConfig+0x2e>
 8007490:	f240 2151 	movw	r1, #593	; 0x251
 8007494:	4887      	ldr	r0, [pc, #540]	; (80076b4 <HAL_RCC_ClockConfig+0x248>)
 8007496:	f007 fb03 	bl	800eaa0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d031      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d02e      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d02b      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d028      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d025      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d022      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d01f      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	d01c      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d019      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d016      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b0a      	cmp	r3, #10
 80074da:	d013      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b0b      	cmp	r3, #11
 80074e0:	d010      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d00d      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b0d      	cmp	r3, #13
 80074ec:	d00a      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b0e      	cmp	r3, #14
 80074f2:	d007      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	d004      	beq.n	8007504 <HAL_RCC_ClockConfig+0x98>
 80074fa:	f240 2152 	movw	r1, #594	; 0x252
 80074fe:	486d      	ldr	r0, [pc, #436]	; (80076b4 <HAL_RCC_ClockConfig+0x248>)
 8007500:	f007 face 	bl	800eaa0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007504:	4b6c      	ldr	r3, [pc, #432]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d90c      	bls.n	800752c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007512:	4b69      	ldr	r3, [pc, #420]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751a:	4b67      	ldr	r3, [pc, #412]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e136      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d049      	beq.n	80075cc <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007544:	4b5d      	ldr	r3, [pc, #372]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a5c      	ldr	r2, [pc, #368]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800754a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800754e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800755c:	4b57      	ldr	r3, [pc, #348]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a56      	ldr	r2, [pc, #344]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 8007562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d024      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b80      	cmp	r3, #128	; 0x80
 8007576:	d020      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b90      	cmp	r3, #144	; 0x90
 800757e:	d01c      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2ba0      	cmp	r3, #160	; 0xa0
 8007586:	d018      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2bb0      	cmp	r3, #176	; 0xb0
 800758e:	d014      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2bc0      	cmp	r3, #192	; 0xc0
 8007596:	d010      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2bd0      	cmp	r3, #208	; 0xd0
 800759e:	d00c      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2be0      	cmp	r3, #224	; 0xe0
 80075a6:	d008      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2bf0      	cmp	r3, #240	; 0xf0
 80075ae:	d004      	beq.n	80075ba <HAL_RCC_ClockConfig+0x14e>
 80075b0:	f240 2175 	movw	r1, #629	; 0x275
 80075b4:	483f      	ldr	r0, [pc, #252]	; (80076b4 <HAL_RCC_ClockConfig+0x248>)
 80075b6:	f007 fa73 	bl	800eaa0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ba:	4b40      	ldr	r3, [pc, #256]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	493d      	ldr	r1, [pc, #244]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d059      	beq.n	800768c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d010      	beq.n	8007602 <HAL_RCC_ClockConfig+0x196>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d00c      	beq.n	8007602 <HAL_RCC_ClockConfig+0x196>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d008      	beq.n	8007602 <HAL_RCC_ClockConfig+0x196>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d004      	beq.n	8007602 <HAL_RCC_ClockConfig+0x196>
 80075f8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80075fc:	482d      	ldr	r0, [pc, #180]	; (80076b4 <HAL_RCC_ClockConfig+0x248>)
 80075fe:	f007 fa4f 	bl	800eaa0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760a:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d119      	bne.n	800764a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e0bf      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d003      	beq.n	800762a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	2b03      	cmp	r3, #3
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800762a:	4b24      	ldr	r3, [pc, #144]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e0af      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e0a7      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800764a:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 0203 	bic.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4919      	ldr	r1, [pc, #100]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 8007658:	4313      	orrs	r3, r2
 800765a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800765c:	f7fd f926 	bl	80048ac <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007662:	e00a      	b.n	800767a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007664:	f7fd f922 	bl	80048ac <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e08f      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	4b10      	ldr	r3, [pc, #64]	; (80076bc <HAL_RCC_ClockConfig+0x250>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 020c 	and.w	r2, r3, #12
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	429a      	cmp	r2, r3
 800768a:	d1eb      	bne.n	8007664 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d212      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_RCC_ClockConfig+0x24c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d007      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e072      	b.n	800779a <HAL_RCC_ClockConfig+0x32e>
 80076b4:	0801151c 	.word	0x0801151c
 80076b8:	40023c00 	.word	0x40023c00
 80076bc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d025      	beq.n	8007718 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d018      	beq.n	8007706 <HAL_RCC_ClockConfig+0x29a>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076dc:	d013      	beq.n	8007706 <HAL_RCC_ClockConfig+0x29a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076e6:	d00e      	beq.n	8007706 <HAL_RCC_ClockConfig+0x29a>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80076f0:	d009      	beq.n	8007706 <HAL_RCC_ClockConfig+0x29a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80076fa:	d004      	beq.n	8007706 <HAL_RCC_ClockConfig+0x29a>
 80076fc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007700:	4828      	ldr	r0, [pc, #160]	; (80077a4 <HAL_RCC_ClockConfig+0x338>)
 8007702:	f007 f9cd 	bl	800eaa0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <HAL_RCC_ClockConfig+0x33c>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	4925      	ldr	r1, [pc, #148]	; (80077a8 <HAL_RCC_ClockConfig+0x33c>)
 8007714:	4313      	orrs	r3, r2
 8007716:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d026      	beq.n	8007772 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d018      	beq.n	800775e <HAL_RCC_ClockConfig+0x2f2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007734:	d013      	beq.n	800775e <HAL_RCC_ClockConfig+0x2f2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800773e:	d00e      	beq.n	800775e <HAL_RCC_ClockConfig+0x2f2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007748:	d009      	beq.n	800775e <HAL_RCC_ClockConfig+0x2f2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007752:	d004      	beq.n	800775e <HAL_RCC_ClockConfig+0x2f2>
 8007754:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007758:	4812      	ldr	r0, [pc, #72]	; (80077a4 <HAL_RCC_ClockConfig+0x338>)
 800775a:	f007 f9a1 	bl	800eaa0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <HAL_RCC_ClockConfig+0x33c>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	490e      	ldr	r1, [pc, #56]	; (80077a8 <HAL_RCC_ClockConfig+0x33c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007772:	f000 f887 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 8007776:	4601      	mov	r1, r0
 8007778:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_RCC_ClockConfig+0x33c>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <HAL_RCC_ClockConfig+0x340>)
 8007784:	5cd3      	ldrb	r3, [r2, r3]
 8007786:	fa21 f303 	lsr.w	r3, r1, r3
 800778a:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <HAL_RCC_ClockConfig+0x344>)
 800778c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCC_ClockConfig+0x348>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f007 f9d0 	bl	800eb38 <HAL_InitTick>

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	0801151c 	.word	0x0801151c
 80077a8:	40023800 	.word	0x40023800
 80077ac:	08011804 	.word	0x08011804
 80077b0:	20000070 	.word	0x20000070
 80077b4:	20000034 	.word	0x20000034

080077b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <HAL_RCC_GetHCLKFreq+0x14>)
 80077be:	681b      	ldr	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000070 	.word	0x20000070

080077d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077d4:	f7ff fff0 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 80077d8:	4601      	mov	r1, r0
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	0a9b      	lsrs	r3, r3, #10
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4a03      	ldr	r2, [pc, #12]	; (80077f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077e6:	5cd3      	ldrb	r3, [r2, r3]
 80077e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40023800 	.word	0x40023800
 80077f4:	08011814 	.word	0x08011814

080077f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077fc:	f7ff ffdc 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 8007800:	4601      	mov	r1, r0
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	0b5b      	lsrs	r3, r3, #13
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	4a03      	ldr	r2, [pc, #12]	; (800781c <HAL_RCC_GetPCLK2Freq+0x24>)
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	08011814 	.word	0x08011814

08007820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	220f      	movs	r2, #15
 800782e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007830:	4b12      	ldr	r3, [pc, #72]	; (800787c <HAL_RCC_GetClockConfig+0x5c>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0203 	and.w	r2, r3, #3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <HAL_RCC_GetClockConfig+0x5c>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <HAL_RCC_GetClockConfig+0x5c>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <HAL_RCC_GetClockConfig+0x5c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007862:	4b07      	ldr	r3, [pc, #28]	; (8007880 <HAL_RCC_GetClockConfig+0x60>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 020f 	and.w	r2, r3, #15
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	601a      	str	r2, [r3, #0]
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800
 8007880:	40023c00 	.word	0x40023c00

08007884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800789e:	4bc6      	ldr	r3, [pc, #792]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 030c 	and.w	r3, r3, #12
 80078a6:	2b0c      	cmp	r3, #12
 80078a8:	f200 817e 	bhi.w	8007ba8 <HAL_RCC_GetSysClockFreq+0x324>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	08007ba9 	.word	0x08007ba9
 80078bc:	08007ba9 	.word	0x08007ba9
 80078c0:	08007ba9 	.word	0x08007ba9
 80078c4:	080078ef 	.word	0x080078ef
 80078c8:	08007ba9 	.word	0x08007ba9
 80078cc:	08007ba9 	.word	0x08007ba9
 80078d0:	08007ba9 	.word	0x08007ba9
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	08007ba9 	.word	0x08007ba9
 80078dc:	08007ba9 	.word	0x08007ba9
 80078e0:	08007ba9 	.word	0x08007ba9
 80078e4:	08007a51 	.word	0x08007a51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078e8:	4bb4      	ldr	r3, [pc, #720]	; (8007bbc <HAL_RCC_GetSysClockFreq+0x338>)
 80078ea:	613b      	str	r3, [r7, #16]
       break;
 80078ec:	e15f      	b.n	8007bae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ee:	4bb4      	ldr	r3, [pc, #720]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80078f0:	613b      	str	r3, [r7, #16]
      break;
 80078f2:	e15c      	b.n	8007bae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078f4:	4bb0      	ldr	r3, [pc, #704]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078fe:	4bae      	ldr	r3, [pc, #696]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04a      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800790a:	4bab      	ldr	r3, [pc, #684]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	099b      	lsrs	r3, r3, #6
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	ea03 0501 	and.w	r5, r3, r1
 8007920:	ea04 0602 	and.w	r6, r4, r2
 8007924:	4629      	mov	r1, r5
 8007926:	4632      	mov	r2, r6
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	f04f 0400 	mov.w	r4, #0
 8007930:	0154      	lsls	r4, r2, #5
 8007932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007936:	014b      	lsls	r3, r1, #5
 8007938:	4619      	mov	r1, r3
 800793a:	4622      	mov	r2, r4
 800793c:	1b49      	subs	r1, r1, r5
 800793e:	eb62 0206 	sbc.w	r2, r2, r6
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	f04f 0400 	mov.w	r4, #0
 800794a:	0194      	lsls	r4, r2, #6
 800794c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007950:	018b      	lsls	r3, r1, #6
 8007952:	1a5b      	subs	r3, r3, r1
 8007954:	eb64 0402 	sbc.w	r4, r4, r2
 8007958:	f04f 0100 	mov.w	r1, #0
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	00e2      	lsls	r2, r4, #3
 8007962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007966:	00d9      	lsls	r1, r3, #3
 8007968:	460b      	mov	r3, r1
 800796a:	4614      	mov	r4, r2
 800796c:	195b      	adds	r3, r3, r5
 800796e:	eb44 0406 	adc.w	r4, r4, r6
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	0262      	lsls	r2, r4, #9
 800797c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007980:	0259      	lsls	r1, r3, #9
 8007982:	460b      	mov	r3, r1
 8007984:	4614      	mov	r4, r2
 8007986:	4618      	mov	r0, r3
 8007988:	4621      	mov	r1, r4
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f04f 0400 	mov.w	r4, #0
 8007990:	461a      	mov	r2, r3
 8007992:	4623      	mov	r3, r4
 8007994:	f7f9 f8f0 	bl	8000b78 <__aeabi_uldivmod>
 8007998:	4603      	mov	r3, r0
 800799a:	460c      	mov	r4, r1
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	e049      	b.n	8007a34 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a0:	4b85      	ldr	r3, [pc, #532]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	f04f 0400 	mov.w	r4, #0
 80079aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	ea03 0501 	and.w	r5, r3, r1
 80079b6:	ea04 0602 	and.w	r6, r4, r2
 80079ba:	4629      	mov	r1, r5
 80079bc:	4632      	mov	r2, r6
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f04f 0400 	mov.w	r4, #0
 80079c6:	0154      	lsls	r4, r2, #5
 80079c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079cc:	014b      	lsls	r3, r1, #5
 80079ce:	4619      	mov	r1, r3
 80079d0:	4622      	mov	r2, r4
 80079d2:	1b49      	subs	r1, r1, r5
 80079d4:	eb62 0206 	sbc.w	r2, r2, r6
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	0194      	lsls	r4, r2, #6
 80079e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079e6:	018b      	lsls	r3, r1, #6
 80079e8:	1a5b      	subs	r3, r3, r1
 80079ea:	eb64 0402 	sbc.w	r4, r4, r2
 80079ee:	f04f 0100 	mov.w	r1, #0
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	00e2      	lsls	r2, r4, #3
 80079f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079fc:	00d9      	lsls	r1, r3, #3
 80079fe:	460b      	mov	r3, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	195b      	adds	r3, r3, r5
 8007a04:	eb44 0406 	adc.w	r4, r4, r6
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	02a2      	lsls	r2, r4, #10
 8007a12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a16:	0299      	lsls	r1, r3, #10
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	4621      	mov	r1, r4
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f04f 0400 	mov.w	r4, #0
 8007a26:	461a      	mov	r2, r3
 8007a28:	4623      	mov	r3, r4
 8007a2a:	f7f9 f8a5 	bl	8000b78 <__aeabi_uldivmod>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a34:	4b60      	ldr	r3, [pc, #384]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	3301      	adds	r3, #1
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4c:	613b      	str	r3, [r7, #16]
      break;
 8007a4e:	e0ae      	b.n	8007bae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a50:	4b59      	ldr	r3, [pc, #356]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a58:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a5a:	4b57      	ldr	r3, [pc, #348]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d04a      	beq.n	8007afc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a66:	4b54      	ldr	r3, [pc, #336]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	099b      	lsrs	r3, r3, #6
 8007a6c:	f04f 0400 	mov.w	r4, #0
 8007a70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	ea03 0501 	and.w	r5, r3, r1
 8007a7c:	ea04 0602 	and.w	r6, r4, r2
 8007a80:	4629      	mov	r1, r5
 8007a82:	4632      	mov	r2, r6
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	f04f 0400 	mov.w	r4, #0
 8007a8c:	0154      	lsls	r4, r2, #5
 8007a8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a92:	014b      	lsls	r3, r1, #5
 8007a94:	4619      	mov	r1, r3
 8007a96:	4622      	mov	r2, r4
 8007a98:	1b49      	subs	r1, r1, r5
 8007a9a:	eb62 0206 	sbc.w	r2, r2, r6
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	f04f 0400 	mov.w	r4, #0
 8007aa6:	0194      	lsls	r4, r2, #6
 8007aa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007aac:	018b      	lsls	r3, r1, #6
 8007aae:	1a5b      	subs	r3, r3, r1
 8007ab0:	eb64 0402 	sbc.w	r4, r4, r2
 8007ab4:	f04f 0100 	mov.w	r1, #0
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	00e2      	lsls	r2, r4, #3
 8007abe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007ac2:	00d9      	lsls	r1, r3, #3
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4614      	mov	r4, r2
 8007ac8:	195b      	adds	r3, r3, r5
 8007aca:	eb44 0406 	adc.w	r4, r4, r6
 8007ace:	f04f 0100 	mov.w	r1, #0
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	0262      	lsls	r2, r4, #9
 8007ad8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007adc:	0259      	lsls	r1, r3, #9
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	461a      	mov	r2, r3
 8007aee:	4623      	mov	r3, r4
 8007af0:	f7f9 f842 	bl	8000b78 <__aeabi_uldivmod>
 8007af4:	4603      	mov	r3, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e049      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007afc:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	099b      	lsrs	r3, r3, #6
 8007b02:	f04f 0400 	mov.w	r4, #0
 8007b06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	ea03 0501 	and.w	r5, r3, r1
 8007b12:	ea04 0602 	and.w	r6, r4, r2
 8007b16:	4629      	mov	r1, r5
 8007b18:	4632      	mov	r2, r6
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	f04f 0400 	mov.w	r4, #0
 8007b22:	0154      	lsls	r4, r2, #5
 8007b24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007b28:	014b      	lsls	r3, r1, #5
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	1b49      	subs	r1, r1, r5
 8007b30:	eb62 0206 	sbc.w	r2, r2, r6
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	f04f 0400 	mov.w	r4, #0
 8007b3c:	0194      	lsls	r4, r2, #6
 8007b3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b42:	018b      	lsls	r3, r1, #6
 8007b44:	1a5b      	subs	r3, r3, r1
 8007b46:	eb64 0402 	sbc.w	r4, r4, r2
 8007b4a:	f04f 0100 	mov.w	r1, #0
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	00e2      	lsls	r2, r4, #3
 8007b54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b58:	00d9      	lsls	r1, r3, #3
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	195b      	adds	r3, r3, r5
 8007b60:	eb44 0406 	adc.w	r4, r4, r6
 8007b64:	f04f 0100 	mov.w	r1, #0
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	02a2      	lsls	r2, r4, #10
 8007b6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007b72:	0299      	lsls	r1, r3, #10
 8007b74:	460b      	mov	r3, r1
 8007b76:	4614      	mov	r4, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f04f 0400 	mov.w	r4, #0
 8007b82:	461a      	mov	r2, r3
 8007b84:	4623      	mov	r3, r4
 8007b86:	f7f8 fff7 	bl	8000b78 <__aeabi_uldivmod>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	0f1b      	lsrs	r3, r3, #28
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba4:	613b      	str	r3, [r7, #16]
      break;
 8007ba6:	e002      	b.n	8007bae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ba8:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <HAL_RCC_GetSysClockFreq+0x338>)
 8007baa:	613b      	str	r3, [r7, #16]
      break;
 8007bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bae:	693b      	ldr	r3, [r7, #16]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	00f42400 	.word	0x00f42400
 8007bc0:	007a1200 	.word	0x007a1200

08007bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b0f      	cmp	r3, #15
 8007bd6:	d904      	bls.n	8007be2 <HAL_RCC_OscConfig+0x1e>
 8007bd8:	f640 510c 	movw	r1, #3340	; 0xd0c
 8007bdc:	48a7      	ldr	r0, [pc, #668]	; (8007e7c <HAL_RCC_OscConfig+0x2b8>)
 8007bde:	f006 ff5f 	bl	800eaa0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 809a 	beq.w	8007d24 <HAL_RCC_OscConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <HAL_RCC_OscConfig+0x52>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d009      	beq.n	8007c16 <HAL_RCC_OscConfig+0x52>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCC_OscConfig+0x52>
 8007c0c:	f640 5111 	movw	r1, #3345	; 0xd11
 8007c10:	489a      	ldr	r0, [pc, #616]	; (8007e7c <HAL_RCC_OscConfig+0x2b8>)
 8007c12:	f006 ff45 	bl	800eaa0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c16:	4b9a      	ldr	r3, [pc, #616]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 030c 	and.w	r3, r3, #12
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d019      	beq.n	8007c56 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c22:	4b97      	ldr	r3, [pc, #604]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c2e:	4b94      	ldr	r3, [pc, #592]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c3a:	d00c      	beq.n	8007c56 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c3c:	4b90      	ldr	r3, [pc, #576]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c44:	2b0c      	cmp	r3, #12
 8007c46:	d112      	bne.n	8007c6e <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c48:	4b8d      	ldr	r3, [pc, #564]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c54:	d10b      	bne.n	8007c6e <HAL_RCC_OscConfig+0xaa>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c56:	4b8a      	ldr	r3, [pc, #552]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d05f      	beq.n	8007d22 <HAL_RCC_OscConfig+0x15e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d15b      	bne.n	8007d22 <HAL_RCC_OscConfig+0x15e>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e2c3      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_OscConfig+0xc2>
 8007c78:	4b81      	ldr	r3, [pc, #516]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a80      	ldr	r2, [pc, #512]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	e01d      	b.n	8007cc2 <HAL_RCC_OscConfig+0xfe>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c8e:	d10c      	bne.n	8007caa <HAL_RCC_OscConfig+0xe6>
 8007c90:	4b7b      	ldr	r3, [pc, #492]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a7a      	ldr	r2, [pc, #488]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	4b78      	ldr	r3, [pc, #480]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a77      	ldr	r2, [pc, #476]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	e00b      	b.n	8007cc2 <HAL_RCC_OscConfig+0xfe>
 8007caa:	4b75      	ldr	r3, [pc, #468]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a74      	ldr	r2, [pc, #464]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	4b72      	ldr	r3, [pc, #456]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a71      	ldr	r2, [pc, #452]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d015      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x132>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cca:	f7fc fdef 	bl	80048ac <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd0:	e00a      	b.n	8007ce8 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cd2:	f7fc fdeb 	bl	80048ac <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e286      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ce8:	4b65      	ldr	r3, [pc, #404]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0ee      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x10e>
 8007cf4:	e016      	b.n	8007d24 <HAL_RCC_OscConfig+0x160>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf6:	f7fc fdd9 	bl	80048ac <HAL_GetTick>
 8007cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cfc:	e00a      	b.n	8007d14 <HAL_RCC_OscConfig+0x150>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cfe:	f7fc fdd5 	bl	80048ac <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e270      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d14:	4b5a      	ldr	r3, [pc, #360]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1ee      	bne.n	8007cfe <HAL_RCC_OscConfig+0x13a>
 8007d20:	e000      	b.n	8007d24 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8086 	beq.w	8007e3e <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <HAL_RCC_OscConfig+0x188>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d004      	beq.n	8007d4c <HAL_RCC_OscConfig+0x188>
 8007d42:	f640 5149 	movw	r1, #3401	; 0xd49
 8007d46:	484d      	ldr	r0, [pc, #308]	; (8007e7c <HAL_RCC_OscConfig+0x2b8>)
 8007d48:	f006 feaa 	bl	800eaa0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b1f      	cmp	r3, #31
 8007d52:	d904      	bls.n	8007d5e <HAL_RCC_OscConfig+0x19a>
 8007d54:	f640 514a 	movw	r1, #3402	; 0xd4a
 8007d58:	4848      	ldr	r0, [pc, #288]	; (8007e7c <HAL_RCC_OscConfig+0x2b8>)
 8007d5a:	f006 fea1 	bl	800eaa0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d5e:	4b48      	ldr	r3, [pc, #288]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 030c 	and.w	r3, r3, #12
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d017      	beq.n	8007d9a <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d6a:	4b45      	ldr	r3, [pc, #276]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d105      	bne.n	8007d82 <HAL_RCC_OscConfig+0x1be>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d76:	4b42      	ldr	r3, [pc, #264]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d82:	4b3f      	ldr	r3, [pc, #252]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d8a:	2b0c      	cmp	r3, #12
 8007d8c:	d11c      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x204>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d8e:	4b3c      	ldr	r3, [pc, #240]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d116      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x204>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d9a:	4b39      	ldr	r3, [pc, #228]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_RCC_OscConfig+0x1ee>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d001      	beq.n	8007db2 <HAL_RCC_OscConfig+0x1ee>
      {
        return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e221      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007db2:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	492f      	ldr	r1, [pc, #188]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dc6:	e03a      	b.n	8007e3e <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d020      	beq.n	8007e12 <HAL_RCC_OscConfig+0x24e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dd0:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <HAL_RCC_OscConfig+0x2c0>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd6:	f7fc fd69 	bl	80048ac <HAL_GetTick>
 8007dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCC_OscConfig+0x22c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dde:	f7fc fd65 	bl	80048ac <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e202      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df0:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0f0      	beq.n	8007dde <HAL_RCC_OscConfig+0x21a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	491d      	ldr	r1, [pc, #116]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	600b      	str	r3, [r1, #0]
 8007e10:	e015      	b.n	8007e3e <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <HAL_RCC_OscConfig+0x2c0>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e18:	f7fc fd48 	bl	80048ac <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x26e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e20:	f7fc fd44 	bl	80048ac <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x26e>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e1e1      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <HAL_RCC_OscConfig+0x2bc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d046      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_RCC_OscConfig+0x2a0>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d004      	beq.n	8007e64 <HAL_RCC_OscConfig+0x2a0>
 8007e5a:	f44f 6159 	mov.w	r1, #3472	; 0xd90
 8007e5e:	4807      	ldr	r0, [pc, #28]	; (8007e7c <HAL_RCC_OscConfig+0x2b8>)
 8007e60:	f006 fe1e 	bl	800eaa0 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01f      	beq.n	8007eac <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCC_OscConfig+0x2c4>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e72:	f7fc fd1b 	bl	80048ac <HAL_GetTick>
 8007e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e78:	e011      	b.n	8007e9e <HAL_RCC_OscConfig+0x2da>
 8007e7a:	bf00      	nop
 8007e7c:	08011564 	.word	0x08011564
 8007e80:	40023800 	.word	0x40023800
 8007e84:	42470000 	.word	0x42470000
 8007e88:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e8c:	f7fc fd0e 	bl	80048ac <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e1ab      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9e:	4ba4      	ldr	r3, [pc, #656]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0x2c8>
 8007eaa:	e015      	b.n	8007ed8 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eac:	4ba1      	ldr	r3, [pc, #644]	; (8008134 <HAL_RCC_OscConfig+0x570>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb2:	f7fc fcfb 	bl	80048ac <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x308>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eba:	f7fc fcf7 	bl	80048ac <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e194      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ecc:	4b98      	ldr	r3, [pc, #608]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f0      	bne.n	8007eba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80a8 	beq.w	8008036 <HAL_RCC_OscConfig+0x472>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00c      	beq.n	8007f0c <HAL_RCC_OscConfig+0x348>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d008      	beq.n	8007f0c <HAL_RCC_OscConfig+0x348>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d004      	beq.n	8007f0c <HAL_RCC_OscConfig+0x348>
 8007f02:	f640 51bc 	movw	r1, #3516	; 0xdbc
 8007f06:	488c      	ldr	r0, [pc, #560]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 8007f08:	f006 fdca 	bl	800eaa0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f0c:	4b88      	ldr	r3, [pc, #544]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <HAL_RCC_OscConfig+0x374>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	4b84      	ldr	r3, [pc, #528]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	4a83      	ldr	r2, [pc, #524]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f26:	6413      	str	r3, [r2, #64]	; 0x40
 8007f28:	4b81      	ldr	r3, [pc, #516]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f38:	4b80      	ldr	r3, [pc, #512]	; (800813c <HAL_RCC_OscConfig+0x578>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d118      	bne.n	8007f76 <HAL_RCC_OscConfig+0x3b2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f44:	4b7d      	ldr	r3, [pc, #500]	; (800813c <HAL_RCC_OscConfig+0x578>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a7c      	ldr	r2, [pc, #496]	; (800813c <HAL_RCC_OscConfig+0x578>)
 8007f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f50:	f7fc fcac 	bl	80048ac <HAL_GetTick>
 8007f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f58:	f7fc fca8 	bl	80048ac <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e145      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6a:	4b74      	ldr	r3, [pc, #464]	; (800813c <HAL_RCC_OscConfig+0x578>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d106      	bne.n	8007f8c <HAL_RCC_OscConfig+0x3c8>
 8007f7e:	4b6c      	ldr	r3, [pc, #432]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	4a6b      	ldr	r2, [pc, #428]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8a:	e01c      	b.n	8007fc6 <HAL_RCC_OscConfig+0x402>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b05      	cmp	r3, #5
 8007f92:	d10c      	bne.n	8007fae <HAL_RCC_OscConfig+0x3ea>
 8007f94:	4b66      	ldr	r3, [pc, #408]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	4a65      	ldr	r2, [pc, #404]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007f9a:	f043 0304 	orr.w	r3, r3, #4
 8007f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa0:	4b63      	ldr	r3, [pc, #396]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	4a62      	ldr	r2, [pc, #392]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	6713      	str	r3, [r2, #112]	; 0x70
 8007fac:	e00b      	b.n	8007fc6 <HAL_RCC_OscConfig+0x402>
 8007fae:	4b60      	ldr	r3, [pc, #384]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	4a5f      	ldr	r2, [pc, #380]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fba:	4b5d      	ldr	r3, [pc, #372]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	4a5c      	ldr	r2, [pc, #368]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fc0:	f023 0304 	bic.w	r3, r3, #4
 8007fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d015      	beq.n	8007ffa <HAL_RCC_OscConfig+0x436>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fce:	f7fc fc6d 	bl	80048ac <HAL_GetTick>
 8007fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd4:	e00a      	b.n	8007fec <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fd6:	f7fc fc69 	bl	80048ac <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e104      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fec:	4b50      	ldr	r3, [pc, #320]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0ee      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x412>
 8007ff8:	e014      	b.n	8008024 <HAL_RCC_OscConfig+0x460>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffa:	f7fc fc57 	bl	80048ac <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008000:	e00a      	b.n	8008018 <HAL_RCC_OscConfig+0x454>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008002:	f7fc fc53 	bl	80048ac <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008010:	4293      	cmp	r3, r2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e0ee      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008018:	4b45      	ldr	r3, [pc, #276]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ee      	bne.n	8008002 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d105      	bne.n	8008036 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800802a:	4b41      	ldr	r3, [pc, #260]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	4a40      	ldr	r2, [pc, #256]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8008030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <HAL_RCC_OscConfig+0x494>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d008      	beq.n	8008058 <HAL_RCC_OscConfig+0x494>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d004      	beq.n	8008058 <HAL_RCC_OscConfig+0x494>
 800804e:	f640 51ff 	movw	r1, #3583	; 0xdff
 8008052:	4839      	ldr	r0, [pc, #228]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 8008054:	f006 fd24 	bl	800eaa0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80c9 	beq.w	80081f4 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008062:	4b33      	ldr	r3, [pc, #204]	; (8008130 <HAL_RCC_OscConfig+0x56c>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
 800806a:	2b08      	cmp	r3, #8
 800806c:	f000 80c0 	beq.w	80081f0 <HAL_RCC_OscConfig+0x62c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	2b02      	cmp	r3, #2
 8008076:	f040 80a4 	bne.w	80081c2 <HAL_RCC_OscConfig+0x5fe>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_RCC_OscConfig+0x4d2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808a:	d004      	beq.n	8008096 <HAL_RCC_OscConfig+0x4d2>
 800808c:	f640 6108 	movw	r1, #3592	; 0xe08
 8008090:	4829      	ldr	r0, [pc, #164]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 8008092:	f006 fd05 	bl	800eaa0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	2b3f      	cmp	r3, #63	; 0x3f
 800809c:	d904      	bls.n	80080a8 <HAL_RCC_OscConfig+0x4e4>
 800809e:	f640 6109 	movw	r1, #3593	; 0xe09
 80080a2:	4825      	ldr	r0, [pc, #148]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 80080a4:	f006 fcfc 	bl	800eaa0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b31      	cmp	r3, #49	; 0x31
 80080ae:	d904      	bls.n	80080ba <HAL_RCC_OscConfig+0x4f6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80080b8:	d904      	bls.n	80080c4 <HAL_RCC_OscConfig+0x500>
 80080ba:	f640 610a 	movw	r1, #3594	; 0xe0a
 80080be:	481e      	ldr	r0, [pc, #120]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 80080c0:	f006 fcee 	bl	800eaa0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d010      	beq.n	80080ee <HAL_RCC_OscConfig+0x52a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d00c      	beq.n	80080ee <HAL_RCC_OscConfig+0x52a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	2b06      	cmp	r3, #6
 80080da:	d008      	beq.n	80080ee <HAL_RCC_OscConfig+0x52a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d004      	beq.n	80080ee <HAL_RCC_OscConfig+0x52a>
 80080e4:	f640 610b 	movw	r1, #3595	; 0xe0b
 80080e8:	4813      	ldr	r0, [pc, #76]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 80080ea:	f006 fcd9 	bl	800eaa0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d903      	bls.n	80080fe <HAL_RCC_OscConfig+0x53a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	2b0f      	cmp	r3, #15
 80080fc:	d904      	bls.n	8008108 <HAL_RCC_OscConfig+0x544>
 80080fe:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008102:	480d      	ldr	r0, [pc, #52]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 8008104:	f006 fccc 	bl	800eaa0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	2b01      	cmp	r3, #1
 800810e:	d903      	bls.n	8008118 <HAL_RCC_OscConfig+0x554>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	2b07      	cmp	r3, #7
 8008116:	d904      	bls.n	8008122 <HAL_RCC_OscConfig+0x55e>
 8008118:	f640 610d 	movw	r1, #3597	; 0xe0d
 800811c:	4806      	ldr	r0, [pc, #24]	; (8008138 <HAL_RCC_OscConfig+0x574>)
 800811e:	f006 fcbf 	bl	800eaa0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <HAL_RCC_OscConfig+0x57c>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008128:	f7fc fbc0 	bl	80048ac <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812e:	e012      	b.n	8008156 <HAL_RCC_OscConfig+0x592>
 8008130:	40023800 	.word	0x40023800
 8008134:	42470e80 	.word	0x42470e80
 8008138:	08011564 	.word	0x08011564
 800813c:	40007000 	.word	0x40007000
 8008140:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fc fbb2 	bl	80048ac <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e04f      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <HAL_RCC_OscConfig+0x63c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x580>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	019b      	lsls	r3, r3, #6
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	3b01      	subs	r3, #1
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	491c      	ldr	r1, [pc, #112]	; (8008200 <HAL_RCC_OscConfig+0x63c>)
 8008190:	4313      	orrs	r3, r2
 8008192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008194:	4b1b      	ldr	r3, [pc, #108]	; (8008204 <HAL_RCC_OscConfig+0x640>)
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819a:	f7fc fb87 	bl	80048ac <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081a2:	f7fc fb83 	bl	80048ac <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e020      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081b4:	4b12      	ldr	r3, [pc, #72]	; (8008200 <HAL_RCC_OscConfig+0x63c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCC_OscConfig+0x5de>
 80081c0:	e018      	b.n	80081f4 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <HAL_RCC_OscConfig+0x640>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fc fb70 	bl	80048ac <HAL_GetTick>
 80081cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d0:	f7fc fb6c 	bl	80048ac <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e009      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081e2:	4b07      	ldr	r3, [pc, #28]	; (8008200 <HAL_RCC_OscConfig+0x63c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x60c>
 80081ee:	e001      	b.n	80081f4 <HAL_RCC_OscConfig+0x630>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <HAL_RCC_OscConfig+0x632>
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800
 8008204:	42470060 	.word	0x42470060

08008208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e0a1      	b.n	800835e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a52      	ldr	r2, [pc, #328]	; (8008368 <HAL_TIM_Base_Init+0x160>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d045      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822c:	d040      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a4e      	ldr	r2, [pc, #312]	; (800836c <HAL_TIM_Base_Init+0x164>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d03b      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a4c      	ldr	r2, [pc, #304]	; (8008370 <HAL_TIM_Base_Init+0x168>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d036      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a4b      	ldr	r2, [pc, #300]	; (8008374 <HAL_TIM_Base_Init+0x16c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d031      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a49      	ldr	r2, [pc, #292]	; (8008378 <HAL_TIM_Base_Init+0x170>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d02c      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a48      	ldr	r2, [pc, #288]	; (800837c <HAL_TIM_Base_Init+0x174>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d027      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a46      	ldr	r2, [pc, #280]	; (8008380 <HAL_TIM_Base_Init+0x178>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a45      	ldr	r2, [pc, #276]	; (8008384 <HAL_TIM_Base_Init+0x17c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d01d      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a43      	ldr	r2, [pc, #268]	; (8008388 <HAL_TIM_Base_Init+0x180>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a42      	ldr	r2, [pc, #264]	; (800838c <HAL_TIM_Base_Init+0x184>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a40      	ldr	r2, [pc, #256]	; (8008390 <HAL_TIM_Base_Init+0x188>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <HAL_TIM_Base_Init+0x18c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3d      	ldr	r2, [pc, #244]	; (8008398 <HAL_TIM_Base_Init+0x190>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_Base_Init+0xa8>
 80082a6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80082aa:	483c      	ldr	r0, [pc, #240]	; (800839c <HAL_TIM_Base_Init+0x194>)
 80082ac:	f006 fbf8 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d014      	beq.n	80082e2 <HAL_TIM_Base_Init+0xda>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d010      	beq.n	80082e2 <HAL_TIM_Base_Init+0xda>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d00c      	beq.n	80082e2 <HAL_TIM_Base_Init+0xda>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d008      	beq.n	80082e2 <HAL_TIM_Base_Init+0xda>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b60      	cmp	r3, #96	; 0x60
 80082d6:	d004      	beq.n	80082e2 <HAL_TIM_Base_Init+0xda>
 80082d8:	f240 1113 	movw	r1, #275	; 0x113
 80082dc:	482f      	ldr	r0, [pc, #188]	; (800839c <HAL_TIM_Base_Init+0x194>)
 80082de:	f006 fbdf 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <HAL_TIM_Base_Init+0x100>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f2:	d009      	beq.n	8008308 <HAL_TIM_Base_Init+0x100>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082fc:	d004      	beq.n	8008308 <HAL_TIM_Base_Init+0x100>
 80082fe:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008302:	4826      	ldr	r0, [pc, #152]	; (800839c <HAL_TIM_Base_Init+0x194>)
 8008304:	f006 fbcc 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <HAL_TIM_Base_Init+0x11a>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d004      	beq.n	8008322 <HAL_TIM_Base_Init+0x11a>
 8008318:	f240 1115 	movw	r1, #277	; 0x115
 800831c:	481f      	ldr	r0, [pc, #124]	; (800839c <HAL_TIM_Base_Init+0x194>)
 800831e:	f006 fbbf 	bl	800eaa0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f006 fcec 	bl	800ed14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3304      	adds	r3, #4
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f001 fb22 	bl	8009998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40001000 	.word	0x40001000
 800837c:	40001400 	.word	0x40001400
 8008380:	40010400 	.word	0x40010400
 8008384:	40014000 	.word	0x40014000
 8008388:	40014400 	.word	0x40014400
 800838c:	40014800 	.word	0x40014800
 8008390:	40001800 	.word	0x40001800
 8008394:	40001c00 	.word	0x40001c00
 8008398:	40002000 	.word	0x40002000
 800839c:	080115b0 	.word	0x080115b0

080083a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <HAL_TIM_Base_Start+0xdc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d045      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d040      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a2f      	ldr	r2, [pc, #188]	; (8008480 <HAL_TIM_Base_Start+0xe0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d03b      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a2e      	ldr	r2, [pc, #184]	; (8008484 <HAL_TIM_Base_Start+0xe4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d036      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a2c      	ldr	r2, [pc, #176]	; (8008488 <HAL_TIM_Base_Start+0xe8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d031      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2b      	ldr	r2, [pc, #172]	; (800848c <HAL_TIM_Base_Start+0xec>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d02c      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a29      	ldr	r2, [pc, #164]	; (8008490 <HAL_TIM_Base_Start+0xf0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d027      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a28      	ldr	r2, [pc, #160]	; (8008494 <HAL_TIM_Base_Start+0xf4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d022      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a26      	ldr	r2, [pc, #152]	; (8008498 <HAL_TIM_Base_Start+0xf8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d01d      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a25      	ldr	r2, [pc, #148]	; (800849c <HAL_TIM_Base_Start+0xfc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d018      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <HAL_TIM_Base_Start+0x100>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d013      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a22      	ldr	r2, [pc, #136]	; (80084a4 <HAL_TIM_Base_Start+0x104>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00e      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <HAL_TIM_Base_Start+0x108>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d009      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <HAL_TIM_Base_Start+0x10c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d004      	beq.n	800843e <HAL_TIM_Base_Start+0x9e>
 8008434:	f240 1185 	movw	r1, #389	; 0x185
 8008438:	481d      	ldr	r0, [pc, #116]	; (80084b0 <HAL_TIM_Base_Start+0x110>)
 800843a:	f006 fb31 	bl	800eaa0 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b06      	cmp	r3, #6
 8008456:	d007      	beq.n	8008468 <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40010000 	.word	0x40010000
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40001000 	.word	0x40001000
 8008490:	40001400 	.word	0x40001400
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800
 80084a4:	40001800 	.word	0x40001800
 80084a8:	40001c00 	.word	0x40001c00
 80084ac:	40002000 	.word	0x40002000
 80084b0:	080115b0 	.word	0x080115b0

080084b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a36      	ldr	r2, [pc, #216]	; (800859c <HAL_TIM_Base_Stop+0xe8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d045      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ce:	d040      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <HAL_TIM_Base_Stop+0xec>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d03b      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a31      	ldr	r2, [pc, #196]	; (80085a4 <HAL_TIM_Base_Stop+0xf0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d036      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2f      	ldr	r2, [pc, #188]	; (80085a8 <HAL_TIM_Base_Stop+0xf4>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d031      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2e      	ldr	r2, [pc, #184]	; (80085ac <HAL_TIM_Base_Stop+0xf8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d02c      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2c      	ldr	r2, [pc, #176]	; (80085b0 <HAL_TIM_Base_Stop+0xfc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d027      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <HAL_TIM_Base_Stop+0x100>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d022      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a29      	ldr	r2, [pc, #164]	; (80085b8 <HAL_TIM_Base_Stop+0x104>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01d      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a28      	ldr	r2, [pc, #160]	; (80085bc <HAL_TIM_Base_Stop+0x108>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d018      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a26      	ldr	r2, [pc, #152]	; (80085c0 <HAL_TIM_Base_Stop+0x10c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d013      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a25      	ldr	r2, [pc, #148]	; (80085c4 <HAL_TIM_Base_Stop+0x110>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00e      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a23      	ldr	r2, [pc, #140]	; (80085c8 <HAL_TIM_Base_Stop+0x114>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d009      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a22      	ldr	r2, [pc, #136]	; (80085cc <HAL_TIM_Base_Stop+0x118>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d004      	beq.n	8008552 <HAL_TIM_Base_Stop+0x9e>
 8008548:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800854c:	4820      	ldr	r0, [pc, #128]	; (80085d0 <HAL_TIM_Base_Stop+0x11c>)
 800854e:	f006 faa7 	bl	800eaa0 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2202      	movs	r2, #2
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	f241 1311 	movw	r3, #4369	; 0x1111
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10f      	bne.n	800858a <HAL_TIM_Base_Stop+0xd6>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a1a      	ldr	r2, [r3, #32]
 8008570:	f240 4344 	movw	r3, #1092	; 0x444
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d107      	bne.n	800858a <HAL_TIM_Base_Stop+0xd6>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0201 	bic.w	r2, r2, #1
 8008588:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40010000 	.word	0x40010000
 80085a0:	40000400 	.word	0x40000400
 80085a4:	40000800 	.word	0x40000800
 80085a8:	40000c00 	.word	0x40000c00
 80085ac:	40001000 	.word	0x40001000
 80085b0:	40001400 	.word	0x40001400
 80085b4:	40010400 	.word	0x40010400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800
 80085c4:	40001800 	.word	0x40001800
 80085c8:	40001c00 	.word	0x40001c00
 80085cc:	40002000 	.word	0x40002000
 80085d0:	080115b0 	.word	0x080115b0

080085d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a33      	ldr	r2, [pc, #204]	; (80086b0 <HAL_TIM_Base_Start_IT+0xdc>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d045      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ee:	d040      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a2f      	ldr	r2, [pc, #188]	; (80086b4 <HAL_TIM_Base_Start_IT+0xe0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d03b      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a2e      	ldr	r2, [pc, #184]	; (80086b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d036      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a2c      	ldr	r2, [pc, #176]	; (80086bc <HAL_TIM_Base_Start_IT+0xe8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d031      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a2b      	ldr	r2, [pc, #172]	; (80086c0 <HAL_TIM_Base_Start_IT+0xec>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d02c      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a29      	ldr	r2, [pc, #164]	; (80086c4 <HAL_TIM_Base_Start_IT+0xf0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d027      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a28      	ldr	r2, [pc, #160]	; (80086c8 <HAL_TIM_Base_Start_IT+0xf4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d022      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a26      	ldr	r2, [pc, #152]	; (80086cc <HAL_TIM_Base_Start_IT+0xf8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01d      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <HAL_TIM_Base_Start_IT+0xfc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d018      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <HAL_TIM_Base_Start_IT+0x100>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d013      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a22      	ldr	r2, [pc, #136]	; (80086d8 <HAL_TIM_Base_Start_IT+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a20      	ldr	r2, [pc, #128]	; (80086dc <HAL_TIM_Base_Start_IT+0x108>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <HAL_TIM_Base_Start_IT+0x10c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x9e>
 8008668:	f240 11b9 	movw	r1, #441	; 0x1b9
 800866c:	481d      	ldr	r0, [pc, #116]	; (80086e4 <HAL_TIM_Base_Start_IT+0x110>)
 800866e:	f006 fa17 	bl	800eaa0 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0201 	orr.w	r2, r2, #1
 8008680:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d007      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0xd0>
  {
    __HAL_TIM_ENABLE(htim);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40001000 	.word	0x40001000
 80086c4:	40001400 	.word	0x40001400
 80086c8:	40010400 	.word	0x40010400
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40014400 	.word	0x40014400
 80086d4:	40014800 	.word	0x40014800
 80086d8:	40001800 	.word	0x40001800
 80086dc:	40001c00 	.word	0x40001c00
 80086e0:	40002000 	.word	0x40002000
 80086e4:	080115b0 	.word	0x080115b0

080086e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e0a1      	b.n	800883e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a52      	ldr	r2, [pc, #328]	; (8008848 <HAL_TIM_PWM_Init+0x160>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d045      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870c:	d040      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a4e      	ldr	r2, [pc, #312]	; (800884c <HAL_TIM_PWM_Init+0x164>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d03b      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a4c      	ldr	r2, [pc, #304]	; (8008850 <HAL_TIM_PWM_Init+0x168>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d036      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a4b      	ldr	r2, [pc, #300]	; (8008854 <HAL_TIM_PWM_Init+0x16c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d031      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a49      	ldr	r2, [pc, #292]	; (8008858 <HAL_TIM_PWM_Init+0x170>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02c      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a48      	ldr	r2, [pc, #288]	; (800885c <HAL_TIM_PWM_Init+0x174>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d027      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a46      	ldr	r2, [pc, #280]	; (8008860 <HAL_TIM_PWM_Init+0x178>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a45      	ldr	r2, [pc, #276]	; (8008864 <HAL_TIM_PWM_Init+0x17c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a43      	ldr	r2, [pc, #268]	; (8008868 <HAL_TIM_PWM_Init+0x180>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a42      	ldr	r2, [pc, #264]	; (800886c <HAL_TIM_PWM_Init+0x184>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a40      	ldr	r2, [pc, #256]	; (8008870 <HAL_TIM_PWM_Init+0x188>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a3f      	ldr	r2, [pc, #252]	; (8008874 <HAL_TIM_PWM_Init+0x18c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a3d      	ldr	r2, [pc, #244]	; (8008878 <HAL_TIM_PWM_Init+0x190>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <HAL_TIM_PWM_Init+0xa8>
 8008786:	f240 419b 	movw	r1, #1179	; 0x49b
 800878a:	483c      	ldr	r0, [pc, #240]	; (800887c <HAL_TIM_PWM_Init+0x194>)
 800878c:	f006 f988 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d014      	beq.n	80087c2 <HAL_TIM_PWM_Init+0xda>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b10      	cmp	r3, #16
 800879e:	d010      	beq.n	80087c2 <HAL_TIM_PWM_Init+0xda>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d00c      	beq.n	80087c2 <HAL_TIM_PWM_Init+0xda>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d008      	beq.n	80087c2 <HAL_TIM_PWM_Init+0xda>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b60      	cmp	r3, #96	; 0x60
 80087b6:	d004      	beq.n	80087c2 <HAL_TIM_PWM_Init+0xda>
 80087b8:	f240 419c 	movw	r1, #1180	; 0x49c
 80087bc:	482f      	ldr	r0, [pc, #188]	; (800887c <HAL_TIM_PWM_Init+0x194>)
 80087be:	f006 f96f 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00e      	beq.n	80087e8 <HAL_TIM_PWM_Init+0x100>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d2:	d009      	beq.n	80087e8 <HAL_TIM_PWM_Init+0x100>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087dc:	d004      	beq.n	80087e8 <HAL_TIM_PWM_Init+0x100>
 80087de:	f240 419d 	movw	r1, #1181	; 0x49d
 80087e2:	4826      	ldr	r0, [pc, #152]	; (800887c <HAL_TIM_PWM_Init+0x194>)
 80087e4:	f006 f95c 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d008      	beq.n	8008802 <HAL_TIM_PWM_Init+0x11a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d004      	beq.n	8008802 <HAL_TIM_PWM_Init+0x11a>
 80087f8:	f240 419e 	movw	r1, #1182	; 0x49e
 80087fc:	481f      	ldr	r0, [pc, #124]	; (800887c <HAL_TIM_PWM_Init+0x194>)
 80087fe:	f006 f94f 	bl	800eaa0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f832 	bl	8008880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f001 f8b2 	bl	8009998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40010000 	.word	0x40010000
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40000c00 	.word	0x40000c00
 8008858:	40001000 	.word	0x40001000
 800885c:	40001400 	.word	0x40001400
 8008860:	40010400 	.word	0x40010400
 8008864:	40014000 	.word	0x40014000
 8008868:	40014400 	.word	0x40014400
 800886c:	40014800 	.word	0x40014800
 8008870:	40001800 	.word	0x40001800
 8008874:	40001c00 	.word	0x40001c00
 8008878:	40002000 	.word	0x40002000
 800887c:	080115b0 	.word	0x080115b0

08008880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a6d      	ldr	r2, [pc, #436]	; (8008a58 <HAL_TIM_PWM_Start+0x1c4>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d10f      	bne.n	80088c8 <HAL_TIM_PWM_Start+0x34>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 809f 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	f000 809b 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	f000 8097 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b0c      	cmp	r3, #12
 80088c4:	f000 8093 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d0:	d10e      	bne.n	80088f0 <HAL_TIM_PWM_Start+0x5c>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 808a 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	f000 8086 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	f000 8082 	beq.w	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d07e      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a59      	ldr	r2, [pc, #356]	; (8008a5c <HAL_TIM_PWM_Start+0x1c8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10b      	bne.n	8008912 <HAL_TIM_PWM_Start+0x7e>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d076      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b04      	cmp	r3, #4
 8008904:	d073      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d070      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b0c      	cmp	r3, #12
 8008910:	d06d      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a52      	ldr	r2, [pc, #328]	; (8008a60 <HAL_TIM_PWM_Start+0x1cc>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d10b      	bne.n	8008934 <HAL_TIM_PWM_Start+0xa0>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d065      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b04      	cmp	r3, #4
 8008926:	d062      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b08      	cmp	r3, #8
 800892c:	d05f      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b0c      	cmp	r3, #12
 8008932:	d05c      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a4a      	ldr	r2, [pc, #296]	; (8008a64 <HAL_TIM_PWM_Start+0x1d0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d10b      	bne.n	8008956 <HAL_TIM_PWM_Start+0xc2>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d054      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b04      	cmp	r3, #4
 8008948:	d051      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b08      	cmp	r3, #8
 800894e:	d04e      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b0c      	cmp	r3, #12
 8008954:	d04b      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a43      	ldr	r2, [pc, #268]	; (8008a68 <HAL_TIM_PWM_Start+0x1d4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10b      	bne.n	8008978 <HAL_TIM_PWM_Start+0xe4>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d043      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b04      	cmp	r3, #4
 800896a:	d040      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d03d      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b0c      	cmp	r3, #12
 8008976:	d03a      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a3b      	ldr	r2, [pc, #236]	; (8008a6c <HAL_TIM_PWM_Start+0x1d8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d105      	bne.n	800898e <HAL_TIM_PWM_Start+0xfa>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d032      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b04      	cmp	r3, #4
 800898c:	d02f      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a37      	ldr	r2, [pc, #220]	; (8008a70 <HAL_TIM_PWM_Start+0x1dc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d102      	bne.n	800899e <HAL_TIM_PWM_Start+0x10a>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d027      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a34      	ldr	r2, [pc, #208]	; (8008a74 <HAL_TIM_PWM_Start+0x1e0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d102      	bne.n	80089ae <HAL_TIM_PWM_Start+0x11a>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01f      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a31      	ldr	r2, [pc, #196]	; (8008a78 <HAL_TIM_PWM_Start+0x1e4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d105      	bne.n	80089c4 <HAL_TIM_PWM_Start+0x130>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d017      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d014      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a2c      	ldr	r2, [pc, #176]	; (8008a7c <HAL_TIM_PWM_Start+0x1e8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d102      	bne.n	80089d4 <HAL_TIM_PWM_Start+0x140>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00c      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a29      	ldr	r2, [pc, #164]	; (8008a80 <HAL_TIM_PWM_Start+0x1ec>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d102      	bne.n	80089e4 <HAL_TIM_PWM_Start+0x150>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_TIM_PWM_Start+0x15a>
 80089e4:	f240 5113 	movw	r1, #1299	; 0x513
 80089e8:	4826      	ldr	r0, [pc, #152]	; (8008a84 <HAL_TIM_PWM_Start+0x1f0>)
 80089ea:	f006 f859 	bl	800eaa0 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2201      	movs	r2, #1
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fb42 	bl	800a080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <HAL_TIM_PWM_Start+0x1c4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d004      	beq.n	8008a10 <HAL_TIM_PWM_Start+0x17c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a17      	ldr	r2, [pc, #92]	; (8008a68 <HAL_TIM_PWM_Start+0x1d4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIM_PWM_Start+0x180>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <HAL_TIM_PWM_Start+0x182>
 8008a14:	2300      	movs	r3, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b06      	cmp	r3, #6
 8008a3a:	d007      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	40010000 	.word	0x40010000
 8008a5c:	40000400 	.word	0x40000400
 8008a60:	40000800 	.word	0x40000800
 8008a64:	40000c00 	.word	0x40000c00
 8008a68:	40010400 	.word	0x40010400
 8008a6c:	40014000 	.word	0x40014000
 8008a70:	40014400 	.word	0x40014400
 8008a74:	40014800 	.word	0x40014800
 8008a78:	40001800 	.word	0x40001800
 8008a7c:	40001c00 	.word	0x40001c00
 8008a80:	40002000 	.word	0x40002000
 8008a84:	080115b0 	.word	0x080115b0

08008a88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a7a      	ldr	r2, [pc, #488]	; (8008c80 <HAL_TIM_PWM_Stop+0x1f8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10f      	bne.n	8008abc <HAL_TIM_PWM_Stop+0x34>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 809f 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	f000 809b 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	f000 8097 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b0c      	cmp	r3, #12
 8008ab8:	f000 8093 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac4:	d10e      	bne.n	8008ae4 <HAL_TIM_PWM_Stop+0x5c>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 808a 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	f000 8086 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	f000 8082 	beq.w	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	d07e      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a66      	ldr	r2, [pc, #408]	; (8008c84 <HAL_TIM_PWM_Stop+0x1fc>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10b      	bne.n	8008b06 <HAL_TIM_PWM_Stop+0x7e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d076      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d073      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d070      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b0c      	cmp	r3, #12
 8008b04:	d06d      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a5f      	ldr	r2, [pc, #380]	; (8008c88 <HAL_TIM_PWM_Stop+0x200>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10b      	bne.n	8008b28 <HAL_TIM_PWM_Stop+0xa0>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d065      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d062      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d05f      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b0c      	cmp	r3, #12
 8008b26:	d05c      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a57      	ldr	r2, [pc, #348]	; (8008c8c <HAL_TIM_PWM_Stop+0x204>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10b      	bne.n	8008b4a <HAL_TIM_PWM_Stop+0xc2>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d054      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d051      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d04e      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b0c      	cmp	r3, #12
 8008b48:	d04b      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a50      	ldr	r2, [pc, #320]	; (8008c90 <HAL_TIM_PWM_Stop+0x208>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d10b      	bne.n	8008b6c <HAL_TIM_PWM_Stop+0xe4>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d043      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d040      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d03d      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b0c      	cmp	r3, #12
 8008b6a:	d03a      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a48      	ldr	r2, [pc, #288]	; (8008c94 <HAL_TIM_PWM_Stop+0x20c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d105      	bne.n	8008b82 <HAL_TIM_PWM_Stop+0xfa>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d032      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d02f      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a44      	ldr	r2, [pc, #272]	; (8008c98 <HAL_TIM_PWM_Stop+0x210>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d102      	bne.n	8008b92 <HAL_TIM_PWM_Stop+0x10a>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d027      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a41      	ldr	r2, [pc, #260]	; (8008c9c <HAL_TIM_PWM_Stop+0x214>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d102      	bne.n	8008ba2 <HAL_TIM_PWM_Stop+0x11a>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01f      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a3e      	ldr	r2, [pc, #248]	; (8008ca0 <HAL_TIM_PWM_Stop+0x218>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d105      	bne.n	8008bb8 <HAL_TIM_PWM_Stop+0x130>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d017      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d014      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a39      	ldr	r2, [pc, #228]	; (8008ca4 <HAL_TIM_PWM_Stop+0x21c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d102      	bne.n	8008bc8 <HAL_TIM_PWM_Stop+0x140>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00c      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a36      	ldr	r2, [pc, #216]	; (8008ca8 <HAL_TIM_PWM_Stop+0x220>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d102      	bne.n	8008bd8 <HAL_TIM_PWM_Stop+0x150>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <HAL_TIM_PWM_Stop+0x15a>
 8008bd8:	f240 5137 	movw	r1, #1335	; 0x537
 8008bdc:	4833      	ldr	r0, [pc, #204]	; (8008cac <HAL_TIM_PWM_Stop+0x224>)
 8008bde:	f005 ff5f 	bl	800eaa0 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fa48 	bl	800a080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a22      	ldr	r2, [pc, #136]	; (8008c80 <HAL_TIM_PWM_Stop+0x1f8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <HAL_TIM_PWM_Stop+0x17c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a24      	ldr	r2, [pc, #144]	; (8008c90 <HAL_TIM_PWM_Stop+0x208>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d101      	bne.n	8008c08 <HAL_TIM_PWM_Stop+0x180>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <HAL_TIM_PWM_Stop+0x182>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d017      	beq.n	8008c3e <HAL_TIM_PWM_Stop+0x1b6>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10f      	bne.n	8008c3e <HAL_TIM_PWM_Stop+0x1b6>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6a1a      	ldr	r2, [r3, #32]
 8008c24:	f240 4344 	movw	r3, #1092	; 0x444
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d107      	bne.n	8008c3e <HAL_TIM_PWM_Stop+0x1b6>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a1a      	ldr	r2, [r3, #32]
 8008c44:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10f      	bne.n	8008c6e <HAL_TIM_PWM_Stop+0x1e6>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6a1a      	ldr	r2, [r3, #32]
 8008c54:	f240 4344 	movw	r3, #1092	; 0x444
 8008c58:	4013      	ands	r3, r2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d107      	bne.n	8008c6e <HAL_TIM_PWM_Stop+0x1e6>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800
 8008ca0:	40001800 	.word	0x40001800
 8008ca4:	40001c00 	.word	0x40001c00
 8008ca8:	40002000 	.word	0x40002000
 8008cac:	080115b0 	.word	0x080115b0

08008cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d122      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d11b      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f06f 0202 	mvn.w	r2, #2
 8008cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fe32 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8008cf8:	e005      	b.n	8008d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fe24 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fe35 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d122      	bne.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d11b      	bne.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0204 	mvn.w	r2, #4
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fe08 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8008d4c:	e005      	b.n	8008d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fdfa 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fe0b 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d122      	bne.n	8008db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d11b      	bne.n	8008db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0208 	mvn.w	r2, #8
 8008d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2204      	movs	r2, #4
 8008d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fdde 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8008da0:	e005      	b.n	8008dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fdd0 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fde1 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d122      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d11b      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f06f 0210 	mvn.w	r2, #16
 8008dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fdb4 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8008df4:	e005      	b.n	8008e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fda6 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fdb7 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d10e      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d107      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f06f 0201 	mvn.w	r2, #1
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f005 fe44 	bl	800eabc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d10e      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	d107      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fb48 	bl	800a4f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fd7c 	bl	8009984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d10e      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d107      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0220 	mvn.w	r2, #32
 8008eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fb12 	bl	800a4dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d010      	beq.n	8008ef4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d00d      	beq.n	8008ef4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d00a      	beq.n	8008ef4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b0c      	cmp	r3, #12
 8008ee2:	d007      	beq.n	8008ef4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b3c      	cmp	r3, #60	; 0x3c
 8008ee8:	d004      	beq.n	8008ef4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008eea:	f640 51ec 	movw	r1, #3564	; 0xdec
 8008eee:	4885      	ldr	r0, [pc, #532]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008ef0:	f005 fdd6 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b60      	cmp	r3, #96	; 0x60
 8008efa:	d008      	beq.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b70      	cmp	r3, #112	; 0x70
 8008f02:	d004      	beq.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8008f04:	f640 51ed 	movw	r1, #3565	; 0xded
 8008f08:	487e      	ldr	r0, [pc, #504]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008f0a:	f005 fdc9 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x68>
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d004      	beq.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x68>
 8008f1e:	f640 51ee 	movw	r1, #3566	; 0xdee
 8008f22:	4878      	ldr	r0, [pc, #480]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008f24:	f005 fdbc 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_TIM_PWM_ConfigChannel+0x82>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d004      	beq.n	8008f42 <HAL_TIM_PWM_ConfigChannel+0x82>
 8008f38:	f640 51ef 	movw	r1, #3567	; 0xdef
 8008f3c:	4871      	ldr	r0, [pc, #452]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8008f3e:	f005 fdaf 	bl	800eaa0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIM_PWM_ConfigChannel+0x90>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e182      	b.n	8009256 <HAL_TIM_PWM_ConfigChannel+0x396>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b0c      	cmp	r3, #12
 8008f64:	f200 816d 	bhi.w	8009242 <HAL_TIM_PWM_ConfigChannel+0x382>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fa5 	.word	0x08008fa5
 8008f74:	08009243 	.word	0x08009243
 8008f78:	08009243 	.word	0x08009243
 8008f7c:	08009243 	.word	0x08009243
 8008f80:	08009067 	.word	0x08009067
 8008f84:	08009243 	.word	0x08009243
 8008f88:	08009243 	.word	0x08009243
 8008f8c:	08009243 	.word	0x08009243
 8008f90:	08009135 	.word	0x08009135
 8008f94:	08009243 	.word	0x08009243
 8008f98:	08009243 	.word	0x08009243
 8008f9c:	08009243 	.word	0x08009243
 8008fa0:	080091bb 	.word	0x080091bb
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a57      	ldr	r2, [pc, #348]	; (8009108 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d03b      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d036      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a53      	ldr	r2, [pc, #332]	; (800910c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d031      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a52      	ldr	r2, [pc, #328]	; (8009110 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d02c      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a50      	ldr	r2, [pc, #320]	; (8009114 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d027      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a4f      	ldr	r2, [pc, #316]	; (8009118 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d022      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a4d      	ldr	r2, [pc, #308]	; (800911c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01d      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a4c      	ldr	r2, [pc, #304]	; (8009120 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d018      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a4a      	ldr	r2, [pc, #296]	; (8009124 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a49      	ldr	r2, [pc, #292]	; (8009128 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a47      	ldr	r2, [pc, #284]	; (800912c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d009      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a46      	ldr	r2, [pc, #280]	; (8009130 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <HAL_TIM_PWM_ConfigChannel+0x166>
 800901c:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8009020:	4838      	ldr	r0, [pc, #224]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009022:	f005 fd3d 	bl	800eaa0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fd53 	bl	8009ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0208 	orr.w	r2, r2, #8
 8009040:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699a      	ldr	r2, [r3, #24]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0204 	bic.w	r2, r2, #4
 8009050:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6999      	ldr	r1, [r3, #24]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	619a      	str	r2, [r3, #24]
      break;
 8009064:	e0ee      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a27      	ldr	r2, [pc, #156]	; (8009108 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d027      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d022      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a23      	ldr	r2, [pc, #140]	; (800910c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d01d      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a21      	ldr	r2, [pc, #132]	; (8009110 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d018      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a20      	ldr	r2, [pc, #128]	; (8009114 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d013      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00e      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a1d      	ldr	r2, [pc, #116]	; (800911c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d009      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1d      	ldr	r2, [pc, #116]	; (8009128 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d004      	beq.n	80090c0 <HAL_TIM_PWM_ConfigChannel+0x200>
 80090b6:	f640 610c 	movw	r1, #3596	; 0xe0c
 80090ba:	4812      	ldr	r0, [pc, #72]	; (8009104 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80090bc:	f005 fcf0 	bl	800eaa0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fda0 	bl	8009c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6999      	ldr	r1, [r3, #24]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	021a      	lsls	r2, r3, #8
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	619a      	str	r2, [r3, #24]
      break;
 8009100:	e0a0      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009102:	bf00      	nop
 8009104:	080115b0 	.word	0x080115b0
 8009108:	40010000 	.word	0x40010000
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	40000c00 	.word	0x40000c00
 8009118:	40010400 	.word	0x40010400
 800911c:	40014000 	.word	0x40014000
 8009120:	40014400 	.word	0x40014400
 8009124:	40014800 	.word	0x40014800
 8009128:	40001800 	.word	0x40001800
 800912c:	40001c00 	.word	0x40001c00
 8009130:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a49      	ldr	r2, [pc, #292]	; (8009260 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d01d      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009146:	d018      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a45      	ldr	r2, [pc, #276]	; (8009264 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a44      	ldr	r2, [pc, #272]	; (8009268 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00e      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a42      	ldr	r2, [pc, #264]	; (800926c <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a41      	ldr	r2, [pc, #260]	; (8009270 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d004      	beq.n	800917a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009170:	f640 611d 	movw	r1, #3613	; 0xe1d
 8009174:	483f      	ldr	r0, [pc, #252]	; (8009274 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009176:	f005 fc93 	bl	800eaa0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fde1 	bl	8009d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0208 	orr.w	r2, r2, #8
 8009194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0204 	bic.w	r2, r2, #4
 80091a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69d9      	ldr	r1, [r3, #28]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	61da      	str	r2, [r3, #28]
      break;
 80091b8:	e044      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a28      	ldr	r2, [pc, #160]	; (8009260 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d01d      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091cc:	d018      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a24      	ldr	r2, [pc, #144]	; (8009264 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d013      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a22      	ldr	r2, [pc, #136]	; (8009268 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d00e      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a21      	ldr	r2, [pc, #132]	; (800926c <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d009      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1f      	ldr	r2, [pc, #124]	; (8009270 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d004      	beq.n	8009200 <HAL_TIM_PWM_ConfigChannel+0x340>
 80091f6:	f640 612e 	movw	r1, #3630	; 0xe2e
 80091fa:	481e      	ldr	r0, [pc, #120]	; (8009274 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80091fc:	f005 fc50 	bl	800eaa0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fe3c 	bl	8009e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	69da      	ldr	r2, [r3, #28]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800921a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800922a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69d9      	ldr	r1, [r3, #28]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	021a      	lsls	r2, r3, #8
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	61da      	str	r2, [r3, #28]
      break;
 8009240:	e000      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 8009242:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40010000 	.word	0x40010000
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40010400 	.word	0x40010400
 8009274:	080115b0 	.word	0x080115b0

08009278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIM_ConfigClockSource+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e347      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x6a8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a8:	d029      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b2:	d024      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d020      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d01c      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d018      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b30      	cmp	r3, #48	; 0x30
 80092d2:	d014      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	d010      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b50      	cmp	r3, #80	; 0x50
 80092e2:	d00c      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b60      	cmp	r3, #96	; 0x60
 80092ea:	d008      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b70      	cmp	r3, #112	; 0x70
 80092f2:	d004      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x86>
 80092f4:	f241 118b 	movw	r1, #4491	; 0x118b
 80092f8:	488a      	ldr	r0, [pc, #552]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 80092fa:	f005 fbd1 	bl	800eaa0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800930c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009314:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	f000 825c 	beq.w	80097e0 <HAL_TIM_ConfigClockSource+0x568>
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	d80f      	bhi.n	800934c <HAL_TIM_ConfigClockSource+0xd4>
 800932c:	2b10      	cmp	r3, #16
 800932e:	f000 82b7 	beq.w	80098a0 <HAL_TIM_ConfigClockSource+0x628>
 8009332:	2b10      	cmp	r3, #16
 8009334:	d803      	bhi.n	800933e <HAL_TIM_ConfigClockSource+0xc6>
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 82b2 	beq.w	80098a0 <HAL_TIM_ConfigClockSource+0x628>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800933c:	e2e7      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 800933e:	2b20      	cmp	r3, #32
 8009340:	f000 82ae 	beq.w	80098a0 <HAL_TIM_ConfigClockSource+0x628>
 8009344:	2b30      	cmp	r3, #48	; 0x30
 8009346:	f000 82ab 	beq.w	80098a0 <HAL_TIM_ConfigClockSource+0x628>
      break;
 800934a:	e2e0      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 800934c:	2b70      	cmp	r3, #112	; 0x70
 800934e:	d06a      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1ae>
 8009350:	2b70      	cmp	r3, #112	; 0x70
 8009352:	d806      	bhi.n	8009362 <HAL_TIM_ConfigClockSource+0xea>
 8009354:	2b50      	cmp	r3, #80	; 0x50
 8009356:	f000 8172 	beq.w	800963e <HAL_TIM_ConfigClockSource+0x3c6>
 800935a:	2b60      	cmp	r3, #96	; 0x60
 800935c:	f000 81cf 	beq.w	80096fe <HAL_TIM_ConfigClockSource+0x486>
      break;
 8009360:	e2d5      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8009362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009366:	d004      	beq.n	8009372 <HAL_TIM_ConfigClockSource+0xfa>
 8009368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800936c:	f000 80f6 	beq.w	800955c <HAL_TIM_ConfigClockSource+0x2e4>
      break;
 8009370:	e2cd      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a6c      	ldr	r2, [pc, #432]	; (8009528 <HAL_TIM_ConfigClockSource+0x2b0>)
 8009378:	4293      	cmp	r3, r2
 800937a:	f000 82c7 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009386:	f000 82c1 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a67      	ldr	r2, [pc, #412]	; (800952c <HAL_TIM_ConfigClockSource+0x2b4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	f000 82bb 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a65      	ldr	r2, [pc, #404]	; (8009530 <HAL_TIM_ConfigClockSource+0x2b8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	f000 82b5 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a63      	ldr	r2, [pc, #396]	; (8009534 <HAL_TIM_ConfigClockSource+0x2bc>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f000 82af 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a61      	ldr	r2, [pc, #388]	; (8009538 <HAL_TIM_ConfigClockSource+0x2c0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	f000 82a9 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a5f      	ldr	r2, [pc, #380]	; (800953c <HAL_TIM_ConfigClockSource+0x2c4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	f000 82a3 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a5d      	ldr	r2, [pc, #372]	; (8009540 <HAL_TIM_ConfigClockSource+0x2c8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	f000 829d 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a5b      	ldr	r2, [pc, #364]	; (8009544 <HAL_TIM_ConfigClockSource+0x2cc>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	f000 8297 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a59      	ldr	r2, [pc, #356]	; (8009548 <HAL_TIM_ConfigClockSource+0x2d0>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	f000 8291 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a57      	ldr	r2, [pc, #348]	; (800954c <HAL_TIM_ConfigClockSource+0x2d4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	f000 828b 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a55      	ldr	r2, [pc, #340]	; (8009550 <HAL_TIM_ConfigClockSource+0x2d8>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	f000 8285 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a53      	ldr	r2, [pc, #332]	; (8009554 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009408:	4293      	cmp	r3, r2
 800940a:	f000 827f 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a51      	ldr	r2, [pc, #324]	; (8009558 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	f000 8279 	beq.w	800990c <HAL_TIM_ConfigClockSource+0x694>
 800941a:	f241 1197 	movw	r1, #4503	; 0x1197
 800941e:	4841      	ldr	r0, [pc, #260]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 8009420:	f005 fb3e 	bl	800eaa0 <assert_failed>
      break;
 8009424:	e272      	b.n	800990c <HAL_TIM_ConfigClockSource+0x694>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a3f      	ldr	r2, [pc, #252]	; (8009528 <HAL_TIM_ConfigClockSource+0x2b0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d027      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	d022      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a3b      	ldr	r2, [pc, #236]	; (800952c <HAL_TIM_ConfigClockSource+0x2b4>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d01d      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a39      	ldr	r2, [pc, #228]	; (8009530 <HAL_TIM_ConfigClockSource+0x2b8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d018      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a38      	ldr	r2, [pc, #224]	; (8009534 <HAL_TIM_ConfigClockSource+0x2bc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d013      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a38      	ldr	r2, [pc, #224]	; (8009540 <HAL_TIM_ConfigClockSource+0x2c8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00e      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a37      	ldr	r2, [pc, #220]	; (8009544 <HAL_TIM_ConfigClockSource+0x2cc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d009      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a37      	ldr	r2, [pc, #220]	; (8009550 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d004      	beq.n	8009480 <HAL_TIM_ConfigClockSource+0x208>
 8009476:	f241 119e 	movw	r1, #4510	; 0x119e
 800947a:	482a      	ldr	r0, [pc, #168]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 800947c:	f005 fb10 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d013      	beq.n	80094b0 <HAL_TIM_ConfigClockSource+0x238>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009490:	d00e      	beq.n	80094b0 <HAL_TIM_ConfigClockSource+0x238>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949a:	d009      	beq.n	80094b0 <HAL_TIM_ConfigClockSource+0x238>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094a4:	d004      	beq.n	80094b0 <HAL_TIM_ConfigClockSource+0x238>
 80094a6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80094aa:	481e      	ldr	r0, [pc, #120]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 80094ac:	f005 faf8 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b8:	d014      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x26c>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d010      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x26c>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00c      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x26c>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d008      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x26c>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2b0a      	cmp	r3, #10
 80094d8:	d004      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x26c>
 80094da:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80094de:	4811      	ldr	r0, [pc, #68]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 80094e0:	f005 fade 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d904      	bls.n	80094f6 <HAL_TIM_ConfigClockSource+0x27e>
 80094ec:	f241 11a3 	movw	r1, #4515	; 0x11a3
 80094f0:	480c      	ldr	r0, [pc, #48]	; (8009524 <HAL_TIM_ConfigClockSource+0x2ac>)
 80094f2:	f005 fad5 	bl	800eaa0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	6899      	ldr	r1, [r3, #8]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f000 fd9b 	bl	800a040 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009518:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	609a      	str	r2, [r3, #8]
      break;
 8009522:	e1f4      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
 8009524:	080115b0 	.word	0x080115b0
 8009528:	40010000 	.word	0x40010000
 800952c:	40000400 	.word	0x40000400
 8009530:	40000800 	.word	0x40000800
 8009534:	40000c00 	.word	0x40000c00
 8009538:	40001000 	.word	0x40001000
 800953c:	40001400 	.word	0x40001400
 8009540:	40010400 	.word	0x40010400
 8009544:	40014000 	.word	0x40014000
 8009548:	40014400 	.word	0x40014400
 800954c:	40014800 	.word	0x40014800
 8009550:	40001800 	.word	0x40001800
 8009554:	40001c00 	.word	0x40001c00
 8009558:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a97      	ldr	r2, [pc, #604]	; (80097c0 <HAL_TIM_ConfigClockSource+0x548>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d01d      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956e:	d018      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a93      	ldr	r2, [pc, #588]	; (80097c4 <HAL_TIM_ConfigClockSource+0x54c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d013      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a92      	ldr	r2, [pc, #584]	; (80097c8 <HAL_TIM_ConfigClockSource+0x550>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d00e      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a90      	ldr	r2, [pc, #576]	; (80097cc <HAL_TIM_ConfigClockSource+0x554>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d009      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a8f      	ldr	r2, [pc, #572]	; (80097d0 <HAL_TIM_ConfigClockSource+0x558>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x32a>
 8009598:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800959c:	488d      	ldr	r0, [pc, #564]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 800959e:	f005 fa7f 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d013      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x35a>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095b2:	d00e      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x35a>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095bc:	d009      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x35a>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095c6:	d004      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x35a>
 80095c8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80095cc:	4881      	ldr	r0, [pc, #516]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 80095ce:	f005 fa67 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095da:	d014      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x38e>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x38e>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00c      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x38e>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d008      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x38e>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b0a      	cmp	r3, #10
 80095fa:	d004      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x38e>
 80095fc:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8009600:	4874      	ldr	r0, [pc, #464]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 8009602:	f005 fa4d 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	2b0f      	cmp	r3, #15
 800960c:	d904      	bls.n	8009618 <HAL_TIM_ConfigClockSource+0x3a0>
 800960e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8009612:	4870      	ldr	r0, [pc, #448]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 8009614:	f005 fa44 	bl	800eaa0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6899      	ldr	r1, [r3, #8]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f000 fd0a 	bl	800a040 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963a:	609a      	str	r2, [r3, #8]
      break;
 800963c:	e167      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a5f      	ldr	r2, [pc, #380]	; (80097c0 <HAL_TIM_ConfigClockSource+0x548>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d027      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009650:	d022      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a5b      	ldr	r2, [pc, #364]	; (80097c4 <HAL_TIM_ConfigClockSource+0x54c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d01d      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a59      	ldr	r2, [pc, #356]	; (80097c8 <HAL_TIM_ConfigClockSource+0x550>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d018      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a58      	ldr	r2, [pc, #352]	; (80097cc <HAL_TIM_ConfigClockSource+0x554>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d013      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a56      	ldr	r2, [pc, #344]	; (80097d0 <HAL_TIM_ConfigClockSource+0x558>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00e      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a56      	ldr	r2, [pc, #344]	; (80097d8 <HAL_TIM_ConfigClockSource+0x560>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d009      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a54      	ldr	r2, [pc, #336]	; (80097dc <HAL_TIM_ConfigClockSource+0x564>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x420>
 800968e:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8009692:	4850      	ldr	r0, [pc, #320]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 8009694:	f005 fa04 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a0:	d014      	beq.n	80096cc <HAL_TIM_ConfigClockSource+0x454>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d010      	beq.n	80096cc <HAL_TIM_ConfigClockSource+0x454>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00c      	beq.n	80096cc <HAL_TIM_ConfigClockSource+0x454>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d008      	beq.n	80096cc <HAL_TIM_ConfigClockSource+0x454>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2b0a      	cmp	r3, #10
 80096c0:	d004      	beq.n	80096cc <HAL_TIM_ConfigClockSource+0x454>
 80096c2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80096c6:	4843      	ldr	r0, [pc, #268]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 80096c8:	f005 f9ea 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b0f      	cmp	r3, #15
 80096d2:	d904      	bls.n	80096de <HAL_TIM_ConfigClockSource+0x466>
 80096d4:	f241 11ce 	movw	r1, #4558	; 0x11ce
 80096d8:	483e      	ldr	r0, [pc, #248]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 80096da:	f005 f9e1 	bl	800eaa0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6859      	ldr	r1, [r3, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f000 fc2e 	bl	8009f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2150      	movs	r1, #80	; 0x50
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fc87 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 80096fc:	e107      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a2f      	ldr	r2, [pc, #188]	; (80097c0 <HAL_TIM_ConfigClockSource+0x548>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d027      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009710:	d022      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a2b      	ldr	r2, [pc, #172]	; (80097c4 <HAL_TIM_ConfigClockSource+0x54c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d01d      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <HAL_TIM_ConfigClockSource+0x550>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d018      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a28      	ldr	r2, [pc, #160]	; (80097cc <HAL_TIM_ConfigClockSource+0x554>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d013      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <HAL_TIM_ConfigClockSource+0x558>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a26      	ldr	r2, [pc, #152]	; (80097d8 <HAL_TIM_ConfigClockSource+0x560>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a24      	ldr	r2, [pc, #144]	; (80097dc <HAL_TIM_ConfigClockSource+0x564>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0x4e0>
 800974e:	f241 11da 	movw	r1, #4570	; 0x11da
 8009752:	4820      	ldr	r0, [pc, #128]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 8009754:	f005 f9a4 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009760:	d014      	beq.n	800978c <HAL_TIM_ConfigClockSource+0x514>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d010      	beq.n	800978c <HAL_TIM_ConfigClockSource+0x514>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00c      	beq.n	800978c <HAL_TIM_ConfigClockSource+0x514>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2b02      	cmp	r3, #2
 8009778:	d008      	beq.n	800978c <HAL_TIM_ConfigClockSource+0x514>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2b0a      	cmp	r3, #10
 8009780:	d004      	beq.n	800978c <HAL_TIM_ConfigClockSource+0x514>
 8009782:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8009786:	4813      	ldr	r0, [pc, #76]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 8009788:	f005 f98a 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	2b0f      	cmp	r3, #15
 8009792:	d904      	bls.n	800979e <HAL_TIM_ConfigClockSource+0x526>
 8009794:	f241 11de 	movw	r1, #4574	; 0x11de
 8009798:	480e      	ldr	r0, [pc, #56]	; (80097d4 <HAL_TIM_ConfigClockSource+0x55c>)
 800979a:	f005 f981 	bl	800eaa0 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f000 fbfd 	bl	8009faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2160      	movs	r1, #96	; 0x60
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fc27 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 80097bc:	e0a7      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
 80097be:	bf00      	nop
 80097c0:	40010000 	.word	0x40010000
 80097c4:	40000400 	.word	0x40000400
 80097c8:	40000800 	.word	0x40000800
 80097cc:	40000c00 	.word	0x40000c00
 80097d0:	40010400 	.word	0x40010400
 80097d4:	080115b0 	.word	0x080115b0
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a50      	ldr	r2, [pc, #320]	; (8009928 <HAL_TIM_ConfigClockSource+0x6b0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d027      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f2:	d022      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a4c      	ldr	r2, [pc, #304]	; (800992c <HAL_TIM_ConfigClockSource+0x6b4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d01d      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a4b      	ldr	r2, [pc, #300]	; (8009930 <HAL_TIM_ConfigClockSource+0x6b8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d018      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a49      	ldr	r2, [pc, #292]	; (8009934 <HAL_TIM_ConfigClockSource+0x6bc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d013      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a48      	ldr	r2, [pc, #288]	; (8009938 <HAL_TIM_ConfigClockSource+0x6c0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00e      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a46      	ldr	r2, [pc, #280]	; (800993c <HAL_TIM_ConfigClockSource+0x6c4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d009      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a45      	ldr	r2, [pc, #276]	; (8009940 <HAL_TIM_ConfigClockSource+0x6c8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d004      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x5c2>
 8009830:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8009834:	4843      	ldr	r0, [pc, #268]	; (8009944 <HAL_TIM_ConfigClockSource+0x6cc>)
 8009836:	f005 f933 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009842:	d014      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x5f6>
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x5f6>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00c      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x5f6>
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d008      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x5f6>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b0a      	cmp	r3, #10
 8009862:	d004      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x5f6>
 8009864:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8009868:	4836      	ldr	r0, [pc, #216]	; (8009944 <HAL_TIM_ConfigClockSource+0x6cc>)
 800986a:	f005 f919 	bl	800eaa0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	2b0f      	cmp	r3, #15
 8009874:	d904      	bls.n	8009880 <HAL_TIM_ConfigClockSource+0x608>
 8009876:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800987a:	4832      	ldr	r0, [pc, #200]	; (8009944 <HAL_TIM_ConfigClockSource+0x6cc>)
 800987c:	f005 f910 	bl	800eaa0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6859      	ldr	r1, [r3, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	461a      	mov	r2, r3
 800988e:	f000 fb5d 	bl	8009f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2140      	movs	r1, #64	; 0x40
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fbb6 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 800989e:	e036      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a20      	ldr	r2, [pc, #128]	; (8009928 <HAL_TIM_ConfigClockSource+0x6b0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d027      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b2:	d022      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1c      	ldr	r2, [pc, #112]	; (800992c <HAL_TIM_ConfigClockSource+0x6b4>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01d      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <HAL_TIM_ConfigClockSource+0x6b8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d018      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a19      	ldr	r2, [pc, #100]	; (8009934 <HAL_TIM_ConfigClockSource+0x6bc>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d013      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a18      	ldr	r2, [pc, #96]	; (8009938 <HAL_TIM_ConfigClockSource+0x6c0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00e      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a16      	ldr	r2, [pc, #88]	; (800993c <HAL_TIM_ConfigClockSource+0x6c4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d009      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a15      	ldr	r2, [pc, #84]	; (8009940 <HAL_TIM_ConfigClockSource+0x6c8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d004      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x682>
 80098f0:	f241 11fd 	movw	r1, #4605	; 0x11fd
 80098f4:	4813      	ldr	r0, [pc, #76]	; (8009944 <HAL_TIM_ConfigClockSource+0x6cc>)
 80098f6:	f005 f8d3 	bl	800eaa0 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4619      	mov	r1, r3
 8009904:	4610      	mov	r0, r2
 8009906:	f000 fb80 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 800990a:	e000      	b.n	800990e <HAL_TIM_ConfigClockSource+0x696>
      break;
 800990c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	40010000 	.word	0x40010000
 800992c:	40000400 	.word	0x40000400
 8009930:	40000800 	.word	0x40000800
 8009934:	40000c00 	.word	0x40000c00
 8009938:	40010400 	.word	0x40010400
 800993c:	40014000 	.word	0x40014000
 8009940:	40001800 	.word	0x40001800
 8009944:	080115b0 	.word	0x080115b0

08009948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a40      	ldr	r2, [pc, #256]	; (8009aac <TIM_Base_SetConfig+0x114>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d013      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b6:	d00f      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a3d      	ldr	r2, [pc, #244]	; (8009ab0 <TIM_Base_SetConfig+0x118>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00b      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a3c      	ldr	r2, [pc, #240]	; (8009ab4 <TIM_Base_SetConfig+0x11c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a3b      	ldr	r2, [pc, #236]	; (8009ab8 <TIM_Base_SetConfig+0x120>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a3a      	ldr	r2, [pc, #232]	; (8009abc <TIM_Base_SetConfig+0x124>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d108      	bne.n	80099ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a2f      	ldr	r2, [pc, #188]	; (8009aac <TIM_Base_SetConfig+0x114>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d02b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f8:	d027      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a2c      	ldr	r2, [pc, #176]	; (8009ab0 <TIM_Base_SetConfig+0x118>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d023      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a2b      	ldr	r2, [pc, #172]	; (8009ab4 <TIM_Base_SetConfig+0x11c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01f      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <TIM_Base_SetConfig+0x120>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d01b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a29      	ldr	r2, [pc, #164]	; (8009abc <TIM_Base_SetConfig+0x124>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d017      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a28      	ldr	r2, [pc, #160]	; (8009ac0 <TIM_Base_SetConfig+0x128>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <TIM_Base_SetConfig+0x12c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a26      	ldr	r2, [pc, #152]	; (8009ac8 <TIM_Base_SetConfig+0x130>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a25      	ldr	r2, [pc, #148]	; (8009acc <TIM_Base_SetConfig+0x134>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a24      	ldr	r2, [pc, #144]	; (8009ad0 <TIM_Base_SetConfig+0x138>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a23      	ldr	r2, [pc, #140]	; (8009ad4 <TIM_Base_SetConfig+0x13c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d108      	bne.n	8009a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <TIM_Base_SetConfig+0x114>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_Base_SetConfig+0xf8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a0c      	ldr	r2, [pc, #48]	; (8009abc <TIM_Base_SetConfig+0x124>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d103      	bne.n	8009a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	615a      	str	r2, [r3, #20]
}
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40000c00 	.word	0x40000c00
 8009abc:	40010400 	.word	0x40010400
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40014400 	.word	0x40014400
 8009ac8:	40014800 	.word	0x40014800
 8009acc:	40001800 	.word	0x40001800
 8009ad0:	40001c00 	.word	0x40001c00
 8009ad4:	40002000 	.word	0x40002000

08009ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	f023 0201 	bic.w	r2, r3, #1
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f023 0302 	bic.w	r3, r3, #2
 8009b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a34      	ldr	r2, [pc, #208]	; (8009c00 <TIM_OC1_SetConfig+0x128>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d003      	beq.n	8009b3c <TIM_OC1_SetConfig+0x64>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a33      	ldr	r2, [pc, #204]	; (8009c04 <TIM_OC1_SetConfig+0x12c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d119      	bne.n	8009b70 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d008      	beq.n	8009b56 <TIM_OC1_SetConfig+0x7e>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d004      	beq.n	8009b56 <TIM_OC1_SetConfig+0x7e>
 8009b4c:	f241 7102 	movw	r1, #5890	; 0x1702
 8009b50:	482d      	ldr	r0, [pc, #180]	; (8009c08 <TIM_OC1_SetConfig+0x130>)
 8009b52:	f004 ffa5 	bl	800eaa0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f023 0308 	bic.w	r3, r3, #8
 8009b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f023 0304 	bic.w	r3, r3, #4
 8009b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a23      	ldr	r2, [pc, #140]	; (8009c00 <TIM_OC1_SetConfig+0x128>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_OC1_SetConfig+0xa8>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a22      	ldr	r2, [pc, #136]	; (8009c04 <TIM_OC1_SetConfig+0x12c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d12d      	bne.n	8009bdc <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b88:	d008      	beq.n	8009b9c <TIM_OC1_SetConfig+0xc4>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <TIM_OC1_SetConfig+0xc4>
 8009b92:	f241 710f 	movw	r1, #5903	; 0x170f
 8009b96:	481c      	ldr	r0, [pc, #112]	; (8009c08 <TIM_OC1_SetConfig+0x130>)
 8009b98:	f004 ff82 	bl	800eaa0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba4:	d008      	beq.n	8009bb8 <TIM_OC1_SetConfig+0xe0>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <TIM_OC1_SetConfig+0xe0>
 8009bae:	f241 7110 	movw	r1, #5904	; 0x1710
 8009bb2:	4815      	ldr	r0, [pc, #84]	; (8009c08 <TIM_OC1_SetConfig+0x130>)
 8009bb4:	f004 ff74 	bl	800eaa0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	621a      	str	r2, [r3, #32]
}
 8009bf6:	bf00      	nop
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40010000 	.word	0x40010000
 8009c04:	40010400 	.word	0x40010400
 8009c08:	080115b0 	.word	0x080115b0

08009c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	f023 0210 	bic.w	r2, r3, #16
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f023 0320 	bic.w	r3, r3, #32
 8009c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a35      	ldr	r2, [pc, #212]	; (8009d3c <TIM_OC2_SetConfig+0x130>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d003      	beq.n	8009c74 <TIM_OC2_SetConfig+0x68>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a34      	ldr	r2, [pc, #208]	; (8009d40 <TIM_OC2_SetConfig+0x134>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d11a      	bne.n	8009caa <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <TIM_OC2_SetConfig+0x82>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d004      	beq.n	8009c8e <TIM_OC2_SetConfig+0x82>
 8009c84:	f241 714d 	movw	r1, #5965	; 0x174d
 8009c88:	482e      	ldr	r0, [pc, #184]	; (8009d44 <TIM_OC2_SetConfig+0x138>)
 8009c8a:	f004 ff09 	bl	800eaa0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a23      	ldr	r2, [pc, #140]	; (8009d3c <TIM_OC2_SetConfig+0x130>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_OC2_SetConfig+0xae>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a22      	ldr	r2, [pc, #136]	; (8009d40 <TIM_OC2_SetConfig+0x134>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d12f      	bne.n	8009d1a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc2:	d008      	beq.n	8009cd6 <TIM_OC2_SetConfig+0xca>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <TIM_OC2_SetConfig+0xca>
 8009ccc:	f241 715b 	movw	r1, #5979	; 0x175b
 8009cd0:	481c      	ldr	r0, [pc, #112]	; (8009d44 <TIM_OC2_SetConfig+0x138>)
 8009cd2:	f004 fee5 	bl	800eaa0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cde:	d008      	beq.n	8009cf2 <TIM_OC2_SetConfig+0xe6>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <TIM_OC2_SetConfig+0xe6>
 8009ce8:	f241 715c 	movw	r1, #5980	; 0x175c
 8009cec:	4815      	ldr	r0, [pc, #84]	; (8009d44 <TIM_OC2_SetConfig+0x138>)
 8009cee:	f004 fed7 	bl	800eaa0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	621a      	str	r2, [r3, #32]
}
 8009d34:	bf00      	nop
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40010400 	.word	0x40010400
 8009d44:	080115b0 	.word	0x080115b0

08009d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a35      	ldr	r2, [pc, #212]	; (8009e78 <TIM_OC3_SetConfig+0x130>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d003      	beq.n	8009dae <TIM_OC3_SetConfig+0x66>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a34      	ldr	r2, [pc, #208]	; (8009e7c <TIM_OC3_SetConfig+0x134>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d11a      	bne.n	8009de4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <TIM_OC3_SetConfig+0x80>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	d004      	beq.n	8009dc8 <TIM_OC3_SetConfig+0x80>
 8009dbe:	f241 7198 	movw	r1, #6040	; 0x1798
 8009dc2:	482f      	ldr	r0, [pc, #188]	; (8009e80 <TIM_OC3_SetConfig+0x138>)
 8009dc4:	f004 fe6c 	bl	800eaa0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a24      	ldr	r2, [pc, #144]	; (8009e78 <TIM_OC3_SetConfig+0x130>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d003      	beq.n	8009df4 <TIM_OC3_SetConfig+0xac>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a23      	ldr	r2, [pc, #140]	; (8009e7c <TIM_OC3_SetConfig+0x134>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d12f      	bne.n	8009e54 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfc:	d008      	beq.n	8009e10 <TIM_OC3_SetConfig+0xc8>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <TIM_OC3_SetConfig+0xc8>
 8009e06:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8009e0a:	481d      	ldr	r0, [pc, #116]	; (8009e80 <TIM_OC3_SetConfig+0x138>)
 8009e0c:	f004 fe48 	bl	800eaa0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e18:	d008      	beq.n	8009e2c <TIM_OC3_SetConfig+0xe4>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d004      	beq.n	8009e2c <TIM_OC3_SetConfig+0xe4>
 8009e22:	f241 71a6 	movw	r1, #6054	; 0x17a6
 8009e26:	4816      	ldr	r0, [pc, #88]	; (8009e80 <TIM_OC3_SetConfig+0x138>)
 8009e28:	f004 fe3a 	bl	800eaa0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	621a      	str	r2, [r3, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40010400 	.word	0x40010400
 8009e80:	080115b0 	.word	0x080115b0

08009e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	031b      	lsls	r3, r3, #12
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a18      	ldr	r2, [pc, #96]	; (8009f40 <TIM_OC4_SetConfig+0xbc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC4_SetConfig+0x68>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a17      	ldr	r2, [pc, #92]	; (8009f44 <TIM_OC4_SetConfig+0xc0>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d117      	bne.n	8009f1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef4:	d008      	beq.n	8009f08 <TIM_OC4_SetConfig+0x84>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <TIM_OC4_SetConfig+0x84>
 8009efe:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8009f02:	4811      	ldr	r0, [pc, #68]	; (8009f48 <TIM_OC4_SetConfig+0xc4>)
 8009f04:	f004 fdcc 	bl	800eaa0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	019b      	lsls	r3, r3, #6
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	621a      	str	r2, [r3, #32]
}
 8009f36:	bf00      	nop
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40010400 	.word	0x40010400
 8009f48:	080115b0 	.word	0x080115b0

08009f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f023 0201 	bic.w	r2, r3, #1
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f023 030a 	bic.w	r3, r3, #10
 8009f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	031b      	lsls	r3, r3, #12
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	f043 0307 	orr.w	r3, r3, #7
 800a02c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	609a      	str	r2, [r3, #8]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	021a      	lsls	r2, r3, #8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	431a      	orrs	r2, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	609a      	str	r2, [r3, #8]
}
 800a074:	bf00      	nop
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4a32      	ldr	r2, [pc, #200]	; (800a158 <TIM_CCxChannelCmd+0xd8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d030      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09a:	d02c      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a2f      	ldr	r2, [pc, #188]	; (800a15c <TIM_CCxChannelCmd+0xdc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d028      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4a2e      	ldr	r2, [pc, #184]	; (800a160 <TIM_CCxChannelCmd+0xe0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d024      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4a2d      	ldr	r2, [pc, #180]	; (800a164 <TIM_CCxChannelCmd+0xe4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d020      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4a2c      	ldr	r2, [pc, #176]	; (800a168 <TIM_CCxChannelCmd+0xe8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d01c      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a2b      	ldr	r2, [pc, #172]	; (800a16c <TIM_CCxChannelCmd+0xec>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d018      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <TIM_CCxChannelCmd+0xf0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d014      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a29      	ldr	r2, [pc, #164]	; (800a174 <TIM_CCxChannelCmd+0xf4>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d010      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4a28      	ldr	r2, [pc, #160]	; (800a178 <TIM_CCxChannelCmd+0xf8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00c      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4a27      	ldr	r2, [pc, #156]	; (800a17c <TIM_CCxChannelCmd+0xfc>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d008      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4a26      	ldr	r2, [pc, #152]	; (800a180 <TIM_CCxChannelCmd+0x100>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <TIM_CCxChannelCmd+0x76>
 800a0ec:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800a0f0:	4824      	ldr	r0, [pc, #144]	; (800a184 <TIM_CCxChannelCmd+0x104>)
 800a0f2:	f004 fcd5 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d010      	beq.n	800a11e <TIM_CCxChannelCmd+0x9e>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d00d      	beq.n	800a11e <TIM_CCxChannelCmd+0x9e>
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b08      	cmp	r3, #8
 800a106:	d00a      	beq.n	800a11e <TIM_CCxChannelCmd+0x9e>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b0c      	cmp	r3, #12
 800a10c:	d007      	beq.n	800a11e <TIM_CCxChannelCmd+0x9e>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b3c      	cmp	r3, #60	; 0x3c
 800a112:	d004      	beq.n	800a11e <TIM_CCxChannelCmd+0x9e>
 800a114:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800a118:	481a      	ldr	r0, [pc, #104]	; (800a184 <TIM_CCxChannelCmd+0x104>)
 800a11a:	f004 fcc1 	bl	800eaa0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	2201      	movs	r2, #1
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1a      	ldr	r2, [r3, #32]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	43db      	mvns	r3, r3
 800a134:	401a      	ands	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a1a      	ldr	r2, [r3, #32]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	fa01 f303 	lsl.w	r3, r1, r3
 800a14a:	431a      	orrs	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]
}
 800a150:	bf00      	nop
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40010000 	.word	0x40010000
 800a15c:	40000400 	.word	0x40000400
 800a160:	40000800 	.word	0x40000800
 800a164:	40000c00 	.word	0x40000c00
 800a168:	40010400 	.word	0x40010400
 800a16c:	40014000 	.word	0x40014000
 800a170:	40014400 	.word	0x40014400
 800a174:	40014800 	.word	0x40014800
 800a178:	40001800 	.word	0x40001800
 800a17c:	40001c00 	.word	0x40001c00
 800a180:	40002000 	.word	0x40002000
 800a184:	080115b0 	.word	0x080115b0

0800a188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a61      	ldr	r2, [pc, #388]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d027      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d022      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a5d      	ldr	r2, [pc, #372]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d01d      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a5b      	ldr	r2, [pc, #364]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d018      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a5a      	ldr	r2, [pc, #360]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a58      	ldr	r2, [pc, #352]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00e      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a57      	ldr	r2, [pc, #348]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d009      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a55      	ldr	r2, [pc, #340]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d004      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a1e2:	f240 6164 	movw	r1, #1636	; 0x664
 800a1e6:	4854      	ldr	r0, [pc, #336]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a1e8:	f004 fc5a 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d020      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b10      	cmp	r3, #16
 800a1fa:	d01c      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b20      	cmp	r3, #32
 800a202:	d018      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b30      	cmp	r3, #48	; 0x30
 800a20a:	d014      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b40      	cmp	r3, #64	; 0x40
 800a212:	d010      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b50      	cmp	r3, #80	; 0x50
 800a21a:	d00c      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b60      	cmp	r3, #96	; 0x60
 800a222:	d008      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b70      	cmp	r3, #112	; 0x70
 800a22a:	d004      	beq.n	800a236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a22c:	f240 6165 	movw	r1, #1637	; 0x665
 800a230:	4841      	ldr	r0, [pc, #260]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a232:	f004 fc35 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2b80      	cmp	r3, #128	; 0x80
 800a23c:	d008      	beq.n	800a250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a246:	f240 6166 	movw	r1, #1638	; 0x666
 800a24a:	483b      	ldr	r0, [pc, #236]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a24c:	f004 fc28 	bl	800eaa0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e05a      	b.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a284:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1f      	ldr	r2, [pc, #124]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d022      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2aa:	d01d      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a1b      	ldr	r2, [pc, #108]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d018      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a18      	ldr	r2, [pc, #96]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00e      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a19      	ldr	r2, [pc, #100]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d009      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a18      	ldr	r2, [pc, #96]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a17      	ldr	r2, [pc, #92]	; (800a340 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d10c      	bne.n	800a302 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	40010000 	.word	0x40010000
 800a320:	40000400 	.word	0x40000400
 800a324:	40000800 	.word	0x40000800
 800a328:	40000c00 	.word	0x40000c00
 800a32c:	40001000 	.word	0x40001000
 800a330:	40001400 	.word	0x40001400
 800a334:	40010400 	.word	0x40010400
 800a338:	080115f8 	.word	0x080115f8
 800a33c:	40014000 	.word	0x40014000
 800a340:	40001800 	.word	0x40001800

0800a344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a5e      	ldr	r2, [pc, #376]	; (800a4d0 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d009      	beq.n	800a370 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a5c      	ldr	r2, [pc, #368]	; (800a4d4 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d004      	beq.n	800a370 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a366:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800a36a:	485b      	ldr	r0, [pc, #364]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a36c:	f004 fb98 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a378:	d008      	beq.n	800a38c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a382:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800a386:	4854      	ldr	r0, [pc, #336]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a388:	f004 fb8a 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a394:	d008      	beq.n	800a3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d004      	beq.n	800a3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a39e:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800a3a2:	484d      	ldr	r0, [pc, #308]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a3a4:	f004 fb7c 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d013      	beq.n	800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b8:	d00e      	beq.n	800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c2:	d009      	beq.n	800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3cc:	d004      	beq.n	800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a3ce:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800a3d2:	4841      	ldr	r0, [pc, #260]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a3d4:	f004 fb64 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2bff      	cmp	r3, #255	; 0xff
 800a3de:	d904      	bls.n	800a3ea <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800a3e0:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800a3e4:	483c      	ldr	r0, [pc, #240]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a3e6:	f004 fb5b 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f2:	d008      	beq.n	800a406 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a3fc:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800a400:	4835      	ldr	r0, [pc, #212]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a402:	f004 fb4d 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a416:	d004      	beq.n	800a422 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a418:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800a41c:	482e      	ldr	r0, [pc, #184]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a41e:	f004 fb3f 	bl	800eaa0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a42a:	d008      	beq.n	800a43e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d004      	beq.n	800a43e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a434:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800a438:	4827      	ldr	r0, [pc, #156]	; (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a43a:	f004 fb31 	bl	800eaa0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800a448:	2302      	movs	r3, #2
 800a44a:	e03d      	b.n	800a4c8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	40010000 	.word	0x40010000
 800a4d4:	40010400 	.word	0x40010400
 800a4d8:	080115f8 	.word	0x080115f8

0800a4dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e0be      	b.n	800a694 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d03b      	beq.n	800a596 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a5e      	ldr	r2, [pc, #376]	; (800a69c <HAL_UART_Init+0x198>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d01d      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a5c      	ldr	r2, [pc, #368]	; (800a6a0 <HAL_UART_Init+0x19c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d018      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a5b      	ldr	r2, [pc, #364]	; (800a6a4 <HAL_UART_Init+0x1a0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d013      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a59      	ldr	r2, [pc, #356]	; (800a6a8 <HAL_UART_Init+0x1a4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00e      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a58      	ldr	r2, [pc, #352]	; (800a6ac <HAL_UART_Init+0x1a8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d009      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a56      	ldr	r2, [pc, #344]	; (800a6b0 <HAL_UART_Init+0x1ac>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_UART_Init+0x60>
 800a55a:	f240 114b 	movw	r1, #331	; 0x14b
 800a55e:	4855      	ldr	r0, [pc, #340]	; (800a6b4 <HAL_UART_Init+0x1b0>)
 800a560:	f004 fa9e 	bl	800eaa0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d037      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a574:	d032      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57e:	d02d      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a588:	d028      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a58a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a58e:	4849      	ldr	r0, [pc, #292]	; (800a6b4 <HAL_UART_Init+0x1b0>)
 800a590:	f004 fa86 	bl	800eaa0 <assert_failed>
 800a594:	e022      	b.n	800a5dc <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a40      	ldr	r2, [pc, #256]	; (800a69c <HAL_UART_Init+0x198>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d01d      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a3e      	ldr	r2, [pc, #248]	; (800a6a0 <HAL_UART_Init+0x19c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d018      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a3d      	ldr	r2, [pc, #244]	; (800a6a4 <HAL_UART_Init+0x1a0>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a3b      	ldr	r2, [pc, #236]	; (800a6a8 <HAL_UART_Init+0x1a4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00e      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a3a      	ldr	r2, [pc, #232]	; (800a6ac <HAL_UART_Init+0x1a8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d009      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a38      	ldr	r2, [pc, #224]	; (800a6b0 <HAL_UART_Init+0x1ac>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d004      	beq.n	800a5dc <HAL_UART_Init+0xd8>
 800a5d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a5d6:	4837      	ldr	r0, [pc, #220]	; (800a6b4 <HAL_UART_Init+0x1b0>)
 800a5d8:	f004 fa62 	bl	800eaa0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <HAL_UART_Init+0xf4>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ec:	d004      	beq.n	800a5f8 <HAL_UART_Init+0xf4>
 800a5ee:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800a5f2:	4830      	ldr	r0, [pc, #192]	; (800a6b4 <HAL_UART_Init+0x1b0>)
 800a5f4:	f004 fa54 	bl	800eaa0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_UART_Init+0x110>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a608:	d004      	beq.n	800a614 <HAL_UART_Init+0x110>
 800a60a:	f240 1153 	movw	r1, #339	; 0x153
 800a60e:	4829      	ldr	r0, [pc, #164]	; (800a6b4 <HAL_UART_Init+0x1b0>)
 800a610:	f004 fa46 	bl	800eaa0 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f005 fc71 	bl	800ff10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2224      	movs	r2, #36	; 0x24
 800a632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a644:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fa76 	bl	800ab38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691a      	ldr	r2, [r3, #16]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a65a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	695a      	ldr	r2, [r3, #20]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a66a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68da      	ldr	r2, [r3, #12]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a67a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2220      	movs	r2, #32
 800a686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40011000 	.word	0x40011000
 800a6a0:	40004400 	.word	0x40004400
 800a6a4:	40004800 	.word	0x40004800
 800a6a8:	40004c00 	.word	0x40004c00
 800a6ac:	40005000 	.word	0x40005000
 800a6b0:	40011400 	.word	0x40011400
 800a6b4:	08011644 	.word	0x08011644

0800a6b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10d      	bne.n	800a70a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d008      	beq.n	800a70a <HAL_UART_IRQHandler+0x52>
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f003 0320 	and.w	r3, r3, #32
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f996 	bl	800aa34 <UART_Receive_IT>
      return;
 800a708:	e0d1      	b.n	800a8ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 80b0 	beq.w	800a872 <HAL_UART_IRQHandler+0x1ba>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d105      	bne.n	800a728 <HAL_UART_IRQHandler+0x70>
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80a5 	beq.w	800a872 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <HAL_UART_IRQHandler+0x90>
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a740:	f043 0201 	orr.w	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <HAL_UART_IRQHandler+0xb0>
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a760:	f043 0202 	orr.w	r2, r3, #2
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <HAL_UART_IRQHandler+0xd0>
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a780:	f043 0204 	orr.w	r2, r3, #4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	f003 0308 	and.w	r3, r3, #8
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00f      	beq.n	800a7b2 <HAL_UART_IRQHandler+0xfa>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <HAL_UART_IRQHandler+0xee>
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7aa:	f043 0208 	orr.w	r2, r3, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d078      	beq.n	800a8ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <HAL_UART_IRQHandler+0x11c>
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f003 0320 	and.w	r3, r3, #32
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f930 	bl	800aa34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	bf0c      	ite	eq
 800a7e2:	2301      	moveq	r3, #1
 800a7e4:	2300      	movne	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <HAL_UART_IRQHandler+0x144>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d031      	beq.n	800a860 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f879 	bl	800a8f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80c:	2b40      	cmp	r3, #64	; 0x40
 800a80e:	d123      	bne.n	800a858 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695a      	ldr	r2, [r3, #20]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a81e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a824:	2b00      	cmp	r3, #0
 800a826:	d013      	beq.n	800a850 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	4a21      	ldr	r2, [pc, #132]	; (800a8b4 <HAL_UART_IRQHandler+0x1fc>)
 800a82e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a834:	4618      	mov	r0, r3
 800a836:	f7fc f9eb 	bl	8006c10 <HAL_DMA_Abort_IT>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d016      	beq.n	800a86e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a84e:	e00e      	b.n	800a86e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f845 	bl	800a8e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a856:	e00a      	b.n	800a86e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f841 	bl	800a8e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85e:	e006      	b.n	800a86e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f83d 	bl	800a8e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a86c:	e01e      	b.n	800a8ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a86e:	bf00      	nop
    return;
 800a870:	e01c      	b.n	800a8ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d008      	beq.n	800a88e <HAL_UART_IRQHandler+0x1d6>
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f866 	bl	800a958 <UART_Transmit_IT>
    return;
 800a88c:	e00f      	b.n	800a8ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00a      	beq.n	800a8ae <HAL_UART_IRQHandler+0x1f6>
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d005      	beq.n	800a8ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8ae 	bl	800aa04 <UART_EndTransmit_IT>
    return;
 800a8a8:	bf00      	nop
 800a8aa:	e000      	b.n	800a8ae <HAL_UART_IRQHandler+0x1f6>
    return;
 800a8ac:	bf00      	nop
  }
}
 800a8ae:	3720      	adds	r7, #32
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	0800a931 	.word	0x0800a931

0800a8b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a90a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0201 	bic.w	r2, r2, #1
 800a91a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2220      	movs	r2, #32
 800a920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff ffc8 	bl	800a8e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a950:	bf00      	nop
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b21      	cmp	r3, #33	; 0x21
 800a96a:	d144      	bne.n	800a9f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a974:	d11a      	bne.n	800a9ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a98a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	1c9a      	adds	r2, r3, #2
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	621a      	str	r2, [r3, #32]
 800a99e:	e00e      	b.n	800a9be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	621a      	str	r2, [r3, #32]
 800a9aa:	e008      	b.n	800a9be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	1c59      	adds	r1, r3, #1
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6211      	str	r1, [r2, #32]
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10f      	bne.n	800a9f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e000      	b.n	800a9f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a9f6:	2302      	movs	r3, #2
  }
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ff47 	bl	800a8b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b22      	cmp	r3, #34	; 0x22
 800aa46:	d171      	bne.n	800ab2c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa50:	d123      	bne.n	800aa9a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa56:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10e      	bne.n	800aa7e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	1c9a      	adds	r2, r3, #2
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	629a      	str	r2, [r3, #40]	; 0x28
 800aa7c:	e029      	b.n	800aad2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
 800aa98:	e01b      	b.n	800aad2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10a      	bne.n	800aab8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6858      	ldr	r0, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	1c59      	adds	r1, r3, #1
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6291      	str	r1, [r2, #40]	; 0x28
 800aab2:	b2c2      	uxtb	r2, r0
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	e00c      	b.n	800aad2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	1c58      	adds	r0, r3, #1
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	6288      	str	r0, [r1, #40]	; 0x28
 800aaca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	3b01      	subs	r3, #1
 800aada:	b29b      	uxth	r3, r3
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	4619      	mov	r1, r3
 800aae0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d120      	bne.n	800ab28 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 0220 	bic.w	r2, r2, #32
 800aaf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	695a      	ldr	r2, [r3, #20]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff fed4 	bl	800a8cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e002      	b.n	800ab2e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e000      	b.n	800ab2e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ab2c:	2302      	movs	r3, #2
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	4a9a      	ldr	r2, [pc, #616]	; (800adb0 <UART_SetConfig+0x278>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d904      	bls.n	800ab56 <UART_SetConfig+0x1e>
 800ab4c:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800ab50:	4898      	ldr	r0, [pc, #608]	; (800adb4 <UART_SetConfig+0x27c>)
 800ab52:	f003 ffa5 	bl	800eaa0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d009      	beq.n	800ab72 <UART_SetConfig+0x3a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab66:	d004      	beq.n	800ab72 <UART_SetConfig+0x3a>
 800ab68:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800ab6c:	4891      	ldr	r0, [pc, #580]	; (800adb4 <UART_SetConfig+0x27c>)
 800ab6e:	f003 ff97 	bl	800eaa0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00e      	beq.n	800ab98 <UART_SetConfig+0x60>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab82:	d009      	beq.n	800ab98 <UART_SetConfig+0x60>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab8c:	d004      	beq.n	800ab98 <UART_SetConfig+0x60>
 800ab8e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800ab92:	4888      	ldr	r0, [pc, #544]	; (800adb4 <UART_SetConfig+0x27c>)
 800ab94:	f003 ff84 	bl	800eaa0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695a      	ldr	r2, [r3, #20]
 800ab9c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800aba0:	4013      	ands	r3, r2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <UART_SetConfig+0x76>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d104      	bne.n	800abb8 <UART_SetConfig+0x80>
 800abae:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800abb2:	4880      	ldr	r0, [pc, #512]	; (800adb4 <UART_SetConfig+0x27c>)
 800abb4:	f003 ff74 	bl	800eaa0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	431a      	orrs	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	431a      	orrs	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800abf0:	f023 030c 	bic.w	r3, r3, #12
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	6812      	ldr	r2, [r2, #0]
 800abf8:	68f9      	ldr	r1, [r7, #12]
 800abfa:	430b      	orrs	r3, r1
 800abfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1c:	f040 818f 	bne.w	800af3e <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a64      	ldr	r2, [pc, #400]	; (800adb8 <UART_SetConfig+0x280>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d005      	beq.n	800ac36 <UART_SetConfig+0xfe>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a63      	ldr	r2, [pc, #396]	; (800adbc <UART_SetConfig+0x284>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	f040 80c7 	bne.w	800adc4 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac36:	f7fc fddf 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800ac3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	461d      	mov	r5, r3
 800ac40:	f04f 0600 	mov.w	r6, #0
 800ac44:	46a8      	mov	r8, r5
 800ac46:	46b1      	mov	r9, r6
 800ac48:	eb18 0308 	adds.w	r3, r8, r8
 800ac4c:	eb49 0409 	adc.w	r4, r9, r9
 800ac50:	4698      	mov	r8, r3
 800ac52:	46a1      	mov	r9, r4
 800ac54:	eb18 0805 	adds.w	r8, r8, r5
 800ac58:	eb49 0906 	adc.w	r9, r9, r6
 800ac5c:	f04f 0100 	mov.w	r1, #0
 800ac60:	f04f 0200 	mov.w	r2, #0
 800ac64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac70:	4688      	mov	r8, r1
 800ac72:	4691      	mov	r9, r2
 800ac74:	eb18 0005 	adds.w	r0, r8, r5
 800ac78:	eb49 0106 	adc.w	r1, r9, r6
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	461d      	mov	r5, r3
 800ac82:	f04f 0600 	mov.w	r6, #0
 800ac86:	196b      	adds	r3, r5, r5
 800ac88:	eb46 0406 	adc.w	r4, r6, r6
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	4623      	mov	r3, r4
 800ac90:	f7f5 ff72 	bl	8000b78 <__aeabi_uldivmod>
 800ac94:	4603      	mov	r3, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4b49      	ldr	r3, [pc, #292]	; (800adc0 <UART_SetConfig+0x288>)
 800ac9c:	fba3 2302 	umull	r2, r3, r3, r2
 800aca0:	095b      	lsrs	r3, r3, #5
 800aca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	461d      	mov	r5, r3
 800acaa:	f04f 0600 	mov.w	r6, #0
 800acae:	46a9      	mov	r9, r5
 800acb0:	46b2      	mov	sl, r6
 800acb2:	eb19 0309 	adds.w	r3, r9, r9
 800acb6:	eb4a 040a 	adc.w	r4, sl, sl
 800acba:	4699      	mov	r9, r3
 800acbc:	46a2      	mov	sl, r4
 800acbe:	eb19 0905 	adds.w	r9, r9, r5
 800acc2:	eb4a 0a06 	adc.w	sl, sl, r6
 800acc6:	f04f 0100 	mov.w	r1, #0
 800acca:	f04f 0200 	mov.w	r2, #0
 800acce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acda:	4689      	mov	r9, r1
 800acdc:	4692      	mov	sl, r2
 800acde:	eb19 0005 	adds.w	r0, r9, r5
 800ace2:	eb4a 0106 	adc.w	r1, sl, r6
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	461d      	mov	r5, r3
 800acec:	f04f 0600 	mov.w	r6, #0
 800acf0:	196b      	adds	r3, r5, r5
 800acf2:	eb46 0406 	adc.w	r4, r6, r6
 800acf6:	461a      	mov	r2, r3
 800acf8:	4623      	mov	r3, r4
 800acfa:	f7f5 ff3d 	bl	8000b78 <__aeabi_uldivmod>
 800acfe:	4603      	mov	r3, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	461a      	mov	r2, r3
 800ad04:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <UART_SetConfig+0x288>)
 800ad06:	fba3 1302 	umull	r1, r3, r3, r2
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	2164      	movs	r1, #100	; 0x64
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	3332      	adds	r3, #50	; 0x32
 800ad18:	4a29      	ldr	r2, [pc, #164]	; (800adc0 <UART_SetConfig+0x288>)
 800ad1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1e:	095b      	lsrs	r3, r3, #5
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad26:	4498      	add	r8, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	461d      	mov	r5, r3
 800ad2c:	f04f 0600 	mov.w	r6, #0
 800ad30:	46a9      	mov	r9, r5
 800ad32:	46b2      	mov	sl, r6
 800ad34:	eb19 0309 	adds.w	r3, r9, r9
 800ad38:	eb4a 040a 	adc.w	r4, sl, sl
 800ad3c:	4699      	mov	r9, r3
 800ad3e:	46a2      	mov	sl, r4
 800ad40:	eb19 0905 	adds.w	r9, r9, r5
 800ad44:	eb4a 0a06 	adc.w	sl, sl, r6
 800ad48:	f04f 0100 	mov.w	r1, #0
 800ad4c:	f04f 0200 	mov.w	r2, #0
 800ad50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	4692      	mov	sl, r2
 800ad60:	eb19 0005 	adds.w	r0, r9, r5
 800ad64:	eb4a 0106 	adc.w	r1, sl, r6
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	461d      	mov	r5, r3
 800ad6e:	f04f 0600 	mov.w	r6, #0
 800ad72:	196b      	adds	r3, r5, r5
 800ad74:	eb46 0406 	adc.w	r4, r6, r6
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4623      	mov	r3, r4
 800ad7c:	f7f5 fefc 	bl	8000b78 <__aeabi_uldivmod>
 800ad80:	4603      	mov	r3, r0
 800ad82:	460c      	mov	r4, r1
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <UART_SetConfig+0x288>)
 800ad88:	fba3 1302 	umull	r1, r3, r3, r2
 800ad8c:	095b      	lsrs	r3, r3, #5
 800ad8e:	2164      	movs	r1, #100	; 0x64
 800ad90:	fb01 f303 	mul.w	r3, r1, r3
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	3332      	adds	r3, #50	; 0x32
 800ad9a:	4a09      	ldr	r2, [pc, #36]	; (800adc0 <UART_SetConfig+0x288>)
 800ad9c:	fba2 2303 	umull	r2, r3, r2, r3
 800ada0:	095b      	lsrs	r3, r3, #5
 800ada2:	f003 0207 	and.w	r2, r3, #7
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4442      	add	r2, r8
 800adac:	609a      	str	r2, [r3, #8]
 800adae:	e27a      	b.n	800b2a6 <UART_SetConfig+0x76e>
 800adb0:	00a037a0 	.word	0x00a037a0
 800adb4:	08011644 	.word	0x08011644
 800adb8:	40011000 	.word	0x40011000
 800adbc:	40011400 	.word	0x40011400
 800adc0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800adc4:	f7fc fd04 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800adc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	461d      	mov	r5, r3
 800adce:	f04f 0600 	mov.w	r6, #0
 800add2:	46a8      	mov	r8, r5
 800add4:	46b1      	mov	r9, r6
 800add6:	eb18 0308 	adds.w	r3, r8, r8
 800adda:	eb49 0409 	adc.w	r4, r9, r9
 800adde:	4698      	mov	r8, r3
 800ade0:	46a1      	mov	r9, r4
 800ade2:	eb18 0805 	adds.w	r8, r8, r5
 800ade6:	eb49 0906 	adc.w	r9, r9, r6
 800adea:	f04f 0100 	mov.w	r1, #0
 800adee:	f04f 0200 	mov.w	r2, #0
 800adf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800adf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800adfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800adfe:	4688      	mov	r8, r1
 800ae00:	4691      	mov	r9, r2
 800ae02:	eb18 0005 	adds.w	r0, r8, r5
 800ae06:	eb49 0106 	adc.w	r1, r9, r6
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f04f 0600 	mov.w	r6, #0
 800ae14:	196b      	adds	r3, r5, r5
 800ae16:	eb46 0406 	adc.w	r4, r6, r6
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	f7f5 feab 	bl	8000b78 <__aeabi_uldivmod>
 800ae22:	4603      	mov	r3, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	461a      	mov	r2, r3
 800ae28:	4bb3      	ldr	r3, [pc, #716]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800ae2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	461d      	mov	r5, r3
 800ae38:	f04f 0600 	mov.w	r6, #0
 800ae3c:	46a9      	mov	r9, r5
 800ae3e:	46b2      	mov	sl, r6
 800ae40:	eb19 0309 	adds.w	r3, r9, r9
 800ae44:	eb4a 040a 	adc.w	r4, sl, sl
 800ae48:	4699      	mov	r9, r3
 800ae4a:	46a2      	mov	sl, r4
 800ae4c:	eb19 0905 	adds.w	r9, r9, r5
 800ae50:	eb4a 0a06 	adc.w	sl, sl, r6
 800ae54:	f04f 0100 	mov.w	r1, #0
 800ae58:	f04f 0200 	mov.w	r2, #0
 800ae5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae68:	4689      	mov	r9, r1
 800ae6a:	4692      	mov	sl, r2
 800ae6c:	eb19 0005 	adds.w	r0, r9, r5
 800ae70:	eb4a 0106 	adc.w	r1, sl, r6
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	461d      	mov	r5, r3
 800ae7a:	f04f 0600 	mov.w	r6, #0
 800ae7e:	196b      	adds	r3, r5, r5
 800ae80:	eb46 0406 	adc.w	r4, r6, r6
 800ae84:	461a      	mov	r2, r3
 800ae86:	4623      	mov	r3, r4
 800ae88:	f7f5 fe76 	bl	8000b78 <__aeabi_uldivmod>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b99      	ldr	r3, [pc, #612]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800ae94:	fba3 1302 	umull	r1, r3, r3, r2
 800ae98:	095b      	lsrs	r3, r3, #5
 800ae9a:	2164      	movs	r1, #100	; 0x64
 800ae9c:	fb01 f303 	mul.w	r3, r1, r3
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	3332      	adds	r3, #50	; 0x32
 800aea6:	4a94      	ldr	r2, [pc, #592]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800aea8:	fba2 2303 	umull	r2, r3, r2, r3
 800aeac:	095b      	lsrs	r3, r3, #5
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aeb4:	4498      	add	r8, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	461d      	mov	r5, r3
 800aeba:	f04f 0600 	mov.w	r6, #0
 800aebe:	46a9      	mov	r9, r5
 800aec0:	46b2      	mov	sl, r6
 800aec2:	eb19 0309 	adds.w	r3, r9, r9
 800aec6:	eb4a 040a 	adc.w	r4, sl, sl
 800aeca:	4699      	mov	r9, r3
 800aecc:	46a2      	mov	sl, r4
 800aece:	eb19 0905 	adds.w	r9, r9, r5
 800aed2:	eb4a 0a06 	adc.w	sl, sl, r6
 800aed6:	f04f 0100 	mov.w	r1, #0
 800aeda:	f04f 0200 	mov.w	r2, #0
 800aede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aeea:	4689      	mov	r9, r1
 800aeec:	4692      	mov	sl, r2
 800aeee:	eb19 0005 	adds.w	r0, r9, r5
 800aef2:	eb4a 0106 	adc.w	r1, sl, r6
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	461d      	mov	r5, r3
 800aefc:	f04f 0600 	mov.w	r6, #0
 800af00:	196b      	adds	r3, r5, r5
 800af02:	eb46 0406 	adc.w	r4, r6, r6
 800af06:	461a      	mov	r2, r3
 800af08:	4623      	mov	r3, r4
 800af0a:	f7f5 fe35 	bl	8000b78 <__aeabi_uldivmod>
 800af0e:	4603      	mov	r3, r0
 800af10:	460c      	mov	r4, r1
 800af12:	461a      	mov	r2, r3
 800af14:	4b78      	ldr	r3, [pc, #480]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800af16:	fba3 1302 	umull	r1, r3, r3, r2
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	2164      	movs	r1, #100	; 0x64
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	00db      	lsls	r3, r3, #3
 800af26:	3332      	adds	r3, #50	; 0x32
 800af28:	4a73      	ldr	r2, [pc, #460]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800af2a:	fba2 2303 	umull	r2, r3, r2, r3
 800af2e:	095b      	lsrs	r3, r3, #5
 800af30:	f003 0207 	and.w	r2, r3, #7
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4442      	add	r2, r8
 800af3a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800af3c:	e1b3      	b.n	800b2a6 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a6e      	ldr	r2, [pc, #440]	; (800b0fc <UART_SetConfig+0x5c4>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d005      	beq.n	800af54 <UART_SetConfig+0x41c>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a6c      	ldr	r2, [pc, #432]	; (800b100 <UART_SetConfig+0x5c8>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	f040 80d8 	bne.w	800b104 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800af54:	f7fc fc50 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800af58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	469a      	mov	sl, r3
 800af5e:	f04f 0b00 	mov.w	fp, #0
 800af62:	46d0      	mov	r8, sl
 800af64:	46d9      	mov	r9, fp
 800af66:	eb18 0308 	adds.w	r3, r8, r8
 800af6a:	eb49 0409 	adc.w	r4, r9, r9
 800af6e:	4698      	mov	r8, r3
 800af70:	46a1      	mov	r9, r4
 800af72:	eb18 080a 	adds.w	r8, r8, sl
 800af76:	eb49 090b 	adc.w	r9, r9, fp
 800af7a:	f04f 0100 	mov.w	r1, #0
 800af7e:	f04f 0200 	mov.w	r2, #0
 800af82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800af86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800af8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800af8e:	4688      	mov	r8, r1
 800af90:	4691      	mov	r9, r2
 800af92:	eb1a 0508 	adds.w	r5, sl, r8
 800af96:	eb4b 0609 	adc.w	r6, fp, r9
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4619      	mov	r1, r3
 800afa0:	f04f 0200 	mov.w	r2, #0
 800afa4:	f04f 0300 	mov.w	r3, #0
 800afa8:	f04f 0400 	mov.w	r4, #0
 800afac:	0094      	lsls	r4, r2, #2
 800afae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800afb2:	008b      	lsls	r3, r1, #2
 800afb4:	461a      	mov	r2, r3
 800afb6:	4623      	mov	r3, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	4631      	mov	r1, r6
 800afbc:	f7f5 fddc 	bl	8000b78 <__aeabi_uldivmod>
 800afc0:	4603      	mov	r3, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	461a      	mov	r2, r3
 800afc6:	4b4c      	ldr	r3, [pc, #304]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800afc8:	fba3 2302 	umull	r2, r3, r3, r2
 800afcc:	095b      	lsrs	r3, r3, #5
 800afce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	469b      	mov	fp, r3
 800afd6:	f04f 0c00 	mov.w	ip, #0
 800afda:	46d9      	mov	r9, fp
 800afdc:	46e2      	mov	sl, ip
 800afde:	eb19 0309 	adds.w	r3, r9, r9
 800afe2:	eb4a 040a 	adc.w	r4, sl, sl
 800afe6:	4699      	mov	r9, r3
 800afe8:	46a2      	mov	sl, r4
 800afea:	eb19 090b 	adds.w	r9, r9, fp
 800afee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aff2:	f04f 0100 	mov.w	r1, #0
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800affe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b006:	4689      	mov	r9, r1
 800b008:	4692      	mov	sl, r2
 800b00a:	eb1b 0509 	adds.w	r5, fp, r9
 800b00e:	eb4c 060a 	adc.w	r6, ip, sl
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	4619      	mov	r1, r3
 800b018:	f04f 0200 	mov.w	r2, #0
 800b01c:	f04f 0300 	mov.w	r3, #0
 800b020:	f04f 0400 	mov.w	r4, #0
 800b024:	0094      	lsls	r4, r2, #2
 800b026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b02a:	008b      	lsls	r3, r1, #2
 800b02c:	461a      	mov	r2, r3
 800b02e:	4623      	mov	r3, r4
 800b030:	4628      	mov	r0, r5
 800b032:	4631      	mov	r1, r6
 800b034:	f7f5 fda0 	bl	8000b78 <__aeabi_uldivmod>
 800b038:	4603      	mov	r3, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b2e      	ldr	r3, [pc, #184]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800b040:	fba3 1302 	umull	r1, r3, r3, r2
 800b044:	095b      	lsrs	r3, r3, #5
 800b046:	2164      	movs	r1, #100	; 0x64
 800b048:	fb01 f303 	mul.w	r3, r1, r3
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	3332      	adds	r3, #50	; 0x32
 800b052:	4a29      	ldr	r2, [pc, #164]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800b054:	fba2 2303 	umull	r2, r3, r2, r3
 800b058:	095b      	lsrs	r3, r3, #5
 800b05a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b05e:	4498      	add	r8, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	469b      	mov	fp, r3
 800b064:	f04f 0c00 	mov.w	ip, #0
 800b068:	46d9      	mov	r9, fp
 800b06a:	46e2      	mov	sl, ip
 800b06c:	eb19 0309 	adds.w	r3, r9, r9
 800b070:	eb4a 040a 	adc.w	r4, sl, sl
 800b074:	4699      	mov	r9, r3
 800b076:	46a2      	mov	sl, r4
 800b078:	eb19 090b 	adds.w	r9, r9, fp
 800b07c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b08c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b094:	4689      	mov	r9, r1
 800b096:	4692      	mov	sl, r2
 800b098:	eb1b 0509 	adds.w	r5, fp, r9
 800b09c:	eb4c 060a 	adc.w	r6, ip, sl
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	f04f 0400 	mov.w	r4, #0
 800b0b2:	0094      	lsls	r4, r2, #2
 800b0b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b0b8:	008b      	lsls	r3, r1, #2
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4623      	mov	r3, r4
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	f7f5 fd59 	bl	8000b78 <__aeabi_uldivmod>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800b0ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	2164      	movs	r1, #100	; 0x64
 800b0d6:	fb01 f303 	mul.w	r3, r1, r3
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	3332      	adds	r3, #50	; 0x32
 800b0e0:	4a05      	ldr	r2, [pc, #20]	; (800b0f8 <UART_SetConfig+0x5c0>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	f003 020f 	and.w	r2, r3, #15
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4442      	add	r2, r8
 800b0f2:	609a      	str	r2, [r3, #8]
 800b0f4:	e0d7      	b.n	800b2a6 <UART_SetConfig+0x76e>
 800b0f6:	bf00      	nop
 800b0f8:	51eb851f 	.word	0x51eb851f
 800b0fc:	40011000 	.word	0x40011000
 800b100:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800b104:	f7fc fb64 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800b108:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	469a      	mov	sl, r3
 800b10e:	f04f 0b00 	mov.w	fp, #0
 800b112:	46d0      	mov	r8, sl
 800b114:	46d9      	mov	r9, fp
 800b116:	eb18 0308 	adds.w	r3, r8, r8
 800b11a:	eb49 0409 	adc.w	r4, r9, r9
 800b11e:	4698      	mov	r8, r3
 800b120:	46a1      	mov	r9, r4
 800b122:	eb18 080a 	adds.w	r8, r8, sl
 800b126:	eb49 090b 	adc.w	r9, r9, fp
 800b12a:	f04f 0100 	mov.w	r1, #0
 800b12e:	f04f 0200 	mov.w	r2, #0
 800b132:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b136:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b13a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b13e:	4688      	mov	r8, r1
 800b140:	4691      	mov	r9, r2
 800b142:	eb1a 0508 	adds.w	r5, sl, r8
 800b146:	eb4b 0609 	adc.w	r6, fp, r9
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4619      	mov	r1, r3
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	f04f 0400 	mov.w	r4, #0
 800b15c:	0094      	lsls	r4, r2, #2
 800b15e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b162:	008b      	lsls	r3, r1, #2
 800b164:	461a      	mov	r2, r3
 800b166:	4623      	mov	r3, r4
 800b168:	4628      	mov	r0, r5
 800b16a:	4631      	mov	r1, r6
 800b16c:	f7f5 fd04 	bl	8000b78 <__aeabi_uldivmod>
 800b170:	4603      	mov	r3, r0
 800b172:	460c      	mov	r4, r1
 800b174:	461a      	mov	r2, r3
 800b176:	4b4e      	ldr	r3, [pc, #312]	; (800b2b0 <UART_SetConfig+0x778>)
 800b178:	fba3 2302 	umull	r2, r3, r3, r2
 800b17c:	095b      	lsrs	r3, r3, #5
 800b17e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	469b      	mov	fp, r3
 800b186:	f04f 0c00 	mov.w	ip, #0
 800b18a:	46d9      	mov	r9, fp
 800b18c:	46e2      	mov	sl, ip
 800b18e:	eb19 0309 	adds.w	r3, r9, r9
 800b192:	eb4a 040a 	adc.w	r4, sl, sl
 800b196:	4699      	mov	r9, r3
 800b198:	46a2      	mov	sl, r4
 800b19a:	eb19 090b 	adds.w	r9, r9, fp
 800b19e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b1a2:	f04f 0100 	mov.w	r1, #0
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	4692      	mov	sl, r2
 800b1ba:	eb1b 0509 	adds.w	r5, fp, r9
 800b1be:	eb4c 060a 	adc.w	r6, ip, sl
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	f04f 0400 	mov.w	r4, #0
 800b1d4:	0094      	lsls	r4, r2, #2
 800b1d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b1da:	008b      	lsls	r3, r1, #2
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4623      	mov	r3, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	f7f5 fcc8 	bl	8000b78 <__aeabi_uldivmod>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b30      	ldr	r3, [pc, #192]	; (800b2b0 <UART_SetConfig+0x778>)
 800b1f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b1f4:	095b      	lsrs	r3, r3, #5
 800b1f6:	2164      	movs	r1, #100	; 0x64
 800b1f8:	fb01 f303 	mul.w	r3, r1, r3
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	011b      	lsls	r3, r3, #4
 800b200:	3332      	adds	r3, #50	; 0x32
 800b202:	4a2b      	ldr	r2, [pc, #172]	; (800b2b0 <UART_SetConfig+0x778>)
 800b204:	fba2 2303 	umull	r2, r3, r2, r3
 800b208:	095b      	lsrs	r3, r3, #5
 800b20a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b20e:	4498      	add	r8, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	469b      	mov	fp, r3
 800b214:	f04f 0c00 	mov.w	ip, #0
 800b218:	46d9      	mov	r9, fp
 800b21a:	46e2      	mov	sl, ip
 800b21c:	eb19 0309 	adds.w	r3, r9, r9
 800b220:	eb4a 040a 	adc.w	r4, sl, sl
 800b224:	4699      	mov	r9, r3
 800b226:	46a2      	mov	sl, r4
 800b228:	eb19 090b 	adds.w	r9, r9, fp
 800b22c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b230:	f04f 0100 	mov.w	r1, #0
 800b234:	f04f 0200 	mov.w	r2, #0
 800b238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b23c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b244:	4689      	mov	r9, r1
 800b246:	4692      	mov	sl, r2
 800b248:	eb1b 0509 	adds.w	r5, fp, r9
 800b24c:	eb4c 060a 	adc.w	r6, ip, sl
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	4619      	mov	r1, r3
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	f04f 0400 	mov.w	r4, #0
 800b262:	0094      	lsls	r4, r2, #2
 800b264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b268:	008b      	lsls	r3, r1, #2
 800b26a:	461a      	mov	r2, r3
 800b26c:	4623      	mov	r3, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	4631      	mov	r1, r6
 800b272:	f7f5 fc81 	bl	8000b78 <__aeabi_uldivmod>
 800b276:	4603      	mov	r3, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	461a      	mov	r2, r3
 800b27c:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <UART_SetConfig+0x778>)
 800b27e:	fba3 1302 	umull	r1, r3, r3, r2
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	2164      	movs	r1, #100	; 0x64
 800b286:	fb01 f303 	mul.w	r3, r1, r3
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	3332      	adds	r3, #50	; 0x32
 800b290:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <UART_SetConfig+0x778>)
 800b292:	fba2 2303 	umull	r2, r3, r2, r3
 800b296:	095b      	lsrs	r3, r3, #5
 800b298:	f003 020f 	and.w	r2, r3, #15
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4442      	add	r2, r8
 800b2a2:	609a      	str	r2, [r3, #8]
}
 800b2a4:	e7ff      	b.n	800b2a6 <UART_SetConfig+0x76e>
 800b2a6:	bf00      	nop
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b0:	51eb851f 	.word	0x51eb851f

0800b2b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2c6:	2b84      	cmp	r3, #132	; 0x84
 800b2c8:	d005      	beq.n	800b2d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	3303      	adds	r3, #3
 800b2d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2e8:	f001 f85e 	bl	800c3a8 <vTaskStartScheduler>
  
  return osOK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f4:	b087      	sub	sp, #28
 800b2f6:	af02      	add	r7, sp, #8
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685c      	ldr	r4, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b308:	b29e      	uxth	r6, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff ffcf 	bl	800b2b4 <makeFreeRtosPriority>
 800b316:	4602      	mov	r2, r0
 800b318:	f107 030c 	add.w	r3, r7, #12
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	9200      	str	r2, [sp, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	4632      	mov	r2, r6
 800b324:	4629      	mov	r1, r5
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fecc 	bl	800c0c4 <xTaskCreate>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d001      	beq.n	800b336 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	e000      	b.n	800b338 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800b336:	68fb      	ldr	r3, [r7, #12]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b340 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <osDelay+0x16>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	e000      	b.n	800b358 <osDelay+0x18>
 800b356:	2301      	movs	r3, #1
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fff1 	bl	800c340 <vTaskDelay>
  
  return osOK;
 800b35e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f103 0208 	add.w	r2, r3, #8
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295
 800b380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f103 0208 	add.w	r2, r3, #8
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f103 0208 	add.w	r2, r3, #8
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b085      	sub	sp, #20
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	689a      	ldr	r2, [r3, #8]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	601a      	str	r2, [r3, #0]
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d103      	bne.n	800b42a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	e00c      	b.n	800b444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3308      	adds	r3, #8
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e002      	b.n	800b438 <vListInsert+0x2e>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	429a      	cmp	r2, r3
 800b442:	d2f6      	bcs.n	800b432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]
}
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6892      	ldr	r2, [r2, #8]
 800b492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	6852      	ldr	r2, [r2, #4]
 800b49c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d103      	bne.n	800b4b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	1e5a      	subs	r2, r3, #1
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d109      	bne.n	800b4f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	e7fe      	b.n	800b4f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b4f8:	f001 fe90 	bl	800d21c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b504:	68f9      	ldr	r1, [r7, #12]
 800b506:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b508:	fb01 f303 	mul.w	r3, r1, r3
 800b50c:	441a      	add	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b528:	3b01      	subs	r3, #1
 800b52a:	68f9      	ldr	r1, [r7, #12]
 800b52c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b52e:	fb01 f303 	mul.w	r3, r1, r3
 800b532:	441a      	add	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	22ff      	movs	r2, #255	; 0xff
 800b53c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	22ff      	movs	r2, #255	; 0xff
 800b544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d114      	bne.n	800b578 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d01a      	beq.n	800b58c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3310      	adds	r3, #16
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 f95a 	bl	800c814 <xTaskRemoveFromEventList>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d012      	beq.n	800b58c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <xQueueGenericReset+0xcc>)
 800b568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	e009      	b.n	800b58c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3310      	adds	r3, #16
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fef3 	bl	800b368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3324      	adds	r3, #36	; 0x24
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff feee 	bl	800b368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b58c:	f001 fe74 	bl	800d278 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b590:	2301      	movs	r3, #1
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	e000ed04 	.word	0xe000ed04

0800b5a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	; 0x28
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d109      	bne.n	800b5c8 <xQueueGenericCreate+0x28>
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	e7fe      	b.n	800b5c6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61fb      	str	r3, [r7, #28]
 800b5d2:	e004      	b.n	800b5de <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	fb02 f303 	mul.w	r3, r2, r3
 800b5dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	3350      	adds	r3, #80	; 0x50
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 ff34 	bl	800d450 <pvPortMalloc>
 800b5e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00d      	beq.n	800b60c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	3350      	adds	r3, #80	; 0x50
 800b5f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5fa:	79fa      	ldrb	r2, [r7, #7]
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	4613      	mov	r3, r2
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 f805 	bl	800b616 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b60c:	69bb      	ldr	r3, [r7, #24]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3720      	adds	r7, #32
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d103      	bne.n	800b632 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	e002      	b.n	800b638 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b644:	2101      	movs	r1, #1
 800b646:	69b8      	ldr	r0, [r7, #24]
 800b648:	f7ff ff42 	bl	800b4d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	78fa      	ldrb	r2, [r7, #3]
 800b650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00e      	beq.n	800b688 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f884 	bl	800b790 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b69a:	2301      	movs	r3, #1
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	6939      	ldr	r1, [r7, #16]
 800b6a8:	6978      	ldr	r0, [r7, #20]
 800b6aa:	f7ff ff79 	bl	800b5a0 <xQueueGenericCreate>
 800b6ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff ffd3 	bl	800b65c <prvInitialiseMutex>

		return xNewQueue;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b6c0:	b590      	push	{r4, r7, lr}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <xQueueGiveMutexRecursive+0x26>
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	e7fe      	b.n	800b6e4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	689c      	ldr	r4, [r3, #8]
 800b6ea:	f001 fa2b 	bl	800cb44 <xTaskGetCurrentTaskHandle>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d111      	bne.n	800b718 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b706:	2300      	movs	r3, #0
 800b708:	2200      	movs	r2, #0
 800b70a:	2100      	movs	r1, #0
 800b70c:	6938      	ldr	r0, [r7, #16]
 800b70e:	f000 f83f 	bl	800b790 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b712:	2301      	movs	r3, #1
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e001      	b.n	800b71c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b718:	2300      	movs	r3, #0
 800b71a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b71c:	697b      	ldr	r3, [r7, #20]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	371c      	adds	r7, #28
 800b722:	46bd      	mov	sp, r7
 800b724:	bd90      	pop	{r4, r7, pc}

0800b726 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b726:	b590      	push	{r4, r7, lr}
 800b728:	b087      	sub	sp, #28
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <xQueueTakeMutexRecursive+0x28>
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	e7fe      	b.n	800b74c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	689c      	ldr	r4, [r3, #8]
 800b752:	f001 f9f7 	bl	800cb44 <xTaskGetCurrentTaskHandle>
 800b756:	4603      	mov	r3, r0
 800b758:	429c      	cmp	r4, r3
 800b75a:	d107      	bne.n	800b76c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b766:	2301      	movs	r3, #1
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e00c      	b.n	800b786 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6938      	ldr	r0, [r7, #16]
 800b770:	f000 fa78 	bl	800bc64 <xQueueSemaphoreTake>
 800b774:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d004      	beq.n	800b786 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b786:	697b      	ldr	r3, [r7, #20]
	}
 800b788:	4618      	mov	r0, r3
 800b78a:	371c      	adds	r7, #28
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd90      	pop	{r4, r7, pc}

0800b790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08e      	sub	sp, #56	; 0x38
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d109      	bne.n	800b7c0 <xQueueGenericSend+0x30>
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7be:	e7fe      	b.n	800b7be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d103      	bne.n	800b7ce <xQueueGenericSend+0x3e>
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericSend+0x42>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericSend+0x44>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d109      	bne.n	800b7ec <xQueueGenericSend+0x5c>
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ea:	e7fe      	b.n	800b7ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d103      	bne.n	800b7fa <xQueueGenericSend+0x6a>
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d101      	bne.n	800b7fe <xQueueGenericSend+0x6e>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <xQueueGenericSend+0x70>
 800b7fe:	2300      	movs	r3, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d109      	bne.n	800b818 <xQueueGenericSend+0x88>
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	623b      	str	r3, [r7, #32]
 800b816:	e7fe      	b.n	800b816 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b818:	f001 f9a4 	bl	800cb64 <xTaskGetSchedulerState>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d102      	bne.n	800b828 <xQueueGenericSend+0x98>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <xQueueGenericSend+0x9c>
 800b828:	2301      	movs	r3, #1
 800b82a:	e000      	b.n	800b82e <xQueueGenericSend+0x9e>
 800b82c:	2300      	movs	r3, #0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d109      	bne.n	800b846 <xQueueGenericSend+0xb6>
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e7fe      	b.n	800b844 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b846:	f001 fce9 	bl	800d21c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b852:	429a      	cmp	r2, r3
 800b854:	d302      	bcc.n	800b85c <xQueueGenericSend+0xcc>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d129      	bne.n	800b8b0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b862:	f000 fb1f 	bl	800bea4 <prvCopyDataToQueue>
 800b866:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d010      	beq.n	800b892 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	3324      	adds	r3, #36	; 0x24
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ffcd 	bl	800c814 <xTaskRemoveFromEventList>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d013      	beq.n	800b8a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b880:	4b3f      	ldr	r3, [pc, #252]	; (800b980 <xQueueGenericSend+0x1f0>)
 800b882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	e00a      	b.n	800b8a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d007      	beq.n	800b8a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b898:	4b39      	ldr	r3, [pc, #228]	; (800b980 <xQueueGenericSend+0x1f0>)
 800b89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8a8:	f001 fce6 	bl	800d278 <vPortExitCritical>
				return pdPASS;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e063      	b.n	800b978 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d103      	bne.n	800b8be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8b6:	f001 fcdf 	bl	800d278 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e05c      	b.n	800b978 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f001 f805 	bl	800c8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8d2:	f001 fcd1 	bl	800d278 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8d6:	f000 fdad 	bl	800c434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8da:	f001 fc9f 	bl	800d21c <vPortEnterCritical>
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8e4:	b25b      	sxtb	r3, r3
 800b8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ea:	d103      	bne.n	800b8f4 <xQueueGenericSend+0x164>
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b900:	d103      	bne.n	800b90a <xQueueGenericSend+0x17a>
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b90a:	f001 fcb5 	bl	800d278 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b90e:	1d3a      	adds	r2, r7, #4
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fff4 	bl	800c904 <xTaskCheckForTimeOut>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d124      	bne.n	800b96c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b924:	f000 fbb6 	bl	800c094 <prvIsQueueFull>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d018      	beq.n	800b960 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	3310      	adds	r3, #16
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4611      	mov	r1, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff48 	bl	800c7cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b93e:	f000 fb41 	bl	800bfc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b942:	f000 fd85 	bl	800c450 <xTaskResumeAll>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f47f af7c 	bne.w	800b846 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b94e:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <xQueueGenericSend+0x1f0>)
 800b950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	e772      	b.n	800b846 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b962:	f000 fb2f 	bl	800bfc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b966:	f000 fd73 	bl	800c450 <xTaskResumeAll>
 800b96a:	e76c      	b.n	800b846 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b96e:	f000 fb29 	bl	800bfc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b972:	f000 fd6d 	bl	800c450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3738      	adds	r7, #56	; 0x38
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	e000ed04 	.word	0xe000ed04

0800b984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08e      	sub	sp, #56	; 0x38
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d109      	bne.n	800b9b0 <xQueueGenericSendFromISR+0x2c>
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ae:	e7fe      	b.n	800b9ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <xQueueGenericSendFromISR+0x3a>
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <xQueueGenericSendFromISR+0x3e>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <xQueueGenericSendFromISR+0x40>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d109      	bne.n	800b9dc <xQueueGenericSendFromISR+0x58>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	623b      	str	r3, [r7, #32]
 800b9da:	e7fe      	b.n	800b9da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d103      	bne.n	800b9ea <xQueueGenericSendFromISR+0x66>
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <xQueueGenericSendFromISR+0x6a>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <xQueueGenericSendFromISR+0x6c>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <xQueueGenericSendFromISR+0x84>
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	e7fe      	b.n	800ba06 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba08:	f001 fce4 	bl	800d3d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba0c:	f3ef 8211 	mrs	r2, BASEPRI
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	61ba      	str	r2, [r7, #24]
 800ba22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d302      	bcc.n	800ba3a <xQueueGenericSendFromISR+0xb6>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d12c      	bne.n	800ba94 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba4a:	f000 fa2b 	bl	800bea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ba52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba56:	d112      	bne.n	800ba7e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d016      	beq.n	800ba8e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	3324      	adds	r3, #36	; 0x24
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fed5 	bl	800c814 <xTaskRemoveFromEventList>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00e      	beq.n	800ba8e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	e007      	b.n	800ba8e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	b25a      	sxtb	r2, r3
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ba92:	e001      	b.n	800ba98 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	637b      	str	r3, [r7, #52]	; 0x34
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3738      	adds	r7, #56	; 0x38
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08c      	sub	sp, #48	; 0x30
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <xQueueReceive+0x2e>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	623b      	str	r3, [r7, #32]
 800bad8:	e7fe      	b.n	800bad8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <xQueueReceive+0x3c>
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <xQueueReceive+0x40>
 800bae8:	2301      	movs	r3, #1
 800baea:	e000      	b.n	800baee <xQueueReceive+0x42>
 800baec:	2300      	movs	r3, #0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d109      	bne.n	800bb06 <xQueueReceive+0x5a>
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	e7fe      	b.n	800bb04 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb06:	f001 f82d 	bl	800cb64 <xTaskGetSchedulerState>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <xQueueReceive+0x6a>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueReceive+0x6e>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueReceive+0x70>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <xQueueReceive+0x88>
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61bb      	str	r3, [r7, #24]
 800bb32:	e7fe      	b.n	800bb32 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb34:	f001 fb72 	bl	800d21c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d01f      	beq.n	800bb84 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb48:	f000 fa16 	bl	800bf78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	1e5a      	subs	r2, r3, #1
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00f      	beq.n	800bb7c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	3310      	adds	r3, #16
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fe57 	bl	800c814 <xTaskRemoveFromEventList>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d007      	beq.n	800bb7c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb6c:	4b3c      	ldr	r3, [pc, #240]	; (800bc60 <xQueueReceive+0x1b4>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb7c:	f001 fb7c 	bl	800d278 <vPortExitCritical>
				return pdPASS;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e069      	b.n	800bc58 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb8a:	f001 fb75 	bl	800d278 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e062      	b.n	800bc58 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d106      	bne.n	800bba6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 fe9b 	bl	800c8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bba2:	2301      	movs	r3, #1
 800bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bba6:	f001 fb67 	bl	800d278 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbaa:	f000 fc43 	bl	800c434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbae:	f001 fb35 	bl	800d21c <vPortEnterCritical>
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbb8:	b25b      	sxtb	r3, r3
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbe:	d103      	bne.n	800bbc8 <xQueueReceive+0x11c>
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbce:	b25b      	sxtb	r3, r3
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd4:	d103      	bne.n	800bbde <xQueueReceive+0x132>
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbde:	f001 fb4b 	bl	800d278 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbe2:	1d3a      	adds	r2, r7, #4
 800bbe4:	f107 0310 	add.w	r3, r7, #16
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fe8a 	bl	800c904 <xTaskCheckForTimeOut>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d123      	bne.n	800bc3e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf8:	f000 fa36 	bl	800c068 <prvIsQueueEmpty>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d017      	beq.n	800bc32 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	3324      	adds	r3, #36	; 0x24
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fdde 	bl	800c7cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc12:	f000 f9d7 	bl	800bfc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc16:	f000 fc1b 	bl	800c450 <xTaskResumeAll>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d189      	bne.n	800bb34 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bc20:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <xQueueReceive+0x1b4>)
 800bc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	e780      	b.n	800bb34 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc34:	f000 f9c6 	bl	800bfc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc38:	f000 fc0a 	bl	800c450 <xTaskResumeAll>
 800bc3c:	e77a      	b.n	800bb34 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc40:	f000 f9c0 	bl	800bfc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc44:	f000 fc04 	bl	800c450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc4a:	f000 fa0d 	bl	800c068 <prvIsQueueEmpty>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f43f af6f 	beq.w	800bb34 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3730      	adds	r7, #48	; 0x30
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b08e      	sub	sp, #56	; 0x38
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bc76:	2300      	movs	r3, #0
 800bc78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <xQueueSemaphoreTake+0x30>
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	623b      	str	r3, [r7, #32]
 800bc92:	e7fe      	b.n	800bc92 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <xQueueSemaphoreTake+0x4c>
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	e7fe      	b.n	800bcae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcb0:	f000 ff58 	bl	800cb64 <xTaskGetSchedulerState>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <xQueueSemaphoreTake+0x5c>
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <xQueueSemaphoreTake+0x60>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e000      	b.n	800bcc6 <xQueueSemaphoreTake+0x62>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <xQueueSemaphoreTake+0x7a>
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	61bb      	str	r3, [r7, #24]
 800bcdc:	e7fe      	b.n	800bcdc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcde:	f001 fa9d 	bl	800d21c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d024      	beq.n	800bd38 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d104      	bne.n	800bd08 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bcfe:	f001 f8eb 	bl	800ced8 <pvTaskIncrementMutexHeldCount>
 800bd02:	4602      	mov	r2, r0
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00f      	beq.n	800bd30 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	3310      	adds	r3, #16
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fd7d 	bl	800c814 <xTaskRemoveFromEventList>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd20:	4b53      	ldr	r3, [pc, #332]	; (800be70 <xQueueSemaphoreTake+0x20c>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd30:	f001 faa2 	bl	800d278 <vPortExitCritical>
				return pdPASS;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e096      	b.n	800be66 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d110      	bne.n	800bd60 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d009      	beq.n	800bd58 <xQueueSemaphoreTake+0xf4>
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	e7fe      	b.n	800bd56 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bd58:	f001 fa8e 	bl	800d278 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e082      	b.n	800be66 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fdb4 	bl	800c8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd74:	f001 fa80 	bl	800d278 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd78:	f000 fb5c 	bl	800c434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd7c:	f001 fa4e 	bl	800d21c <vPortEnterCritical>
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd86:	b25b      	sxtb	r3, r3
 800bd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8c:	d103      	bne.n	800bd96 <xQueueSemaphoreTake+0x132>
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd9c:	b25b      	sxtb	r3, r3
 800bd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda2:	d103      	bne.n	800bdac <xQueueSemaphoreTake+0x148>
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	2200      	movs	r2, #0
 800bda8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdac:	f001 fa64 	bl	800d278 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdb0:	463a      	mov	r2, r7
 800bdb2:	f107 030c 	add.w	r3, r7, #12
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 fda3 	bl	800c904 <xTaskCheckForTimeOut>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d132      	bne.n	800be2a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdc6:	f000 f94f 	bl	800c068 <prvIsQueueEmpty>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d026      	beq.n	800be1e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d109      	bne.n	800bdec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800bdd8:	f001 fa20 	bl	800d21c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fedd 	bl	800cba0 <xTaskPriorityInherit>
 800bde6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bde8:	f001 fa46 	bl	800d278 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	3324      	adds	r3, #36	; 0x24
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 fce9 	bl	800c7cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdfc:	f000 f8e2 	bl	800bfc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be00:	f000 fb26 	bl	800c450 <xTaskResumeAll>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	f47f af69 	bne.w	800bcde <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800be0c:	4b18      	ldr	r3, [pc, #96]	; (800be70 <xQueueSemaphoreTake+0x20c>)
 800be0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	e75f      	b.n	800bcde <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be20:	f000 f8d0 	bl	800bfc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be24:	f000 fb14 	bl	800c450 <xTaskResumeAll>
 800be28:	e759      	b.n	800bcde <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be2c:	f000 f8ca 	bl	800bfc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be30:	f000 fb0e 	bl	800c450 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be36:	f000 f917 	bl	800c068 <prvIsQueueEmpty>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f43f af4e 	beq.w	800bcde <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00d      	beq.n	800be64 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800be48:	f001 f9e8 	bl	800d21c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be4e:	f000 f811 	bl	800be74 <prvGetDisinheritPriorityAfterTimeout>
 800be52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 ffa4 	bl	800cda8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800be60:	f001 fa0a 	bl	800d278 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be66:	4618      	mov	r0, r3
 800be68:	3738      	adds	r7, #56	; 0x38
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d006      	beq.n	800be92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f1c3 0307 	rsb	r3, r3, #7
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e001      	b.n	800be96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be92:	2300      	movs	r3, #0
 800be94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be96:	68fb      	ldr	r3, [r7, #12]
	}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10d      	bne.n	800bede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d14d      	bne.n	800bf66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fee6 	bl	800cca0 <xTaskPriorityDisinherit>
 800bed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	609a      	str	r2, [r3, #8]
 800bedc:	e043      	b.n	800bf66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d119      	bne.n	800bf18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6858      	ldr	r0, [r3, #4]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beec:	461a      	mov	r2, r3
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	f004 f8d2 	bl	8010098 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befc:	441a      	add	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d32b      	bcc.n	800bf66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	605a      	str	r2, [r3, #4]
 800bf16:	e026      	b.n	800bf66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	68d8      	ldr	r0, [r3, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf20:	461a      	mov	r2, r3
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	f004 f8b8 	bl	8010098 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf30:	425b      	negs	r3, r3
 800bf32:	441a      	add	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d207      	bcs.n	800bf54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	425b      	negs	r3, r3
 800bf4e:	441a      	add	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d105      	bne.n	800bf66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf6e:	697b      	ldr	r3, [r7, #20]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d018      	beq.n	800bfbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf92:	441a      	add	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d303      	bcc.n	800bfac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68d9      	ldr	r1, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6838      	ldr	r0, [r7, #0]
 800bfb8:	f004 f86e 	bl	8010098 <memcpy>
	}
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfcc:	f001 f926 	bl	800d21c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfd8:	e011      	b.n	800bffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d012      	beq.n	800c008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3324      	adds	r3, #36	; 0x24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fc14 	bl	800c814 <xTaskRemoveFromEventList>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bff2:	f000 fce7 	bl	800c9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dce9      	bgt.n	800bfda <prvUnlockQueue+0x16>
 800c006:	e000      	b.n	800c00a <prvUnlockQueue+0x46>
					break;
 800c008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	22ff      	movs	r2, #255	; 0xff
 800c00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c012:	f001 f931 	bl	800d278 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c016:	f001 f901 	bl	800d21c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c022:	e011      	b.n	800c048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d012      	beq.n	800c052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3310      	adds	r3, #16
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fbef 	bl	800c814 <xTaskRemoveFromEventList>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c03c:	f000 fcc2 	bl	800c9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	3b01      	subs	r3, #1
 800c044:	b2db      	uxtb	r3, r3
 800c046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dce9      	bgt.n	800c024 <prvUnlockQueue+0x60>
 800c050:	e000      	b.n	800c054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	22ff      	movs	r2, #255	; 0xff
 800c058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c05c:	f001 f90c 	bl	800d278 <vPortExitCritical>
}
 800c060:	bf00      	nop
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c070:	f001 f8d4 	bl	800d21c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c07c:	2301      	movs	r3, #1
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	e001      	b.n	800c086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c086:	f001 f8f7 	bl	800d278 <vPortExitCritical>

	return xReturn;
 800c08a:	68fb      	ldr	r3, [r7, #12]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c09c:	f001 f8be 	bl	800d21c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d102      	bne.n	800c0b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	e001      	b.n	800c0b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0b6:	f001 f8df 	bl	800d278 <vPortExitCritical>

	return xReturn;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08c      	sub	sp, #48	; 0x30
 800c0c8:	af04      	add	r7, sp, #16
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 f9b9 	bl	800d450 <pvPortMalloc>
 800c0de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00e      	beq.n	800c104 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0e6:	205c      	movs	r0, #92	; 0x5c
 800c0e8:	f001 f9b2 	bl	800d450 <pvPortMalloc>
 800c0ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
 800c0fa:	e005      	b.n	800c108 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	f001 fa69 	bl	800d5d4 <vPortFree>
 800c102:	e001      	b.n	800c108 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d013      	beq.n	800c136 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c10e:	88fa      	ldrh	r2, [r7, #6]
 800c110:	2300      	movs	r3, #0
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f80e 	bl	800c146 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c12a:	69f8      	ldr	r0, [r7, #28]
 800c12c:	f000 f89a 	bl	800c264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c130:	2301      	movs	r3, #1
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	e002      	b.n	800c13c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
 800c13a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c13c:	69bb      	ldr	r3, [r7, #24]
	}
 800c13e:	4618      	mov	r0, r3
 800c140:	3720      	adds	r7, #32
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b088      	sub	sp, #32
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	607a      	str	r2, [r7, #4]
 800c152:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	461a      	mov	r2, r3
 800c15e:	21a5      	movs	r1, #165	; 0xa5
 800c160:	f003 ffa5 	bl	80100ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c16e:	3b01      	subs	r3, #1
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f023 0307 	bic.w	r3, r3, #7
 800c17c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	f003 0307 	and.w	r3, r3, #7
 800c184:	2b00      	cmp	r3, #0
 800c186:	d009      	beq.n	800c19c <prvInitialiseNewTask+0x56>
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	617b      	str	r3, [r7, #20]
 800c19a:	e7fe      	b.n	800c19a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01f      	beq.n	800c1e2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	e012      	b.n	800c1ce <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	7819      	ldrb	r1, [r3, #0]
 800c1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	3334      	adds	r3, #52	; 0x34
 800c1b8:	460a      	mov	r2, r1
 800c1ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	61fb      	str	r3, [r7, #28]
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	d9e9      	bls.n	800c1a8 <prvInitialiseNewTask+0x62>
 800c1d4:	e000      	b.n	800c1d8 <prvInitialiseNewTask+0x92>
			{
				break;
 800c1d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1e0:	e003      	b.n	800c1ea <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	2b06      	cmp	r3, #6
 800c1ee:	d901      	bls.n	800c1f4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1f0:	2306      	movs	r3, #6
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	2200      	movs	r2, #0
 800c204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	3304      	adds	r3, #4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff f8cc 	bl	800b3a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	3318      	adds	r3, #24
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff f8c7 	bl	800b3a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	f1c3 0207 	rsb	r2, r3, #7
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2200      	movs	r2, #0
 800c234:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	68f9      	ldr	r1, [r7, #12]
 800c242:	69b8      	ldr	r0, [r7, #24]
 800c244:	f000 fec2 	bl	800cfcc <pxPortInitialiseStack>
 800c248:	4602      	mov	r2, r0
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c25a:	bf00      	nop
 800c25c:	3720      	adds	r7, #32
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c26c:	f000 ffd6 	bl	800d21c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c270:	4b2c      	ldr	r3, [pc, #176]	; (800c324 <prvAddNewTaskToReadyList+0xc0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	3301      	adds	r3, #1
 800c276:	4a2b      	ldr	r2, [pc, #172]	; (800c324 <prvAddNewTaskToReadyList+0xc0>)
 800c278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c27a:	4b2b      	ldr	r3, [pc, #172]	; (800c328 <prvAddNewTaskToReadyList+0xc4>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d109      	bne.n	800c296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c282:	4a29      	ldr	r2, [pc, #164]	; (800c328 <prvAddNewTaskToReadyList+0xc4>)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c288:	4b26      	ldr	r3, [pc, #152]	; (800c324 <prvAddNewTaskToReadyList+0xc0>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d110      	bne.n	800c2b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c290:	f000 fbbc 	bl	800ca0c <prvInitialiseTaskLists>
 800c294:	e00d      	b.n	800c2b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c296:	4b25      	ldr	r3, [pc, #148]	; (800c32c <prvAddNewTaskToReadyList+0xc8>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c29e:	4b22      	ldr	r3, [pc, #136]	; (800c328 <prvAddNewTaskToReadyList+0xc4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d802      	bhi.n	800c2b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2ac:	4a1e      	ldr	r2, [pc, #120]	; (800c328 <prvAddNewTaskToReadyList+0xc4>)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2b2:	4b1f      	ldr	r3, [pc, #124]	; (800c330 <prvAddNewTaskToReadyList+0xcc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	4a1d      	ldr	r2, [pc, #116]	; (800c330 <prvAddNewTaskToReadyList+0xcc>)
 800c2ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2bc:	4b1c      	ldr	r3, [pc, #112]	; (800c330 <prvAddNewTaskToReadyList+0xcc>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	409a      	lsls	r2, r3
 800c2cc:	4b19      	ldr	r3, [pc, #100]	; (800c334 <prvAddNewTaskToReadyList+0xd0>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	4a18      	ldr	r2, [pc, #96]	; (800c334 <prvAddNewTaskToReadyList+0xd0>)
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <prvAddNewTaskToReadyList+0xd4>)
 800c2e4:	441a      	add	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	f7ff f868 	bl	800b3c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2f2:	f000 ffc1 	bl	800d278 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2f6:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <prvAddNewTaskToReadyList+0xc8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00e      	beq.n	800c31c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2fe:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <prvAddNewTaskToReadyList+0xc4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	429a      	cmp	r2, r3
 800c30a:	d207      	bcs.n	800c31c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c30c:	4b0b      	ldr	r3, [pc, #44]	; (800c33c <prvAddNewTaskToReadyList+0xd8>)
 800c30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20000484 	.word	0x20000484
 800c328:	20000384 	.word	0x20000384
 800c32c:	20000490 	.word	0x20000490
 800c330:	200004a0 	.word	0x200004a0
 800c334:	2000048c 	.word	0x2000048c
 800c338:	20000388 	.word	0x20000388
 800c33c:	e000ed04 	.word	0xe000ed04

0800c340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c348:	2300      	movs	r3, #0
 800c34a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d016      	beq.n	800c380 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c352:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <vTaskDelay+0x60>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d009      	beq.n	800c36e <vTaskDelay+0x2e>
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	60bb      	str	r3, [r7, #8]
 800c36c:	e7fe      	b.n	800c36c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c36e:	f000 f861 	bl	800c434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c372:	2100      	movs	r1, #0
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fdc3 	bl	800cf00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c37a:	f000 f869 	bl	800c450 <xTaskResumeAll>
 800c37e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c386:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <vTaskDelay+0x64>)
 800c388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c396:	bf00      	nop
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	200004ac 	.word	0x200004ac
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c3ae:	4b1b      	ldr	r3, [pc, #108]	; (800c41c <vTaskStartScheduler+0x74>)
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	2280      	movs	r2, #128	; 0x80
 800c3ba:	4919      	ldr	r1, [pc, #100]	; (800c420 <vTaskStartScheduler+0x78>)
 800c3bc:	4819      	ldr	r0, [pc, #100]	; (800c424 <vTaskStartScheduler+0x7c>)
 800c3be:	f7ff fe81 	bl	800c0c4 <xTaskCreate>
 800c3c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d115      	bne.n	800c3f6 <vTaskStartScheduler+0x4e>
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3dc:	4b12      	ldr	r3, [pc, #72]	; (800c428 <vTaskStartScheduler+0x80>)
 800c3de:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3e4:	4b11      	ldr	r3, [pc, #68]	; (800c42c <vTaskStartScheduler+0x84>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3ea:	4b11      	ldr	r3, [pc, #68]	; (800c430 <vTaskStartScheduler+0x88>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3f0:	f000 fe76 	bl	800d0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3f4:	e00d      	b.n	800c412 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fc:	d109      	bne.n	800c412 <vTaskStartScheduler+0x6a>
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
 800c410:	e7fe      	b.n	800c410 <vTaskStartScheduler+0x68>
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	200004a8 	.word	0x200004a8
 800c420:	08011690 	.word	0x08011690
 800c424:	0800c9dd 	.word	0x0800c9dd
 800c428:	200004a4 	.word	0x200004a4
 800c42c:	20000490 	.word	0x20000490
 800c430:	20000488 	.word	0x20000488

0800c434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c438:	4b04      	ldr	r3, [pc, #16]	; (800c44c <vTaskSuspendAll+0x18>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	4a03      	ldr	r2, [pc, #12]	; (800c44c <vTaskSuspendAll+0x18>)
 800c440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c442:	bf00      	nop
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	200004ac 	.word	0x200004ac

0800c450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c456:	2300      	movs	r3, #0
 800c458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c45e:	4b41      	ldr	r3, [pc, #260]	; (800c564 <xTaskResumeAll+0x114>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <xTaskResumeAll+0x2a>
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	e7fe      	b.n	800c478 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c47a:	f000 fecf 	bl	800d21c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c47e:	4b39      	ldr	r3, [pc, #228]	; (800c564 <xTaskResumeAll+0x114>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3b01      	subs	r3, #1
 800c484:	4a37      	ldr	r2, [pc, #220]	; (800c564 <xTaskResumeAll+0x114>)
 800c486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c488:	4b36      	ldr	r3, [pc, #216]	; (800c564 <xTaskResumeAll+0x114>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d161      	bne.n	800c554 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c490:	4b35      	ldr	r3, [pc, #212]	; (800c568 <xTaskResumeAll+0x118>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d05d      	beq.n	800c554 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c498:	e02e      	b.n	800c4f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c49a:	4b34      	ldr	r3, [pc, #208]	; (800c56c <xTaskResumeAll+0x11c>)
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3318      	adds	r3, #24
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe ffe8 	bl	800b47c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe ffe3 	bl	800b47c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	409a      	lsls	r2, r3
 800c4be:	4b2c      	ldr	r3, [pc, #176]	; (800c570 <xTaskResumeAll+0x120>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	4a2a      	ldr	r2, [pc, #168]	; (800c570 <xTaskResumeAll+0x120>)
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4a27      	ldr	r2, [pc, #156]	; (800c574 <xTaskResumeAll+0x124>)
 800c4d6:	441a      	add	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fe ff6f 	bl	800b3c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	4b23      	ldr	r3, [pc, #140]	; (800c578 <xTaskResumeAll+0x128>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d302      	bcc.n	800c4f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c4f2:	4b22      	ldr	r3, [pc, #136]	; (800c57c <xTaskResumeAll+0x12c>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4f8:	4b1c      	ldr	r3, [pc, #112]	; (800c56c <xTaskResumeAll+0x11c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1cc      	bne.n	800c49a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c506:	f000 fafd 	bl	800cb04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c50a:	4b1d      	ldr	r3, [pc, #116]	; (800c580 <xTaskResumeAll+0x130>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d010      	beq.n	800c538 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c516:	f000 f837 	bl	800c588 <xTaskIncrementTick>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c520:	4b16      	ldr	r3, [pc, #88]	; (800c57c <xTaskResumeAll+0x12c>)
 800c522:	2201      	movs	r2, #1
 800c524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3b01      	subs	r3, #1
 800c52a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f1      	bne.n	800c516 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c532:	4b13      	ldr	r3, [pc, #76]	; (800c580 <xTaskResumeAll+0x130>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c538:	4b10      	ldr	r3, [pc, #64]	; (800c57c <xTaskResumeAll+0x12c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c540:	2301      	movs	r3, #1
 800c542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <xTaskResumeAll+0x134>)
 800c546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c554:	f000 fe90 	bl	800d278 <vPortExitCritical>

	return xAlreadyYielded;
 800c558:	68bb      	ldr	r3, [r7, #8]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	200004ac 	.word	0x200004ac
 800c568:	20000484 	.word	0x20000484
 800c56c:	20000444 	.word	0x20000444
 800c570:	2000048c 	.word	0x2000048c
 800c574:	20000388 	.word	0x20000388
 800c578:	20000384 	.word	0x20000384
 800c57c:	20000498 	.word	0x20000498
 800c580:	20000494 	.word	0x20000494
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c592:	4b4e      	ldr	r3, [pc, #312]	; (800c6cc <xTaskIncrementTick+0x144>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 8087 	bne.w	800c6aa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c59c:	4b4c      	ldr	r3, [pc, #304]	; (800c6d0 <xTaskIncrementTick+0x148>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5a4:	4a4a      	ldr	r2, [pc, #296]	; (800c6d0 <xTaskIncrementTick+0x148>)
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11f      	bne.n	800c5f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5b0:	4b48      	ldr	r3, [pc, #288]	; (800c6d4 <xTaskIncrementTick+0x14c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d009      	beq.n	800c5ce <xTaskIncrementTick+0x46>
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	603b      	str	r3, [r7, #0]
 800c5cc:	e7fe      	b.n	800c5cc <xTaskIncrementTick+0x44>
 800c5ce:	4b41      	ldr	r3, [pc, #260]	; (800c6d4 <xTaskIncrementTick+0x14c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	4b40      	ldr	r3, [pc, #256]	; (800c6d8 <xTaskIncrementTick+0x150>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a3e      	ldr	r2, [pc, #248]	; (800c6d4 <xTaskIncrementTick+0x14c>)
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	4a3e      	ldr	r2, [pc, #248]	; (800c6d8 <xTaskIncrementTick+0x150>)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	4b3e      	ldr	r3, [pc, #248]	; (800c6dc <xTaskIncrementTick+0x154>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	4a3c      	ldr	r2, [pc, #240]	; (800c6dc <xTaskIncrementTick+0x154>)
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	f000 fa8a 	bl	800cb04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5f0:	4b3b      	ldr	r3, [pc, #236]	; (800c6e0 <xTaskIncrementTick+0x158>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d348      	bcc.n	800c68c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5fa:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <xTaskIncrementTick+0x14c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c604:	4b36      	ldr	r3, [pc, #216]	; (800c6e0 <xTaskIncrementTick+0x158>)
 800c606:	f04f 32ff 	mov.w	r2, #4294967295
 800c60a:	601a      	str	r2, [r3, #0]
					break;
 800c60c:	e03e      	b.n	800c68c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60e:	4b31      	ldr	r3, [pc, #196]	; (800c6d4 <xTaskIncrementTick+0x14c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	429a      	cmp	r2, r3
 800c624:	d203      	bcs.n	800c62e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c626:	4a2e      	ldr	r2, [pc, #184]	; (800c6e0 <xTaskIncrementTick+0x158>)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c62c:	e02e      	b.n	800c68c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	3304      	adds	r3, #4
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe ff22 	bl	800b47c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	3318      	adds	r3, #24
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe ff19 	bl	800b47c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64e:	2201      	movs	r2, #1
 800c650:	409a      	lsls	r2, r3
 800c652:	4b24      	ldr	r3, [pc, #144]	; (800c6e4 <xTaskIncrementTick+0x15c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4313      	orrs	r3, r2
 800c658:	4a22      	ldr	r2, [pc, #136]	; (800c6e4 <xTaskIncrementTick+0x15c>)
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4a1f      	ldr	r2, [pc, #124]	; (800c6e8 <xTaskIncrementTick+0x160>)
 800c66a:	441a      	add	r2, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	3304      	adds	r3, #4
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7fe fea5 	bl	800b3c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ec <xTaskIncrementTick+0x164>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c682:	429a      	cmp	r2, r3
 800c684:	d3b9      	bcc.n	800c5fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c686:	2301      	movs	r3, #1
 800c688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c68a:	e7b6      	b.n	800c5fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c68c:	4b17      	ldr	r3, [pc, #92]	; (800c6ec <xTaskIncrementTick+0x164>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c692:	4915      	ldr	r1, [pc, #84]	; (800c6e8 <xTaskIncrementTick+0x160>)
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d907      	bls.n	800c6b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e004      	b.n	800c6b4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c6aa:	4b11      	ldr	r3, [pc, #68]	; (800c6f0 <xTaskIncrementTick+0x168>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	4a0f      	ldr	r2, [pc, #60]	; (800c6f0 <xTaskIncrementTick+0x168>)
 800c6b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c6b4:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <xTaskIncrementTick+0x16c>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c6c0:	697b      	ldr	r3, [r7, #20]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	200004ac 	.word	0x200004ac
 800c6d0:	20000488 	.word	0x20000488
 800c6d4:	2000043c 	.word	0x2000043c
 800c6d8:	20000440 	.word	0x20000440
 800c6dc:	2000049c 	.word	0x2000049c
 800c6e0:	200004a4 	.word	0x200004a4
 800c6e4:	2000048c 	.word	0x2000048c
 800c6e8:	20000388 	.word	0x20000388
 800c6ec:	20000384 	.word	0x20000384
 800c6f0:	20000494 	.word	0x20000494
 800c6f4:	20000498 	.word	0x20000498

0800c6f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6fe:	4b2e      	ldr	r3, [pc, #184]	; (800c7b8 <vTaskSwitchContext+0xc0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c706:	4b2d      	ldr	r3, [pc, #180]	; (800c7bc <vTaskSwitchContext+0xc4>)
 800c708:	2201      	movs	r2, #1
 800c70a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c70c:	e04f      	b.n	800c7ae <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800c70e:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <vTaskSwitchContext+0xc4>)
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c714:	4b2a      	ldr	r3, [pc, #168]	; (800c7c0 <vTaskSwitchContext+0xc8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <vTaskSwitchContext+0xc8>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c720:	429a      	cmp	r2, r3
 800c722:	d808      	bhi.n	800c736 <vTaskSwitchContext+0x3e>
 800c724:	4b26      	ldr	r3, [pc, #152]	; (800c7c0 <vTaskSwitchContext+0xc8>)
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	4b25      	ldr	r3, [pc, #148]	; (800c7c0 <vTaskSwitchContext+0xc8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3334      	adds	r3, #52	; 0x34
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f002 f8d3 	bl	800e8dc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c736:	4b23      	ldr	r3, [pc, #140]	; (800c7c4 <vTaskSwitchContext+0xcc>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	fab3 f383 	clz	r3, r3
 800c742:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c744:	7afb      	ldrb	r3, [r7, #11]
 800c746:	f1c3 031f 	rsb	r3, r3, #31
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	491e      	ldr	r1, [pc, #120]	; (800c7c8 <vTaskSwitchContext+0xd0>)
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	4613      	mov	r3, r2
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	440b      	add	r3, r1
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d109      	bne.n	800c774 <vTaskSwitchContext+0x7c>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	607b      	str	r3, [r7, #4]
 800c772:	e7fe      	b.n	800c772 <vTaskSwitchContext+0x7a>
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4a12      	ldr	r2, [pc, #72]	; (800c7c8 <vTaskSwitchContext+0xd0>)
 800c780:	4413      	add	r3, r2
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	685a      	ldr	r2, [r3, #4]
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	3308      	adds	r3, #8
 800c796:	429a      	cmp	r2, r3
 800c798:	d104      	bne.n	800c7a4 <vTaskSwitchContext+0xac>
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	685a      	ldr	r2, [r3, #4]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	605a      	str	r2, [r3, #4]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	4a05      	ldr	r2, [pc, #20]	; (800c7c0 <vTaskSwitchContext+0xc8>)
 800c7ac:	6013      	str	r3, [r2, #0]
}
 800c7ae:	bf00      	nop
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	200004ac 	.word	0x200004ac
 800c7bc:	20000498 	.word	0x20000498
 800c7c0:	20000384 	.word	0x20000384
 800c7c4:	2000048c 	.word	0x2000048c
 800c7c8:	20000388 	.word	0x20000388

0800c7cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d109      	bne.n	800c7f0 <vTaskPlaceOnEventList+0x24>
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	e7fe      	b.n	800c7ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <vTaskPlaceOnEventList+0x44>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3318      	adds	r3, #24
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7fe fe06 	bl	800b40a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7fe:	2101      	movs	r1, #1
 800c800:	6838      	ldr	r0, [r7, #0]
 800c802:	f000 fb7d 	bl	800cf00 <prvAddCurrentTaskToDelayedList>
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20000384 	.word	0x20000384

0800c814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <xTaskRemoveFromEventList+0x2a>
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e7fe      	b.n	800c83c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	3318      	adds	r3, #24
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe fe1a 	bl	800b47c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c848:	4b1d      	ldr	r3, [pc, #116]	; (800c8c0 <xTaskRemoveFromEventList+0xac>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d11c      	bne.n	800c88a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	3304      	adds	r3, #4
 800c854:	4618      	mov	r0, r3
 800c856:	f7fe fe11 	bl	800b47c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	2201      	movs	r2, #1
 800c860:	409a      	lsls	r2, r3
 800c862:	4b18      	ldr	r3, [pc, #96]	; (800c8c4 <xTaskRemoveFromEventList+0xb0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4313      	orrs	r3, r2
 800c868:	4a16      	ldr	r2, [pc, #88]	; (800c8c4 <xTaskRemoveFromEventList+0xb0>)
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c870:	4613      	mov	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4a13      	ldr	r2, [pc, #76]	; (800c8c8 <xTaskRemoveFromEventList+0xb4>)
 800c87a:	441a      	add	r2, r3
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	4610      	mov	r0, r2
 800c884:	f7fe fd9d 	bl	800b3c2 <vListInsertEnd>
 800c888:	e005      	b.n	800c896 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	3318      	adds	r3, #24
 800c88e:	4619      	mov	r1, r3
 800c890:	480e      	ldr	r0, [pc, #56]	; (800c8cc <xTaskRemoveFromEventList+0xb8>)
 800c892:	f7fe fd96 	bl	800b3c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89a:	4b0d      	ldr	r3, [pc, #52]	; (800c8d0 <xTaskRemoveFromEventList+0xbc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d905      	bls.n	800c8b0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8a8:	4b0a      	ldr	r3, [pc, #40]	; (800c8d4 <xTaskRemoveFromEventList+0xc0>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	e001      	b.n	800c8b4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8b4:	697b      	ldr	r3, [r7, #20]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200004ac 	.word	0x200004ac
 800c8c4:	2000048c 	.word	0x2000048c
 800c8c8:	20000388 	.word	0x20000388
 800c8cc:	20000444 	.word	0x20000444
 800c8d0:	20000384 	.word	0x20000384
 800c8d4:	20000498 	.word	0x20000498

0800c8d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8e0:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <vTaskInternalSetTimeOutState+0x24>)
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8e8:	4b05      	ldr	r3, [pc, #20]	; (800c900 <vTaskInternalSetTimeOutState+0x28>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	605a      	str	r2, [r3, #4]
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	2000049c 	.word	0x2000049c
 800c900:	20000488 	.word	0x20000488

0800c904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <xTaskCheckForTimeOut+0x24>
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	e7fe      	b.n	800c926 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d109      	bne.n	800c942 <xTaskCheckForTimeOut+0x3e>
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e7fe      	b.n	800c940 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c942:	f000 fc6b 	bl	800d21c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c946:	4b1d      	ldr	r3, [pc, #116]	; (800c9bc <xTaskCheckForTimeOut+0xb8>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d102      	bne.n	800c966 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]
 800c964:	e023      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <xTaskCheckForTimeOut+0xbc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d007      	beq.n	800c982 <xTaskCheckForTimeOut+0x7e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d302      	bcc.n	800c982 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c97c:	2301      	movs	r3, #1
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	e015      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d20b      	bcs.n	800c9a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	1ad2      	subs	r2, r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ff9d 	bl	800c8d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	e004      	b.n	800c9ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f000 fc63 	bl	800d278 <vPortExitCritical>

	return xReturn;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20000488 	.word	0x20000488
 800c9c0:	2000049c 	.word	0x2000049c

0800c9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	; (800c9d8 <vTaskMissedYield+0x14>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	20000498 	.word	0x20000498

0800c9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9e4:	f000 f852 	bl	800ca8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9e8:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <prvIdleTask+0x28>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d9f9      	bls.n	800c9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <prvIdleTask+0x2c>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca00:	e7f0      	b.n	800c9e4 <prvIdleTask+0x8>
 800ca02:	bf00      	nop
 800ca04:	20000388 	.word	0x20000388
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca12:	2300      	movs	r3, #0
 800ca14:	607b      	str	r3, [r7, #4]
 800ca16:	e00c      	b.n	800ca32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4a12      	ldr	r2, [pc, #72]	; (800ca6c <prvInitialiseTaskLists+0x60>)
 800ca24:	4413      	add	r3, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fc9e 	bl	800b368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b06      	cmp	r3, #6
 800ca36:	d9ef      	bls.n	800ca18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca38:	480d      	ldr	r0, [pc, #52]	; (800ca70 <prvInitialiseTaskLists+0x64>)
 800ca3a:	f7fe fc95 	bl	800b368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca3e:	480d      	ldr	r0, [pc, #52]	; (800ca74 <prvInitialiseTaskLists+0x68>)
 800ca40:	f7fe fc92 	bl	800b368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca44:	480c      	ldr	r0, [pc, #48]	; (800ca78 <prvInitialiseTaskLists+0x6c>)
 800ca46:	f7fe fc8f 	bl	800b368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca4a:	480c      	ldr	r0, [pc, #48]	; (800ca7c <prvInitialiseTaskLists+0x70>)
 800ca4c:	f7fe fc8c 	bl	800b368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca50:	480b      	ldr	r0, [pc, #44]	; (800ca80 <prvInitialiseTaskLists+0x74>)
 800ca52:	f7fe fc89 	bl	800b368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <prvInitialiseTaskLists+0x78>)
 800ca58:	4a05      	ldr	r2, [pc, #20]	; (800ca70 <prvInitialiseTaskLists+0x64>)
 800ca5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <prvInitialiseTaskLists+0x7c>)
 800ca5e:	4a05      	ldr	r2, [pc, #20]	; (800ca74 <prvInitialiseTaskLists+0x68>)
 800ca60:	601a      	str	r2, [r3, #0]
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20000388 	.word	0x20000388
 800ca70:	20000414 	.word	0x20000414
 800ca74:	20000428 	.word	0x20000428
 800ca78:	20000444 	.word	0x20000444
 800ca7c:	20000458 	.word	0x20000458
 800ca80:	20000470 	.word	0x20000470
 800ca84:	2000043c 	.word	0x2000043c
 800ca88:	20000440 	.word	0x20000440

0800ca8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca92:	e019      	b.n	800cac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca94:	f000 fbc2 	bl	800d21c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca98:	4b0f      	ldr	r3, [pc, #60]	; (800cad8 <prvCheckTasksWaitingTermination+0x4c>)
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3304      	adds	r3, #4
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fce9 	bl	800b47c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caaa:	4b0c      	ldr	r3, [pc, #48]	; (800cadc <prvCheckTasksWaitingTermination+0x50>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <prvCheckTasksWaitingTermination+0x50>)
 800cab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cab4:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3b01      	subs	r3, #1
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800cabc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cabe:	f000 fbdb 	bl	800d278 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f80e 	bl	800cae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac8:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <prvCheckTasksWaitingTermination+0x54>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1e1      	bne.n	800ca94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000458 	.word	0x20000458
 800cadc:	20000484 	.word	0x20000484
 800cae0:	2000046c 	.word	0x2000046c

0800cae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 fd6f 	bl	800d5d4 <vPortFree>
			vPortFree( pxTCB );
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fd6c 	bl	800d5d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb0a:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <prvResetNextTaskUnblockTime+0x38>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d104      	bne.n	800cb1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb14:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <prvResetNextTaskUnblockTime+0x3c>)
 800cb16:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb1c:	e008      	b.n	800cb30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb1e:	4b07      	ldr	r3, [pc, #28]	; (800cb3c <prvResetNextTaskUnblockTime+0x38>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	4a04      	ldr	r2, [pc, #16]	; (800cb40 <prvResetNextTaskUnblockTime+0x3c>)
 800cb2e:	6013      	str	r3, [r2, #0]
}
 800cb30:	bf00      	nop
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr
 800cb3c:	2000043c 	.word	0x2000043c
 800cb40:	200004a4 	.word	0x200004a4

0800cb44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cb4a:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <xTaskGetCurrentTaskHandle+0x1c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cb50:	687b      	ldr	r3, [r7, #4]
	}
 800cb52:	4618      	mov	r0, r3
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20000384 	.word	0x20000384

0800cb64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb6a:	4b0b      	ldr	r3, [pc, #44]	; (800cb98 <xTaskGetSchedulerState+0x34>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb72:	2301      	movs	r3, #1
 800cb74:	607b      	str	r3, [r7, #4]
 800cb76:	e008      	b.n	800cb8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb78:	4b08      	ldr	r3, [pc, #32]	; (800cb9c <xTaskGetSchedulerState+0x38>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d102      	bne.n	800cb86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb80:	2302      	movs	r3, #2
 800cb82:	607b      	str	r3, [r7, #4]
 800cb84:	e001      	b.n	800cb8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb86:	2300      	movs	r3, #0
 800cb88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb8a:	687b      	ldr	r3, [r7, #4]
	}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	20000490 	.word	0x20000490
 800cb9c:	200004ac 	.word	0x200004ac

0800cba0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbac:	2300      	movs	r3, #0
 800cbae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d069      	beq.n	800cc8a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbba:	4b36      	ldr	r3, [pc, #216]	; (800cc94 <xTaskPriorityInherit+0xf4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d259      	bcs.n	800cc78 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	db06      	blt.n	800cbda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbcc:	4b31      	ldr	r3, [pc, #196]	; (800cc94 <xTaskPriorityInherit+0xf4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	f1c3 0207 	rsb	r2, r3, #7
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6959      	ldr	r1, [r3, #20]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4a2b      	ldr	r2, [pc, #172]	; (800cc98 <xTaskPriorityInherit+0xf8>)
 800cbec:	4413      	add	r3, r2
 800cbee:	4299      	cmp	r1, r3
 800cbf0:	d13a      	bne.n	800cc68 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fc40 	bl	800b47c <uxListRemove>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d115      	bne.n	800cc2e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc06:	4924      	ldr	r1, [pc, #144]	; (800cc98 <xTaskPriorityInherit+0xf8>)
 800cc08:	4613      	mov	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	440b      	add	r3, r1
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <xTaskPriorityInherit+0x8e>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc22:	43da      	mvns	r2, r3
 800cc24:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <xTaskPriorityInherit+0xfc>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	4a1c      	ldr	r2, [pc, #112]	; (800cc9c <xTaskPriorityInherit+0xfc>)
 800cc2c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc2e:	4b19      	ldr	r3, [pc, #100]	; (800cc94 <xTaskPriorityInherit+0xf4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	409a      	lsls	r2, r3
 800cc40:	4b16      	ldr	r3, [pc, #88]	; (800cc9c <xTaskPriorityInherit+0xfc>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	4a15      	ldr	r2, [pc, #84]	; (800cc9c <xTaskPriorityInherit+0xfc>)
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4e:	4613      	mov	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4a10      	ldr	r2, [pc, #64]	; (800cc98 <xTaskPriorityInherit+0xf8>)
 800cc58:	441a      	add	r2, r3
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4610      	mov	r0, r2
 800cc62:	f7fe fbae 	bl	800b3c2 <vListInsertEnd>
 800cc66:	e004      	b.n	800cc72 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <xTaskPriorityInherit+0xf4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cc72:	2301      	movs	r3, #1
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	e008      	b.n	800cc8a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <xTaskPriorityInherit+0xf4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d201      	bcs.n	800cc8a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cc86:	2301      	movs	r3, #1
 800cc88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
	}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	20000384 	.word	0x20000384
 800cc98:	20000388 	.word	0x20000388
 800cc9c:	2000048c 	.word	0x2000048c

0800cca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d06c      	beq.n	800cd90 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ccb6:	4b39      	ldr	r3, [pc, #228]	; (800cd9c <xTaskPriorityDisinherit+0xfc>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d009      	beq.n	800ccd4 <xTaskPriorityDisinherit+0x34>
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	e7fe      	b.n	800ccd2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <xTaskPriorityDisinherit+0x50>
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	60bb      	str	r3, [r7, #8]
 800ccee:	e7fe      	b.n	800ccee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf4:	1e5a      	subs	r2, r3, #1
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d044      	beq.n	800cd90 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d140      	bne.n	800cd90 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fbb2 	bl	800b47c <uxListRemove>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d115      	bne.n	800cd4a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	491f      	ldr	r1, [pc, #124]	; (800cda0 <xTaskPriorityDisinherit+0x100>)
 800cd24:	4613      	mov	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	440b      	add	r3, r1
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10a      	bne.n	800cd4a <xTaskPriorityDisinherit+0xaa>
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	2201      	movs	r2, #1
 800cd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd3e:	43da      	mvns	r2, r3
 800cd40:	4b18      	ldr	r3, [pc, #96]	; (800cda4 <xTaskPriorityDisinherit+0x104>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4013      	ands	r3, r2
 800cd46:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <xTaskPriorityDisinherit+0x104>)
 800cd48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd56:	f1c3 0207 	rsb	r2, r3, #7
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	2201      	movs	r2, #1
 800cd64:	409a      	lsls	r2, r3
 800cd66:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <xTaskPriorityDisinherit+0x104>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	4a0d      	ldr	r2, [pc, #52]	; (800cda4 <xTaskPriorityDisinherit+0x104>)
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd74:	4613      	mov	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4a08      	ldr	r2, [pc, #32]	; (800cda0 <xTaskPriorityDisinherit+0x100>)
 800cd7e:	441a      	add	r2, r3
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	3304      	adds	r3, #4
 800cd84:	4619      	mov	r1, r3
 800cd86:	4610      	mov	r0, r2
 800cd88:	f7fe fb1b 	bl	800b3c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd90:	697b      	ldr	r3, [r7, #20]
	}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20000384 	.word	0x20000384
 800cda0:	20000388 	.word	0x20000388
 800cda4:	2000048c 	.word	0x2000048c

0800cda8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b088      	sub	sp, #32
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 8081 	beq.w	800cec4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d109      	bne.n	800cdde <vTaskPriorityDisinheritAfterTimeout+0x36>
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	60fb      	str	r3, [r7, #12]
 800cddc:	e7fe      	b.n	800cddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d902      	bls.n	800cdee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	61fb      	str	r3, [r7, #28]
 800cdec:	e002      	b.n	800cdf4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d062      	beq.n	800cec4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d15d      	bne.n	800cec4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce08:	4b30      	ldr	r3, [pc, #192]	; (800cecc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d109      	bne.n	800ce26 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	60bb      	str	r3, [r7, #8]
 800ce24:	e7fe      	b.n	800ce24 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	db04      	blt.n	800ce44 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	f1c3 0207 	rsb	r2, r3, #7
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	6959      	ldr	r1, [r3, #20]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ce54:	4413      	add	r3, r2
 800ce56:	4299      	cmp	r1, r3
 800ce58:	d134      	bne.n	800cec4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe fb0c 	bl	800b47c <uxListRemove>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d115      	bne.n	800ce96 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce6e:	4918      	ldr	r1, [pc, #96]	; (800ced0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	440b      	add	r3, r1
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10a      	bne.n	800ce96 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce84:	2201      	movs	r2, #1
 800ce86:	fa02 f303 	lsl.w	r3, r2, r3
 800ce8a:	43da      	mvns	r2, r3
 800ce8c:	4b11      	ldr	r3, [pc, #68]	; (800ced4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4013      	ands	r3, r2
 800ce92:	4a10      	ldr	r2, [pc, #64]	; (800ced4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ce94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	409a      	lsls	r2, r3
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	; (800ced4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	4a0b      	ldr	r2, [pc, #44]	; (800ced4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4a06      	ldr	r2, [pc, #24]	; (800ced0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ceb6:	441a      	add	r2, r3
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4619      	mov	r1, r3
 800cebe:	4610      	mov	r0, r2
 800cec0:	f7fe fa7f 	bl	800b3c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cec4:	bf00      	nop
 800cec6:	3720      	adds	r7, #32
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	20000384 	.word	0x20000384
 800ced0:	20000388 	.word	0x20000388
 800ced4:	2000048c 	.word	0x2000048c

0800ced8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <pvTaskIncrementMutexHeldCount+0x24>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d004      	beq.n	800ceee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cee4:	4b05      	ldr	r3, [pc, #20]	; (800cefc <pvTaskIncrementMutexHeldCount+0x24>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceea:	3201      	adds	r2, #1
 800ceec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ceee:	4b03      	ldr	r3, [pc, #12]	; (800cefc <pvTaskIncrementMutexHeldCount+0x24>)
 800cef0:	681b      	ldr	r3, [r3, #0]
	}
 800cef2:	4618      	mov	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	20000384 	.word	0x20000384

0800cf00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf0a:	4b29      	ldr	r3, [pc, #164]	; (800cfb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	3304      	adds	r3, #4
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe fab0 	bl	800b47c <uxListRemove>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10b      	bne.n	800cf3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf22:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	2201      	movs	r2, #1
 800cf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2e:	43da      	mvns	r2, r3
 800cf30:	4b21      	ldr	r3, [pc, #132]	; (800cfb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4013      	ands	r3, r2
 800cf36:	4a20      	ldr	r2, [pc, #128]	; (800cfb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf40:	d10a      	bne.n	800cf58 <prvAddCurrentTaskToDelayedList+0x58>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d007      	beq.n	800cf58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf48:	4b1a      	ldr	r3, [pc, #104]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	4619      	mov	r1, r3
 800cf50:	481a      	ldr	r0, [pc, #104]	; (800cfbc <prvAddCurrentTaskToDelayedList+0xbc>)
 800cf52:	f7fe fa36 	bl	800b3c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf56:	e026      	b.n	800cfa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf60:	4b14      	ldr	r3, [pc, #80]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d209      	bcs.n	800cf84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf70:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f7fe fa44 	bl	800b40a <vListInsert>
}
 800cf82:	e010      	b.n	800cfa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf84:	4b0f      	ldr	r3, [pc, #60]	; (800cfc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4610      	mov	r0, r2
 800cf92:	f7fe fa3a 	bl	800b40a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf96:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d202      	bcs.n	800cfa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cfa0:	4a09      	ldr	r2, [pc, #36]	; (800cfc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	6013      	str	r3, [r2, #0]
}
 800cfa6:	bf00      	nop
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	20000488 	.word	0x20000488
 800cfb4:	20000384 	.word	0x20000384
 800cfb8:	2000048c 	.word	0x2000048c
 800cfbc:	20000470 	.word	0x20000470
 800cfc0:	20000440 	.word	0x20000440
 800cfc4:	2000043c 	.word	0x2000043c
 800cfc8:	200004a4 	.word	0x200004a4

0800cfcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3b04      	subs	r3, #4
 800cfdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cfe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3b04      	subs	r3, #4
 800cfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	f023 0201 	bic.w	r2, r3, #1
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3b04      	subs	r3, #4
 800cffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cffc:	4a0c      	ldr	r2, [pc, #48]	; (800d030 <pxPortInitialiseStack+0x64>)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3b14      	subs	r3, #20
 800d006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3b04      	subs	r3, #4
 800d012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f06f 0202 	mvn.w	r2, #2
 800d01a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3b20      	subs	r3, #32
 800d020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d022:	68fb      	ldr	r3, [r7, #12]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	0800d035 	.word	0x0800d035

0800d034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d03e:	4b11      	ldr	r3, [pc, #68]	; (800d084 <prvTaskExitError+0x50>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d046:	d009      	beq.n	800d05c <prvTaskExitError+0x28>
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	60fb      	str	r3, [r7, #12]
 800d05a:	e7fe      	b.n	800d05a <prvTaskExitError+0x26>
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d06e:	bf00      	nop
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0fc      	beq.n	800d070 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d076:	bf00      	nop
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	2000003c 	.word	0x2000003c
	...

0800d090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <pxCurrentTCBConst2>)
 800d092:	6819      	ldr	r1, [r3, #0]
 800d094:	6808      	ldr	r0, [r1, #0]
 800d096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09a:	f380 8809 	msr	PSP, r0
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f04f 0000 	mov.w	r0, #0
 800d0a6:	f380 8811 	msr	BASEPRI, r0
 800d0aa:	4770      	bx	lr
 800d0ac:	f3af 8000 	nop.w

0800d0b0 <pxCurrentTCBConst2>:
 800d0b0:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop

0800d0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0b8:	4808      	ldr	r0, [pc, #32]	; (800d0dc <prvPortStartFirstTask+0x24>)
 800d0ba:	6800      	ldr	r0, [r0, #0]
 800d0bc:	6800      	ldr	r0, [r0, #0]
 800d0be:	f380 8808 	msr	MSP, r0
 800d0c2:	f04f 0000 	mov.w	r0, #0
 800d0c6:	f380 8814 	msr	CONTROL, r0
 800d0ca:	b662      	cpsie	i
 800d0cc:	b661      	cpsie	f
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	df00      	svc	0
 800d0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0da:	bf00      	nop
 800d0dc:	e000ed08 	.word	0xe000ed08

0800d0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0e6:	4b44      	ldr	r3, [pc, #272]	; (800d1f8 <xPortStartScheduler+0x118>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a44      	ldr	r2, [pc, #272]	; (800d1fc <xPortStartScheduler+0x11c>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d109      	bne.n	800d104 <xPortStartScheduler+0x24>
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	613b      	str	r3, [r7, #16]
 800d102:	e7fe      	b.n	800d102 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d104:	4b3c      	ldr	r3, [pc, #240]	; (800d1f8 <xPortStartScheduler+0x118>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a3d      	ldr	r2, [pc, #244]	; (800d200 <xPortStartScheduler+0x120>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d109      	bne.n	800d122 <xPortStartScheduler+0x42>
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e7fe      	b.n	800d120 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d122:	4b38      	ldr	r3, [pc, #224]	; (800d204 <xPortStartScheduler+0x124>)
 800d124:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	22ff      	movs	r2, #255	; 0xff
 800d132:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d13c:	78fb      	ldrb	r3, [r7, #3]
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d144:	b2da      	uxtb	r2, r3
 800d146:	4b30      	ldr	r3, [pc, #192]	; (800d208 <xPortStartScheduler+0x128>)
 800d148:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d14a:	4b30      	ldr	r3, [pc, #192]	; (800d20c <xPortStartScheduler+0x12c>)
 800d14c:	2207      	movs	r2, #7
 800d14e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d150:	e009      	b.n	800d166 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <xPortStartScheduler+0x12c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3b01      	subs	r3, #1
 800d158:	4a2c      	ldr	r2, [pc, #176]	; (800d20c <xPortStartScheduler+0x12c>)
 800d15a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d15c:	78fb      	ldrb	r3, [r7, #3]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	b2db      	uxtb	r3, r3
 800d164:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16e:	2b80      	cmp	r3, #128	; 0x80
 800d170:	d0ef      	beq.n	800d152 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d172:	4b26      	ldr	r3, [pc, #152]	; (800d20c <xPortStartScheduler+0x12c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f1c3 0307 	rsb	r3, r3, #7
 800d17a:	2b04      	cmp	r3, #4
 800d17c:	d009      	beq.n	800d192 <xPortStartScheduler+0xb2>
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	60bb      	str	r3, [r7, #8]
 800d190:	e7fe      	b.n	800d190 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d192:	4b1e      	ldr	r3, [pc, #120]	; (800d20c <xPortStartScheduler+0x12c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	021b      	lsls	r3, r3, #8
 800d198:	4a1c      	ldr	r2, [pc, #112]	; (800d20c <xPortStartScheduler+0x12c>)
 800d19a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d19c:	4b1b      	ldr	r3, [pc, #108]	; (800d20c <xPortStartScheduler+0x12c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1a4:	4a19      	ldr	r2, [pc, #100]	; (800d20c <xPortStartScheduler+0x12c>)
 800d1a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1b0:	4b17      	ldr	r3, [pc, #92]	; (800d210 <xPortStartScheduler+0x130>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a16      	ldr	r2, [pc, #88]	; (800d210 <xPortStartScheduler+0x130>)
 800d1b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1bc:	4b14      	ldr	r3, [pc, #80]	; (800d210 <xPortStartScheduler+0x130>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a13      	ldr	r2, [pc, #76]	; (800d210 <xPortStartScheduler+0x130>)
 800d1c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1c8:	f000 f8d6 	bl	800d378 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <xPortStartScheduler+0x134>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1d2:	f000 f8f5 	bl	800d3c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1d6:	4b10      	ldr	r3, [pc, #64]	; (800d218 <xPortStartScheduler+0x138>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a0f      	ldr	r2, [pc, #60]	; (800d218 <xPortStartScheduler+0x138>)
 800d1dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d1e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1e2:	f7ff ff69 	bl	800d0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d1e6:	f7ff fa87 	bl	800c6f8 <vTaskSwitchContext>
	prvTaskExitError();
 800d1ea:	f7ff ff23 	bl	800d034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	e000ed00 	.word	0xe000ed00
 800d1fc:	410fc271 	.word	0x410fc271
 800d200:	410fc270 	.word	0x410fc270
 800d204:	e000e400 	.word	0xe000e400
 800d208:	200004b0 	.word	0x200004b0
 800d20c:	200004b4 	.word	0x200004b4
 800d210:	e000ed20 	.word	0xe000ed20
 800d214:	2000003c 	.word	0x2000003c
 800d218:	e000ef34 	.word	0xe000ef34

0800d21c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d234:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <vPortEnterCritical+0x54>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	4a0d      	ldr	r2, [pc, #52]	; (800d270 <vPortEnterCritical+0x54>)
 800d23c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <vPortEnterCritical+0x54>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d10e      	bne.n	800d264 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <vPortEnterCritical+0x58>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d009      	beq.n	800d264 <vPortEnterCritical+0x48>
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	603b      	str	r3, [r7, #0]
 800d262:	e7fe      	b.n	800d262 <vPortEnterCritical+0x46>
	}
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	2000003c 	.word	0x2000003c
 800d274:	e000ed04 	.word	0xe000ed04

0800d278 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d27e:	4b11      	ldr	r3, [pc, #68]	; (800d2c4 <vPortExitCritical+0x4c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d109      	bne.n	800d29a <vPortExitCritical+0x22>
 800d286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	607b      	str	r3, [r7, #4]
 800d298:	e7fe      	b.n	800d298 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d29a:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <vPortExitCritical+0x4c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	4a08      	ldr	r2, [pc, #32]	; (800d2c4 <vPortExitCritical+0x4c>)
 800d2a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2a4:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <vPortExitCritical+0x4c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <vPortExitCritical+0x3e>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	2000003c 	.word	0x2000003c
	...

0800d2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2d0:	f3ef 8009 	mrs	r0, PSP
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	4b15      	ldr	r3, [pc, #84]	; (800d330 <pxCurrentTCBConst>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	f01e 0f10 	tst.w	lr, #16
 800d2e0:	bf08      	it	eq
 800d2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ea:	6010      	str	r0, [r2, #0]
 800d2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d2f4:	f380 8811 	msr	BASEPRI, r0
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f7ff f9fa 	bl	800c6f8 <vTaskSwitchContext>
 800d304:	f04f 0000 	mov.w	r0, #0
 800d308:	f380 8811 	msr	BASEPRI, r0
 800d30c:	bc09      	pop	{r0, r3}
 800d30e:	6819      	ldr	r1, [r3, #0]
 800d310:	6808      	ldr	r0, [r1, #0]
 800d312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d316:	f01e 0f10 	tst.w	lr, #16
 800d31a:	bf08      	it	eq
 800d31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d320:	f380 8809 	msr	PSP, r0
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	f3af 8000 	nop.w

0800d330 <pxCurrentTCBConst>:
 800d330:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d334:	bf00      	nop
 800d336:	bf00      	nop

0800d338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d350:	f7ff f91a 	bl	800c588 <xTaskIncrementTick>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d35a:	4b06      	ldr	r3, [pc, #24]	; (800d374 <xPortSysTickHandler+0x3c>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	2300      	movs	r3, #0
 800d364:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	e000ed04 	.word	0xe000ed04

0800d378 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d378:	b480      	push	{r7}
 800d37a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d37c:	4b0b      	ldr	r3, [pc, #44]	; (800d3ac <vPortSetupTimerInterrupt+0x34>)
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d382:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <vPortSetupTimerInterrupt+0x38>)
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d388:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <vPortSetupTimerInterrupt+0x3c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a0a      	ldr	r2, [pc, #40]	; (800d3b8 <vPortSetupTimerInterrupt+0x40>)
 800d38e:	fba2 2303 	umull	r2, r3, r2, r3
 800d392:	099b      	lsrs	r3, r3, #6
 800d394:	4a09      	ldr	r2, [pc, #36]	; (800d3bc <vPortSetupTimerInterrupt+0x44>)
 800d396:	3b01      	subs	r3, #1
 800d398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d39a:	4b04      	ldr	r3, [pc, #16]	; (800d3ac <vPortSetupTimerInterrupt+0x34>)
 800d39c:	2207      	movs	r2, #7
 800d39e:	601a      	str	r2, [r3, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	e000e010 	.word	0xe000e010
 800d3b0:	e000e018 	.word	0xe000e018
 800d3b4:	20000070 	.word	0x20000070
 800d3b8:	10624dd3 	.word	0x10624dd3
 800d3bc:	e000e014 	.word	0xe000e014

0800d3c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d3d0 <vPortEnableVFP+0x10>
 800d3c4:	6801      	ldr	r1, [r0, #0]
 800d3c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d3ca:	6001      	str	r1, [r0, #0]
 800d3cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3ce:	bf00      	nop
 800d3d0:	e000ed88 	.word	0xe000ed88

0800d3d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d3da:	f3ef 8305 	mrs	r3, IPSR
 800d3de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b0f      	cmp	r3, #15
 800d3e4:	d913      	bls.n	800d40e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3e6:	4a16      	ldr	r2, [pc, #88]	; (800d440 <vPortValidateInterruptPriority+0x6c>)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d3f0:	4b14      	ldr	r3, [pc, #80]	; (800d444 <vPortValidateInterruptPriority+0x70>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	7afa      	ldrb	r2, [r7, #11]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d209      	bcs.n	800d40e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	607b      	str	r3, [r7, #4]
 800d40c:	e7fe      	b.n	800d40c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d40e:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <vPortValidateInterruptPriority+0x74>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d416:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <vPortValidateInterruptPriority+0x78>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d909      	bls.n	800d432 <vPortValidateInterruptPriority+0x5e>
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	e7fe      	b.n	800d430 <vPortValidateInterruptPriority+0x5c>
	}
 800d432:	bf00      	nop
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	e000e3f0 	.word	0xe000e3f0
 800d444:	200004b0 	.word	0x200004b0
 800d448:	e000ed0c 	.word	0xe000ed0c
 800d44c:	200004b4 	.word	0x200004b4

0800d450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08a      	sub	sp, #40	; 0x28
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d458:	2300      	movs	r3, #0
 800d45a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d45c:	f7fe ffea 	bl	800c434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d460:	4b57      	ldr	r3, [pc, #348]	; (800d5c0 <pvPortMalloc+0x170>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d468:	f000 f90c 	bl	800d684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d46c:	4b55      	ldr	r3, [pc, #340]	; (800d5c4 <pvPortMalloc+0x174>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4013      	ands	r3, r2
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 808c 	bne.w	800d592 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01c      	beq.n	800d4ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d480:	2208      	movs	r2, #8
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f003 0307 	and.w	r3, r3, #7
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d013      	beq.n	800d4ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f023 0307 	bic.w	r3, r3, #7
 800d498:	3308      	adds	r3, #8
 800d49a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f003 0307 	and.w	r3, r3, #7
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d009      	beq.n	800d4ba <pvPortMalloc+0x6a>
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	617b      	str	r3, [r7, #20]
 800d4b8:	e7fe      	b.n	800d4b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d068      	beq.n	800d592 <pvPortMalloc+0x142>
 800d4c0:	4b41      	ldr	r3, [pc, #260]	; (800d5c8 <pvPortMalloc+0x178>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d863      	bhi.n	800d592 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d4ca:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <pvPortMalloc+0x17c>)
 800d4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d4ce:	4b3f      	ldr	r3, [pc, #252]	; (800d5cc <pvPortMalloc+0x17c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4d4:	e004      	b.n	800d4e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d903      	bls.n	800d4f2 <pvPortMalloc+0xa2>
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f1      	bne.n	800d4d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4f2:	4b33      	ldr	r3, [pc, #204]	; (800d5c0 <pvPortMalloc+0x170>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d04a      	beq.n	800d592 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2208      	movs	r2, #8
 800d502:	4413      	add	r3, r2
 800d504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	1ad2      	subs	r2, r2, r3
 800d516:	2308      	movs	r3, #8
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d91e      	bls.n	800d55c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4413      	add	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	f003 0307 	and.w	r3, r3, #7
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <pvPortMalloc+0xf4>
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	613b      	str	r3, [r7, #16]
 800d542:	e7fe      	b.n	800d542 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	1ad2      	subs	r2, r2, r3
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d556:	69b8      	ldr	r0, [r7, #24]
 800d558:	f000 f8f6 	bl	800d748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d55c:	4b1a      	ldr	r3, [pc, #104]	; (800d5c8 <pvPortMalloc+0x178>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	4a18      	ldr	r2, [pc, #96]	; (800d5c8 <pvPortMalloc+0x178>)
 800d568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d56a:	4b17      	ldr	r3, [pc, #92]	; (800d5c8 <pvPortMalloc+0x178>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b18      	ldr	r3, [pc, #96]	; (800d5d0 <pvPortMalloc+0x180>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d203      	bcs.n	800d57e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d576:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <pvPortMalloc+0x178>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a15      	ldr	r2, [pc, #84]	; (800d5d0 <pvPortMalloc+0x180>)
 800d57c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <pvPortMalloc+0x174>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	431a      	orrs	r2, r3
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d592:	f7fe ff5d 	bl	800c450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d009      	beq.n	800d5b4 <pvPortMalloc+0x164>
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	e7fe      	b.n	800d5b2 <pvPortMalloc+0x162>
	return pvReturn;
 800d5b4:	69fb      	ldr	r3, [r7, #28]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3728      	adds	r7, #40	; 0x28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2000478c 	.word	0x2000478c
 800d5c4:	20004798 	.word	0x20004798
 800d5c8:	20004790 	.word	0x20004790
 800d5cc:	20004784 	.word	0x20004784
 800d5d0:	20004794 	.word	0x20004794

0800d5d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d046      	beq.n	800d674 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	4b20      	ldr	r3, [pc, #128]	; (800d67c <vPortFree+0xa8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d109      	bne.n	800d616 <vPortFree+0x42>
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e7fe      	b.n	800d614 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d009      	beq.n	800d632 <vPortFree+0x5e>
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	60bb      	str	r3, [r7, #8]
 800d630:	e7fe      	b.n	800d630 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	4b11      	ldr	r3, [pc, #68]	; (800d67c <vPortFree+0xa8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4013      	ands	r3, r2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d019      	beq.n	800d674 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d115      	bne.n	800d674 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <vPortFree+0xa8>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	43db      	mvns	r3, r3
 800d652:	401a      	ands	r2, r3
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d658:	f7fe feec 	bl	800c434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	4b07      	ldr	r3, [pc, #28]	; (800d680 <vPortFree+0xac>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4413      	add	r3, r2
 800d666:	4a06      	ldr	r2, [pc, #24]	; (800d680 <vPortFree+0xac>)
 800d668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d66a:	6938      	ldr	r0, [r7, #16]
 800d66c:	f000 f86c 	bl	800d748 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d670:	f7fe feee 	bl	800c450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d674:	bf00      	nop
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20004798 	.word	0x20004798
 800d680:	20004790 	.word	0x20004790

0800d684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d68a:	f244 23cc 	movw	r3, #17100	; 0x42cc
 800d68e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d690:	4b27      	ldr	r3, [pc, #156]	; (800d730 <prvHeapInit+0xac>)
 800d692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f003 0307 	and.w	r3, r3, #7
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00c      	beq.n	800d6b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	3307      	adds	r3, #7
 800d6a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 0307 	bic.w	r3, r3, #7
 800d6aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	4a1f      	ldr	r2, [pc, #124]	; (800d730 <prvHeapInit+0xac>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d6bc:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <prvHeapInit+0xb0>)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d6c2:	4b1c      	ldr	r3, [pc, #112]	; (800d734 <prvHeapInit+0xb0>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6d0:	2208      	movs	r2, #8
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	1a9b      	subs	r3, r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0307 	bic.w	r3, r3, #7
 800d6de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4a15      	ldr	r2, [pc, #84]	; (800d738 <prvHeapInit+0xb4>)
 800d6e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <prvHeapInit+0xb4>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6ee:	4b12      	ldr	r3, [pc, #72]	; (800d738 <prvHeapInit+0xb4>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	1ad2      	subs	r2, r2, r3
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d704:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <prvHeapInit+0xb4>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	4a0a      	ldr	r2, [pc, #40]	; (800d73c <prvHeapInit+0xb8>)
 800d712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	4a09      	ldr	r2, [pc, #36]	; (800d740 <prvHeapInit+0xbc>)
 800d71a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d71c:	4b09      	ldr	r3, [pc, #36]	; (800d744 <prvHeapInit+0xc0>)
 800d71e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d722:	601a      	str	r2, [r3, #0]
}
 800d724:	bf00      	nop
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	200004b8 	.word	0x200004b8
 800d734:	20004784 	.word	0x20004784
 800d738:	2000478c 	.word	0x2000478c
 800d73c:	20004794 	.word	0x20004794
 800d740:	20004790 	.word	0x20004790
 800d744:	20004798 	.word	0x20004798

0800d748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d750:	4b28      	ldr	r3, [pc, #160]	; (800d7f4 <prvInsertBlockIntoFreeList+0xac>)
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	e002      	b.n	800d75c <prvInsertBlockIntoFreeList+0x14>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	429a      	cmp	r2, r3
 800d764:	d8f7      	bhi.n	800d756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	4413      	add	r3, r2
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	429a      	cmp	r2, r3
 800d776:	d108      	bne.n	800d78a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	441a      	add	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	441a      	add	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d118      	bne.n	800d7d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	4b15      	ldr	r3, [pc, #84]	; (800d7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d00d      	beq.n	800d7c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	441a      	add	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	e008      	b.n	800d7d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7c6:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	e003      	b.n	800d7d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d002      	beq.n	800d7e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7e6:	bf00      	nop
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20004784 	.word	0x20004784
 800d7f8:	2000478c 	.word	0x2000478c

0800d7fc <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800d802:	4b20      	ldr	r3, [pc, #128]	; (800d884 <MX_ADC1_Init+0x88>)
 800d804:	4a20      	ldr	r2, [pc, #128]	; (800d888 <MX_ADC1_Init+0x8c>)
 800d806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800d808:	4b1e      	ldr	r3, [pc, #120]	; (800d884 <MX_ADC1_Init+0x88>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADCResolution;
 800d80e:	4b1f      	ldr	r3, [pc, #124]	; (800d88c <MX_ADC1_Init+0x90>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a1c      	ldr	r2, [pc, #112]	; (800d884 <MX_ADC1_Init+0x88>)
 800d814:	6093      	str	r3, [r2, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800d816:	4b1b      	ldr	r3, [pc, #108]	; (800d884 <MX_ADC1_Init+0x88>)
 800d818:	2200      	movs	r2, #0
 800d81a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d81c:	4b19      	ldr	r3, [pc, #100]	; (800d884 <MX_ADC1_Init+0x88>)
 800d81e:	2200      	movs	r2, #0
 800d820:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d822:	4b18      	ldr	r3, [pc, #96]	; (800d884 <MX_ADC1_Init+0x88>)
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800d82a:	4b16      	ldr	r3, [pc, #88]	; (800d884 <MX_ADC1_Init+0x88>)
 800d82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d830:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800d832:	4b14      	ldr	r3, [pc, #80]	; (800d884 <MX_ADC1_Init+0x88>)
 800d834:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800d838:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d83a:	4b12      	ldr	r3, [pc, #72]	; (800d884 <MX_ADC1_Init+0x88>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800d840:	4b10      	ldr	r3, [pc, #64]	; (800d884 <MX_ADC1_Init+0x88>)
 800d842:	2201      	movs	r2, #1
 800d844:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d846:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <MX_ADC1_Init+0x88>)
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 800d84e:	4b0d      	ldr	r3, [pc, #52]	; (800d884 <MX_ADC1_Init+0x88>)
 800d850:	2201      	movs	r2, #1
 800d852:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc1);
 800d854:	480b      	ldr	r0, [pc, #44]	; (800d884 <MX_ADC1_Init+0x88>)
 800d856:	f7f7 f83f 	bl	80048d8 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800d85a:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <MX_ADC1_Init+0x94>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	461a      	mov	r2, r3
 800d860:	4b0c      	ldr	r3, [pc, #48]	; (800d894 <MX_ADC1_Init+0x98>)
 800d862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d868:	2301      	movs	r3, #1
 800d86a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADCSamplingTime;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <MX_ADC1_Init+0x9c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800d872:	463b      	mov	r3, r7
 800d874:	4619      	mov	r1, r3
 800d876:	4803      	ldr	r0, [pc, #12]	; (800d884 <MX_ADC1_Init+0x88>)
 800d878:	f7f7 fc70 	bl	800515c <HAL_ADC_ConfigChannel>

//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
}
 800d87c:	bf00      	nop
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20013d74 	.word	0x20013d74
 800d888:	40012000 	.word	0x40012000
 800d88c:	2000479c 	.word	0x2000479c
 800d890:	200047a8 	.word	0x200047a8
 800d894:	080117c8 	.word	0x080117c8
 800d898:	200047a0 	.word	0x200047a0

0800d89c <MX_ADC2_Init>:

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc2.Instance = ADC2;
 800d8a2:	4b20      	ldr	r3, [pc, #128]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8a4:	4a20      	ldr	r2, [pc, #128]	; (800d928 <MX_ADC2_Init+0x8c>)
 800d8a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800d8a8:	4b1e      	ldr	r3, [pc, #120]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADCResolution;
 800d8ae:	4b1f      	ldr	r3, [pc, #124]	; (800d92c <MX_ADC2_Init+0x90>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a1c      	ldr	r2, [pc, #112]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8b4:	6093      	str	r3, [r2, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800d8b6:	4b1b      	ldr	r3, [pc, #108]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800d8bc:	4b19      	ldr	r3, [pc, #100]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800d8c2:	4b18      	ldr	r3, [pc, #96]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800d8ca:	4b16      	ldr	r3, [pc, #88]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8d4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800d8d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d8da:	4b12      	ldr	r3, [pc, #72]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800d8e0:	4b10      	ldr	r3, [pc, #64]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800d8e6:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = EOC_SINGLE_CONV;
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc2);
 800d8f4:	480b      	ldr	r0, [pc, #44]	; (800d924 <MX_ADC2_Init+0x88>)
 800d8f6:	f7f6 ffef 	bl	80048d8 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[0]];
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	; (800d930 <MX_ADC2_Init+0x94>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	4b0c      	ldr	r3, [pc, #48]	; (800d934 <MX_ADC2_Init+0x98>)
 800d902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d908:	2301      	movs	r3, #1
 800d90a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADCSamplingTime;
 800d90c:	4b0a      	ldr	r3, [pc, #40]	; (800d938 <MX_ADC2_Init+0x9c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800d912:	463b      	mov	r3, r7
 800d914:	4619      	mov	r1, r3
 800d916:	4803      	ldr	r0, [pc, #12]	; (800d924 <MX_ADC2_Init+0x88>)
 800d918:	f7f7 fc20 	bl	800515c <HAL_ADC_ConfigChannel>
//  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
}
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20013ccc 	.word	0x20013ccc
 800d928:	40012100 	.word	0x40012100
 800d92c:	2000479c 	.word	0x2000479c
 800d930:	200047a8 	.word	0x200047a8
 800d934:	080117ec 	.word	0x080117ec
 800d938:	200047a0 	.word	0x200047a0

0800d93c <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc3.Instance = ADC3;
 800d942:	4b20      	ldr	r3, [pc, #128]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d944:	4a20      	ldr	r2, [pc, #128]	; (800d9c8 <MX_ADC3_Init+0x8c>)
 800d946:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800d948:	4b1e      	ldr	r3, [pc, #120]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADCResolution;
 800d94e:	4b1f      	ldr	r3, [pc, #124]	; (800d9cc <MX_ADC3_Init+0x90>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a1c      	ldr	r2, [pc, #112]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d954:	6093      	str	r3, [r2, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800d956:	4b1b      	ldr	r3, [pc, #108]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d958:	2200      	movs	r2, #0
 800d95a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800d95c:	4b19      	ldr	r3, [pc, #100]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d95e:	2200      	movs	r2, #0
 800d960:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800d962:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800d96a:	4b16      	ldr	r3, [pc, #88]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d970:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800d972:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d974:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800d978:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d97a:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800d980:	4b10      	ldr	r3, [pc, #64]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d982:	2201      	movs	r2, #1
 800d984:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800d986:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = EOC_SINGLE_CONV;
 800d98e:	4b0d      	ldr	r3, [pc, #52]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d990:	2201      	movs	r2, #1
 800d992:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc3);
 800d994:	480b      	ldr	r0, [pc, #44]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d996:	f7f6 ff9f 	bl	80048d8 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[0]];
 800d99a:	4b0d      	ldr	r3, [pc, #52]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	4b0c      	ldr	r3, [pc, #48]	; (800d9d4 <MX_ADC3_Init+0x98>)
 800d9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADCSamplingTime;
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <MX_ADC3_Init+0x9c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800d9b2:	463b      	mov	r3, r7
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4803      	ldr	r0, [pc, #12]	; (800d9c4 <MX_ADC3_Init+0x88>)
 800d9b8:	f7f7 fbd0 	bl	800515c <HAL_ADC_ConfigChannel>
// HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
}
 800d9bc:	bf00      	nop
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20013dbc 	.word	0x20013dbc
 800d9c8:	40012200 	.word	0x40012200
 800d9cc:	2000479c 	.word	0x2000479c
 800d9d0:	200047a8 	.word	0x200047a8
 800d9d4:	080117fc 	.word	0x080117fc
 800d9d8:	200047a0 	.word	0x200047a0

0800d9dc <MX_ADC123_Interleaved_Init>:


void MX_ADC123_Interleaved_Init(){
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
	  hadc3.Init.NbrOfConversion =1;
	  hadc3.Init.DMAContinuousRequests = DISABLE;
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  HAL_ADC_Init(&hadc3);*/

	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[0]];
 800d9e2:	4b49      	ldr	r3, [pc, #292]	; (800db08 <MX_ADC123_Interleaved_Init+0x12c>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4b48      	ldr	r3, [pc, #288]	; (800db0c <MX_ADC123_Interleaved_Init+0x130>)
 800d9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ee:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = 1;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	61bb      	str	r3, [r7, #24]
	//  HAL_ADC_ConfigChannel(&hadc3, &sConfig);

	  hadc2.Instance = ADC2;
 800d9f8:	4b45      	ldr	r3, [pc, #276]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800d9fa:	4a46      	ldr	r2, [pc, #280]	; (800db14 <MX_ADC123_Interleaved_Init+0x138>)
 800d9fc:	601a      	str	r2, [r3, #0]
	  hadc2.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800d9fe:	4b44      	ldr	r3, [pc, #272]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da00:	2200      	movs	r2, #0
 800da02:	605a      	str	r2, [r3, #4]
	  hadc2.Init.Resolution = ADCResolution;
 800da04:	4b44      	ldr	r3, [pc, #272]	; (800db18 <MX_ADC123_Interleaved_Init+0x13c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a41      	ldr	r2, [pc, #260]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da0a:	6093      	str	r3, [r2, #8]
	  hadc2.Init.ScanConvMode = DISABLE;
 800da0c:	4b40      	ldr	r3, [pc, #256]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da0e:	2200      	movs	r2, #0
 800da10:	611a      	str	r2, [r3, #16]
	  hadc2.Init.ContinuousConvMode = ENABLE;
 800da12:	4b3f      	ldr	r3, [pc, #252]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da14:	2201      	movs	r2, #1
 800da16:	761a      	strb	r2, [r3, #24]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800da18:	4b3d      	ldr	r3, [pc, #244]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc2.Init.NbrOfDiscConversion = 0;
 800da20:	4b3b      	ldr	r3, [pc, #236]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da22:	2200      	movs	r2, #0
 800da24:	625a      	str	r2, [r3, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800da26:	4b3a      	ldr	r3, [pc, #232]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da28:	2200      	movs	r2, #0
 800da2a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800da2c:	4b38      	ldr	r3, [pc, #224]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da2e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800da32:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da34:	4b36      	ldr	r3, [pc, #216]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da36:	2200      	movs	r2, #0
 800da38:	60da      	str	r2, [r3, #12]
	  hadc2.Init.NbrOfConversion =1;
 800da3a:	4b35      	ldr	r3, [pc, #212]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da3c:	2201      	movs	r2, #1
 800da3e:	61da      	str	r2, [r3, #28]
	  hadc2.Init.DMAContinuousRequests = DISABLE;
 800da40:	4b33      	ldr	r3, [pc, #204]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800da48:	4b31      	ldr	r3, [pc, #196]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	615a      	str	r2, [r3, #20]
	  HAL_ADC_Init(&hadc2);
 800da4e:	4830      	ldr	r0, [pc, #192]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da50:	f7f6 ff42 	bl	80048d8 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800da54:	f107 0310 	add.w	r3, r7, #16
 800da58:	4619      	mov	r1, r3
 800da5a:	482d      	ldr	r0, [pc, #180]	; (800db10 <MX_ADC123_Interleaved_Init+0x134>)
 800da5c:	f7f7 fb7e 	bl	800515c <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 800da60:	4b2e      	ldr	r3, [pc, #184]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da62:	4a2f      	ldr	r2, [pc, #188]	; (800db20 <MX_ADC123_Interleaved_Init+0x144>)
 800da64:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800da66:	4b2d      	ldr	r3, [pc, #180]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da68:	2200      	movs	r2, #0
 800da6a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADCResolution;
 800da6c:	4b2a      	ldr	r3, [pc, #168]	; (800db18 <MX_ADC123_Interleaved_Init+0x13c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a2a      	ldr	r2, [pc, #168]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da72:	6093      	str	r3, [r2, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 800da74:	4b29      	ldr	r3, [pc, #164]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da76:	2200      	movs	r2, #0
 800da78:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800da7a:	4b28      	ldr	r3, [pc, #160]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800da80:	4b26      	ldr	r3, [pc, #152]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800da88:	4b24      	ldr	r3, [pc, #144]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da8e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800da90:	4b22      	ldr	r3, [pc, #136]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da92:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800da96:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da98:	4b20      	ldr	r3, [pc, #128]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 800da9e:	4b1f      	ldr	r3, [pc, #124]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800daa4:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800daac:	4b1b      	ldr	r3, [pc, #108]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800daae:	2201      	movs	r2, #1
 800dab0:	615a      	str	r2, [r3, #20]
	  HAL_ADC_Init(&hadc1);
 800dab2:	481a      	ldr	r0, [pc, #104]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800dab4:	f7f6 ff10 	bl	80048d8 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800dab8:	f107 0310 	add.w	r3, r7, #16
 800dabc:	4619      	mov	r1, r3
 800dabe:	4817      	ldr	r0, [pc, #92]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800dac0:	f7f7 fb4c 	bl	800515c <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 800dac4:	2307      	movs	r3, #7
 800dac6:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800dac8:	4b13      	ldr	r3, [pc, #76]	; (800db18 <MX_ADC123_Interleaved_Init+0x13c>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dad0:	d004      	beq.n	800dadc <MX_ADC123_Interleaved_Init+0x100>
 800dad2:	4b11      	ldr	r3, [pc, #68]	; (800db18 <MX_ADC123_Interleaved_Init+0x13c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dada:	d106      	bne.n	800daea <MX_ADC123_Interleaved_Init+0x10e>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_3; //8bit
 800dadc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800dae0:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800dae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dae6:	60fb      	str	r3, [r7, #12]
 800dae8:	e005      	b.n	800daf6 <MX_ADC123_Interleaved_Init+0x11a>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_2; //12bit
 800daea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daee:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_7CYCLES;
 800daf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daf4:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800daf6:	1d3b      	adds	r3, r7, #4
 800daf8:	4619      	mov	r1, r3
 800dafa:	4808      	ldr	r0, [pc, #32]	; (800db1c <MX_ADC123_Interleaved_Init+0x140>)
 800dafc:	f7f7 ff24 	bl	8005948 <HAL_ADCEx_MultiModeConfigChannel>

//	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
//	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);

}
 800db00:	bf00      	nop
 800db02:	3720      	adds	r7, #32
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	200047a8 	.word	0x200047a8
 800db0c:	080117fc 	.word	0x080117fc
 800db10:	20013ccc 	.word	0x20013ccc
 800db14:	40012100 	.word	0x40012100
 800db18:	2000479c 	.word	0x2000479c
 800db1c:	20013d74 	.word	0x20013d74
 800db20:	40012000 	.word	0x40012000

0800db24 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	; 0x28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a9c      	ldr	r2, [pc, #624]	; (800dda4 <HAL_ADC_MspInit+0x280>)
 800db32:	4293      	cmp	r3, r2
 800db34:	f040 80bb 	bne.w	800dcae <HAL_ADC_MspInit+0x18a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	4b9a      	ldr	r3, [pc, #616]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800db3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db40:	4a99      	ldr	r2, [pc, #612]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800db42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db46:	6453      	str	r3, [r2, #68]	; 0x44
 800db48:	4b97      	ldr	r3, [pc, #604]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800db4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db50:	613b      	str	r3, [r7, #16]
 800db52:	693b      	ldr	r3, [r7, #16]
  
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    if(!ADCInterleaved && ANALOG_PIN_ADC1[ADCChannel[0]]!=0){
 800db54:	4b95      	ldr	r3, [pc, #596]	; (800ddac <HAL_ADC_MspInit+0x288>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d11e      	bne.n	800db9a <HAL_ADC_MspInit+0x76>
 800db5c:	4b94      	ldr	r3, [pc, #592]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	461a      	mov	r2, r3
 800db62:	4b94      	ldr	r3, [pc, #592]	; (800ddb4 <HAL_ADC_MspInit+0x290>)
 800db64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d016      	beq.n	800db9a <HAL_ADC_MspInit+0x76>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800db6c:	4b90      	ldr	r3, [pc, #576]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	4b90      	ldr	r3, [pc, #576]	; (800ddb4 <HAL_ADC_MspInit+0x290>)
 800db74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db78:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800db7a:	2303      	movs	r3, #3
 800db7c:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db7e:	2300      	movs	r3, #0
 800db80:	61fb      	str	r3, [r7, #28]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800db82:	4b8b      	ldr	r3, [pc, #556]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	461a      	mov	r2, r3
 800db88:	4b8b      	ldr	r3, [pc, #556]	; (800ddb8 <HAL_ADC_MspInit+0x294>)
 800db8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8e:	f107 0214 	add.w	r2, r7, #20
 800db92:	4611      	mov	r1, r2
 800db94:	4618      	mov	r0, r3
 800db96:	f7f9 f93b 	bl	8006e10 <HAL_GPIO_Init>
    }
    if(ADCInterleaved && ANALOG_PIN_ADC3[ADCChannel[0]]!=0){
 800db9a:	4b84      	ldr	r3, [pc, #528]	; (800ddac <HAL_ADC_MspInit+0x288>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d01e      	beq.n	800dbe0 <HAL_ADC_MspInit+0xbc>
 800dba2:	4b83      	ldr	r3, [pc, #524]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	4b84      	ldr	r3, [pc, #528]	; (800ddbc <HAL_ADC_MspInit+0x298>)
 800dbaa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d016      	beq.n	800dbe0 <HAL_ADC_MspInit+0xbc>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[0]];
 800dbb2:	4b7f      	ldr	r3, [pc, #508]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4b80      	ldr	r3, [pc, #512]	; (800ddbc <HAL_ADC_MspInit+0x298>)
 800dbba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dbbe:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61fb      	str	r3, [r7, #28]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[0]], &GPIO_InitStruct);
 800dbc8:	4b79      	ldr	r3, [pc, #484]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	4b7c      	ldr	r3, [pc, #496]	; (800ddc0 <HAL_ADC_MspInit+0x29c>)
 800dbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd4:	f107 0214 	add.w	r2, r7, #20
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7f9 f918 	bl	8006e10 <HAL_GPIO_Init>
    }
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
 800dbe0:	4b78      	ldr	r3, [pc, #480]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dbe2:	4a79      	ldr	r2, [pc, #484]	; (800ddc8 <HAL_ADC_MspInit+0x2a4>)
 800dbe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800dbe6:	4b77      	ldr	r3, [pc, #476]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dbec:	4b75      	ldr	r3, [pc, #468]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dbf2:	4b74      	ldr	r3, [pc, #464]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800dbf8:	4b72      	ldr	r3, [pc, #456]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dbfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbfe:	611a      	str	r2, [r3, #16]
    if(ADCInterleaved){
 800dc00:	4b6a      	ldr	r3, [pc, #424]	; (800ddac <HAL_ADC_MspInit+0x288>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d01b      	beq.n	800dc40 <HAL_ADC_MspInit+0x11c>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800dc08:	4b70      	ldr	r3, [pc, #448]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc10:	d004      	beq.n	800dc1c <HAL_ADC_MspInit+0xf8>
 800dc12:	4b6e      	ldr	r3, [pc, #440]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dc1a:	d108      	bne.n	800dc2e <HAL_ADC_MspInit+0x10a>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dc1c:	4b69      	ldr	r3, [pc, #420]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dc22:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dc24:	4b67      	ldr	r3, [pc, #412]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc2a:	615a      	str	r2, [r3, #20]
 800dc2c:	e021      	b.n	800dc72 <HAL_ADC_MspInit+0x14e>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800dc2e:	4b65      	ldr	r3, [pc, #404]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dc34:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dc36:	4b63      	ldr	r3, [pc, #396]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc3c:	615a      	str	r2, [r3, #20]
 800dc3e:	e018      	b.n	800dc72 <HAL_ADC_MspInit+0x14e>
		}
	}else{
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800dc40:	4b62      	ldr	r3, [pc, #392]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc48:	d004      	beq.n	800dc54 <HAL_ADC_MspInit+0x130>
 800dc4a:	4b60      	ldr	r3, [pc, #384]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dc52:	d106      	bne.n	800dc62 <HAL_ADC_MspInit+0x13e>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dc54:	4b5b      	ldr	r3, [pc, #364]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dc5a:	4b5a      	ldr	r3, [pc, #360]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	615a      	str	r2, [r3, #20]
 800dc60:	e007      	b.n	800dc72 <HAL_ADC_MspInit+0x14e>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dc62:	4b58      	ldr	r3, [pc, #352]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dc68:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dc6a:	4b56      	ldr	r3, [pc, #344]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc70:	615a      	str	r2, [r3, #20]
		}
	}
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800dc72:	4b54      	ldr	r3, [pc, #336]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800dc7a:	4b52      	ldr	r3, [pc, #328]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800dc80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dc82:	4b50      	ldr	r3, [pc, #320]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800dc88:	4b4e      	ldr	r3, [pc, #312]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800dc8e:	4b4d      	ldr	r3, [pc, #308]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc90:	2200      	movs	r2, #0
 800dc92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800dc94:	4b4b      	ldr	r3, [pc, #300]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_DMA_Init(&hdma_adc1);
 800dc9a:	484a      	ldr	r0, [pc, #296]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dc9c:	f7f8 fba6 	bl	80063ec <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a48      	ldr	r2, [pc, #288]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38
 800dca6:	4a47      	ldr	r2, [pc, #284]	; (800ddc4 <HAL_ADC_MspInit+0x2a0>)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800dcac:	e113      	b.n	800ded6 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a47      	ldr	r2, [pc, #284]	; (800ddd0 <HAL_ADC_MspInit+0x2ac>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	f040 8095 	bne.w	800dde4 <HAL_ADC_MspInit+0x2c0>
	  __ADC2_CLK_ENABLE();
 800dcba:	2300      	movs	r3, #0
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	4b3a      	ldr	r3, [pc, #232]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800dcc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc2:	4a39      	ldr	r2, [pc, #228]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800dcc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcc8:	6453      	str	r3, [r2, #68]	; 0x44
 800dcca:	4b37      	ldr	r3, [pc, #220]	; (800dda8 <HAL_ADC_MspInit+0x284>)
 800dccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
	if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){
 800dcd6:	4b36      	ldr	r3, [pc, #216]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dcd8:	785b      	ldrb	r3, [r3, #1]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	4b3d      	ldr	r3, [pc, #244]	; (800ddd4 <HAL_ADC_MspInit+0x2b0>)
 800dcde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d016      	beq.n	800dd14 <HAL_ADC_MspInit+0x1f0>
		GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800dce6:	4b32      	ldr	r3, [pc, #200]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dce8:	785b      	ldrb	r3, [r3, #1]
 800dcea:	461a      	mov	r2, r3
 800dcec:	4b39      	ldr	r3, [pc, #228]	; (800ddd4 <HAL_ADC_MspInit+0x2b0>)
 800dcee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dcf2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800dcfc:	4b2c      	ldr	r3, [pc, #176]	; (800ddb0 <HAL_ADC_MspInit+0x28c>)
 800dcfe:	785b      	ldrb	r3, [r3, #1]
 800dd00:	461a      	mov	r2, r3
 800dd02:	4b35      	ldr	r3, [pc, #212]	; (800ddd8 <HAL_ADC_MspInit+0x2b4>)
 800dd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd08:	f107 0214 	add.w	r2, r7, #20
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f9 f87e 	bl	8006e10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800dd14:	4b31      	ldr	r3, [pc, #196]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd16:	4a32      	ldr	r2, [pc, #200]	; (800dde0 <HAL_ADC_MspInit+0x2bc>)
 800dd18:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800dd1a:	4b30      	ldr	r3, [pc, #192]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800dd20:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dd22:	4b2e      	ldr	r3, [pc, #184]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800dd28:	4b2c      	ldr	r3, [pc, #176]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800dd2e:	4b2b      	ldr	r3, [pc, #172]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dd34:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800dd36:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd3e:	d004      	beq.n	800dd4a <HAL_ADC_MspInit+0x226>
 800dd40:	4b22      	ldr	r3, [pc, #136]	; (800ddcc <HAL_ADC_MspInit+0x2a8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dd48:	d106      	bne.n	800dd58 <HAL_ADC_MspInit+0x234>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dd4a:	4b24      	ldr	r3, [pc, #144]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dd50:	4b22      	ldr	r3, [pc, #136]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	615a      	str	r2, [r3, #20]
 800dd56:	e007      	b.n	800dd68 <HAL_ADC_MspInit+0x244>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dd58:	4b20      	ldr	r3, [pc, #128]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dd5e:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dd60:	4b1e      	ldr	r3, [pc, #120]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd66:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800dd68:	4b1c      	ldr	r3, [pc, #112]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd6e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800dd70:	4b1a      	ldr	r3, [pc, #104]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800dd76:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dd78:	4b18      	ldr	r3, [pc, #96]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800dd7e:	4b17      	ldr	r3, [pc, #92]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd80:	2201      	movs	r2, #1
 800dd82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 800dd84:	4b15      	ldr	r3, [pc, #84]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800dd8a:	4b14      	ldr	r3, [pc, #80]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_DMA_Init(&hdma_adc2);
 800dd90:	4812      	ldr	r0, [pc, #72]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd92:	f7f8 fb2b 	bl	80063ec <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a10      	ldr	r2, [pc, #64]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd9a:	639a      	str	r2, [r3, #56]	; 0x38
 800dd9c:	4a0f      	ldr	r2, [pc, #60]	; (800dddc <HAL_ADC_MspInit+0x2b8>)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6393      	str	r3, [r2, #56]	; 0x38
}
 800dda2:	e098      	b.n	800ded6 <HAL_ADC_MspInit+0x3b2>
 800dda4:	40012000 	.word	0x40012000
 800dda8:	40023800 	.word	0x40023800
 800ddac:	200047a4 	.word	0x200047a4
 800ddb0:	200047a8 	.word	0x200047a8
 800ddb4:	080117b8 	.word	0x080117b8
 800ddb8:	20000040 	.word	0x20000040
 800ddbc:	080117f8 	.word	0x080117f8
 800ddc0:	20000068 	.word	0x20000068
 800ddc4:	20013e04 	.word	0x20013e04
 800ddc8:	40026410 	.word	0x40026410
 800ddcc:	2000479c 	.word	0x2000479c
 800ddd0:	40012100 	.word	0x40012100
 800ddd4:	080117e4 	.word	0x080117e4
 800ddd8:	2000005c 	.word	0x2000005c
 800dddc:	20013e64 	.word	0x20013e64
 800dde0:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a3d      	ldr	r2, [pc, #244]	; (800dee0 <HAL_ADC_MspInit+0x3bc>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d173      	bne.n	800ded6 <HAL_ADC_MspInit+0x3b2>
	  __ADC3_CLK_ENABLE();
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60bb      	str	r3, [r7, #8]
 800ddf2:	4b3c      	ldr	r3, [pc, #240]	; (800dee4 <HAL_ADC_MspInit+0x3c0>)
 800ddf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf6:	4a3b      	ldr	r2, [pc, #236]	; (800dee4 <HAL_ADC_MspInit+0x3c0>)
 800ddf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ddfc:	6453      	str	r3, [r2, #68]	; 0x44
 800ddfe:	4b39      	ldr	r3, [pc, #228]	; (800dee4 <HAL_ADC_MspInit+0x3c0>)
 800de00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de06:	60bb      	str	r3, [r7, #8]
 800de08:	68bb      	ldr	r3, [r7, #8]
	if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){
 800de0a:	4b37      	ldr	r3, [pc, #220]	; (800dee8 <HAL_ADC_MspInit+0x3c4>)
 800de0c:	789b      	ldrb	r3, [r3, #2]
 800de0e:	461a      	mov	r2, r3
 800de10:	4b36      	ldr	r3, [pc, #216]	; (800deec <HAL_ADC_MspInit+0x3c8>)
 800de12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d016      	beq.n	800de48 <HAL_ADC_MspInit+0x324>
		GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800de1a:	4b33      	ldr	r3, [pc, #204]	; (800dee8 <HAL_ADC_MspInit+0x3c4>)
 800de1c:	789b      	ldrb	r3, [r3, #2]
 800de1e:	461a      	mov	r2, r3
 800de20:	4b32      	ldr	r3, [pc, #200]	; (800deec <HAL_ADC_MspInit+0x3c8>)
 800de22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800de26:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800de28:	2303      	movs	r3, #3
 800de2a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de2c:	2300      	movs	r3, #0
 800de2e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <HAL_ADC_MspInit+0x3c4>)
 800de32:	789b      	ldrb	r3, [r3, #2]
 800de34:	461a      	mov	r2, r3
 800de36:	4b2e      	ldr	r3, [pc, #184]	; (800def0 <HAL_ADC_MspInit+0x3cc>)
 800de38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3c:	f107 0214 	add.w	r2, r7, #20
 800de40:	4611      	mov	r1, r2
 800de42:	4618      	mov	r0, r3
 800de44:	f7f8 ffe4 	bl	8006e10 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800de48:	4b2a      	ldr	r3, [pc, #168]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de4a:	4a2b      	ldr	r2, [pc, #172]	; (800def8 <HAL_ADC_MspInit+0x3d4>)
 800de4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800de4e:	4b29      	ldr	r3, [pc, #164]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800de54:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800de56:	4b27      	ldr	r3, [pc, #156]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de58:	2200      	movs	r2, #0
 800de5a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800de5c:	4b25      	ldr	r3, [pc, #148]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de5e:	2200      	movs	r2, #0
 800de60:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800de62:	4b24      	ldr	r3, [pc, #144]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de68:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION8b || ADCResolution==ADC_RESOLUTION6b){
 800de6a:	4b24      	ldr	r3, [pc, #144]	; (800defc <HAL_ADC_MspInit+0x3d8>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de72:	d004      	beq.n	800de7e <HAL_ADC_MspInit+0x35a>
 800de74:	4b21      	ldr	r3, [pc, #132]	; (800defc <HAL_ADC_MspInit+0x3d8>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de7c:	d106      	bne.n	800de8c <HAL_ADC_MspInit+0x368>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800de7e:	4b1d      	ldr	r3, [pc, #116]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de80:	2200      	movs	r2, #0
 800de82:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800de84:	4b1b      	ldr	r3, [pc, #108]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de86:	2200      	movs	r2, #0
 800de88:	615a      	str	r2, [r3, #20]
 800de8a:	e007      	b.n	800de9c <HAL_ADC_MspInit+0x378>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800de8c:	4b19      	ldr	r3, [pc, #100]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800de92:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800de94:	4b17      	ldr	r3, [pc, #92]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de9a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800de9c:	4b15      	ldr	r3, [pc, #84]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800de9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dea2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800dea4:	4b13      	ldr	r3, [pc, #76]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800dea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800deaa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800deac:	4b11      	ldr	r3, [pc, #68]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800deae:	2200      	movs	r2, #0
 800deb0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800deb2:	4b10      	ldr	r3, [pc, #64]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800deb4:	2201      	movs	r2, #1
 800deb6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800deb8:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800deba:	2200      	movs	r2, #0
 800debc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800debe:	4b0d      	ldr	r3, [pc, #52]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_DMA_Init(&hdma_adc3);
 800dec4:	480b      	ldr	r0, [pc, #44]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800dec6:	f7f8 fa91 	bl	80063ec <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a09      	ldr	r2, [pc, #36]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800dece:	639a      	str	r2, [r3, #56]	; 0x38
 800ded0:	4a08      	ldr	r2, [pc, #32]	; (800def4 <HAL_ADC_MspInit+0x3d0>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ded6:	bf00      	nop
 800ded8:	3728      	adds	r7, #40	; 0x28
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	40012200 	.word	0x40012200
 800dee4:	40023800 	.word	0x40023800
 800dee8:	200047a8 	.word	0x200047a8
 800deec:	080117f8 	.word	0x080117f8
 800def0:	20000068 	.word	0x20000068
 800def4:	20013d14 	.word	0x20013d14
 800def8:	40026428 	.word	0x40026428
 800defc:	2000479c 	.word	0x2000479c

0800df00 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a19      	ldr	r2, [pc, #100]	; (800df74 <HAL_ADC_MspDeInit+0x74>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d10b      	bne.n	800df2a <HAL_ADC_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __ADC1_CLK_DISABLE();
 800df12:	4b19      	ldr	r3, [pc, #100]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df16:	4a18      	ldr	r2, [pc, #96]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df1c:	6453      	str	r3, [r2, #68]	; 0x44
    PC1     ------> ADC1_IN11 
    */
 //   HAL_GPIO_DeInit(ADC_GPIO_CH_1, ADC_PIN_CH_1);

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df22:	4618      	mov	r0, r3
 800df24:	f7f8 fc7e 	bl	8006824 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
  /* USER CODE BEGIN ADC3_MspDeInit 1 */

  /* USER CODE END ADC3_MspDeInit 1 */
  }
} 
 800df28:	e020      	b.n	800df6c <HAL_ADC_MspDeInit+0x6c>
  else if(hadc->Instance==ADC2)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a13      	ldr	r2, [pc, #76]	; (800df7c <HAL_ADC_MspDeInit+0x7c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d10b      	bne.n	800df4c <HAL_ADC_MspDeInit+0x4c>
	  __ADC2_CLK_DISABLE();
 800df34:	4b10      	ldr	r3, [pc, #64]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df38:	4a0f      	ldr	r2, [pc, #60]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df3e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	4618      	mov	r0, r3
 800df46:	f7f8 fc6d 	bl	8006824 <HAL_DMA_DeInit>
} 
 800df4a:	e00f      	b.n	800df6c <HAL_ADC_MspDeInit+0x6c>
  else if(hadc->Instance==ADC3)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a0b      	ldr	r2, [pc, #44]	; (800df80 <HAL_ADC_MspDeInit+0x80>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d10a      	bne.n	800df6c <HAL_ADC_MspDeInit+0x6c>
	  __ADC3_CLK_DISABLE();
 800df56:	4b08      	ldr	r3, [pc, #32]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df5a:	4a07      	ldr	r2, [pc, #28]	; (800df78 <HAL_ADC_MspDeInit+0x78>)
 800df5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df60:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df66:	4618      	mov	r0, r3
 800df68:	f7f8 fc5c 	bl	8006824 <HAL_DMA_DeInit>
} 
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	40012000 	.word	0x40012000
 800df78:	40023800 	.word	0x40023800
 800df7c:	40012100 	.word	0x40012100
 800df80:	40012200 	.word	0x40012200

0800df84 <ADC_DMA_Reconfig>:

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800df84:	b580      	push	{r7, lr}
 800df86:	b096      	sub	sp, #88	; 0x58
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d00c      	beq.n	800dfb2 <ADC_DMA_Reconfig+0x2e>
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d013      	beq.n	800dfc4 <ADC_DMA_Reconfig+0x40>
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d11a      	bne.n	800dfd6 <ADC_DMA_Reconfig+0x52>
		case 0:
			adcHandler=hadc3;
 800dfa0:	4a15      	ldr	r2, [pc, #84]	; (800dff8 <ADC_DMA_Reconfig+0x74>)
 800dfa2:	f107 0310 	add.w	r3, r7, #16
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	2248      	movs	r2, #72	; 0x48
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f002 f874 	bl	8010098 <memcpy>
		break;
 800dfb0:	e011      	b.n	800dfd6 <ADC_DMA_Reconfig+0x52>
		case 1:
			adcHandler=hadc2;
 800dfb2:	4a12      	ldr	r2, [pc, #72]	; (800dffc <ADC_DMA_Reconfig+0x78>)
 800dfb4:	f107 0310 	add.w	r3, r7, #16
 800dfb8:	4611      	mov	r1, r2
 800dfba:	2248      	movs	r2, #72	; 0x48
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f002 f86b 	bl	8010098 <memcpy>
		break;
 800dfc2:	e008      	b.n	800dfd6 <ADC_DMA_Reconfig+0x52>
		case 2:
			adcHandler=hadc1;
 800dfc4:	4a0e      	ldr	r2, [pc, #56]	; (800e000 <ADC_DMA_Reconfig+0x7c>)
 800dfc6:	f107 0310 	add.w	r3, r7, #16
 800dfca:	4611      	mov	r1, r2
 800dfcc:	2248      	movs	r2, #72	; 0x48
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f002 f862 	bl	8010098 <memcpy>
		break;
 800dfd4:	bf00      	nop
	}

	if(buff!=NULL && len!=0){
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d009      	beq.n	800dff0 <ADC_DMA_Reconfig+0x6c>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d006      	beq.n	800dff0 <ADC_DMA_Reconfig+0x6c>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800dfe2:	f107 0310 	add.w	r3, r7, #16
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7f6 ff18 	bl	8004e20 <HAL_ADC_Start_DMA>
	}
}
 800dff0:	bf00      	nop
 800dff2:	3758      	adds	r7, #88	; 0x58
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20013dbc 	.word	0x20013dbc
 800dffc:	20013ccc 	.word	0x20013ccc
 800e000:	20013d74 	.word	0x20013d74

0800e004 <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	73fb      	strb	r3, [r7, #15]

	if(buff!=NULL && len!=0){
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00d      	beq.n	800e034 <ADC_DMA_Reconfig_Interleave+0x30>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00a      	beq.n	800e034 <ADC_DMA_Reconfig_Interleave+0x30>
		HAL_ADC_Start(&hadc3);
 800e01e:	4807      	ldr	r0, [pc, #28]	; (800e03c <ADC_DMA_Reconfig_Interleave+0x38>)
 800e020:	f7f6 fe14 	bl	8004c4c <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800e024:	4806      	ldr	r0, [pc, #24]	; (800e040 <ADC_DMA_Reconfig_Interleave+0x3c>)
 800e026:	f7f6 fe11 	bl	8004c4c <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&hadc1, buff,len);
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	68b9      	ldr	r1, [r7, #8]
 800e02e:	4805      	ldr	r0, [pc, #20]	; (800e044 <ADC_DMA_Reconfig_Interleave+0x40>)
 800e030:	f7f7 fb96 	bl	8005760 <HAL_ADCEx_MultiModeStart_DMA>
	}

}
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20013dbc 	.word	0x20013dbc
 800e040:	20013ccc 	.word	0x20013ccc
 800e044:	20013d74 	.word	0x20013d74

0800e048 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800e048:	b580      	push	{r7, lr}
 800e04a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800e04c:	4805      	ldr	r0, [pc, #20]	; (800e064 <ADC_DMA_Stop+0x1c>)
 800e04e:	f7f7 f801 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e052:	4805      	ldr	r0, [pc, #20]	; (800e068 <ADC_DMA_Stop+0x20>)
 800e054:	f7f6 fffe 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e058:	4804      	ldr	r0, [pc, #16]	; (800e06c <ADC_DMA_Stop+0x24>)
 800e05a:	f7f6 fffb 	bl	8005054 <HAL_ADC_Stop_DMA>
	//HAL_ADC_Stop_DMA(&hadc4);
	
	//CalibrateADC();
}
 800e05e:	bf00      	nop
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20013d74 	.word	0x20013d74
 800e068:	20013ccc 	.word	0x20013ccc
 800e06c:	20013dbc 	.word	0x20013dbc

0800e070 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800e070:	b580      	push	{r7, lr}
 800e072:	b094      	sub	sp, #80	; 0x50
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d00c      	beq.n	800e09a <DMA_GetCurrDataCounter+0x2a>
 800e080:	2b03      	cmp	r3, #3
 800e082:	d013      	beq.n	800e0ac <DMA_GetCurrDataCounter+0x3c>
 800e084:	2b01      	cmp	r3, #1
 800e086:	d11a      	bne.n	800e0be <DMA_GetCurrDataCounter+0x4e>
		case 1:
			adcHandler=hadc3;
 800e088:	4a1a      	ldr	r2, [pc, #104]	; (800e0f4 <DMA_GetCurrDataCounter+0x84>)
 800e08a:	f107 0308 	add.w	r3, r7, #8
 800e08e:	4611      	mov	r1, r2
 800e090:	2248      	movs	r2, #72	; 0x48
 800e092:	4618      	mov	r0, r3
 800e094:	f002 f800 	bl	8010098 <memcpy>
		break;
 800e098:	e011      	b.n	800e0be <DMA_GetCurrDataCounter+0x4e>
		case 2:
			adcHandler=hadc2;
 800e09a:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <DMA_GetCurrDataCounter+0x88>)
 800e09c:	f107 0308 	add.w	r3, r7, #8
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	2248      	movs	r2, #72	; 0x48
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f001 fff7 	bl	8010098 <memcpy>
		break;
 800e0aa:	e008      	b.n	800e0be <DMA_GetCurrDataCounter+0x4e>
		case 3:
			adcHandler=hadc1;
 800e0ac:	4a13      	ldr	r2, [pc, #76]	; (800e0fc <DMA_GetCurrDataCounter+0x8c>)
 800e0ae:	f107 0308 	add.w	r3, r7, #8
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	2248      	movs	r2, #72	; 0x48
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f001 ffee 	bl	8010098 <memcpy>
		break;
 800e0bc:	bf00      	nop
	}

	if(ADCInterleaved==1){
 800e0be:	4b10      	ldr	r3, [pc, #64]	; (800e100 <DMA_GetCurrDataCounter+0x90>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d10e      	bne.n	800e0e4 <DMA_GetCurrDataCounter+0x74>
		adcHandler=hadc1;
 800e0c6:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <DMA_GetCurrDataCounter+0x8c>)
 800e0c8:	f107 0308 	add.w	r3, r7, #8
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	2248      	movs	r2, #72	; 0x48
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f001 ffe1 	bl	8010098 <memcpy>
		return (adcHandler.DMA_Handle->Instance->NDTR)*2;
 800e0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	e003      	b.n	800e0ec <DMA_GetCurrDataCounter+0x7c>
	}else{
		return adcHandler.DMA_Handle->Instance->NDTR;
 800e0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	b29b      	uxth	r3, r3
	}
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3750      	adds	r7, #80	; 0x50
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	20013dbc 	.word	0x20013dbc
 800e0f8:	20013ccc 	.word	0x20013ccc
 800e0fc:	20013d74 	.word	0x20013d74
 800e100:	200047a4 	.word	0x200047a4

0800e104 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 800e10c:	4b34      	ldr	r3, [pc, #208]	; (800e1e0 <ADC_set_sampling_time+0xdc>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e114:	d00f      	beq.n	800e136 <ADC_set_sampling_time+0x32>
 800e116:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e11a:	d802      	bhi.n	800e122 <ADC_set_sampling_time+0x1e>
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d007      	beq.n	800e130 <ADC_set_sampling_time+0x2c>
 800e120:	e012      	b.n	800e148 <ADC_set_sampling_time+0x44>
 800e122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e126:	d009      	beq.n	800e13c <ADC_set_sampling_time+0x38>
 800e128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e12c:	d009      	beq.n	800e142 <ADC_set_sampling_time+0x3e>
 800e12e:	e00b      	b.n	800e148 <ADC_set_sampling_time+0x44>
		case ADC_RESOLUTION12b:
			ADCRes=12;
 800e130:	230c      	movs	r3, #12
 800e132:	73fb      	strb	r3, [r7, #15]
			break;
 800e134:	e008      	b.n	800e148 <ADC_set_sampling_time+0x44>
		case ADC_RESOLUTION10b:
			ADCRes=10;
 800e136:	230a      	movs	r3, #10
 800e138:	73fb      	strb	r3, [r7, #15]
			break;
 800e13a:	e005      	b.n	800e148 <ADC_set_sampling_time+0x44>
		case ADC_RESOLUTION8b:
			ADCRes=8;
 800e13c:	2308      	movs	r3, #8
 800e13e:	73fb      	strb	r3, [r7, #15]
			break;
 800e140:	e002      	b.n	800e148 <ADC_set_sampling_time+0x44>
		case ADC_RESOLUTION6b:
			ADCRes=6;
 800e142:	2306      	movs	r3, #6
 800e144:	73fb      	strb	r3, [r7, #15]
			break;
 800e146:	bf00      	nop
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/2/realfreq-ADCRes;
 800e148:	f7f9 fb56 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800e14c:	4603      	mov	r3, r0
 800e14e:	085a      	lsrs	r2, r3, #1
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	fbb2 f2f3 	udiv	r2, r2, r3
 800e156:	7bfb      	ldrb	r3, [r7, #15]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	60bb      	str	r3, [r7, #8]
	if(cyclesForConversion>=481){
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800e162:	d903      	bls.n	800e16c <ADC_set_sampling_time+0x68>
		ADCSamplingTime=ADC_SAMPLETIME_480CYCLES;
 800e164:	4b1f      	ldr	r3, [pc, #124]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e166:	2207      	movs	r2, #7
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	e02c      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=145){
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b90      	cmp	r3, #144	; 0x90
 800e170:	d903      	bls.n	800e17a <ADC_set_sampling_time+0x76>
		ADCSamplingTime=ADC_SAMPLETIME_144CYCLES;
 800e172:	4b1c      	ldr	r3, [pc, #112]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e174:	2206      	movs	r2, #6
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	e025      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=113){
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b70      	cmp	r3, #112	; 0x70
 800e17e:	d903      	bls.n	800e188 <ADC_set_sampling_time+0x84>
		ADCSamplingTime=ADC_SAMPLETIME_112CYCLES;
 800e180:	4b18      	ldr	r3, [pc, #96]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e182:	2205      	movs	r2, #5
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	e01e      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=85){
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b54      	cmp	r3, #84	; 0x54
 800e18c:	d903      	bls.n	800e196 <ADC_set_sampling_time+0x92>
		ADCSamplingTime=ADC_SAMPLETIME_84CYCLES;
 800e18e:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e190:	2204      	movs	r2, #4
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	e017      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=57){
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b38      	cmp	r3, #56	; 0x38
 800e19a:	d903      	bls.n	800e1a4 <ADC_set_sampling_time+0xa0>
		ADCSamplingTime=ADC_SAMPLETIME_56CYCLES;
 800e19c:	4b11      	ldr	r3, [pc, #68]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e19e:	2203      	movs	r2, #3
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	e010      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=29){
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b1c      	cmp	r3, #28
 800e1a8:	d903      	bls.n	800e1b2 <ADC_set_sampling_time+0xae>
		ADCSamplingTime=ADC_SAMPLETIME_28CYCLES;
 800e1aa:	4b0e      	ldr	r3, [pc, #56]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	e009      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else if(cyclesForConversion>=16){
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b0f      	cmp	r3, #15
 800e1b6:	d903      	bls.n	800e1c0 <ADC_set_sampling_time+0xbc>
		ADCSamplingTime=ADC_SAMPLETIME_15CYCLES;
 800e1b8:	4b0a      	ldr	r3, [pc, #40]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	e002      	b.n	800e1c6 <ADC_set_sampling_time+0xc2>
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_3CYCLES;
 800e1c0:	4b08      	ldr	r3, [pc, #32]	; (800e1e4 <ADC_set_sampling_time+0xe0>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	601a      	str	r2, [r3, #0]
	}	
	
	HAL_ADC_Stop_DMA(&hadc1);
 800e1c6:	4808      	ldr	r0, [pc, #32]	; (800e1e8 <ADC_set_sampling_time+0xe4>)
 800e1c8:	f7f6 ff44 	bl	8005054 <HAL_ADC_Stop_DMA>
	
	MX_ADC1_Init();
 800e1cc:	f7ff fb16 	bl	800d7fc <MX_ADC1_Init>
	MX_ADC2_Init();
 800e1d0:	f7ff fb64 	bl	800d89c <MX_ADC2_Init>
	MX_ADC3_Init();
 800e1d4:	f7ff fbb2 	bl	800d93c <MX_ADC3_Init>
//	MX_ADC4_Init();
	
	
}
 800e1d8:	bf00      	nop
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	2000479c 	.word	0x2000479c
 800e1e4:	200047a0 	.word	0x200047a0
 800e1e8:	20013d74 	.word	0x20013d74

0800e1ec <samplingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	af00      	add	r7, sp, #0
  TIMScopeEnable();
 800e1f0:	f001 fc32 	bl	800fa58 <TIMScopeEnable>
}
 800e1f4:	bf00      	nop
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <samplingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	af00      	add	r7, sp, #0
	TIMScopeDisable();
 800e1fc:	f001 fc36 	bl	800fa6c <TIMScopeDisable>
}
 800e200:	bf00      	nop
 800e202:	bd80      	pop	{r7, pc}

0800e204 <adcSetInputChannel>:

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	4603      	mov	r3, r0
 800e20c:	460a      	mov	r2, r1
 800e20e:	71fb      	strb	r3, [r7, #7]
 800e210:	4613      	mov	r3, r2
 800e212:	71bb      	strb	r3, [r7, #6]
	ADCChannel[adc]=chann;
 800e214:	79fb      	ldrb	r3, [r7, #7]
 800e216:	4912      	ldr	r1, [pc, #72]	; (800e260 <adcSetInputChannel+0x5c>)
 800e218:	79ba      	ldrb	r2, [r7, #6]
 800e21a:	54ca      	strb	r2, [r1, r3]
	samplingDisable();
 800e21c:	f7ff ffec 	bl	800e1f8 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800e220:	4810      	ldr	r0, [pc, #64]	; (800e264 <adcSetInputChannel+0x60>)
 800e222:	f7f6 ff17 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e226:	4810      	ldr	r0, [pc, #64]	; (800e268 <adcSetInputChannel+0x64>)
 800e228:	f7f6 ff14 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e22c:	480f      	ldr	r0, [pc, #60]	; (800e26c <adcSetInputChannel+0x68>)
 800e22e:	f7f6 ff11 	bl	8005054 <HAL_ADC_Stop_DMA>

	HAL_ADC_DeInit(&hadc1);
 800e232:	480c      	ldr	r0, [pc, #48]	; (800e264 <adcSetInputChannel+0x60>)
 800e234:	f7f6 fcbc 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e238:	480b      	ldr	r0, [pc, #44]	; (800e268 <adcSetInputChannel+0x64>)
 800e23a:	f7f6 fcb9 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e23e:	480b      	ldr	r0, [pc, #44]	; (800e26c <adcSetInputChannel+0x68>)
 800e240:	f7f6 fcb6 	bl	8004bb0 <HAL_ADC_DeInit>

	HAL_DMA_DeInit(&hdma_adc1);
 800e244:	480a      	ldr	r0, [pc, #40]	; (800e270 <adcSetInputChannel+0x6c>)
 800e246:	f7f8 faed 	bl	8006824 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e24a:	480a      	ldr	r0, [pc, #40]	; (800e274 <adcSetInputChannel+0x70>)
 800e24c:	f7f8 faea 	bl	8006824 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e250:	4809      	ldr	r0, [pc, #36]	; (800e278 <adcSetInputChannel+0x74>)
 800e252:	f7f8 fae7 	bl	8006824 <HAL_DMA_DeInit>

	//MX_ADC1_Init();
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200047a8 	.word	0x200047a8
 800e264:	20013d74 	.word	0x20013d74
 800e268:	20013ccc 	.word	0x20013ccc
 800e26c:	20013dbc 	.word	0x20013dbc
 800e270:	20013e04 	.word	0x20013e04
 800e274:	20013e64 	.word	0x20013e64
 800e278:	20013d14 	.word	0x20013d14

0800e27c <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 800e282:	2300      	movs	r3, #0
 800e284:	71fb      	strb	r3, [r7, #7]
 800e286:	e008      	b.n	800e29a <adcSetDefaultInputs+0x1e>
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800e288:	79fa      	ldrb	r2, [r7, #7]
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	4907      	ldr	r1, [pc, #28]	; (800e2ac <adcSetDefaultInputs+0x30>)
 800e28e:	5c89      	ldrb	r1, [r1, r2]
 800e290:	4a07      	ldr	r2, [pc, #28]	; (800e2b0 <adcSetDefaultInputs+0x34>)
 800e292:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 800e294:	79fb      	ldrb	r3, [r7, #7]
 800e296:	3301      	adds	r3, #1
 800e298:	71fb      	strb	r3, [r7, #7]
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d9f3      	bls.n	800e288 <adcSetDefaultInputs+0xc>
	}
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	080117b4 	.word	0x080117b4
 800e2b0:	200047a8 	.word	0x200047a8

0800e2b4 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	71fb      	strb	r3, [r7, #7]
	samplingDisable();
 800e2be:	f7ff ff9b 	bl	800e1f8 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800e2c2:	4817      	ldr	r0, [pc, #92]	; (800e320 <adcSetResolution+0x6c>)
 800e2c4:	f7f6 fec6 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e2c8:	4816      	ldr	r0, [pc, #88]	; (800e324 <adcSetResolution+0x70>)
 800e2ca:	f7f6 fec3 	bl	8005054 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e2ce:	4816      	ldr	r0, [pc, #88]	; (800e328 <adcSetResolution+0x74>)
 800e2d0:	f7f6 fec0 	bl	8005054 <HAL_ADC_Stop_DMA>
	if(res==8){
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	2b08      	cmp	r3, #8
 800e2d8:	d104      	bne.n	800e2e4 <adcSetResolution+0x30>
		ADCResolution	= ADC_RESOLUTION8b;
 800e2da:	4b14      	ldr	r3, [pc, #80]	; (800e32c <adcSetResolution+0x78>)
 800e2dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	e005      	b.n	800e2f0 <adcSetResolution+0x3c>
	}else if(res==12){
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	2b0c      	cmp	r3, #12
 800e2e8:	d115      	bne.n	800e316 <adcSetResolution+0x62>
		ADCResolution	= ADC_RESOLUTION12b;
 800e2ea:	4b10      	ldr	r3, [pc, #64]	; (800e32c <adcSetResolution+0x78>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
	}else{
		return;
	}
	
	HAL_ADC_DeInit(&hadc1);
 800e2f0:	480b      	ldr	r0, [pc, #44]	; (800e320 <adcSetResolution+0x6c>)
 800e2f2:	f7f6 fc5d 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e2f6:	480b      	ldr	r0, [pc, #44]	; (800e324 <adcSetResolution+0x70>)
 800e2f8:	f7f6 fc5a 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e2fc:	480a      	ldr	r0, [pc, #40]	; (800e328 <adcSetResolution+0x74>)
 800e2fe:	f7f6 fc57 	bl	8004bb0 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800e302:	480b      	ldr	r0, [pc, #44]	; (800e330 <adcSetResolution+0x7c>)
 800e304:	f7f8 fa8e 	bl	8006824 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e308:	480a      	ldr	r0, [pc, #40]	; (800e334 <adcSetResolution+0x80>)
 800e30a:	f7f8 fa8b 	bl	8006824 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e30e:	480a      	ldr	r0, [pc, #40]	; (800e338 <adcSetResolution+0x84>)
 800e310:	f7f8 fa88 	bl	8006824 <HAL_DMA_DeInit>
 800e314:	e000      	b.n	800e318 <adcSetResolution+0x64>
		return;
 800e316:	bf00      	nop
}
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	20013d74 	.word	0x20013d74
 800e324:	20013ccc 	.word	0x20013ccc
 800e328:	20013dbc 	.word	0x20013dbc
 800e32c:	2000479c 	.word	0x2000479c
 800e330:	20013e04 	.word	0x20013e04
 800e334:	20013e64 	.word	0x20013e64
 800e338:	20013d14 	.word	0x20013d14

0800e33c <CalibrateADC>:


void CalibrateADC (void){
 800e33c:	b480      	push	{r7}
 800e33e:	af00      	add	r7, sp, #0
//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
//	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
}
 800e340:	bf00      	nop
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
	...

0800e34c <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC_FORCE_RESET();
 800e350:	4b0f      	ldr	r3, [pc, #60]	; (800e390 <ADCInitNormalMode+0x44>)
 800e352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e354:	4a0e      	ldr	r2, [pc, #56]	; (800e390 <ADCInitNormalMode+0x44>)
 800e356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e35a:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_ADC_RELEASE_RESET();
 800e35c:	4b0c      	ldr	r3, [pc, #48]	; (800e390 <ADCInitNormalMode+0x44>)
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	4a0b      	ldr	r2, [pc, #44]	; (800e390 <ADCInitNormalMode+0x44>)
 800e362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e366:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_ADC_DeInit(&hadc1);
 800e368:	480a      	ldr	r0, [pc, #40]	; (800e394 <ADCInitNormalMode+0x48>)
 800e36a:	f7f6 fc21 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e36e:	480a      	ldr	r0, [pc, #40]	; (800e398 <ADCInitNormalMode+0x4c>)
 800e370:	f7f6 fc1e 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e374:	4809      	ldr	r0, [pc, #36]	; (800e39c <ADCInitNormalMode+0x50>)
 800e376:	f7f6 fc1b 	bl	8004bb0 <HAL_ADC_DeInit>

	ADCInterleaved=0;
 800e37a:	4b09      	ldr	r3, [pc, #36]	; (800e3a0 <ADCInitNormalMode+0x54>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]
	MX_ADC1_Init();
 800e380:	f7ff fa3c 	bl	800d7fc <MX_ADC1_Init>
	MX_ADC2_Init();
 800e384:	f7ff fa8a 	bl	800d89c <MX_ADC2_Init>
	MX_ADC3_Init();
 800e388:	f7ff fad8 	bl	800d93c <MX_ADC3_Init>
}
 800e38c:	bf00      	nop
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40023800 	.word	0x40023800
 800e394:	20013d74 	.word	0x20013d74
 800e398:	20013ccc 	.word	0x20013ccc
 800e39c:	20013dbc 	.word	0x20013dbc
 800e3a0:	200047a4 	.word	0x200047a4

0800e3a4 <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC_FORCE_RESET();
 800e3a8:	4b0d      	ldr	r3, [pc, #52]	; (800e3e0 <ADCInitInterleavedMode+0x3c>)
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	4a0c      	ldr	r2, [pc, #48]	; (800e3e0 <ADCInitInterleavedMode+0x3c>)
 800e3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3b2:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_ADC_RELEASE_RESET();
 800e3b4:	4b0a      	ldr	r3, [pc, #40]	; (800e3e0 <ADCInitInterleavedMode+0x3c>)
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	4a09      	ldr	r2, [pc, #36]	; (800e3e0 <ADCInitInterleavedMode+0x3c>)
 800e3ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3be:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_ADC_DeInit(&hadc1);
 800e3c0:	4808      	ldr	r0, [pc, #32]	; (800e3e4 <ADCInitInterleavedMode+0x40>)
 800e3c2:	f7f6 fbf5 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e3c6:	4808      	ldr	r0, [pc, #32]	; (800e3e8 <ADCInitInterleavedMode+0x44>)
 800e3c8:	f7f6 fbf2 	bl	8004bb0 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e3cc:	4807      	ldr	r0, [pc, #28]	; (800e3ec <ADCInitInterleavedMode+0x48>)
 800e3ce:	f7f6 fbef 	bl	8004bb0 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 800e3d2:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <ADCInitInterleavedMode+0x4c>)
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	701a      	strb	r2, [r3, #0]
	MX_ADC123_Interleaved_Init();
 800e3d8:	f7ff fb00 	bl	800d9dc <MX_ADC123_Interleaved_Init>

}
 800e3dc:	bf00      	nop
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	40023800 	.word	0x40023800
 800e3e4:	20013d74 	.word	0x20013d74
 800e3e8:	20013ccc 	.word	0x20013ccc
 800e3ec:	20013dbc 	.word	0x20013dbc
 800e3f0:	200047a4 	.word	0x200047a4

0800e3f4 <ADCInitMultiMode>:
/* USER CODE END 1 */

void ADCInitMultiMode(void){
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
//todo
}
 800e3f8:	bf00      	nop
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
	...

0800e404 <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b094      	sub	sp, #80	; 0x50
 800e408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e40a:	f107 031c 	add.w	r3, r7, #28
 800e40e:	2234      	movs	r2, #52	; 0x34
 800e410:	2100      	movs	r1, #0
 800e412:	4618      	mov	r0, r3
 800e414:	f001 fe4b 	bl	80100ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e418:	f107 0308 	add.w	r3, r7, #8
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	605a      	str	r2, [r3, #4]
 800e422:	609a      	str	r2, [r3, #8]
 800e424:	60da      	str	r2, [r3, #12]
 800e426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e428:	2300      	movs	r3, #0
 800e42a:	607b      	str	r3, [r7, #4]
 800e42c:	4b29      	ldr	r3, [pc, #164]	; (800e4d4 <SystemClock_Config+0xd0>)
 800e42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e430:	4a28      	ldr	r2, [pc, #160]	; (800e4d4 <SystemClock_Config+0xd0>)
 800e432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e436:	6413      	str	r3, [r2, #64]	; 0x40
 800e438:	4b26      	ldr	r3, [pc, #152]	; (800e4d4 <SystemClock_Config+0xd0>)
 800e43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e440:	607b      	str	r3, [r7, #4]
 800e442:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e444:	2300      	movs	r3, #0
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	4b23      	ldr	r3, [pc, #140]	; (800e4d8 <SystemClock_Config+0xd4>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a22      	ldr	r2, [pc, #136]	; (800e4d8 <SystemClock_Config+0xd4>)
 800e44e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	4b20      	ldr	r3, [pc, #128]	; (800e4d8 <SystemClock_Config+0xd4>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e45c:	603b      	str	r3, [r7, #0]
 800e45e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e460:	2301      	movs	r3, #1
 800e462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e46a:	2302      	movs	r3, #2
 800e46c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e46e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e474:	2308      	movs	r3, #8
 800e476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 300;
 800e478:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800e47c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e47e:	2302      	movs	r3, #2
 800e480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e482:	2302      	movs	r3, #2
 800e484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e486:	2302      	movs	r3, #2
 800e488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e48a:	f107 031c 	add.w	r3, r7, #28
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f9 fb98 	bl	8007bc4 <HAL_RCC_OscConfig>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800e49a:	f000 fb0c 	bl	800eab6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e49e:	230f      	movs	r3, #15
 800e4a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e4a2:	2302      	movs	r3, #2
 800e4a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e4aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e4ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e4b6:	f107 0308 	add.w	r3, r7, #8
 800e4ba:	2105      	movs	r1, #5
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7f8 ffd5 	bl	800746c <HAL_RCC_ClockConfig>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800e4c8:	f000 faf5 	bl	800eab6 <Error_Handler>
  }
}
 800e4cc:	bf00      	nop
 800e4ce:	3750      	adds	r7, #80	; 0x50
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	40023800 	.word	0x40023800
 800e4d8:	40007000 	.word	0x40007000

0800e4dc <resetDevice>:
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
}*/

/* USER CODE BEGIN 2 */
void resetDevice(void){
 800e4dc:	b480      	push	{r7}
 800e4de:	af00      	add	r7, sp, #0
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800e4e0:	4b01      	ldr	r3, [pc, #4]	; (800e4e8 <resetDevice+0xc>)
 800e4e2:	4a02      	ldr	r2, [pc, #8]	; (800e4ec <resetDevice+0x10>)
 800e4e4:	60da      	str	r2, [r3, #12]
  for(;;) {
 800e4e6:	e7fe      	b.n	800e4e6 <resetDevice+0xa>
 800e4e8:	e000ed00 	.word	0xe000ed00
 800e4ec:	05fa0004 	.word	0x05fa0004

0800e4f0 <commsSend>:
// External variables definitions =============================================
extern unsigned int intAlias[sizeof(double)/sizeof(unsigned int)];
// Function prototypes ========================================================


void commsSend(uint8_t chr){
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f001 fd47 	bl	800ff90 <UARTsendChar>
	#endif
	
	
}
 800e502:	bf00      	nop
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <commsSendUint32>:

void commsSendUint32(uint32_t num){
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
	uint8_t buff[4];
	buff[0]=(uint8_t)(num);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	733b      	strb	r3, [r7, #12]
	buff[1]=(uint8_t)(num>>8);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	0a1b      	lsrs	r3, r3, #8
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	737b      	strb	r3, [r7, #13]
	buff[2]=(uint8_t)(num>>16);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	0c1b      	lsrs	r3, r3, #16
 800e524:	b2db      	uxtb	r3, r3
 800e526:	73bb      	strb	r3, [r7, #14]
	buff[3]=(uint8_t)(num>>24);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	0e1b      	lsrs	r3, r3, #24
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	73fb      	strb	r3, [r7, #15]
  commsSendBuff(buff, 4);
 800e530:	f107 030c 	add.w	r3, r7, #12
 800e534:	2104      	movs	r1, #4
 800e536:	4618      	mov	r0, r3
 800e538:	f000 f804 	bl	800e544 <commsSendBuff>
}
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <commsSendBuff>:

void commsSendBuff(uint8_t *buff, uint16_t len){
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	460b      	mov	r3, r1
 800e54e:	807b      	strh	r3, [r7, #2]
		}
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	UARTsendBuff((char *)buff,len);
 800e550:	887b      	ldrh	r3, [r7, #2]
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f001 fd33 	bl	800ffc0 <UARTsendBuff>
	#endif
}
 800e55a:	bf00      	nop
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <commsSendString>:
void commsSendString(char *chr){
 800e562:	b580      	push	{r7, lr}
 800e564:	b084      	sub	sp, #16
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]
	char * tmp=chr;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60bb      	str	r3, [r7, #8]
	while(*(tmp++)){i++;}
 800e572:	e002      	b.n	800e57a <commsSendString+0x18>
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	60ba      	str	r2, [r7, #8]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1f6      	bne.n	800e574 <commsSendString+0x12>
		}
	}else{
		UARTsendBuff(chr,i);
	}
	#else
	UARTsendBuff(chr,i);
 800e586:	68f9      	ldr	r1, [r7, #12]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fd19 	bl	800ffc0 <UARTsendBuff>
	#endif
}
 800e58e:	bf00      	nop
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <commsSendDouble>:

void commsSendDouble(double value){
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	ed87 0b00 	vstr	d0, [r7]
	memcpy(intAlias, &value, sizeof(value));
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	; (800e5cc <commsSendDouble+0x34>)
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	463b      	mov	r3, r7
 800e5a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e5ac:	e882 0003 	stmia.w	r2, {r0, r1}
	commsSendUint32(intAlias[0]);
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <commsSendDouble+0x34>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7ff ffa8 	bl	800e50a <commsSendUint32>
	commsSendUint32(intAlias[1]);
 800e5ba:	4b04      	ldr	r3, [pc, #16]	; (800e5cc <commsSendDouble+0x34>)
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7ff ffa3 	bl	800e50a <commsSendUint32>
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	200047b8 	.word	0x200047b8

0800e5d0 <commsRecieveUART>:
		commInputByte(chr);
	}
}
#endif //USE_USB

void commsRecieveUART(uint8_t chr){
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7f4 f907 	bl	80027f0 <commInputByte>
	#endif //USE_USB
	
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800e5f2:	4b10      	ldr	r3, [pc, #64]	; (800e634 <MX_DAC_Init+0x48>)
 800e5f4:	4a10      	ldr	r2, [pc, #64]	; (800e638 <MX_DAC_Init+0x4c>)
 800e5f6:	601a      	str	r2, [r3, #0]
  HAL_DAC_Init(&hdac);
 800e5f8:	480e      	ldr	r0, [pc, #56]	; (800e634 <MX_DAC_Init+0x48>)
 800e5fa:	f7f7 fc53 	bl	8005ea4 <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800e5fe:	2304      	movs	r3, #4
 800e600:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800e602:	4b0e      	ldr	r3, [pc, #56]	; (800e63c <MX_DAC_Init+0x50>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	607b      	str	r3, [r7, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800e608:	463b      	mov	r3, r7
 800e60a:	2200      	movs	r2, #0
 800e60c:	4619      	mov	r1, r3
 800e60e:	4809      	ldr	r0, [pc, #36]	; (800e634 <MX_DAC_Init+0x48>)
 800e610:	f7f7 fdd4 	bl	80061bc <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800e614:	2314      	movs	r3, #20
 800e616:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800e618:	4b08      	ldr	r3, [pc, #32]	; (800e63c <MX_DAC_Init+0x50>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	607b      	str	r3, [r7, #4]
	HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800e61e:	463b      	mov	r3, r7
 800e620:	2210      	movs	r2, #16
 800e622:	4619      	mov	r1, r3
 800e624:	4803      	ldr	r0, [pc, #12]	; (800e634 <MX_DAC_Init+0x48>)
 800e626:	f7f7 fdc9 	bl	80061bc <HAL_DAC_ConfigChannel>
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	20013f24 	.word	0x20013f24
 800e638:	40007400 	.word	0x40007400
 800e63c:	200047ac 	.word	0x200047ac

0800e640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b088      	sub	sp, #32
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a46      	ldr	r2, [pc, #280]	; (800e768 <HAL_DAC_MspInit+0x128>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	f040 8086 	bne.w	800e760 <HAL_DAC_MspInit+0x120>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __DAC_CLK_ENABLE();
 800e654:	2300      	movs	r3, #0
 800e656:	60bb      	str	r3, [r7, #8]
 800e658:	4b44      	ldr	r3, [pc, #272]	; (800e76c <HAL_DAC_MspInit+0x12c>)
 800e65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65c:	4a43      	ldr	r2, [pc, #268]	; (800e76c <HAL_DAC_MspInit+0x12c>)
 800e65e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e662:	6413      	str	r3, [r2, #64]	; 0x40
 800e664:	4b41      	ldr	r3, [pc, #260]	; (800e76c <HAL_DAC_MspInit+0x12c>)
 800e666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e66c:	60bb      	str	r3, [r7, #8]
 800e66e:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e670:	2330      	movs	r3, #48	; 0x30
 800e672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e674:	2303      	movs	r3, #3
 800e676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e67c:	f107 030c 	add.w	r3, r7, #12
 800e680:	4619      	mov	r1, r3
 800e682:	483b      	ldr	r0, [pc, #236]	; (800e770 <HAL_DAC_MspInit+0x130>)
 800e684:	f7f8 fbc4 	bl	8006e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */
				/* Set the parameters to be configured for Channel1*/
		hdma_dac1.Instance = DMA1_Stream5;
 800e688:	4b3a      	ldr	r3, [pc, #232]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e68a:	4a3b      	ldr	r2, [pc, #236]	; (800e778 <HAL_DAC_MspInit+0x138>)
 800e68c:	601a      	str	r2, [r3, #0]
		
		hdma_dac1.Init.Channel  = DMA_CHANNEL_7;
 800e68e:	4b39      	ldr	r3, [pc, #228]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e690:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e694:	605a      	str	r2, [r3, #4]
		hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e696:	4b37      	ldr	r3, [pc, #220]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e698:	2240      	movs	r2, #64	; 0x40
 800e69a:	609a      	str	r2, [r3, #8]
		hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e69c:	4b35      	ldr	r3, [pc, #212]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	60da      	str	r2, [r3, #12]
		hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800e6a2:	4b34      	ldr	r3, [pc, #208]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e6a8:	611a      	str	r2, [r3, #16]
		hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e6aa:	4b32      	ldr	r3, [pc, #200]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6b0:	615a      	str	r2, [r3, #20]
		hdma_dac1.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e6b2:	4b30      	ldr	r3, [pc, #192]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6b8:	619a      	str	r2, [r3, #24]
		hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800e6ba:	4b2e      	ldr	r3, [pc, #184]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e6c0:	61da      	str	r2, [r3, #28]
		hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 800e6c2:	4b2c      	ldr	r3, [pc, #176]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e6c8:	621a      	str	r2, [r3, #32]
		hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;         
 800e6ca:	4b2a      	ldr	r3, [pc, #168]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800e6d0:	4b28      	ldr	r3, [pc, #160]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 800e6d6:	4b27      	ldr	r3, [pc, #156]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE; 
 800e6dc:	4b25      	ldr	r3, [pc, #148]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30

		HAL_DMA_Init(&hdma_dac1);
 800e6e2:	4824      	ldr	r0, [pc, #144]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6e4:	f7f7 fe82 	bl	80063ec <HAL_DMA_Init>
			
		/* Associate the initialized DMA handle to the the DAC handle */
		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a22      	ldr	r2, [pc, #136]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6ec:	609a      	str	r2, [r3, #8]
 800e6ee:	4a21      	ldr	r2, [pc, #132]	; (800e774 <HAL_DAC_MspInit+0x134>)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6393      	str	r3, [r2, #56]	; 0x38
		
						/* Set the parameters to be configured for Channel2*/
		hdma_dac2.Instance = DMA1_Stream6;
 800e6f4:	4b21      	ldr	r3, [pc, #132]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e6f6:	4a22      	ldr	r2, [pc, #136]	; (800e780 <HAL_DAC_MspInit+0x140>)
 800e6f8:	601a      	str	r2, [r3, #0]
		
		hdma_dac2.Init.Channel  = DMA_CHANNEL_7;
 800e6fa:	4b20      	ldr	r3, [pc, #128]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e6fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e700:	605a      	str	r2, [r3, #4]
		hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e702:	4b1e      	ldr	r3, [pc, #120]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e704:	2240      	movs	r2, #64	; 0x40
 800e706:	609a      	str	r2, [r3, #8]
		hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e708:	4b1c      	ldr	r3, [pc, #112]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	60da      	str	r2, [r3, #12]
		hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800e70e:	4b1b      	ldr	r3, [pc, #108]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e714:	611a      	str	r2, [r3, #16]
		hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e716:	4b19      	ldr	r3, [pc, #100]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e71c:	615a      	str	r2, [r3, #20]
		hdma_dac2.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e71e:	4b17      	ldr	r3, [pc, #92]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e724:	619a      	str	r2, [r3, #24]
		hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800e726:	4b15      	ldr	r3, [pc, #84]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e72c:	61da      	str	r2, [r3, #28]
		hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 800e72e:	4b13      	ldr	r3, [pc, #76]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e734:	621a      	str	r2, [r3, #32]
		hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;         
 800e736:	4b11      	ldr	r3, [pc, #68]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e738:	2200      	movs	r2, #0
 800e73a:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_dac2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800e73c:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e73e:	2201      	movs	r2, #1
 800e740:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_dac2.Init.MemBurst = DMA_MBURST_SINGLE;
 800e742:	4b0e      	ldr	r3, [pc, #56]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e744:	2200      	movs	r2, #0
 800e746:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_dac2.Init.PeriphBurst = DMA_PBURST_SINGLE; 
 800e748:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	631a      	str	r2, [r3, #48]	; 0x30

		HAL_DMA_Init(&hdma_dac2);
 800e74e:	480b      	ldr	r0, [pc, #44]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e750:	f7f7 fe4c 	bl	80063ec <HAL_DMA_Init>
			
		/* Associate the initialized DMA handle to the the DAC handle */
		__HAL_LINKDMA(hdac, DMA_Handle2, hdma_dac2);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a09      	ldr	r2, [pc, #36]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e758:	60da      	str	r2, [r3, #12]
 800e75a:	4a08      	ldr	r2, [pc, #32]	; (800e77c <HAL_DAC_MspInit+0x13c>)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800e760:	bf00      	nop
 800e762:	3720      	adds	r7, #32
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	40007400 	.word	0x40007400
 800e76c:	40023800 	.word	0x40023800
 800e770:	40020000 	.word	0x40020000
 800e774:	20013ec4 	.word	0x20013ec4
 800e778:	40026088 	.word	0x40026088
 800e77c:	20013f38 	.word	0x20013f38
 800e780:	400260a0 	.word	0x400260a0

0800e784 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af02      	add	r7, sp, #8
 800e78a:	4603      	mov	r3, r0
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
 800e790:	73fb      	strb	r3, [r7, #15]
	uint32_t dacChannel=0;
 800e792:	2300      	movs	r3, #0
 800e794:	617b      	str	r3, [r7, #20]
	switch(chan){
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <DAC_DMA_Reconfig+0x1e>
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d003      	beq.n	800e7a8 <DAC_DMA_Reconfig+0x24>
 800e7a0:	e005      	b.n	800e7ae <DAC_DMA_Reconfig+0x2a>
		case 0:
			dacChannel=DAC_CHANNEL_1;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	617b      	str	r3, [r7, #20]
		break;
 800e7a6:	e002      	b.n	800e7ae <DAC_DMA_Reconfig+0x2a>
		case 1:
			dacChannel=DAC_CHANNEL_2;
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	617b      	str	r3, [r7, #20]
		break;
 800e7ac:	bf00      	nop
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800e7ae:	6979      	ldr	r1, [r7, #20]
 800e7b0:	4807      	ldr	r0, [pc, #28]	; (800e7d0 <DAC_DMA_Reconfig+0x4c>)
 800e7b2:	f7f7 fc97 	bl	80060e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	6979      	ldr	r1, [r7, #20]
 800e7c0:	4803      	ldr	r0, [pc, #12]	; (800e7d0 <DAC_DMA_Reconfig+0x4c>)
 800e7c2:	f7f7 fbc5 	bl	8005f50 <HAL_DAC_Start_DMA>
}
 800e7c6:	bf00      	nop
 800e7c8:	3718      	adds	r7, #24
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20013f24 	.word	0x20013f24

0800e7d4 <DACDisableOutput>:



void DACDisableOutput(void){
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e7da:	2330      	movs	r3, #48	; 0x30
 800e7dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7e6:	1d3b      	adds	r3, r7, #4
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4803      	ldr	r0, [pc, #12]	; (800e7f8 <DACDisableOutput+0x24>)
 800e7ec:	f7f8 fb10 	bl	8006e10 <HAL_GPIO_Init>
}
 800e7f0:	bf00      	nop
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	40020000 	.word	0x40020000

0800e7fc <DACEnableOutput>:

void DACEnableOutput(void){
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e802:	2330      	movs	r3, #48	; 0x30
 800e804:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e806:	2303      	movs	r3, #3
 800e808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e80e:	1d3b      	adds	r3, r7, #4
 800e810:	4619      	mov	r1, r3
 800e812:	4803      	ldr	r0, [pc, #12]	; (800e820 <DACEnableOutput+0x24>)
 800e814:	f7f8 fafc 	bl	8006e10 <HAL_GPIO_Init>
}
 800e818:	bf00      	nop
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	40020000 	.word	0x40020000

0800e824 <DACSetOutputBuffer>:

void DACSetOutputBuffer(void){
 800e824:	b480      	push	{r7}
 800e826:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800e828:	4b03      	ldr	r3, [pc, #12]	; (800e838 <DACSetOutputBuffer+0x14>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
}
 800e82e:	bf00      	nop
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	200047ac 	.word	0x200047ac

0800e83c <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
 800e83c:	b480      	push	{r7}
 800e83e:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800e840:	4b03      	ldr	r3, [pc, #12]	; (800e850 <DACUnsetOutputBuffer+0x14>)
 800e842:	2202      	movs	r2, #2
 800e844:	601a      	str	r2, [r3, #0]
}
 800e846:	bf00      	nop
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	200047ac 	.word	0x200047ac

0800e854 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800e854:	b580      	push	{r7, lr}
 800e856:	af00      	add	r7, sp, #0
	MX_DAC_Init();
 800e858:	f7ff fec8 	bl	800e5ec <MX_DAC_Init>
	DACEnableOutput();
 800e85c:	f7ff ffce 	bl	800e7fc <DACEnableOutput>
	TIMGenEnable();
 800e860:	f000 ff0e 	bl	800f680 <TIMGenEnable>
}
 800e864:	bf00      	nop
 800e866:	bd80      	pop	{r7, pc}

0800e868 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800e868:	b580      	push	{r7, lr}
 800e86a:	af00      	add	r7, sp, #0
	TIMGenDisable();
 800e86c:	f000 ff16 	bl	800f69c <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800e870:	2100      	movs	r1, #0
 800e872:	4805      	ldr	r0, [pc, #20]	; (800e888 <GeneratingDisable+0x20>)
 800e874:	f7f7 fb46 	bl	8005f04 <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800e878:	2110      	movs	r1, #16
 800e87a:	4803      	ldr	r0, [pc, #12]	; (800e888 <GeneratingDisable+0x20>)
 800e87c:	f7f7 fb42 	bl	8005f04 <HAL_DAC_Stop>
	DACDisableOutput();
 800e880:	f7ff ffa8 	bl	800e7d4 <DACDisableOutput>
}
 800e884:	bf00      	nop
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20013f24 	.word	0x20013f24

0800e88c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
	__DMA2_CLK_ENABLE();
 800e892:	2300      	movs	r3, #0
 800e894:	607b      	str	r3, [r7, #4]
 800e896:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89a:	4a0f      	ldr	r2, [pc, #60]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e89c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8a2:	4b0d      	ldr	r3, [pc, #52]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8aa:	607b      	str	r3, [r7, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
	__DMA1_CLK_ENABLE();
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	603b      	str	r3, [r7, #0]
 800e8b2:	4b09      	ldr	r3, [pc, #36]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b6:	4a08      	ldr	r2, [pc, #32]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e8b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8be:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <MX_DMA_Init+0x4c>)
 800e8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8c6:	603b      	str	r3, [r7, #0]
 800e8c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */

}
 800e8ca:	bf00      	nop
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	40023800 	.word	0x40023800

0800e8dc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
	//BSP_LED_Init(LED2);
	
	__GPIOA_CLK_ENABLE();
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	4b17      	ldr	r3, [pc, #92]	; (800e95c <MX_GPIO_Init+0x68>)
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	4a16      	ldr	r2, [pc, #88]	; (800e95c <MX_GPIO_Init+0x68>)
 800e904:	f043 0301 	orr.w	r3, r3, #1
 800e908:	6313      	str	r3, [r2, #48]	; 0x30
 800e90a:	4b14      	ldr	r3, [pc, #80]	; (800e95c <MX_GPIO_Init+0x68>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
	__GPIOB_CLK_ENABLE();
 800e916:	2300      	movs	r3, #0
 800e918:	60bb      	str	r3, [r7, #8]
 800e91a:	4b10      	ldr	r3, [pc, #64]	; (800e95c <MX_GPIO_Init+0x68>)
 800e91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91e:	4a0f      	ldr	r2, [pc, #60]	; (800e95c <MX_GPIO_Init+0x68>)
 800e920:	f043 0302 	orr.w	r3, r3, #2
 800e924:	6313      	str	r3, [r2, #48]	; 0x30
 800e926:	4b0d      	ldr	r3, [pc, #52]	; (800e95c <MX_GPIO_Init+0x68>)
 800e928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92a:	f003 0302 	and.w	r3, r3, #2
 800e92e:	60bb      	str	r3, [r7, #8]
 800e930:	68bb      	ldr	r3, [r7, #8]
	__GPIOC_CLK_ENABLE();
 800e932:	2300      	movs	r3, #0
 800e934:	607b      	str	r3, [r7, #4]
 800e936:	4b09      	ldr	r3, [pc, #36]	; (800e95c <MX_GPIO_Init+0x68>)
 800e938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e93a:	4a08      	ldr	r2, [pc, #32]	; (800e95c <MX_GPIO_Init+0x68>)
 800e93c:	f043 0304 	orr.w	r3, r3, #4
 800e940:	6313      	str	r3, [r2, #48]	; 0x30
 800e942:	4b06      	ldr	r3, [pc, #24]	; (800e95c <MX_GPIO_Init+0x68>)
 800e944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e946:	f003 0304 	and.w	r3, r3, #4
 800e94a:	607b      	str	r3, [r7, #4]
 800e94c:	687b      	ldr	r3, [r7, #4]

}
 800e94e:	bf00      	nop
 800e950:	3714      	adds	r7, #20
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	40023800 	.word	0x40023800

0800e960 <LED_On>:

void LED_On(void){
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
	//BSP_LED_On(LED2);
}
 800e964:	bf00      	nop
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <LED_Off>:
void LED_Off(void)
{
 800e96e:	b480      	push	{r7}
 800e970:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED2);
}
 800e972:	bf00      	nop
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800e97c:	b5b0      	push	{r4, r5, r7, lr}
 800e97e:	b09e      	sub	sp, #120	; 0x78
 800e980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e982:	f7f5 ff5d 	bl	8004840 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800e986:	f7ff fd3d 	bl	800e404 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e98a:	f7ff ffb3 	bl	800e8f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800e98e:	f7ff ff7d 	bl	800e88c <MX_DMA_Init>
	LED_On();
 800e992:	f7ff ffe5 	bl	800e960 <LED_On>
#ifdef USE_SCOPE
	MX_ADC1_Init();
 800e996:	f7fe ff31 	bl	800d7fc <MX_ADC1_Init>
	MX_ADC2_Init();
 800e99a:	f7fe ff7f 	bl	800d89c <MX_ADC2_Init>
	MX_ADC3_Init();
 800e99e:	f7fe ffcd 	bl	800d93c <MX_ADC3_Init>
	MX_TIM8_Init();
 800e9a2:	f001 f80f 	bl	800f9c4 <MX_TIM8_Init>
	CalibrateADC();
 800e9a6:	f7ff fcc9 	bl	800e33c <CalibrateADC>
	adcSetDefaultInputs();
 800e9aa:	f7ff fc67 	bl	800e27c <adcSetDefaultInputs>
#endif //USE_SCOPE

#ifdef USE_GEN
	MX_DAC_Init();
 800e9ae:	f7ff fe1d 	bl	800e5ec <MX_DAC_Init>
	MX_TIM6_Init();
 800e9b2:	f000 fb6b 	bl	800f08c <MX_TIM6_Init>
	MX_TIM7_Init();
 800e9b6:	f000 fb9b 	bl	800f0f0 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Init code generated for FreeRTOS */
  /* Create Start thread */
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800e9ba:	4b2b      	ldr	r3, [pc, #172]	; (800ea68 <main+0xec>)
 800e9bc:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9c6:	682b      	ldr	r3, [r5, #0]
 800e9c8:	6023      	str	r3, [r4, #0]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800e9ca:	4b28      	ldr	r3, [pc, #160]	; (800ea6c <main+0xf0>)
 800e9cc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9d6:	682b      	ldr	r3, [r5, #0]
 800e9d8:	6023      	str	r3, [r4, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800e9da:	4b25      	ldr	r3, [pc, #148]	; (800ea70 <main+0xf4>)
 800e9dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800e9e0:	461d      	mov	r5, r3
 800e9e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	6023      	str	r3, [r4, #0]
	#ifdef USE_SCOPE
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800e9ea:	4b22      	ldr	r3, [pc, #136]	; (800ea74 <main+0xf8>)
 800e9ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e9f0:	461d      	mov	r5, r3
 800e9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9f6:	682b      	ldr	r3, [r5, #0]
 800e9f8:	6023      	str	r3, [r4, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800e9fa:	4b1f      	ldr	r3, [pc, #124]	; (800ea78 <main+0xfc>)
 800e9fc:	f107 0414 	add.w	r4, r7, #20
 800ea00:	461d      	mov	r5, r3
 800ea02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	6023      	str	r3, [r4, #0]
	#endif //USE_SCOPE
	
	#ifdef USE_GEN
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ea0a:	4b1c      	ldr	r3, [pc, #112]	; (800ea7c <main+0x100>)
 800ea0c:	463c      	mov	r4, r7
 800ea0e:	461d      	mov	r5, r3
 800ea10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	6023      	str	r3, [r4, #0]
	#endif //USE_GEN
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800ea18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fc fc67 	bl	800b2f2 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800ea24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fc fc61 	bl	800b2f2 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800ea30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ea34:	2100      	movs	r1, #0
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fc fc5b 	bl	800b2f2 <osThreadCreate>
	#ifdef USE_SCOPE
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800ea3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea40:	2100      	movs	r1, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fc fc55 	bl	800b2f2 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800ea48:	f107 0314 	add.w	r3, r7, #20
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fc fc4f 	bl	800b2f2 <osThreadCreate>
	#endif //USE_SCOPE
	
	#ifdef USE_GEN
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800ea54:	463b      	mov	r3, r7
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fc fc4a 	bl	800b2f2 <osThreadCreate>
	#endif //USE_GEN
	LED_Off();
 800ea5e:	f7ff ff86 	bl	800e96e <LED_Off>
  /* Start scheduler */
  osKernelStart();
 800ea62:	f7fc fc3f 	bl	800b2e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* USER CODE BEGIN 3 */
  /* Infinite loop */
  while (1)
 800ea66:	e7fe      	b.n	800ea66 <main+0xea>
 800ea68:	080116d0 	.word	0x080116d0
 800ea6c:	080116f0 	.word	0x080116f0
 800ea70:	08011710 	.word	0x08011710
 800ea74:	08011730 	.word	0x08011730
 800ea78:	08011754 	.word	0x08011754
 800ea7c:	08011778 	.word	0x08011778

0800ea80 <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
 800ea88:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ea8c:	f7fc fc58 	bl	800b340 <osDelay>
		LED_On();
 800ea90:	f7ff ff66 	bl	800e960 <LED_On>
		osDelay(40);
 800ea94:	2028      	movs	r0, #40	; 0x28
 800ea96:	f7fc fc53 	bl	800b340 <osDelay>
		LED_Off();
 800ea9a:	f7ff ff68 	bl	800e96e <LED_Off>
    osDelay(400);
 800ea9e:	e7f3      	b.n	800ea88 <StartThread+0x8>

0800eaa0 <assert_failed>:
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <Error_Handler>:

#endif

void Error_Handler(void)
{
 800eab6:	b480      	push	{r7}
 800eab8:	af00      	add	r7, sp, #0
	while(1){
 800eaba:	e7fe      	b.n	800eaba <Error_Handler+0x4>

0800eabc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN Callback 0 */

 /* USER CODE END Callback 0 */
 if (htim->Instance == TIM14) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a04      	ldr	r2, [pc, #16]	; (800eadc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d101      	bne.n	800ead2 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 800eace:	f7f5 fed9 	bl	8004884 <HAL_IncTick>
 }
 /* USER CODE BEGIN Callback 1 */

 /* USER CODE END Callback 1 */
}
 800ead2:	bf00      	nop
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	40002000 	.word	0x40002000

0800eae0 <HAL_MspInit>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

}*/

void HAL_MspInit(void)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eae6:	2300      	movs	r3, #0
 800eae8:	607b      	str	r3, [r7, #4]
 800eaea:	4b12      	ldr	r3, [pc, #72]	; (800eb34 <HAL_MspInit+0x54>)
 800eaec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaee:	4a11      	ldr	r2, [pc, #68]	; (800eb34 <HAL_MspInit+0x54>)
 800eaf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eaf4:	6453      	str	r3, [r2, #68]	; 0x44
 800eaf6:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <HAL_MspInit+0x54>)
 800eaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800eb02:	2300      	movs	r3, #0
 800eb04:	603b      	str	r3, [r7, #0]
 800eb06:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <HAL_MspInit+0x54>)
 800eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0a:	4a0a      	ldr	r2, [pc, #40]	; (800eb34 <HAL_MspInit+0x54>)
 800eb0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb10:	6413      	str	r3, [r2, #64]	; 0x40
 800eb12:	4b08      	ldr	r3, [pc, #32]	; (800eb34 <HAL_MspInit+0x54>)
 800eb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb1a:	603b      	str	r3, [r7, #0]
 800eb1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800eb1e:	2200      	movs	r2, #0
 800eb20:	210f      	movs	r1, #15
 800eb22:	f06f 0001 	mvn.w	r0, #1
 800eb26:	f7f7 f95f 	bl	8005de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800eb2a:	bf00      	nop
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	40023800 	.word	0x40023800

0800eb38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08c      	sub	sp, #48	; 0x30
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800eb48:	2200      	movs	r2, #0
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	202d      	movs	r0, #45	; 0x2d
 800eb4e:	f7f7 f94b 	bl	8005de8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800eb52:	202d      	movs	r0, #45	; 0x2d
 800eb54:	f7f7 f974 	bl	8005e40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	4b1f      	ldr	r3, [pc, #124]	; (800ebdc <HAL_InitTick+0xa4>)
 800eb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb60:	4a1e      	ldr	r2, [pc, #120]	; (800ebdc <HAL_InitTick+0xa4>)
 800eb62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb66:	6413      	str	r3, [r2, #64]	; 0x40
 800eb68:	4b1c      	ldr	r3, [pc, #112]	; (800ebdc <HAL_InitTick+0xa4>)
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eb74:	f107 0210 	add.w	r2, r7, #16
 800eb78:	f107 0314 	add.w	r3, r7, #20
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f8 fe4e 	bl	8007820 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800eb84:	f7f8 fe24 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	4a13      	ldr	r2, [pc, #76]	; (800ebe0 <HAL_InitTick+0xa8>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	0c9b      	lsrs	r3, r3, #18
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800eb9c:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <HAL_InitTick+0xac>)
 800eb9e:	4a12      	ldr	r2, [pc, #72]	; (800ebe8 <HAL_InitTick+0xb0>)
 800eba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800eba2:	4b10      	ldr	r3, [pc, #64]	; (800ebe4 <HAL_InitTick+0xac>)
 800eba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eba8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800ebaa:	4a0e      	ldr	r2, [pc, #56]	; (800ebe4 <HAL_InitTick+0xac>)
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <HAL_InitTick+0xac>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ebb6:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <HAL_InitTick+0xac>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800ebbc:	4809      	ldr	r0, [pc, #36]	; (800ebe4 <HAL_InitTick+0xac>)
 800ebbe:	f7f9 fb23 	bl	8008208 <HAL_TIM_Base_Init>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800ebc8:	4806      	ldr	r0, [pc, #24]	; (800ebe4 <HAL_InitTick+0xac>)
 800ebca:	f7f9 fd03 	bl	80085d4 <HAL_TIM_Base_Start_IT>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	e000      	b.n	800ebd4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3730      	adds	r7, #48	; 0x30
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	40023800 	.word	0x40023800
 800ebe0:	431bde83 	.word	0x431bde83
 800ebe4:	20013f98 	.word	0x20013f98
 800ebe8:	40002000 	.word	0x40002000

0800ebec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ebf0:	f7fd ffb8 	bl	800cb64 <xTaskGetSchedulerState>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d001      	beq.n	800ebfe <SysTick_Handler+0x12>
    xPortSysTickHandler();
 800ebfa:	f7fe fb9d 	bl	800d338 <xPortSysTickHandler>
  }
  HAL_IncTick();
 800ebfe:	f7f5 fe41 	bl	8004884 <HAL_IncTick>

}
 800ec02:	bf00      	nop
 800ec04:	bd80      	pop	{r7, pc}
	...

0800ec08 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->DR & (uint16_t)0x01FF);
 800ec0e:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <USART2_IRQHandler+0x28>)
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	71fb      	strb	r3, [r7, #7]
	commsRecieveUART(c);
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff fcda 	bl	800e5d0 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800ec1c:	2026      	movs	r0, #38	; 0x26
 800ec1e:	f7f7 f927 	bl	8005e70 <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_IRQHandler(&huart2);
 800ec22:	4804      	ldr	r0, [pc, #16]	; (800ec34 <USART2_IRQHandler+0x2c>)
 800ec24:	f7fb fd48 	bl	800a6b8 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	40004400 	.word	0x40004400
 800ec34:	20014398 	.word	0x20014398

0800ec38 <TIM8_TRG_COM_TIM14_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim8);
  HAL_TIM_IRQHandler(&htim14);
 800ec3c:	4802      	ldr	r0, [pc, #8]	; (800ec48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ec3e:	f7fa f837 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ec42:	bf00      	nop
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20013f98 	.word	0x20013f98

0800ec4c <NMI_Handler>:


void NMI_Handler(void)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ec50:	bf00      	nop
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ec5a:	b480      	push	{r7}
 800ec5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ec5e:	e7fe      	b.n	800ec5e <HardFault_Handler+0x4>

0800ec60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ec60:	b480      	push	{r7}
 800ec62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ec64:	e7fe      	b.n	800ec64 <MemManage_Handler+0x4>

0800ec66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ec66:	b480      	push	{r7}
 800ec68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ec6a:	e7fe      	b.n	800ec6a <BusFault_Handler+0x4>

0800ec6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ec70:	e7fe      	b.n	800ec70 <UsageFault_Handler+0x4>

0800ec72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ec72:	b480      	push	{r7}
 800ec74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ec76:	bf00      	nop
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ec80:	b480      	push	{r7}
 800ec82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_dac1);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800ec84:	bf00      	nop
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream6_IRQn 0 */
 // HAL_DMA_IRQHandler(&hdma_dac2);
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */
 // HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800eca0:	bf00      	nop
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ecae:	bf00      	nop
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */
 // HAL_DMA_IRQHandler(&hdma_adc2);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ecbc:	bf00      	nop
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
	...

0800ecc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eccc:	4b08      	ldr	r3, [pc, #32]	; (800ecf0 <SystemInit+0x28>)
 800ecce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecd2:	4a07      	ldr	r2, [pc, #28]	; (800ecf0 <SystemInit+0x28>)
 800ecd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ecd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ecdc:	4b04      	ldr	r3, [pc, #16]	; (800ecf0 <SystemInit+0x28>)
 800ecde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ece2:	609a      	str	r2, [r3, #8]
#endif
}
 800ece4:	bf00      	nop
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	e000ed00 	.word	0xe000ed00

0800ecf4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	695b      	ldr	r3, [r3, #20]
 800ed00:	f043 0201 	orr.w	r2, r3, #1
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	615a      	str	r2, [r3, #20]
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <HAL_TIM_Base_MspInit>:
 * @brief  This function configures GPIOs and DMAs used by the functionalities.
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM8) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a23      	ldr	r2, [pc, #140]	; (800edb0 <HAL_TIM_Base_MspInit+0x9c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d102      	bne.n	800ed2c <HAL_TIM_Base_MspInit+0x18>
		TIM8_SCOPE_MspInit(htim_base);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fe7c 	bl	800fa24 <TIM8_SCOPE_MspInit>
	/* Note: PC app must send the mode first even if only one
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a20      	ldr	r2, [pc, #128]	; (800edb4 <HAL_TIM_Base_MspInit+0xa0>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d102      	bne.n	800ed3c <HAL_TIM_Base_MspInit+0x28>
		TIM6_GEN_DAC_MspInit(htim_base);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fb12 	bl	800f360 <TIM6_GEN_DAC_MspInit>
	}
	if (htim_base->Instance == TIM7) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a1d      	ldr	r2, [pc, #116]	; (800edb8 <HAL_TIM_Base_MspInit+0xa4>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d102      	bne.n	800ed4c <HAL_TIM_Base_MspInit+0x38>
		TIM7_GEN_DAC_MspInit(htim_base);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fb24 	bl	800f394 <TIM7_GEN_DAC_MspInit>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 800ed4c:	4b1b      	ldr	r3, [pc, #108]	; (800edbc <HAL_TIM_Base_MspInit+0xa8>)
 800ed4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d11f      	bne.n	800ed98 <HAL_TIM_Base_MspInit+0x84>
		if (htim_base->Instance == TIM13) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a18      	ldr	r2, [pc, #96]	; (800edc0 <HAL_TIM_Base_MspInit+0xac>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d102      	bne.n	800ed68 <HAL_TIM_Base_MspInit+0x54>
			TIM1_GEN_PWM_MspInit(htim_base);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fb30 	bl	800f3c8 <TIM1_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM3) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a15      	ldr	r2, [pc, #84]	; (800edc4 <HAL_TIM_Base_MspInit+0xb0>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d102      	bne.n	800ed78 <HAL_TIM_Base_MspInit+0x64>
			TIM3_GEN_PWM_MspInit(htim_base);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fb52 	bl	800f41c <TIM3_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM6) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a0d      	ldr	r2, [pc, #52]	; (800edb4 <HAL_TIM_Base_MspInit+0xa0>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d102      	bne.n	800ed88 <HAL_TIM_Base_MspInit+0x74>
			TIM6_GEN_PWM_MspInit(htim_base);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 fb74 	bl	800f470 <TIM6_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM7) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <HAL_TIM_Base_MspInit+0xa4>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d102      	bne.n	800ed98 <HAL_TIM_Base_MspInit+0x84>
			TIM7_GEN_PWM_MspInit(htim_base);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fbb8 	bl	800f508 <TIM7_GEN_PWM_MspInit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a04      	ldr	r2, [pc, #16]	; (800edb0 <HAL_TIM_Base_MspInit+0x9c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d102      	bne.n	800eda8 <HAL_TIM_Base_MspInit+0x94>
		TIM8_SYNC_PWM_MspInit(htim_base);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fed4 	bl	800fb50 <TIM8_SYNC_PWM_MspInit>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 800eda8:	bf00      	nop
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	40010400 	.word	0x40010400
 800edb4:	40001000 	.word	0x40001000
 800edb8:	40001400 	.word	0x40001400
 800edbc:	200047c0 	.word	0x200047c0
 800edc0:	40001c00 	.word	0x40001c00
 800edc4:	40000400 	.word	0x40000400

0800edc8 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08c      	sub	sp, #48	; 0x30
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	603b      	str	r3, [r7, #0]

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t result = UNKNOW_ERROR;
 800edda:	23ff      	movs	r3, #255	; 0xff
 800eddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isFreqPassed == true) {
 800ede0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d008      	beq.n	800edfa <TIM_Reconfig+0x32>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	005a      	lsls	r2, r3, #1
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	fbb2 f3f3 	udiv	r3, r2, r3
 800edf2:	3301      	adds	r3, #1
 800edf4:	085b      	lsrs	r3, r3, #1
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edf8:	e001      	b.n	800edfe <TIM_Reconfig+0x36>
	} else {
		clkDiv = samplingFreq;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (clkDiv == 0) { //error
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d103      	bne.n	800ee0c <TIM_Reconfig+0x44>
		result = GEN_FREQ_MISMATCH;
 800ee04:	236c      	movs	r3, #108	; 0x6c
 800ee06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee0a:	e059      	b.n	800eec0 <TIM_Reconfig+0xf8>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee12:	da09      	bge.n	800ee28 <TIM_Reconfig+0x60>
		prescaler = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	857b      	strh	r3, [r7, #42]	; 0x2a
		autoReloadReg = clkDiv - 1;
 800ee18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	853b      	strh	r3, [r7, #40]	; 0x28
		result = 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee26:	e04b      	b.n	800eec0 <TIM_Reconfig+0xf8>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 800ee28:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2c:	61fb      	str	r3, [r7, #28]
		uint32_t errMin = 0xFFFFFFFF;
 800ee2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee32:	61bb      	str	r3, [r7, #24]
		uint16_t ratio = clkDiv >> 16;
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee36:	141b      	asrs	r3, r3, #16
 800ee38:	82fb      	strh	r3, [r7, #22]
		uint16_t div;

		while (errVal != 0) {
 800ee3a:	e023      	b.n	800ee84 <TIM_Reconfig+0xbc>
			ratio++;
 800ee3c:	8afb      	ldrh	r3, [r7, #22]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	82fb      	strh	r3, [r7, #22]
			div = clkDiv / ratio;
 800ee42:	8afb      	ldrh	r3, [r7, #22]
 800ee44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee46:	fb92 f3f3 	sdiv	r3, r2, r3
 800ee4a:	82bb      	strh	r3, [r7, #20]
			errVal = clkDiv - (div * ratio);
 800ee4c:	8abb      	ldrh	r3, [r7, #20]
 800ee4e:	8afa      	ldrh	r2, [r7, #22]
 800ee50:	fb02 f303 	mul.w	r3, r2, r3
 800ee54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	61fb      	str	r3, [r7, #28]

			if (errVal < errMin) {
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d203      	bcs.n	800ee6a <TIM_Reconfig+0xa2>
				errMin = errVal;
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	61bb      	str	r3, [r7, #24]
				errMinRatio = ratio;
 800ee66:	8afb      	ldrh	r3, [r7, #22]
 800ee68:	627b      	str	r3, [r7, #36]	; 0x24
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800ee6a:	8afb      	ldrh	r3, [r7, #22]
 800ee6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d107      	bne.n	800ee84 <TIM_Reconfig+0xbc>
				div = clkDiv / errMinRatio;
 800ee74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7c:	82bb      	strh	r3, [r7, #20]
				ratio = errMinRatio;
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee80:	82fb      	strh	r3, [r7, #22]
				break;
 800ee82:	e002      	b.n	800ee8a <TIM_Reconfig+0xc2>
		while (errVal != 0) {
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1d8      	bne.n	800ee3c <TIM_Reconfig+0x74>
			}
		}

		if (ratio > div) {
 800ee8a:	8afa      	ldrh	r2, [r7, #22]
 800ee8c:	8abb      	ldrh	r3, [r7, #20]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d906      	bls.n	800eea0 <TIM_Reconfig+0xd8>
			prescaler = div - 1;
 800ee92:	8abb      	ldrh	r3, [r7, #20]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = ratio - 1;
 800ee98:	8afb      	ldrh	r3, [r7, #22]
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	853b      	strh	r3, [r7, #40]	; 0x28
 800ee9e:	e005      	b.n	800eeac <TIM_Reconfig+0xe4>
		} else {
			prescaler = ratio - 1;
 800eea0:	8afb      	ldrh	r3, [r7, #22]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = div - 1;
 800eea6:	8abb      	ldrh	r3, [r7, #20]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		if (errVal) {
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <TIM_Reconfig+0xf2>
			result = GEN_FREQ_IS_INACCURATE;
 800eeb2:	236b      	movs	r3, #107	; 0x6b
 800eeb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eeb8:	e002      	b.n	800eec0 <TIM_Reconfig+0xf8>
		} else {
			result = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	if (realFreq != 0) {
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00b      	beq.n	800eede <TIM_Reconfig+0x116>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800eec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eec8:	3301      	adds	r3, #1
 800eeca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eecc:	3201      	adds	r2, #1
 800eece:	fb02 f303 	mul.w	r3, r2, r3
 800eed2:	461a      	mov	r2, r3
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	fbb3 f2f2 	udiv	r2, r3, r2
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	601a      	str	r2, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eee4:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eeec:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fefe 	bl	800ecf4 <LL_TIM_GenerateEvent_UPDATE>

	return result;
 800eef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3730      	adds	r7, #48	; 0x30
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800ef04:	b5b0      	push	{r4, r5, r7, lr}
 800ef06:	b08e      	sub	sp, #56	; 0x38
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	ed87 0b00 	vstr	d0, [r7]
//	return realFreq;

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	633b      	str	r3, [r7, #48]	; 0x30
	double realFreq;
	uint8_t result = UNKNOW_ERROR;
 800ef16:	23ff      	movs	r3, #255	; 0xff
 800ef18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7f1 fab7 	bl	8000494 <__aeabi_ui2d>
 800ef26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef2a:	f7f1 fc57 	bl	80007dc <__aeabi_ddiv>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	460c      	mov	r4, r1
 800ef32:	4618      	mov	r0, r3
 800ef34:	4621      	mov	r1, r4
 800ef36:	f04f 0200 	mov.w	r2, #0
 800ef3a:	4b53      	ldr	r3, [pc, #332]	; (800f088 <TIM_ReconfigPrecise+0x184>)
 800ef3c:	f7f1 f96e 	bl	800021c <__adddf3>
 800ef40:	4603      	mov	r3, r0
 800ef42:	460c      	mov	r4, r1
 800ef44:	4618      	mov	r0, r3
 800ef46:	4621      	mov	r1, r4
 800ef48:	f04f 0200 	mov.w	r2, #0
 800ef4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef50:	f7f1 fc44 	bl	80007dc <__aeabi_ddiv>
 800ef54:	4603      	mov	r3, r0
 800ef56:	460c      	mov	r4, r1
 800ef58:	4618      	mov	r0, r3
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	f7f1 fdc4 	bl	8000ae8 <__aeabi_d2iz>
 800ef60:	4603      	mov	r3, r0
 800ef62:	61fb      	str	r3, [r7, #28]

	if (clkDiv == 0) { //error
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <TIM_ReconfigPrecise+0x6e>
		result = GEN_FREQ_MISMATCH;
 800ef6a:	236c      	movs	r3, #108	; 0x6c
 800ef6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ef70:	e059      	b.n	800f026 <TIM_ReconfigPrecise+0x122>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef78:	da09      	bge.n	800ef8e <TIM_ReconfigPrecise+0x8a>
		prescaler = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	86fb      	strh	r3, [r7, #54]	; 0x36
		autoReloadReg = clkDiv - 1;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	3b01      	subs	r3, #1
 800ef84:	86bb      	strh	r3, [r7, #52]	; 0x34
		result = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ef8c:	e04b      	b.n	800f026 <TIM_ReconfigPrecise+0x122>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 800ef8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t errMin = 0xFFFFFFFF;
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295
 800ef98:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t ratio = clkDiv >> 16;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	141b      	asrs	r3, r3, #16
 800ef9e:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t div;

		while (errVal != 0) {
 800efa0:	e023      	b.n	800efea <TIM_ReconfigPrecise+0xe6>
			ratio++;
 800efa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efa4:	3301      	adds	r3, #1
 800efa6:	84fb      	strh	r3, [r7, #38]	; 0x26
			div = clkDiv / ratio;
 800efa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	fb92 f3f3 	sdiv	r3, r2, r3
 800efb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			errVal = clkDiv - (div * ratio);
 800efb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800efb6:	fb02 f303 	mul.w	r3, r2, r3
 800efba:	69fa      	ldr	r2, [r7, #28]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (errVal < errMin) {
 800efc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d203      	bcs.n	800efd0 <TIM_ReconfigPrecise+0xcc>
				errMin = errVal;
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	62bb      	str	r3, [r7, #40]	; 0x28
				errMinRatio = ratio;
 800efcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efce:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800efd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d107      	bne.n	800efea <TIM_ReconfigPrecise+0xe6>
				div = clkDiv / errMinRatio;
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	fbb2 f3f3 	udiv	r3, r2, r3
 800efe2:	84bb      	strh	r3, [r7, #36]	; 0x24
				ratio = errMinRatio;
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 800efe8:	e002      	b.n	800eff0 <TIM_ReconfigPrecise+0xec>
		while (errVal != 0) {
 800efea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1d8      	bne.n	800efa2 <TIM_ReconfigPrecise+0x9e>
			}
		}

		if (ratio > div) {
 800eff0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d906      	bls.n	800f006 <TIM_ReconfigPrecise+0x102>
			prescaler = div - 1;
 800eff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800effa:	3b01      	subs	r3, #1
 800effc:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = ratio - 1;
 800effe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f000:	3b01      	subs	r3, #1
 800f002:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f004:	e005      	b.n	800f012 <TIM_ReconfigPrecise+0x10e>
		} else {
			prescaler = ratio - 1;
 800f006:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f008:	3b01      	subs	r3, #1
 800f00a:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = div - 1;
 800f00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f00e:	3b01      	subs	r3, #1
 800f010:	86bb      	strh	r3, [r7, #52]	; 0x34
		}

		if (errVal) {
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	2b00      	cmp	r3, #0
 800f016:	d003      	beq.n	800f020 <TIM_ReconfigPrecise+0x11c>
			result = GEN_FREQ_IS_INACCURATE;
 800f018:	236b      	movs	r3, #107	; 0x6b
 800f01a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f01e:	e002      	b.n	800f026 <TIM_ReconfigPrecise+0x122>
		} else {
			result = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 800f026:	68b8      	ldr	r0, [r7, #8]
 800f028:	f7f1 fa34 	bl	8000494 <__aeabi_ui2d>
 800f02c:	4604      	mov	r4, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f032:	3301      	adds	r3, #1
 800f034:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f036:	3201      	adds	r2, #1
 800f038:	fb02 f303 	mul.w	r3, r2, r3
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f1 fa39 	bl	80004b4 <__aeabi_i2d>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 fbc7 	bl	80007dc <__aeabi_ddiv>
 800f04e:	4603      	mov	r3, r0
 800f050:	460c      	mov	r4, r1
 800f052:	e9c7 3404 	strd	r3, r4, [r7, #16]

	htim_base->Instance->ARR = autoReloadReg;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f05c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f064:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fe42 	bl	800ecf4 <LL_TIM_GenerateEvent_UPDATE>

	return realFreq;
 800f070:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f074:	ec44 3b17 	vmov	d7, r3, r4
}
 800f078:	eeb0 0a47 	vmov.f32	s0, s14
 800f07c:	eef0 0a67 	vmov.f32	s1, s15
 800f080:	3738      	adds	r7, #56	; 0x38
 800f082:	46bd      	mov	sp, r7
 800f084:	bdb0      	pop	{r4, r5, r7, pc}
 800f086:	bf00      	nop
 800f088:	3ff00000 	.word	0x3ff00000

0800f08c <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 800f092:	4b15      	ldr	r3, [pc, #84]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f094:	4a15      	ldr	r2, [pc, #84]	; (800f0ec <MX_TIM6_Init+0x60>)
 800f096:	601a      	str	r2, [r3, #0]

	htim6.Init.Period = 0x7FF;
 800f098:	4b13      	ldr	r3, [pc, #76]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f09a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f09e:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = 0;
 800f0a0:	4b11      	ldr	r3, [pc, #68]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	605a      	str	r2, [r3, #4]
	htim6.Init.ClockDivision = 0;
 800f0a6:	4b10      	ldr	r3, [pc, #64]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&htim6)!= HAL_OK)
 800f0b2:	480d      	ldr	r0, [pc, #52]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f0b4:	f7f9 f8a8 	bl	8008208 <HAL_TIM_Base_Init>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <MX_TIM6_Init+0x36>
		  {
		    Error_Handler();
 800f0be:	f7ff fcfa 	bl	800eab6 <Error_Handler>
		  }

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f0c2:	2320      	movs	r3, #32
 800f0c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	607b      	str	r3, [r7, #4]

	if(HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)!= HAL_OK)
 800f0ca:	463b      	mov	r3, r7
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4806      	ldr	r0, [pc, #24]	; (800f0e8 <MX_TIM6_Init+0x5c>)
 800f0d0:	f7fb f85a 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <MX_TIM6_Init+0x52>
		  {
		    Error_Handler();
 800f0da:	f7ff fcec 	bl	800eab6 <Error_Handler>
		  }

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800f0de:	bf00      	nop
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	200140d8 	.word	0x200140d8
 800f0ec:	40001000 	.word	0x40001000

0800f0f0 <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
// */
void MX_TIM7_Init(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <MX_TIM7_Init+0x50>)
 800f0f8:	4a12      	ldr	r2, [pc, #72]	; (800f144 <MX_TIM7_Init+0x54>)
 800f0fa:	601a      	str	r2, [r3, #0]

	htim7.Init.Period = 0x7FF;
 800f0fc:	4b10      	ldr	r3, [pc, #64]	; (800f140 <MX_TIM7_Init+0x50>)
 800f0fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f102:	60da      	str	r2, [r3, #12]
	htim7.Init.Prescaler = 0;
 800f104:	4b0e      	ldr	r3, [pc, #56]	; (800f140 <MX_TIM7_Init+0x50>)
 800f106:	2200      	movs	r2, #0
 800f108:	605a      	str	r2, [r3, #4]
	htim7.Init.ClockDivision = 0;
 800f10a:	4b0d      	ldr	r3, [pc, #52]	; (800f140 <MX_TIM7_Init+0x50>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	611a      	str	r2, [r3, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <MX_TIM7_Init+0x50>)
 800f112:	2200      	movs	r2, #0
 800f114:	609a      	str	r2, [r3, #8]
	HAL_TIM_Base_Init(&htim7);
 800f116:	480a      	ldr	r0, [pc, #40]	; (800f140 <MX_TIM7_Init+0x50>)
 800f118:	f7f9 f876 	bl	8008208 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f11c:	2320      	movs	r3, #32
 800f11e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f120:	2300      	movs	r3, #0
 800f122:	607b      	str	r3, [r7, #4]

	if(HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)!= HAL_OK)
 800f124:	463b      	mov	r3, r7
 800f126:	4619      	mov	r1, r3
 800f128:	4805      	ldr	r0, [pc, #20]	; (800f140 <MX_TIM7_Init+0x50>)
 800f12a:	f7fb f82d 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <MX_TIM7_Init+0x48>
		  {
		    Error_Handler();
 800f134:	f7ff fcbf 	bl	800eab6 <Error_Handler>
		  }

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20014158 	.word	0x20014158
 800f144:	40001400 	.word	0x40001400

0800f148 <MX_TIM1_GEN_PWM_Init>:
 * @note   TIM1 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM1_GEN_PWM_Init(void)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b096      	sub	sp, #88	; 0x58
 800f14c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* ARR = 1024 (10 bit resolution in default). F303 -> PA9 -> D8 -> Channel 1 */
	htim1.Instance = TIM13;
 800f14e:	4b33      	ldr	r3, [pc, #204]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f150:	4a33      	ldr	r2, [pc, #204]	; (800f220 <MX_TIM1_GEN_PWM_Init+0xd8>)
 800f152:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800f154:	4b31      	ldr	r3, [pc, #196]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f156:	2200      	movs	r2, #0
 800f158:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f15a:	4b30      	ldr	r3, [pc, #192]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1023;
 800f160:	4b2e      	ldr	r3, [pc, #184]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f162:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f166:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f168:	4b2c      	ldr	r3, [pc, #176]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800f16e:	4b2b      	ldr	r3, [pc, #172]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f170:	2200      	movs	r2, #0
 800f172:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f174:	4b29      	ldr	r3, [pc, #164]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f176:	2280      	movs	r2, #128	; 0x80
 800f178:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 800f17a:	4828      	ldr	r0, [pc, #160]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f17c:	f7f9 f844 	bl	8008208 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f184:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800f186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f18a:	4619      	mov	r1, r3
 800f18c:	4823      	ldr	r0, [pc, #140]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f18e:	f7fa f873 	bl	8009278 <HAL_TIM_ConfigClockSource>

	if(HAL_TIM_PWM_Init(&htim1)!= HAL_OK)
 800f192:	4822      	ldr	r0, [pc, #136]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f194:	f7f9 faa8 	bl	80086e8 <HAL_TIM_PWM_Init>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <MX_TIM1_GEN_PWM_Init+0x5a>
		  {
		    Error_Handler();
 800f19e:	f7ff fc8a 	bl	800eab6 <Error_Handler>
		  }

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800f1aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	481a      	ldr	r0, [pc, #104]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f1b2:	f7fa ffe9 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f1b6:	2360      	movs	r3, #96	; 0x60
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 512;
 800f1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 800f1d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4619      	mov	r1, r3
 800f1dc:	480f      	ldr	r0, [pc, #60]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f1de:	f7f9 fe6f 	bl	8008ec0 <HAL_TIM_PWM_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f1f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1fa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f200:	2300      	movs	r3, #0
 800f202:	623b      	str	r3, [r7, #32]
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800f204:	1d3b      	adds	r3, r7, #4
 800f206:	4619      	mov	r1, r3
 800f208:	4804      	ldr	r0, [pc, #16]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f20a:	f7fb f89b 	bl	800a344 <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_TIM_Base_MspInit(&htim1);
 800f20e:	4803      	ldr	r0, [pc, #12]	; (800f21c <MX_TIM1_GEN_PWM_Init+0xd4>)
 800f210:	f7ff fd80 	bl	800ed14 <HAL_TIM_Base_MspInit>
}
 800f214:	bf00      	nop
 800f216:	3758      	adds	r7, #88	; 0x58
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	20014118 	.word	0x20014118
 800f220:	40001c00 	.word	0x40001c00

0800f224 <MX_TIM3_GEN_PWM_Init>:
 * @note   TIM3 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM3_GEN_PWM_Init(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b08e      	sub	sp, #56	; 0x38
 800f228:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	/* F303 -> PB4 -> D5 -> Channel 2  */
	htim3.Instance = TIM3;
 800f22a:	4b21      	ldr	r3, [pc, #132]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f22c:	4a21      	ldr	r2, [pc, #132]	; (800f2b4 <MX_TIM3_GEN_PWM_Init+0x90>)
 800f22e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800f230:	4b1f      	ldr	r3, [pc, #124]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f232:	2200      	movs	r2, #0
 800f234:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f236:	4b1e      	ldr	r3, [pc, #120]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f238:	2200      	movs	r2, #0
 800f23a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 511;
 800f23c:	4b1c      	ldr	r3, [pc, #112]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f23e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f242:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f244:	4b1a      	ldr	r3, [pc, #104]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f246:	2200      	movs	r2, #0
 800f248:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f24a:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f24c:	2280      	movs	r2, #128	; 0x80
 800f24e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 800f250:	4817      	ldr	r0, [pc, #92]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f252:	f7f8 ffd9 	bl	8008208 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f25a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800f25c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f260:	4619      	mov	r1, r3
 800f262:	4813      	ldr	r0, [pc, #76]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f264:	f7fa f808 	bl	8009278 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim3);
 800f268:	4811      	ldr	r0, [pc, #68]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f26a:	f7f9 fa3d 	bl	80086e8 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f26e:	2300      	movs	r3, #0
 800f270:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f272:	2300      	movs	r3, #0
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800f276:	f107 0320 	add.w	r3, r7, #32
 800f27a:	4619      	mov	r1, r3
 800f27c:	480c      	ldr	r0, [pc, #48]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f27e:	f7fa ff83 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f282:	2360      	movs	r3, #96	; 0x60
 800f284:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 256;
 800f286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f28a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f28c:	2300      	movs	r3, #0
 800f28e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f290:	2300      	movs	r3, #0
 800f292:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800f294:	1d3b      	adds	r3, r7, #4
 800f296:	2200      	movs	r2, #0
 800f298:	4619      	mov	r1, r3
 800f29a:	4805      	ldr	r0, [pc, #20]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f29c:	f7f9 fe10 	bl	8008ec0 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_Base_MspInit(&htim3);
 800f2a0:	4803      	ldr	r0, [pc, #12]	; (800f2b0 <MX_TIM3_GEN_PWM_Init+0x8c>)
 800f2a2:	f7ff fd37 	bl	800ed14 <HAL_TIM_Base_MspInit>
}
 800f2a6:	bf00      	nop
 800f2a8:	3738      	adds	r7, #56	; 0x38
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20014038 	.word	0x20014038
 800f2b4:	40000400 	.word	0x40000400

0800f2b8 <MX_TIM6_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM6 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM6_GEN_PWM_Init(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance = TIM6;
 800f2be:	4b11      	ldr	r3, [pc, #68]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2c0:	4a11      	ldr	r2, [pc, #68]	; (800f308 <MX_TIM6_GEN_PWM_Init+0x50>)
 800f2c2:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 800f2c4:	4b0f      	ldr	r3, [pc, #60]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f2ca:	4b0e      	ldr	r3, [pc, #56]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0x7FF;
 800f2d0:	4b0c      	ldr	r3, [pc, #48]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f2d6:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f2d8:	4b0a      	ldr	r3, [pc, #40]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 800f2de:	4809      	ldr	r0, [pc, #36]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2e0:	f7f8 ff92 	bl	8008208 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f2e4:	2320      	movs	r3, #32
 800f2e6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800f2ec:	463b      	mov	r3, r7
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4804      	ldr	r0, [pc, #16]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2f2:	f7fa ff49 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>

	TIM6_GEN_PWM_MspInit(&htim6);
 800f2f6:	4803      	ldr	r0, [pc, #12]	; (800f304 <MX_TIM6_GEN_PWM_Init+0x4c>)
 800f2f8:	f000 f8ba 	bl	800f470 <TIM6_GEN_PWM_MspInit>

}
 800f2fc:	bf00      	nop
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	200140d8 	.word	0x200140d8
 800f308:	40001000 	.word	0x40001000

0800f30c <MX_TIM7_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM7 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM7_GEN_PWM_Init(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 800f312:	4b11      	ldr	r3, [pc, #68]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f314:	4a11      	ldr	r2, [pc, #68]	; (800f35c <MX_TIM7_GEN_PWM_Init+0x50>)
 800f316:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 800f318:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f31e:	4b0e      	ldr	r3, [pc, #56]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f320:	2200      	movs	r2, #0
 800f322:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 0x7FF;
 800f324:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f326:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f32a:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f32c:	4b0a      	ldr	r3, [pc, #40]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f32e:	2200      	movs	r2, #0
 800f330:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 800f332:	4809      	ldr	r0, [pc, #36]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f334:	f7f8 ff68 	bl	8008208 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f338:	2320      	movs	r3, #32
 800f33a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f33c:	2300      	movs	r3, #0
 800f33e:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800f340:	463b      	mov	r3, r7
 800f342:	4619      	mov	r1, r3
 800f344:	4804      	ldr	r0, [pc, #16]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f346:	f7fa ff1f 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>

	TIM7_GEN_PWM_MspInit(&htim7);
 800f34a:	4803      	ldr	r0, [pc, #12]	; (800f358 <MX_TIM7_GEN_PWM_Init+0x4c>)
 800f34c:	f000 f8dc 	bl	800f508 <TIM7_GEN_PWM_MspInit>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20014158 	.word	0x20014158
 800f35c:	40001400 	.word	0x40001400

0800f360 <TIM6_GEN_DAC_MspInit>:
#endif //USE_GEN_PWM

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]
 800f36c:	4b08      	ldr	r3, [pc, #32]	; (800f390 <TIM6_GEN_DAC_MspInit+0x30>)
 800f36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f370:	4a07      	ldr	r2, [pc, #28]	; (800f390 <TIM6_GEN_DAC_MspInit+0x30>)
 800f372:	f043 0310 	orr.w	r3, r3, #16
 800f376:	6413      	str	r3, [r2, #64]	; 0x40
 800f378:	4b05      	ldr	r3, [pc, #20]	; (800f390 <TIM6_GEN_DAC_MspInit+0x30>)
 800f37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37c:	f003 0310 	and.w	r3, r3, #16
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
}
 800f384:	bf00      	nop
 800f386:	3714      	adds	r7, #20
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	40023800 	.word	0x40023800

0800f394 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 800f39c:	2300      	movs	r3, #0
 800f39e:	60fb      	str	r3, [r7, #12]
 800f3a0:	4b08      	ldr	r3, [pc, #32]	; (800f3c4 <TIM7_GEN_DAC_MspInit+0x30>)
 800f3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a4:	4a07      	ldr	r2, [pc, #28]	; (800f3c4 <TIM7_GEN_DAC_MspInit+0x30>)
 800f3a6:	f043 0320 	orr.w	r3, r3, #32
 800f3aa:	6413      	str	r3, [r2, #64]	; 0x40
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <TIM7_GEN_DAC_MspInit+0x30>)
 800f3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b0:	f003 0320 	and.w	r3, r3, #32
 800f3b4:	60fb      	str	r3, [r7, #12]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
}
 800f3b8:	bf00      	nop
 800f3ba:	3714      	adds	r7, #20
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	40023800 	.word	0x40023800

0800f3c8 <TIM1_GEN_PWM_MspInit>:
#endif //USE_GEN

#ifdef USE_GEN_PWM

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM13_CLK_ENABLE();
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60bb      	str	r3, [r7, #8]
 800f3d4:	4b0f      	ldr	r3, [pc, #60]	; (800f414 <TIM1_GEN_PWM_MspInit+0x4c>)
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	4a0e      	ldr	r2, [pc, #56]	; (800f414 <TIM1_GEN_PWM_MspInit+0x4c>)
 800f3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3de:	6413      	str	r3, [r2, #64]	; 0x40
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	; (800f414 <TIM1_GEN_PWM_MspInit+0x4c>)
 800f3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e8:	60bb      	str	r3, [r7, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f3ec:	2340      	movs	r3, #64	; 0x40
 800f3ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800f3fc:	2309      	movs	r3, #9
 800f3fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f400:	f107 030c 	add.w	r3, r7, #12
 800f404:	4619      	mov	r1, r3
 800f406:	4804      	ldr	r0, [pc, #16]	; (800f418 <TIM1_GEN_PWM_MspInit+0x50>)
 800f408:	f7f7 fd02 	bl	8006e10 <HAL_GPIO_Init>
}
 800f40c:	bf00      	nop
 800f40e:	3720      	adds	r7, #32
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	40023800 	.word	0x40023800
 800f418:	40020000 	.word	0x40020000

0800f41c <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 800f424:	2300      	movs	r3, #0
 800f426:	60bb      	str	r3, [r7, #8]
 800f428:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <TIM3_GEN_PWM_MspInit+0x4c>)
 800f42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42c:	4a0e      	ldr	r2, [pc, #56]	; (800f468 <TIM3_GEN_PWM_MspInit+0x4c>)
 800f42e:	f043 0302 	orr.w	r3, r3, #2
 800f432:	6413      	str	r3, [r2, #64]	; 0x40
 800f434:	4b0c      	ldr	r3, [pc, #48]	; (800f468 <TIM3_GEN_PWM_MspInit+0x4c>)
 800f436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f438:	f003 0302 	and.w	r3, r3, #2
 800f43c:	60bb      	str	r3, [r7, #8]
 800f43e:	68bb      	ldr	r3, [r7, #8]

	/**TIM3 GPIO Configuration
		PB4     ------> TIM3_CH1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f440:	2310      	movs	r3, #16
 800f442:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f444:	2302      	movs	r3, #2
 800f446:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f448:	2300      	movs	r3, #0
 800f44a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800f44c:	2301      	movs	r3, #1
 800f44e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f450:	2302      	movs	r3, #2
 800f452:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f454:	f107 030c 	add.w	r3, r7, #12
 800f458:	4619      	mov	r1, r3
 800f45a:	4804      	ldr	r0, [pc, #16]	; (800f46c <TIM3_GEN_PWM_MspInit+0x50>)
 800f45c:	f7f7 fcd8 	bl	8006e10 <HAL_GPIO_Init>
}
 800f460:	bf00      	nop
 800f462:	3720      	adds	r7, #32
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	40023800 	.word	0x40023800
 800f46c:	40020400 	.word	0x40020400

0800f470 <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 800f478:	2300      	movs	r3, #0
 800f47a:	60bb      	str	r3, [r7, #8]
 800f47c:	4b1f      	ldr	r3, [pc, #124]	; (800f4fc <TIM6_GEN_PWM_MspInit+0x8c>)
 800f47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f480:	4a1e      	ldr	r2, [pc, #120]	; (800f4fc <TIM6_GEN_PWM_MspInit+0x8c>)
 800f482:	f043 0310 	orr.w	r3, r3, #16
 800f486:	6413      	str	r3, [r2, #64]	; 0x40
 800f488:	4b1c      	ldr	r3, [pc, #112]	; (800f4fc <TIM6_GEN_PWM_MspInit+0x8c>)
 800f48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48c:	f003 0310 	and.w	r3, r3, #16
 800f490:	60bb      	str	r3, [r7, #8]
 800f492:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA1_Stream1;
 800f494:	4b1a      	ldr	r3, [pc, #104]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f496:	4a1b      	ldr	r2, [pc, #108]	; (800f504 <TIM6_GEN_PWM_MspInit+0x94>)
 800f498:	601a      	str	r2, [r3, #0]
	hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 800f49a:	4b19      	ldr	r3, [pc, #100]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f49c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f4a0:	605a      	str	r2, [r3, #4]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f4a2:	4b17      	ldr	r3, [pc, #92]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4a4:	2240      	movs	r2, #64	; 0x40
 800f4a6:	609a      	str	r2, [r3, #8]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800f4a8:	4b15      	ldr	r3, [pc, #84]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	60da      	str	r2, [r3, #12]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800f4ae:	4b14      	ldr	r3, [pc, #80]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4b4:	611a      	str	r2, [r3, #16]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f4b6:	4b12      	ldr	r3, [pc, #72]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4bc:	615a      	str	r2, [r3, #20]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f4be:	4b10      	ldr	r3, [pc, #64]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f4c4:	619a      	str	r2, [r3, #24]
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800f4c6:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4cc:	61da      	str	r2, [r3, #28]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800f4ce:	4b0c      	ldr	r3, [pc, #48]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f4d4:	621a      	str	r2, [r3, #32]
	if(HAL_DMA_Init(&hdma_tim6_up)!= HAL_OK)
 800f4d6:	480a      	ldr	r0, [pc, #40]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4d8:	f7f6 ff88 	bl	80063ec <HAL_DMA_Init>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <TIM6_GEN_PWM_MspInit+0x76>
		  {
		    Error_Handler();
 800f4e2:	f7ff fae8 	bl	800eab6 <Error_Handler>
		  }
	//__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a05      	ldr	r2, [pc, #20]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4ea:	621a      	str	r2, [r3, #32]
 800f4ec:	4a04      	ldr	r2, [pc, #16]	; (800f500 <TIM6_GEN_PWM_MspInit+0x90>)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f4f2:	bf00      	nop
 800f4f4:	3720      	adds	r7, #32
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	40023800 	.word	0x40023800
 800f500:	20014078 	.word	0x20014078
 800f504:	40026028 	.word	0x40026028

0800f508 <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM7_CLK_ENABLE();
 800f510:	2300      	movs	r3, #0
 800f512:	60bb      	str	r3, [r7, #8]
 800f514:	4b1f      	ldr	r3, [pc, #124]	; (800f594 <TIM7_GEN_PWM_MspInit+0x8c>)
 800f516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f518:	4a1e      	ldr	r2, [pc, #120]	; (800f594 <TIM7_GEN_PWM_MspInit+0x8c>)
 800f51a:	f043 0320 	orr.w	r3, r3, #32
 800f51e:	6413      	str	r3, [r2, #64]	; 0x40
 800f520:	4b1c      	ldr	r3, [pc, #112]	; (800f594 <TIM7_GEN_PWM_MspInit+0x8c>)
 800f522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f524:	f003 0320 	and.w	r3, r3, #32
 800f528:	60bb      	str	r3, [r7, #8]
 800f52a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA1_Stream2;   // DMA2_Channel4
 800f52c:	4b1a      	ldr	r3, [pc, #104]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f52e:	4a1b      	ldr	r2, [pc, #108]	; (800f59c <TIM7_GEN_PWM_MspInit+0x94>)
 800f530:	601a      	str	r2, [r3, #0]
	hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 800f532:	4b19      	ldr	r3, [pc, #100]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f538:	605a      	str	r2, [r3, #4]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f53a:	4b17      	ldr	r3, [pc, #92]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f53c:	2240      	movs	r2, #64	; 0x40
 800f53e:	609a      	str	r2, [r3, #8]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800f540:	4b15      	ldr	r3, [pc, #84]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f542:	2200      	movs	r2, #0
 800f544:	60da      	str	r2, [r3, #12]
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800f546:	4b14      	ldr	r3, [pc, #80]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f54c:	611a      	str	r2, [r3, #16]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f54e:	4b12      	ldr	r3, [pc, #72]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f554:	615a      	str	r2, [r3, #20]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f556:	4b10      	ldr	r3, [pc, #64]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f55c:	619a      	str	r2, [r3, #24]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 800f55e:	4b0e      	ldr	r3, [pc, #56]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f560:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f564:	61da      	str	r2, [r3, #28]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800f566:	4b0c      	ldr	r3, [pc, #48]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f56c:	621a      	str	r2, [r3, #32]
	if(HAL_DMA_Init(&hdma_tim7_up)!= HAL_OK)
 800f56e:	480a      	ldr	r0, [pc, #40]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f570:	f7f6 ff3c 	bl	80063ec <HAL_DMA_Init>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <TIM7_GEN_PWM_MspInit+0x76>
			  {
			    Error_Handler();
 800f57a:	f7ff fa9c 	bl	800eab6 <Error_Handler>
			  }
	//__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a05      	ldr	r2, [pc, #20]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f582:	621a      	str	r2, [r3, #32]
 800f584:	4a04      	ldr	r2, [pc, #16]	; (800f598 <TIM7_GEN_PWM_MspInit+0x90>)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f58a:	bf00      	nop
 800f58c:	3720      	adds	r7, #32
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	40023800 	.word	0x40023800
 800f598:	20013fd8 	.word	0x20013fd8
 800f59c:	40026040 	.word	0x40026040

0800f5a0 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b088      	sub	sp, #32
 800f5a4:	af02      	add	r7, sp, #8
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	607a      	str	r2, [r7, #4]
 800f5ac:	72fb      	strb	r3, [r7, #11]
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetHCLKFreq()/2;
 800f5ae:	f7f8 f903 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	085b      	lsrs	r3, r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
	if(chan==0){
 800f5b8:	7afb      	ldrb	r3, [r7, #11]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d109      	bne.n	800f5d2 <TIM_Reconfig_gen+0x32>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 800f5be:	2301      	movs	r3, #1
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	6979      	ldr	r1, [r7, #20]
 800f5c8:	480b      	ldr	r0, [pc, #44]	; (800f5f8 <TIM_Reconfig_gen+0x58>)
 800f5ca:	f7ff fbfd 	bl	800edc8 <TIM_Reconfig>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	e00d      	b.n	800f5ee <TIM_Reconfig_gen+0x4e>
	}else if(chan==1){
 800f5d2:	7afb      	ldrb	r3, [r7, #11]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d109      	bne.n	800f5ec <TIM_Reconfig_gen+0x4c>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 800f5d8:	2301      	movs	r3, #1
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	6979      	ldr	r1, [r7, #20]
 800f5e2:	4806      	ldr	r0, [pc, #24]	; (800f5fc <TIM_Reconfig_gen+0x5c>)
 800f5e4:	f7ff fbf0 	bl	800edc8 <TIM_Reconfig>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	e000      	b.n	800f5ee <TIM_Reconfig_gen+0x4e>
	}else{
		return 0;
 800f5ec:	2300      	movs	r3, #0
	}
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3718      	adds	r7, #24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	20014158 	.word	0x20014158
 800f5fc:	200140d8 	.word	0x200140d8

0800f600 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	ed87 0b02 	vstr	d0, [r7, #8]
 800f60a:	4603      	mov	r3, r0
 800f60c:	71fb      	strb	r3, [r7, #7]
	uint32_t periphClock;
	if(chan==0){
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10f      	bne.n	800f634 <TIM_Reconfig_GenPwm+0x34>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCC_GetHCLKFreq()/2;//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM);
 800f614:	f7f8 f8d0 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800f618:	4603      	mov	r3, r0
 800f61a:	085b      	lsrs	r3, r3, #1
 800f61c:	617b      	str	r3, [r7, #20]
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800f61e:	ed97 0b02 	vldr	d0, [r7, #8]
 800f622:	6979      	ldr	r1, [r7, #20]
 800f624:	4814      	ldr	r0, [pc, #80]	; (800f678 <TIM_Reconfig_GenPwm+0x78>)
 800f626:	f7ff fc6d 	bl	800ef04 <TIM_ReconfigPrecise>
 800f62a:	eeb0 7a40 	vmov.f32	s14, s0
 800f62e:	eef0 7a60 	vmov.f32	s15, s1
 800f632:	e014      	b.n	800f65e <TIM_Reconfig_GenPwm+0x5e>
	}else if(chan==1){
 800f634:	79fb      	ldrb	r3, [r7, #7]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d10f      	bne.n	800f65a <TIM_Reconfig_GenPwm+0x5a>
		periphClock = HAL_RCC_GetHCLKFreq()/2;//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM);
 800f63a:	f7f8 f8bd 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800f63e:	4603      	mov	r3, r0
 800f640:	085b      	lsrs	r3, r3, #1
 800f642:	617b      	str	r3, [r7, #20]
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 800f644:	ed97 0b02 	vldr	d0, [r7, #8]
 800f648:	6979      	ldr	r1, [r7, #20]
 800f64a:	480c      	ldr	r0, [pc, #48]	; (800f67c <TIM_Reconfig_GenPwm+0x7c>)
 800f64c:	f7ff fc5a 	bl	800ef04 <TIM_ReconfigPrecise>
 800f650:	eeb0 7a40 	vmov.f32	s14, s0
 800f654:	eef0 7a60 	vmov.f32	s15, s1
 800f658:	e001      	b.n	800f65e <TIM_Reconfig_GenPwm+0x5e>
	}else{
		return 0;
 800f65a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800f670 <TIM_Reconfig_GenPwm+0x70>
	}
}
 800f65e:	eeb0 0a47 	vmov.f32	s0, s14
 800f662:	eef0 0a67 	vmov.f32	s1, s15
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	f3af 8000 	nop.w
	...
 800f678:	20014038 	.word	0x20014038
 800f67c:	20014118 	.word	0x20014118

0800f680 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 800f684:	4803      	ldr	r0, [pc, #12]	; (800f694 <TIMGenEnable+0x14>)
 800f686:	f7f8 fe8b 	bl	80083a0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 800f68a:	4803      	ldr	r0, [pc, #12]	; (800f698 <TIMGenEnable+0x18>)
 800f68c:	f7f8 fe88 	bl	80083a0 <HAL_TIM_Base_Start>
}
 800f690:	bf00      	nop
 800f692:	bd80      	pop	{r7, pc}
 800f694:	200140d8 	.word	0x200140d8
 800f698:	20014158 	.word	0x20014158

0800f69c <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim6);
 800f6a0:	4803      	ldr	r0, [pc, #12]	; (800f6b0 <TIMGenDisable+0x14>)
 800f6a2:	f7f8 ff07 	bl	80084b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800f6a6:	4803      	ldr	r0, [pc, #12]	; (800f6b4 <TIMGenDisable+0x18>)
 800f6a8:	f7f8 ff04 	bl	80084b4 <HAL_TIM_Base_Stop>
}
 800f6ac:	bf00      	nop
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	200140d8 	.word	0x200140d8
 800f6b4:	20014158 	.word	0x20014158

0800f6b8 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	af00      	add	r7, sp, #0
	MX_DAC_Init();
 800f6bc:	f7fe ff96 	bl	800e5ec <MX_DAC_Init>
	MX_TIM6_Init();
 800f6c0:	f7ff fce4 	bl	800f08c <MX_TIM6_Init>
	MX_TIM7_Init();
 800f6c4:	f7ff fd14 	bl	800f0f0 <MX_TIM7_Init>
}
 800f6c8:	bf00      	nop
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <TIMGenDacDeinit>:
 * @brief  Deinit of arbitrary DAC generator.
 * @note 	Peripherals reset TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenDacDeinit(void){
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800f6d0:	4b14      	ldr	r3, [pc, #80]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6d2:	6a1b      	ldr	r3, [r3, #32]
 800f6d4:	4a13      	ldr	r2, [pc, #76]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6d6:	f043 0310 	orr.w	r3, r3, #16
 800f6da:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800f6dc:	4b11      	ldr	r3, [pc, #68]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	4a10      	ldr	r2, [pc, #64]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6e2:	f023 0310 	bic.w	r3, r3, #16
 800f6e6:	6213      	str	r3, [r2, #32]

	__HAL_RCC_TIM7_FORCE_RESET();
 800f6e8:	4b0e      	ldr	r3, [pc, #56]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6ea:	6a1b      	ldr	r3, [r3, #32]
 800f6ec:	4a0d      	ldr	r2, [pc, #52]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6ee:	f043 0320 	orr.w	r3, r3, #32
 800f6f2:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800f6f4:	4b0b      	ldr	r3, [pc, #44]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	4a0a      	ldr	r2, [pc, #40]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f6fa:	f023 0320 	bic.w	r3, r3, #32
 800f6fe:	6213      	str	r3, [r2, #32]

	__HAL_RCC_DAC_FORCE_RESET();
 800f700:	4b08      	ldr	r3, [pc, #32]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f702:	6a1b      	ldr	r3, [r3, #32]
 800f704:	4a07      	ldr	r2, [pc, #28]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f70a:	6213      	str	r3, [r2, #32]
	__HAL_RCC_DAC_RELEASE_RESET();
 800f70c:	4b05      	ldr	r3, [pc, #20]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f70e:	6a1b      	ldr	r3, [r3, #32]
 800f710:	4a04      	ldr	r2, [pc, #16]	; (800f724 <TIMGenDacDeinit+0x58>)
 800f712:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f716:	6213      	str	r3, [r2, #32]
}
 800f718:	bf00      	nop
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	40023800 	.word	0x40023800

0800f728 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	71fb      	strb	r3, [r7, #7]
	if(chan==0){
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d135      	bne.n	800f7a4 <TIM_DMA_Reconfig+0x7c>
		HAL_DMA_Abort(&hdma_tim7_up);
 800f738:	4838      	ldr	r0, [pc, #224]	; (800f81c <TIM_DMA_Reconfig+0xf4>)
 800f73a:	f7f7 f9f9 	bl	8006b30 <HAL_DMA_Abort>

		////worst workaround ever - PC does count with periph clock 144MHZ while real one is 75MHz
		for(uint16_t tmp_ct=0;tmp_ct<generator.oneChanSamples[0];tmp_ct++){
 800f73e:	2300      	movs	r3, #0
 800f740:	81fb      	strh	r3, [r7, #14]
 800f742:	e01b      	b.n	800f77c <TIM_DMA_Reconfig+0x54>
			*(generator.pChanMem[0]+tmp_ct)=*(generator.pChanMem[0]+tmp_ct)*75/144;
 800f744:	4b36      	ldr	r3, [pc, #216]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f748:	89fb      	ldrh	r3, [r7, #14]
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	4413      	add	r3, r2
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	461a      	mov	r2, r3
 800f752:	4613      	mov	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	011a      	lsls	r2, r3, #4
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	4a31      	ldr	r2, [pc, #196]	; (800f824 <TIM_DMA_Reconfig+0xfc>)
 800f75e:	fb82 1203 	smull	r1, r2, r2, r3
 800f762:	1152      	asrs	r2, r2, #5
 800f764:	17db      	asrs	r3, r3, #31
 800f766:	1ad1      	subs	r1, r2, r3
 800f768:	4b2d      	ldr	r3, [pc, #180]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76c:	89fb      	ldrh	r3, [r7, #14]
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	4413      	add	r3, r2
 800f772:	b28a      	uxth	r2, r1
 800f774:	801a      	strh	r2, [r3, #0]
		for(uint16_t tmp_ct=0;tmp_ct<generator.oneChanSamples[0];tmp_ct++){
 800f776:	89fb      	ldrh	r3, [r7, #14]
 800f778:	3301      	adds	r3, #1
 800f77a:	81fb      	strh	r3, [r7, #14]
 800f77c:	4b28      	ldr	r3, [pc, #160]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f77e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f780:	b29b      	uxth	r3, r3
 800f782:	89fa      	ldrh	r2, [r7, #14]
 800f784:	429a      	cmp	r2, r3
 800f786:	d3dd      	bcc.n	800f744 <TIM_DMA_Reconfig+0x1c>
		}

		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim3.Instance->CCR1)/*(TIM13->CCR1)*/, generator.oneChanSamples[0]);
 800f788:	4b25      	ldr	r3, [pc, #148]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78c:	4619      	mov	r1, r3
 800f78e:	4b26      	ldr	r3, [pc, #152]	; (800f828 <TIM_DMA_Reconfig+0x100>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3334      	adds	r3, #52	; 0x34
 800f794:	461a      	mov	r2, r3
 800f796:	4b22      	ldr	r3, [pc, #136]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f798:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	481f      	ldr	r0, [pc, #124]	; (800f81c <TIM_DMA_Reconfig+0xf4>)
 800f79e:	f7f7 f917 	bl	80069d0 <HAL_DMA_Start>
			*(generator.pChanMem[1]+tmp_ct)=*(generator.pChanMem[1]+tmp_ct)*75/72;
		}

		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim1.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 800f7a2:	e037      	b.n	800f814 <TIM_DMA_Reconfig+0xec>
	}else if(chan==1){
 800f7a4:	79fb      	ldrb	r3, [r7, #7]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d134      	bne.n	800f814 <TIM_DMA_Reconfig+0xec>
		HAL_DMA_Abort(&hdma_tim6_up);
 800f7aa:	4820      	ldr	r0, [pc, #128]	; (800f82c <TIM_DMA_Reconfig+0x104>)
 800f7ac:	f7f7 f9c0 	bl	8006b30 <HAL_DMA_Abort>
		for(uint16_t tmp_ct=0;tmp_ct<generator.oneChanSamples[1];tmp_ct++){
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	81bb      	strh	r3, [r7, #12]
 800f7b4:	e01b      	b.n	800f7ee <TIM_DMA_Reconfig+0xc6>
			*(generator.pChanMem[1]+tmp_ct)=*(generator.pChanMem[1]+tmp_ct)*75/72;
 800f7b6:	4b1a      	ldr	r3, [pc, #104]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f7b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ba:	89bb      	ldrh	r3, [r7, #12]
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	4413      	add	r3, r2
 800f7c0:	881b      	ldrh	r3, [r3, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	011a      	lsls	r2, r3, #4
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	4a15      	ldr	r2, [pc, #84]	; (800f824 <TIM_DMA_Reconfig+0xfc>)
 800f7d0:	fb82 1203 	smull	r1, r2, r2, r3
 800f7d4:	1112      	asrs	r2, r2, #4
 800f7d6:	17db      	asrs	r3, r3, #31
 800f7d8:	1ad1      	subs	r1, r2, r3
 800f7da:	4b11      	ldr	r3, [pc, #68]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f7dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7de:	89bb      	ldrh	r3, [r7, #12]
 800f7e0:	005b      	lsls	r3, r3, #1
 800f7e2:	4413      	add	r3, r2
 800f7e4:	b28a      	uxth	r2, r1
 800f7e6:	801a      	strh	r2, [r3, #0]
		for(uint16_t tmp_ct=0;tmp_ct<generator.oneChanSamples[1];tmp_ct++){
 800f7e8:	89bb      	ldrh	r3, [r7, #12]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	81bb      	strh	r3, [r7, #12]
 800f7ee:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f7f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	89ba      	ldrh	r2, [r7, #12]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d3dd      	bcc.n	800f7b6 <TIM_DMA_Reconfig+0x8e>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim1.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 800f7fa:	4b09      	ldr	r3, [pc, #36]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7fe:	4619      	mov	r1, r3
 800f800:	4b0b      	ldr	r3, [pc, #44]	; (800f830 <TIM_DMA_Reconfig+0x108>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	3334      	adds	r3, #52	; 0x34
 800f806:	461a      	mov	r2, r3
 800f808:	4b05      	ldr	r3, [pc, #20]	; (800f820 <TIM_DMA_Reconfig+0xf8>)
 800f80a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	4807      	ldr	r0, [pc, #28]	; (800f82c <TIM_DMA_Reconfig+0x104>)
 800f810:	f7f7 f8de 	bl	80069d0 <HAL_DMA_Start>
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	20013fd8 	.word	0x20013fd8
 800f820:	200047c0 	.word	0x200047c0
 800f824:	38e38e39 	.word	0x38e38e39
 800f828:	20014038 	.word	0x20014038
 800f82c:	20014078 	.word	0x20014078
 800f830:	20014118 	.word	0x20014118

0800f834 <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 800f834:	b580      	push	{r7, lr}
 800f836:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 800f838:	4b22      	ldr	r3, [pc, #136]	; (800f8c4 <PWMGeneratingEnable+0x90>)
 800f83a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b01      	cmp	r3, #1
 800f842:	d119      	bne.n	800f878 <PWMGeneratingEnable+0x44>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800f844:	4b20      	ldr	r3, [pc, #128]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	4b1f      	ldr	r3, [pc, #124]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f852:	60da      	str	r2, [r3, #12]
		if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)!= HAL_OK)
 800f854:	2100      	movs	r1, #0
 800f856:	481d      	ldr	r0, [pc, #116]	; (800f8cc <PWMGeneratingEnable+0x98>)
 800f858:	f7f9 f81c 	bl	8008894 <HAL_TIM_PWM_Start>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <PWMGeneratingEnable+0x32>
		  {
		    Error_Handler();
 800f862:	f7ff f928 	bl	800eab6 <Error_Handler>
		  }
		//HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t)generator.pChanMem[0], generator.oneChanSamples[0]);
		if(HAL_TIM_Base_Start(&htim7)!= HAL_OK)
 800f866:	4818      	ldr	r0, [pc, #96]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f868:	f7f8 fd9a 	bl	80083a0 <HAL_TIM_Base_Start>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d026      	beq.n	800f8c0 <PWMGeneratingEnable+0x8c>
			  {
			    Error_Handler();
 800f872:	f7ff f920 	bl	800eab6 <Error_Handler>
		HAL_TIM_Base_Start(&htim7);
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		HAL_TIM_Base_Start(&htim6);
	}
}
 800f876:	e023      	b.n	800f8c0 <PWMGeneratingEnable+0x8c>
	}else if(generator.numOfChannles>1){
 800f878:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <PWMGeneratingEnable+0x90>)
 800f87a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b01      	cmp	r3, #1
 800f882:	d91d      	bls.n	800f8c0 <PWMGeneratingEnable+0x8c>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800f884:	4b10      	ldr	r3, [pc, #64]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	68da      	ldr	r2, [r3, #12]
 800f88a:	4b0f      	ldr	r3, [pc, #60]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f892:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800f894:	2100      	movs	r1, #0
 800f896:	480d      	ldr	r0, [pc, #52]	; (800f8cc <PWMGeneratingEnable+0x98>)
 800f898:	f7f8 fffc 	bl	8008894 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 800f89c:	480a      	ldr	r0, [pc, #40]	; (800f8c8 <PWMGeneratingEnable+0x94>)
 800f89e:	f7f8 fd7f 	bl	80083a0 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800f8a2:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <PWMGeneratingEnable+0x9c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68da      	ldr	r2, [r3, #12]
 800f8a8:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <PWMGeneratingEnable+0x9c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8b0:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	4807      	ldr	r0, [pc, #28]	; (800f8d4 <PWMGeneratingEnable+0xa0>)
 800f8b6:	f7f8 ffed 	bl	8008894 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 800f8ba:	4805      	ldr	r0, [pc, #20]	; (800f8d0 <PWMGeneratingEnable+0x9c>)
 800f8bc:	f7f8 fd70 	bl	80083a0 <HAL_TIM_Base_Start>
}
 800f8c0:	bf00      	nop
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	200047c0 	.word	0x200047c0
 800f8c8:	20014158 	.word	0x20014158
 800f8cc:	20014038 	.word	0x20014038
 800f8d0:	200140d8 	.word	0x200140d8
 800f8d4:	20014118 	.word	0x20014118

0800f8d8 <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 800f8dc:	4b11      	ldr	r3, [pc, #68]	; (800f924 <PWMGeneratingDisable+0x4c>)
 800f8de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d107      	bne.n	800f8f8 <PWMGeneratingDisable+0x20>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	480f      	ldr	r0, [pc, #60]	; (800f928 <PWMGeneratingDisable+0x50>)
 800f8ec:	f7f9 f8cc 	bl	8008a88 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 800f8f0:	480e      	ldr	r0, [pc, #56]	; (800f92c <PWMGeneratingDisable+0x54>)
 800f8f2:	f7f8 fddf 	bl	80084b4 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim7);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim6);
	}
}
 800f8f6:	e013      	b.n	800f920 <PWMGeneratingDisable+0x48>
	}else if(generator.numOfChannles>1){
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <PWMGeneratingDisable+0x4c>)
 800f8fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b01      	cmp	r3, #1
 800f902:	d90d      	bls.n	800f920 <PWMGeneratingDisable+0x48>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800f904:	2100      	movs	r1, #0
 800f906:	4808      	ldr	r0, [pc, #32]	; (800f928 <PWMGeneratingDisable+0x50>)
 800f908:	f7f9 f8be 	bl	8008a88 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 800f90c:	4807      	ldr	r0, [pc, #28]	; (800f92c <PWMGeneratingDisable+0x54>)
 800f90e:	f7f8 fdd1 	bl	80084b4 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800f912:	2100      	movs	r1, #0
 800f914:	4806      	ldr	r0, [pc, #24]	; (800f930 <PWMGeneratingDisable+0x58>)
 800f916:	f7f9 f8b7 	bl	8008a88 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800f91a:	4806      	ldr	r0, [pc, #24]	; (800f934 <PWMGeneratingDisable+0x5c>)
 800f91c:	f7f8 fdca 	bl	80084b4 <HAL_TIM_Base_Stop>
}
 800f920:	bf00      	nop
 800f922:	bd80      	pop	{r7, pc}
 800f924:	200047c0 	.word	0x200047c0
 800f928:	20014038 	.word	0x20014038
 800f92c:	20014158 	.word	0x20014158
 800f930:	20014118 	.word	0x20014118
 800f934:	200140d8 	.word	0x200140d8

0800f938 <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 800f938:	b580      	push	{r7, lr}
 800f93a:	af00      	add	r7, sp, #0
	MX_TIM1_GEN_PWM_Init();
 800f93c:	f7ff fc04 	bl	800f148 <MX_TIM1_GEN_PWM_Init>
	MX_TIM6_GEN_PWM_Init();
 800f940:	f7ff fcba 	bl	800f2b8 <MX_TIM6_GEN_PWM_Init>
	MX_TIM3_GEN_PWM_Init();			// PWM generation
 800f944:	f7ff fc6e 	bl	800f224 <MX_TIM3_GEN_PWM_Init>
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
 800f948:	f7ff fce0 	bl	800f30c <MX_TIM7_GEN_PWM_Init>
}
 800f94c:	bf00      	nop
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <TIMGenPwmDeinit>:
 * @brief  Deinit of arbitrary PWM generator.
 * @note		Resetting peripherals TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
 800f950:	b480      	push	{r7}
 800f952:	af00      	add	r7, sp, #0
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800f954:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f956:	6a1b      	ldr	r3, [r3, #32]
 800f958:	4a19      	ldr	r2, [pc, #100]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f95a:	f043 0310 	orr.w	r3, r3, #16
 800f95e:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800f960:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	4a16      	ldr	r2, [pc, #88]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f966:	f023 0310 	bic.w	r3, r3, #16
 800f96a:	6213      	str	r3, [r2, #32]

	__HAL_RCC_TIM7_FORCE_RESET();
 800f96c:	4b14      	ldr	r3, [pc, #80]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f96e:	6a1b      	ldr	r3, [r3, #32]
 800f970:	4a13      	ldr	r2, [pc, #76]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f972:	f043 0320 	orr.w	r3, r3, #32
 800f976:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800f978:	4b11      	ldr	r3, [pc, #68]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	4a10      	ldr	r2, [pc, #64]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f97e:	f023 0320 	bic.w	r3, r3, #32
 800f982:	6213      	str	r3, [r2, #32]

	__HAL_RCC_TIM13_FORCE_RESET();
 800f984:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f986:	6a1b      	ldr	r3, [r3, #32]
 800f988:	4a0d      	ldr	r2, [pc, #52]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f98e:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM13_RELEASE_RESET();
 800f990:	4b0b      	ldr	r3, [pc, #44]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	4a0a      	ldr	r2, [pc, #40]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f99a:	6213      	str	r3, [r2, #32]

	__HAL_RCC_TIM3_FORCE_RESET();
 800f99c:	4b08      	ldr	r3, [pc, #32]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f99e:	6a1b      	ldr	r3, [r3, #32]
 800f9a0:	4a07      	ldr	r2, [pc, #28]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f9a2:	f043 0302 	orr.w	r3, r3, #2
 800f9a6:	6213      	str	r3, [r2, #32]
	__HAL_RCC_TIM3_RELEASE_RESET();
 800f9a8:	4b05      	ldr	r3, [pc, #20]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f9aa:	6a1b      	ldr	r3, [r3, #32]
 800f9ac:	4a04      	ldr	r2, [pc, #16]	; (800f9c0 <TIMGenPwmDeinit+0x70>)
 800f9ae:	f023 0302 	bic.w	r3, r3, #2
 800f9b2:	6213      	str	r3, [r2, #32]
}
 800f9b4:	bf00      	nop
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	40023800 	.word	0x40023800

0800f9c4 <MX_TIM8_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM8_Init(void)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM8;
 800f9ca:	4b14      	ldr	r3, [pc, #80]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9cc:	4a14      	ldr	r2, [pc, #80]	; (800fa20 <MX_TIM8_Init+0x5c>)
 800f9ce:	601a      	str	r2, [r3, #0]
	htim_scope.Init.Prescaler = 0;
 800f9d0:	4b12      	ldr	r3, [pc, #72]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	605a      	str	r2, [r3, #4]
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f9d6:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	609a      	str	r2, [r3, #8]
	htim_scope.Init.Period = 0;
 800f9dc:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	60da      	str	r2, [r3, #12]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9e2:	4b0e      	ldr	r3, [pc, #56]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim_scope);
 800f9e8:	480c      	ldr	r0, [pc, #48]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9ea:	f7f8 fc0d 	bl	8008208 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f9ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9f2:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 800f9f4:	f107 0308 	add.w	r3, r7, #8
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4808      	ldr	r0, [pc, #32]	; (800fa1c <MX_TIM8_Init+0x58>)
 800f9fc:	f7f9 fc3c 	bl	8009278 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800fa00:	2320      	movs	r3, #32
 800fa02:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fa04:	2300      	movs	r3, #0
 800fa06:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800fa08:	463b      	mov	r3, r7
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4803      	ldr	r0, [pc, #12]	; (800fa1c <MX_TIM8_Init+0x58>)
 800fa0e:	f7fa fbbb 	bl	800a188 <HAL_TIMEx_MasterConfigSynchronization>

}
 800fa12:	bf00      	nop
 800fa14:	3718      	adds	r7, #24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20014198 	.word	0x20014198
 800fa20:	40010400 	.word	0x40010400

0800fa24 <TIM8_SCOPE_MspInit>:

void TIM8_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM8_CLK_ENABLE();
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	4b08      	ldr	r3, [pc, #32]	; (800fa54 <TIM8_SCOPE_MspInit+0x30>)
 800fa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa34:	4a07      	ldr	r2, [pc, #28]	; (800fa54 <TIM8_SCOPE_MspInit+0x30>)
 800fa36:	f043 0302 	orr.w	r3, r3, #2
 800fa3a:	6453      	str	r3, [r2, #68]	; 0x44
 800fa3c:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <TIM8_SCOPE_MspInit+0x30>)
 800fa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa40:	f003 0302 	and.w	r3, r3, #2
 800fa44:	60fb      	str	r3, [r7, #12]
 800fa46:	68fb      	ldr	r3, [r7, #12]
}
 800fa48:	bf00      	nop
 800fa4a:	3714      	adds	r7, #20
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	40023800 	.word	0x40023800

0800fa58 <TIMScopeEnable>:
/* ************************************************************************************** */

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim_scope);
 800fa5c:	4802      	ldr	r0, [pc, #8]	; (800fa68 <TIMScopeEnable+0x10>)
 800fa5e:	f7f8 fc9f 	bl	80083a0 <HAL_TIM_Base_Start>
}
 800fa62:	bf00      	nop
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20014198 	.word	0x20014198

0800fa6c <TIMScopeDisable>:

void TIMScopeDisable(){
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim_scope);
 800fa70:	4802      	ldr	r0, [pc, #8]	; (800fa7c <TIMScopeDisable+0x10>)
 800fa72:	f7f8 fd1f 	bl	80084b4 <HAL_TIM_Base_Stop>
}
 800fa76:	bf00      	nop
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20014198 	.word	0x20014198

0800fa80 <TIM_Reconfig_scope>:

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	uint32_t periphClock = HAL_RCC_GetHCLKFreq();		//HAL_RCC_GetHCLKFreq();
 800fa8a:	f7f7 fe95 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800fa8e:	60f8      	str	r0, [r7, #12]
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 800fa90:	2301      	movs	r3, #1
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	68f9      	ldr	r1, [r7, #12]
 800fa9a:	4804      	ldr	r0, [pc, #16]	; (800faac <TIM_Reconfig_scope+0x2c>)
 800fa9c:	f7ff f994 	bl	800edc8 <TIM_Reconfig>
 800faa0:	4603      	mov	r3, r0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	20014198 	.word	0x20014198

0800fab0 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	2b0c      	cmp	r3, #12
 800fabe:	d101      	bne.n	800fac4 <getMaxScopeSamplingFreq+0x14>
		return MAX_SAMPLING_FREQ_12B;
 800fac0:	4b08      	ldr	r3, [pc, #32]	; (800fae4 <getMaxScopeSamplingFreq+0x34>)
 800fac2:	e00b      	b.n	800fadc <getMaxScopeSamplingFreq+0x2c>
	}else if(ADCRes==8){
 800fac4:	79fb      	ldrb	r3, [r7, #7]
 800fac6:	2b08      	cmp	r3, #8
 800fac8:	d101      	bne.n	800face <getMaxScopeSamplingFreq+0x1e>
		return MAX_SAMPLING_FREQ_8B;
 800faca:	4b07      	ldr	r3, [pc, #28]	; (800fae8 <getMaxScopeSamplingFreq+0x38>)
 800facc:	e006      	b.n	800fadc <getMaxScopeSamplingFreq+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800face:	f7f7 fe93 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800fad2:	4602      	mov	r2, r0
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	3302      	adds	r3, #2
 800fad8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	00249f00 	.word	0x00249f00
 800fae8:	0030d400 	.word	0x0030d400

0800faec <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	2b0c      	cmp	r3, #12
 800fafa:	d101      	bne.n	800fb00 <getMaxScopeSamplingFreqInterleaved+0x14>
		return MAX_INTERLEAVE_FREQ_12B;
 800fafc:	4b08      	ldr	r3, [pc, #32]	; (800fb20 <getMaxScopeSamplingFreqInterleaved+0x34>)
 800fafe:	e00b      	b.n	800fb18 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}else if(ADCRes==8){
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	2b08      	cmp	r3, #8
 800fb04:	d101      	bne.n	800fb0a <getMaxScopeSamplingFreqInterleaved+0x1e>
		return MAX_INTERLEAVE_FREQ_8B;
 800fb06:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <getMaxScopeSamplingFreqInterleaved+0x38>)
 800fb08:	e006      	b.n	800fb18 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800fb0a:	f7f7 fe75 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	3302      	adds	r3, #2
 800fb14:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	00493e00 	.word	0x00493e00
 800fb24:	0061a800 	.word	0x0061a800

0800fb28 <LL_TIM_SetOnePulseMode>:
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f023 0208 	bic.w	r2, r3, #8
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	431a      	orrs	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	601a      	str	r2, [r3, #0]
}
 800fb42:	bf00      	nop
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
	...

0800fb50 <TIM8_SYNC_PWM_MspInit>:

	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
}

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b088      	sub	sp, #32
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 800fb58:	2300      	movs	r3, #0
 800fb5a:	60bb      	str	r3, [r7, #8]
 800fb5c:	4b6c      	ldr	r3, [pc, #432]	; (800fd10 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 800fb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb60:	4a6b      	ldr	r2, [pc, #428]	; (800fd10 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 800fb62:	f043 0302 	orr.w	r3, r3, #2
 800fb66:	6453      	str	r3, [r2, #68]	; 0x44
 800fb68:	4b69      	ldr	r3, [pc, #420]	; (800fd10 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 800fb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb6c:	f003 0302 	and.w	r3, r3, #2
 800fb70:	60bb      	str	r3, [r7, #8]
 800fb72:	68bb      	ldr	r3, [r7, #8]
	 PC6     ------> TIM8_CH1
	 PC7     ------> TIM8_CH2
	 PC8     ------> TIM8_CH3
	 PC9     ------> TIM8_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800fb74:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800fb78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800fb82:	2302      	movs	r3, #2
 800fb84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800fb86:	2303      	movs	r3, #3
 800fb88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb8a:	f107 030c 	add.w	r3, r7, #12
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4860      	ldr	r0, [pc, #384]	; (800fd14 <TIM8_SYNC_PWM_MspInit+0x1c4>)
 800fb92:	f7f7 f93d 	bl	8006e10 <HAL_GPIO_Init>

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Stream2;
 800fb96:	4b60      	ldr	r3, [pc, #384]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fb98:	4a60      	ldr	r2, [pc, #384]	; (800fd1c <TIM8_SYNC_PWM_MspInit+0x1cc>)
 800fb9a:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fb9c:	4b5e      	ldr	r3, [pc, #376]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fb9e:	2240      	movs	r2, #64	; 0x40
 800fba0:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800fba2:	4b5d      	ldr	r3, [pc, #372]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800fba8:	4b5b      	ldr	r3, [pc, #364]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fbae:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fbb0:	4b59      	ldr	r3, [pc, #356]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbb6:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fbb8:	4b57      	ldr	r3, [pc, #348]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fbbe:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800fbc0:	4b55      	ldr	r3, [pc, #340]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbc6:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800fbc8:	4b53      	ldr	r3, [pc, #332]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fbce:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch1);
 800fbd0:	4851      	ldr	r0, [pc, #324]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbd2:	f7f6 fc0b 	bl	80063ec <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800fbd6:	4b52      	ldr	r3, [pc, #328]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68da      	ldr	r2, [r3, #12]
 800fbdc:	4b50      	ldr	r3, [pc, #320]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fbe4:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a4b      	ldr	r2, [pc, #300]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbea:	625a      	str	r2, [r3, #36]	; 0x24
 800fbec:	4a4a      	ldr	r2, [pc, #296]	; (800fd18 <TIM8_SYNC_PWM_MspInit+0x1c8>)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6393      	str	r3, [r2, #56]	; 0x38

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Stream2;
 800fbf2:	4b4c      	ldr	r3, [pc, #304]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fbf4:	4a49      	ldr	r2, [pc, #292]	; (800fd1c <TIM8_SYNC_PWM_MspInit+0x1cc>)
 800fbf6:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fbf8:	4b4a      	ldr	r3, [pc, #296]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fbfa:	2240      	movs	r2, #64	; 0x40
 800fbfc:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800fbfe:	4b49      	ldr	r3, [pc, #292]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800fc04:	4b47      	ldr	r3, [pc, #284]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc0a:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fc0c:	4b45      	ldr	r3, [pc, #276]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc12:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fc14:	4b43      	ldr	r3, [pc, #268]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fc1a:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 800fc1c:	4b41      	ldr	r3, [pc, #260]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc22:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800fc24:	4b3f      	ldr	r3, [pc, #252]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fc2a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch2);
 800fc2c:	483d      	ldr	r0, [pc, #244]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc2e:	f7f6 fbdd 	bl	80063ec <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800fc32:	4b3b      	ldr	r3, [pc, #236]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68da      	ldr	r2, [r3, #12]
 800fc38:	4b39      	ldr	r3, [pc, #228]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fc40:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a37      	ldr	r2, [pc, #220]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc46:	629a      	str	r2, [r3, #40]	; 0x28
 800fc48:	4a36      	ldr	r2, [pc, #216]	; (800fd24 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6393      	str	r3, [r2, #56]	; 0x38

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Stream2;
 800fc4e:	4b36      	ldr	r3, [pc, #216]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc50:	4a32      	ldr	r2, [pc, #200]	; (800fd1c <TIM8_SYNC_PWM_MspInit+0x1cc>)
 800fc52:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fc54:	4b34      	ldr	r3, [pc, #208]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc56:	2240      	movs	r2, #64	; 0x40
 800fc58:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800fc5a:	4b33      	ldr	r3, [pc, #204]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800fc60:	4b31      	ldr	r3, [pc, #196]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc66:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fc68:	4b2f      	ldr	r3, [pc, #188]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc6e:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fc70:	4b2d      	ldr	r3, [pc, #180]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fc76:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 800fc78:	4b2b      	ldr	r3, [pc, #172]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc7e:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800fc80:	4b29      	ldr	r3, [pc, #164]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fc86:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 800fc88:	4827      	ldr	r0, [pc, #156]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fc8a:	f7f6 fbaf 	bl	80063ec <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800fc8e:	4b24      	ldr	r3, [pc, #144]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	68da      	ldr	r2, [r3, #12]
 800fc94:	4b22      	ldr	r3, [pc, #136]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc9c:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a21      	ldr	r2, [pc, #132]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fca2:	62da      	str	r2, [r3, #44]	; 0x2c
 800fca4:	4a20      	ldr	r2, [pc, #128]	; (800fd28 <TIM8_SYNC_PWM_MspInit+0x1d8>)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6393      	str	r3, [r2, #56]	; 0x38

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 800fcaa:	4b20      	ldr	r3, [pc, #128]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcac:	4a20      	ldr	r2, [pc, #128]	; (800fd30 <TIM8_SYNC_PWM_MspInit+0x1e0>)
 800fcae:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fcb0:	4b1e      	ldr	r3, [pc, #120]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcb2:	2240      	movs	r2, #64	; 0x40
 800fcb4:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800fcb6:	4b1d      	ldr	r3, [pc, #116]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800fcbc:	4b1b      	ldr	r3, [pc, #108]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fcc2:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fcc4:	4b19      	ldr	r3, [pc, #100]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcca:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fccc:	4b17      	ldr	r3, [pc, #92]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fcd2:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800fcd4:	4b15      	ldr	r3, [pc, #84]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcda:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800fcdc:	4b13      	ldr	r3, [pc, #76]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fce2:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800fce4:	4811      	ldr	r0, [pc, #68]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fce6:	f7f6 fb81 	bl	80063ec <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800fcea:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	68da      	ldr	r2, [r3, #12]
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	; (800fd20 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fcf8:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a0b      	ldr	r2, [pc, #44]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fcfe:	631a      	str	r2, [r3, #48]	; 0x30
 800fd00:	4a0a      	ldr	r2, [pc, #40]	; (800fd2c <TIM8_SYNC_PWM_MspInit+0x1dc>)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fd06:	bf00      	nop
 800fd08:	3720      	adds	r7, #32
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	40023800 	.word	0x40023800
 800fd14:	40020800 	.word	0x40020800
 800fd18:	20014278 	.word	0x20014278
 800fd1c:	40026440 	.word	0x40026440
 800fd20:	20014238 	.word	0x20014238
 800fd24:	200141d8 	.word	0x200141d8
 800fd28:	20014338 	.word	0x20014338
 800fd2c:	200142d8 	.word	0x200142d8
 800fd30:	400264b8 	.word	0x400264b8

0800fd34 <TIM_SYNC_PWM_ChannelState>:
 * @note		Channel can be disabled.
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	460a      	mov	r2, r1
 800fd3e:	71fb      	strb	r3, [r7, #7]
 800fd40:	4613      	mov	r3, r2
 800fd42:	71bb      	strb	r3, [r7, #6]
	if (channel == 1) {
 800fd44:	79fb      	ldrb	r3, [r7, #7]
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d10a      	bne.n	800fd60 <TIM_SYNC_PWM_ChannelState+0x2c>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800fd4a:	79bb      	ldrb	r3, [r7, #6]
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	bf0c      	ite	eq
 800fd50:	2301      	moveq	r3, #1
 800fd52:	2300      	movne	r3, #0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	461a      	mov	r2, r3
 800fd58:	4b19      	ldr	r3, [pc, #100]	; (800fdc0 <TIM_SYNC_PWM_ChannelState+0x8c>)
 800fd5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else if (channel == 3) {
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	}
}
 800fd5e:	e028      	b.n	800fdb2 <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 2) {
 800fd60:	79fb      	ldrb	r3, [r7, #7]
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d10a      	bne.n	800fd7c <TIM_SYNC_PWM_ChannelState+0x48>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800fd66:	79bb      	ldrb	r3, [r7, #6]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	bf0c      	ite	eq
 800fd6c:	2301      	moveq	r3, #1
 800fd6e:	2300      	movne	r3, #0
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	461a      	mov	r2, r3
 800fd74:	4b12      	ldr	r3, [pc, #72]	; (800fdc0 <TIM_SYNC_PWM_ChannelState+0x8c>)
 800fd76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800fd7a:	e01a      	b.n	800fdb2 <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 3) {
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	2b03      	cmp	r3, #3
 800fd80:	d10a      	bne.n	800fd98 <TIM_SYNC_PWM_ChannelState+0x64>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800fd82:	79bb      	ldrb	r3, [r7, #6]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	bf0c      	ite	eq
 800fd88:	2301      	moveq	r3, #1
 800fd8a:	2300      	movne	r3, #0
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <TIM_SYNC_PWM_ChannelState+0x8c>)
 800fd92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800fd96:	e00c      	b.n	800fdb2 <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 4) {
 800fd98:	79fb      	ldrb	r3, [r7, #7]
 800fd9a:	2b04      	cmp	r3, #4
 800fd9c:	d109      	bne.n	800fdb2 <TIM_SYNC_PWM_ChannelState+0x7e>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800fd9e:	79bb      	ldrb	r3, [r7, #6]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	bf0c      	ite	eq
 800fda4:	2301      	moveq	r3, #1
 800fda6:	2300      	movne	r3, #0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <TIM_SYNC_PWM_ChannelState+0x8c>)
 800fdae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800fdb2:	bf00      	nop
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	20013c98 	.word	0x20013c98

0800fdc4 <TIM_SYNC_PWM_DMA_ChanConfig>:
 The channel number is sent in previous message.
 * @param  ccr1st:	the value of CCR for the 1st edge
 * @param  ccr2st:	the value of CCR for the 2st edge
 * @retval None
 */
void TIM_SYNC_PWM_DMA_ChanConfig(uint16_t ccr1st, uint16_t ccr2nd) {
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	460a      	mov	r2, r1
 800fdce:	80fb      	strh	r3, [r7, #6]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	80bb      	strh	r3, [r7, #4]
	switch (syncPwm.channelToConfig) {
 800fdd4:	4b1a      	ldr	r3, [pc, #104]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fdd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	3b01      	subs	r3, #1
 800fdde:	2b03      	cmp	r3, #3
 800fde0:	d826      	bhi.n	800fe30 <TIM_SYNC_PWM_DMA_ChanConfig+0x6c>
 800fde2:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <TIM_SYNC_PWM_DMA_ChanConfig+0x24>)
 800fde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde8:	0800fdf9 	.word	0x0800fdf9
 800fdec:	0800fe07 	.word	0x0800fe07
 800fdf0:	0800fe15 	.word	0x0800fe15
 800fdf4:	0800fe23 	.word	0x0800fe23
	case SYNC_PWM_CHANNEL1:
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 800fdf8:	4a11      	ldr	r2, [pc, #68]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fdfa:	88bb      	ldrh	r3, [r7, #4]
 800fdfc:	8013      	strh	r3, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 800fdfe:	4a10      	ldr	r2, [pc, #64]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe00:	88fb      	ldrh	r3, [r7, #6]
 800fe02:	8053      	strh	r3, [r2, #2]
		break;
 800fe04:	e015      	b.n	800fe32 <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL2:
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 800fe06:	4a0e      	ldr	r2, [pc, #56]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe08:	88bb      	ldrh	r3, [r7, #4]
 800fe0a:	8093      	strh	r3, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 800fe0c:	4a0c      	ldr	r2, [pc, #48]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe0e:	88fb      	ldrh	r3, [r7, #6]
 800fe10:	80d3      	strh	r3, [r2, #6]
		break;
 800fe12:	e00e      	b.n	800fe32 <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL3:
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 800fe14:	4a0a      	ldr	r2, [pc, #40]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe16:	88bb      	ldrh	r3, [r7, #4]
 800fe18:	8113      	strh	r3, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 800fe1a:	4a09      	ldr	r2, [pc, #36]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	8153      	strh	r3, [r2, #10]
		break;
 800fe20:	e007      	b.n	800fe32 <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL4:
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 800fe22:	4a07      	ldr	r2, [pc, #28]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe24:	88bb      	ldrh	r3, [r7, #4]
 800fe26:	8193      	strh	r3, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 800fe28:	4a05      	ldr	r2, [pc, #20]	; (800fe40 <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 800fe2a:	88fb      	ldrh	r3, [r7, #6]
 800fe2c:	81d3      	strh	r3, [r2, #14]
		break;
 800fe2e:	e000      	b.n	800fe32 <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	default:
		break;
 800fe30:	bf00      	nop
	}
}
 800fe32:	bf00      	nop
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20013c98 	.word	0x20013c98

0800fe44 <TIM_SYNC_PWM_StepMode_Enable>:
 * @brief  Enable Step mode for Synch. PWMs.
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
 800fe44:	b580      	push	{r7, lr}
 800fe46:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 800fe48:	4b05      	ldr	r3, [pc, #20]	; (800fe60 <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2108      	movs	r1, #8
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff fe6a 	bl	800fb28 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_ENABLE;
 800fe54:	4b03      	ldr	r3, [pc, #12]	; (800fe64 <TIM_SYNC_PWM_StepMode_Enable+0x20>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800fe5c:	bf00      	nop
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20014238 	.word	0x20014238
 800fe64:	20013c98 	.word	0x20013c98

0800fe68 <TIM_SYNC_PWM_StepMode_Disable>:
 * @brief  Disable Step mode for Synch. PWMs.
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 800fe6c:	4b05      	ldr	r3, [pc, #20]	; (800fe84 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2100      	movs	r1, #0
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff fe58 	bl	800fb28 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_DISABLE;
 800fe78:	4b03      	ldr	r3, [pc, #12]	; (800fe88 <TIM_SYNC_PWM_StepMode_Disable+0x20>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800fe80:	bf00      	nop
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20014238 	.word	0x20014238
 800fe88:	20013c98 	.word	0x20013c98

0800fe8c <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = SYNC_PWM_TIM_PERIPH_CLOCK;//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM);  // HAL_RCC_GetHCLKFreq();
 800fe96:	4b09      	ldr	r3, [pc, #36]	; (800febc <TIM_Reconfig_SyncPwm+0x30>)
 800fe98:	60fb      	str	r3, [r7, #12]
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800fe9a:	ed97 0b00 	vldr	d0, [r7]
 800fe9e:	68f9      	ldr	r1, [r7, #12]
 800fea0:	4807      	ldr	r0, [pc, #28]	; (800fec0 <TIM_Reconfig_SyncPwm+0x34>)
 800fea2:	f7ff f82f 	bl	800ef04 <TIM_ReconfigPrecise>
 800fea6:	eeb0 7a40 	vmov.f32	s14, s0
 800feaa:	eef0 7a60 	vmov.f32	s15, s1
}
 800feae:	eeb0 0a47 	vmov.f32	s0, s14
 800feb2:	eef0 0a67 	vmov.f32	s1, s15
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	023c3460 	.word	0x023c3460
 800fec0:	20014238 	.word	0x20014238

0800fec4 <MX_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_UART_Init(void)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800fec8:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <MX_UART_Init+0x44>)
 800feca:	4a10      	ldr	r2, [pc, #64]	; (800ff0c <MX_UART_Init+0x48>)
 800fecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_SPEED;
 800fece:	4b0e      	ldr	r3, [pc, #56]	; (800ff08 <MX_UART_Init+0x44>)
 800fed0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800fed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <MX_UART_Init+0x44>)
 800fed8:	2200      	movs	r2, #0
 800feda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800fedc:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <MX_UART_Init+0x44>)
 800fede:	2200      	movs	r2, #0
 800fee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800fee2:	4b09      	ldr	r3, [pc, #36]	; (800ff08 <MX_UART_Init+0x44>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800fee8:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <MX_UART_Init+0x44>)
 800feea:	220c      	movs	r2, #12
 800feec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800feee:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <MX_UART_Init+0x44>)
 800fef0:	2200      	movs	r2, #0
 800fef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800fef4:	4b04      	ldr	r3, [pc, #16]	; (800ff08 <MX_UART_Init+0x44>)
 800fef6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fefa:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 800fefc:	4802      	ldr	r0, [pc, #8]	; (800ff08 <MX_UART_Init+0x44>)
 800fefe:	f7fa fb01 	bl	800a504 <HAL_UART_Init>

}
 800ff02:	bf00      	nop
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	20014398 	.word	0x20014398
 800ff0c:	40004400 	.word	0x40004400

0800ff10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b088      	sub	sp, #32
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4a19      	ldr	r2, [pc, #100]	; (800ff84 <HAL_UART_MspInit+0x74>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d12b      	bne.n	800ff7a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800ff22:	2300      	movs	r3, #0
 800ff24:	60bb      	str	r3, [r7, #8]
 800ff26:	4b18      	ldr	r3, [pc, #96]	; (800ff88 <HAL_UART_MspInit+0x78>)
 800ff28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2a:	4a17      	ldr	r2, [pc, #92]	; (800ff88 <HAL_UART_MspInit+0x78>)
 800ff2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ff30:	6413      	str	r3, [r2, #64]	; 0x40
 800ff32:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <HAL_UART_MspInit+0x78>)
 800ff34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff3a:	60bb      	str	r3, [r7, #8]
 800ff3c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 800ff3e:	230c      	movs	r3, #12
 800ff40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff42:	2302      	movs	r3, #2
 800ff44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ff46:	2301      	movs	r3, #1
 800ff48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ff4e:	2307      	movs	r3, #7
 800ff50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800ff52:	f107 030c 	add.w	r3, r7, #12
 800ff56:	4619      	mov	r1, r3
 800ff58:	480c      	ldr	r0, [pc, #48]	; (800ff8c <HAL_UART_MspInit+0x7c>)
 800ff5a:	f7f6 ff59 	bl	8006e10 <HAL_GPIO_Init>
		
		USART2->CR1 |= USART_CR1_RXNEIE;
 800ff5e:	4b09      	ldr	r3, [pc, #36]	; (800ff84 <HAL_UART_MspInit+0x74>)
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	4a08      	ldr	r2, [pc, #32]	; (800ff84 <HAL_UART_MspInit+0x74>)
 800ff64:	f043 0320 	orr.w	r3, r3, #32
 800ff68:	60d3      	str	r3, [r2, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	2106      	movs	r1, #6
 800ff6e:	2026      	movs	r0, #38	; 0x26
 800ff70:	f7f5 ff3a 	bl	8005de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ff74:	2026      	movs	r0, #38	; 0x26
 800ff76:	f7f5 ff63 	bl	8005e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ff7a:	bf00      	nop
 800ff7c:	3720      	adds	r7, #32
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	40004400 	.word	0x40004400
 800ff88:	40023800 	.word	0x40023800
 800ff8c:	40020000 	.word	0x40020000

0800ff90 <UARTsendChar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->SR & USART_SR_TXE));
 800ff9a:	bf00      	nop
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <UARTsendChar+0x2c>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d0f9      	beq.n	800ff9c <UARTsendChar+0xc>
	return (USART2->DR = chr);
 800ffa8:	4a04      	ldr	r2, [pc, #16]	; (800ffbc <UARTsendChar+0x2c>)
 800ffaa:	79fb      	ldrb	r3, [r7, #7]
 800ffac:	6053      	str	r3, [r2, #4]
 800ffae:	b2db      	uxtb	r3, r3
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr
 800ffbc:	40004400 	.word	0x40004400

0800ffc0 <UARTsendBuff>:

uint8_t UARTsendBuff(char *chr, uint32_t len){
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
	while(len>0){
 800ffca:	e009      	b.n	800ffe0 <UARTsendBuff+0x20>
		UARTsendChar(*(chr++));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	607a      	str	r2, [r7, #4]
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7ff ffdb 	bl	800ff90 <UARTsendChar>
		len--;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	603b      	str	r3, [r7, #0]
	while(len>0){
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1f2      	bne.n	800ffcc <UARTsendBuff+0xc>
	}
	return 0;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800fff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800fff6:	e003      	b.n	8010000 <LoopCopyDataInit>

0800fff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fff8:	4b0c      	ldr	r3, [pc, #48]	; (801002c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fffe:	3104      	adds	r1, #4

08010000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010000:	480b      	ldr	r0, [pc, #44]	; (8010030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010002:	4b0c      	ldr	r3, [pc, #48]	; (8010034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010008:	d3f6      	bcc.n	800fff8 <CopyDataInit>
  ldr  r2, =_sbss
 801000a:	4a0b      	ldr	r2, [pc, #44]	; (8010038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801000c:	e002      	b.n	8010014 <LoopFillZerobss>

0801000e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801000e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010010:	f842 3b04 	str.w	r3, [r2], #4

08010014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010014:	4b09      	ldr	r3, [pc, #36]	; (801003c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010018:	d3f9      	bcc.n	801000e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801001a:	f7fe fe55 	bl	800ecc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801001e:	f000 f817 	bl	8010050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010022:	f7fe fcab 	bl	800e97c <main>
  bx  lr    
 8010026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010028:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801002c:	08011870 	.word	0x08011870
  ldr  r0, =_sdata
 8010030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010034:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 8010038:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 801003c:	200143d8 	.word	0x200143d8

08010040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010040:	e7fe      	b.n	8010040 <ADC_IRQHandler>
	...

08010044 <__errno>:
 8010044:	4b01      	ldr	r3, [pc, #4]	; (801004c <__errno+0x8>)
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop
 801004c:	20000074 	.word	0x20000074

08010050 <__libc_init_array>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	4e0d      	ldr	r6, [pc, #52]	; (8010088 <__libc_init_array+0x38>)
 8010054:	4c0d      	ldr	r4, [pc, #52]	; (801008c <__libc_init_array+0x3c>)
 8010056:	1ba4      	subs	r4, r4, r6
 8010058:	10a4      	asrs	r4, r4, #2
 801005a:	2500      	movs	r5, #0
 801005c:	42a5      	cmp	r5, r4
 801005e:	d109      	bne.n	8010074 <__libc_init_array+0x24>
 8010060:	4e0b      	ldr	r6, [pc, #44]	; (8010090 <__libc_init_array+0x40>)
 8010062:	4c0c      	ldr	r4, [pc, #48]	; (8010094 <__libc_init_array+0x44>)
 8010064:	f001 f882 	bl	801116c <_init>
 8010068:	1ba4      	subs	r4, r4, r6
 801006a:	10a4      	asrs	r4, r4, #2
 801006c:	2500      	movs	r5, #0
 801006e:	42a5      	cmp	r5, r4
 8010070:	d105      	bne.n	801007e <__libc_init_array+0x2e>
 8010072:	bd70      	pop	{r4, r5, r6, pc}
 8010074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010078:	4798      	blx	r3
 801007a:	3501      	adds	r5, #1
 801007c:	e7ee      	b.n	801005c <__libc_init_array+0xc>
 801007e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010082:	4798      	blx	r3
 8010084:	3501      	adds	r5, #1
 8010086:	e7f2      	b.n	801006e <__libc_init_array+0x1e>
 8010088:	08011868 	.word	0x08011868
 801008c:	08011868 	.word	0x08011868
 8010090:	08011868 	.word	0x08011868
 8010094:	0801186c 	.word	0x0801186c

08010098 <memcpy>:
 8010098:	b510      	push	{r4, lr}
 801009a:	1e43      	subs	r3, r0, #1
 801009c:	440a      	add	r2, r1
 801009e:	4291      	cmp	r1, r2
 80100a0:	d100      	bne.n	80100a4 <memcpy+0xc>
 80100a2:	bd10      	pop	{r4, pc}
 80100a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ac:	e7f7      	b.n	801009e <memcpy+0x6>

080100ae <memset>:
 80100ae:	4402      	add	r2, r0
 80100b0:	4603      	mov	r3, r0
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d100      	bne.n	80100b8 <memset+0xa>
 80100b6:	4770      	bx	lr
 80100b8:	f803 1b01 	strb.w	r1, [r3], #1
 80100bc:	e7f9      	b.n	80100b2 <memset+0x4>
	...

080100c0 <pow>:
 80100c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	ed2d 8b04 	vpush	{d8-d9}
 80100c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801039c <pow+0x2dc>
 80100cc:	b08d      	sub	sp, #52	; 0x34
 80100ce:	ec57 6b10 	vmov	r6, r7, d0
 80100d2:	ec55 4b11 	vmov	r4, r5, d1
 80100d6:	f000 f963 	bl	80103a0 <__ieee754_pow>
 80100da:	f999 3000 	ldrsb.w	r3, [r9]
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	3301      	adds	r3, #1
 80100e2:	eeb0 8a40 	vmov.f32	s16, s0
 80100e6:	eef0 8a60 	vmov.f32	s17, s1
 80100ea:	46c8      	mov	r8, r9
 80100ec:	d05f      	beq.n	80101ae <pow+0xee>
 80100ee:	4622      	mov	r2, r4
 80100f0:	462b      	mov	r3, r5
 80100f2:	4620      	mov	r0, r4
 80100f4:	4629      	mov	r1, r5
 80100f6:	f7f0 fce1 	bl	8000abc <__aeabi_dcmpun>
 80100fa:	4683      	mov	fp, r0
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d156      	bne.n	80101ae <pow+0xee>
 8010100:	4632      	mov	r2, r6
 8010102:	463b      	mov	r3, r7
 8010104:	4630      	mov	r0, r6
 8010106:	4639      	mov	r1, r7
 8010108:	f7f0 fcd8 	bl	8000abc <__aeabi_dcmpun>
 801010c:	9001      	str	r0, [sp, #4]
 801010e:	b1e8      	cbz	r0, 801014c <pow+0x8c>
 8010110:	2200      	movs	r2, #0
 8010112:	2300      	movs	r3, #0
 8010114:	4620      	mov	r0, r4
 8010116:	4629      	mov	r1, r5
 8010118:	f7f0 fc9e 	bl	8000a58 <__aeabi_dcmpeq>
 801011c:	2800      	cmp	r0, #0
 801011e:	d046      	beq.n	80101ae <pow+0xee>
 8010120:	2301      	movs	r3, #1
 8010122:	9302      	str	r3, [sp, #8]
 8010124:	4b96      	ldr	r3, [pc, #600]	; (8010380 <pow+0x2c0>)
 8010126:	9303      	str	r3, [sp, #12]
 8010128:	4b96      	ldr	r3, [pc, #600]	; (8010384 <pow+0x2c4>)
 801012a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801012e:	2200      	movs	r2, #0
 8010130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010134:	9b00      	ldr	r3, [sp, #0]
 8010136:	2b02      	cmp	r3, #2
 8010138:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801013c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010140:	d033      	beq.n	80101aa <pow+0xea>
 8010142:	a802      	add	r0, sp, #8
 8010144:	f000 fefb 	bl	8010f3e <matherr>
 8010148:	bb48      	cbnz	r0, 801019e <pow+0xde>
 801014a:	e05d      	b.n	8010208 <pow+0x148>
 801014c:	f04f 0a00 	mov.w	sl, #0
 8010150:	f04f 0b00 	mov.w	fp, #0
 8010154:	4652      	mov	r2, sl
 8010156:	465b      	mov	r3, fp
 8010158:	4630      	mov	r0, r6
 801015a:	4639      	mov	r1, r7
 801015c:	f7f0 fc7c 	bl	8000a58 <__aeabi_dcmpeq>
 8010160:	ec4b ab19 	vmov	d9, sl, fp
 8010164:	2800      	cmp	r0, #0
 8010166:	d054      	beq.n	8010212 <pow+0x152>
 8010168:	4652      	mov	r2, sl
 801016a:	465b      	mov	r3, fp
 801016c:	4620      	mov	r0, r4
 801016e:	4629      	mov	r1, r5
 8010170:	f7f0 fc72 	bl	8000a58 <__aeabi_dcmpeq>
 8010174:	4680      	mov	r8, r0
 8010176:	b318      	cbz	r0, 80101c0 <pow+0x100>
 8010178:	2301      	movs	r3, #1
 801017a:	9302      	str	r3, [sp, #8]
 801017c:	4b80      	ldr	r3, [pc, #512]	; (8010380 <pow+0x2c0>)
 801017e:	9303      	str	r3, [sp, #12]
 8010180:	9b01      	ldr	r3, [sp, #4]
 8010182:	930a      	str	r3, [sp, #40]	; 0x28
 8010184:	9b00      	ldr	r3, [sp, #0]
 8010186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801018a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801018e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d0d5      	beq.n	8010142 <pow+0x82>
 8010196:	4b7b      	ldr	r3, [pc, #492]	; (8010384 <pow+0x2c4>)
 8010198:	2200      	movs	r2, #0
 801019a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801019e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a0:	b11b      	cbz	r3, 80101aa <pow+0xea>
 80101a2:	f7ff ff4f 	bl	8010044 <__errno>
 80101a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a8:	6003      	str	r3, [r0, #0]
 80101aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80101ae:	eeb0 0a48 	vmov.f32	s0, s16
 80101b2:	eef0 0a68 	vmov.f32	s1, s17
 80101b6:	b00d      	add	sp, #52	; 0x34
 80101b8:	ecbd 8b04 	vpop	{d8-d9}
 80101bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c0:	ec45 4b10 	vmov	d0, r4, r5
 80101c4:	f000 feb3 	bl	8010f2e <finite>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d0f0      	beq.n	80101ae <pow+0xee>
 80101cc:	4652      	mov	r2, sl
 80101ce:	465b      	mov	r3, fp
 80101d0:	4620      	mov	r0, r4
 80101d2:	4629      	mov	r1, r5
 80101d4:	f7f0 fc4a 	bl	8000a6c <__aeabi_dcmplt>
 80101d8:	2800      	cmp	r0, #0
 80101da:	d0e8      	beq.n	80101ae <pow+0xee>
 80101dc:	2301      	movs	r3, #1
 80101de:	9302      	str	r3, [sp, #8]
 80101e0:	4b67      	ldr	r3, [pc, #412]	; (8010380 <pow+0x2c0>)
 80101e2:	9303      	str	r3, [sp, #12]
 80101e4:	f999 3000 	ldrsb.w	r3, [r9]
 80101e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80101ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80101f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80101f4:	b913      	cbnz	r3, 80101fc <pow+0x13c>
 80101f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80101fa:	e7a2      	b.n	8010142 <pow+0x82>
 80101fc:	4962      	ldr	r1, [pc, #392]	; (8010388 <pow+0x2c8>)
 80101fe:	2000      	movs	r0, #0
 8010200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010204:	2b02      	cmp	r3, #2
 8010206:	d19c      	bne.n	8010142 <pow+0x82>
 8010208:	f7ff ff1c 	bl	8010044 <__errno>
 801020c:	2321      	movs	r3, #33	; 0x21
 801020e:	6003      	str	r3, [r0, #0]
 8010210:	e7c5      	b.n	801019e <pow+0xde>
 8010212:	eeb0 0a48 	vmov.f32	s0, s16
 8010216:	eef0 0a68 	vmov.f32	s1, s17
 801021a:	f000 fe88 	bl	8010f2e <finite>
 801021e:	9000      	str	r0, [sp, #0]
 8010220:	2800      	cmp	r0, #0
 8010222:	f040 8081 	bne.w	8010328 <pow+0x268>
 8010226:	ec47 6b10 	vmov	d0, r6, r7
 801022a:	f000 fe80 	bl	8010f2e <finite>
 801022e:	2800      	cmp	r0, #0
 8010230:	d07a      	beq.n	8010328 <pow+0x268>
 8010232:	ec45 4b10 	vmov	d0, r4, r5
 8010236:	f000 fe7a 	bl	8010f2e <finite>
 801023a:	2800      	cmp	r0, #0
 801023c:	d074      	beq.n	8010328 <pow+0x268>
 801023e:	ec53 2b18 	vmov	r2, r3, d8
 8010242:	ee18 0a10 	vmov	r0, s16
 8010246:	4619      	mov	r1, r3
 8010248:	f7f0 fc38 	bl	8000abc <__aeabi_dcmpun>
 801024c:	f999 9000 	ldrsb.w	r9, [r9]
 8010250:	4b4b      	ldr	r3, [pc, #300]	; (8010380 <pow+0x2c0>)
 8010252:	b1b0      	cbz	r0, 8010282 <pow+0x1c2>
 8010254:	2201      	movs	r2, #1
 8010256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801025a:	9b00      	ldr	r3, [sp, #0]
 801025c:	930a      	str	r3, [sp, #40]	; 0x28
 801025e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010262:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010266:	f1b9 0f00 	cmp.w	r9, #0
 801026a:	d0c4      	beq.n	80101f6 <pow+0x136>
 801026c:	4652      	mov	r2, sl
 801026e:	465b      	mov	r3, fp
 8010270:	4650      	mov	r0, sl
 8010272:	4659      	mov	r1, fp
 8010274:	f7f0 fab2 	bl	80007dc <__aeabi_ddiv>
 8010278:	f1b9 0f02 	cmp.w	r9, #2
 801027c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010280:	e7c1      	b.n	8010206 <pow+0x146>
 8010282:	2203      	movs	r2, #3
 8010284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010288:	900a      	str	r0, [sp, #40]	; 0x28
 801028a:	4629      	mov	r1, r5
 801028c:	4620      	mov	r0, r4
 801028e:	2200      	movs	r2, #0
 8010290:	4b3e      	ldr	r3, [pc, #248]	; (801038c <pow+0x2cc>)
 8010292:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801029a:	f7f0 f975 	bl	8000588 <__aeabi_dmul>
 801029e:	4604      	mov	r4, r0
 80102a0:	460d      	mov	r5, r1
 80102a2:	f1b9 0f00 	cmp.w	r9, #0
 80102a6:	d124      	bne.n	80102f2 <pow+0x232>
 80102a8:	4b39      	ldr	r3, [pc, #228]	; (8010390 <pow+0x2d0>)
 80102aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80102ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102b2:	4630      	mov	r0, r6
 80102b4:	4652      	mov	r2, sl
 80102b6:	465b      	mov	r3, fp
 80102b8:	4639      	mov	r1, r7
 80102ba:	f7f0 fbd7 	bl	8000a6c <__aeabi_dcmplt>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d056      	beq.n	8010370 <pow+0x2b0>
 80102c2:	ec45 4b10 	vmov	d0, r4, r5
 80102c6:	f000 fe47 	bl	8010f58 <rint>
 80102ca:	4622      	mov	r2, r4
 80102cc:	462b      	mov	r3, r5
 80102ce:	ec51 0b10 	vmov	r0, r1, d0
 80102d2:	f7f0 fbc1 	bl	8000a58 <__aeabi_dcmpeq>
 80102d6:	b920      	cbnz	r0, 80102e2 <pow+0x222>
 80102d8:	4b2e      	ldr	r3, [pc, #184]	; (8010394 <pow+0x2d4>)
 80102da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80102de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102e2:	f998 3000 	ldrsb.w	r3, [r8]
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d142      	bne.n	8010370 <pow+0x2b0>
 80102ea:	f7ff feab 	bl	8010044 <__errno>
 80102ee:	2322      	movs	r3, #34	; 0x22
 80102f0:	e78d      	b.n	801020e <pow+0x14e>
 80102f2:	4b29      	ldr	r3, [pc, #164]	; (8010398 <pow+0x2d8>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102fa:	4630      	mov	r0, r6
 80102fc:	4652      	mov	r2, sl
 80102fe:	465b      	mov	r3, fp
 8010300:	4639      	mov	r1, r7
 8010302:	f7f0 fbb3 	bl	8000a6c <__aeabi_dcmplt>
 8010306:	2800      	cmp	r0, #0
 8010308:	d0eb      	beq.n	80102e2 <pow+0x222>
 801030a:	ec45 4b10 	vmov	d0, r4, r5
 801030e:	f000 fe23 	bl	8010f58 <rint>
 8010312:	4622      	mov	r2, r4
 8010314:	462b      	mov	r3, r5
 8010316:	ec51 0b10 	vmov	r0, r1, d0
 801031a:	f7f0 fb9d 	bl	8000a58 <__aeabi_dcmpeq>
 801031e:	2800      	cmp	r0, #0
 8010320:	d1df      	bne.n	80102e2 <pow+0x222>
 8010322:	2200      	movs	r2, #0
 8010324:	4b18      	ldr	r3, [pc, #96]	; (8010388 <pow+0x2c8>)
 8010326:	e7da      	b.n	80102de <pow+0x21e>
 8010328:	2200      	movs	r2, #0
 801032a:	2300      	movs	r3, #0
 801032c:	ec51 0b18 	vmov	r0, r1, d8
 8010330:	f7f0 fb92 	bl	8000a58 <__aeabi_dcmpeq>
 8010334:	2800      	cmp	r0, #0
 8010336:	f43f af3a 	beq.w	80101ae <pow+0xee>
 801033a:	ec47 6b10 	vmov	d0, r6, r7
 801033e:	f000 fdf6 	bl	8010f2e <finite>
 8010342:	2800      	cmp	r0, #0
 8010344:	f43f af33 	beq.w	80101ae <pow+0xee>
 8010348:	ec45 4b10 	vmov	d0, r4, r5
 801034c:	f000 fdef 	bl	8010f2e <finite>
 8010350:	2800      	cmp	r0, #0
 8010352:	f43f af2c 	beq.w	80101ae <pow+0xee>
 8010356:	2304      	movs	r3, #4
 8010358:	9302      	str	r3, [sp, #8]
 801035a:	4b09      	ldr	r3, [pc, #36]	; (8010380 <pow+0x2c0>)
 801035c:	9303      	str	r3, [sp, #12]
 801035e:	2300      	movs	r3, #0
 8010360:	930a      	str	r3, [sp, #40]	; 0x28
 8010362:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801036a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801036e:	e7b8      	b.n	80102e2 <pow+0x222>
 8010370:	a802      	add	r0, sp, #8
 8010372:	f000 fde4 	bl	8010f3e <matherr>
 8010376:	2800      	cmp	r0, #0
 8010378:	f47f af11 	bne.w	801019e <pow+0xde>
 801037c:	e7b5      	b.n	80102ea <pow+0x22a>
 801037e:	bf00      	nop
 8010380:	0801181c 	.word	0x0801181c
 8010384:	3ff00000 	.word	0x3ff00000
 8010388:	fff00000 	.word	0xfff00000
 801038c:	3fe00000 	.word	0x3fe00000
 8010390:	47efffff 	.word	0x47efffff
 8010394:	c7efffff 	.word	0xc7efffff
 8010398:	7ff00000 	.word	0x7ff00000
 801039c:	200000d8 	.word	0x200000d8

080103a0 <__ieee754_pow>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	b091      	sub	sp, #68	; 0x44
 80103a6:	ed8d 1b00 	vstr	d1, [sp]
 80103aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80103ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80103b2:	ea58 0302 	orrs.w	r3, r8, r2
 80103b6:	ec57 6b10 	vmov	r6, r7, d0
 80103ba:	f000 84be 	beq.w	8010d3a <__ieee754_pow+0x99a>
 80103be:	4b7a      	ldr	r3, [pc, #488]	; (80105a8 <__ieee754_pow+0x208>)
 80103c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80103c4:	429c      	cmp	r4, r3
 80103c6:	463d      	mov	r5, r7
 80103c8:	ee10 aa10 	vmov	sl, s0
 80103cc:	dc09      	bgt.n	80103e2 <__ieee754_pow+0x42>
 80103ce:	d103      	bne.n	80103d8 <__ieee754_pow+0x38>
 80103d0:	b93e      	cbnz	r6, 80103e2 <__ieee754_pow+0x42>
 80103d2:	45a0      	cmp	r8, r4
 80103d4:	dc0d      	bgt.n	80103f2 <__ieee754_pow+0x52>
 80103d6:	e001      	b.n	80103dc <__ieee754_pow+0x3c>
 80103d8:	4598      	cmp	r8, r3
 80103da:	dc02      	bgt.n	80103e2 <__ieee754_pow+0x42>
 80103dc:	4598      	cmp	r8, r3
 80103de:	d10e      	bne.n	80103fe <__ieee754_pow+0x5e>
 80103e0:	b16a      	cbz	r2, 80103fe <__ieee754_pow+0x5e>
 80103e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80103e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80103ea:	ea54 030a 	orrs.w	r3, r4, sl
 80103ee:	f000 84a4 	beq.w	8010d3a <__ieee754_pow+0x99a>
 80103f2:	486e      	ldr	r0, [pc, #440]	; (80105ac <__ieee754_pow+0x20c>)
 80103f4:	b011      	add	sp, #68	; 0x44
 80103f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	f000 bda5 	b.w	8010f48 <nan>
 80103fe:	2d00      	cmp	r5, #0
 8010400:	da53      	bge.n	80104aa <__ieee754_pow+0x10a>
 8010402:	4b6b      	ldr	r3, [pc, #428]	; (80105b0 <__ieee754_pow+0x210>)
 8010404:	4598      	cmp	r8, r3
 8010406:	dc4d      	bgt.n	80104a4 <__ieee754_pow+0x104>
 8010408:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801040c:	4598      	cmp	r8, r3
 801040e:	dd4c      	ble.n	80104aa <__ieee754_pow+0x10a>
 8010410:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010414:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010418:	2b14      	cmp	r3, #20
 801041a:	dd26      	ble.n	801046a <__ieee754_pow+0xca>
 801041c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010420:	fa22 f103 	lsr.w	r1, r2, r3
 8010424:	fa01 f303 	lsl.w	r3, r1, r3
 8010428:	4293      	cmp	r3, r2
 801042a:	d13e      	bne.n	80104aa <__ieee754_pow+0x10a>
 801042c:	f001 0101 	and.w	r1, r1, #1
 8010430:	f1c1 0b02 	rsb	fp, r1, #2
 8010434:	2a00      	cmp	r2, #0
 8010436:	d15b      	bne.n	80104f0 <__ieee754_pow+0x150>
 8010438:	4b5b      	ldr	r3, [pc, #364]	; (80105a8 <__ieee754_pow+0x208>)
 801043a:	4598      	cmp	r8, r3
 801043c:	d124      	bne.n	8010488 <__ieee754_pow+0xe8>
 801043e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010442:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010446:	ea53 030a 	orrs.w	r3, r3, sl
 801044a:	f000 8476 	beq.w	8010d3a <__ieee754_pow+0x99a>
 801044e:	4b59      	ldr	r3, [pc, #356]	; (80105b4 <__ieee754_pow+0x214>)
 8010450:	429c      	cmp	r4, r3
 8010452:	dd2d      	ble.n	80104b0 <__ieee754_pow+0x110>
 8010454:	f1b9 0f00 	cmp.w	r9, #0
 8010458:	f280 8473 	bge.w	8010d42 <__ieee754_pow+0x9a2>
 801045c:	2000      	movs	r0, #0
 801045e:	2100      	movs	r1, #0
 8010460:	ec41 0b10 	vmov	d0, r0, r1
 8010464:	b011      	add	sp, #68	; 0x44
 8010466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046a:	2a00      	cmp	r2, #0
 801046c:	d13e      	bne.n	80104ec <__ieee754_pow+0x14c>
 801046e:	f1c3 0314 	rsb	r3, r3, #20
 8010472:	fa48 f103 	asr.w	r1, r8, r3
 8010476:	fa01 f303 	lsl.w	r3, r1, r3
 801047a:	4543      	cmp	r3, r8
 801047c:	f040 8469 	bne.w	8010d52 <__ieee754_pow+0x9b2>
 8010480:	f001 0101 	and.w	r1, r1, #1
 8010484:	f1c1 0b02 	rsb	fp, r1, #2
 8010488:	4b4b      	ldr	r3, [pc, #300]	; (80105b8 <__ieee754_pow+0x218>)
 801048a:	4598      	cmp	r8, r3
 801048c:	d118      	bne.n	80104c0 <__ieee754_pow+0x120>
 801048e:	f1b9 0f00 	cmp.w	r9, #0
 8010492:	f280 845a 	bge.w	8010d4a <__ieee754_pow+0x9aa>
 8010496:	4948      	ldr	r1, [pc, #288]	; (80105b8 <__ieee754_pow+0x218>)
 8010498:	4632      	mov	r2, r6
 801049a:	463b      	mov	r3, r7
 801049c:	2000      	movs	r0, #0
 801049e:	f7f0 f99d 	bl	80007dc <__aeabi_ddiv>
 80104a2:	e7dd      	b.n	8010460 <__ieee754_pow+0xc0>
 80104a4:	f04f 0b02 	mov.w	fp, #2
 80104a8:	e7c4      	b.n	8010434 <__ieee754_pow+0x94>
 80104aa:	f04f 0b00 	mov.w	fp, #0
 80104ae:	e7c1      	b.n	8010434 <__ieee754_pow+0x94>
 80104b0:	f1b9 0f00 	cmp.w	r9, #0
 80104b4:	dad2      	bge.n	801045c <__ieee754_pow+0xbc>
 80104b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80104ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104be:	e7cf      	b.n	8010460 <__ieee754_pow+0xc0>
 80104c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80104c4:	d106      	bne.n	80104d4 <__ieee754_pow+0x134>
 80104c6:	4632      	mov	r2, r6
 80104c8:	463b      	mov	r3, r7
 80104ca:	4610      	mov	r0, r2
 80104cc:	4619      	mov	r1, r3
 80104ce:	f7f0 f85b 	bl	8000588 <__aeabi_dmul>
 80104d2:	e7c5      	b.n	8010460 <__ieee754_pow+0xc0>
 80104d4:	4b39      	ldr	r3, [pc, #228]	; (80105bc <__ieee754_pow+0x21c>)
 80104d6:	4599      	cmp	r9, r3
 80104d8:	d10a      	bne.n	80104f0 <__ieee754_pow+0x150>
 80104da:	2d00      	cmp	r5, #0
 80104dc:	db08      	blt.n	80104f0 <__ieee754_pow+0x150>
 80104de:	ec47 6b10 	vmov	d0, r6, r7
 80104e2:	b011      	add	sp, #68	; 0x44
 80104e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	f000 bc68 	b.w	8010dbc <__ieee754_sqrt>
 80104ec:	f04f 0b00 	mov.w	fp, #0
 80104f0:	ec47 6b10 	vmov	d0, r6, r7
 80104f4:	f000 fd12 	bl	8010f1c <fabs>
 80104f8:	ec51 0b10 	vmov	r0, r1, d0
 80104fc:	f1ba 0f00 	cmp.w	sl, #0
 8010500:	d127      	bne.n	8010552 <__ieee754_pow+0x1b2>
 8010502:	b124      	cbz	r4, 801050e <__ieee754_pow+0x16e>
 8010504:	4b2c      	ldr	r3, [pc, #176]	; (80105b8 <__ieee754_pow+0x218>)
 8010506:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801050a:	429a      	cmp	r2, r3
 801050c:	d121      	bne.n	8010552 <__ieee754_pow+0x1b2>
 801050e:	f1b9 0f00 	cmp.w	r9, #0
 8010512:	da05      	bge.n	8010520 <__ieee754_pow+0x180>
 8010514:	4602      	mov	r2, r0
 8010516:	460b      	mov	r3, r1
 8010518:	2000      	movs	r0, #0
 801051a:	4927      	ldr	r1, [pc, #156]	; (80105b8 <__ieee754_pow+0x218>)
 801051c:	f7f0 f95e 	bl	80007dc <__aeabi_ddiv>
 8010520:	2d00      	cmp	r5, #0
 8010522:	da9d      	bge.n	8010460 <__ieee754_pow+0xc0>
 8010524:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010528:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801052c:	ea54 030b 	orrs.w	r3, r4, fp
 8010530:	d108      	bne.n	8010544 <__ieee754_pow+0x1a4>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	4610      	mov	r0, r2
 8010538:	4619      	mov	r1, r3
 801053a:	f7ef fe6d 	bl	8000218 <__aeabi_dsub>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	e7ac      	b.n	801049e <__ieee754_pow+0xfe>
 8010544:	f1bb 0f01 	cmp.w	fp, #1
 8010548:	d18a      	bne.n	8010460 <__ieee754_pow+0xc0>
 801054a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801054e:	4619      	mov	r1, r3
 8010550:	e786      	b.n	8010460 <__ieee754_pow+0xc0>
 8010552:	0fed      	lsrs	r5, r5, #31
 8010554:	1e6b      	subs	r3, r5, #1
 8010556:	930d      	str	r3, [sp, #52]	; 0x34
 8010558:	ea5b 0303 	orrs.w	r3, fp, r3
 801055c:	d102      	bne.n	8010564 <__ieee754_pow+0x1c4>
 801055e:	4632      	mov	r2, r6
 8010560:	463b      	mov	r3, r7
 8010562:	e7e8      	b.n	8010536 <__ieee754_pow+0x196>
 8010564:	4b16      	ldr	r3, [pc, #88]	; (80105c0 <__ieee754_pow+0x220>)
 8010566:	4598      	cmp	r8, r3
 8010568:	f340 80fe 	ble.w	8010768 <__ieee754_pow+0x3c8>
 801056c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010570:	4598      	cmp	r8, r3
 8010572:	dd0a      	ble.n	801058a <__ieee754_pow+0x1ea>
 8010574:	4b0f      	ldr	r3, [pc, #60]	; (80105b4 <__ieee754_pow+0x214>)
 8010576:	429c      	cmp	r4, r3
 8010578:	dc0d      	bgt.n	8010596 <__ieee754_pow+0x1f6>
 801057a:	f1b9 0f00 	cmp.w	r9, #0
 801057e:	f6bf af6d 	bge.w	801045c <__ieee754_pow+0xbc>
 8010582:	a307      	add	r3, pc, #28	; (adr r3, 80105a0 <__ieee754_pow+0x200>)
 8010584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010588:	e79f      	b.n	80104ca <__ieee754_pow+0x12a>
 801058a:	4b0e      	ldr	r3, [pc, #56]	; (80105c4 <__ieee754_pow+0x224>)
 801058c:	429c      	cmp	r4, r3
 801058e:	ddf4      	ble.n	801057a <__ieee754_pow+0x1da>
 8010590:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <__ieee754_pow+0x218>)
 8010592:	429c      	cmp	r4, r3
 8010594:	dd18      	ble.n	80105c8 <__ieee754_pow+0x228>
 8010596:	f1b9 0f00 	cmp.w	r9, #0
 801059a:	dcf2      	bgt.n	8010582 <__ieee754_pow+0x1e2>
 801059c:	e75e      	b.n	801045c <__ieee754_pow+0xbc>
 801059e:	bf00      	nop
 80105a0:	8800759c 	.word	0x8800759c
 80105a4:	7e37e43c 	.word	0x7e37e43c
 80105a8:	7ff00000 	.word	0x7ff00000
 80105ac:	0801181f 	.word	0x0801181f
 80105b0:	433fffff 	.word	0x433fffff
 80105b4:	3fefffff 	.word	0x3fefffff
 80105b8:	3ff00000 	.word	0x3ff00000
 80105bc:	3fe00000 	.word	0x3fe00000
 80105c0:	41e00000 	.word	0x41e00000
 80105c4:	3feffffe 	.word	0x3feffffe
 80105c8:	2200      	movs	r2, #0
 80105ca:	4b63      	ldr	r3, [pc, #396]	; (8010758 <__ieee754_pow+0x3b8>)
 80105cc:	f7ef fe24 	bl	8000218 <__aeabi_dsub>
 80105d0:	a355      	add	r3, pc, #340	; (adr r3, 8010728 <__ieee754_pow+0x388>)
 80105d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d6:	4604      	mov	r4, r0
 80105d8:	460d      	mov	r5, r1
 80105da:	f7ef ffd5 	bl	8000588 <__aeabi_dmul>
 80105de:	a354      	add	r3, pc, #336	; (adr r3, 8010730 <__ieee754_pow+0x390>)
 80105e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e4:	4606      	mov	r6, r0
 80105e6:	460f      	mov	r7, r1
 80105e8:	4620      	mov	r0, r4
 80105ea:	4629      	mov	r1, r5
 80105ec:	f7ef ffcc 	bl	8000588 <__aeabi_dmul>
 80105f0:	2200      	movs	r2, #0
 80105f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105f6:	4b59      	ldr	r3, [pc, #356]	; (801075c <__ieee754_pow+0x3bc>)
 80105f8:	4620      	mov	r0, r4
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7ef ffc4 	bl	8000588 <__aeabi_dmul>
 8010600:	4602      	mov	r2, r0
 8010602:	460b      	mov	r3, r1
 8010604:	a14c      	add	r1, pc, #304	; (adr r1, 8010738 <__ieee754_pow+0x398>)
 8010606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060a:	f7ef fe05 	bl	8000218 <__aeabi_dsub>
 801060e:	4622      	mov	r2, r4
 8010610:	462b      	mov	r3, r5
 8010612:	f7ef ffb9 	bl	8000588 <__aeabi_dmul>
 8010616:	4602      	mov	r2, r0
 8010618:	460b      	mov	r3, r1
 801061a:	2000      	movs	r0, #0
 801061c:	4950      	ldr	r1, [pc, #320]	; (8010760 <__ieee754_pow+0x3c0>)
 801061e:	f7ef fdfb 	bl	8000218 <__aeabi_dsub>
 8010622:	4622      	mov	r2, r4
 8010624:	462b      	mov	r3, r5
 8010626:	4680      	mov	r8, r0
 8010628:	4689      	mov	r9, r1
 801062a:	4620      	mov	r0, r4
 801062c:	4629      	mov	r1, r5
 801062e:	f7ef ffab 	bl	8000588 <__aeabi_dmul>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4640      	mov	r0, r8
 8010638:	4649      	mov	r1, r9
 801063a:	f7ef ffa5 	bl	8000588 <__aeabi_dmul>
 801063e:	a340      	add	r3, pc, #256	; (adr r3, 8010740 <__ieee754_pow+0x3a0>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	f7ef ffa0 	bl	8000588 <__aeabi_dmul>
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010650:	f7ef fde2 	bl	8000218 <__aeabi_dsub>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	4604      	mov	r4, r0
 801065a:	460d      	mov	r5, r1
 801065c:	4630      	mov	r0, r6
 801065e:	4639      	mov	r1, r7
 8010660:	f7ef fddc 	bl	800021c <__adddf3>
 8010664:	2000      	movs	r0, #0
 8010666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801066a:	4632      	mov	r2, r6
 801066c:	463b      	mov	r3, r7
 801066e:	f7ef fdd3 	bl	8000218 <__aeabi_dsub>
 8010672:	4602      	mov	r2, r0
 8010674:	460b      	mov	r3, r1
 8010676:	4620      	mov	r0, r4
 8010678:	4629      	mov	r1, r5
 801067a:	f7ef fdcd 	bl	8000218 <__aeabi_dsub>
 801067e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010680:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010684:	4313      	orrs	r3, r2
 8010686:	4606      	mov	r6, r0
 8010688:	460f      	mov	r7, r1
 801068a:	f040 81eb 	bne.w	8010a64 <__ieee754_pow+0x6c4>
 801068e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010748 <__ieee754_pow+0x3a8>
 8010692:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010696:	2400      	movs	r4, #0
 8010698:	4622      	mov	r2, r4
 801069a:	462b      	mov	r3, r5
 801069c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80106a4:	f7ef fdb8 	bl	8000218 <__aeabi_dsub>
 80106a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106ac:	f7ef ff6c 	bl	8000588 <__aeabi_dmul>
 80106b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106b4:	4680      	mov	r8, r0
 80106b6:	4689      	mov	r9, r1
 80106b8:	4630      	mov	r0, r6
 80106ba:	4639      	mov	r1, r7
 80106bc:	f7ef ff64 	bl	8000588 <__aeabi_dmul>
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4640      	mov	r0, r8
 80106c6:	4649      	mov	r1, r9
 80106c8:	f7ef fda8 	bl	800021c <__adddf3>
 80106cc:	4622      	mov	r2, r4
 80106ce:	462b      	mov	r3, r5
 80106d0:	4680      	mov	r8, r0
 80106d2:	4689      	mov	r9, r1
 80106d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106d8:	f7ef ff56 	bl	8000588 <__aeabi_dmul>
 80106dc:	460b      	mov	r3, r1
 80106de:	4604      	mov	r4, r0
 80106e0:	460d      	mov	r5, r1
 80106e2:	4602      	mov	r2, r0
 80106e4:	4649      	mov	r1, r9
 80106e6:	4640      	mov	r0, r8
 80106e8:	e9cd 4500 	strd	r4, r5, [sp]
 80106ec:	f7ef fd96 	bl	800021c <__adddf3>
 80106f0:	4b1c      	ldr	r3, [pc, #112]	; (8010764 <__ieee754_pow+0x3c4>)
 80106f2:	4299      	cmp	r1, r3
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	468b      	mov	fp, r1
 80106fa:	f340 82f7 	ble.w	8010cec <__ieee754_pow+0x94c>
 80106fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010702:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010706:	4303      	orrs	r3, r0
 8010708:	f000 81ea 	beq.w	8010ae0 <__ieee754_pow+0x740>
 801070c:	a310      	add	r3, pc, #64	; (adr r3, 8010750 <__ieee754_pow+0x3b0>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010716:	f7ef ff37 	bl	8000588 <__aeabi_dmul>
 801071a:	a30d      	add	r3, pc, #52	; (adr r3, 8010750 <__ieee754_pow+0x3b0>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	e6d5      	b.n	80104ce <__ieee754_pow+0x12e>
 8010722:	bf00      	nop
 8010724:	f3af 8000 	nop.w
 8010728:	60000000 	.word	0x60000000
 801072c:	3ff71547 	.word	0x3ff71547
 8010730:	f85ddf44 	.word	0xf85ddf44
 8010734:	3e54ae0b 	.word	0x3e54ae0b
 8010738:	55555555 	.word	0x55555555
 801073c:	3fd55555 	.word	0x3fd55555
 8010740:	652b82fe 	.word	0x652b82fe
 8010744:	3ff71547 	.word	0x3ff71547
 8010748:	00000000 	.word	0x00000000
 801074c:	bff00000 	.word	0xbff00000
 8010750:	8800759c 	.word	0x8800759c
 8010754:	7e37e43c 	.word	0x7e37e43c
 8010758:	3ff00000 	.word	0x3ff00000
 801075c:	3fd00000 	.word	0x3fd00000
 8010760:	3fe00000 	.word	0x3fe00000
 8010764:	408fffff 	.word	0x408fffff
 8010768:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801076c:	f04f 0200 	mov.w	r2, #0
 8010770:	da05      	bge.n	801077e <__ieee754_pow+0x3de>
 8010772:	4bd3      	ldr	r3, [pc, #844]	; (8010ac0 <__ieee754_pow+0x720>)
 8010774:	f7ef ff08 	bl	8000588 <__aeabi_dmul>
 8010778:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801077c:	460c      	mov	r4, r1
 801077e:	1523      	asrs	r3, r4, #20
 8010780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010784:	4413      	add	r3, r2
 8010786:	9309      	str	r3, [sp, #36]	; 0x24
 8010788:	4bce      	ldr	r3, [pc, #824]	; (8010ac4 <__ieee754_pow+0x724>)
 801078a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801078e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010792:	429c      	cmp	r4, r3
 8010794:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010798:	dd08      	ble.n	80107ac <__ieee754_pow+0x40c>
 801079a:	4bcb      	ldr	r3, [pc, #812]	; (8010ac8 <__ieee754_pow+0x728>)
 801079c:	429c      	cmp	r4, r3
 801079e:	f340 815e 	ble.w	8010a5e <__ieee754_pow+0x6be>
 80107a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a4:	3301      	adds	r3, #1
 80107a6:	9309      	str	r3, [sp, #36]	; 0x24
 80107a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80107ac:	f04f 0a00 	mov.w	sl, #0
 80107b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80107b4:	930c      	str	r3, [sp, #48]	; 0x30
 80107b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107b8:	4bc4      	ldr	r3, [pc, #784]	; (8010acc <__ieee754_pow+0x72c>)
 80107ba:	4413      	add	r3, r2
 80107bc:	ed93 7b00 	vldr	d7, [r3]
 80107c0:	4629      	mov	r1, r5
 80107c2:	ec53 2b17 	vmov	r2, r3, d7
 80107c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80107ce:	f7ef fd23 	bl	8000218 <__aeabi_dsub>
 80107d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80107d6:	4606      	mov	r6, r0
 80107d8:	460f      	mov	r7, r1
 80107da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107de:	f7ef fd1d 	bl	800021c <__adddf3>
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	2000      	movs	r0, #0
 80107e8:	49b9      	ldr	r1, [pc, #740]	; (8010ad0 <__ieee754_pow+0x730>)
 80107ea:	f7ef fff7 	bl	80007dc <__aeabi_ddiv>
 80107ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	f7ef fec5 	bl	8000588 <__aeabi_dmul>
 80107fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010802:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801080a:	2300      	movs	r3, #0
 801080c:	9302      	str	r3, [sp, #8]
 801080e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010812:	106d      	asrs	r5, r5, #1
 8010814:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010818:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801081c:	2200      	movs	r2, #0
 801081e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010822:	4640      	mov	r0, r8
 8010824:	4649      	mov	r1, r9
 8010826:	4614      	mov	r4, r2
 8010828:	461d      	mov	r5, r3
 801082a:	f7ef fead 	bl	8000588 <__aeabi_dmul>
 801082e:	4602      	mov	r2, r0
 8010830:	460b      	mov	r3, r1
 8010832:	4630      	mov	r0, r6
 8010834:	4639      	mov	r1, r7
 8010836:	f7ef fcef 	bl	8000218 <__aeabi_dsub>
 801083a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801083e:	4606      	mov	r6, r0
 8010840:	460f      	mov	r7, r1
 8010842:	4620      	mov	r0, r4
 8010844:	4629      	mov	r1, r5
 8010846:	f7ef fce7 	bl	8000218 <__aeabi_dsub>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010852:	f7ef fce1 	bl	8000218 <__aeabi_dsub>
 8010856:	4642      	mov	r2, r8
 8010858:	464b      	mov	r3, r9
 801085a:	f7ef fe95 	bl	8000588 <__aeabi_dmul>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	f7ef fcd7 	bl	8000218 <__aeabi_dsub>
 801086a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801086e:	f7ef fe8b 	bl	8000588 <__aeabi_dmul>
 8010872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010876:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801087a:	4610      	mov	r0, r2
 801087c:	4619      	mov	r1, r3
 801087e:	f7ef fe83 	bl	8000588 <__aeabi_dmul>
 8010882:	a37b      	add	r3, pc, #492	; (adr r3, 8010a70 <__ieee754_pow+0x6d0>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	4604      	mov	r4, r0
 801088a:	460d      	mov	r5, r1
 801088c:	f7ef fe7c 	bl	8000588 <__aeabi_dmul>
 8010890:	a379      	add	r3, pc, #484	; (adr r3, 8010a78 <__ieee754_pow+0x6d8>)
 8010892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010896:	f7ef fcc1 	bl	800021c <__adddf3>
 801089a:	4622      	mov	r2, r4
 801089c:	462b      	mov	r3, r5
 801089e:	f7ef fe73 	bl	8000588 <__aeabi_dmul>
 80108a2:	a377      	add	r3, pc, #476	; (adr r3, 8010a80 <__ieee754_pow+0x6e0>)
 80108a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a8:	f7ef fcb8 	bl	800021c <__adddf3>
 80108ac:	4622      	mov	r2, r4
 80108ae:	462b      	mov	r3, r5
 80108b0:	f7ef fe6a 	bl	8000588 <__aeabi_dmul>
 80108b4:	a374      	add	r3, pc, #464	; (adr r3, 8010a88 <__ieee754_pow+0x6e8>)
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	f7ef fcaf 	bl	800021c <__adddf3>
 80108be:	4622      	mov	r2, r4
 80108c0:	462b      	mov	r3, r5
 80108c2:	f7ef fe61 	bl	8000588 <__aeabi_dmul>
 80108c6:	a372      	add	r3, pc, #456	; (adr r3, 8010a90 <__ieee754_pow+0x6f0>)
 80108c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108cc:	f7ef fca6 	bl	800021c <__adddf3>
 80108d0:	4622      	mov	r2, r4
 80108d2:	462b      	mov	r3, r5
 80108d4:	f7ef fe58 	bl	8000588 <__aeabi_dmul>
 80108d8:	a36f      	add	r3, pc, #444	; (adr r3, 8010a98 <__ieee754_pow+0x6f8>)
 80108da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108de:	f7ef fc9d 	bl	800021c <__adddf3>
 80108e2:	4622      	mov	r2, r4
 80108e4:	4606      	mov	r6, r0
 80108e6:	460f      	mov	r7, r1
 80108e8:	462b      	mov	r3, r5
 80108ea:	4620      	mov	r0, r4
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ef fe4b 	bl	8000588 <__aeabi_dmul>
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4630      	mov	r0, r6
 80108f8:	4639      	mov	r1, r7
 80108fa:	f7ef fe45 	bl	8000588 <__aeabi_dmul>
 80108fe:	4642      	mov	r2, r8
 8010900:	4604      	mov	r4, r0
 8010902:	460d      	mov	r5, r1
 8010904:	464b      	mov	r3, r9
 8010906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801090a:	f7ef fc87 	bl	800021c <__adddf3>
 801090e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010912:	f7ef fe39 	bl	8000588 <__aeabi_dmul>
 8010916:	4622      	mov	r2, r4
 8010918:	462b      	mov	r3, r5
 801091a:	f7ef fc7f 	bl	800021c <__adddf3>
 801091e:	4642      	mov	r2, r8
 8010920:	4606      	mov	r6, r0
 8010922:	460f      	mov	r7, r1
 8010924:	464b      	mov	r3, r9
 8010926:	4640      	mov	r0, r8
 8010928:	4649      	mov	r1, r9
 801092a:	f7ef fe2d 	bl	8000588 <__aeabi_dmul>
 801092e:	2200      	movs	r2, #0
 8010930:	4b68      	ldr	r3, [pc, #416]	; (8010ad4 <__ieee754_pow+0x734>)
 8010932:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010936:	f7ef fc71 	bl	800021c <__adddf3>
 801093a:	4632      	mov	r2, r6
 801093c:	463b      	mov	r3, r7
 801093e:	f7ef fc6d 	bl	800021c <__adddf3>
 8010942:	9802      	ldr	r0, [sp, #8]
 8010944:	460d      	mov	r5, r1
 8010946:	4604      	mov	r4, r0
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4640      	mov	r0, r8
 801094e:	4649      	mov	r1, r9
 8010950:	f7ef fe1a 	bl	8000588 <__aeabi_dmul>
 8010954:	2200      	movs	r2, #0
 8010956:	4680      	mov	r8, r0
 8010958:	4689      	mov	r9, r1
 801095a:	4b5e      	ldr	r3, [pc, #376]	; (8010ad4 <__ieee754_pow+0x734>)
 801095c:	4620      	mov	r0, r4
 801095e:	4629      	mov	r1, r5
 8010960:	f7ef fc5a 	bl	8000218 <__aeabi_dsub>
 8010964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010968:	f7ef fc56 	bl	8000218 <__aeabi_dsub>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	4630      	mov	r0, r6
 8010972:	4639      	mov	r1, r7
 8010974:	f7ef fc50 	bl	8000218 <__aeabi_dsub>
 8010978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801097c:	f7ef fe04 	bl	8000588 <__aeabi_dmul>
 8010980:	4622      	mov	r2, r4
 8010982:	4606      	mov	r6, r0
 8010984:	460f      	mov	r7, r1
 8010986:	462b      	mov	r3, r5
 8010988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098c:	f7ef fdfc 	bl	8000588 <__aeabi_dmul>
 8010990:	4602      	mov	r2, r0
 8010992:	460b      	mov	r3, r1
 8010994:	4630      	mov	r0, r6
 8010996:	4639      	mov	r1, r7
 8010998:	f7ef fc40 	bl	800021c <__adddf3>
 801099c:	4606      	mov	r6, r0
 801099e:	460f      	mov	r7, r1
 80109a0:	4602      	mov	r2, r0
 80109a2:	460b      	mov	r3, r1
 80109a4:	4640      	mov	r0, r8
 80109a6:	4649      	mov	r1, r9
 80109a8:	f7ef fc38 	bl	800021c <__adddf3>
 80109ac:	9802      	ldr	r0, [sp, #8]
 80109ae:	a33c      	add	r3, pc, #240	; (adr r3, 8010aa0 <__ieee754_pow+0x700>)
 80109b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b4:	4604      	mov	r4, r0
 80109b6:	460d      	mov	r5, r1
 80109b8:	f7ef fde6 	bl	8000588 <__aeabi_dmul>
 80109bc:	4642      	mov	r2, r8
 80109be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80109c2:	464b      	mov	r3, r9
 80109c4:	4620      	mov	r0, r4
 80109c6:	4629      	mov	r1, r5
 80109c8:	f7ef fc26 	bl	8000218 <__aeabi_dsub>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f7ef fc20 	bl	8000218 <__aeabi_dsub>
 80109d8:	a333      	add	r3, pc, #204	; (adr r3, 8010aa8 <__ieee754_pow+0x708>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	f7ef fdd3 	bl	8000588 <__aeabi_dmul>
 80109e2:	a333      	add	r3, pc, #204	; (adr r3, 8010ab0 <__ieee754_pow+0x710>)
 80109e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e8:	4606      	mov	r6, r0
 80109ea:	460f      	mov	r7, r1
 80109ec:	4620      	mov	r0, r4
 80109ee:	4629      	mov	r1, r5
 80109f0:	f7ef fdca 	bl	8000588 <__aeabi_dmul>
 80109f4:	4602      	mov	r2, r0
 80109f6:	460b      	mov	r3, r1
 80109f8:	4630      	mov	r0, r6
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7ef fc0e 	bl	800021c <__adddf3>
 8010a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a02:	4b35      	ldr	r3, [pc, #212]	; (8010ad8 <__ieee754_pow+0x738>)
 8010a04:	4413      	add	r3, r2
 8010a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0a:	f7ef fc07 	bl	800021c <__adddf3>
 8010a0e:	4604      	mov	r4, r0
 8010a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a12:	460d      	mov	r5, r1
 8010a14:	f7ef fd4e 	bl	80004b4 <__aeabi_i2d>
 8010a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a1a:	4b30      	ldr	r3, [pc, #192]	; (8010adc <__ieee754_pow+0x73c>)
 8010a1c:	4413      	add	r3, r2
 8010a1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a22:	4606      	mov	r6, r0
 8010a24:	460f      	mov	r7, r1
 8010a26:	4622      	mov	r2, r4
 8010a28:	462b      	mov	r3, r5
 8010a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a2e:	f7ef fbf5 	bl	800021c <__adddf3>
 8010a32:	4642      	mov	r2, r8
 8010a34:	464b      	mov	r3, r9
 8010a36:	f7ef fbf1 	bl	800021c <__adddf3>
 8010a3a:	4632      	mov	r2, r6
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	f7ef fbed 	bl	800021c <__adddf3>
 8010a42:	9802      	ldr	r0, [sp, #8]
 8010a44:	4632      	mov	r2, r6
 8010a46:	463b      	mov	r3, r7
 8010a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a4c:	f7ef fbe4 	bl	8000218 <__aeabi_dsub>
 8010a50:	4642      	mov	r2, r8
 8010a52:	464b      	mov	r3, r9
 8010a54:	f7ef fbe0 	bl	8000218 <__aeabi_dsub>
 8010a58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a5c:	e607      	b.n	801066e <__ieee754_pow+0x2ce>
 8010a5e:	f04f 0a01 	mov.w	sl, #1
 8010a62:	e6a5      	b.n	80107b0 <__ieee754_pow+0x410>
 8010a64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010ab8 <__ieee754_pow+0x718>
 8010a68:	e613      	b.n	8010692 <__ieee754_pow+0x2f2>
 8010a6a:	bf00      	nop
 8010a6c:	f3af 8000 	nop.w
 8010a70:	4a454eef 	.word	0x4a454eef
 8010a74:	3fca7e28 	.word	0x3fca7e28
 8010a78:	93c9db65 	.word	0x93c9db65
 8010a7c:	3fcd864a 	.word	0x3fcd864a
 8010a80:	a91d4101 	.word	0xa91d4101
 8010a84:	3fd17460 	.word	0x3fd17460
 8010a88:	518f264d 	.word	0x518f264d
 8010a8c:	3fd55555 	.word	0x3fd55555
 8010a90:	db6fabff 	.word	0xdb6fabff
 8010a94:	3fdb6db6 	.word	0x3fdb6db6
 8010a98:	33333303 	.word	0x33333303
 8010a9c:	3fe33333 	.word	0x3fe33333
 8010aa0:	e0000000 	.word	0xe0000000
 8010aa4:	3feec709 	.word	0x3feec709
 8010aa8:	dc3a03fd 	.word	0xdc3a03fd
 8010aac:	3feec709 	.word	0x3feec709
 8010ab0:	145b01f5 	.word	0x145b01f5
 8010ab4:	be3e2fe0 	.word	0xbe3e2fe0
 8010ab8:	00000000 	.word	0x00000000
 8010abc:	3ff00000 	.word	0x3ff00000
 8010ac0:	43400000 	.word	0x43400000
 8010ac4:	0003988e 	.word	0x0003988e
 8010ac8:	000bb679 	.word	0x000bb679
 8010acc:	08011820 	.word	0x08011820
 8010ad0:	3ff00000 	.word	0x3ff00000
 8010ad4:	40080000 	.word	0x40080000
 8010ad8:	08011840 	.word	0x08011840
 8010adc:	08011830 	.word	0x08011830
 8010ae0:	a3b4      	add	r3, pc, #720	; (adr r3, 8010db4 <__ieee754_pow+0xa14>)
 8010ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	4649      	mov	r1, r9
 8010aea:	f7ef fb97 	bl	800021c <__adddf3>
 8010aee:	4622      	mov	r2, r4
 8010af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010af4:	462b      	mov	r3, r5
 8010af6:	4630      	mov	r0, r6
 8010af8:	4639      	mov	r1, r7
 8010afa:	f7ef fb8d 	bl	8000218 <__aeabi_dsub>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b06:	f7ef ffcf 	bl	8000aa8 <__aeabi_dcmpgt>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	f47f adfe 	bne.w	801070c <__ieee754_pow+0x36c>
 8010b10:	4aa3      	ldr	r2, [pc, #652]	; (8010da0 <__ieee754_pow+0xa00>)
 8010b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b16:	4293      	cmp	r3, r2
 8010b18:	f340 810a 	ble.w	8010d30 <__ieee754_pow+0x990>
 8010b1c:	151b      	asrs	r3, r3, #20
 8010b1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010b22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010b26:	fa4a f303 	asr.w	r3, sl, r3
 8010b2a:	445b      	add	r3, fp
 8010b2c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010b30:	4e9c      	ldr	r6, [pc, #624]	; (8010da4 <__ieee754_pow+0xa04>)
 8010b32:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010b36:	4116      	asrs	r6, r2
 8010b38:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	ea23 0106 	bic.w	r1, r3, r6
 8010b42:	f1c2 0214 	rsb	r2, r2, #20
 8010b46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010b4a:	fa4a fa02 	asr.w	sl, sl, r2
 8010b4e:	f1bb 0f00 	cmp.w	fp, #0
 8010b52:	4602      	mov	r2, r0
 8010b54:	460b      	mov	r3, r1
 8010b56:	4620      	mov	r0, r4
 8010b58:	4629      	mov	r1, r5
 8010b5a:	bfb8      	it	lt
 8010b5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8010b60:	f7ef fb5a 	bl	8000218 <__aeabi_dsub>
 8010b64:	e9cd 0100 	strd	r0, r1, [sp]
 8010b68:	4642      	mov	r2, r8
 8010b6a:	464b      	mov	r3, r9
 8010b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b70:	f7ef fb54 	bl	800021c <__adddf3>
 8010b74:	2000      	movs	r0, #0
 8010b76:	a378      	add	r3, pc, #480	; (adr r3, 8010d58 <__ieee754_pow+0x9b8>)
 8010b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	f7ef fd02 	bl	8000588 <__aeabi_dmul>
 8010b84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b88:	4606      	mov	r6, r0
 8010b8a:	460f      	mov	r7, r1
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	4629      	mov	r1, r5
 8010b90:	f7ef fb42 	bl	8000218 <__aeabi_dsub>
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	4640      	mov	r0, r8
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	f7ef fb3c 	bl	8000218 <__aeabi_dsub>
 8010ba0:	a36f      	add	r3, pc, #444	; (adr r3, 8010d60 <__ieee754_pow+0x9c0>)
 8010ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba6:	f7ef fcef 	bl	8000588 <__aeabi_dmul>
 8010baa:	a36f      	add	r3, pc, #444	; (adr r3, 8010d68 <__ieee754_pow+0x9c8>)
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	4689      	mov	r9, r1
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fce6 	bl	8000588 <__aeabi_dmul>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	f7ef fb2a 	bl	800021c <__adddf3>
 8010bc8:	4604      	mov	r4, r0
 8010bca:	460d      	mov	r5, r1
 8010bcc:	4602      	mov	r2, r0
 8010bce:	460b      	mov	r3, r1
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	f7ef fb22 	bl	800021c <__adddf3>
 8010bd8:	4632      	mov	r2, r6
 8010bda:	463b      	mov	r3, r7
 8010bdc:	4680      	mov	r8, r0
 8010bde:	4689      	mov	r9, r1
 8010be0:	f7ef fb1a 	bl	8000218 <__aeabi_dsub>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	4620      	mov	r0, r4
 8010bea:	4629      	mov	r1, r5
 8010bec:	f7ef fb14 	bl	8000218 <__aeabi_dsub>
 8010bf0:	4642      	mov	r2, r8
 8010bf2:	4606      	mov	r6, r0
 8010bf4:	460f      	mov	r7, r1
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	f7ef fcc4 	bl	8000588 <__aeabi_dmul>
 8010c00:	a35b      	add	r3, pc, #364	; (adr r3, 8010d70 <__ieee754_pow+0x9d0>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	4604      	mov	r4, r0
 8010c08:	460d      	mov	r5, r1
 8010c0a:	f7ef fcbd 	bl	8000588 <__aeabi_dmul>
 8010c0e:	a35a      	add	r3, pc, #360	; (adr r3, 8010d78 <__ieee754_pow+0x9d8>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f7ef fb00 	bl	8000218 <__aeabi_dsub>
 8010c18:	4622      	mov	r2, r4
 8010c1a:	462b      	mov	r3, r5
 8010c1c:	f7ef fcb4 	bl	8000588 <__aeabi_dmul>
 8010c20:	a357      	add	r3, pc, #348	; (adr r3, 8010d80 <__ieee754_pow+0x9e0>)
 8010c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c26:	f7ef faf9 	bl	800021c <__adddf3>
 8010c2a:	4622      	mov	r2, r4
 8010c2c:	462b      	mov	r3, r5
 8010c2e:	f7ef fcab 	bl	8000588 <__aeabi_dmul>
 8010c32:	a355      	add	r3, pc, #340	; (adr r3, 8010d88 <__ieee754_pow+0x9e8>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	f7ef faee 	bl	8000218 <__aeabi_dsub>
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	462b      	mov	r3, r5
 8010c40:	f7ef fca2 	bl	8000588 <__aeabi_dmul>
 8010c44:	a352      	add	r3, pc, #328	; (adr r3, 8010d90 <__ieee754_pow+0x9f0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	f7ef fae7 	bl	800021c <__adddf3>
 8010c4e:	4622      	mov	r2, r4
 8010c50:	462b      	mov	r3, r5
 8010c52:	f7ef fc99 	bl	8000588 <__aeabi_dmul>
 8010c56:	4602      	mov	r2, r0
 8010c58:	460b      	mov	r3, r1
 8010c5a:	4640      	mov	r0, r8
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	f7ef fadb 	bl	8000218 <__aeabi_dsub>
 8010c62:	4604      	mov	r4, r0
 8010c64:	460d      	mov	r5, r1
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	f7ef fc8b 	bl	8000588 <__aeabi_dmul>
 8010c72:	2200      	movs	r2, #0
 8010c74:	e9cd 0100 	strd	r0, r1, [sp]
 8010c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	4629      	mov	r1, r5
 8010c80:	f7ef faca 	bl	8000218 <__aeabi_dsub>
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c8c:	f7ef fda6 	bl	80007dc <__aeabi_ddiv>
 8010c90:	4632      	mov	r2, r6
 8010c92:	4604      	mov	r4, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	463b      	mov	r3, r7
 8010c98:	4640      	mov	r0, r8
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	f7ef fc74 	bl	8000588 <__aeabi_dmul>
 8010ca0:	4632      	mov	r2, r6
 8010ca2:	463b      	mov	r3, r7
 8010ca4:	f7ef faba 	bl	800021c <__adddf3>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	460b      	mov	r3, r1
 8010cac:	4620      	mov	r0, r4
 8010cae:	4629      	mov	r1, r5
 8010cb0:	f7ef fab2 	bl	8000218 <__aeabi_dsub>
 8010cb4:	4642      	mov	r2, r8
 8010cb6:	464b      	mov	r3, r9
 8010cb8:	f7ef faae 	bl	8000218 <__aeabi_dsub>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4939      	ldr	r1, [pc, #228]	; (8010da8 <__ieee754_pow+0xa08>)
 8010cc4:	f7ef faa8 	bl	8000218 <__aeabi_dsub>
 8010cc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010ccc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	da2f      	bge.n	8010d36 <__ieee754_pow+0x996>
 8010cd6:	4650      	mov	r0, sl
 8010cd8:	ec43 2b10 	vmov	d0, r2, r3
 8010cdc:	f000 f9c0 	bl	8011060 <scalbn>
 8010ce0:	ec51 0b10 	vmov	r0, r1, d0
 8010ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce8:	f7ff bbf1 	b.w	80104ce <__ieee754_pow+0x12e>
 8010cec:	4b2f      	ldr	r3, [pc, #188]	; (8010dac <__ieee754_pow+0xa0c>)
 8010cee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010cf2:	429e      	cmp	r6, r3
 8010cf4:	f77f af0c 	ble.w	8010b10 <__ieee754_pow+0x770>
 8010cf8:	4b2d      	ldr	r3, [pc, #180]	; (8010db0 <__ieee754_pow+0xa10>)
 8010cfa:	440b      	add	r3, r1
 8010cfc:	4303      	orrs	r3, r0
 8010cfe:	d00b      	beq.n	8010d18 <__ieee754_pow+0x978>
 8010d00:	a325      	add	r3, pc, #148	; (adr r3, 8010d98 <__ieee754_pow+0x9f8>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d0a:	f7ef fc3d 	bl	8000588 <__aeabi_dmul>
 8010d0e:	a322      	add	r3, pc, #136	; (adr r3, 8010d98 <__ieee754_pow+0x9f8>)
 8010d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d14:	f7ff bbdb 	b.w	80104ce <__ieee754_pow+0x12e>
 8010d18:	4622      	mov	r2, r4
 8010d1a:	462b      	mov	r3, r5
 8010d1c:	f7ef fa7c 	bl	8000218 <__aeabi_dsub>
 8010d20:	4642      	mov	r2, r8
 8010d22:	464b      	mov	r3, r9
 8010d24:	f7ef feb6 	bl	8000a94 <__aeabi_dcmpge>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	f43f aef1 	beq.w	8010b10 <__ieee754_pow+0x770>
 8010d2e:	e7e7      	b.n	8010d00 <__ieee754_pow+0x960>
 8010d30:	f04f 0a00 	mov.w	sl, #0
 8010d34:	e718      	b.n	8010b68 <__ieee754_pow+0x7c8>
 8010d36:	4621      	mov	r1, r4
 8010d38:	e7d4      	b.n	8010ce4 <__ieee754_pow+0x944>
 8010d3a:	2000      	movs	r0, #0
 8010d3c:	491a      	ldr	r1, [pc, #104]	; (8010da8 <__ieee754_pow+0xa08>)
 8010d3e:	f7ff bb8f 	b.w	8010460 <__ieee754_pow+0xc0>
 8010d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d46:	f7ff bb8b 	b.w	8010460 <__ieee754_pow+0xc0>
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	f7ff bb87 	b.w	8010460 <__ieee754_pow+0xc0>
 8010d52:	4693      	mov	fp, r2
 8010d54:	f7ff bb98 	b.w	8010488 <__ieee754_pow+0xe8>
 8010d58:	00000000 	.word	0x00000000
 8010d5c:	3fe62e43 	.word	0x3fe62e43
 8010d60:	fefa39ef 	.word	0xfefa39ef
 8010d64:	3fe62e42 	.word	0x3fe62e42
 8010d68:	0ca86c39 	.word	0x0ca86c39
 8010d6c:	be205c61 	.word	0xbe205c61
 8010d70:	72bea4d0 	.word	0x72bea4d0
 8010d74:	3e663769 	.word	0x3e663769
 8010d78:	c5d26bf1 	.word	0xc5d26bf1
 8010d7c:	3ebbbd41 	.word	0x3ebbbd41
 8010d80:	af25de2c 	.word	0xaf25de2c
 8010d84:	3f11566a 	.word	0x3f11566a
 8010d88:	16bebd93 	.word	0x16bebd93
 8010d8c:	3f66c16c 	.word	0x3f66c16c
 8010d90:	5555553e 	.word	0x5555553e
 8010d94:	3fc55555 	.word	0x3fc55555
 8010d98:	c2f8f359 	.word	0xc2f8f359
 8010d9c:	01a56e1f 	.word	0x01a56e1f
 8010da0:	3fe00000 	.word	0x3fe00000
 8010da4:	000fffff 	.word	0x000fffff
 8010da8:	3ff00000 	.word	0x3ff00000
 8010dac:	4090cbff 	.word	0x4090cbff
 8010db0:	3f6f3400 	.word	0x3f6f3400
 8010db4:	652b82fe 	.word	0x652b82fe
 8010db8:	3c971547 	.word	0x3c971547

08010dbc <__ieee754_sqrt>:
 8010dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc0:	4955      	ldr	r1, [pc, #340]	; (8010f18 <__ieee754_sqrt+0x15c>)
 8010dc2:	ec55 4b10 	vmov	r4, r5, d0
 8010dc6:	43a9      	bics	r1, r5
 8010dc8:	462b      	mov	r3, r5
 8010dca:	462a      	mov	r2, r5
 8010dcc:	d112      	bne.n	8010df4 <__ieee754_sqrt+0x38>
 8010dce:	ee10 2a10 	vmov	r2, s0
 8010dd2:	ee10 0a10 	vmov	r0, s0
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	f7ef fbd6 	bl	8000588 <__aeabi_dmul>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	460b      	mov	r3, r1
 8010de0:	4620      	mov	r0, r4
 8010de2:	4629      	mov	r1, r5
 8010de4:	f7ef fa1a 	bl	800021c <__adddf3>
 8010de8:	4604      	mov	r4, r0
 8010dea:	460d      	mov	r5, r1
 8010dec:	ec45 4b10 	vmov	d0, r4, r5
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df4:	2d00      	cmp	r5, #0
 8010df6:	ee10 0a10 	vmov	r0, s0
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	dc0f      	bgt.n	8010e1e <__ieee754_sqrt+0x62>
 8010dfe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e02:	4330      	orrs	r0, r6
 8010e04:	d0f2      	beq.n	8010dec <__ieee754_sqrt+0x30>
 8010e06:	b155      	cbz	r5, 8010e1e <__ieee754_sqrt+0x62>
 8010e08:	ee10 2a10 	vmov	r2, s0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	4629      	mov	r1, r5
 8010e10:	f7ef fa02 	bl	8000218 <__aeabi_dsub>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	f7ef fce0 	bl	80007dc <__aeabi_ddiv>
 8010e1c:	e7e4      	b.n	8010de8 <__ieee754_sqrt+0x2c>
 8010e1e:	151b      	asrs	r3, r3, #20
 8010e20:	d073      	beq.n	8010f0a <__ieee754_sqrt+0x14e>
 8010e22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e26:	07dd      	lsls	r5, r3, #31
 8010e28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010e2c:	bf48      	it	mi
 8010e2e:	0fc8      	lsrmi	r0, r1, #31
 8010e30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010e34:	bf44      	itt	mi
 8010e36:	0049      	lslmi	r1, r1, #1
 8010e38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8010e3c:	2500      	movs	r5, #0
 8010e3e:	1058      	asrs	r0, r3, #1
 8010e40:	0fcb      	lsrs	r3, r1, #31
 8010e42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010e46:	0049      	lsls	r1, r1, #1
 8010e48:	2316      	movs	r3, #22
 8010e4a:	462c      	mov	r4, r5
 8010e4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010e50:	19a7      	adds	r7, r4, r6
 8010e52:	4297      	cmp	r7, r2
 8010e54:	bfde      	ittt	le
 8010e56:	19bc      	addle	r4, r7, r6
 8010e58:	1bd2      	suble	r2, r2, r7
 8010e5a:	19ad      	addle	r5, r5, r6
 8010e5c:	0fcf      	lsrs	r7, r1, #31
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010e64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e6c:	d1f0      	bne.n	8010e50 <__ieee754_sqrt+0x94>
 8010e6e:	f04f 0c20 	mov.w	ip, #32
 8010e72:	469e      	mov	lr, r3
 8010e74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010e78:	42a2      	cmp	r2, r4
 8010e7a:	eb06 070e 	add.w	r7, r6, lr
 8010e7e:	dc02      	bgt.n	8010e86 <__ieee754_sqrt+0xca>
 8010e80:	d112      	bne.n	8010ea8 <__ieee754_sqrt+0xec>
 8010e82:	428f      	cmp	r7, r1
 8010e84:	d810      	bhi.n	8010ea8 <__ieee754_sqrt+0xec>
 8010e86:	2f00      	cmp	r7, #0
 8010e88:	eb07 0e06 	add.w	lr, r7, r6
 8010e8c:	da42      	bge.n	8010f14 <__ieee754_sqrt+0x158>
 8010e8e:	f1be 0f00 	cmp.w	lr, #0
 8010e92:	db3f      	blt.n	8010f14 <__ieee754_sqrt+0x158>
 8010e94:	f104 0801 	add.w	r8, r4, #1
 8010e98:	1b12      	subs	r2, r2, r4
 8010e9a:	428f      	cmp	r7, r1
 8010e9c:	bf88      	it	hi
 8010e9e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010ea2:	1bc9      	subs	r1, r1, r7
 8010ea4:	4433      	add	r3, r6
 8010ea6:	4644      	mov	r4, r8
 8010ea8:	0052      	lsls	r2, r2, #1
 8010eaa:	f1bc 0c01 	subs.w	ip, ip, #1
 8010eae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010eb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010eb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010eba:	d1dd      	bne.n	8010e78 <__ieee754_sqrt+0xbc>
 8010ebc:	430a      	orrs	r2, r1
 8010ebe:	d006      	beq.n	8010ece <__ieee754_sqrt+0x112>
 8010ec0:	1c5c      	adds	r4, r3, #1
 8010ec2:	bf13      	iteet	ne
 8010ec4:	3301      	addne	r3, #1
 8010ec6:	3501      	addeq	r5, #1
 8010ec8:	4663      	moveq	r3, ip
 8010eca:	f023 0301 	bicne.w	r3, r3, #1
 8010ece:	106a      	asrs	r2, r5, #1
 8010ed0:	085b      	lsrs	r3, r3, #1
 8010ed2:	07e9      	lsls	r1, r5, #31
 8010ed4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010ed8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010edc:	bf48      	it	mi
 8010ede:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010ee2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010ee6:	461c      	mov	r4, r3
 8010ee8:	e780      	b.n	8010dec <__ieee754_sqrt+0x30>
 8010eea:	0aca      	lsrs	r2, r1, #11
 8010eec:	3815      	subs	r0, #21
 8010eee:	0549      	lsls	r1, r1, #21
 8010ef0:	2a00      	cmp	r2, #0
 8010ef2:	d0fa      	beq.n	8010eea <__ieee754_sqrt+0x12e>
 8010ef4:	02d6      	lsls	r6, r2, #11
 8010ef6:	d50a      	bpl.n	8010f0e <__ieee754_sqrt+0x152>
 8010ef8:	f1c3 0420 	rsb	r4, r3, #32
 8010efc:	fa21 f404 	lsr.w	r4, r1, r4
 8010f00:	1e5d      	subs	r5, r3, #1
 8010f02:	4099      	lsls	r1, r3
 8010f04:	4322      	orrs	r2, r4
 8010f06:	1b43      	subs	r3, r0, r5
 8010f08:	e78b      	b.n	8010e22 <__ieee754_sqrt+0x66>
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	e7f0      	b.n	8010ef0 <__ieee754_sqrt+0x134>
 8010f0e:	0052      	lsls	r2, r2, #1
 8010f10:	3301      	adds	r3, #1
 8010f12:	e7ef      	b.n	8010ef4 <__ieee754_sqrt+0x138>
 8010f14:	46a0      	mov	r8, r4
 8010f16:	e7bf      	b.n	8010e98 <__ieee754_sqrt+0xdc>
 8010f18:	7ff00000 	.word	0x7ff00000

08010f1c <fabs>:
 8010f1c:	ec51 0b10 	vmov	r0, r1, d0
 8010f20:	ee10 2a10 	vmov	r2, s0
 8010f24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f28:	ec43 2b10 	vmov	d0, r2, r3
 8010f2c:	4770      	bx	lr

08010f2e <finite>:
 8010f2e:	ee10 3a90 	vmov	r3, s1
 8010f32:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8010f36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f3a:	0fc0      	lsrs	r0, r0, #31
 8010f3c:	4770      	bx	lr

08010f3e <matherr>:
 8010f3e:	2000      	movs	r0, #0
 8010f40:	4770      	bx	lr
 8010f42:	0000      	movs	r0, r0
 8010f44:	0000      	movs	r0, r0
	...

08010f48 <nan>:
 8010f48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f50 <nan+0x8>
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop
 8010f50:	00000000 	.word	0x00000000
 8010f54:	7ff80000 	.word	0x7ff80000

08010f58 <rint>:
 8010f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f5a:	ec51 0b10 	vmov	r0, r1, d0
 8010f5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010f62:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010f66:	2e13      	cmp	r6, #19
 8010f68:	460b      	mov	r3, r1
 8010f6a:	ee10 4a10 	vmov	r4, s0
 8010f6e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8010f72:	dc56      	bgt.n	8011022 <rint+0xca>
 8010f74:	2e00      	cmp	r6, #0
 8010f76:	da2b      	bge.n	8010fd0 <rint+0x78>
 8010f78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010f7c:	4302      	orrs	r2, r0
 8010f7e:	d023      	beq.n	8010fc8 <rint+0x70>
 8010f80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8010f84:	4302      	orrs	r2, r0
 8010f86:	4254      	negs	r4, r2
 8010f88:	4314      	orrs	r4, r2
 8010f8a:	0c4b      	lsrs	r3, r1, #17
 8010f8c:	0b24      	lsrs	r4, r4, #12
 8010f8e:	045b      	lsls	r3, r3, #17
 8010f90:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8010f94:	ea44 0103 	orr.w	r1, r4, r3
 8010f98:	460b      	mov	r3, r1
 8010f9a:	492f      	ldr	r1, [pc, #188]	; (8011058 <rint+0x100>)
 8010f9c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8010fa0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f7ef f937 	bl	800021c <__adddf3>
 8010fae:	e9cd 0100 	strd	r0, r1, [sp]
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fba:	f7ef f92d 	bl	8000218 <__aeabi_dsub>
 8010fbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010fc2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	ec41 0b10 	vmov	d0, r0, r1
 8010fcc:	b003      	add	sp, #12
 8010fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd0:	4a22      	ldr	r2, [pc, #136]	; (801105c <rint+0x104>)
 8010fd2:	4132      	asrs	r2, r6
 8010fd4:	ea01 0702 	and.w	r7, r1, r2
 8010fd8:	4307      	orrs	r7, r0
 8010fda:	d0f5      	beq.n	8010fc8 <rint+0x70>
 8010fdc:	0852      	lsrs	r2, r2, #1
 8010fde:	4011      	ands	r1, r2
 8010fe0:	430c      	orrs	r4, r1
 8010fe2:	d00b      	beq.n	8010ffc <rint+0xa4>
 8010fe4:	ea23 0202 	bic.w	r2, r3, r2
 8010fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010fec:	2e13      	cmp	r6, #19
 8010fee:	fa43 f306 	asr.w	r3, r3, r6
 8010ff2:	bf0c      	ite	eq
 8010ff4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010ff8:	2400      	movne	r4, #0
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	4916      	ldr	r1, [pc, #88]	; (8011058 <rint+0x100>)
 8010ffe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011002:	4622      	mov	r2, r4
 8011004:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011008:	4620      	mov	r0, r4
 801100a:	4629      	mov	r1, r5
 801100c:	f7ef f906 	bl	800021c <__adddf3>
 8011010:	e9cd 0100 	strd	r0, r1, [sp]
 8011014:	4622      	mov	r2, r4
 8011016:	462b      	mov	r3, r5
 8011018:	e9dd 0100 	ldrd	r0, r1, [sp]
 801101c:	f7ef f8fc 	bl	8000218 <__aeabi_dsub>
 8011020:	e7d2      	b.n	8010fc8 <rint+0x70>
 8011022:	2e33      	cmp	r6, #51	; 0x33
 8011024:	dd07      	ble.n	8011036 <rint+0xde>
 8011026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801102a:	d1cd      	bne.n	8010fc8 <rint+0x70>
 801102c:	ee10 2a10 	vmov	r2, s0
 8011030:	f7ef f8f4 	bl	800021c <__adddf3>
 8011034:	e7c8      	b.n	8010fc8 <rint+0x70>
 8011036:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	40f2      	lsrs	r2, r6
 8011040:	4210      	tst	r0, r2
 8011042:	d0c1      	beq.n	8010fc8 <rint+0x70>
 8011044:	0852      	lsrs	r2, r2, #1
 8011046:	4210      	tst	r0, r2
 8011048:	bf1f      	itttt	ne
 801104a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801104e:	ea20 0202 	bicne.w	r2, r0, r2
 8011052:	4134      	asrne	r4, r6
 8011054:	4314      	orrne	r4, r2
 8011056:	e7d1      	b.n	8010ffc <rint+0xa4>
 8011058:	08011850 	.word	0x08011850
 801105c:	000fffff 	.word	0x000fffff

08011060 <scalbn>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	ec55 4b10 	vmov	r4, r5, d0
 8011066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801106a:	4606      	mov	r6, r0
 801106c:	462b      	mov	r3, r5
 801106e:	b9aa      	cbnz	r2, 801109c <scalbn+0x3c>
 8011070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011074:	4323      	orrs	r3, r4
 8011076:	d03b      	beq.n	80110f0 <scalbn+0x90>
 8011078:	4b31      	ldr	r3, [pc, #196]	; (8011140 <scalbn+0xe0>)
 801107a:	4629      	mov	r1, r5
 801107c:	2200      	movs	r2, #0
 801107e:	ee10 0a10 	vmov	r0, s0
 8011082:	f7ef fa81 	bl	8000588 <__aeabi_dmul>
 8011086:	4b2f      	ldr	r3, [pc, #188]	; (8011144 <scalbn+0xe4>)
 8011088:	429e      	cmp	r6, r3
 801108a:	4604      	mov	r4, r0
 801108c:	460d      	mov	r5, r1
 801108e:	da12      	bge.n	80110b6 <scalbn+0x56>
 8011090:	a327      	add	r3, pc, #156	; (adr r3, 8011130 <scalbn+0xd0>)
 8011092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011096:	f7ef fa77 	bl	8000588 <__aeabi_dmul>
 801109a:	e009      	b.n	80110b0 <scalbn+0x50>
 801109c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80110a0:	428a      	cmp	r2, r1
 80110a2:	d10c      	bne.n	80110be <scalbn+0x5e>
 80110a4:	ee10 2a10 	vmov	r2, s0
 80110a8:	4620      	mov	r0, r4
 80110aa:	4629      	mov	r1, r5
 80110ac:	f7ef f8b6 	bl	800021c <__adddf3>
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	e01c      	b.n	80110f0 <scalbn+0x90>
 80110b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80110ba:	460b      	mov	r3, r1
 80110bc:	3a36      	subs	r2, #54	; 0x36
 80110be:	4432      	add	r2, r6
 80110c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80110c4:	428a      	cmp	r2, r1
 80110c6:	dd0b      	ble.n	80110e0 <scalbn+0x80>
 80110c8:	ec45 4b11 	vmov	d1, r4, r5
 80110cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011138 <scalbn+0xd8>
 80110d0:	f000 f83c 	bl	801114c <copysign>
 80110d4:	a318      	add	r3, pc, #96	; (adr r3, 8011138 <scalbn+0xd8>)
 80110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110da:	ec51 0b10 	vmov	r0, r1, d0
 80110de:	e7da      	b.n	8011096 <scalbn+0x36>
 80110e0:	2a00      	cmp	r2, #0
 80110e2:	dd08      	ble.n	80110f6 <scalbn+0x96>
 80110e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80110f0:	ec45 4b10 	vmov	d0, r4, r5
 80110f4:	bd70      	pop	{r4, r5, r6, pc}
 80110f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80110fa:	da0d      	bge.n	8011118 <scalbn+0xb8>
 80110fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011100:	429e      	cmp	r6, r3
 8011102:	ec45 4b11 	vmov	d1, r4, r5
 8011106:	dce1      	bgt.n	80110cc <scalbn+0x6c>
 8011108:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011130 <scalbn+0xd0>
 801110c:	f000 f81e 	bl	801114c <copysign>
 8011110:	a307      	add	r3, pc, #28	; (adr r3, 8011130 <scalbn+0xd0>)
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	e7e0      	b.n	80110da <scalbn+0x7a>
 8011118:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801111c:	3236      	adds	r2, #54	; 0x36
 801111e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011126:	4620      	mov	r0, r4
 8011128:	4629      	mov	r1, r5
 801112a:	2200      	movs	r2, #0
 801112c:	4b06      	ldr	r3, [pc, #24]	; (8011148 <scalbn+0xe8>)
 801112e:	e7b2      	b.n	8011096 <scalbn+0x36>
 8011130:	c2f8f359 	.word	0xc2f8f359
 8011134:	01a56e1f 	.word	0x01a56e1f
 8011138:	8800759c 	.word	0x8800759c
 801113c:	7e37e43c 	.word	0x7e37e43c
 8011140:	43500000 	.word	0x43500000
 8011144:	ffff3cb0 	.word	0xffff3cb0
 8011148:	3c900000 	.word	0x3c900000

0801114c <copysign>:
 801114c:	ec51 0b10 	vmov	r0, r1, d0
 8011150:	ee11 0a90 	vmov	r0, s3
 8011154:	ee10 2a10 	vmov	r2, s0
 8011158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801115c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011160:	ea41 0300 	orr.w	r3, r1, r0
 8011164:	ec43 2b10 	vmov	d0, r2, r3
 8011168:	4770      	bx	lr
	...

0801116c <_init>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	bf00      	nop
 8011170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011172:	bc08      	pop	{r3}
 8011174:	469e      	mov	lr, r3
 8011176:	4770      	bx	lr

08011178 <_fini>:
 8011178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117a:	bf00      	nop
 801117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117e:	bc08      	pop	{r3}
 8011180:	469e      	mov	lr, r3
 8011182:	4770      	bx	lr
