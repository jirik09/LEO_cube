
G474RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d4bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0801d6a0  0801d6a0  0002d6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0b8  0801e0b8  00030144  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0b8  0801e0b8  0002e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0c0  0801e0c0  00030144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e0c0  0801e0c0  0002e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e0c4  0801e0c4  0002e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0801e0c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ce4  20000148  0801e20c  00030148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20016e2c  0801e20c  00036e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000420de  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007076  00000000  00000000  00072252  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027f8  00000000  00000000  000792c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002528  00000000  00000000  0007bac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031904  00000000  00000000  0007dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b8c9  00000000  00000000  000af8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012e37e  00000000  00000000  000db1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00209533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a71c  00000000  00000000  002095b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d684 	.word	0x0801d684

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0801d684 	.word	0x0801d684

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <CmdParserTask>:
/**
 * @brief  Command parser task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CmdParserTask(void const *argument){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	//CASSERT(sizeof(IDN_STRING)<30); //IDN string is too long

	uint16_t message = 0xFFFF;
 8000f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f34:	82fb      	strh	r3, [r7, #22]
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f014 f806 	bl	8014f4c <xQueueGenericCreate>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f44:	601a      	str	r2, [r3, #0]
	uint8_t cmdIn[5];
	uint8_t chr;
	uint8_t byteRead;
	command tempCmd;
	while(1){
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 0116 	add.w	r1, r7, #22
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	f014 fa7c 	bl	8015450 <xQueueGenericReceive>

		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b32      	cmp	r3, #50	; 0x32
 8000f5c:	d1f3      	bne.n	8000f46 <CmdParserTask+0x1e>
			do{
				cmdIn[0] = cmdIn[1];
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	743b      	strb	r3, [r7, #16]
				cmdIn[1] = cmdIn[2];
 8000f62:	7cbb      	ldrb	r3, [r7, #18]
 8000f64:	747b      	strb	r3, [r7, #17]
				cmdIn[2] = cmdIn[3];
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	74bb      	strb	r3, [r7, #18]
				cmdIn[3] = chr;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	74fb      	strb	r3, [r7, #19]
				byteRead = commBufferReadByte(&chr);
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f9e2 	bl	800333c <commBufferReadByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	77fb      	strb	r3, [r7, #31]
			}while(byteRead==0 && chr != ':' && chr != ';');
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <CmdParserTask+0x66>
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b3a      	cmp	r3, #58	; 0x3a
 8000f86:	d002      	beq.n	8000f8e <CmdParserTask+0x66>
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f8c:	d1e7      	bne.n	8000f5e <CmdParserTask+0x36>

			uint16_t passMsg;

			if(byteRead==0){
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1d8      	bne.n	8000f46 <CmdParserTask+0x1e>
				switch (BUILD_CMD(cmdIn)){
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	7cbb      	ldrb	r3, [r7, #18]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	7c7b      	ldrb	r3, [r7, #17]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	7c3a      	ldrb	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <CmdParserTask+0x1bc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d05f      	beq.n	800106e <CmdParserTask+0x146>
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <CmdParserTask+0x1bc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	dc13      	bgt.n	8000fdc <CmdParserTask+0xb4>
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d033      	beq.n	8001022 <CmdParserTask+0xfa>
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	dc06      	bgt.n	8000fce <CmdParserTask+0xa6>
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <CmdParserTask+0x1c4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02a      	beq.n	800101c <CmdParserTask+0xf4>
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <CmdParserTask+0x1c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01b      	beq.n	8001004 <CmdParserTask+0xdc>
 8000fcc:	e072      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <CmdParserTask+0x1cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d032      	beq.n	800103a <CmdParserTask+0x112>
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <CmdParserTask+0x1d0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d065      	beq.n	80010a6 <CmdParserTask+0x17e>
 8000fda:	e06b      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <CmdParserTask+0x1d4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <CmdParserTask+0x12a>
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <CmdParserTask+0x1d4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	dc06      	bgt.n	8000ff6 <CmdParserTask+0xce>
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <CmdParserTask+0x1d8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d054      	beq.n	8001098 <CmdParserTask+0x170>
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <CmdParserTask+0x1dc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d035      	beq.n	8001060 <CmdParserTask+0x138>
 8000ff4:	e05e      	b.n	80010b4 <CmdParserTask+0x18c>
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <CmdParserTask+0x1e0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d03f      	beq.n	800107c <CmdParserTask+0x154>
 8000ffc:	4a43      	ldr	r2, [pc, #268]	; (800110c <CmdParserTask+0x1e4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d043      	beq.n	800108a <CmdParserTask+0x162>
 8001002:	e057      	b.n	80010b4 <CmdParserTask+0x18c>
				case CMD_IDN: //send IDN
					passMsg = MSG_DEVICE_IDN;
 8001004:	2300      	movs	r3, #0
 8001006:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <CmdParserTask+0x1e8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	f107 010c 	add.w	r1, r7, #12
 8001010:	2300      	movs	r3, #0
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	f014 f88d 	bl	8015134 <xQueueGenericSend>
					break;
 800101a:	e060      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_RESET_DEVICE:
					resetDevice();
 800101c:	f017 f832 	bl	8018084 <resetDevice>
					break;
 8001020:	e05d      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_VERSION:
					passMsg = MSG_SYSTEM_VERSION;
 8001022:	2301      	movs	r3, #1
 8001024:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <CmdParserTask+0x1e8>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f107 010c 	add.w	r1, r7, #12
 800102e:	2300      	movs	r3, #0
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	f014 f87e 	bl	8015134 <xQueueGenericSend>
					break;
 8001038:	e051      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_IS_SHIELD:
					passMsg = MSG_SHIELD_AVAIL;
 800103a:	2304      	movs	r3, #4
 800103c:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <CmdParserTask+0x1e8>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2300      	movs	r3, #0
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	f014 f872 	bl	8015134 <xQueueGenericSend>
					break;
 8001050:	e045      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_SYSTEM:
					tempCmd = parseSystemCmd();
 8001052:	f000 f861 	bl	8001118 <parseSystemCmd>
 8001056:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001058:	69b8      	ldr	r0, [r7, #24]
 800105a:	f001 fcdb 	bl	8002a14 <printErrResponse>
					break;
 800105e:	e03e      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_COMMS:
					tempCmd = parseCommsCmd();
 8001060:	f000 f892 	bl	8001188 <parseCommsCmd>
 8001064:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f001 fcd4 	bl	8002a14 <printErrResponse>
					break;
 800106c:	e037      	b.n	80010de <CmdParserTask+0x1b6>
#ifdef USE_SCOPE
				case CMD_SCOPE: //parse scope command
					tempCmd = parseScopeCmd();
 800106e:	f000 fbb7 	bl	80017e0 <parseScopeCmd>
 8001072:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001074:	69b8      	ldr	r0, [r7, #24]
 8001076:	f001 fccd 	bl	8002a14 <printErrResponse>
					break;
 800107a:	e030      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
				case CMD_GENERATOR: //parse generator command
					tempCmd = parseGeneratorCmd();
 800107c:	f001 fa6c 	bl	8002558 <parseGeneratorCmd>
 8001080:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f001 fcc6 	bl	8002a14 <printErrResponse>
					break;
 8001088:	e029      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_GEN || USE_GEN_PWM
#ifdef USE_COUNTER
				case CMD_COUNTER: //parse generator command
					tempCmd = parseCounterCmd();
 800108a:	f000 f8b5 	bl	80011f8 <parseCounterCmd>
 800108e:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f001 fcbf 	bl	8002a14 <printErrResponse>
					break;
 8001096:	e022      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_COUNTER
#ifdef USE_SYNC_PWM
				case CMD_SYNC_PWM: //parse sync PWM command
					tempCmd = parseSyncPwmCmd();
 8001098:	f000 ffc8 	bl	800202c <parseSyncPwmCmd>
 800109c:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 800109e:	69b8      	ldr	r0, [r7, #24]
 80010a0:	f001 fcb8 	bl	8002a14 <printErrResponse>
					break;
 80010a4:	e01b      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SYNC_PWM
#ifdef USE_LOG_ANLYS
				case CMD_LOG_ANLYS: //parse logic analyzer command
					tempCmd = parseLogAnlysCmd();
 80010a6:	f001 f8e7 	bl	8002278 <parseLogAnlysCmd>
 80010aa:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f001 fcb1 	bl	8002a14 <printErrResponse>
					break;
 80010b2:	e014      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_LOG_ANLYS
				default:
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <CmdParserTask+0x1e8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	4915      	ldr	r1, [pc, #84]	; (8001114 <CmdParserTask+0x1ec>)
 80010c0:	f014 f838 	bl	8015134 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80010c4:	bf00      	nop
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f936 	bl	800333c <commBufferReadByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f af37 	bne.w	8000f46 <CmdParserTask+0x1e>
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b3b      	cmp	r3, #59	; 0x3b
 80010dc:	d1f3      	bne.n	80010c6 <CmdParserTask+0x19e>
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 80010de:	e732      	b.n	8000f46 <CmdParserTask+0x1e>
 80010e0:	20004558 	.word	0x20004558
 80010e4:	5043534f 	.word	0x5043534f
 80010e8:	3f524556 	.word	0x3f524556
 80010ec:	21534552 	.word	0x21534552
 80010f0:	3f4e4449 	.word	0x3f4e4449
 80010f4:	3f5f4853 	.word	0x3f5f4853
 80010f8:	41474f4c 	.word	0x41474f4c
 80010fc:	54535953 	.word	0x54535953
 8001100:	504e5953 	.word	0x504e5953
 8001104:	534d4f43 	.word	0x534d4f43
 8001108:	5f4e4547 	.word	0x5f4e4547
 800110c:	5f544e43 	.word	0x5f544e43
 8001110:	2000455c 	.word	0x2000455c
 8001114:	0801d700 	.word	0x0801d700

08001118 <parseSystemCmd>:
/**
 * @brief  System command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSystemCmd(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <parseSystemCmd+0x60>)
 8001120:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001122:	2300      	movs	r3, #0
 8001124:	70fb      	strb	r3, [r7, #3]
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001126:	f001 fc4f 	bl	80029c8 <giveNextCmd>
 800112a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <parseSystemCmd+0x64>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d003      	beq.n	800113c <parseSystemCmd+0x24>
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <parseSystemCmd+0x68>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d010      	beq.n	800115c <parseSystemCmd+0x44>
 800113a:	e00a      	b.n	8001152 <parseSystemCmd+0x3a>
	uint16_t passMsg;
	case CMD_GET_CONFIG:
		passMsg = MSG_SYSTEM_CONFIG;
 800113c:	2302      	movs	r3, #2
 800113e:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <parseSystemCmd+0x6c>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4639      	mov	r1, r7
 8001146:	2300      	movs	r3, #0
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	f013 fff2 	bl	8015134 <xQueueGenericSend>
		break;
 8001150:	e005      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
	default:
		error = SYSTEM_INVALID_FEATURE;
 8001152:	2301      	movs	r3, #1
 8001154:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <parseSystemCmd+0x60>)
 8001158:	607b      	str	r3, [r7, #4]
		break;
 800115a:	e000      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
 800115c:	bf00      	nop
	}
	if(error>0){
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <parseSystemCmd+0x52>
		cmdIn=error;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <parseSystemCmd+0x56>
	}else{
		cmdIn=CMD_END;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <parseSystemCmd+0x68>)
 800116c:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	5f525245 	.word	0x5f525245
 800117c:	3f474643 	.word	0x3f474643
 8001180:	5f444e45 	.word	0x5f444e45
 8001184:	2000455c 	.word	0x2000455c

08001188 <parseCommsCmd>:
/**
 * @brief  Communications command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseCommsCmd(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <parseCommsCmd+0x60>)
 8001190:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001192:	2300      	movs	r3, #0
 8001194:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001196:	f001 fc17 	bl	80029c8 <giveNextCmd>
 800119a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <parseCommsCmd+0x64>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d003      	beq.n	80011ac <parseCommsCmd+0x24>
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <parseCommsCmd+0x68>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d010      	beq.n	80011cc <parseCommsCmd+0x44>
 80011aa:	e00a      	b.n	80011c2 <parseCommsCmd+0x3a>
	case CMD_GET_CONFIG:
		passMsg = MSG_COMMS_CONFIG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <parseCommsCmd+0x6c>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4639      	mov	r1, r7
 80011b6:	2300      	movs	r3, #0
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	f013 ffba 	bl	8015134 <xQueueGenericSend>
		break;
 80011c0:	e005      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
	default:
		error = COMMS_INVALID_FEATURE;
 80011c2:	2302      	movs	r3, #2
 80011c4:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <parseCommsCmd+0x60>)
 80011c8:	607b      	str	r3, [r7, #4]
		break;
 80011ca:	e000      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
 80011cc:	bf00      	nop
	}
	if(error>0){
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <parseCommsCmd+0x52>
		cmdIn=error;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <parseCommsCmd+0x56>
	}else{
		cmdIn=CMD_END;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <parseCommsCmd+0x68>)
 80011dc:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	5f525245 	.word	0x5f525245
 80011ec:	3f474643 	.word	0x3f474643
 80011f0:	5f444e45 	.word	0x5f444e45
 80011f4:	2000455c 	.word	0x2000455c

080011f8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR; 
 80011fe:	4b9a      	ldr	r3, [pc, #616]	; (8001468 <parseCounterCmd+0x270>)
 8001200:	60bb      	str	r3, [r7, #8]
	uint8_t error=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 8001206:	f001 fbdf 	bl	80029c8 <giveNextCmd>
 800120a:	60b8      	str	r0, [r7, #8]
	switch(cmdIn){
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4a97      	ldr	r2, [pc, #604]	; (800146c <parseCounterCmd+0x274>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d07d      	beq.n	8001310 <parseCounterCmd+0x118>
 8001214:	4a95      	ldr	r2, [pc, #596]	; (800146c <parseCounterCmd+0x274>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d81f      	bhi.n	800125a <parseCounterCmd+0x62>
 800121a:	4a95      	ldr	r2, [pc, #596]	; (8001470 <parseCounterCmd+0x278>)
 800121c:	4293      	cmp	r3, r2
 800121e:	f000 825f 	beq.w	80016e0 <parseCounterCmd+0x4e8>
 8001222:	4a93      	ldr	r2, [pc, #588]	; (8001470 <parseCounterCmd+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d80c      	bhi.n	8001242 <parseCounterCmd+0x4a>
 8001228:	4a92      	ldr	r2, [pc, #584]	; (8001474 <parseCounterCmd+0x27c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f000 8242 	beq.w	80016b4 <parseCounterCmd+0x4bc>
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <parseCounterCmd+0x280>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f000 8200 	beq.w	8001638 <parseCounterCmd+0x440>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <parseCounterCmd+0x284>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f000 81c2 	beq.w	80015c4 <parseCounterCmd+0x3cc>
 8001240:	e2bd      	b.n	80017be <parseCounterCmd+0x5c6>
 8001242:	4a8f      	ldr	r2, [pc, #572]	; (8001480 <parseCounterCmd+0x288>)
 8001244:	4293      	cmp	r3, r2
 8001246:	f000 819d 	beq.w	8001584 <parseCounterCmd+0x38c>
 800124a:	4a8e      	ldr	r2, [pc, #568]	; (8001484 <parseCounterCmd+0x28c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d025      	beq.n	800129c <parseCounterCmd+0xa4>
 8001250:	4a8d      	ldr	r2, [pc, #564]	; (8001488 <parseCounterCmd+0x290>)
 8001252:	4293      	cmp	r3, r2
 8001254:	f000 82a8 	beq.w	80017a8 <parseCounterCmd+0x5b0>
 8001258:	e2b1      	b.n	80017be <parseCounterCmd+0x5c6>
 800125a:	4a8c      	ldr	r2, [pc, #560]	; (800148c <parseCounterCmd+0x294>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f000 80a1 	beq.w	80013a4 <parseCounterCmd+0x1ac>
 8001262:	4a8a      	ldr	r2, [pc, #552]	; (800148c <parseCounterCmd+0x294>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d80c      	bhi.n	8001282 <parseCounterCmd+0x8a>
 8001268:	4a89      	ldr	r2, [pc, #548]	; (8001490 <parseCounterCmd+0x298>)
 800126a:	4293      	cmp	r3, r2
 800126c:	f000 8262 	beq.w	8001734 <parseCounterCmd+0x53c>
 8001270:	4a88      	ldr	r2, [pc, #544]	; (8001494 <parseCounterCmd+0x29c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f000 8275 	beq.w	8001762 <parseCounterCmd+0x56a>
 8001278:	4a87      	ldr	r2, [pc, #540]	; (8001498 <parseCounterCmd+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f000 8274 	beq.w	8001768 <parseCounterCmd+0x570>
 8001280:	e29d      	b.n	80017be <parseCounterCmd+0x5c6>
 8001282:	4a86      	ldr	r2, [pc, #536]	; (800149c <parseCounterCmd+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	f000 8131 	beq.w	80014ec <parseCounterCmd+0x2f4>
 800128a:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <parseCounterCmd+0x2a8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	f000 823d 	beq.w	800170c <parseCounterCmd+0x514>
 8001292:	4a84      	ldr	r2, [pc, #528]	; (80014a4 <parseCounterCmd+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f000 8261 	beq.w	800175c <parseCounterCmd+0x564>
 800129a:	e290      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_MODE:
		cmdIn = giveNextCmd();
 800129c:	f001 fb94 	bl	80029c8 <giveNextCmd>
 80012a0:	60b8      	str	r0, [r7, #8]
		if(isCounterMode(cmdIn)){
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a80      	ldr	r2, [pc, #512]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00b      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4a7f      	ldr	r2, [pc, #508]	; (80014ac <parseCounterCmd+0x2b4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a7e      	ldr	r2, [pc, #504]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4a7d      	ldr	r2, [pc, #500]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11f      	bne.n	8001302 <parseCounterCmd+0x10a>
			if(cmdIn == CMD_MODE_ETR){
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d103      	bne.n	80012d2 <parseCounterCmd+0xda>
				counterSetMode(ETR);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f002 fcd6 	bl	8003c7c <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012d0:	e01c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_IC){
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a75      	ldr	r2, [pc, #468]	; (80014ac <parseCounterCmd+0x2b4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d103      	bne.n	80012e2 <parseCounterCmd+0xea>
				counterSetMode(IC);
 80012da:	2001      	movs	r0, #1
 80012dc:	f002 fcce 	bl	8003c7c <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012e0:	e014      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_REF){
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <parseCounterCmd+0xfa>
				counterSetMode(REF);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f002 fcc6 	bl	8003c7c <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012f0:	e00c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_TI){
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d108      	bne.n	800130c <parseCounterCmd+0x114>
				counterSetMode(TI);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f002 fcbe 	bl	8003c7c <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 8001300:	e004      	b.n	800130c <parseCounterCmd+0x114>
			}
		}else{
			cmdIn = CMD_ERR;
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <parseCounterCmd+0x270>)
 8001304:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001306:	2396      	movs	r3, #150	; 0x96
 8001308:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800130a:	e258      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_ETR){
 800130c:	bf00      	nop
		break;
 800130e:	e256      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_GATE:
		cmdIn = giveNextCmd();
 8001310:	f001 fb5a 	bl	80029c8 <giveNextCmd>
 8001314:	60b8      	str	r0, [r7, #8]
		if(isCounterEtrGate(cmdIn)){
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4a67      	ldr	r2, [pc, #412]	; (80014b8 <parseCounterCmd+0x2c0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00f      	beq.n	800133e <parseCounterCmd+0x146>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <parseCounterCmd+0x2c4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00b      	beq.n	800133e <parseCounterCmd+0x146>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <parseCounterCmd+0x2c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <parseCounterCmd+0x146>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d003      	beq.n	800133e <parseCounterCmd+0x146>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <parseCounterCmd+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <parseCounterCmd+0x19e>
			if(cmdIn == CMD_GATE_100m){
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a5d      	ldr	r2, [pc, #372]	; (80014b8 <parseCounterCmd+0x2c0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d103      	bne.n	800134e <parseCounterCmd+0x156>
				counterSetEtrGate(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f002 fdd4 	bl	8003ef4 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800134c:	e028      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_500m){
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <parseCounterCmd+0x2c4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d104      	bne.n	8001360 <parseCounterCmd+0x168>
				counterSetEtrGate(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f002 fdcb 	bl	8003ef4 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800135e:	e01f      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_1s){
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <parseCounterCmd+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d104      	bne.n	8001372 <parseCounterCmd+0x17a>
				counterSetEtrGate(1000);
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f002 fdc2 	bl	8003ef4 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001370:	e016      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_5s){
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4a53      	ldr	r2, [pc, #332]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d104      	bne.n	8001384 <parseCounterCmd+0x18c>
				counterSetEtrGate(5000);
 800137a:	f241 3088 	movw	r0, #5000	; 0x1388
 800137e:	f002 fdb9 	bl	8003ef4 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001382:	e00d      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_10s){
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <parseCounterCmd+0x2d0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d109      	bne.n	80013a0 <parseCounterCmd+0x1a8>
				counterSetEtrGate(10000);
 800138c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001390:	f002 fdb0 	bl	8003ef4 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001394:	e004      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}					
		}else{
			cmdIn = CMD_ERR;
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <parseCounterCmd+0x270>)
 8001398:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800139a:	2396      	movs	r3, #150	; 0x96
 800139c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800139e:	e20e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_GATE_100m){
 80013a0:	bf00      	nop
		break;
 80013a2:	e20c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_EVENT:
		cmdIn = giveNextCmd();
 80013a4:	f001 fb10 	bl	80029c8 <giveNextCmd>
 80013a8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcTiEvent(cmdIn)){
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d017      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <parseCounterCmd+0x2dc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <parseCounterCmd+0x2e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00f      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <parseCounterCmd+0x2e4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <parseCounterCmd+0x2e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <parseCounterCmd+0x2ec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d003      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <parseCounterCmd+0x2f0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d137      	bne.n	800145a <parseCounterCmd+0x262>
			if(cmdIn == CMD_EVENT_RF1){
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d102      	bne.n	80013f8 <parseCounterCmd+0x200>
				counterSetIcTi1_RisingFalling();
 80013f2:	f002 fe7b 	bl	80040ec <counterSetIcTi1_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 80013f6:	e035      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RF2){
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <parseCounterCmd+0x20e>
				counterSetIcTi2_RisingFalling();
 8001400:	f002 fe98 	bl	8004134 <counterSetIcTi2_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 8001404:	e02e      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO1){
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <parseCounterCmd+0x2dc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d102      	bne.n	8001414 <parseCounterCmd+0x21c>
				counterSetIcTi1_Rising();
 800140e:	f002 fe79 	bl	8004104 <counterSetIcTi1_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001412:	e027      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO2){
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <parseCounterCmd+0x2e0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d102      	bne.n	8001422 <parseCounterCmd+0x22a>
				counterSetIcTi2_Rising();
 800141c:	f002 fe96 	bl	800414c <counterSetIcTi2_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001420:	e020      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO1){
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <parseCounterCmd+0x2e4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <parseCounterCmd+0x238>
				counterSetIcTi1_Falling();
 800142a:	f002 fe77 	bl	800411c <counterSetIcTi1_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800142e:	e019      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO2){
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <parseCounterCmd+0x2e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d102      	bne.n	800143e <parseCounterCmd+0x246>
				counterSetIcTi2_Falling();
 8001438:	f002 fe94 	bl	8004164 <counterSetIcTi2_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800143c:	e012      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_AB){
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <parseCounterCmd+0x2ec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <parseCounterCmd+0x254>
				counterSetTiSequence_AB();
 8001446:	f002 fe99 	bl	800417c <counterSetTiSequence_AB>
			if(cmdIn == CMD_EVENT_RF1){
 800144a:	e00b      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_BA){
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <parseCounterCmd+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d107      	bne.n	8001464 <parseCounterCmd+0x26c>
				counterSetTiSequence_BA();
 8001454:	f002 fe98 	bl	8004188 <counterSetTiSequence_BA>
			if(cmdIn == CMD_EVENT_RF1){
 8001458:	e004      	b.n	8001464 <parseCounterCmd+0x26c>
			}
		}else{
			cmdIn = CMD_ERR;
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <parseCounterCmd+0x270>)
 800145c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800145e:	2396      	movs	r3, #150	; 0x96
 8001460:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001462:	e1ac      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_EVENT_RF1){
 8001464:	bf00      	nop
		break;
 8001466:	e1aa      	b.n	80017be <parseCounterCmd+0x5c6>
 8001468:	5f525245 	.word	0x5f525245
 800146c:	45544147 	.word	0x45544147
 8001470:	32465542 	.word	0x32465542
 8001474:	31465542 	.word	0x31465542
 8001478:	32455250 	.word	0x32455250
 800147c:	31455250 	.word	0x31455250
 8001480:	444d4954 	.word	0x444d4954
 8001484:	45444f4d 	.word	0x45444f4d
 8001488:	3f474643 	.word	0x3f474643
 800148c:	544e5645 	.word	0x544e5645
 8001490:	4f4d4954 	.word	0x4f4d4954
 8001494:	504f5453 	.word	0x504f5453
 8001498:	4e494544 	.word	0x4e494544
 800149c:	59435544 	.word	0x59435544
 80014a0:	5f435352 	.word	0x5f435352
 80014a4:	54525453 	.word	0x54525453
 80014a8:	5f525445 	.word	0x5f525445
 80014ac:	5f5f4349 	.word	0x5f5f4349
 80014b0:	5f464552 	.word	0x5f464552
 80014b4:	5f5f4954 	.word	0x5f5f4954
 80014b8:	6d303031 	.word	0x6d303031
 80014bc:	6d303035 	.word	0x6d303035
 80014c0:	5f5f7331 	.word	0x5f5f7331
 80014c4:	5f5f7335 	.word	0x5f5f7335
 80014c8:	5f733031 	.word	0x5f733031
 80014cc:	5f314652 	.word	0x5f314652
 80014d0:	5f324652 	.word	0x5f324652
 80014d4:	5f314f52 	.word	0x5f314f52
 80014d8:	5f324f52 	.word	0x5f324f52
 80014dc:	5f314f46 	.word	0x5f314f46
 80014e0:	5f324f46 	.word	0x5f324f46
 80014e4:	42415153 	.word	0x42415153
 80014e8:	41425153 	.word	0x41425153
	case CMD_CNT_DUTY_CYCLE:
		cmdIn = giveNextCmd();
 80014ec:	f001 fa6c 	bl	80029c8 <giveNextCmd>
 80014f0:	60b8      	str	r0, [r7, #8]
		if(isCounterIcDutyCycle(cmdIn)){
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a9e      	ldr	r2, [pc, #632]	; (8001770 <parseCounterCmd+0x578>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <parseCounterCmd+0x32a>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4a9d      	ldr	r2, [pc, #628]	; (8001774 <parseCounterCmd+0x57c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00f      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4a9c      	ldr	r2, [pc, #624]	; (8001778 <parseCounterCmd+0x580>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00b      	beq.n	8001522 <parseCounterCmd+0x32a>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4a9b      	ldr	r2, [pc, #620]	; (800177c <parseCounterCmd+0x584>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <parseCounterCmd+0x588>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d003      	beq.n	8001522 <parseCounterCmd+0x32a>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a99      	ldr	r2, [pc, #612]	; (8001784 <parseCounterCmd+0x58c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <parseCounterCmd+0x37e>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <parseCounterCmd+0x578>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <parseCounterCmd+0x338>
				counterIc1DutyCycleInit();
 800152a:	f002 fda3 	bl	8004074 <counterIc1DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800152e:	e027      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH1){
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a91      	ldr	r2, [pc, #580]	; (8001778 <parseCounterCmd+0x580>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <parseCounterCmd+0x346>
				counterIc1DutyCycleDeinit();
 8001538:	f002 fda8 	bl	800408c <counterIc1DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800153c:	e020      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_ENABLE){
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4a8f      	ldr	r2, [pc, #572]	; (8001780 <parseCounterCmd+0x588>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d102      	bne.n	800154c <parseCounterCmd+0x354>
				counterIcDutyCycleEnable();
 8001546:	f002 fdc5 	bl	80040d4 <counterIcDutyCycleEnable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800154a:	e019      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DISABLE){
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a8d      	ldr	r2, [pc, #564]	; (8001784 <parseCounterCmd+0x58c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d102      	bne.n	800155a <parseCounterCmd+0x362>
				counterIcDutyCycleDisable();
 8001554:	f002 fdc4 	bl	80040e0 <counterIcDutyCycleDisable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001558:	e012      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_INIT_CH2){
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4a85      	ldr	r2, [pc, #532]	; (8001774 <parseCounterCmd+0x57c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <parseCounterCmd+0x370>
				counterIc2DutyCycleInit();
 8001562:	f002 fd9f 	bl	80040a4 <counterIc2DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001566:	e00b      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH2){
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4a84      	ldr	r2, [pc, #528]	; (800177c <parseCounterCmd+0x584>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d107      	bne.n	8001580 <parseCounterCmd+0x388>
				counterIc2DutyCycleDeinit();
 8001570:	f002 fda4 	bl	80040bc <counterIc2DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001574:	e004      	b.n	8001580 <parseCounterCmd+0x388>
			}
		}else{
			cmdIn = CMD_ERR;
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <parseCounterCmd+0x590>)
 8001578:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800157a:	2396      	movs	r3, #150	; 0x96
 800157c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800157e:	e11e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001580:	bf00      	nop
		break;
 8001582:	e11c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_TI_MODE:
		cmdIn = giveNextCmd();
 8001584:	f001 fa20 	bl	80029c8 <giveNextCmd>
 8001588:	60b8      	str	r0, [r7, #8]
		if(isCounterTiMode(cmdIn)){
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <parseCounterCmd+0x594>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d003      	beq.n	800159a <parseCounterCmd+0x3a2>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <parseCounterCmd+0x598>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <parseCounterCmd+0x3be>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4a7b      	ldr	r2, [pc, #492]	; (800178c <parseCounterCmd+0x594>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <parseCounterCmd+0x3b0>
				counterSetTiMode_Dependent();
 80015a2:	f002 fe05 	bl	80041b0 <counterSetTiMode_Dependent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015a6:	e00b      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}else if(cmdIn == CMD_MODE_EVENT_SEQUENCE_INDEP){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4a79      	ldr	r2, [pc, #484]	; (8001790 <parseCounterCmd+0x598>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d107      	bne.n	80015c0 <parseCounterCmd+0x3c8>
				counterSetTiMode_Independent();
 80015b0:	f002 fdf0 	bl	8004194 <counterSetTiMode_Independent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015b4:	e004      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}
		}else{
			cmdIn = CMD_ERR;
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <parseCounterCmd+0x590>)
 80015b8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80015ba:	2396      	movs	r3, #150	; 0x96
 80015bc:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80015be:	e0fe      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015c0:	bf00      	nop
		break;
 80015c2:	e0fc      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC1:
		cmdIn = giveNextCmd();
 80015c4:	f001 fa00 	bl	80029c8 <giveNextCmd>
 80015c8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc1(cmdIn)){
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a71      	ldr	r2, [pc, #452]	; (8001794 <parseCounterCmd+0x59c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00b      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4a70      	ldr	r2, [pc, #448]	; (8001798 <parseCounterCmd+0x5a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <parseCounterCmd+0x5a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <parseCounterCmd+0x5a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11f      	bne.n	800162a <parseCounterCmd+0x432>
			if(cmdIn == CMD_PRESC1_1x){
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <parseCounterCmd+0x59c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d103      	bne.n	80015fa <parseCounterCmd+0x402>
				counterSetIc1Prescaler(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f002 fd0a 	bl	800400c <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 80015f8:	e01c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_2x){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <parseCounterCmd+0x5a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d103      	bne.n	800160a <parseCounterCmd+0x412>
				counterSetIc1Prescaler(2);
 8001602:	2002      	movs	r0, #2
 8001604:	f002 fd02 	bl	800400c <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001608:	e014      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_4x){
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <parseCounterCmd+0x5a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d103      	bne.n	800161a <parseCounterCmd+0x422>
				counterSetIc1Prescaler(4);
 8001612:	2004      	movs	r0, #4
 8001614:	f002 fcfa 	bl	800400c <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001618:	e00c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_8x){
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <parseCounterCmd+0x5a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <parseCounterCmd+0x43c>
				counterSetIc1Prescaler(8);
 8001622:	2008      	movs	r0, #8
 8001624:	f002 fcf2 	bl	800400c <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001628:	e004      	b.n	8001634 <parseCounterCmd+0x43c>
			}
		}else{
			cmdIn = CMD_ERR;
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <parseCounterCmd+0x590>)
 800162c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800162e:	2396      	movs	r3, #150	; 0x96
 8001630:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001632:	e0c4      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_PRESC1_1x){
 8001634:	bf00      	nop
		break;
 8001636:	e0c2      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC2:
		cmdIn = giveNextCmd();
 8001638:	f001 f9c6 	bl	80029c8 <giveNextCmd>
 800163c:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc2(cmdIn)){
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a54      	ldr	r2, [pc, #336]	; (8001794 <parseCounterCmd+0x59c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00b      	beq.n	800165e <parseCounterCmd+0x466>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4a53      	ldr	r2, [pc, #332]	; (8001798 <parseCounterCmd+0x5a0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <parseCounterCmd+0x466>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <parseCounterCmd+0x5a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d003      	beq.n	800165e <parseCounterCmd+0x466>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <parseCounterCmd+0x5a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d124      	bne.n	80016a8 <parseCounterCmd+0x4b0>
			if(cmdIn == CMD_PRESC2_1x){
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <parseCounterCmd+0x59c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d103      	bne.n	800166e <parseCounterCmd+0x476>
				counterSetIc2Prescaler(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f002 fcea 	bl	8004040 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800166c:	e021      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_2x){
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4a49      	ldr	r2, [pc, #292]	; (8001798 <parseCounterCmd+0x5a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d103      	bne.n	800167e <parseCounterCmd+0x486>
				counterSetIc2Prescaler(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f002 fce2 	bl	8004040 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800167c:	e019      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_4x){
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <parseCounterCmd+0x5a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d103      	bne.n	800168e <parseCounterCmd+0x496>
				counterSetIc2Prescaler(4);
 8001686:	2004      	movs	r0, #4
 8001688:	f002 fcda 	bl	8004040 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800168c:	e011      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_8x){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <parseCounterCmd+0x5a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <parseCounterCmd+0x4a6>
				counterSetIc2Prescaler(8);
 8001696:	2008      	movs	r0, #8
 8001698:	f002 fcd2 	bl	8004040 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800169c:	e009      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else{
				cmdIn = CMD_ERR;
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <parseCounterCmd+0x590>)
 80016a0:	60bb      	str	r3, [r7, #8]
				error = COUNTER_INVALID_FEATURE_PARAM;
 80016a2:	2396      	movs	r3, #150	; 0x96
 80016a4:	73fb      	strb	r3, [r7, #15]
			if(cmdIn == CMD_PRESC2_1x){
 80016a6:	e004      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}					
		}else{
			cmdIn = CMD_ERR;
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <parseCounterCmd+0x590>)
 80016aa:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016ac:	2396      	movs	r3, #150	; 0x96
 80016ae:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80016b0:	e085      	b.n	80017be <parseCounterCmd+0x5c6>
 80016b2:	e084      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT1:
		cmdIn = giveNextCmd();
 80016b4:	f001 f988 	bl	80029c8 <giveNextCmd>
 80016b8:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <parseCounterCmd+0x4de>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <parseCounterCmd+0x590>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d005      	beq.n	80016d6 <parseCounterCmd+0x4de>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fc4c 	bl	8003f6c <counterSetIc1SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 80016d4:	e073      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <parseCounterCmd+0x590>)
 80016d8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016da:	2396      	movs	r3, #150	; 0x96
 80016dc:	73fb      	strb	r3, [r7, #15]
		break;
 80016de:	e06e      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT2:
		cmdIn = giveNextCmd();
 80016e0:	f001 f972 	bl	80029c8 <giveNextCmd>
 80016e4:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <parseCounterCmd+0x50a>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <parseCounterCmd+0x590>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d005      	beq.n	8001702 <parseCounterCmd+0x50a>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fc5e 	bl	8003fbc <counterSetIc2SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001700:	e05d      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <parseCounterCmd+0x590>)
 8001704:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001706:	2396      	movs	r3, #150	; 0x96
 8001708:	73fb      	strb	r3, [r7, #15]
		break;
 800170a:	e058      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_REF_SAMPLE_COUNT:
		cmdIn = giveNextCmd();
 800170c:	f001 f95c 	bl	80029c8 <giveNextCmd>
 8001710:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <parseCounterCmd+0x5ac>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <parseCounterCmd+0x532>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <parseCounterCmd+0x590>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d003      	beq.n	800172a <parseCounterCmd+0x532>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f002 fc02 	bl	8003f2c <counterSetRefSampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001728:	e049      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <parseCounterCmd+0x590>)
 800172c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800172e:	2396      	movs	r3, #150	; 0x96
 8001730:	73fb      	strb	r3, [r7, #15]
		break;
 8001732:	e044      	b.n	80017be <parseCounterCmd+0x5c6>
		/* TI set timout */
	case CMD_CNT_TIMEOUT_TIM:
		cmdIn = giveNextCmd();
 8001734:	f001 f948 	bl	80029c8 <giveNextCmd>
 8001738:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <parseCounterCmd+0x5ac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <parseCounterCmd+0x55a>
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <parseCounterCmd+0x590>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d003      	beq.n	8001752 <parseCounterCmd+0x55a>
			counterSetTiTimeout((uint32_t)cmdIn);
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f002 fd3e 	bl	80041cc <counterSetTiTimeout>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001750:	e035      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <parseCounterCmd+0x590>)
 8001754:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001756:	2396      	movs	r3, #150	; 0x96
 8001758:	73fb      	strb	r3, [r7, #15]
		break;
 800175a:	e030      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_START:
		counterSendStart();
 800175c:	f002 fad8 	bl	8003d10 <counterSendStart>
		break;
 8001760:	e02d      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_STOP:
		counterSendStop();
 8001762:	f002 faef 	bl	8003d44 <counterSendStop>
		break;
 8001766:	e02a      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_DEINIT:
		counterDeinit();
 8001768:	f002 fb00 	bl	8003d6c <counterDeinit>
		break;
 800176c:	e027      	b.n	80017be <parseCounterCmd+0x5c6>
 800176e:	bf00      	nop
 8001770:	31494344 	.word	0x31494344
 8001774:	32494344 	.word	0x32494344
 8001778:	31444344 	.word	0x31444344
 800177c:	32444344 	.word	0x32444344
 8001780:	5f454344 	.word	0x5f454344
 8001784:	5f584344 	.word	0x5f584344
 8001788:	5f525245 	.word	0x5f525245
 800178c:	44514553 	.word	0x44514553
 8001790:	49514553 	.word	0x49514553
 8001794:	5f5f7831 	.word	0x5f5f7831
 8001798:	5f5f7832 	.word	0x5f5f7832
 800179c:	5f5f7834 	.word	0x5f5f7834
 80017a0:	5f5f7838 	.word	0x5f5f7838
 80017a4:	5f444e45 	.word	0x5f444e45
	case CMD_GET_CONFIG:
		passMsg = MSG_CNT_CONFIG;
 80017a8:	2305      	movs	r3, #5
 80017aa:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <parseCounterCmd+0x5e0>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	1db9      	adds	r1, r7, #6
 80017b2:	2300      	movs	r3, #0
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	f013 fcbc 	bl	8015134 <xQueueGenericSend>
		break;
 80017bc:	bf00      	nop
	}	

	cmdIn = (error > 0) ? error : CMD_END;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <parseCounterCmd+0x5d0>
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	e000      	b.n	80017ca <parseCounterCmd+0x5d2>
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <parseCounterCmd+0x5e4>)
 80017ca:	60bb      	str	r3, [r7, #8]
	return cmdIn;
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000455c 	.word	0x2000455c
 80017dc:	5f444e45 	.word	0x5f444e45

080017e0 <parseScopeCmd>:
 * @brief  Scope command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_SCOPE
command parseScopeCmd(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 80017e6:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <parseScopeCmd+0x294>)
 80017e8:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 80017ee:	f001 f8eb 	bl	80029c8 <giveNextCmd>
 80017f2:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4aa0      	ldr	r2, [pc, #640]	; (8001a78 <parseScopeCmd+0x298>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f000 80f9 	beq.w	80019f0 <parseScopeCmd+0x210>
 80017fe:	4a9e      	ldr	r2, [pc, #632]	; (8001a78 <parseScopeCmd+0x298>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d827      	bhi.n	8001854 <parseScopeCmd+0x74>
 8001804:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <parseScopeCmd+0x29c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f000 808e 	beq.w	8001928 <parseScopeCmd+0x148>
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <parseScopeCmd+0x29c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d80c      	bhi.n	800182c <parseScopeCmd+0x4c>
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <parseScopeCmd+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	f000 83ca 	beq.w	8001fae <parseScopeCmd+0x7ce>
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <parseScopeCmd+0x2a4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f000 819b 	beq.w	8001b58 <parseScopeCmd+0x378>
 8001822:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <parseScopeCmd+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	f000 83b7 	beq.w	8001f98 <parseScopeCmd+0x7b8>
 800182a:	e3cb      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800182c:	4a97      	ldr	r2, [pc, #604]	; (8001a8c <parseScopeCmd+0x2ac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f000 8187 	beq.w	8001b42 <parseScopeCmd+0x362>
 8001834:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <parseScopeCmd+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d804      	bhi.n	8001844 <parseScopeCmd+0x64>
 800183a:	4a95      	ldr	r2, [pc, #596]	; (8001a90 <parseScopeCmd+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	f000 8175 	beq.w	8001b2c <parseScopeCmd+0x34c>
 8001842:	e3bf      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 8001844:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <parseScopeCmd+0x2b4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d034      	beq.n	80018b4 <parseScopeCmd+0xd4>
 800184a:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <parseScopeCmd+0x2b8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	f000 82fd 	beq.w	8001e4c <parseScopeCmd+0x66c>
 8001852:	e3b7      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 8001854:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <parseScopeCmd+0x2bc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 81c0 	beq.w	8001bdc <parseScopeCmd+0x3fc>
 800185c:	4a8f      	ldr	r2, [pc, #572]	; (8001a9c <parseScopeCmd+0x2bc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d813      	bhi.n	800188a <parseScopeCmd+0xaa>
 8001862:	4a8f      	ldr	r2, [pc, #572]	; (8001aa0 <parseScopeCmd+0x2c0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f000 82c5 	beq.w	8001df4 <parseScopeCmd+0x614>
 800186a:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <parseScopeCmd+0x2c0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d804      	bhi.n	800187a <parseScopeCmd+0x9a>
 8001870:	4a8c      	ldr	r2, [pc, #560]	; (8001aa4 <parseScopeCmd+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	f000 8138 	beq.w	8001ae8 <parseScopeCmd+0x308>
 8001878:	e3a4      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800187a:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <parseScopeCmd+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d075      	beq.n	800196c <parseScopeCmd+0x18c>
 8001880:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <parseScopeCmd+0x2cc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8382 	beq.w	8001f8c <parseScopeCmd+0x7ac>
 8001888:	e39c      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800188a:	4a89      	ldr	r2, [pc, #548]	; (8001ab0 <parseScopeCmd+0x2d0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f000 837a 	beq.w	8001f86 <parseScopeCmd+0x7a6>
 8001892:	4a87      	ldr	r2, [pc, #540]	; (8001ab0 <parseScopeCmd+0x2d0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d804      	bhi.n	80018a2 <parseScopeCmd+0xc2>
 8001898:	4a86      	ldr	r2, [pc, #536]	; (8001ab4 <parseScopeCmd+0x2d4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 82c0 	beq.w	8001e20 <parseScopeCmd+0x640>
 80018a0:	e390      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 80018a2:	4a85      	ldr	r2, [pc, #532]	; (8001ab8 <parseScopeCmd+0x2d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f000 8374 	beq.w	8001f92 <parseScopeCmd+0x7b2>
 80018aa:	4a84      	ldr	r2, [pc, #528]	; (8001abc <parseScopeCmd+0x2dc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f000 838e 	beq.w	8001fce <parseScopeCmd+0x7ee>
 80018b2:	e387      	b.n	8001fc4 <parseScopeCmd+0x7e4>
	case CMD_SCOPE_TRIG_MODE://set trigger mode
		cmdIn = giveNextCmd();
 80018b4:	f001 f888 	bl	80029c8 <giveNextCmd>
 80018b8:	6078      	str	r0, [r7, #4]
		if(isScopeTrigMode(cmdIn)){
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00b      	beq.n	80018da <parseScopeCmd+0xfa>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <parseScopeCmd+0xfa>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <parseScopeCmd+0xfa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a7d      	ldr	r2, [pc, #500]	; (8001acc <parseScopeCmd+0x2ec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11f      	bne.n	800191a <parseScopeCmd+0x13a>
			if(cmdIn == CMD_MODE_NORMAL){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a78      	ldr	r2, [pc, #480]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d103      	bne.n	80018ea <parseScopeCmd+0x10a>
				scopeSetTriggerMode(TRIG_NORMAL);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f004 fba2 	bl	800602c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018e8:	e01c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d103      	bne.n	80018fa <parseScopeCmd+0x11a>
				scopeSetTriggerMode(TRIG_AUTO);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f004 fb9a 	bl	800602c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018f8:	e014      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO_FAST){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d103      	bne.n	800190a <parseScopeCmd+0x12a>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 8001902:	2002      	movs	r0, #2
 8001904:	f004 fb92 	bl	800602c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001908:	e00c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_SINGLE){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a6f      	ldr	r2, [pc, #444]	; (8001acc <parseScopeCmd+0x2ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <parseScopeCmd+0x144>
				scopeSetTriggerMode(TRIG_SINGLE);
 8001912:	2003      	movs	r0, #3
 8001914:	f004 fb8a 	bl	800602c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001918:	e004      	b.n	8001924 <parseScopeCmd+0x144>
			}
		}else{
			cmdIn = CMD_ERR;
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <parseScopeCmd+0x294>)
 800191c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800191e:	2336      	movs	r3, #54	; 0x36
 8001920:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001922:	e359      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_MODE_NORMAL){
 8001924:	bf00      	nop
		break;
 8001926:	e357      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_EDGE: //set trigger edge
		cmdIn = giveNextCmd();
 8001928:	f001 f84e 	bl	80029c8 <giveNextCmd>
 800192c:	6078      	str	r0, [r7, #4]
		if(isScopeTrigEdge(cmdIn)){
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <parseScopeCmd+0x15e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <parseScopeCmd+0x2f4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10f      	bne.n	800195e <parseScopeCmd+0x17e>
			if(cmdIn == CMD_EDGE_RISING){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d103      	bne.n	800194e <parseScopeCmd+0x16e>
				scopeSetTriggerEdge(EDGE_RISING);
 8001946:	2000      	movs	r0, #0
 8001948:	f004 fb8c 	bl	8006064 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800194c:	e00c      	b.n	8001968 <parseScopeCmd+0x188>
			}else if(cmdIn == CMD_EDGE_FALLING){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a60      	ldr	r2, [pc, #384]	; (8001ad4 <parseScopeCmd+0x2f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <parseScopeCmd+0x188>
				scopeSetTriggerEdge(EDGE_FALLING);
 8001956:	2001      	movs	r0, #1
 8001958:	f004 fb84 	bl	8006064 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800195c:	e004      	b.n	8001968 <parseScopeCmd+0x188>
			}
		}else{
			cmdIn = CMD_ERR;
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <parseScopeCmd+0x294>)
 8001960:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001962:	2336      	movs	r3, #54	; 0x36
 8001964:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001966:	e337      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_EDGE_RISING){
 8001968:	bf00      	nop
		break;
 800196a:	e335      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 800196c:	f001 f82c 	bl	80029c8 <giveNextCmd>
 8001970:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00b      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <parseScopeCmd+0x2fc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <parseScopeCmd+0x1b2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a56      	ldr	r2, [pc, #344]	; (8001ae0 <parseScopeCmd+0x300>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d003      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <parseScopeCmd+0x304>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d127      	bne.n	80019e2 <parseScopeCmd+0x202>
			if(cmdIn == CMD_CHANNELS_1){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <parseScopeCmd+0x1c6>
				error=scopeSetNumOfChannels(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f004 fcc2 	bl	8006324 <scopeSetNumOfChannels>
 80019a0:	4603      	mov	r3, r0
 80019a2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019a4:	e022      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_2){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <parseScopeCmd+0x2fc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d105      	bne.n	80019ba <parseScopeCmd+0x1da>
				error=scopeSetNumOfChannels(2);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f004 fcb8 	bl	8006324 <scopeSetNumOfChannels>
 80019b4:	4603      	mov	r3, r0
 80019b6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019b8:	e018      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_3){
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <parseScopeCmd+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d105      	bne.n	80019ce <parseScopeCmd+0x1ee>
				error=scopeSetNumOfChannels(3);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f004 fcae 	bl	8006324 <scopeSetNumOfChannels>
 80019c8:	4603      	mov	r3, r0
 80019ca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019cc:	e00e      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_4){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <parseScopeCmd+0x304>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <parseScopeCmd+0x20c>
				error=scopeSetNumOfChannels(4);
 80019d6:	2004      	movs	r0, #4
 80019d8:	f004 fca4 	bl	8006324 <scopeSetNumOfChannels>
 80019dc:	4603      	mov	r3, r0
 80019de:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019e0:	e004      	b.n	80019ec <parseScopeCmd+0x20c>
			}
		}else{
			cmdIn = CMD_ERR;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <parseScopeCmd+0x294>)
 80019e4:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80019e6:	2336      	movs	r3, #54	; 0x36
 80019e8:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80019ea:	e2f5      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 80019ec:	bf00      	nop
		break;
 80019ee:	e2f3      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_CHANNEL: //set trigger channel
		cmdIn = giveNextCmd();
 80019f0:	f000 ffea 	bl	80029c8 <giveNextCmd>
 80019f4:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <parseScopeCmd+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00b      	beq.n	8001a16 <parseScopeCmd+0x236>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d127      	bne.n	8001a66 <parseScopeCmd+0x286>
			if(cmdIn == CMD_CHANNELS_1){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d105      	bne.n	8001a2a <parseScopeCmd+0x24a>
				error=scopeSetTrigChannel(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f004 fd3c 	bl	800649c <scopeSetTrigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a28:	e022      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d105      	bne.n	8001a3e <parseScopeCmd+0x25e>
				error=scopeSetTrigChannel(2);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f004 fd32 	bl	800649c <scopeSetTrigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a3c:	e018      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <parseScopeCmd+0x272>
				error=scopeSetTrigChannel(3);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f004 fd28 	bl	800649c <scopeSetTrigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a50:	e00e      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_4){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10a      	bne.n	8001a70 <parseScopeCmd+0x290>
				error=scopeSetTrigChannel(4);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f004 fd1e 	bl	800649c <scopeSetTrigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a64:	e004      	b.n	8001a70 <parseScopeCmd+0x290>
			}
		}else{
			cmdIn = CMD_ERR;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <parseScopeCmd+0x294>)
 8001a68:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001a6a:	2336      	movs	r3, #54	; 0x36
 8001a6c:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001a6e:	e2b3      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 8001a70:	bf00      	nop
		break;
 8001a72:	e2b1      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001a74:	5f525245 	.word	0x5f525245
 8001a78:	48435254 	.word	0x48435254
 8001a7c:	45474445 	.word	0x45474445
 8001a80:	3f504e49 	.word	0x3f504e49
 8001a84:	41544144 	.word	0x41544144
 8001a88:	3f474643 	.word	0x3f474643
 8001a8c:	46455241 	.word	0x46455241
 8001a90:	46454441 	.word	0x46454441
 8001a94:	47495254 	.word	0x47495254
 8001a98:	474e454c 	.word	0x474e454c
 8001a9c:	51455246 	.word	0x51455246
 8001aa0:	4c56454c 	.word	0x4c56454c
 8001aa4:	48435f41 	.word	0x48435f41
 8001aa8:	4e414843 	.word	0x4e414843
 8001aac:	504f5453 	.word	0x504f5453
 8001ab0:	54525453 	.word	0x54525453
 8001ab4:	54455250 	.word	0x54455250
 8001ab8:	5458454e 	.word	0x5458454e
 8001abc:	5f444e45 	.word	0x5f444e45
 8001ac0:	4d524f4e 	.word	0x4d524f4e
 8001ac4:	4f545541 	.word	0x4f545541
 8001ac8:	5f415f46 	.word	0x5f415f46
 8001acc:	474e4953 	.word	0x474e4953
 8001ad0:	45534952 	.word	0x45534952
 8001ad4:	4c4c4146 	.word	0x4c4c4146
 8001ad8:	5f484331 	.word	0x5f484331
 8001adc:	5f484332 	.word	0x5f484332
 8001ae0:	5f484333 	.word	0x5f484333
 8001ae4:	5f484334 	.word	0x5f484334

	case CMD_SCOPE_ADC_CHANNEL_SET: //set actual ADC channel
		cmdIn = giveNextCmd();
 8001ae8:	f000 ff6e 	bl	80029c8 <giveNextCmd>
 8001aec:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4aa5      	ldr	r2, [pc, #660]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d014      	beq.n	8001b20 <parseScopeCmd+0x340>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4aa4      	ldr	r2, [pc, #656]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d010      	beq.n	8001b20 <parseScopeCmd+0x340>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fd04 	bl	8006518 <scopeSetADCInputChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
			if(error!=0){
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <parseScopeCmd+0x34a>
				cmdIn = CMD_ERR;
 8001b1a:	4b9c      	ldr	r3, [pc, #624]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b1c:	607b      	str	r3, [r7, #4]
			if(error!=0){
 8001b1e:	e004      	b.n	8001b2a <parseScopeCmd+0x34a>
			}
		}else{
			cmdIn = CMD_ERR;
 8001b20:	4b9a      	ldr	r3, [pc, #616]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b22:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001b24:	2336      	movs	r3, #54	; 0x36
 8001b26:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001b28:	e256      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001b2a:	e255      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_ADC_CHANNEL_SET_DEFAULT: //set actual ADC channel for default
		error=scopeSetADCInputChannelDefault();
 8001b2c:	f004 fd40 	bl	80065b0 <scopeSetADCInputChannelDefault>
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 824b 	beq.w	8001fd2 <parseScopeCmd+0x7f2>
			cmdIn = CMD_ERR;
 8001b3c:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b3e:	607b      	str	r3, [r7, #4]
		}

		break;
 8001b40:	e247      	b.n	8001fd2 <parseScopeCmd+0x7f2>

	case CMD_SCOPE_ADC_CHANNEL_SET_VREF: //set actual ADC channel for Vref
		error=scopeSetADCInputChannelVref();
 8001b42:	f004 fd81 	bl	8006648 <scopeSetADCInputChannelVref>
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8242 	beq.w	8001fd6 <parseScopeCmd+0x7f6>
			cmdIn = CMD_ERR;
 8001b52:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b54:	607b      	str	r3, [r7, #4]
		}
		break;
 8001b56:	e23e      	b.n	8001fd6 <parseScopeCmd+0x7f6>


	case CMD_SCOPE_DATA_DEPTH: //set data bit depth
		cmdIn = giveNextCmd();
 8001b58:	f000 ff36 	bl	80029c8 <giveNextCmd>
 8001b5c:	6078      	str	r0, [r7, #4]
		if(isScopeDataDepth(cmdIn)){
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a8b      	ldr	r2, [pc, #556]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00b      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a89      	ldr	r2, [pc, #548]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d003      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d127      	bne.n	8001bce <parseScopeCmd+0x3ee>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <parseScopeCmd+0x3b2>
				error=scopeSetDataDepth(12);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f004 fa96 	bl	80060b8 <scopeSetDataDepth>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b90:	e022      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_10B){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d105      	bne.n	8001ba6 <parseScopeCmd+0x3c6>
				error=scopeSetDataDepth(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f004 fa8c 	bl	80060b8 <scopeSetDataDepth>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001ba4:	e018      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_8B){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a7b      	ldr	r2, [pc, #492]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d105      	bne.n	8001bba <parseScopeCmd+0x3da>
				error=scopeSetDataDepth(8);
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f004 fa82 	bl	80060b8 <scopeSetDataDepth>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bb8:	e00e      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_6B){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <parseScopeCmd+0x3f8>
				error=scopeSetDataDepth(6);
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f004 fa78 	bl	80060b8 <scopeSetDataDepth>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bcc:	e004      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}
		}else{
			cmdIn = CMD_ERR;
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001bd0:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001bd2:	2336      	movs	r3, #54	; 0x36
 8001bd4:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001bd6:	e1ff      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bd8:	bf00      	nop
		break;
 8001bda:	e1fd      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_SAMPLING_FREQ: //set sampling frequency
		cmdIn = giveNextCmd();
 8001bdc:	f000 fef4 	bl	80029c8 <giveNextCmd>
 8001be0:	6078      	str	r0, [r7, #4]

		if(isScopeFreq(cmdIn)){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d034      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a6d      	ldr	r2, [pc, #436]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d030      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a6c      	ldr	r2, [pc, #432]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	; (8001dac <parseScopeCmd+0x5cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d028      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d024      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d020      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d014      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d010      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a64      	ldr	r2, [pc, #400]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d008      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <parseScopeCmd+0x5f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	f040 8093 	bne.w	8001d7a <parseScopeCmd+0x59a>
			if(cmdIn == CMD_FREQ_1K){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d106      	bne.n	8001c6a <parseScopeCmd+0x48a>
				error=scopeSetSamplingFreq(1000);
 8001c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c60:	f004 fa9c 	bl	800619c <scopeSetSamplingFreq>
 8001c64:	4603      	mov	r3, r0
 8001c66:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c68:	e08c      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2K){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d106      	bne.n	8001c80 <parseScopeCmd+0x4a0>
				error=scopeSetSamplingFreq(2000);
 8001c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c76:	f004 fa91 	bl	800619c <scopeSetSamplingFreq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c7e:	e081      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5K){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d106      	bne.n	8001c96 <parseScopeCmd+0x4b6>
				error=scopeSetSamplingFreq(5000);
 8001c88:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c8c:	f004 fa86 	bl	800619c <scopeSetSamplingFreq>
 8001c90:	4603      	mov	r3, r0
 8001c92:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c94:	e076      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10K){
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a44      	ldr	r2, [pc, #272]	; (8001dac <parseScopeCmd+0x5cc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d106      	bne.n	8001cac <parseScopeCmd+0x4cc>
				//error=scopeSetADCInputChannelDefault(); //workaround - PC app don't return ADc channels from Vref back to pins when leaving the Voltmeter mode
				error=scopeSetSamplingFreq(10000);
 8001c9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ca2:	f004 fa7b 	bl	800619c <scopeSetSamplingFreq>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001caa:	e06b      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_20K){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d106      	bne.n	8001cc2 <parseScopeCmd+0x4e2>
				error=scopeSetSamplingFreq(20000);
 8001cb4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001cb8:	f004 fa70 	bl	800619c <scopeSetSamplingFreq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cc0:	e060      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_50K){
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d106      	bne.n	8001cd8 <parseScopeCmd+0x4f8>
				error=scopeSetSamplingFreq(50000);
 8001cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cce:	f004 fa65 	bl	800619c <scopeSetSamplingFreq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cd6:	e055      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_100K){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d105      	bne.n	8001cec <parseScopeCmd+0x50c>
				error=scopeSetSamplingFreq(100000);
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <parseScopeCmd+0x5f8>)
 8001ce2:	f004 fa5b 	bl	800619c <scopeSetSamplingFreq>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cea:	e04b      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_200K){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d105      	bne.n	8001d00 <parseScopeCmd+0x520>
				error=scopeSetSamplingFreq(200000);
 8001cf4:	4839      	ldr	r0, [pc, #228]	; (8001ddc <parseScopeCmd+0x5fc>)
 8001cf6:	f004 fa51 	bl	800619c <scopeSetSamplingFreq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cfe:	e041      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_500K){
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d105      	bne.n	8001d14 <parseScopeCmd+0x534>
				error=scopeSetSamplingFreq(500000);
 8001d08:	4835      	ldr	r0, [pc, #212]	; (8001de0 <parseScopeCmd+0x600>)
 8001d0a:	f004 fa47 	bl	800619c <scopeSetSamplingFreq>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d12:	e037      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_1M){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d105      	bne.n	8001d28 <parseScopeCmd+0x548>
				error=scopeSetSamplingFreq(1000000);
 8001d1c:	4831      	ldr	r0, [pc, #196]	; (8001de4 <parseScopeCmd+0x604>)
 8001d1e:	f004 fa3d 	bl	800619c <scopeSetSamplingFreq>
 8001d22:	4603      	mov	r3, r0
 8001d24:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d26:	e02d      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2M){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d105      	bne.n	8001d3c <parseScopeCmd+0x55c>
				error=scopeSetSamplingFreq(2000000);
 8001d30:	482d      	ldr	r0, [pc, #180]	; (8001de8 <parseScopeCmd+0x608>)
 8001d32:	f004 fa33 	bl	800619c <scopeSetSamplingFreq>
 8001d36:	4603      	mov	r3, r0
 8001d38:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d3a:	e023      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5M){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <parseScopeCmd+0x570>
				error=scopeSetSamplingFreq(5000000);
 8001d44:	4829      	ldr	r0, [pc, #164]	; (8001dec <parseScopeCmd+0x60c>)
 8001d46:	f004 fa29 	bl	800619c <scopeSetSamplingFreq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d4e:	e019      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10M){
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <parseScopeCmd+0x5f0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d105      	bne.n	8001d64 <parseScopeCmd+0x584>
				error=scopeSetSamplingFreq(10000000);
 8001d58:	4825      	ldr	r0, [pc, #148]	; (8001df0 <parseScopeCmd+0x610>)
 8001d5a:	f004 fa1f 	bl	800619c <scopeSetSamplingFreq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d62:	e00f      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_MAX){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10b      	bne.n	8001d84 <parseScopeCmd+0x5a4>
				error=scopeSetSamplingFreq(UINT32_MAX);
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f004 fa14 	bl	800619c <scopeSetSamplingFreq>
 8001d74:	4603      	mov	r3, r0
 8001d76:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d78:	e004      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}

		}else{
			cmdIn = CMD_ERR;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001d7c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001d7e:	2336      	movs	r3, #54	; 0x36
 8001d80:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001d82:	e129      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_FREQ_1K){
 8001d84:	bf00      	nop
		break;
 8001d86:	e127      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001d88:	5f444e45 	.word	0x5f444e45
 8001d8c:	5f525245 	.word	0x5f525245
 8001d90:	5f423231 	.word	0x5f423231
 8001d94:	5f423031 	.word	0x5f423031
 8001d98:	5f5f4238 	.word	0x5f5f4238
 8001d9c:	5f5f4236 	.word	0x5f5f4236
 8001da0:	5f5f4b31 	.word	0x5f5f4b31
 8001da4:	5f5f4b32 	.word	0x5f5f4b32
 8001da8:	5f5f4b35 	.word	0x5f5f4b35
 8001dac:	5f4b3031 	.word	0x5f4b3031
 8001db0:	5f4b3032 	.word	0x5f4b3032
 8001db4:	5f4b3035 	.word	0x5f4b3035
 8001db8:	4b303031 	.word	0x4b303031
 8001dbc:	4b303032 	.word	0x4b303032
 8001dc0:	4b303035 	.word	0x4b303035
 8001dc4:	5f5f4d31 	.word	0x5f5f4d31
 8001dc8:	5f5f4d32 	.word	0x5f5f4d32
 8001dcc:	5f5f4d35 	.word	0x5f5f4d35
 8001dd0:	5f4d3031 	.word	0x5f4d3031
 8001dd4:	5f58414d 	.word	0x5f58414d
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	00030d40 	.word	0x00030d40
 8001de0:	0007a120 	.word	0x0007a120
 8001de4:	000f4240 	.word	0x000f4240
 8001de8:	001e8480 	.word	0x001e8480
 8001dec:	004c4b40 	.word	0x004c4b40
 8001df0:	00989680 	.word	0x00989680

	case CMD_SCOPE_TRIG_LEVEL: //set trigger level
		cmdIn = giveNextCmd();
 8001df4:	f000 fde8 	bl	80029c8 <giveNextCmd>
 8001df8:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a7d      	ldr	r2, [pc, #500]	; (8001ff4 <parseScopeCmd+0x814>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <parseScopeCmd+0x636>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d005      	beq.n	8001e16 <parseScopeCmd+0x636>
			scopeSetTrigLevel((uint16_t)cmdIn);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fa1a 	bl	8006248 <scopeSetTrigLevel>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e14:	e0e0      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e18:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e1a:	2336      	movs	r3, #54	; 0x36
 8001e1c:	70fb      	strb	r3, [r7, #3]
		break;
 8001e1e:	e0db      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_PRETRIGGER: //set prettriger
		cmdIn = giveNextCmd();
 8001e20:	f000 fdd2 	bl	80029c8 <giveNextCmd>
 8001e24:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <parseScopeCmd+0x814>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <parseScopeCmd+0x662>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d005      	beq.n	8001e42 <parseScopeCmd+0x662>
			scopeSetPretrigger((uint16_t)cmdIn);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fa20 	bl	8006280 <scopeSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e40:	e0ca      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e44:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e46:	2336      	movs	r3, #54	; 0x36
 8001e48:	70fb      	strb	r3, [r7, #3]
		break;
 8001e4a:	e0c5      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_DATA_LENGTH: //set trigger edge
		cmdIn = giveNextCmd();
 8001e4c:	f000 fdbc 	bl	80029c8 <giveNextCmd>
 8001e50:	6078      	str	r0, [r7, #4]
		if(isScopeNumOfSamples(cmdIn)){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <parseScopeCmd+0x81c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d023      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <parseScopeCmd+0x820>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a67      	ldr	r2, [pc, #412]	; (8002004 <parseScopeCmd+0x824>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01b      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a66      	ldr	r2, [pc, #408]	; (8002008 <parseScopeCmd+0x828>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <parseScopeCmd+0x82c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a64      	ldr	r2, [pc, #400]	; (8002010 <parseScopeCmd+0x830>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a63      	ldr	r2, [pc, #396]	; (8002014 <parseScopeCmd+0x834>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <parseScopeCmd+0x838>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <parseScopeCmd+0x83c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <parseScopeCmd+0x840>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d16a      	bne.n	8001f78 <parseScopeCmd+0x798>
			if(cmdIn == CMD_SAMPLES_100){
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <parseScopeCmd+0x81c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d105      	bne.n	8001eb6 <parseScopeCmd+0x6d6>
				error=scopeSetNumOfSamples(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f004 fa04 	bl	80062b8 <scopeSetNumOfSamples>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001eb4:	e065      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_200){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <parseScopeCmd+0x820>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d105      	bne.n	8001eca <parseScopeCmd+0x6ea>
				error=scopeSetNumOfSamples(200);
 8001ebe:	20c8      	movs	r0, #200	; 0xc8
 8001ec0:	f004 f9fa 	bl	80062b8 <scopeSetNumOfSamples>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ec8:	e05b      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_500){
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4d      	ldr	r2, [pc, #308]	; (8002004 <parseScopeCmd+0x824>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <parseScopeCmd+0x700>
				error=scopeSetNumOfSamples(500);
 8001ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed6:	f004 f9ef 	bl	80062b8 <scopeSetNumOfSamples>
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ede:	e050      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_1K){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a49      	ldr	r2, [pc, #292]	; (8002008 <parseScopeCmd+0x828>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d106      	bne.n	8001ef6 <parseScopeCmd+0x716>
				error=scopeSetNumOfSamples(1000);
 8001ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eec:	f004 f9e4 	bl	80062b8 <scopeSetNumOfSamples>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ef4:	e045      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_2K){
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a44      	ldr	r2, [pc, #272]	; (800200c <parseScopeCmd+0x82c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d106      	bne.n	8001f0c <parseScopeCmd+0x72c>
				error=scopeSetNumOfSamples(2000);
 8001efe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f02:	f004 f9d9 	bl	80062b8 <scopeSetNumOfSamples>
 8001f06:	4603      	mov	r3, r0
 8001f08:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f0a:	e03a      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_5K){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <parseScopeCmd+0x830>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d106      	bne.n	8001f22 <parseScopeCmd+0x742>
				error=scopeSetNumOfSamples(5000);
 8001f14:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f18:	f004 f9ce 	bl	80062b8 <scopeSetNumOfSamples>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f20:	e02f      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_10K){
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <parseScopeCmd+0x834>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d106      	bne.n	8001f38 <parseScopeCmd+0x758>
				error=scopeSetNumOfSamples(10000);
 8001f2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f2e:	f004 f9c3 	bl	80062b8 <scopeSetNumOfSamples>
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f36:	e024      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_20K){
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a37      	ldr	r2, [pc, #220]	; (8002018 <parseScopeCmd+0x838>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d106      	bne.n	8001f4e <parseScopeCmd+0x76e>
				error=scopeSetNumOfSamples(20000);
 8001f40:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f44:	f004 f9b8 	bl	80062b8 <scopeSetNumOfSamples>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f4c:	e019      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_50K){
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a32      	ldr	r2, [pc, #200]	; (800201c <parseScopeCmd+0x83c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d106      	bne.n	8001f64 <parseScopeCmd+0x784>
				error=scopeSetNumOfSamples(50000);
 8001f56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f5a:	f004 f9ad 	bl	80062b8 <scopeSetNumOfSamples>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f62:	e00e      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_100K){
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <parseScopeCmd+0x840>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10a      	bne.n	8001f82 <parseScopeCmd+0x7a2>
				error=scopeSetNumOfSamples(100000);
 8001f6c:	482d      	ldr	r0, [pc, #180]	; (8002024 <parseScopeCmd+0x844>)
 8001f6e:	f004 f9a3 	bl	80062b8 <scopeSetNumOfSamples>
 8001f72:	4603      	mov	r3, r0
 8001f74:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f76:	e004      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}
		}else{
			cmdIn = CMD_ERR;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <parseScopeCmd+0x818>)
 8001f7a:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001f7c:	2336      	movs	r3, #54	; 0x36
 8001f7e:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001f80:	e02a      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_SAMPLES_100){
 8001f82:	bf00      	nop
		break;
 8001f84:	e028      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_START: //start sampling
		scopeStart();
 8001f86:	f004 fbe9 	bl	800675c <scopeStart>
		break;
 8001f8a:	e025      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_STOP: //stop sampling
		scopeStop();
 8001f8c:	f004 fbfa 	bl	8006784 <scopeStop>
		break;
 8001f90:	e022      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_NEXT: //restart sampling
		scopeRestart();
 8001f92:	f004 fbcf 	bl	8006734 <scopeRestart>

		break;
 8001f96:	e01f      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_GET_CONFIG:
		passMsg = MSG_SCOPE_CONFIG;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <parseScopeCmd+0x848>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	4639      	mov	r1, r7
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	f013 f8c4 	bl	8015134 <xQueueGenericSend>
		break;
 8001fac:	e014      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_GET_INPUTS:
		passMsg = MSG_SCOPE_INPUTS;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <parseScopeCmd+0x848>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	4639      	mov	r1, r7
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbe:	f013 f8b9 	bl	8015134 <xQueueGenericSend>
		break;
 8001fc2:	e009      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_END:break;
	default:
		error = SCOPE_INVALID_FEATURE;
 8001fc4:	2332      	movs	r3, #50	; 0x32
 8001fc6:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <parseScopeCmd+0x818>)
 8001fca:	607b      	str	r3, [r7, #4]
		break;
 8001fcc:	e004      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_END:break;
 8001fce:	bf00      	nop
 8001fd0:	e002      	b.n	8001fd8 <parseScopeCmd+0x7f8>
		break;
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <parseScopeCmd+0x7f8>
		break;
 8001fd6:	bf00      	nop
	}
	if(error>0){
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <parseScopeCmd+0x804>
		cmdIn=error;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e001      	b.n	8001fe8 <parseScopeCmd+0x808>
	}else{
		cmdIn=CMD_END;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <parseScopeCmd+0x814>)
 8001fe6:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	5f444e45 	.word	0x5f444e45
 8001ff8:	5f525245 	.word	0x5f525245
 8001ffc:	5f303031 	.word	0x5f303031
 8002000:	5f303032 	.word	0x5f303032
 8002004:	5f303035 	.word	0x5f303035
 8002008:	5f5f4b31 	.word	0x5f5f4b31
 800200c:	5f5f4b32 	.word	0x5f5f4b32
 8002010:	5f5f4b35 	.word	0x5f5f4b35
 8002014:	5f4b3031 	.word	0x5f4b3031
 8002018:	5f4b3032 	.word	0x5f4b3032
 800201c:	5f4b3035 	.word	0x5f4b3035
 8002020:	4b303031 	.word	0x4b303031
 8002024:	000186a0 	.word	0x000186a0
 8002028:	2000455c 	.word	0x2000455c

0800202c <parseSyncPwmCmd>:
/**
 * @brief  Synchronized PWM generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSyncPwmCmd(void){
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <parseSyncPwmCmd+0x20c>)
 8002034:	61bb      	str	r3, [r7, #24]
	uint8_t error=0;
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 800203a:	f000 fcc5 	bl	80029c8 <giveNextCmd>
 800203e:	61b8      	str	r0, [r7, #24]
	switch(cmdIn){
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4a7e      	ldr	r2, [pc, #504]	; (800223c <parseSyncPwmCmd+0x210>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d077      	beq.n	8002138 <parseSyncPwmCmd+0x10c>
 8002048:	4a7c      	ldr	r2, [pc, #496]	; (800223c <parseSyncPwmCmd+0x210>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d80b      	bhi.n	8002066 <parseSyncPwmCmd+0x3a>
 800204e:	4a7c      	ldr	r2, [pc, #496]	; (8002240 <parseSyncPwmCmd+0x214>)
 8002050:	4293      	cmp	r3, r2
 8002052:	f000 80ba 	beq.w	80021ca <parseSyncPwmCmd+0x19e>
 8002056:	4a7b      	ldr	r2, [pc, #492]	; (8002244 <parseSyncPwmCmd+0x218>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d017      	beq.n	800208c <parseSyncPwmCmd+0x60>
 800205c:	4a7a      	ldr	r2, [pc, #488]	; (8002248 <parseSyncPwmCmd+0x21c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	f000 80cd 	beq.w	80021fe <parseSyncPwmCmd+0x1d2>
 8002064:	e0d6      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
 8002066:	4a79      	ldr	r2, [pc, #484]	; (800224c <parseSyncPwmCmd+0x220>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d045      	beq.n	80020f8 <parseSyncPwmCmd+0xcc>
 800206c:	4a77      	ldr	r2, [pc, #476]	; (800224c <parseSyncPwmCmd+0x220>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d803      	bhi.n	800207a <parseSyncPwmCmd+0x4e>
 8002072:	4a77      	ldr	r2, [pc, #476]	; (8002250 <parseSyncPwmCmd+0x224>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d073      	beq.n	8002160 <parseSyncPwmCmd+0x134>
 8002078:	e0cc      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
 800207a:	4a76      	ldr	r2, [pc, #472]	; (8002254 <parseSyncPwmCmd+0x228>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f000 8086 	beq.w	800218e <parseSyncPwmCmd+0x162>
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <parseSyncPwmCmd+0x22c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	f000 80ca 	beq.w	800221e <parseSyncPwmCmd+0x1f2>
 800208a:	e0c3      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
	case CMD_SYNC_PWM_COMMAND:
		cmdIn = giveNextCmd();
 800208c:	f000 fc9c 	bl	80029c8 <giveNextCmd>
 8002090:	61b8      	str	r0, [r7, #24]
		if(isSyncPwm(cmdIn)){
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <parseSyncPwmCmd+0x230>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4a70      	ldr	r2, [pc, #448]	; (8002260 <parseSyncPwmCmd+0x234>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4a6f      	ldr	r2, [pc, #444]	; (8002264 <parseSyncPwmCmd+0x238>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <parseSyncPwmCmd+0x23c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11b      	bne.n	80020ea <parseSyncPwmCmd+0xbe>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4a69      	ldr	r2, [pc, #420]	; (800225c <parseSyncPwmCmd+0x230>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <parseSyncPwmCmd+0x94>
				syncPwmSendInit();
 80020ba:	f004 fbcb 	bl	8006854 <syncPwmSendInit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020be:	e019      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_DEINIT){
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4a67      	ldr	r2, [pc, #412]	; (8002260 <parseSyncPwmCmd+0x234>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <parseSyncPwmCmd+0xa2>
				syncPwmSendDeinit();
 80020c8:	f004 fbd8 	bl	800687c <syncPwmSendDeinit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020cc:	e012      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_START){
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4a64      	ldr	r2, [pc, #400]	; (8002264 <parseSyncPwmCmd+0x238>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d102      	bne.n	80020dc <parseSyncPwmCmd+0xb0>
				syncPwmSendStart();
 80020d6:	f004 fbe5 	bl	80068a4 <syncPwmSendStart>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020da:	e00b      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_STOP){
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4a62      	ldr	r2, [pc, #392]	; (8002268 <parseSyncPwmCmd+0x23c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d107      	bne.n	80020f4 <parseSyncPwmCmd+0xc8>
				syncPwmSendStop();
 80020e4:	f004 fbf2 	bl	80068cc <syncPwmSendStop>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020e8:	e004      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}
		}else{
			cmdIn = CMD_ERR;
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80020ec:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80020ee:	2397      	movs	r3, #151	; 0x97
 80020f0:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80020f2:	e095      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020f4:	bf00      	nop
		break;
 80020f6:	e093      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_STEP:
		cmdIn = giveNextCmd();
 80020f8:	f000 fc66 	bl	80029c8 <giveNextCmd>
 80020fc:	61b8      	str	r0, [r7, #24]
		if(isSyncPwmStepMode(cmdIn)){
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4a5a      	ldr	r2, [pc, #360]	; (800226c <parseSyncPwmCmd+0x240>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <parseSyncPwmCmd+0xe2>
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4a59      	ldr	r2, [pc, #356]	; (8002270 <parseSyncPwmCmd+0x244>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <parseSyncPwmCmd+0xfe>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <parseSyncPwmCmd+0x240>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d102      	bne.n	800211c <parseSyncPwmCmd+0xf0>
				syncPwmSetStepMode();
 8002116:	f004 fc63 	bl	80069e0 <syncPwmSetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800211a:	e00b      	b.n	8002134 <parseSyncPwmCmd+0x108>
			}else if(cmdIn == CMD_SYNC_PWM_STEP_DISABLE){
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <parseSyncPwmCmd+0x244>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d107      	bne.n	8002134 <parseSyncPwmCmd+0x108>
				syncPwmResetStepMode();
 8002124:	f004 fc62 	bl	80069ec <syncPwmResetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002128:	e004      	b.n	8002134 <parseSyncPwmCmd+0x108>
			}	
		}else{
			cmdIn = CMD_ERR;
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800212c:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 800212e:	2397      	movs	r3, #151	; 0x97
 8002130:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8002132:	e075      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002134:	bf00      	nop
		break;
 8002136:	e073      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_NUM:
		cmdIn = giveNextCmd();
 8002138:	f000 fc46 	bl	80029c8 <giveNextCmd>
 800213c:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4a45      	ldr	r2, [pc, #276]	; (8002258 <parseSyncPwmCmd+0x22c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <parseSyncPwmCmd+0x12e>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d005      	beq.n	800215a <parseSyncPwmCmd+0x12e>
			syncPwmChannelNumber((uint8_t)cmdIn);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fbe6 	bl	8006924 <syncPwmChannelNumber>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002158:	e062      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800215c:	61bb      	str	r3, [r7, #24]
		break;
 800215e:	e05f      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_CONFIG:
		cmdIn = giveNextCmd();
 8002160:	f000 fc32 	bl	80029c8 <giveNextCmd>
 8002164:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <parseSyncPwmCmd+0x22c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00c      	beq.n	8002188 <parseSyncPwmCmd+0x15c>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <parseSyncPwmCmd+0x20c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d008      	beq.n	8002188 <parseSyncPwmCmd+0x15c>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	b292      	uxth	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fbe1 	bl	8006948 <syncPwmChannelConfig>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002186:	e04b      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800218a:	61bb      	str	r3, [r7, #24]
		break;
 800218c:	e048      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_FREQ:
		cmdIn = giveNextCmd();
 800218e:	f000 fc1b 	bl	80029c8 <giveNextCmd>
 8002192:	61b8      	str	r0, [r7, #24]
		secondHalfOfDouble = commBufferReadUInt32();
 8002194:	f001 f932 	bl	80033fc <commBufferReadUInt32>
 8002198:	6178      	str	r0, [r7, #20]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f000 fc63 	bl	8002a68 <makeDoubleFromTwo32bit>
 80021a2:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <parseSyncPwmCmd+0x22c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d008      	beq.n	80021c0 <parseSyncPwmCmd+0x194>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <parseSyncPwmCmd+0x194>
			syncPwmSetFreq(freq);
 80021b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80021ba:	f004 fbd7 	bl	800696c <syncPwmSetFreq>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 80021be:	e02f      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021c2:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80021c4:	2397      	movs	r3, #151	; 0x97
 80021c6:	77fb      	strb	r3, [r7, #31]
		break;
 80021c8:	e02a      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_STATE:
		cmdIn = giveNextCmd();
 80021ca:	f000 fbfd 	bl	80029c8 <giveNextCmd>
 80021ce:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <parseSyncPwmCmd+0x22c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <parseSyncPwmCmd+0x1c8>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d009      	beq.n	80021f4 <parseSyncPwmCmd+0x1c8>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fbe5 	bl	80069bc <syncPwmSetChannelState>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 80021f2:	e015      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021f6:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80021f8:	2397      	movs	r3, #151	; 0x97
 80021fa:	77fb      	strb	r3, [r7, #31]
		break;
 80021fc:	e010      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_GET_CONFIG:
		passMsg = MSG_SYNCPWM_CONFIG;
 80021fe:	232c      	movs	r3, #44	; 0x2c
 8002200:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <parseSyncPwmCmd+0x248>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	1db9      	adds	r1, r7, #6
 8002208:	2300      	movs	r3, #0
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	f012 ff91 	bl	8015134 <xQueueGenericSend>
		break;
 8002212:	e005      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_END:
		break;
	default:
		error = SYNC_PWM_INVALID_FEATURE;
 8002214:	2397      	movs	r3, #151	; 0x97
 8002216:	77fb      	strb	r3, [r7, #31]
		cmdIn = CMD_ERR;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800221a:	61bb      	str	r3, [r7, #24]
		break;
 800221c:	e000      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
		break;
 800221e:	bf00      	nop
	}

	cmdIn = (error > 0) ? error : CMD_END;	
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <parseSyncPwmCmd+0x1fe>
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	e000      	b.n	800222c <parseSyncPwmCmd+0x200>
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <parseSyncPwmCmd+0x22c>)
 800222c:	61bb      	str	r3, [r7, #24]
	return cmdIn;			
 800222e:	69bb      	ldr	r3, [r7, #24]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	5f525245 	.word	0x5f525245
 800223c:	4d554e43 	.word	0x4d554e43
 8002240:	41545353 	.word	0x41545353
 8002244:	4d4f4353 	.word	0x4d4f4353
 8002248:	3f474643 	.word	0x3f474643
 800224c:	50455453 	.word	0x50455453
 8002250:	4e4f4343 	.word	0x4e4f4343
 8002254:	51524653 	.word	0x51524653
 8002258:	5f444e45 	.word	0x5f444e45
 800225c:	54494e49 	.word	0x54494e49
 8002260:	494e4944 	.word	0x494e4944
 8002264:	54525453 	.word	0x54525453
 8002268:	504f5453 	.word	0x504f5453
 800226c:	45455453 	.word	0x45455453
 8002270:	44455453 	.word	0x44455453
 8002274:	2000455c 	.word	0x2000455c

08002278 <parseLogAnlysCmd>:
/**
 * @brief  Logic Analyzer command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseLogAnlysCmd(void){
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800227e:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002280:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8002282:	2300      	movs	r3, #0
 8002284:	76fb      	strb	r3, [r7, #27]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 8002286:	f000 fb9f 	bl	80029c8 <giveNextCmd>
 800228a:	61f8      	str	r0, [r7, #28]
	while(logAnlys.state == LOGA_DATA_SENDING);
 800228c:	bf00      	nop
 800228e:	4b9e      	ldr	r3, [pc, #632]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002290:	7c9b      	ldrb	r3, [r3, #18]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d0fa      	beq.n	800228e <parseLogAnlysCmd+0x16>
	/* In order to change any parameter, sampling has to be stopped. */
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 8002298:	4b9b      	ldr	r3, [pc, #620]	; (8002508 <parseLogAnlysCmd+0x290>)
 800229a:	7c9b      	ldrb	r3, [r3, #18]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <parseLogAnlysCmd+0x36>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4a99      	ldr	r2, [pc, #612]	; (800250c <parseLogAnlysCmd+0x294>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d001      	beq.n	80022ae <parseLogAnlysCmd+0x36>
		logAnlysStop(); 
 80022aa:	f003 f8cf 	bl	800544c <logAnlysStop>
	}

	switch (cmdIn)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4a97      	ldr	r2, [pc, #604]	; (8002510 <parseLogAnlysCmd+0x298>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d033      	beq.n	800231e <parseLogAnlysCmd+0xa6>
 80022b6:	4a96      	ldr	r2, [pc, #600]	; (8002510 <parseLogAnlysCmd+0x298>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d816      	bhi.n	80022ea <parseLogAnlysCmd+0x72>
 80022bc:	4a95      	ldr	r2, [pc, #596]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f000 80cd 	beq.w	800245e <parseLogAnlysCmd+0x1e6>
 80022c4:	4a93      	ldr	r2, [pc, #588]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d808      	bhi.n	80022dc <parseLogAnlysCmd+0x64>
 80022ca:	4a93      	ldr	r2, [pc, #588]	; (8002518 <parseLogAnlysCmd+0x2a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f000 80e4 	beq.w	800249a <parseLogAnlysCmd+0x222>
 80022d2:	4a92      	ldr	r2, [pc, #584]	; (800251c <parseLogAnlysCmd+0x2a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f000 80ae 	beq.w	8002436 <parseLogAnlysCmd+0x1be>
 80022da:	e0e9      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 80022dc:	4a90      	ldr	r2, [pc, #576]	; (8002520 <parseLogAnlysCmd+0x2a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d058      	beq.n	8002394 <parseLogAnlysCmd+0x11c>
 80022e2:	4a90      	ldr	r2, [pc, #576]	; (8002524 <parseLogAnlysCmd+0x2ac>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d07f      	beq.n	80023e8 <parseLogAnlysCmd+0x170>
 80022e8:	e0e2      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 80022ea:	4a8f      	ldr	r2, [pc, #572]	; (8002528 <parseLogAnlysCmd+0x2b0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d01f      	beq.n	8002330 <parseLogAnlysCmd+0xb8>
 80022f0:	4a8d      	ldr	r2, [pc, #564]	; (8002528 <parseLogAnlysCmd+0x2b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d806      	bhi.n	8002304 <parseLogAnlysCmd+0x8c>
 80022f6:	4a8d      	ldr	r2, [pc, #564]	; (800252c <parseLogAnlysCmd+0x2b4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05f      	beq.n	80023bc <parseLogAnlysCmd+0x144>
 80022fc:	4a83      	ldr	r2, [pc, #524]	; (800250c <parseLogAnlysCmd+0x294>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <parseLogAnlysCmd+0xb2>
 8002302:	e0d5      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 8002304:	4a8a      	ldr	r2, [pc, #552]	; (8002530 <parseLogAnlysCmd+0x2b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00c      	beq.n	8002324 <parseLogAnlysCmd+0xac>
 800230a:	4a8a      	ldr	r2, [pc, #552]	; (8002534 <parseLogAnlysCmd+0x2bc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d023      	beq.n	8002358 <parseLogAnlysCmd+0xe0>
 8002310:	4a89      	ldr	r2, [pc, #548]	; (8002538 <parseLogAnlysCmd+0x2c0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80cc 	bne.w	80024b0 <parseLogAnlysCmd+0x238>
	{
	case CMD_LOG_ANLYS_INIT:
		logAnlysSendInit();
 8002318:	f002 fffc 	bl	8005314 <logAnlysSendInit>
		break;
 800231c:	e0ce      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_DEINIT:
		logAnlysSendDeinit();
 800231e:	f003 f80d 	bl	800533c <logAnlysSendDeinit>
		break;
 8002322:	e0cb      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_START:
		logAnlysSendStart();
 8002324:	f003 f81e 	bl	8005364 <logAnlysSendStart>
		break;
 8002328:	e0c8      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_STOP:
		logAnlysSendStop();
 800232a:	f003 f82f 	bl	800538c <logAnlysSendStop>
		break;
 800232e:	e0c5      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_PRETRIG:
		cmdIn = giveNextCmd();
 8002330:	f000 fb4a 	bl	80029c8 <giveNextCmd>
 8002334:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4a80      	ldr	r2, [pc, #512]	; (800253c <parseLogAnlysCmd+0x2c4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <parseLogAnlysCmd+0xd6>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4a70      	ldr	r2, [pc, #448]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <parseLogAnlysCmd+0xd6>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8002346:	69f8      	ldr	r0, [r7, #28]
 8002348:	f003 f8b4 	bl	80054b4 <logAnlysSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 800234c:	e0b6      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002350:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002352:	2398      	movs	r3, #152	; 0x98
 8002354:	76fb      	strb	r3, [r7, #27]
		break;
 8002356:	e0b1      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_POSTTRIG:
		cmdIn = giveNextCmd();
 8002358:	f000 fb36 	bl	80029c8 <giveNextCmd>
 800235c:	61f8      	str	r0, [r7, #28]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 800235e:	f001 f84d 	bl	80033fc <commBufferReadUInt32>
 8002362:	6178      	str	r0, [r7, #20]
		double postTrigTime = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8002364:	69f9      	ldr	r1, [r7, #28]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f000 fb7e 	bl	8002a68 <makeDoubleFromTwo32bit>
 800236c:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4a72      	ldr	r2, [pc, #456]	; (800253c <parseLogAnlysCmd+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <parseLogAnlysCmd+0x112>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4a62      	ldr	r2, [pc, #392]	; (8002504 <parseLogAnlysCmd+0x28c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <parseLogAnlysCmd+0x112>
			logAnlysSetPosttrigger(postTrigTime);
 8002380:	ed97 0b02 	vldr	d0, [r7, #8]
 8002384:	f003 f8b2 	bl	80054ec <logAnlysSetPosttrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002388:	e098      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <parseLogAnlysCmd+0x28c>)
 800238c:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 800238e:	2398      	movs	r3, #152	; 0x98
 8002390:	76fb      	strb	r3, [r7, #27]
		break;
 8002392:	e093      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLING_FREQ:
		cmdIn = giveNextCmd();
 8002394:	f000 fb18 	bl	80029c8 <giveNextCmd>
 8002398:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4a67      	ldr	r2, [pc, #412]	; (800253c <parseLogAnlysCmd+0x2c4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <parseLogAnlysCmd+0x13a>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <parseLogAnlysCmd+0x13a>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 80023aa:	69f8      	ldr	r0, [r7, #28]
 80023ac:	f003 f85a 	bl	8005464 <logAnlysSetSamplingFreq>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023b0:	e084      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023b4:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023b6:	2398      	movs	r3, #152	; 0x98
 80023b8:	76fb      	strb	r3, [r7, #27]
		break;
 80023ba:	e07f      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLES_NUM:		// data length
		cmdIn = giveNextCmd();
 80023bc:	f000 fb04 	bl	80029c8 <giveNextCmd>
 80023c0:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	; (800253c <parseLogAnlysCmd+0x2c4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <parseLogAnlysCmd+0x166>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d005      	beq.n	80023de <parseLogAnlysCmd+0x166>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 f850 	bl	800547c <logAnlysSetSamplesNum>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023dc:	e06e      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023e0:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023e2:	2398      	movs	r3, #152	; 0x98
 80023e4:	76fb      	strb	r3, [r7, #27]
		break;
 80023e6:	e069      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_MODE:
		cmdIn = giveNextCmd();
 80023e8:	f000 faee 	bl	80029c8 <giveNextCmd>
 80023ec:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerMode(cmdIn)){
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4a53      	ldr	r2, [pc, #332]	; (8002540 <parseLogAnlysCmd+0x2c8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <parseLogAnlysCmd+0x18e>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <parseLogAnlysCmd+0x2cc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <parseLogAnlysCmd+0x18e>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4a51      	ldr	r2, [pc, #324]	; (8002548 <parseLogAnlysCmd+0x2d0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d159      	bne.n	80024ba <parseLogAnlysCmd+0x242>
			if(cmdIn == CMD_TRIG_MODE_AUTO){
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <parseLogAnlysCmd+0x2c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d103      	bne.n	8002416 <parseLogAnlysCmd+0x19e>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002410:	2200      	movs	r2, #0
 8002412:	751a      	strb	r2, [r3, #20]
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
			}	
		}
		break;
 8002414:	e051      	b.n	80024ba <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_NORMAL){
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <parseLogAnlysCmd+0x2cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d103      	bne.n	8002426 <parseLogAnlysCmd+0x1ae>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002420:	2201      	movs	r2, #1
 8002422:	751a      	strb	r2, [r3, #20]
		break;
 8002424:	e049      	b.n	80024ba <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4a47      	ldr	r2, [pc, #284]	; (8002548 <parseLogAnlysCmd+0x2d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d145      	bne.n	80024ba <parseLogAnlysCmd+0x242>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002430:	2202      	movs	r2, #2
 8002432:	751a      	strb	r2, [r3, #20]
		break;
 8002434:	e041      	b.n	80024ba <parseLogAnlysCmd+0x242>
	case CMD_LOG_ANLYS_TRIGGER_CHANNEL:
		cmdIn = giveNextCmd();
 8002436:	f000 fac7 	bl	80029c8 <giveNextCmd>
 800243a:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <parseLogAnlysCmd+0x2c4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <parseLogAnlysCmd+0x1dc>
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <parseLogAnlysCmd+0x1dc>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 800244c:	69f8      	ldr	r0, [r7, #28]
 800244e:	f003 f873 	bl	8005538 <logAnlysSetTriggerChannel>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002452:	e033      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002456:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002458:	2398      	movs	r3, #152	; 0x98
 800245a:	76fb      	strb	r3, [r7, #27]
		break;
 800245c:	e02e      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_EVENT:
		cmdIn = giveNextCmd();
 800245e:	f000 fab3 	bl	80029c8 <giveNextCmd>
 8002462:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4a39      	ldr	r2, [pc, #228]	; (800254c <parseLogAnlysCmd+0x2d4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <parseLogAnlysCmd+0x1fc>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4a38      	ldr	r2, [pc, #224]	; (8002550 <parseLogAnlysCmd+0x2d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10d      	bne.n	8002490 <parseLogAnlysCmd+0x218>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4a35      	ldr	r2, [pc, #212]	; (800254c <parseLogAnlysCmd+0x2d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <parseLogAnlysCmd+0x20a>
				logAnlysSetTriggerRising();
 800247c:	f003 f844 	bl	8005508 <logAnlysSetTriggerRising>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002480:	e009      	b.n	8002496 <parseLogAnlysCmd+0x21e>
			}else if(cmdIn == CMD_TRIG_EDGE_FALLING){
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4a32      	ldr	r2, [pc, #200]	; (8002550 <parseLogAnlysCmd+0x2d8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d105      	bne.n	8002496 <parseLogAnlysCmd+0x21e>
				logAnlysSetTriggerFalling();
 800248a:	f003 f849 	bl	8005520 <logAnlysSetTriggerFalling>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 800248e:	e002      	b.n	8002496 <parseLogAnlysCmd+0x21e>
			}
		}else{
			cmdIn = CMD_ERR;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002492:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002494:	e012      	b.n	80024bc <parseLogAnlysCmd+0x244>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002496:	bf00      	nop
		break;
 8002498:	e010      	b.n	80024bc <parseLogAnlysCmd+0x244>
		//				cmdIn = CMD_ERR;
		//				error = LOG_ANLYS_INVALID_FEATURE;
		//			}
		//			break;
	case CMD_GET_CONFIG:
		passMsg = MSG_LOGAN_CONFIG;
 800249a:	2318      	movs	r3, #24
 800249c:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <parseLogAnlysCmd+0x2dc>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	1db9      	adds	r1, r7, #6
 80024a4:	2300      	movs	r3, #0
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295
 80024aa:	f012 fe43 	bl	8015134 <xQueueGenericSend>
		break;		
 80024ae:	e005      	b.n	80024bc <parseLogAnlysCmd+0x244>
	default:
		error = LOG_ANLYS_INVALID_FEATURE;
 80024b0:	2398      	movs	r3, #152	; 0x98
 80024b2:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80024b6:	61fb      	str	r3, [r7, #28]
		break;
 80024b8:	e000      	b.n	80024bc <parseLogAnlysCmd+0x244>
		break;
 80024ba:	bf00      	nop
	}

	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <parseLogAnlysCmd+0x290>)
 80024be:	7c9b      	ldrb	r3, [r3, #18]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00f      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <parseLogAnlysCmd+0x2bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00b      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4a10      	ldr	r2, [pc, #64]	; (800251c <parseLogAnlysCmd+0x2a4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_MODE))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <parseLogAnlysCmd+0x2ac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <parseLogAnlysCmd+0x272>
	{
		logAnlysStart();
 80024e6:	f002 ff8f 	bl	8005408 <logAnlysStart>
	}

	cmdIn = (error > 0) ? error : CMD_END;
 80024ea:	7efb      	ldrb	r3, [r7, #27]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <parseLogAnlysCmd+0x27c>
 80024f0:	7efb      	ldrb	r3, [r7, #27]
 80024f2:	e000      	b.n	80024f6 <parseLogAnlysCmd+0x27e>
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <parseLogAnlysCmd+0x2c4>)
 80024f6:	61fb      	str	r3, [r7, #28]
	return cmdIn;			
 80024f8:	69fb      	ldr	r3, [r7, #28]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	5f525245 	.word	0x5f525245
 8002508:	200070a0 	.word	0x200070a0
 800250c:	504f5453 	.word	0x504f5453
 8002510:	4e494544 	.word	0x4e494544
 8002514:	45475254 	.word	0x45475254
 8002518:	3f474643 	.word	0x3f474643
 800251c:	43475254 	.word	0x43475254
 8002520:	46504d53 	.word	0x46504d53
 8002524:	4d475254 	.word	0x4d475254
 8002528:	54455250 	.word	0x54455250
 800252c:	4e504d53 	.word	0x4e504d53
 8002530:	54525453 	.word	0x54525453
 8002534:	54534f50 	.word	0x54534f50
 8002538:	54494e49 	.word	0x54494e49
 800253c:	5f444e45 	.word	0x5f444e45
 8002540:	4f545541 	.word	0x4f545541
 8002544:	4d524f4e 	.word	0x4d524f4e
 8002548:	474e4953 	.word	0x474e4953
 800254c:	45534952 	.word	0x45534952
 8002550:	4c4c4146 	.word	0x4c4c4146
 8002554:	2000455c 	.word	0x2000455c

08002558 <parseGeneratorCmd>:
/**
 * @brief  Generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseGeneratorCmd(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800255e:	4bab      	ldr	r3, [pc, #684]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002560:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8002562:	2300      	movs	r3, #0
 8002564:	76fb      	strb	r3, [r7, #27]
	uint16_t index;
	uint8_t length,chan;
	uint16_t watchDog=5000;
 8002566:	f241 3388 	movw	r3, #5000	; 0x1388
 800256a:	833b      	strh	r3, [r7, #24]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 800256c:	f000 fa2c 	bl	80029c8 <giveNextCmd>
 8002570:	61f8      	str	r0, [r7, #28]
	switch(cmdIn){
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4aa6      	ldr	r2, [pc, #664]	; (8002810 <parseGeneratorCmd+0x2b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f000 81cc 	beq.w	8002914 <parseGeneratorCmd+0x3bc>
 800257c:	4aa4      	ldr	r2, [pc, #656]	; (8002810 <parseGeneratorCmd+0x2b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d82e      	bhi.n	80025e0 <parseGeneratorCmd+0x88>
 8002582:	4aa4      	ldr	r2, [pc, #656]	; (8002814 <parseGeneratorCmd+0x2bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f000 81ef 	beq.w	8002968 <parseGeneratorCmd+0x410>
 800258a:	4aa2      	ldr	r2, [pc, #648]	; (8002814 <parseGeneratorCmd+0x2bc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d814      	bhi.n	80025ba <parseGeneratorCmd+0x62>
 8002590:	4aa1      	ldr	r2, [pc, #644]	; (8002818 <parseGeneratorCmd+0x2c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f000 80e4 	beq.w	8002760 <parseGeneratorCmd+0x208>
 8002598:	4a9f      	ldr	r2, [pc, #636]	; (8002818 <parseGeneratorCmd+0x2c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d804      	bhi.n	80025a8 <parseGeneratorCmd+0x50>
 800259e:	4a9f      	ldr	r2, [pc, #636]	; (800281c <parseGeneratorCmd+0x2c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	f000 811d 	beq.w	80027e0 <parseGeneratorCmd+0x288>
 80025a6:	e1ea      	b.n	800297e <parseGeneratorCmd+0x426>
 80025a8:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <parseGeneratorCmd+0x2c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f000 815a 	beq.w	8002864 <parseGeneratorCmd+0x30c>
 80025b0:	4a9c      	ldr	r2, [pc, #624]	; (8002824 <parseGeneratorCmd+0x2cc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f000 80f1 	beq.w	800279a <parseGeneratorCmd+0x242>
 80025b8:	e1e1      	b.n	800297e <parseGeneratorCmd+0x426>
 80025ba:	4a9b      	ldr	r2, [pc, #620]	; (8002828 <parseGeneratorCmd+0x2d0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f000 810c 	beq.w	80027da <parseGeneratorCmd+0x282>
 80025c2:	4a99      	ldr	r2, [pc, #612]	; (8002828 <parseGeneratorCmd+0x2d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d804      	bhi.n	80025d2 <parseGeneratorCmd+0x7a>
 80025c8:	4a98      	ldr	r2, [pc, #608]	; (800282c <parseGeneratorCmd+0x2d4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f000 81c1 	beq.w	8002952 <parseGeneratorCmd+0x3fa>
 80025d0:	e1d5      	b.n	800297e <parseGeneratorCmd+0x426>
 80025d2:	4a97      	ldr	r2, [pc, #604]	; (8002830 <parseGeneratorCmd+0x2d8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d055      	beq.n	8002684 <parseGeneratorCmd+0x12c>
 80025d8:	4a96      	ldr	r2, [pc, #600]	; (8002834 <parseGeneratorCmd+0x2dc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d035      	beq.n	800264a <parseGeneratorCmd+0xf2>
 80025de:	e1ce      	b.n	800297e <parseGeneratorCmd+0x426>
 80025e0:	4a95      	ldr	r2, [pc, #596]	; (8002838 <parseGeneratorCmd+0x2e0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 80a3 	beq.w	800272e <parseGeneratorCmd+0x1d6>
 80025e8:	4a93      	ldr	r2, [pc, #588]	; (8002838 <parseGeneratorCmd+0x2e0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d814      	bhi.n	8002618 <parseGeneratorCmd+0xc0>
 80025ee:	4a93      	ldr	r2, [pc, #588]	; (800283c <parseGeneratorCmd+0x2e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	f000 814c 	beq.w	800288e <parseGeneratorCmd+0x336>
 80025f6:	4a91      	ldr	r2, [pc, #580]	; (800283c <parseGeneratorCmd+0x2e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d804      	bhi.n	8002606 <parseGeneratorCmd+0xae>
 80025fc:	4a90      	ldr	r2, [pc, #576]	; (8002840 <parseGeneratorCmd+0x2e8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f000 80e8 	beq.w	80027d4 <parseGeneratorCmd+0x27c>
 8002604:	e1bb      	b.n	800297e <parseGeneratorCmd+0x426>
 8002606:	4a8f      	ldr	r2, [pc, #572]	; (8002844 <parseGeneratorCmd+0x2ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	f000 8180 	beq.w	800290e <parseGeneratorCmd+0x3b6>
 800260e:	4a8e      	ldr	r2, [pc, #568]	; (8002848 <parseGeneratorCmd+0x2f0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f000 8198 	beq.w	8002946 <parseGeneratorCmd+0x3ee>
 8002616:	e1b2      	b.n	800297e <parseGeneratorCmd+0x426>
 8002618:	4a8c      	ldr	r2, [pc, #560]	; (800284c <parseGeneratorCmd+0x2f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f000 817d 	beq.w	800291a <parseGeneratorCmd+0x3c2>
 8002620:	4a8a      	ldr	r2, [pc, #552]	; (800284c <parseGeneratorCmd+0x2f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d808      	bhi.n	8002638 <parseGeneratorCmd+0xe0>
 8002626:	4a8a      	ldr	r2, [pc, #552]	; (8002850 <parseGeneratorCmd+0x2f8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f000 818f 	beq.w	800294c <parseGeneratorCmd+0x3f4>
 800262e:	4a89      	ldr	r2, [pc, #548]	; (8002854 <parseGeneratorCmd+0x2fc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	f000 8183 	beq.w	800293c <parseGeneratorCmd+0x3e4>
 8002636:	e1a2      	b.n	800297e <parseGeneratorCmd+0x426>
 8002638:	4a87      	ldr	r2, [pc, #540]	; (8002858 <parseGeneratorCmd+0x300>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f000 81a4 	beq.w	8002988 <parseGeneratorCmd+0x430>
 8002640:	4a86      	ldr	r2, [pc, #536]	; (800285c <parseGeneratorCmd+0x304>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f000 81a2 	beq.w	800298c <parseGeneratorCmd+0x434>
 8002648:	e199      	b.n	800297e <parseGeneratorCmd+0x426>
	case CMD_GEN_MODE:
		cmdIn = giveNextCmd();
 800264a:	f000 f9bd 	bl	80029c8 <giveNextCmd>
 800264e:	61f8      	str	r0, [r7, #28]
		if(isGeneratorMode(cmdIn)){
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4a83      	ldr	r2, [pc, #524]	; (8002860 <parseGeneratorCmd+0x308>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <parseGeneratorCmd+0x10a>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <parseGeneratorCmd+0x2f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	f040 8197 	bne.w	8002990 <parseGeneratorCmd+0x438>
			if(cmdIn == CMD_MODE_PWM){
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <parseGeneratorCmd+0x308>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d103      	bne.n	8002672 <parseGeneratorCmd+0x11a>
				genSetMode(GEN_PWM);
 800266a:	2001      	movs	r0, #1
 800266c:	f002 fa72 	bl	8004b54 <genSetMode>
			}else if(cmdIn == CMD_MODE_DAC){
				genSetMode(GEN_DAC);
			}
		}
		break;
 8002670:	e18e      	b.n	8002990 <parseGeneratorCmd+0x438>
			}else if(cmdIn == CMD_MODE_DAC){
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <parseGeneratorCmd+0x2f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	f040 818a 	bne.w	8002990 <parseGeneratorCmd+0x438>
				genSetMode(GEN_DAC);
 800267c:	2000      	movs	r0, #0
 800267e:	f002 fa69 	bl	8004b54 <genSetMode>
		break;
 8002682:	e185      	b.n	8002990 <parseGeneratorCmd+0x438>
	case CMD_GEN_DATA://set data
		cmdIn = giveNextCmd();
 8002684:	f000 f9a0 	bl	80029c8 <giveNextCmd>
 8002688:	61f8      	str	r0, [r7, #28]
		index=SWAP_UINT16(cmdIn);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	b29a      	uxth	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	b29b      	uxth	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b29b      	uxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	82fb      	strh	r3, [r7, #22]
		length=cmdIn>>16;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	757b      	strb	r3, [r7, #21]
		chan=cmdIn>>24;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	0e1b      	lsrs	r3, r3, #24
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	71fb      	strb	r3, [r7, #7]
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026ae:	e005      	b.n	80026bc <parseGeneratorCmd+0x164>
			watchDog--;
 80026b0:	8b3b      	ldrh	r3, [r7, #24]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	833b      	strh	r3, [r7, #24]
			osDelay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f012 fb18 	bl	8014cec <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026bc:	8b3b      	ldrh	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <parseGeneratorCmd+0x17c>
 80026c2:	f000 fee5 	bl	8003490 <getBytesAvailable>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	7d7b      	ldrb	r3, [r7, #21]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	3301      	adds	r3, #1
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbed      	blt.n	80026b0 <parseGeneratorCmd+0x158>
		}
		if(getBytesAvailable()<length*2+1){
 80026d4:	f000 fedc 	bl	8003490 <getBytesAvailable>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3301      	adds	r3, #1
 80026e2:	429a      	cmp	r2, r3
 80026e4:	da0a      	bge.n	80026fc <parseGeneratorCmd+0x1a4>
			error=GEN_MISSING_DATA;
 80026e6:	2368      	movs	r3, #104	; 0x68
 80026e8:	76fb      	strb	r3, [r7, #27]
			while(commBufferReadByte(&chan)==0);
 80026ea:	bf00      	nop
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fe24 	bl	800333c <commBufferReadByte>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f8      	beq.n	80026ec <parseGeneratorCmd+0x194>
				while(commBufferReadByte(&chan)==0);
			}else{
				genDataOKSendNext();
			}
		}
		break;
 80026fa:	e14a      	b.n	8002992 <parseGeneratorCmd+0x43a>
			error=genSetData(index,length*2,chan);
 80026fc:	7d7b      	ldrb	r3, [r7, #21]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	79fa      	ldrb	r2, [r7, #7]
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fb58 	bl	8004dbc <genSetData>
 800270c:	4603      	mov	r3, r0
 800270e:	76fb      	strb	r3, [r7, #27]
			if (error){
 8002710:	7efb      	ldrb	r3, [r7, #27]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <parseGeneratorCmd+0x1d0>
				while(commBufferReadByte(&chan)==0);
 8002716:	bf00      	nop
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fe0e 	bl	800333c <commBufferReadByte>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f8      	beq.n	8002718 <parseGeneratorCmd+0x1c0>
		break;
 8002726:	e134      	b.n	8002992 <parseGeneratorCmd+0x43a>
				genDataOKSendNext();
 8002728:	f002 fc02 	bl	8004f30 <genDataOKSendNext>
		break;
 800272c:	e131      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_SAMPLING_FREQ: //set sampling freq
		cmdIn = giveNextCmd();
 800272e:	f000 f94b 	bl	80029c8 <giveNextCmd>
 8002732:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4a48      	ldr	r2, [pc, #288]	; (8002858 <parseGeneratorCmd+0x300>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <parseGeneratorCmd+0x202>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00a      	beq.n	800275a <parseGeneratorCmd+0x202>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fb9c 	bl	8004e8c <genSetFrequency>
 8002754:	4603      	mov	r3, r0
 8002756:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002758:	e11b      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <parseGeneratorCmd+0x2b4>)
 800275c:	61fb      	str	r3, [r7, #28]
		break;	
 800275e:	e118      	b.n	8002992 <parseGeneratorCmd+0x43a>

#ifdef USE_GEN_PWM
	case CMD_GEN_PWM_FREQ_CH1:
		cmdIn = giveNextCmd();
 8002760:	f000 f932 	bl	80029c8 <giveNextCmd>
 8002764:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 8002766:	f000 fe49 	bl	80033fc <commBufferReadUInt32>
 800276a:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 800276c:	69f9      	ldr	r1, [r7, #28]
 800276e:	6938      	ldr	r0, [r7, #16]
 8002770:	f000 f97a 	bl	8002a68 <makeDoubleFromTwo32bit>
 8002774:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4a37      	ldr	r2, [pc, #220]	; (8002858 <parseGeneratorCmd+0x300>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <parseGeneratorCmd+0x23c>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d005      	beq.n	8002794 <parseGeneratorCmd+0x23c>
			genPwmSetFrequency(freq, 0);
 8002788:	2000      	movs	r0, #0
 800278a:	ed97 0b02 	vldr	d0, [r7, #8]
 800278e:	f002 fadf 	bl	8004d50 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002792:	e0fe      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002796:	61fb      	str	r3, [r7, #28]
		break;
 8002798:	e0fb      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_FREQ_CH2:
		cmdIn = giveNextCmd();
 800279a:	f000 f915 	bl	80029c8 <giveNextCmd>
 800279e:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 80027a0:	f000 fe2c 	bl	80033fc <commBufferReadUInt32>
 80027a4:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 80027a6:	69f9      	ldr	r1, [r7, #28]
 80027a8:	6938      	ldr	r0, [r7, #16]
 80027aa:	f000 f95d 	bl	8002a68 <makeDoubleFromTwo32bit>
 80027ae:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <parseGeneratorCmd+0x300>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <parseGeneratorCmd+0x276>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d005      	beq.n	80027ce <parseGeneratorCmd+0x276>
			genPwmSetFrequency(freq, 1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80027c8:	f002 fac2 	bl	8004d50 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 80027cc:	e0e1      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027d0:	61fb      	str	r3, [r7, #28]
		break;
 80027d2:	e0de      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_DEINIT:
		generator_deinit();
 80027d4:	f002 fa04 	bl	8004be0 <generator_deinit>
		break;
 80027d8:	e0db      	b.n	8002992 <parseGeneratorCmd+0x43a>
#endif // USE_GEN_PWM

	case CMD_GET_REAL_FREQ: //get sampling freq
		genSendRealSamplingFreq();
 80027da:	f002 fb8b 	bl	8004ef4 <genSendRealSamplingFreq>
		break;	
 80027de:	e0d8      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DATA_LENGTH_CH1: //set data length
		cmdIn = giveNextCmd();
 80027e0:	f000 f8f2 	bl	80029c8 <giveNextCmd>
 80027e4:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <parseGeneratorCmd+0x300>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00a      	beq.n	8002804 <parseGeneratorCmd+0x2ac>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d006      	beq.n	8002804 <parseGeneratorCmd+0x2ac>
			error=genSetLength(cmdIn, 1);
 80027f6:	2101      	movs	r1, #1
 80027f8:	69f8      	ldr	r0, [r7, #28]
 80027fa:	f002 fbd5 	bl	8004fa8 <genSetLength>
 80027fe:	4603      	mov	r3, r0
 8002800:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002802:	e0c6      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002806:	61fb      	str	r3, [r7, #28]
		break;	
 8002808:	e0c3      	b.n	8002992 <parseGeneratorCmd+0x43a>
 800280a:	bf00      	nop
 800280c:	5f525245 	.word	0x5f525245
 8002810:	464f5f42 	.word	0x464f5f42
 8002814:	3f464350 	.word	0x3f464350
 8002818:	31524647 	.word	0x31524647
 800281c:	3148434c 	.word	0x3148434c
 8002820:	3248434c 	.word	0x3248434c
 8002824:	32524647 	.word	0x32524647
 8002828:	3f515246 	.word	0x3f515246
 800282c:	3f474643 	.word	0x3f474643
 8002830:	41544144 	.word	0x41544144
 8002834:	45444f4d 	.word	0x45444f4d
 8002838:	51455246 	.word	0x51455246
 800283c:	4e414843 	.word	0x4e414843
 8002840:	49445047 	.word	0x49445047
 8002844:	4e4f5f42 	.word	0x4e4f5f42
 8002848:	504f5453 	.word	0x504f5453
 800284c:	5f434144 	.word	0x5f434144
 8002850:	54455352 	.word	0x54455352
 8002854:	54525453 	.word	0x54525453
 8002858:	5f444e45 	.word	0x5f444e45
 800285c:	5f4e4547 	.word	0x5f4e4547
 8002860:	5f4d5750 	.word	0x5f4d5750

	case CMD_GEN_DATA_LENGTH_CH2: //set data length
		cmdIn = giveNextCmd();
 8002864:	f000 f8b0 	bl	80029c8 <giveNextCmd>
 8002868:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <parseGeneratorCmd+0x454>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00a      	beq.n	8002888 <parseGeneratorCmd+0x330>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d006      	beq.n	8002888 <parseGeneratorCmd+0x330>
			error=genSetLength(cmdIn, 2);
 800287a:	2102      	movs	r1, #2
 800287c:	69f8      	ldr	r0, [r7, #28]
 800287e:	f002 fb93 	bl	8004fa8 <genSetLength>
 8002882:	4603      	mov	r3, r0
 8002884:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002886:	e084      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <parseGeneratorCmd+0x458>)
 800288a:	61fb      	str	r3, [r7, #28]
		break;	
 800288c:	e081      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 800288e:	f000 f89b 	bl	80029c8 <giveNextCmd>
 8002892:	61f8      	str	r0, [r7, #28]
		if(isChannel(cmdIn)){
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <parseGeneratorCmd+0x45c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4a46      	ldr	r2, [pc, #280]	; (80029b8 <parseGeneratorCmd+0x460>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4a45      	ldr	r2, [pc, #276]	; (80029bc <parseGeneratorCmd+0x464>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <parseGeneratorCmd+0x468>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d127      	bne.n	8002904 <parseGeneratorCmd+0x3ac>
			if(cmdIn == CMD_CHANNELS_1){
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <parseGeneratorCmd+0x45c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d105      	bne.n	80028c8 <parseGeneratorCmd+0x370>
				error=genSetNumOfChannels(1);
 80028bc:	2001      	movs	r0, #1
 80028be:	f002 fbaf 	bl	8005020 <genSetNumOfChannels>
 80028c2:	4603      	mov	r3, r0
 80028c4:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028c6:	e020      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_2){
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4a3b      	ldr	r2, [pc, #236]	; (80029b8 <parseGeneratorCmd+0x460>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d105      	bne.n	80028dc <parseGeneratorCmd+0x384>
				error=genSetNumOfChannels(2);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f002 fba5 	bl	8005020 <genSetNumOfChannels>
 80028d6:	4603      	mov	r3, r0
 80028d8:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028da:	e016      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_3){
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4a37      	ldr	r2, [pc, #220]	; (80029bc <parseGeneratorCmd+0x464>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d105      	bne.n	80028f0 <parseGeneratorCmd+0x398>
				error=genSetNumOfChannels(3);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f002 fb9b 	bl	8005020 <genSetNumOfChannels>
 80028ea:	4603      	mov	r3, r0
 80028ec:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028ee:	e00c      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_4){
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <parseGeneratorCmd+0x468>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <parseGeneratorCmd+0x3b2>
				error=genSetNumOfChannels(4);
 80028f8:	2004      	movs	r0, #4
 80028fa:	f002 fb91 	bl	8005020 <genSetNumOfChannels>
 80028fe:	4603      	mov	r3, r0
 8002900:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8002902:	e002      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}
		}else{
			cmdIn = CMD_ERR;
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002906:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002908:	e043      	b.n	8002992 <parseGeneratorCmd+0x43a>
			if(cmdIn == CMD_CHANNELS_1){
 800290a:	bf00      	nop
		break;
 800290c:	e041      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_OUTBUFF_ON: //buffer on
		genSetOutputBuffer();
 800290e:	f002 fc0b 	bl	8005128 <genSetOutputBuffer>
		break;			
 8002912:	e03e      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_OUTBUFF_OFF: //buffer off
		genUnsetOutputBuffer();
 8002914:	f002 fc0e 	bl	8005134 <genUnsetOutputBuffer>
		break;	
 8002918:	e03b      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DAC_VAL:
		cmdIn = giveNextCmd();
 800291a:	f000 f855 	bl	80029c8 <giveNextCmd>
 800291e:	61f8      	str	r0, [r7, #28]
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	b29a      	uxth	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b29b      	uxth	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f002 fc07 	bl	8005140 <genSetDAC>
 8002932:	4603      	mov	r3, r0
 8002934:	76fb      	strb	r3, [r7, #27]
		genStatusOK();
 8002936:	f002 fb0f 	bl	8004f58 <genStatusOK>
		break;
 800293a:	e02a      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_START: //start generating
		genStart();
 800293c:	f002 fc50 	bl	80051e0 <genStart>
		genStatusOK();
 8002940:	f002 fb0a 	bl	8004f58 <genStatusOK>
		break;	
 8002944:	e025      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_STOP: //stop generating
		genStop();
 8002946:	f002 fc5f 	bl	8005208 <genStop>
		break;	
 800294a:	e022      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_RESET:
		genReset();
 800294c:	f002 fc70 	bl	8005230 <genReset>
		break;
 8002950:	e01f      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GET_CONFIG:
		passMsg = MSG_GEN_CONFIG;
 8002952:	231f      	movs	r3, #31
 8002954:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <parseGeneratorCmd+0x46c>)
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	1d39      	adds	r1, r7, #4
 800295c:	2300      	movs	r3, #0
 800295e:	f04f 32ff 	mov.w	r2, #4294967295
 8002962:	f012 fbe7 	bl	8015134 <xQueueGenericSend>
		break;
 8002966:	e014      	b.n	8002992 <parseGeneratorCmd+0x43a>
#ifdef USE_GEN_PWM
	case CMD_GET_PWM_CONFIG:
		passMsg = MSG_GEN_PWM_CONFIG;
 8002968:	2320      	movs	r3, #32
 800296a:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <parseGeneratorCmd+0x46c>)
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	1d39      	adds	r1, r7, #4
 8002972:	2300      	movs	r3, #0
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	f012 fbdc 	bl	8015134 <xQueueGenericSend>
		break;
 800297c:	e009      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GENERATOR:
		break;	

	case CMD_END:break;
	default:
		error = GEN_INVALID_FEATURE;
 800297e:	2364      	movs	r3, #100	; 0x64
 8002980:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002984:	61fb      	str	r3, [r7, #28]
		break;
 8002986:	e004      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_END:break;
 8002988:	bf00      	nop
 800298a:	e002      	b.n	8002992 <parseGeneratorCmd+0x43a>
		break;	
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <parseGeneratorCmd+0x43a>
		break;
 8002990:	bf00      	nop
	}
	if(error>0){
 8002992:	7efb      	ldrb	r3, [r7, #27]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <parseGeneratorCmd+0x446>
		cmdIn=error;
 8002998:	7efb      	ldrb	r3, [r7, #27]
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	e001      	b.n	80029a2 <parseGeneratorCmd+0x44a>
	}else{
		cmdIn=CMD_END;
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <parseGeneratorCmd+0x454>)
 80029a0:	61fb      	str	r3, [r7, #28]
	}
	return cmdIn;
 80029a2:	69fb      	ldr	r3, [r7, #28]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	5f444e45 	.word	0x5f444e45
 80029b0:	5f525245 	.word	0x5f525245
 80029b4:	5f484331 	.word	0x5f484331
 80029b8:	5f484332 	.word	0x5f484332
 80029bc:	5f484333 	.word	0x5f484333
 80029c0:	5f484334 	.word	0x5f484334
 80029c4:	2000455c 	.word	0x2000455c

080029c8 <giveNextCmd>:
/**
 * @brief  Read command from input buffer
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80029ce:	463b      	mov	r3, r7
 80029d0:	2105      	movs	r1, #5
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fcf0 	bl	80033b8 <commBufferReadNBytes>
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
	if(bytesRead >= 4){
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d90a      	bls.n	80029f8 <giveNextCmd+0x30>
		return BUILD_CMD(cmdNext);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	061a      	lsls	r2, r3, #24
 80029e6:	78bb      	ldrb	r3, [r7, #2]
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4313      	orrs	r3, r2
 80029f2:	783a      	ldrb	r2, [r7, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	e005      	b.n	8002a04 <giveNextCmd+0x3c>
	}else if(bytesRead == 0){
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <giveNextCmd+0x3a>
		return CMD_END;
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <giveNextCmd+0x44>)
 8002a00:	e000      	b.n	8002a04 <giveNextCmd+0x3c>
	}else{
		return CMD_ERR;
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <giveNextCmd+0x48>)
	}
} 
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	5f444e45 	.word	0x5f444e45
 8002a10:	5f525245 	.word	0x5f525245

08002a14 <printErrResponse>:
/**
 * @brief  Printr error code
 * @param  Command
 * @retval None
 */
void printErrResponse(command cmd){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uint8_t err[2];
	if(cmd == CMD_END){
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <printErrResponse+0x4c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10b      	bne.n	8002a3c <printErrResponse+0x28>
		uint16_t passMsg = MSG_ACK;
 8002a24:	2335      	movs	r3, #53	; 0x35
 8002a26:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <printErrResponse+0x50>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f107 010a 	add.w	r1, r7, #10
 8002a30:	2300      	movs	r3, #0
 8002a32:	f04f 32ff 	mov.w	r2, #4294967295
 8002a36:	f012 fb7d 	bl	8015134 <xQueueGenericSend>
	}else{
		err[0]=ERROR_PREFIX;
		err[1]=cmd;
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
	}
}
 8002a3a:	e00d      	b.n	8002a58 <printErrResponse+0x44>
		err[0]=ERROR_PREFIX;
 8002a3c:	2345      	movs	r3, #69	; 0x45
 8002a3e:	733b      	strb	r3, [r7, #12]
		err[1]=cmd;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <printErrResponse+0x50>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f107 010c 	add.w	r1, r7, #12
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	f012 fb6e 	bl	8015134 <xQueueGenericSend>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	5f444e45 	.word	0x5f444e45
 8002a64:	2000455c 	.word	0x2000455c

08002a68 <makeDoubleFromTwo32bit>:

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	uint32_t makeArray[2];
	makeArray[0] = word1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	613b      	str	r3, [r7, #16]
	makeArray[1] = word2;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	617b      	str	r3, [r7, #20]

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8002a7a:	f107 0110 	add.w	r1, r7, #16
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	2208      	movs	r2, #8
 8002a84:	4618      	mov	r0, r3
 8002a86:	f019 fd91 	bl	801c5ac <memcpy>
	return doubleVal;
 8002a8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a8e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002a92:	eeb0 0a47 	vmov.f32	s0, s14
 8002a96:	eef0 0a67 	vmov.f32	s1, s15
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <CommTask>:
 * @brief  Communication task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vPrintTask, pvParameters) {
void CommTask(void const *argument){
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b096      	sub	sp, #88	; 0x58
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(USB_DP_PIN_STR)==5);
	CASSERT(sizeof(USB_DM_PIN_STR)==5);
#endif //USE_USB


	uint16_t message = 0xFFFF;
 8002aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	2032      	movs	r0, #50	; 0x32
 8002ab4:	f012 fa4a 	bl	8014f4c <xQueueGenericCreate>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4bc4      	ldr	r3, [pc, #784]	; (8002dcc <CommTask+0x32c>)
 8002abc:	601a      	str	r2, [r3, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002abe:	2004      	movs	r0, #4
 8002ac0:	f012 fab6 	bl	8015030 <xQueueCreateMutex>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4bc2      	ldr	r3, [pc, #776]	; (8002dd0 <CommTask+0x330>)
 8002ac8:	601a      	str	r2, [r3, #0]

	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002aca:	4bc1      	ldr	r3, [pc, #772]	; (8002dd0 <CommTask+0x330>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f012 faf7 	bl	80150c6 <xQueueTakeMutexRecursive>
	commsInit();
 8002ad8:	f000 fbd8 	bl	800328c <commsInit>
	xSemaphoreGiveRecursive(commsMutex);
 8002adc:	4bbc      	ldr	r3, [pc, #752]	; (8002dd0 <CommTask+0x330>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f012 fabd 	bl	8015060 <xQueueGiveMutexRecursive>

#ifdef USE_SCOPE
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 8002ae6:	4bbb      	ldr	r3, [pc, #748]	; (8002dd4 <CommTask+0x334>)
 8002ae8:	f107 041c 	add.w	r4, r7, #28
 8002aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t channels;
	uint32_t oneChanMemSize;
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 8002af2:	4ab9      	ldr	r2, [pc, #740]	; (8002dd8 <CommTask+0x338>)
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002afa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t i;
	uint32_t j;
#endif //USE_GEN || USE_SCOPE

	while(1){	
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002afe:	4bb3      	ldr	r3, [pc, #716]	; (8002dcc <CommTask+0x32c>)
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8002b06:	2300      	movs	r3, #0
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	f012 fca0 	bl	8015450 <xQueueGenericReceive>
		///commsSendString("COMMS_Run\r\n");
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002b10:	4baf      	ldr	r3, [pc, #700]	; (8002dd0 <CommTask+0x330>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f012 fad4 	bl	80150c6 <xQueueTakeMutexRecursive>


		switch(message){
 8002b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b20:	2b35      	cmp	r3, #53	; 0x35
 8002b22:	f200 8390 	bhi.w	8003246 <CommTask+0x7a6>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <CommTask+0x8c>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002c05 	.word	0x08002c05
 8002b30:	08003211 	.word	0x08003211
 8002b34:	0800310d 	.word	0x0800310d
 8002b38:	08003113 	.word	0x08003113
 8002b3c:	08003247 	.word	0x08003247
 8002b40:	08003137 	.word	0x08003137
 8002b44:	08003247 	.word	0x08003247
 8002b48:	08003247 	.word	0x08003247
 8002b4c:	08003247 	.word	0x08003247
 8002b50:	08003247 	.word	0x08003247
 8002b54:	08003247 	.word	0x08003247
 8002b58:	08003247 	.word	0x08003247
 8002b5c:	08003247 	.word	0x08003247
 8002b60:	08003247 	.word	0x08003247
 8002b64:	08002f25 	.word	0x08002f25
 8002b68:	0800311f 	.word	0x0800311f
 8002b6c:	0800312b 	.word	0x0800312b
 8002b70:	08003247 	.word	0x08003247
 8002b74:	08003247 	.word	0x08003247
 8002b78:	08003247 	.word	0x08003247
 8002b7c:	08003247 	.word	0x08003247
 8002b80:	08002c13 	.word	0x08002c13
 8002b84:	0800322b 	.word	0x0800322b
 8002b88:	08003239 	.word	0x08003239
 8002b8c:	08003167 	.word	0x08003167
 8002b90:	08003247 	.word	0x08003247
 8002b94:	08003247 	.word	0x08003247
 8002b98:	08003247 	.word	0x08003247
 8002b9c:	08003247 	.word	0x08003247
 8002ba0:	08003247 	.word	0x08003247
 8002ba4:	0800309d 	.word	0x0800309d
 8002ba8:	08003143 	.word	0x08003143
 8002bac:	0800314f 	.word	0x0800314f
 8002bb0:	08003247 	.word	0x08003247
 8002bb4:	08003247 	.word	0x08003247
 8002bb8:	08002ee5 	.word	0x08002ee5
 8002bbc:	08002f05 	.word	0x08002f05
 8002bc0:	08003247 	.word	0x08003247
 8002bc4:	08003247 	.word	0x08003247
 8002bc8:	08003247 	.word	0x08003247
 8002bcc:	08002ead 	.word	0x08002ead
 8002bd0:	08002ec9 	.word	0x08002ec9
 8002bd4:	08003173 	.word	0x08003173
 8002bd8:	08003181 	.word	0x08003181
 8002bdc:	0800315b 	.word	0x0800315b
 8002be0:	08003247 	.word	0x08003247
 8002be4:	08003247 	.word	0x08003247
 8002be8:	08003247 	.word	0x08003247
 8002bec:	08003247 	.word	0x08003247
 8002bf0:	0800307d 	.word	0x0800307d
 8002bf4:	08003247 	.word	0x08003247
 8002bf8:	08003247 	.word	0x08003247
 8002bfc:	08003247 	.word	0x08003247
 8002c00:	0800321d 	.word	0x0800321d
		case MSG_DEVICE_IDN:		/* send IDN string */
			commsSendString(STR_SYSTEM);
 8002c04:	4875      	ldr	r0, [pc, #468]	; (8002ddc <CommTask+0x33c>)
 8002c06:	f015 fa8b 	bl	8018120 <commsSendString>
			commsSendString(IDN_STRING);
 8002c0a:	4875      	ldr	r0, [pc, #468]	; (8002de0 <CommTask+0x340>)
 8002c0c:	f015 fa88 	bl	8018120 <commsSendString>
				commsSendString(SHIELD_STRING);
			}else if(isScopeShieldConnected()==2){
				commsSendString(SHIELD_STRING_2);
			}
#endif
			break;
 8002c10:	e324      	b.n	800325c <CommTask+0x7bc>
			//send data
#ifdef USE_SCOPE
		case MSG_SCOPE_DATA_READY:
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002c12:	f003 f9fd 	bl	8006010 <getScopeState>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	f040 831c 	bne.w	8003256 <CommTask+0x7b6>
				commsSendString(STR_SCOPE);
 8002c1e:	4871      	ldr	r0, [pc, #452]	; (8002de4 <CommTask+0x344>)
 8002c20:	f015 fa7e 	bl	8018120 <commsSendString>
				oneChanMemSize=getOneChanMemSize();
 8002c24:	f003 f9b8 	bl	8005f98 <getOneChanMemSize>
 8002c28:	63b8      	str	r0, [r7, #56]	; 0x38
				dataLength = getSamples();
 8002c2a:	f003 f9cd 	bl	8005fc8 <getSamples>
 8002c2e:	64f8      	str	r0, [r7, #76]	; 0x4c
				adcRes = getADCRes();
 8002c30:	f003 f9d6 	bl	8005fe0 <getADCRes>
 8002c34:	4603      	mov	r3, r0
 8002c36:	86fb      	strh	r3, [r7, #54]	; 0x36
				channels=GetNumOfChannels();
 8002c38:	f003 f98c 	bl	8005f54 <GetNumOfChannels>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	86bb      	strh	r3, [r7, #52]	; 0x34

				j=scopeGetRealSmplFreq();
 8002c40:	f003 fc5e 	bl	8006500 <scopeGetRealSmplFreq>
 8002c44:	63f8      	str	r0, [r7, #60]	; 0x3c
				header[4]=(uint8_t)(j>>24);
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f887 3020 	strb.w	r3, [r7, #32]
				header[5]=(uint8_t)(j>>16);
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				header[6]=(uint8_t)(j>>8);
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				header[7]=(uint8_t)(j);
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				if(adcRes>8){
 8002c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d91b      	bls.n	8002caa <CommTask+0x20a>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c72:	f003 f99d 	bl	8005fb0 <getTriggerIndex>
 8002c76:	4604      	mov	r4, r0
 8002c78:	f003 f9a6 	bl	8005fc8 <getSamples>
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	f003 f9bb 	bl	8005ff8 <getPretrigger>
 8002c82:	4603      	mov	r3, r0
 8002c84:	fb03 f305 	mul.w	r3, r3, r5
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	1ae3      	subs	r3, r4, r3
 8002c8c:	005a      	lsls	r2, r3, #1
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	4413      	add	r3, r2
 8002c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c9a:	fb01 f202 	mul.w	r2, r1, r2
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
					dataLength*=2;
 8002ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	e016      	b.n	8002cd8 <CommTask+0x238>
				}else{
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002caa:	f003 f981 	bl	8005fb0 <getTriggerIndex>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	f003 f98a 	bl	8005fc8 <getSamples>
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	f003 f99f 	bl	8005ff8 <getPretrigger>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	fb03 f305 	mul.w	r3, r3, r5
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	1ae2      	subs	r2, r4, r3
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	4413      	add	r3, r2
 8002cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cd0:	fb01 f202 	mul.w	r2, r1, r2
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
				} 

				header[8]=(uint8_t)adcRes;	
 8002cd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				header[9]=(uint8_t)(dataLength >> 24);
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	0e1b      	lsrs	r3, r3, #24
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				header[10]=(uint8_t)(dataLength >> 16);
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				header[11]=(uint8_t)(dataLength >> 8);
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				header[12]=(uint8_t)dataLength;
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				header[15]=channels;
 8002d06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(j+dataLength>oneChanMemSize){
 8002d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	4413      	add	r3, r2
 8002d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d208      	bcs.n	8002d2c <CommTask+0x28c>
					dataLenFirst=oneChanMemSize-j;
 8002d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=dataLength-dataLenFirst;
 8002d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2a:	e003      	b.n	8002d34 <CommTask+0x294>
				}else{
					dataLenFirst=dataLength;
 8002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
				}

				for(i=0;i<channels;i++){
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002d3a:	e0a1      	b.n	8002e80 <CommTask+0x3e0>

					pointer = (uint8_t*)getDataPointer(i);
 8002d3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 f915 	bl	8005f70 <getDataPointer>
 8002d46:	6338      	str	r0, [r7, #48]	; 0x30

					//sending header
					header[14]=(i+1);
 8002d48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					commsSendBuff(header,16);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	2110      	movs	r1, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f015 f9cc 	bl	80180f8 <commsSendBuff>

					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d62:	2bc8      	cmp	r3, #200	; 0xc8
 8002d64:	d940      	bls.n	8002de8 <CommTask+0x348>
						tmpToSend=dataLenFirst;
 8002d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d70:	e015      	b.n	8002d9e <CommTask+0x2fe>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d76:	22c8      	movs	r2, #200	; 0xc8
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d80:	4413      	add	r3, r2
 8002d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d84:	4413      	add	r3, r2
 8002d86:	21c8      	movs	r1, #200	; 0xc8
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f015 f9b5 	bl	80180f8 <commsSendBuff>
							k++;
 8002d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d92:	3301      	adds	r3, #1
 8002d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9a:	3bc8      	subs	r3, #200	; 0xc8
 8002d9c:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da0:	2bc8      	cmp	r3, #200	; 0xc8
 8002da2:	d8e6      	bhi.n	8002d72 <CommTask+0x2d2>
						}
						if(tmpToSend>0){
 8002da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02a      	beq.n	8002e00 <CommTask+0x360>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002daa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dae:	22c8      	movs	r2, #200	; 0xc8
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	4413      	add	r3, r2
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	4413      	add	r3, r2
 8002dbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f015 f997 	bl	80180f8 <commsSendBuff>
 8002dca:	e019      	b.n	8002e00 <CommTask+0x360>
 8002dcc:	2000455c 	.word	0x2000455c
 8002dd0:	20000164 	.word	0x20000164
 8002dd4:	0801d860 	.word	0x0801d860
 8002dd8:	0801d874 	.word	0x0801d874
 8002ddc:	0801d764 	.word	0x0801d764
 8002de0:	0801d76c 	.word	0x0801d76c
 8002de4:	0801d780 	.word	0x0801d780
						}
					}else if(dataLenFirst>0){
 8002de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <CommTask+0x360>
						commsSendBuff(pointer + j, dataLenFirst);
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	4413      	add	r3, r2
 8002df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df6:	b292      	uxth	r2, r2
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f015 f97c 	bl	80180f8 <commsSendBuff>
					}

					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2bc8      	cmp	r3, #200	; 0xc8
 8002e04:	d92e      	bls.n	8002e64 <CommTask+0x3c4>
						tmpToSend=dataLenSecond;
 8002e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002e10:	e013      	b.n	8002e3a <CommTask+0x39a>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e16:	22c8      	movs	r2, #200	; 0xc8
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	4413      	add	r3, r2
 8002e22:	21c8      	movs	r1, #200	; 0xc8
 8002e24:	4618      	mov	r0, r3
 8002e26:	f015 f967 	bl	80180f8 <commsSendBuff>
							k++;
 8002e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e36:	3bc8      	subs	r3, #200	; 0xc8
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e3e:	d8e8      	bhi.n	8002e12 <CommTask+0x372>
						}
						if(tmpToSend>0){
 8002e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d017      	beq.n	8002e76 <CommTask+0x3d6>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e4a:	22c8      	movs	r2, #200	; 0xc8
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	4413      	add	r3, r2
 8002e56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f015 f94b 	bl	80180f8 <commsSendBuff>
 8002e62:	e008      	b.n	8002e76 <CommTask+0x3d6>
						}
					}else if(dataLenSecond>0){
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <CommTask+0x3d6>
						commsSendBuff(pointer, dataLenSecond);
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e72:	f015 f941 	bl	80180f8 <commsSendBuff>
				for(i=0;i<channels;i++){
 8002e76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002e80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f63f af57 	bhi.w	8002d3c <CommTask+0x29c>
					}
				}	
				///commsSendString("COMMS_DataSending\r\n");
				commsSendString(STR_SCOPE_OK);
 8002e8e:	48c0      	ldr	r0, [pc, #768]	; (8003190 <CommTask+0x6f0>)
 8002e90:	f015 f946 	bl	8018120 <commsSendString>
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002e94:	2314      	movs	r3, #20
 8002e96:	81fb      	strh	r3, [r7, #14]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002e98:	4bbe      	ldr	r3, [pc, #760]	; (8003194 <CommTask+0x6f4>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f107 010e 	add.w	r1, r7, #14
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea6:	f012 f945 	bl	8015134 <xQueueGenericSend>

			}
			break;
 8002eaa:	e1d4      	b.n	8003256 <CommTask+0x7b6>
#endif //USE_SCOPE
			//send generating frequency
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1:
			commsSendString(STR_GENERATOR);
 8002eac:	48ba      	ldr	r0, [pc, #744]	; (8003198 <CommTask+0x6f8>)
 8002eae:	f015 f937 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1);
 8002eb2:	48ba      	ldr	r0, [pc, #744]	; (800319c <CommTask+0x6fc>)
 8002eb4:	f015 f934 	bl	8018120 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(1));
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f002 f861 	bl	8004f80 <genGetRealSmplFreq>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f015 f8fb 	bl	80180bc <commsSendUint32>
			break;
 8002ec6:	e1c9      	b.n	800325c <CommTask+0x7bc>
		case MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2:
			commsSendString(STR_GENERATOR);
 8002ec8:	48b3      	ldr	r0, [pc, #716]	; (8003198 <CommTask+0x6f8>)
 8002eca:	f015 f929 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2);
 8002ece:	48b4      	ldr	r0, [pc, #720]	; (80031a0 <CommTask+0x700>)
 8002ed0:	f015 f926 	bl	8018120 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(2));
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f002 f853 	bl	8004f80 <genGetRealSmplFreq>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f015 f8ed 	bl	80180bc <commsSendUint32>
			break;
 8002ee2:	e1bb      	b.n	800325c <CommTask+0x7bc>
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_REAL_FREQ_CH1:
			commsSendString(STR_GENERATOR);
 8002ee4:	48ac      	ldr	r0, [pc, #688]	; (8003198 <CommTask+0x6f8>)
 8002ee6:	f015 f91b 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002eea:	48ae      	ldr	r0, [pc, #696]	; (80031a4 <CommTask+0x704>)
 8002eec:	f015 f918 	bl	8018120 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002ef0:	4bad      	ldr	r3, [pc, #692]	; (80031a8 <CommTask+0x708>)
 8002ef2:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8002efa:	eef0 0a67 	vmov.f32	s1, s15
 8002efe:	f015 f92f 	bl	8018160 <commsSendDouble>
			break;
 8002f02:	e1ab      	b.n	800325c <CommTask+0x7bc>
		case MSG_GEN_PWM_REAL_FREQ_CH2:
			commsSendString(STR_GENERATOR);
 8002f04:	48a4      	ldr	r0, [pc, #656]	; (8003198 <CommTask+0x6f8>)
 8002f06:	f015 f90b 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 8002f0a:	48a8      	ldr	r0, [pc, #672]	; (80031ac <CommTask+0x70c>)
 8002f0c:	f015 f908 	bl	8018120 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002f10:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <CommTask+0x708>)
 8002f12:	ed93 7b08 	vldr	d7, [r3, #32]
 8002f16:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1a:	eef0 0a67 	vmov.f32	s1, s15
 8002f1e:	f015 f91f 	bl	8018160 <commsSendDouble>
			break;
 8002f22:	e19b      	b.n	800325c <CommTask+0x7bc>
			/* ---------------------------------------------------- */
			/********************* COUNTER DATA *********************/
			/* ---------------------------------------------------- */
#ifdef USE_COUNTER
		case MSG_CNT_SEND_DATA:
			commsSendString(STR_COUNTER);
 8002f24:	48a2      	ldr	r0, [pc, #648]	; (80031b0 <CommTask+0x710>)
 8002f26:	f015 f8fb 	bl	8018120 <commsSendString>
			/* ETR mode configured */	
			if(counter.state==COUNTER_ETR){
 8002f2a:	4ba2      	ldr	r3, [pc, #648]	; (80031b4 <CommTask+0x714>)
 8002f2c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <CommTask+0x4b0>
				commsSendString(STR_CNT_ETR_DATA);
 8002f36:	48a0      	ldr	r0, [pc, #640]	; (80031b8 <CommTask+0x718>)
 8002f38:	f015 f8f2 	bl	8018120 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002f3c:	4b9d      	ldr	r3, [pc, #628]	; (80031b4 <CommTask+0x714>)
 8002f3e:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	f015 f909 	bl	8018160 <commsSendDouble>
				default:
					break;
				}
				counter.tiState = CLEAR;
			}
			break;
 8002f4e:	e184      	b.n	800325a <CommTask+0x7ba>
			}else if(counter.state==COUNTER_REF){
 8002f50:	4b98      	ldr	r3, [pc, #608]	; (80031b4 <CommTask+0x714>)
 8002f52:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d116      	bne.n	8002f8a <CommTask+0x4ea>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002f5c:	4b95      	ldr	r3, [pc, #596]	; (80031b4 <CommTask+0x714>)
 8002f5e:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10c      	bne.n	8002f82 <CommTask+0x4e2>
					commsSendString(STR_CNT_REF_DATA);
 8002f68:	4894      	ldr	r0, [pc, #592]	; (80031bc <CommTask+0x71c>)
 8002f6a:	f015 f8d9 	bl	8018120 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002f6e:	4b91      	ldr	r3, [pc, #580]	; (80031b4 <CommTask+0x714>)
 8002f70:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f74:	eeb0 0a47 	vmov.f32	s0, s14
 8002f78:	eef0 0a67 	vmov.f32	s1, s15
 8002f7c:	f015 f8f0 	bl	8018160 <commsSendDouble>
			break;
 8002f80:	e16b      	b.n	800325a <CommTask+0x7ba>
					commsSendString(STR_CNT_REF_WARN);
 8002f82:	488f      	ldr	r0, [pc, #572]	; (80031c0 <CommTask+0x720>)
 8002f84:	f015 f8cc 	bl	8018120 <commsSendString>
			break;
 8002f88:	e167      	b.n	800325a <CommTask+0x7ba>
			}else if(counter.state==COUNTER_IC){
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <CommTask+0x714>)
 8002f8c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d14c      	bne.n	8003030 <CommTask+0x590>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <CommTask+0x714>)
 8002f98:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d12d      	bne.n	8002ffe <CommTask+0x55e>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002fa2:	4b84      	ldr	r3, [pc, #528]	; (80031b4 <CommTask+0x714>)
 8002fa4:	f893 33c6 	ldrb.w	r3, [r3, #966]	; 0x3c6
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <CommTask+0x52e>
						commsSendString(STR_CNT_IC1_DATA);
 8002fae:	4885      	ldr	r0, [pc, #532]	; (80031c4 <CommTask+0x724>)
 8002fb0:	f015 f8b6 	bl	8018120 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002fb4:	4b7f      	ldr	r3, [pc, #508]	; (80031b4 <CommTask+0x714>)
 8002fb6:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8002fba:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbe:	eef0 0a67 	vmov.f32	s1, s15
 8002fc2:	f015 f8cd 	bl	8018160 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002fc6:	4b7b      	ldr	r3, [pc, #492]	; (80031b4 <CommTask+0x714>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8002fce:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <CommTask+0x714>)
 8002fd0:	f893 33c7 	ldrb.w	r3, [r3, #967]	; 0x3c7
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 813f 	bne.w	800325a <CommTask+0x7ba>
						commsSendString(STR_CNT_IC2_DATA);	
 8002fdc:	487a      	ldr	r0, [pc, #488]	; (80031c8 <CommTask+0x728>)
 8002fde:	f015 f89f 	bl	8018120 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8002fe2:	4b74      	ldr	r3, [pc, #464]	; (80031b4 <CommTask+0x714>)
 8002fe4:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8002fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fec:	eef0 0a67 	vmov.f32	s1, s15
 8002ff0:	f015 f8b6 	bl	8018160 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <CommTask+0x714>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			break;
 8002ffc:	e12d      	b.n	800325a <CommTask+0x7ba>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8002ffe:	4873      	ldr	r0, [pc, #460]	; (80031cc <CommTask+0x72c>)
 8003000:	f015 f88e 	bl	8018120 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8003004:	4b6b      	ldr	r3, [pc, #428]	; (80031b4 <CommTask+0x714>)
 8003006:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 800300a:	eeb0 0a47 	vmov.f32	s0, s14
 800300e:	eef0 0a67 	vmov.f32	s1, s15
 8003012:	f015 f8a5 	bl	8018160 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 8003016:	486e      	ldr	r0, [pc, #440]	; (80031d0 <CommTask+0x730>)
 8003018:	f015 f882 	bl	8018120 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 800301c:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <CommTask+0x714>)
 800301e:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8003022:	eeb0 0a47 	vmov.f32	s0, s14
 8003026:	eef0 0a67 	vmov.f32	s1, s15
 800302a:	f015 f899 	bl	8018160 <commsSendDouble>
			break;
 800302e:	e114      	b.n	800325a <CommTask+0x7ba>
			}else if(counter.state==COUNTER_TI){						
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <CommTask+0x714>)
 8003032:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b03      	cmp	r3, #3
 800303a:	f040 810e 	bne.w	800325a <CommTask+0x7ba>
				switch(counter.tiState){
 800303e:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <CommTask+0x714>)
 8003040:	f893 33c9 	ldrb.w	r3, [r3, #969]	; 0x3c9
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d002      	beq.n	8003050 <CommTask+0x5b0>
 800304a:	2b02      	cmp	r3, #2
 800304c:	d004      	beq.n	8003058 <CommTask+0x5b8>
					break;
 800304e:	e010      	b.n	8003072 <CommTask+0x5d2>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8003050:	4860      	ldr	r0, [pc, #384]	; (80031d4 <CommTask+0x734>)
 8003052:	f015 f865 	bl	8018120 <commsSendString>
					break;
 8003056:	e00c      	b.n	8003072 <CommTask+0x5d2>
					commsSendString(STR_CNT_TI_DATA);
 8003058:	485f      	ldr	r0, [pc, #380]	; (80031d8 <CommTask+0x738>)
 800305a:	f015 f861 	bl	8018120 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 800305e:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <CommTask+0x714>)
 8003060:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8003064:	eeb0 0a47 	vmov.f32	s0, s14
 8003068:	eef0 0a67 	vmov.f32	s1, s15
 800306c:	f015 f878 	bl	8018160 <commsSendDouble>
					break;
 8003070:	bf00      	nop
				counter.tiState = CLEAR;
 8003072:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <CommTask+0x714>)
 8003074:	2200      	movs	r2, #0
 8003076:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
			break;
 800307a:	e0ee      	b.n	800325a <CommTask+0x7ba>
			/* ---------------------------------------------------- */
			/* ------------------ END OF COUNTER ------------------ */
			/* ---------------------------------------------------- */
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_REAL_FREQ:
			commsSendString(STR_SYNC_PWM);
 800307c:	4857      	ldr	r0, [pc, #348]	; (80031dc <CommTask+0x73c>)
 800307e:	f015 f84f 	bl	8018120 <commsSendString>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 8003082:	4857      	ldr	r0, [pc, #348]	; (80031e0 <CommTask+0x740>)
 8003084:	f015 f84c 	bl	8018120 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 8003088:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <CommTask+0x744>)
 800308a:	ed93 7b06 	vldr	d7, [r3, #24]
 800308e:	eeb0 0a47 	vmov.f32	s0, s14
 8003092:	eef0 0a67 	vmov.f32	s1, s15
 8003096:	f015 f863 	bl	8018160 <commsSendDouble>
			break;
 800309a:	e0df      	b.n	800325c <CommTask+0x7bc>
#endif // USE_SYNC_PWM
		/* Send LOGIC ANALYZER data */
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_SEND_DATA:
			commsSendString(STR_LOGIC_ANLYS);
 800309c:	4852      	ldr	r0, [pc, #328]	; (80031e8 <CommTask+0x748>)
 800309e:	f015 f83f 	bl	8018120 <commsSendString>
			logAnlys.state = LOGA_DATA_SENDING;
 80030a2:	4b52      	ldr	r3, [pc, #328]	; (80031ec <CommTask+0x74c>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	749a      	strb	r2, [r3, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 80030a8:	4b50      	ldr	r3, [pc, #320]	; (80031ec <CommTask+0x74c>)
 80030aa:	7ddb      	ldrb	r3, [r3, #23]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <CommTask+0x628>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 80030b2:	484f      	ldr	r0, [pc, #316]	; (80031f0 <CommTask+0x750>)
 80030b4:	f015 f834 	bl	8018120 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <CommTask+0x74c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f014 fffd 	bl	80180bc <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <CommTask+0x74c>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	75da      	strb	r2, [r3, #23]
			//			commsSendUint32(logAnlys.samplesNumber * 2);
			//			commsSendString(STR_LOG_ANLYS_DATA);
			//			commsSendBuff((uint8_t *)&logAnlys.samplesNumber,(logAnlys.samplesNumber * 2));

			/* Send data */				
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 80030c8:	484a      	ldr	r0, [pc, #296]	; (80031f4 <CommTask+0x754>)
 80030ca:	f015 f829 	bl	8018120 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <CommTask+0x74c>)
 80030d0:	8a1b      	ldrh	r3, [r3, #16]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f014 ffee 	bl	80180bc <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 80030e0:	4845      	ldr	r0, [pc, #276]	; (80031f8 <CommTask+0x758>)
 80030e2:	f015 f81d 	bl	8018120 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <CommTask+0x74c>)
 80030e8:	68d9      	ldr	r1, [r3, #12]
 80030ea:	4b40      	ldr	r3, [pc, #256]	; (80031ec <CommTask+0x74c>)
 80030ec:	8a1b      	ldrh	r3, [r3, #16]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80030fe:	483f      	ldr	r0, [pc, #252]	; (80031fc <CommTask+0x75c>)
 8003100:	f00f fea2 	bl	8012e48 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <CommTask+0x74c>)
 8003106:	2203      	movs	r2, #3
 8003108:	749a      	strb	r2, [r3, #18]
			//      {
			//				//commsSendBuff((uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN);
			//				HAL_UART_Transmit(&huart2, (uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN, 5000);
			//				taskYIELD();
			//      }
			break;
 800310a:	e0a7      	b.n	800325c <CommTask+0x7bc>
#endif //USE_LOG_ANLYS
		case MSG_SYSTEM_CONFIG:
			sendSystConf();
 800310c:	f000 f9e8 	bl	80034e0 <sendSystConf>
			break;
 8003110:	e0a4      	b.n	800325c <CommTask+0x7bc>
		case MSG_COMMS_CONFIG:
			commsSendString(STR_SYSTEM);
 8003112:	483b      	ldr	r0, [pc, #236]	; (8003200 <CommTask+0x760>)
 8003114:	f015 f804 	bl	8018120 <commsSendString>
			sendCommsConf();
 8003118:	f000 fa8a 	bl	8003630 <sendCommsConf>
			break;
 800311c:	e09e      	b.n	800325c <CommTask+0x7bc>
#ifdef USE_SCOPE
		case MSG_SCOPE_CONFIG:
			commsSendString(STR_SCOPE);
 800311e:	4839      	ldr	r0, [pc, #228]	; (8003204 <CommTask+0x764>)
 8003120:	f014 fffe 	bl	8018120 <commsSendString>
			sendScopeConf();
 8003124:	f000 faee 	bl	8003704 <sendScopeConf>
			break;
 8003128:	e098      	b.n	800325c <CommTask+0x7bc>
		case MSG_SCOPE_INPUTS:
			commsSendString(STR_SCOPE);
 800312a:	4836      	ldr	r0, [pc, #216]	; (8003204 <CommTask+0x764>)
 800312c:	f014 fff8 	bl	8018120 <commsSendString>
			sendScopeInputs();
 8003130:	f000 fb88 	bl	8003844 <sendScopeInputs>
			break;
 8003134:	e092      	b.n	800325c <CommTask+0x7bc>
#endif //USE_SCOPE
#ifdef USE_COUNTER
		case MSG_CNT_CONFIG:
			commsSendString(STR_COUNTER);
 8003136:	481e      	ldr	r0, [pc, #120]	; (80031b0 <CommTask+0x710>)
 8003138:	f014 fff2 	bl	8018120 <commsSendString>
			sendCounterConf();
 800313c:	f000 fb50 	bl	80037e0 <sendCounterConf>
			break;
 8003140:	e08c      	b.n	800325c <CommTask+0x7bc>
			sendShieldPresence();
			break;
#endif //USE_SHIELD
#ifdef USE_GEN
		case MSG_GEN_CONFIG:
			commsSendString(STR_GENERATOR);
 8003142:	4815      	ldr	r0, [pc, #84]	; (8003198 <CommTask+0x6f8>)
 8003144:	f014 ffec 	bl	8018120 <commsSendString>
			sendGenConf();
 8003148:	f000 fbfc 	bl	8003944 <sendGenConf>
			break;
 800314c:	e086      	b.n	800325c <CommTask+0x7bc>
#endif //USE_GEN
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_CONFIG:
			commsSendString(STR_GENERATOR);
 800314e:	4812      	ldr	r0, [pc, #72]	; (8003198 <CommTask+0x6f8>)
 8003150:	f014 ffe6 	bl	8018120 <commsSendString>
			sendGenPwmConf();
 8003154:	f000 fc3c 	bl	80039d0 <sendGenPwmConf>
			break;
 8003158:	e080      	b.n	800325c <CommTask+0x7bc>
#endif //USE_GEN_PWM
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_CONFIG:
			commsSendString(STR_SYNC_PWM);
 800315a:	4820      	ldr	r0, [pc, #128]	; (80031dc <CommTask+0x73c>)
 800315c:	f014 ffe0 	bl	8018120 <commsSendString>
			sendSyncPwmConf();
 8003160:	f000 fc68 	bl	8003a34 <sendSyncPwmConf>
			break;
 8003164:	e07a      	b.n	800325c <CommTask+0x7bc>
#endif //USE_GEN_PWM
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_CONFIG:
			commsSendString(STR_LOGIC_ANLYS);
 8003166:	4820      	ldr	r0, [pc, #128]	; (80031e8 <CommTask+0x748>)
 8003168:	f014 ffda 	bl	8018120 <commsSendString>
			sendLogAnlysConf();
 800316c:	f000 fcaa 	bl	8003ac4 <sendLogAnlysConf>
			break;
 8003170:	e074      	b.n	800325c <CommTask+0x7bc>
#endif //USE_LOG_ANLYS
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_NEXT:	/* Gen send next data block */
			commsSendString(STR_GENERATOR);
 8003172:	4809      	ldr	r0, [pc, #36]	; (8003198 <CommTask+0x6f8>)
 8003174:	f014 ffd4 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_NEXT);
 8003178:	4823      	ldr	r0, [pc, #140]	; (8003208 <CommTask+0x768>)
 800317a:	f014 ffd1 	bl	8018120 <commsSendString>
			break;
 800317e:	e06d      	b.n	800325c <CommTask+0x7bc>
#endif //USE_GEN || USE_GEN_PWM
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_OK:	/* Gen send OK status */
			commsSendString(STR_GENERATOR);
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <CommTask+0x6f8>)
 8003182:	f014 ffcd 	bl	8018120 <commsSendString>
			commsSendString(STR_GEN_OK);
 8003186:	4821      	ldr	r0, [pc, #132]	; (800320c <CommTask+0x76c>)
 8003188:	f014 ffca 	bl	8018120 <commsSendString>
			break;
 800318c:	e066      	b.n	800325c <CommTask+0x7bc>
 800318e:	bf00      	nop
 8003190:	0801d788 	.word	0x0801d788
 8003194:	200070c0 	.word	0x200070c0
 8003198:	0801d790 	.word	0x0801d790
 800319c:	0801d798 	.word	0x0801d798
 80031a0:	0801d7a0 	.word	0x0801d7a0
 80031a4:	0801d7a8 	.word	0x0801d7a8
 80031a8:	20004948 	.word	0x20004948
 80031ac:	0801d7b0 	.word	0x0801d7b0
 80031b0:	0801d7b8 	.word	0x0801d7b8
 80031b4:	20004570 	.word	0x20004570
 80031b8:	0801d7c0 	.word	0x0801d7c0
 80031bc:	0801d7c8 	.word	0x0801d7c8
 80031c0:	0801d7d0 	.word	0x0801d7d0
 80031c4:	0801d7d8 	.word	0x0801d7d8
 80031c8:	0801d7e0 	.word	0x0801d7e0
 80031cc:	0801d7e8 	.word	0x0801d7e8
 80031d0:	0801d7f0 	.word	0x0801d7f0
 80031d4:	0801d7f8 	.word	0x0801d7f8
 80031d8:	0801d800 	.word	0x0801d800
 80031dc:	0801d808 	.word	0x0801d808
 80031e0:	0801d810 	.word	0x0801d810
 80031e4:	20015cb8 	.word	0x20015cb8
 80031e8:	0801d818 	.word	0x0801d818
 80031ec:	200070a0 	.word	0x200070a0
 80031f0:	0801d820 	.word	0x0801d820
 80031f4:	0801d828 	.word	0x0801d828
 80031f8:	0801d830 	.word	0x0801d830
 80031fc:	20016da0 	.word	0x20016da0
 8003200:	0801d764 	.word	0x0801d764
 8003204:	0801d780 	.word	0x0801d780
 8003208:	0801d838 	.word	0x0801d838
 800320c:	0801d840 	.word	0x0801d840
#endif //USE_GEN || USE_GEN_PWM
		case MSG_SYSTEM_VERSION:
			commsSendString(STR_SYSTEM);
 8003210:	4817      	ldr	r0, [pc, #92]	; (8003270 <CommTask+0x7d0>)
 8003212:	f014 ff85 	bl	8018120 <commsSendString>
			sendSystemVersion();
 8003216:	f000 fa27 	bl	8003668 <sendSystemVersion>
			break;
 800321a:	e01f      	b.n	800325c <CommTask+0x7bc>
		case MSG_ACK:
			commsSendString(STR_SYSTEM);
 800321c:	4814      	ldr	r0, [pc, #80]	; (8003270 <CommTask+0x7d0>)
 800321e:	f014 ff7f 	bl	8018120 <commsSendString>
			commsSendString(STR_ACK);
 8003222:	4814      	ldr	r0, [pc, #80]	; (8003274 <CommTask+0x7d4>)
 8003224:	f014 ff7c 	bl	8018120 <commsSendString>
			break;
 8003228:	e018      	b.n	800325c <CommTask+0x7bc>
#ifdef USE_SCOPE
		case MSG_SCOPE_TRIGGER:
			commsSendString(STR_SCOPE);
 800322a:	4813      	ldr	r0, [pc, #76]	; (8003278 <CommTask+0x7d8>)
 800322c:	f014 ff78 	bl	8018120 <commsSendString>
			commsSendString(STR_SCOPE_TRIG);
 8003230:	4812      	ldr	r0, [pc, #72]	; (800327c <CommTask+0x7dc>)
 8003232:	f014 ff75 	bl	8018120 <commsSendString>
			break;
 8003236:	e011      	b.n	800325c <CommTask+0x7bc>
		case MSG_SCOPE_SMPL_STARTED:
			commsSendString(STR_SCOPE);
 8003238:	480f      	ldr	r0, [pc, #60]	; (8003278 <CommTask+0x7d8>)
 800323a:	f014 ff71 	bl	8018120 <commsSendString>
			commsSendString(STR_SCOPE_SMPL);
 800323e:	4810      	ldr	r0, [pc, #64]	; (8003280 <CommTask+0x7e0>)
 8003240:	f014 ff6e 	bl	8018120 <commsSendString>
			break;
 8003244:	e00a      	b.n	800325c <CommTask+0x7bc>
#endif
		default:
			/* Not known message send */
			commsSendString(STR_SYSTEM);
 8003246:	480a      	ldr	r0, [pc, #40]	; (8003270 <CommTask+0x7d0>)
 8003248:	f014 ff6a 	bl	8018120 <commsSendString>
			commsSendUint32(message);
 800324c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800324e:	4618      	mov	r0, r3
 8003250:	f014 ff34 	bl	80180bc <commsSendUint32>
 8003254:	e002      	b.n	800325c <CommTask+0x7bc>
			break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <CommTask+0x7bc>
			break;
 800325a:	bf00      	nop
			//commsSendString(STR_UNKNOWN_MSG);
		}
		commsSendUint32(STR_DELIMITER);
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <CommTask+0x7e4>)
 800325e:	f014 ff2d 	bl	80180bc <commsSendUint32>
		//commsSendBuff((uint8_t *)(STR_DELIMITER), 4);
		//flushBuff(200);
		xSemaphoreGiveRecursive(commsMutex);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <CommTask+0x7e8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f011 fefa 	bl	8015060 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 800326c:	e447      	b.n	8002afe <CommTask+0x5e>
 800326e:	bf00      	nop
 8003270:	0801d764 	.word	0x0801d764
 8003274:	0801d848 	.word	0x0801d848
 8003278:	0801d780 	.word	0x0801d780
 800327c:	0801d850 	.word	0x0801d850
 8003280:	0801d858 	.word	0x0801d858
 8003284:	cafefade 	.word	0xcafefade
 8003288:	20000164 	.word	0x20000164

0800328c <commsInit>:
/**
 * @brief  Communication initialisation.
 * @param  None
 * @retval None
 */
void commsInit(void){
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
#ifdef USE_USB
	MX_USB_DEVICE_Init();
#endif //USE_USB
	MX_UART_Init();
 8003290:	f019 f89e 	bl	801c3d0 <MX_UART_Init>
	comm.memory = commBuffMem;
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <commsInit+0x2c>)
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <commsInit+0x30>)
 8003298:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <commsInit+0x2c>)
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	809a      	strh	r2, [r3, #4]
	comm.writePointer = 0;
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <commsInit+0x2c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	80da      	strh	r2, [r3, #6]
	comm.readPointer = 0;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <commsInit+0x2c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 80032ae:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <commsInit+0x2c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	729a      	strb	r2, [r3, #10]
	//	commTX.bufferSize = COMM_TX_BUFFER_SIZE;
	//	commTX.writePointer = 0;
	//	commTX.readPointer = 0;
	//	commTX.state = BUFF_EMPTY;
	//HAL_UART_Receive_DMA(&huart2,comm.memory,comm.bufferSize);
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000368 	.word	0x20000368
 80032bc:	20000168 	.word	0x20000168

080032c0 <commBufferStoreByte>:
/**
 * @brief  Store incoming byte to buffer
 * @param  incoming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commBufferStoreByte(uint8_t chr){
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	if(comm.state == BUFF_FULL){
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <commBufferStoreByte+0x78>)
 80032cc:	7a9b      	ldrb	r3, [r3, #10]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d101      	bne.n	80032d6 <commBufferStoreByte+0x16>
		return 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e029      	b.n	800332a <commBufferStoreByte+0x6a>
	}else{
		*(comm.memory + comm.writePointer) = chr;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <commBufferStoreByte+0x78>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <commBufferStoreByte+0x78>)
 80032dc:	88d2      	ldrh	r2, [r2, #6]
 80032de:	4413      	add	r3, r2
 80032e0:	79fa      	ldrb	r2, [r7, #7]
 80032e2:	701a      	strb	r2, [r3, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <commBufferStoreByte+0x78>)
 80032e6:	88db      	ldrh	r3, [r3, #6]
 80032e8:	3301      	adds	r3, #1
 80032ea:	425a      	negs	r2, r3
 80032ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f4:	bf58      	it	pl
 80032f6:	4253      	negpl	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <commBufferStoreByte+0x78>)
 80032fc:	80da      	strh	r2, [r3, #6]
		if(comm.state == BUFF_EMPTY){
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <commBufferStoreByte+0x78>)
 8003300:	7a9b      	ldrb	r3, [r3, #10]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <commBufferStoreByte+0x4e>
			comm.state = BUFF_DATA;
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <commBufferStoreByte+0x78>)
 8003308:	2201      	movs	r2, #1
 800330a:	729a      	strb	r2, [r3, #10]
 800330c:	e00c      	b.n	8003328 <commBufferStoreByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <commBufferStoreByte+0x78>)
 8003310:	7a9b      	ldrb	r3, [r3, #10]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <commBufferStoreByte+0x68>
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <commBufferStoreByte+0x78>)
 8003318:	88da      	ldrh	r2, [r3, #6]
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <commBufferStoreByte+0x78>)
 800331c:	891b      	ldrh	r3, [r3, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d102      	bne.n	8003328 <commBufferStoreByte+0x68>
			comm.state = BUFF_FULL;
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <commBufferStoreByte+0x78>)
 8003324:	2202      	movs	r2, #2
 8003326:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 8003328:	2300      	movs	r3, #0
	}
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000368 	.word	0x20000368

0800333c <commBufferReadByte>:
/**
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if(comm.state == BUFF_EMPTY){
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <commBufferReadByte+0x78>)
 8003346:	7a9b      	ldrb	r3, [r3, #10]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <commBufferReadByte+0x14>
		return 1;
 800334c:	2301      	movs	r3, #1
 800334e:	e02a      	b.n	80033a6 <commBufferReadByte+0x6a>
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8003350:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <commBufferReadByte+0x78>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <commBufferReadByte+0x78>)
 8003356:	8912      	ldrh	r2, [r2, #8]
 8003358:	4413      	add	r3, r2
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	701a      	strb	r2, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <commBufferReadByte+0x78>)
 8003362:	891b      	ldrh	r3, [r3, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	425a      	negs	r2, r3
 8003368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	bf58      	it	pl
 8003372:	4253      	negpl	r3, r2
 8003374:	b29a      	uxth	r2, r3
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <commBufferReadByte+0x78>)
 8003378:	811a      	strh	r2, [r3, #8]
		if(comm.state == BUFF_FULL){
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <commBufferReadByte+0x78>)
 800337c:	7a9b      	ldrb	r3, [r3, #10]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d103      	bne.n	800338a <commBufferReadByte+0x4e>
			comm.state = BUFF_DATA;
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <commBufferReadByte+0x78>)
 8003384:	2201      	movs	r2, #1
 8003386:	729a      	strb	r2, [r3, #10]
 8003388:	e00c      	b.n	80033a4 <commBufferReadByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <commBufferReadByte+0x78>)
 800338c:	7a9b      	ldrb	r3, [r3, #10]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <commBufferReadByte+0x68>
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <commBufferReadByte+0x78>)
 8003394:	88da      	ldrh	r2, [r3, #6]
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <commBufferReadByte+0x78>)
 8003398:	891b      	ldrh	r3, [r3, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d102      	bne.n	80033a4 <commBufferReadByte+0x68>
			comm.state = BUFF_EMPTY;
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <commBufferReadByte+0x78>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 80033a4:	2300      	movs	r3, #0
	}
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000368 	.word	0x20000368

080033b8 <commBufferReadNBytes>:
/**
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0; i < count; i++){
 80033c4:	2300      	movs	r3, #0
 80033c6:	81fb      	strh	r3, [r7, #14]
 80033c8:	e00e      	b.n	80033e8 <commBufferReadNBytes+0x30>
		if(commBufferReadByte(mem++) == 1){
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffb3 	bl	800333c <commBufferReadByte>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <commBufferReadNBytes+0x2a>
			return i;
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	e008      	b.n	80033f4 <commBufferReadNBytes+0x3c>
	for(uint16_t i = 0; i < count; i++){
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	3301      	adds	r3, #1
 80033e6:	81fb      	strh	r3, [r7, #14]
 80033e8:	89fa      	ldrh	r2, [r7, #14]
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3ec      	bcc.n	80033ca <commBufferReadNBytes+0x12>
		}
	}
	return count;
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
 8003402:	463b      	mov	r3, r7
 8003404:	2104      	movs	r1, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffd6 	bl	80033b8 <commBufferReadNBytes>
	uint32_t finalVal = array[0] & 0xFF;
 800340c:	783b      	ldrb	r3, [r7, #0]
 800340e:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[1]) << 8;
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[2]) << 16;
 800341c:	78bb      	ldrb	r3, [r7, #2]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[3]) << 24;
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	461a      	mov	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	607b      	str	r3, [r7, #4]
	return finalVal;
 8003434:	687b      	ldr	r3, [r7, #4]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
	if (chr==';'){
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b3b      	cmp	r3, #59	; 0x3b
 8003452:	d112      	bne.n	800347a <commInputByte+0x3a>
		result = commBufferStoreByte(chr);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff32 	bl	80032c0 <commBufferStoreByte>
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 8003460:	2332      	movs	r3, #50	; 0x32
 8003462:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <commInputByte+0x4c>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f107 0210 	add.w	r2, r7, #16
 800346c:	f107 010e 	add.w	r1, r7, #14
 8003470:	2300      	movs	r3, #0
 8003472:	f011 ff59 	bl	8015328 <xQueueGenericSendFromISR>
		return result;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	e004      	b.n	8003484 <commInputByte+0x44>
	}else{
		return commBufferStoreByte(chr);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff1f 	bl	80032c0 <commBufferStoreByte>
 8003482:	4603      	mov	r3, r0
	}
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20004558 	.word	0x20004558

08003490 <getBytesAvailable>:

uint16_t getBytesAvailable(){
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <getBytesAvailable+0x4c>)
 8003498:	7a9b      	ldrb	r3, [r3, #10]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d102      	bne.n	80034a4 <getBytesAvailable+0x14>
		return COMM_BUFFER_SIZE;
 800349e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a2:	e015      	b.n	80034d0 <getBytesAvailable+0x40>
	}else if(comm.state==BUFF_EMPTY){
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <getBytesAvailable+0x4c>)
 80034a6:	7a9b      	ldrb	r3, [r3, #10]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <getBytesAvailable+0x20>
		return 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e00f      	b.n	80034d0 <getBytesAvailable+0x40>
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <getBytesAvailable+0x4c>)
 80034b2:	88db      	ldrh	r3, [r3, #6]
 80034b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034b8:	4a08      	ldr	r2, [pc, #32]	; (80034dc <getBytesAvailable+0x4c>)
 80034ba:	8912      	ldrh	r2, [r2, #8]
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	425a      	negs	r2, r3
 80034c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c8:	bf58      	it	pl
 80034ca:	4253      	negpl	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
		return result;
 80034ce:	88fb      	ldrh	r3, [r7, #6]
	}
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000368 	.word	0x20000368

080034e0 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	commsSendString(STR_SYSTEM);
 80034e4:	4843      	ldr	r0, [pc, #268]	; (80035f4 <sendSystConf+0x114>)
 80034e6:	f014 fe1b 	bl	8018120 <commsSendString>
	commsSendString(STR_CONFIG);
 80034ea:	4843      	ldr	r0, [pc, #268]	; (80035f8 <sendSystConf+0x118>)
 80034ec:	f014 fe18 	bl	8018120 <commsSendString>
	commsSendString(IDN_STRING);
 80034f0:	4842      	ldr	r0, [pc, #264]	; (80035fc <sendSystConf+0x11c>)
 80034f2:	f014 fe15 	bl	8018120 <commsSendString>
	commsSendString(":");
 80034f6:	4842      	ldr	r0, [pc, #264]	; (8003600 <sendSystConf+0x120>)
 80034f8:	f014 fe12 	bl	8018120 <commsSendString>
		commsSendString(SHIELD_STRING);
	}else if(isScopeShieldConnected()==2){
		commsSendString(SHIELD_STRING_2);
	}
#else
	commsSendString(STR_NACK);
 80034fc:	4841      	ldr	r0, [pc, #260]	; (8003604 <sendSystConf+0x124>)
 80034fe:	f014 fe0f 	bl	8018120 <commsSendString>
#endif
	commsSendString(":");
 8003502:	483f      	ldr	r0, [pc, #252]	; (8003600 <sendSystConf+0x120>)
 8003504:	f014 fe0c 	bl	8018120 <commsSendString>
	commsSendString(MCU);
 8003508:	483f      	ldr	r0, [pc, #252]	; (8003608 <sendSystConf+0x128>)
 800350a:	f014 fe09 	bl	8018120 <commsSendString>
	commsSendString(":");
 800350e:	483c      	ldr	r0, [pc, #240]	; (8003600 <sendSystConf+0x120>)
 8003510:	f014 fe06 	bl	8018120 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 8003514:	f009 fcf4 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 8003518:	4603      	mov	r3, r0
 800351a:	4618      	mov	r0, r3
 800351c:	f014 fdce 	bl	80180bc <commsSendUint32>
	commsSendString(":");
 8003520:	4837      	ldr	r0, [pc, #220]	; (8003600 <sendSystConf+0x120>)
 8003522:	f014 fdfd 	bl	8018120 <commsSendString>
	commsSendBuff(MCU_UID,12);
 8003526:	4b39      	ldr	r3, [pc, #228]	; (800360c <sendSystConf+0x12c>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	210c      	movs	r1, #12
 800352c:	4618      	mov	r0, r3
 800352e:	f014 fde3 	bl	80180f8 <commsSendBuff>
	commsSendString(":");
 8003532:	4833      	ldr	r0, [pc, #204]	; (8003600 <sendSystConf+0x120>)
 8003534:	f014 fdf4 	bl	8018120 <commsSendString>
	commsSendString("LEO FW:"); 	//12
 8003538:	4835      	ldr	r0, [pc, #212]	; (8003610 <sendSystConf+0x130>)
 800353a:	f014 fdf1 	bl	8018120 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 800353e:	4835      	ldr	r0, [pc, #212]	; (8003614 <sendSystConf+0x134>)
 8003540:	f014 fdee 	bl	8018120 <commsSendString>
	commsSendString(":");						//4
 8003544:	482e      	ldr	r0, [pc, #184]	; (8003600 <sendSystConf+0x120>)
 8003546:	f014 fdeb 	bl	8018120 <commsSendString>
	commsSendString("FreeRTOS:");//8
 800354a:	4833      	ldr	r0, [pc, #204]	; (8003618 <sendSystConf+0x138>)
 800354c:	f014 fde8 	bl	8018120 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8003550:	4832      	ldr	r0, [pc, #200]	; (800361c <sendSystConf+0x13c>)
 8003552:	f014 fde5 	bl	8018120 <commsSendString>
	commsSendString(":");
 8003556:	482a      	ldr	r0, [pc, #168]	; (8003600 <sendSystConf+0x120>)
 8003558:	f014 fde2 	bl	8018120 <commsSendString>
	commsSendString("ST HAL:");				//6
 800355c:	4830      	ldr	r0, [pc, #192]	; (8003620 <sendSystConf+0x140>)
 800355e:	f014 fddf 	bl	8018120 <commsSendString>
	commsSend('V');
 8003562:	2056      	movs	r0, #86	; 0x56
 8003564:	f014 fd98 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8003568:	f003 fad6 	bl	8006b18 <HAL_GetHalVersion>
 800356c:	4603      	mov	r3, r0
 800356e:	0e1b      	lsrs	r3, r3, #24
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3330      	adds	r3, #48	; 0x30
 8003574:	b2db      	uxtb	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f014 fd8e 	bl	8018098 <commsSend>
	commsSend('.');
 800357c:	202e      	movs	r0, #46	; 0x2e
 800357e:	f014 fd8b 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8003582:	f003 fac9 	bl	8006b18 <HAL_GetHalVersion>
 8003586:	4603      	mov	r3, r0
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3330      	adds	r3, #48	; 0x30
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f014 fd81 	bl	8018098 <commsSend>
	commsSend('.');
 8003596:	202e      	movs	r0, #46	; 0x2e
 8003598:	f014 fd7e 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 800359c:	f003 fabc 	bl	8006b18 <HAL_GetHalVersion>
 80035a0:	4603      	mov	r3, r0
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3330      	adds	r3, #48	; 0x30
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f014 fd74 	bl	8018098 <commsSend>
	commsSendString(":");
 80035b0:	4813      	ldr	r0, [pc, #76]	; (8003600 <sendSystConf+0x120>)
 80035b2:	f014 fdb5 	bl	8018120 <commsSendString>
	commsSendString("COMM:");
 80035b6:	481b      	ldr	r0, [pc, #108]	; (8003624 <sendSystConf+0x144>)
 80035b8:	f014 fdb2 	bl	8018120 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 80035bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035c0:	f014 fd7c 	bl	80180bc <commsSendUint32>
	commsSendString(":");
 80035c4:	480e      	ldr	r0, [pc, #56]	; (8003600 <sendSystConf+0x120>)
 80035c6:	f014 fdab 	bl	8018120 <commsSendString>
	commsSendUint32(UART_SPEED);
 80035ca:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 80035ce:	f014 fd75 	bl	80180bc <commsSendUint32>
	commsSendString(":");
 80035d2:	480b      	ldr	r0, [pc, #44]	; (8003600 <sendSystConf+0x120>)
 80035d4:	f014 fda4 	bl	8018120 <commsSendString>
	commsSendString(USART_TX_PIN_STR);
 80035d8:	4813      	ldr	r0, [pc, #76]	; (8003628 <sendSystConf+0x148>)
 80035da:	f014 fda1 	bl	8018120 <commsSendString>
	commsSendString(":");
 80035de:	4808      	ldr	r0, [pc, #32]	; (8003600 <sendSystConf+0x120>)
 80035e0:	f014 fd9e 	bl	8018120 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 80035e4:	4811      	ldr	r0, [pc, #68]	; (800362c <sendSystConf+0x14c>)
 80035e6:	f014 fd9b 	bl	8018120 <commsSendString>
	commsSendString(":");
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <sendSystConf+0x120>)
 80035ec:	f014 fd98 	bl	8018120 <commsSendString>
	commsSendString(":");
	commsSendString(USB_DM_PIN_STR);
	commsSendString(":");
#endif

}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0801d764 	.word	0x0801d764
 80035f8:	0801d884 	.word	0x0801d884
 80035fc:	0801d76c 	.word	0x0801d76c
 8003600:	0801d88c 	.word	0x0801d88c
 8003604:	0801d890 	.word	0x0801d890
 8003608:	0801d898 	.word	0x0801d898
 800360c:	1fff7590 	.word	0x1fff7590
 8003610:	0801d8a4 	.word	0x0801d8a4
 8003614:	0801d8ac 	.word	0x0801d8ac
 8003618:	0801d8b4 	.word	0x0801d8b4
 800361c:	0801d8c0 	.word	0x0801d8c0
 8003620:	0801d8c8 	.word	0x0801d8c8
 8003624:	0801d8d0 	.word	0x0801d8d0
 8003628:	0801d8d8 	.word	0x0801d8d8
 800362c:	0801d8e0 	.word	0x0801d8e0

08003630 <sendCommsConf>:
/**
 * @brief  Send Communication configuration.
 * @param  None
 * @retval None
 */
void sendCommsConf(){
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	commsSendString("COMM");
 8003634:	4809      	ldr	r0, [pc, #36]	; (800365c <sendCommsConf+0x2c>)
 8003636:	f014 fd73 	bl	8018120 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 800363a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800363e:	f014 fd3d 	bl	80180bc <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8003642:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8003646:	f014 fd39 	bl	80180bc <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <sendCommsConf+0x30>)
 800364c:	f014 fd68 	bl	8018120 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <sendCommsConf+0x34>)
 8003652:	f014 fd65 	bl	8018120 <commsSendString>
#ifdef USE_USB
	commsSendString("USB_");
	commsSendString(USB_DP_PIN_STR);
	commsSendString(USB_DM_PIN_STR);
#endif
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	0801d8e8 	.word	0x0801d8e8
 8003660:	0801d8d8 	.word	0x0801d8d8
 8003664:	0801d8e0 	.word	0x0801d8e0

08003668 <sendSystemVersion>:
/**
 * @brief  Send System version.
 * @param  None
 * @retval None
 */
void sendSystemVersion(){
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	commsSendString("VER_");
 800366c:	481e      	ldr	r0, [pc, #120]	; (80036e8 <sendSystemVersion+0x80>)
 800366e:	f014 fd57 	bl	8018120 <commsSendString>
	commsSendString("LEO FW"); 	//12
 8003672:	481e      	ldr	r0, [pc, #120]	; (80036ec <sendSystemVersion+0x84>)
 8003674:	f014 fd54 	bl	8018120 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8003678:	481d      	ldr	r0, [pc, #116]	; (80036f0 <sendSystemVersion+0x88>)
 800367a:	f014 fd51 	bl	8018120 <commsSendString>
	commsSendString(BUILD);						//4
 800367e:	481d      	ldr	r0, [pc, #116]	; (80036f4 <sendSystemVersion+0x8c>)
 8003680:	f014 fd4e 	bl	8018120 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8003684:	481c      	ldr	r0, [pc, #112]	; (80036f8 <sendSystemVersion+0x90>)
 8003686:	f014 fd4b 	bl	8018120 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 800368a:	481c      	ldr	r0, [pc, #112]	; (80036fc <sendSystemVersion+0x94>)
 800368c:	f014 fd48 	bl	8018120 <commsSendString>
	commsSendString("ST HAL");				//6
 8003690:	481b      	ldr	r0, [pc, #108]	; (8003700 <sendSystemVersion+0x98>)
 8003692:	f014 fd45 	bl	8018120 <commsSendString>
	commsSend('V');
 8003696:	2056      	movs	r0, #86	; 0x56
 8003698:	f014 fcfe 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 800369c:	f003 fa3c 	bl	8006b18 <HAL_GetHalVersion>
 80036a0:	4603      	mov	r3, r0
 80036a2:	0e1b      	lsrs	r3, r3, #24
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3330      	adds	r3, #48	; 0x30
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4618      	mov	r0, r3
 80036ac:	f014 fcf4 	bl	8018098 <commsSend>
	commsSend('.');
 80036b0:	202e      	movs	r0, #46	; 0x2e
 80036b2:	f014 fcf1 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 80036b6:	f003 fa2f 	bl	8006b18 <HAL_GetHalVersion>
 80036ba:	4603      	mov	r3, r0
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3330      	adds	r3, #48	; 0x30
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f014 fce7 	bl	8018098 <commsSend>
	commsSend('.');
 80036ca:	202e      	movs	r0, #46	; 0x2e
 80036cc:	f014 fce4 	bl	8018098 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80036d0:	f003 fa22 	bl	8006b18 <HAL_GetHalVersion>
 80036d4:	4603      	mov	r3, r0
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3330      	adds	r3, #48	; 0x30
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f014 fcda 	bl	8018098 <commsSend>

}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	0801d8f0 	.word	0x0801d8f0
 80036ec:	0801d8f8 	.word	0x0801d8f8
 80036f0:	0801d8ac 	.word	0x0801d8ac
 80036f4:	0801d900 	.word	0x0801d900
 80036f8:	0801d908 	.word	0x0801d908
 80036fc:	0801d8c0 	.word	0x0801d8c0
 8003700:	0801d914 	.word	0x0801d914

08003704 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString(STR_CONFIG);
 800370a:	482d      	ldr	r0, [pc, #180]	; (80037c0 <sendScopeConf+0xbc>)
 800370c:	f014 fd08 	bl	8018120 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 8003710:	482c      	ldr	r0, [pc, #176]	; (80037c4 <sendScopeConf+0xc0>)
 8003712:	f014 fcd3 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 8003716:	f64e 2060 	movw	r0, #60000	; 0xea60
 800371a:	f014 fccf 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 800371e:	2004      	movs	r0, #4
 8003720:	f014 fccc 	bl	80180bc <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003724:	2300      	movs	r3, #0
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	e022      	b.n	8003770 <sendScopeConf+0x6c>
		switch(i){
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d81b      	bhi.n	8003768 <sendScopeConf+0x64>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <sendScopeConf+0x34>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	08003751 	.word	0x08003751
 8003740:	08003759 	.word	0x08003759
 8003744:	08003761 	.word	0x08003761
		case 0:
			commsSendString(SCOPE_CH1_PIN_STR);
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <sendScopeConf+0xc4>)
 800374a:	f014 fce9 	bl	8018120 <commsSendString>
			break;
 800374e:	e00b      	b.n	8003768 <sendScopeConf+0x64>
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
 8003750:	481e      	ldr	r0, [pc, #120]	; (80037cc <sendScopeConf+0xc8>)
 8003752:	f014 fce5 	bl	8018120 <commsSendString>
			break;
 8003756:	e007      	b.n	8003768 <sendScopeConf+0x64>
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 8003758:	481d      	ldr	r0, [pc, #116]	; (80037d0 <sendScopeConf+0xcc>)
 800375a:	f014 fce1 	bl	8018120 <commsSendString>
			break;
 800375e:	e003      	b.n	8003768 <sendScopeConf+0x64>
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 8003760:	481c      	ldr	r0, [pc, #112]	; (80037d4 <sendScopeConf+0xd0>)
 8003762:	f014 fcdd 	bl	8018120 <commsSendString>
			break;
 8003766:	bf00      	nop
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	3301      	adds	r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	71fb      	strb	r3, [r7, #7]
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d9d9      	bls.n	800372a <sendScopeConf+0x26>
		}
	}
	commsSendUint32(SCOPE_VREF);
 8003776:	f640 40e4 	movw	r0, #3300	; 0xce4
 800377a:	f014 fc9f 	bl	80180bc <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <sendScopeConf+0xd4>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003788:	fb03 f302 	mul.w	r3, r3, r2
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <sendScopeConf+0xd8>)
 800378e:	fb82 1203 	smull	r1, r2, r2, r3
 8003792:	441a      	add	r2, r3
 8003794:	12d2      	asrs	r2, r2, #11
 8003796:	17db      	asrs	r3, r3, #31
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f014 fc8e 	bl	80180bc <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 ffb6 	bl	8006714 <scopeGetRanges>
 80037a8:	4602      	mov	r2, r0
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f014 fca1 	bl	80180f8 <commsSendBuff>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	0801d884 	.word	0x0801d884
 80037c4:	003d0900 	.word	0x003d0900
 80037c8:	0801d91c 	.word	0x0801d91c
 80037cc:	0801d924 	.word	0x0801d924
 80037d0:	0801d92c 	.word	0x0801d92c
 80037d4:	0801d754 	.word	0x0801d754
 80037d8:	1fff75aa 	.word	0x1fff75aa
 80037dc:	9ee009ef 	.word	0x9ee009ef

080037e0 <sendCounterConf>:
/**
 * @brief  Send Counter configuration.
 * @param  None
 * @retval None
 */
void sendCounterConf(){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	commsSendString("CNT_");
 80037e4:	4811      	ldr	r0, [pc, #68]	; (800382c <sendCounterConf+0x4c>)
 80037e6:	f014 fc9b 	bl	8018120 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 80037ea:	4811      	ldr	r0, [pc, #68]	; (8003830 <sendCounterConf+0x50>)
 80037ec:	f014 fc66 	bl	80180bc <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 80037f0:	480f      	ldr	r0, [pc, #60]	; (8003830 <sendCounterConf+0x50>)
 80037f2:	f014 fc63 	bl	80180bc <commsSendUint32>
	commsSendString(COUNTER_MODES);
 80037f6:	480f      	ldr	r0, [pc, #60]	; (8003834 <sendCounterConf+0x54>)
 80037f8:	f014 fc92 	bl	8018120 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 80037fc:	480e      	ldr	r0, [pc, #56]	; (8003838 <sendCounterConf+0x58>)
 80037fe:	f014 fc8f 	bl	8018120 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8003802:	480d      	ldr	r0, [pc, #52]	; (8003838 <sendCounterConf+0x58>)
 8003804:	f014 fc8c 	bl	8018120 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8003808:	480c      	ldr	r0, [pc, #48]	; (800383c <sendCounterConf+0x5c>)
 800380a:	f014 fc89 	bl	8018120 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 800380e:	480c      	ldr	r0, [pc, #48]	; (8003840 <sendCounterConf+0x60>)
 8003810:	f014 fc86 	bl	8018120 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8003814:	4808      	ldr	r0, [pc, #32]	; (8003838 <sendCounterConf+0x58>)
 8003816:	f014 fc83 	bl	8018120 <commsSendString>
	/* Timer Interval pins (Events) */
	commsSendString(CNT_IC_CH1_PIN);
 800381a:	4807      	ldr	r0, [pc, #28]	; (8003838 <sendCounterConf+0x58>)
 800381c:	f014 fc80 	bl	8018120 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8003820:	4806      	ldr	r0, [pc, #24]	; (800383c <sendCounterConf+0x5c>)
 8003822:	f014 fc7d 	bl	8018120 <commsSendString>

	/* Scope Get Config is the last configuration demand - reconfig usart baud */
	//	huart2.Init.BaudRate = 2000000;
	//  HAL_UART_Init(&huart2);
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0801d7b8 	.word	0x0801d7b8
 8003830:	0a037a00 	.word	0x0a037a00
 8003834:	0801d934 	.word	0x0801d934
 8003838:	0801d940 	.word	0x0801d940
 800383c:	0801d944 	.word	0x0801d944
 8003840:	0801d948 	.word	0x0801d948

08003844 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	uint8_t i,j;
	commsSendString("INP_");
 800384a:	4835      	ldr	r0, [pc, #212]	; (8003920 <sendScopeInputs+0xdc>)
 800384c:	f014 fc68 	bl	8018120 <commsSendString>

	if(MAX_ADC_CHANNELS>=1){
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8003850:	2300      	movs	r3, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f014 fc20 	bl	8018098 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=2){
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 8003858:	2300      	movs	r3, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f014 fc1c 	bl	8018098 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=3){
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 8003860:	2300      	movs	r3, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f014 fc18 	bl	8018098 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 8003868:	2300      	movs	r3, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f014 fc14 	bl	8018098 <commsSend>
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003870:	2300      	movs	r3, #0
 8003872:	71fb      	strb	r3, [r7, #7]
 8003874:	e046      	b.n	8003904 <sendScopeInputs+0xc0>
		commsSendString("/");
 8003876:	482b      	ldr	r0, [pc, #172]	; (8003924 <sendScopeInputs+0xe0>)
 8003878:	f014 fc52 	bl	8018120 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 800387c:	2300      	movs	r3, #0
 800387e:	71bb      	strb	r3, [r7, #6]
 8003880:	e037      	b.n	80038f2 <sendScopeInputs+0xae>
			if(j>0){
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <sendScopeInputs+0x4a>
				commsSendString(":");
 8003888:	4827      	ldr	r0, [pc, #156]	; (8003928 <sendScopeInputs+0xe4>)
 800388a:	f014 fc49 	bl	8018120 <commsSendString>
			}
			switch(i){
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d82b      	bhi.n	80038ec <sendScopeInputs+0xa8>
 8003894:	a201      	add	r2, pc, #4	; (adr r2, 800389c <sendScopeInputs+0x58>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038bd 	.word	0x080038bd
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038dd 	.word	0x080038dd
			case 0:
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 80038ac:	79bb      	ldrb	r3, [r7, #6]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <sendScopeInputs+0xe8>)
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f014 fc33 	bl	8018120 <commsSendString>
				break;
 80038ba:	e017      	b.n	80038ec <sendScopeInputs+0xa8>
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 80038bc:	79bb      	ldrb	r3, [r7, #6]
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <sendScopeInputs+0xec>)
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f014 fc2b 	bl	8018120 <commsSendString>
				break;
 80038ca:	e00f      	b.n	80038ec <sendScopeInputs+0xa8>
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 80038cc:	79bb      	ldrb	r3, [r7, #6]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <sendScopeInputs+0xf0>)
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f014 fc23 	bl	8018120 <commsSendString>
				break;
 80038da:	e007      	b.n	80038ec <sendScopeInputs+0xa8>
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 80038dc:	79bb      	ldrb	r3, [r7, #6]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <sendScopeInputs+0xf4>)
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f014 fc1b 	bl	8018120 <commsSendString>
				break;
 80038ea:	bf00      	nop
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80038ec:	79bb      	ldrb	r3, [r7, #6]
 80038ee:	3301      	adds	r3, #1
 80038f0:	71bb      	strb	r3, [r7, #6]
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4a11      	ldr	r2, [pc, #68]	; (800393c <sendScopeInputs+0xf8>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	79ba      	ldrb	r2, [r7, #6]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3c1      	bcc.n	8003882 <sendScopeInputs+0x3e>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	3301      	adds	r3, #1
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d9b5      	bls.n	8003876 <sendScopeInputs+0x32>
			}
		}
	}
	commsSendString("/");
 800390a:	4806      	ldr	r0, [pc, #24]	; (8003924 <sendScopeInputs+0xe0>)
 800390c:	f014 fc08 	bl	8018120 <commsSendString>
	commsSendString(";");
 8003910:	480b      	ldr	r0, [pc, #44]	; (8003940 <sendScopeInputs+0xfc>)
 8003912:	f014 fc05 	bl	8018120 <commsSendString>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	0801d94c 	.word	0x0801d94c
 8003924:	0801d954 	.word	0x0801d954
 8003928:	0801d88c 	.word	0x0801d88c
 800392c:	20000000 	.word	0x20000000
 8003930:	20000024 	.word	0x20000024
 8003934:	20000044 	.word	0x20000044
 8003938:	20000054 	.word	0x20000054
 800393c:	0801dfa0 	.word	0x0801dfa0
 8003940:	0801d958 	.word	0x0801d958

08003944 <sendGenConf>:
/**
 * @brief  Send Arb. DAC Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenConf(){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GEN_");
 800394a:	481d      	ldr	r0, [pc, #116]	; (80039c0 <sendGenConf+0x7c>)
 800394c:	f014 fbe8 	bl	8018120 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8003950:	481c      	ldr	r0, [pc, #112]	; (80039c4 <sendGenConf+0x80>)
 8003952:	f014 fbb3 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 8003956:	f242 7010 	movw	r0, #10000	; 0x2710
 800395a:	f014 fbaf 	bl	80180bc <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 800395e:	200c      	movs	r0, #12
 8003960:	f014 fbac 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8003964:	2002      	movs	r0, #2
 8003966:	f014 fba9 	bl	80180bc <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 800396a:	2300      	movs	r3, #0
 800396c:	71fb      	strb	r3, [r7, #7]
 800396e:	e010      	b.n	8003992 <sendGenConf+0x4e>
		switch(i){
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <sendGenConf+0x38>
 8003976:	2b01      	cmp	r3, #1
 8003978:	d004      	beq.n	8003984 <sendGenConf+0x40>
 800397a:	e007      	b.n	800398c <sendGenConf+0x48>
		case 0:
			commsSendString(GEN_CH1_PIN_STR);
 800397c:	4812      	ldr	r0, [pc, #72]	; (80039c8 <sendGenConf+0x84>)
 800397e:	f014 fbcf 	bl	8018120 <commsSendString>
			break;
 8003982:	e003      	b.n	800398c <sendGenConf+0x48>
		case 1:
			commsSendString(GEN_CH2_PIN_STR);
 8003984:	4811      	ldr	r0, [pc, #68]	; (80039cc <sendGenConf+0x88>)
 8003986:	f014 fbcb 	bl	8018120 <commsSendString>
			break;
 800398a:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	3301      	adds	r3, #1
 8003990:	71fb      	strb	r3, [r7, #7]
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d9eb      	bls.n	8003970 <sendGenConf+0x2c>
	}else{
		commsSendUint32(0);
		commsSendUint32(GEN_VREF);
	}
#else
	commsSendUint32(0);
 8003998:	2000      	movs	r0, #0
 800399a:	f014 fb8f 	bl	80180bc <commsSendUint32>
	commsSendUint32(GEN_VREF);
 800399e:	f640 40e4 	movw	r0, #3300	; 0xce4
 80039a2:	f014 fb8b 	bl	80180bc <commsSendUint32>
#endif
	commsSendUint32(GEN_VDDA);
 80039a6:	f640 40e4 	movw	r0, #3300	; 0xce4
 80039aa:	f014 fb87 	bl	80180bc <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 80039ae:	f240 40ba 	movw	r0, #1210	; 0x4ba
 80039b2:	f014 fb83 	bl	80180bc <commsSendUint32>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	0801d790 	.word	0x0801d790
 80039c4:	001e8480 	.word	0x001e8480
 80039c8:	0801d95c 	.word	0x0801d95c
 80039cc:	0801d964 	.word	0x0801d964

080039d0 <sendGenPwmConf>:
/**
 * @brief  Send Arb. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenPwmConf(void){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GENP");		
 80039d6:	4813      	ldr	r0, [pc, #76]	; (8003a24 <sendGenPwmConf+0x54>)
 80039d8:	f014 fba2 	bl	8018120 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 80039dc:	2002      	movs	r0, #2
 80039de:	f014 fb6d 	bl	80180bc <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 80039e2:	4811      	ldr	r0, [pc, #68]	; (8003a28 <sendGenPwmConf+0x58>)
 80039e4:	f014 fb6a 	bl	80180bc <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 80039e8:	480f      	ldr	r0, [pc, #60]	; (8003a28 <sendGenPwmConf+0x58>)
 80039ea:	f014 fb67 	bl	80180bc <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 80039ee:	2300      	movs	r3, #0
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	e010      	b.n	8003a16 <sendGenPwmConf+0x46>
		switch(i){
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <sendGenPwmConf+0x30>
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d004      	beq.n	8003a08 <sendGenPwmConf+0x38>
 80039fe:	e007      	b.n	8003a10 <sendGenPwmConf+0x40>
		case 0:
			commsSendString(GEN_PWM_CH1_PIN);
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <sendGenPwmConf+0x5c>)
 8003a02:	f014 fb8d 	bl	8018120 <commsSendString>
			break;
 8003a06:	e003      	b.n	8003a10 <sendGenPwmConf+0x40>
		case 1:
			commsSendString(GEN_PWM_CH2_PIN);
 8003a08:	4809      	ldr	r0, [pc, #36]	; (8003a30 <sendGenPwmConf+0x60>)
 8003a0a:	f014 fb89 	bl	8018120 <commsSendString>
			break;
 8003a0e:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	3301      	adds	r3, #1
 8003a14:	71fb      	strb	r3, [r7, #7]
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d9eb      	bls.n	80039f4 <sendGenPwmConf+0x24>
		}
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	0801d96c 	.word	0x0801d96c
 8003a28:	0a037a00 	.word	0x0a037a00
 8003a2c:	0801d974 	.word	0x0801d974
 8003a30:	0801d97c 	.word	0x0801d97c

08003a34 <sendSyncPwmConf>:
 * @brief  Send Synch. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendSyncPwmConf(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("SYNP");		
 8003a3a:	481b      	ldr	r0, [pc, #108]	; (8003aa8 <sendSyncPwmConf+0x74>)
 8003a3c:	f014 fb70 	bl	8018120 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8003a40:	481a      	ldr	r0, [pc, #104]	; (8003aac <sendSyncPwmConf+0x78>)
 8003a42:	f014 fb3b 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 8003a46:	481a      	ldr	r0, [pc, #104]	; (8003ab0 <sendSyncPwmConf+0x7c>)
 8003a48:	f014 fb38 	bl	80180bc <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8003a4c:	2004      	movs	r0, #4
 8003a4e:	f014 fb35 	bl	80180bc <commsSendUint32>
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8003a52:	2300      	movs	r3, #0
 8003a54:	71fb      	strb	r3, [r7, #7]
 8003a56:	e020      	b.n	8003a9a <sendSyncPwmConf+0x66>
		switch(i){
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d81a      	bhi.n	8003a94 <sendSyncPwmConf+0x60>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <sendSyncPwmConf+0x30>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a8d 	.word	0x08003a8d
		case 0:
			commsSendString(SYNC_PWM_CH1_PIN);
 8003a74:	480f      	ldr	r0, [pc, #60]	; (8003ab4 <sendSyncPwmConf+0x80>)
 8003a76:	f014 fb53 	bl	8018120 <commsSendString>
			break;
 8003a7a:	e00b      	b.n	8003a94 <sendSyncPwmConf+0x60>
		case 1:
			commsSendString(SYNC_PWM_CH2_PIN);
 8003a7c:	480e      	ldr	r0, [pc, #56]	; (8003ab8 <sendSyncPwmConf+0x84>)
 8003a7e:	f014 fb4f 	bl	8018120 <commsSendString>
			break;
 8003a82:	e007      	b.n	8003a94 <sendSyncPwmConf+0x60>
		case 2:
			commsSendString(SYNC_PWM_CH3_PIN);
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <sendSyncPwmConf+0x88>)
 8003a86:	f014 fb4b 	bl	8018120 <commsSendString>
			break;
 8003a8a:	e003      	b.n	8003a94 <sendSyncPwmConf+0x60>
		case 3:
			commsSendString(SYNC_PWM_CH4_PIN);
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <sendSyncPwmConf+0x8c>)
 8003a8e:	f014 fb47 	bl	8018120 <commsSendString>
			break;
 8003a92:	bf00      	nop
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	3301      	adds	r3, #1
 8003a98:	71fb      	strb	r3, [r7, #7]
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d9db      	bls.n	8003a58 <sendSyncPwmConf+0x24>
		}
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	0801d984 	.word	0x0801d984
 8003aac:	0a037a00 	.word	0x0a037a00
 8003ab0:	000186a0 	.word	0x000186a0
 8003ab4:	0801d98c 	.word	0x0801d98c
 8003ab8:	0801d994 	.word	0x0801d994
 8003abc:	0801d99c 	.word	0x0801d99c
 8003ac0:	0801d9a4 	.word	0x0801d9a4

08003ac4 <sendLogAnlysConf>:
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("LOGA");
 8003aca:	482b      	ldr	r0, [pc, #172]	; (8003b78 <sendLogAnlysConf+0xb4>)
 8003acc:	f014 fb28 	bl	8018120 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 8003ad0:	482a      	ldr	r0, [pc, #168]	; (8003b7c <sendLogAnlysConf+0xb8>)
 8003ad2:	f014 faf3 	bl	80180bc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 8003ad6:	4829      	ldr	r0, [pc, #164]	; (8003b7c <sendLogAnlysConf+0xb8>)
 8003ad8:	f014 faf0 	bl	80180bc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 8003adc:	4828      	ldr	r0, [pc, #160]	; (8003b80 <sendLogAnlysConf+0xbc>)
 8003ade:	f014 faed 	bl	80180bc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 8003ae2:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003ae6:	f014 fae9 	bl	80180bc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 8003aea:	2008      	movs	r0, #8
 8003aec:	f014 fae6 	bl	80180bc <commsSendUint32>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8003af0:	2300      	movs	r3, #0
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	e039      	b.n	8003b6a <sendLogAnlysConf+0xa6>
		switch(i){
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d833      	bhi.n	8003b64 <sendLogAnlysConf+0xa0>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <sendLogAnlysConf+0x40>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b25 	.word	0x08003b25
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b45 	.word	0x08003b45
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003b5d 	.word	0x08003b5d
		case 0:
			commsSendString(LOG_ANLYS_PIN_CH1);
 8003b24:	4817      	ldr	r0, [pc, #92]	; (8003b84 <sendLogAnlysConf+0xc0>)
 8003b26:	f014 fafb 	bl	8018120 <commsSendString>
			break;
 8003b2a:	e01b      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 1:
			commsSendString(LOG_ANLYS_PIN_CH2);
 8003b2c:	4816      	ldr	r0, [pc, #88]	; (8003b88 <sendLogAnlysConf+0xc4>)
 8003b2e:	f014 faf7 	bl	8018120 <commsSendString>
			break;
 8003b32:	e017      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 2:
			commsSendString(LOG_ANLYS_PIN_CH3);
 8003b34:	4815      	ldr	r0, [pc, #84]	; (8003b8c <sendLogAnlysConf+0xc8>)
 8003b36:	f014 faf3 	bl	8018120 <commsSendString>
			break;
 8003b3a:	e013      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 3:
			commsSendString(LOG_ANLYS_PIN_CH4);
 8003b3c:	4814      	ldr	r0, [pc, #80]	; (8003b90 <sendLogAnlysConf+0xcc>)
 8003b3e:	f014 faef 	bl	8018120 <commsSendString>
			break;
 8003b42:	e00f      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 4:
			commsSendString(LOG_ANLYS_PIN_CH5);
 8003b44:	4813      	ldr	r0, [pc, #76]	; (8003b94 <sendLogAnlysConf+0xd0>)
 8003b46:	f014 faeb 	bl	8018120 <commsSendString>
			break;
 8003b4a:	e00b      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
 8003b4c:	4812      	ldr	r0, [pc, #72]	; (8003b98 <sendLogAnlysConf+0xd4>)
 8003b4e:	f014 fae7 	bl	8018120 <commsSendString>
			break;
 8003b52:	e007      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 8003b54:	4811      	ldr	r0, [pc, #68]	; (8003b9c <sendLogAnlysConf+0xd8>)
 8003b56:	f014 fae3 	bl	8018120 <commsSendString>
			break;
 8003b5a:	e003      	b.n	8003b64 <sendLogAnlysConf+0xa0>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 8003b5c:	4810      	ldr	r0, [pc, #64]	; (8003ba0 <sendLogAnlysConf+0xdc>)
 8003b5e:	f014 fadf 	bl	8018120 <commsSendString>
			break;
 8003b62:	bf00      	nop
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	3301      	adds	r3, #1
 8003b68:	71fb      	strb	r3, [r7, #7]
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	2b07      	cmp	r3, #7
 8003b6e:	d9c2      	bls.n	8003af6 <sendLogAnlysConf+0x32>
		}
	}	
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	0801d9ac 	.word	0x0801d9ac
 8003b7c:	0a037a00 	.word	0x0a037a00
 8003b80:	0280de80 	.word	0x0280de80
 8003b84:	0801d9b4 	.word	0x0801d9b4
 8003b88:	0801d9bc 	.word	0x0801d9bc
 8003b8c:	0801d9c4 	.word	0x0801d9c4
 8003b90:	0801d9cc 	.word	0x0801d9cc
 8003b94:	0801d9d4 	.word	0x0801d9d4
 8003b98:	0801d71c 	.word	0x0801d71c
 8003b9c:	0801d75c 	.word	0x0801d75c
 8003ba0:	0801d74c 	.word	0x0801d74c

08003ba4 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 8003bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb0:	81fb      	strh	r3, [r7, #14]
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	201e      	movs	r0, #30
 8003bb8:	f011 f9c8 	bl	8014f4c <xQueueGenericCreate>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <CounterTask+0xcc>)
 8003bc0:	601a      	str	r2, [r3, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003bc2:	2004      	movs	r0, #4
 8003bc4:	f011 fa34 	bl	8015030 <xQueueCreateMutex>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <CounterTask+0xd0>)
 8003bcc:	601a      	str	r2, [r3, #0]

	if(counterMessageQueue == 0){
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <CounterTask+0xcc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d100      	bne.n	8003bd8 <CounterTask+0x34>
		while(1); // Queue was not created and must not be used.
 8003bd6:	e7fe      	b.n	8003bd6 <CounterTask+0x32>
	}

	while(1){

		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <CounterTask+0xcc>)
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	f107 010e 	add.w	r1, r7, #14
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	f011 fc33 	bl	8015450 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <CounterTask+0xd0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f011 fa67 	bl	80150c6 <xQueueTakeMutexRecursive>

		switch(message){
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	3b06      	subs	r3, #6
 8003bfc:	2b07      	cmp	r3, #7
 8003bfe:	d830      	bhi.n	8003c62 <CounterTask+0xbe>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <CounterTask+0x64>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c29 	.word	0x08003c29
 8003c0c:	08003c2f 	.word	0x08003c2f
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c53 	.word	0x08003c53
		case MSG_CNT_SET_DIRECT_MODE:
			counterInitETR();
 8003c28:	f000 f8b4 	bl	8003d94 <counterInitETR>
			break;
 8003c2c:	e01a      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_SET_RECIPROCAL_MODE:
			counterInitIC();
 8003c2e:	f000 f8bf 	bl	8003db0 <counterInitIC>
			break;
 8003c32:	e017      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_SET_REFERENCE_MODE:
			counterInitREF();
 8003c34:	f000 f8ca 	bl	8003dcc <counterInitREF>
			break;
 8003c38:	e014      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_SET_INTERVAL_MODE:
			counterInitTI();
 8003c3a:	f000 f8d5 	bl	8003de8 <counterInitTI>
			break;
 8003c3e:	e011      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_START:
			counterStart();
 8003c40:	f000 f908 	bl	8003e54 <counterStart>
			break;
 8003c44:	e00e      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_STOP:
			counterStop();
 8003c46:	f000 f92d 	bl	8003ea4 <counterStop>
			break;
 8003c4a:	e00b      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_DEINIT:
			counter_deinit();
 8003c4c:	f000 f8da 	bl	8003e04 <counter_deinit>
			break;
 8003c50:	e008      	b.n	8003c64 <CounterTask+0xc0>
		case MSG_CNT_SET_GATE_TIME:
			counterGateConfig(counter.counterEtr.gateTime);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <CounterTask+0xd4>)
 8003c54:	f8b3 33ac 	ldrh.w	r3, [r3, #940]	; 0x3ac
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fdf4 	bl	8004848 <counterGateConfig>
			break;
 8003c60:	e000      	b.n	8003c64 <CounterTask+0xc0>
		default:
			break;
 8003c62:	bf00      	nop
		}	

		xSemaphoreGiveRecursive(counterMutex);
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <CounterTask+0xd0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f011 f9f9 	bl	8015060 <xQueueGiveMutexRecursive>
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003c6e:	e7b3      	b.n	8003bd8 <CounterTask+0x34>
 8003c70:	2000456c 	.word	0x2000456c
 8003c74:	20004940 	.word	0x20004940
 8003c78:	20004570 	.word	0x20004570

08003c7c <counterSetMode>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  mode:	ETR - direct method, IC - reciprocal, TI - time interval, REF - measuring with reference
 * @retval None
 */
void counterSetMode(uint8_t mode){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;
	switch(mode){
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d83b      	bhi.n	8003d04 <counterSetMode+0x88>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <counterSetMode+0x18>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cbd 	.word	0x08003cbd
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003cd5 	.word	0x08003cd5
	case ETR:
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 8003ca4:	2306      	movs	r3, #6
 8003ca6:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003ca8:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <counterSetMode+0x90>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	f107 010e 	add.w	r1, r7, #14
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	f011 fa3d 	bl	8015134 <xQueueGenericSend>
		break;
 8003cba:	e023      	b.n	8003d04 <counterSetMode+0x88>
	case IC:
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8003cbc:	2307      	movs	r3, #7
 8003cbe:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <counterSetMode+0x90>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	f107 010e 	add.w	r1, r7, #14
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	f011 fa31 	bl	8015134 <xQueueGenericSend>
		break;
 8003cd2:	e017      	b.n	8003d04 <counterSetMode+0x88>
	case REF:
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <counterSetMode+0x90>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	f107 010e 	add.w	r1, r7, #14
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce6:	f011 fa25 	bl	8015134 <xQueueGenericSend>
		break;
 8003cea:	e00b      	b.n	8003d04 <counterSetMode+0x88>
	case TI:
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003cec:	2309      	movs	r3, #9
 8003cee:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <counterSetMode+0x90>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f107 010e 	add.w	r1, r7, #14
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfe:	f011 fa19 	bl	8015134 <xQueueGenericSend>
		break;
 8003d02:	bf00      	nop
	}
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000456c 	.word	0x2000456c

08003d10 <counterSendStart>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStart(void){	
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <counterSendStart+0x2c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	uint16_t passMsg = MSG_CNT_START;
 8003d1e:	230a      	movs	r3, #10
 8003d20:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <counterSendStart+0x30>)
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	1db9      	adds	r1, r7, #6
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	f011 fa01 	bl	8015134 <xQueueGenericSend>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20004570 	.word	0x20004570
 8003d40:	2000456c 	.word	0x2000456c

08003d44 <counterSendStop>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStop(void){	
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_STOP;
 8003d4a:	230b      	movs	r3, #11
 8003d4c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <counterSendStop+0x24>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	1db9      	adds	r1, r7, #6
 8003d54:	2300      	movs	r3, #0
 8003d56:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5a:	f011 f9eb 	bl	8015134 <xQueueGenericSend>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000456c 	.word	0x2000456c

08003d6c <counterDeinit>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterDeinit(void){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_DEINIT;
 8003d72:	230c      	movs	r3, #12
 8003d74:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <counterDeinit+0x24>)
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	1db9      	adds	r1, r7, #6
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	f011 f9d7 	bl	8015134 <xQueueGenericSend>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000456c 	.word	0x2000456c

08003d94 <counterInitETR>:
 * @brief  Counter direct (External TRigger) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitETR(void){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	counter_deinit();
 8003d98:	f000 f834 	bl	8003e04 <counter_deinit>
	counter.state = COUNTER_ETR;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <counterInitETR+0x18>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_etr_init();
 8003da4:	f015 fd4e 	bl	8019844 <TIM_counter_etr_init>
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20004570 	.word	0x20004570

08003db0 <counterInitIC>:
 * @brief  Counter reciprocal (Input Capture) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitIC(void){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	counter_deinit();
 8003db4:	f000 f826 	bl	8003e04 <counter_deinit>
	counter.state = COUNTER_IC;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <counterInitIC+0x18>)
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ic_init();
 8003dc0:	f015 fd76 	bl	80198b0 <TIM_counter_ic_init>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20004570 	.word	0x20004570

08003dcc <counterInitREF>:
 *					Allows measuring frequency with precise external clock source.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitREF(void){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	counter_deinit();
 8003dd0:	f000 f818 	bl	8003e04 <counter_deinit>
	counter.state = COUNTER_REF;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <counterInitREF+0x18>)
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ref_init();
 8003ddc:	f015 fd5e 	bl	801989c <TIM_counter_ref_init>
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20004570 	.word	0x20004570

08003de8 <counterInitTI>:
 *					Allows measuring time between two events (rising/falling edge) on single or two channels.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitTI(void){
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	counter_deinit();
 8003dec:	f000 f80a 	bl	8003e04 <counter_deinit>
	counter.state = COUNTER_TI;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <counterInitTI+0x18>)
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ti_init();
 8003df8:	f015 fd64 	bl	80198c4 <TIM_counter_ti_init>
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20004570 	.word	0x20004570

08003e04 <counter_deinit>:
/**
 * @brief  Counter deinitialization function.
 * @param  None
 * @retval None
 */
void counter_deinit(void){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <counter_deinit+0x4c>)
 8003e0a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d81a      	bhi.n	8003e4a <counter_deinit+0x46>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <counter_deinit+0x18>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e37 	.word	0x08003e37
 8003e28:	08003e43 	.word	0x08003e43
 8003e2c:	08003e3d 	.word	0x08003e3d
	case COUNTER_ETR:
		TIM_etr_deinit();
 8003e30:	f015 fd60 	bl	80198f4 <TIM_etr_deinit>
		break;
 8003e34:	e009      	b.n	8003e4a <counter_deinit+0x46>
	case COUNTER_IC:
		TIM_ic_deinit();
 8003e36:	f015 fd79 	bl	801992c <TIM_ic_deinit>
		break;
 8003e3a:	e006      	b.n	8003e4a <counter_deinit+0x46>
	case COUNTER_REF:
		TIM_ref_deinit();
 8003e3c:	f015 fd68 	bl	8019910 <TIM_ref_deinit>
		break;
 8003e40:	e003      	b.n	8003e4a <counter_deinit+0x46>
	case COUNTER_TI:
		TIM_ti_deinit();
 8003e42:	f015 fd81 	bl	8019948 <TIM_ti_deinit>
		break;
 8003e46:	e000      	b.n	8003e4a <counter_deinit+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003e48:	bf00      	nop
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20004570 	.word	0x20004570

08003e54 <counterStart>:
 * @brief  Counter start function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStart(void){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <counterStart+0x4c>)
 8003e5a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d81a      	bhi.n	8003e9a <counterStart+0x46>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <counterStart+0x18>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e87 	.word	0x08003e87
 8003e78:	08003e93 	.word	0x08003e93
 8003e7c:	08003e8d 	.word	0x08003e8d
	case COUNTER_ETR:
		TIM_ETR_Start();
 8003e80:	f015 fd72 	bl	8019968 <TIM_ETR_Start>
		break;
 8003e84:	e009      	b.n	8003e9a <counterStart+0x46>
	case COUNTER_IC:
		TIM_IC_Start();
 8003e86:	f015 fdc1 	bl	8019a0c <TIM_IC_Start>
		break;
 8003e8a:	e006      	b.n	8003e9a <counterStart+0x46>
	case COUNTER_REF:
		TIM_ETR_Start();
 8003e8c:	f015 fd6c 	bl	8019968 <TIM_ETR_Start>
		break;
 8003e90:	e003      	b.n	8003e9a <counterStart+0x46>
	case COUNTER_TI:
		TIM_TI_Start();
 8003e92:	f015 fe31 	bl	8019af8 <TIM_TI_Start>
		break;
 8003e96:	e000      	b.n	8003e9a <counterStart+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003e98:	bf00      	nop
	}	
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20004570 	.word	0x20004570

08003ea4 <counterStop>:
 * @brief  Counter stop function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStop(void){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <counterStop+0x4c>)
 8003eaa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d81a      	bhi.n	8003eea <counterStop+0x46>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <counterStop+0x18>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ed7 	.word	0x08003ed7
 8003ec8:	08003ee3 	.word	0x08003ee3
 8003ecc:	08003edd 	.word	0x08003edd
	case COUNTER_ETR:
		TIM_ETR_Stop();
 8003ed0:	f015 fd80 	bl	80199d4 <TIM_ETR_Stop>
		break;
 8003ed4:	e009      	b.n	8003eea <counterStop+0x46>
	case COUNTER_IC:
		TIM_IC_Stop();
 8003ed6:	f015 fddf 	bl	8019a98 <TIM_IC_Stop>
		break;
 8003eda:	e006      	b.n	8003eea <counterStop+0x46>
	case COUNTER_REF:
		TIM_ETR_Stop();
 8003edc:	f015 fd7a 	bl	80199d4 <TIM_ETR_Stop>
		break;
 8003ee0:	e003      	b.n	8003eea <counterStop+0x46>
	case COUNTER_TI:
		TIM_TI_Stop();
 8003ee2:	f015 fecb 	bl	8019c7c <TIM_TI_Stop>
		break;
 8003ee6:	e000      	b.n	8003eea <counterStop+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003ee8:	bf00      	nop
	}	
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20004570 	.word	0x20004570

08003ef4 <counterSetEtrGate>:
/**
 * @brief  Setter for time gating of direct counting (ETR).
 * @param  gateTime: 100, 500, 1000, 5000, 10000 in milliseconds
 * @retval None
 */
void counterSetEtrGate(uint16_t gateTime){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
	counter.counterEtr.gateTime = gateTime;
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <counterSetEtrGate+0x30>)
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	f8a2 33ac 	strh.w	r3, [r2, #940]	; 0x3ac
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8003f06:	230d      	movs	r3, #13
 8003f08:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <counterSetEtrGate+0x34>)
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f107 010e 	add.w	r1, r7, #14
 8003f12:	2300      	movs	r3, #0
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	f011 f90c 	bl	8015134 <xQueueGenericSend>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20004570 	.word	0x20004570
 8003f28:	2000456c 	.word	0x2000456c

08003f2c <counterSetRefSampleCount>:
/**
 * @brief  Function setting Sample count of Reference counter
 * @param  sampleCount: 0x02 - 0xF4240000
 * @retval None
 */
void counterSetRefSampleCount(uint32_t sampleCount){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <counterSetRefSampleCount+0x38>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f011 f8c2 	bl	80150c6 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <counterSetRefSampleCount+0x3c>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <counterSetRefSampleCount+0x38>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f011 f886 	bl	8015060 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f016 fc51 	bl	801a7fc <TIM_REF_Reconfig_cnt>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20004940 	.word	0x20004940
 8003f68:	20004570 	.word	0x20004570

08003f6c <counterSetIc1SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 1.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc1SampleCount(uint16_t buffer){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <counterSetIc1SampleCount+0x44>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f011 f8a1 	bl	80150c6 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	3301      	adds	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <counterSetIc1SampleCount+0x48>)
 8003f8c:	80da      	strh	r2, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <counterSetIc1SampleCount+0x48>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 8003f96:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <counterSetIc1SampleCount+0x4c>)
 8003f98:	f016 fcde 	bl	801a958 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <counterSetIc1SampleCount+0x44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f011 f85d 	bl	8015060 <xQueueGiveMutexRecursive>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20004940 	.word	0x20004940
 8003fb4:	20004570 	.word	0x20004570
 8003fb8:	20016680 	.word	0x20016680

08003fbc <counterSetIc2SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 2.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc2SampleCount(uint16_t buffer){
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <counterSetIc2SampleCount+0x44>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f04f 31ff 	mov.w	r1, #4294967295
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f011 f879 	bl	80150c6 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <counterSetIc2SampleCount+0x48>)
 8003fdc:	811a      	strh	r2, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <counterSetIc2SampleCount+0x48>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003fe6:	4808      	ldr	r0, [pc, #32]	; (8004008 <counterSetIc2SampleCount+0x4c>)
 8003fe8:	f016 fcb6 	bl	801a958 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <counterSetIc2SampleCount+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f011 f835 	bl	8015060 <xQueueGiveMutexRecursive>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20004940 	.word	0x20004940
 8004004:	20004570 	.word	0x20004570
 8004008:	20016740 	.word	0x20016740

0800400c <counterSetIc1Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 1.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc1Prescaler(uint16_t presc){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <counterSetIc1Prescaler+0x2c>)
 8004018:	2200      	movs	r2, #0
 800401a:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f016 f9c8 	bl	801a3b8 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 8004028:	4804      	ldr	r0, [pc, #16]	; (800403c <counterSetIc1Prescaler+0x30>)
 800402a:	f016 fc95 	bl	801a958 <DMA_Restart>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20004570 	.word	0x20004570
 800403c:	20016680 	.word	0x20016680

08004040 <counterSetIc2Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 2.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc2Prescaler(uint16_t presc){		
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <counterSetIc2Prescaler+0x2c>)
 800404c:	2200      	movs	r2, #0
 800404e:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	f016 f9ee 	bl	801a438 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800405c:	4804      	ldr	r0, [pc, #16]	; (8004070 <counterSetIc2Prescaler+0x30>)
 800405e:	f016 fc7b 	bl	801a958 <DMA_Restart>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20004570 	.word	0x20004570
 8004070:	20016740 	.word	0x20016740

08004074 <counterIc1DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleInit(void){	
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <counterIc1DutyCycleInit+0x14>)
 800407a:	2201      	movs	r2, #1
 800407c:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 8004080:	f015 fefa 	bl	8019e78 <TIM_IC_DutyCycle_Init>
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20004570 	.word	0x20004570

0800408c <counterIc1DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleDeinit(void){	
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 8004090:	f015 ffcc 	bl	801a02c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <counterIc1DutyCycleDeinit+0x14>)
 8004096:	2200      	movs	r2, #0
 8004098:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20004570 	.word	0x20004570

080040a4 <counterIc2DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleInit(void){	
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <counterIc2DutyCycleInit+0x14>)
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 80040b0:	f015 fee2 	bl	8019e78 <TIM_IC_DutyCycle_Init>
}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20004570 	.word	0x20004570

080040bc <counterIc2DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleDeinit(void){		
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 80040c0:	f015 ffb4 	bl	801a02c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <counterIc2DutyCycleDeinit+0x14>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20004570 	.word	0x20004570

080040d4 <counterIcDutyCycleEnable>:
/**
 * @brief  Start duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleEnable(void){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Start();
 80040d8:	f016 f838 	bl	801a14c <TIM_IC_DutyCycle_Start>
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <counterIcDutyCycleDisable>:
/**
 * @brief  Stop duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleDisable(void){
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Stop();
 80040e4:	f016 f880 	bl	801a1e8 <TIM_IC_DutyCycle_Stop>
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <counterSetIcTi1_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_RisingFalling(void){	
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	TIM_IC1_RisingFalling();	
 80040f0:	f016 f9e2 	bl	801a4b8 <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <counterSetIcTi1_RisingFalling+0x14>)
 80040f6:	f016 fc2f 	bl	801a958 <DMA_Restart>
}	
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20016680 	.word	0x20016680

08004104 <counterSetIcTi1_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Rising(void){
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_RISING;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <counterSetIcTi1_Rising+0x14>)
 800410a:	2200      	movs	r2, #0
 800410c:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 8004110:	f016 f9e4 	bl	801a4dc <TIM_IC1_RisingOnly>
}	
 8004114:	bf00      	nop
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20004570 	.word	0x20004570

0800411c <counterSetIcTi1_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Falling(void){
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_FALLING;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <counterSetIcTi1_Falling+0x14>)
 8004122:	2201      	movs	r2, #1
 8004124:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 8004128:	f016 f9ea 	bl	801a500 <TIM_IC1_FallingOnly>
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20004570 	.word	0x20004570

08004134 <counterSetIcTi2_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_RisingFalling(void){
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
	TIM_IC2_RisingFalling();
 8004138:	f016 f9fc 	bl	801a534 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <counterSetIcTi2_RisingFalling+0x14>)
 800413e:	f016 fc0b 	bl	801a958 <DMA_Restart>
}	
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20016740 	.word	0x20016740

0800414c <counterSetIcTi2_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Rising(void){
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_RISING;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <counterSetIcTi2_Rising+0x14>)
 8004152:	2200      	movs	r2, #0
 8004154:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 8004158:	f016 f9fe 	bl	801a558 <TIM_IC2_RisingOnly>
}	
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20004570 	.word	0x20004570

08004164 <counterSetIcTi2_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Falling(void){
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_FALLING;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <counterSetIcTi2_Falling+0x14>)
 800416a:	2201      	movs	r2, #1
 800416c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 8004170:	f016 fa04 	bl	801a57c <TIM_IC2_FallingOnly>
}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20004570 	.word	0x20004570

0800417c <counterSetTiSequence_AB>:
 * @brief  Configures sequence of events AB to be measured. E.g. setting event A on channel 1 and event B on channel 2 and sequence AB then we can measure time between AB.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_AB(void){
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_AB();
 8004180:	f016 fa16 	bl	801a5b0 <TIM_TI_Sequence_AB>
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <counterSetTiSequence_BA>:
 * @brief  Configures sequence of events BA to be measured. E.g. setting event A on channel 2 and event B on channel 1 or vice versa and sequence BA, we can measure time between BA.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_BA(void){
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_BA();
 800418c:	f016 fa44 	bl	801a618 <TIM_TI_Sequence_BA>
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}

08004194 <counterSetTiMode_Independent>:
/**
 * @brief  Function configuring event sequence dependence - refer to tim.c TIM_TI_Start() for more information.
 * @param  None
 * @retval None
 */
void counterSetTiMode_Independent(void){
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <counterSetTiMode_Independent+0x18>)
 800419a:	2200      	movs	r2, #0
 800419c:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20004570 	.word	0x20004570

080041b0 <counterSetTiMode_Dependent>:

void counterSetTiMode_Dependent(void){
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <counterSetTiMode_Dependent+0x18>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20004570 	.word	0x20004570

080041cc <counterSetTiTimeout>:
/**
 * @brief  Setter for counter TI measurement timeout.
 * @param  timeout: 500 - 28000 in milliseconds
 * @retval None
 */
void counterSetTiTimeout(uint32_t timeout){
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	counter.counterIc.tiTimeout = timeout;				
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <counterSetTiTimeout+0x1c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20004570 	.word	0x20004570

080041ec <COUNTER_ETR_DMA_CpltCallback>:
 * @param  Pointer to DMA handle structure.
 * @retval None
 * @state  VERY USED
 */
void COUNTER_ETR_DMA_CpltCallback(DMA_HandleTypeDef *dmah)
{			
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80041f4:	230e      	movs	r3, #14
 80041f6:	81fb      	strh	r3, [r7, #14]

	/***** Counter ETR handle *****/
	if(counter.state == COUNTER_ETR){
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80041fa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d170      	bne.n	80042e6 <COUNTER_ETR_DMA_CpltCallback+0xfa>

		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8004204:	f016 fb22 	bl	801a84c <TIM_ETPS_GetPrescaler>
 8004208:	4603      	mov	r3, r0
 800420a:	461a      	mov	r2, r3
 800420c:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800420e:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8004212:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004214:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f943 	bl	80004a4 <__aeabi_ui2d>
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004224:	f8b3 3398 	ldrh.w	r3, [r3, #920]	; 0x398
 8004228:	b29b      	uxth	r3, r3
 800422a:	3301      	adds	r3, #1
 800422c:	4a5d      	ldr	r2, [pc, #372]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800422e:	f8b2 239a 	ldrh.w	r2, [r2, #922]	; 0x39a
 8004232:	b292      	uxth	r2, r2
 8004234:	3201      	adds	r2, #1
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc f942 	bl	80004c4 <__aeabi_i2d>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fc fad0 	bl	80007ec <__aeabi_ddiv>
 800424c:	4603      	mov	r3, r0
 800424e:	460c      	mov	r4, r1
 8004250:	4618      	mov	r0, r3
 8004252:	4621      	mov	r1, r4
 8004254:	f7fc fc98 	bl	8000b88 <__aeabi_d2f>
 8004258:	4603      	mov	r3, r0
 800425a:	617b      	str	r3, [r7, #20]
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 800425c:	4b51      	ldr	r3, [pc, #324]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800425e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f91e 	bl	80004a4 <__aeabi_ui2d>
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	6978      	ldr	r0, [r7, #20]
 800426e:	f7fc f93b 	bl	80004e8 <__aeabi_f2d>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fc f98d 	bl	8000598 <__aeabi_dmul>
 800427e:	4603      	mov	r3, r0
 8004280:	460c      	mov	r4, r1
 8004282:	4625      	mov	r5, r4
 8004284:	461c      	mov	r4, r3
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004288:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f918 	bl	80004c4 <__aeabi_i2d>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4620      	mov	r0, r4
 800429a:	4629      	mov	r1, r5
 800429c:	f7fc f97c 	bl	8000598 <__aeabi_dmul>
 80042a0:	4603      	mov	r3, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	4a3f      	ldr	r2, [pc, #252]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042a6:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
		/* Configure the ETR input prescaler */
		TIM_ETRP_Config(counter.counterEtr.freq);	
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042ac:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 80042b0:	eeb0 0a47 	vmov.f32	s0, s14
 80042b4:	eef0 0a67 	vmov.f32	s1, s15
 80042b8:	f015 ffc6 	bl	801a248 <TIM_ETRP_Config>

		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042be:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <COUNTER_ETR_DMA_CpltCallback+0xf0>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80042c8:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	f107 0210 	add.w	r2, r7, #16
 80042d0:	f107 010e 	add.w	r1, r7, #14
 80042d4:	2300      	movs	r3, #0
 80042d6:	f011 f827 	bl	8015328 <xQueueGenericSendFromISR>

		}else{
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
		}				
	}
}
 80042da:	e05f      	b.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80042dc:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80042e4:	e05a      	b.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
	}else if(counter.state == COUNTER_REF){		
 80042e6:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042e8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d154      	bne.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042f4:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d017      	beq.n	800432e <COUNTER_ETR_DMA_CpltCallback+0x142>
 80042fe:	f011 fd17 	bl	8015d30 <xTaskGetTickCount>
 8004302:	4602      	mov	r2, r0
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <COUNTER_ETR_DMA_CpltCallback+0x1c0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b63      	cmp	r3, #99	; 0x63
 800430c:	d80f      	bhi.n	800432e <COUNTER_ETR_DMA_CpltCallback+0x142>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800430e:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 0210 	add.w	r2, r7, #16
 8004316:	f107 010e 	add.w	r1, r7, #14
 800431a:	2300      	movs	r3, #0
 800431c:	f011 f804 	bl	8015328 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 8004320:	f016 fa4a 	bl	801a7b8 <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004326:	2201      	movs	r2, #1
 8004328:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 800432c:	e036      	b.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004330:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02b      	beq.n	8004392 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800433c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d026      	beq.n	8004392 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004346:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f8aa 	bl	80004a4 <__aeabi_ui2d>
 8004350:	4604      	mov	r4, r0
 8004352:	460d      	mov	r5, r1
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004356:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f8a2 	bl	80004a4 <__aeabi_ui2d>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4620      	mov	r0, r4
 8004366:	4629      	mov	r1, r5
 8004368:	f7fc fa40 	bl	80007ec <__aeabi_ddiv>
 800436c:	4603      	mov	r3, r0
 800436e:	460c      	mov	r4, r1
 8004370:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004372:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f107 0210 	add.w	r2, r7, #16
 800437e:	f107 010e 	add.w	r1, r7, #14
 8004382:	2300      	movs	r3, #0
 8004384:	f010 ffd0 	bl	8015328 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800438a:	2200      	movs	r2, #0
 800438c:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 8004390:	e004      	b.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004394:	2201      	movs	r2, #1
 8004396:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 800439a:	e7ff      	b.n	800439c <COUNTER_ETR_DMA_CpltCallback+0x1b0>
 800439c:	bf00      	nop
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bdb0      	pop	{r4, r5, r7, pc}
 80043a4:	20004570 	.word	0x20004570
 80043a8:	2000455c 	.word	0x2000455c
 80043ac:	20004568 	.word	0x20004568

080043b0 <counterPeriodElapsedCallback>:
 * @param  Pointer to TIM handle structure.
 * @retval None
 * @state  VERY USED
 */
void counterPeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <counterPeriodElapsedCallback+0x38>)
 80043ba:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <counterPeriodElapsedCallback+0x2c>
		if(counter.state == COUNTER_IC){
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <counterPeriodElapsedCallback+0x38>)
 80043c6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d102      	bne.n	80043d6 <counterPeriodElapsedCallback+0x26>
			/* Input Capture Low Frequency coutner */
			counterIcProcess();
 80043d0:	f000 f80c 	bl	80043ec <counterIcProcess>
		}						
	}else{		
		/* Duty cycle measurement in Low Frequency counter */
		counterIcDutyCycleProcess();
	}
}
 80043d4:	e004      	b.n	80043e0 <counterPeriodElapsedCallback+0x30>
			counterTiProcess();
 80043d6:	f000 f8e3 	bl	80045a0 <counterTiProcess>
}
 80043da:	e001      	b.n	80043e0 <counterPeriodElapsedCallback+0x30>
		counterIcDutyCycleProcess();
 80043dc:	f000 f96a 	bl	80046b4 <counterIcDutyCycleProcess>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20004570 	.word	0x20004570

080043ec <counterIcProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcProcess(void)
{	
 80043ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80043f4:	230e      	movs	r3, #14
 80043f6:	807b      	strh	r3, [r7, #2]

	if(counter.bin != BIN0){
 80043f8:	4b65      	ldr	r3, [pc, #404]	; (8004590 <counterIcProcess+0x1a4>)
 80043fa:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05d      	beq.n	80044c0 <counterIcProcess+0xd4>
		/* BINx is used to alternate data sending from IC1 and IC2. Thanks to DMA_TransferComplete function
			 if there's still no data available from one source (ICx) the second one is not stalled. Meaning,
			 IC channels don't have to necessarilly rotate/alternate if the difference of frequencies is big. */
		counter.bin = BIN0;
 8004404:	4b62      	ldr	r3, [pc, #392]	; (8004590 <counterIcProcess+0x1a4>)
 8004406:	2200      	movs	r2, #0
 8004408:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 800440c:	4861      	ldr	r0, [pc, #388]	; (8004594 <counterIcProcess+0x1a8>)
 800440e:	f016 fa81 	bl	801a914 <DMA_TransferComplete>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80b6 	beq.w	8004586 <counterIcProcess+0x19a>

			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 800441a:	f016 fa2d 	bl	801a878 <TIM_IC1PSC_GetPrescaler>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <counterIcProcess+0x1a4>)
 8004424:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 8004428:	4b59      	ldr	r3, [pc, #356]	; (8004590 <counterIcProcess+0x1a4>)
 800442a:	88db      	ldrh	r3, [r3, #6]
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	4a57      	ldr	r2, [pc, #348]	; (8004590 <counterIcProcess+0x1a4>)
 8004432:	3304      	adds	r3, #4
 8004434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004438:	4b55      	ldr	r3, [pc, #340]	; (8004590 <counterIcProcess+0x1a4>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	60bb      	str	r3, [r7, #8]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8004440:	4b53      	ldr	r3, [pc, #332]	; (8004590 <counterIcProcess+0x1a4>)
 8004442:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004446:	4a52      	ldr	r2, [pc, #328]	; (8004590 <counterIcProcess+0x1a4>)
 8004448:	8892      	ldrh	r2, [r2, #4]
 800444a:	b292      	uxth	r2, r2
 800444c:	3201      	adds	r2, #1
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	4a4f      	ldr	r2, [pc, #316]	; (8004590 <counterIcProcess+0x1a4>)
 8004454:	f892 2390 	ldrb.w	r2, [r2, #912]	; 0x390
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc f820 	bl	80004a4 <__aeabi_ui2d>
 8004464:	4604      	mov	r4, r0
 8004466:	460d      	mov	r5, r1
 8004468:	4b49      	ldr	r3, [pc, #292]	; (8004590 <counterIcProcess+0x1a4>)
 800446a:	88db      	ldrh	r3, [r3, #6]
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc f827 	bl	80004c4 <__aeabi_i2d>
 8004476:	4680      	mov	r8, r0
 8004478:	4689      	mov	r9, r1
 800447a:	68b8      	ldr	r0, [r7, #8]
 800447c:	f7fc f812 	bl	80004a4 <__aeabi_ui2d>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fc f9b0 	bl	80007ec <__aeabi_ddiv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4620      	mov	r0, r4
 8004492:	4629      	mov	r1, r5
 8004494:	f7fc f880 	bl	8000598 <__aeabi_dmul>
 8004498:	4603      	mov	r3, r0
 800449a:	460c      	mov	r4, r1
 800449c:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <counterIcProcess+0x1a4>)
 800449e:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380

			DMA_Restart(&hdma_tim2_ch1);
 80044a2:	483c      	ldr	r0, [pc, #240]	; (8004594 <counterIcProcess+0x1a8>)
 80044a4:	f016 fa58 	bl	801a958 <DMA_Restart>
			counter.icChannel1 = COUNTER_IRQ_IC;
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <counterIcProcess+0x1a4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <counterIcProcess+0x1ac>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	1d3a      	adds	r2, r7, #4
 80044b6:	1cb9      	adds	r1, r7, #2
 80044b8:	2300      	movs	r3, #0
 80044ba:	f010 ff35 	bl	8015328 <xQueueGenericSendFromISR>
			DMA_Restart(&hdma_tim2_ch2_ch4);		
			counter.icChannel2 = COUNTER_IRQ_IC;
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
		}
	}
}
 80044be:	e062      	b.n	8004586 <counterIcProcess+0x19a>
	}else if(counter.bin != BIN1){
 80044c0:	4b33      	ldr	r3, [pc, #204]	; (8004590 <counterIcProcess+0x1a4>)
 80044c2:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d05c      	beq.n	8004586 <counterIcProcess+0x19a>
		counter.bin = BIN1;
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <counterIcProcess+0x1a4>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 80044d4:	4831      	ldr	r0, [pc, #196]	; (800459c <counterIcProcess+0x1b0>)
 80044d6:	f016 fa1d 	bl	801a914 <DMA_TransferComplete>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d052      	beq.n	8004586 <counterIcProcess+0x19a>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 80044e0:	f016 f9de 	bl	801a8a0 <TIM_IC2PSC_GetPrescaler>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b29      	ldr	r3, [pc, #164]	; (8004590 <counterIcProcess+0x1a4>)
 80044ea:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 80044ee:	4b28      	ldr	r3, [pc, #160]	; (8004590 <counterIcProcess+0x1a4>)
 80044f0:	891b      	ldrh	r3, [r3, #8]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4a26      	ldr	r2, [pc, #152]	; (8004590 <counterIcProcess+0x1a4>)
 80044f8:	3372      	adds	r3, #114	; 0x72
 80044fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <counterIcProcess+0x1a4>)
 8004500:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	60fb      	str	r3, [r7, #12]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <counterIcProcess+0x1a4>)
 800450a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800450e:	4a20      	ldr	r2, [pc, #128]	; (8004590 <counterIcProcess+0x1a4>)
 8004510:	8892      	ldrh	r2, [r2, #4]
 8004512:	b292      	uxth	r2, r2
 8004514:	3201      	adds	r2, #1
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <counterIcProcess+0x1a4>)
 800451c:	f892 2391 	ldrb.w	r2, [r2, #913]	; 0x391
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	4618      	mov	r0, r3
 8004528:	f7fb ffbc 	bl	80004a4 <__aeabi_ui2d>
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <counterIcProcess+0x1a4>)
 8004532:	891b      	ldrh	r3, [r3, #8]
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb ffc3 	bl	80004c4 <__aeabi_i2d>
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7fb ffae 	bl	80004a4 <__aeabi_ui2d>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fc f94c 	bl	80007ec <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fc f81c 	bl	8000598 <__aeabi_dmul>
 8004560:	4603      	mov	r3, r0
 8004562:	460c      	mov	r4, r1
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <counterIcProcess+0x1a4>)
 8004566:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 800456a:	480c      	ldr	r0, [pc, #48]	; (800459c <counterIcProcess+0x1b0>)
 800456c:	f016 f9f4 	bl	801a958 <DMA_Restart>
			counter.icChannel2 = COUNTER_IRQ_IC;
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <counterIcProcess+0x1a4>)
 8004572:	2200      	movs	r2, #0
 8004574:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <counterIcProcess+0x1ac>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	1d3a      	adds	r2, r7, #4
 800457e:	1cb9      	adds	r1, r7, #2
 8004580:	2300      	movs	r3, #0
 8004582:	f010 fed1 	bl	8015328 <xQueueGenericSendFromISR>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004590:	20004570 	.word	0x20004570
 8004594:	20016680 	.word	0x20016680
 8004598:	2000455c 	.word	0x2000455c
 800459c:	20016740 	.word	0x20016740

080045a0 <counterTiProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterTiProcess(void)
{
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80045a6:	230e      	movs	r3, #14
 80045a8:	807b      	strh	r3, [r7, #2]

	/* Check timeout. */
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 80045aa:	f011 fbd1 	bl	8015d50 <xTaskGetTickCountFromISR>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <counterTiProcess+0x100>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <counterTiProcess+0x104>)
 80045b8:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80045bc:	429a      	cmp	r2, r3
 80045be:	d85e      	bhi.n	800467e <counterTiProcess+0xde>
		/* Check the event sequence - AB or BA */
		if(counter.abba == BIN0){			
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <counterTiProcess+0x104>)
 80045c2:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d12c      	bne.n	8004626 <counterTiProcess+0x86>
			/* Check DMA transfer channel 1 occured */			
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 80045cc:	4836      	ldr	r0, [pc, #216]	; (80046a8 <counterTiProcess+0x108>)
 80045ce:	f016 f9a1 	bl	801a914 <DMA_TransferComplete>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05f      	beq.n	8004698 <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <counterTiProcess+0x104>)
 80045da:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ff60 	bl	80004a4 <__aeabi_ui2d>
 80045e4:	4604      	mov	r4, r0
 80045e6:	460d      	mov	r5, r1
 80045e8:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <counterTiProcess+0x104>)
 80045ea:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ff58 	bl	80004a4 <__aeabi_ui2d>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4620      	mov	r0, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fc f8f6 	bl	80007ec <__aeabi_ddiv>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <counterTiProcess+0x104>)
 8004606:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();		
 800460a:	f015 fb37 	bl	8019c7c <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <counterTiProcess+0x104>)
 8004610:	2202      	movs	r2, #2
 8004612:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <counterTiProcess+0x10c>)
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	1d3a      	adds	r2, r7, #4
 800461c:	1cb9      	adds	r1, r7, #2
 800461e:	2300      	movs	r3, #0
 8004620:	f010 fe82 	bl	8015328 <xQueueGenericSendFromISR>
	}else{
		TIM_TI_Stop();					
		counter.tiState = TIMEOUT;	
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
	}
}
 8004624:	e038      	b.n	8004698 <counterTiProcess+0xf8>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 8004626:	4822      	ldr	r0, [pc, #136]	; (80046b0 <counterTiProcess+0x110>)
 8004628:	f016 f974 	bl	801a914 <DMA_TransferComplete>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d032      	beq.n	8004698 <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <counterTiProcess+0x104>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fb ff34 	bl	80004a4 <__aeabi_ui2d>
 800463c:	4604      	mov	r4, r0
 800463e:	460d      	mov	r5, r1
 8004640:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <counterTiProcess+0x104>)
 8004642:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004646:	4618      	mov	r0, r3
 8004648:	f7fb ff2c 	bl	80004a4 <__aeabi_ui2d>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fc f8ca 	bl	80007ec <__aeabi_ddiv>
 8004658:	4603      	mov	r3, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <counterTiProcess+0x104>)
 800465e:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();					
 8004662:	f015 fb0b 	bl	8019c7c <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <counterTiProcess+0x104>)
 8004668:	2202      	movs	r2, #2
 800466a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <counterTiProcess+0x10c>)
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	1d3a      	adds	r2, r7, #4
 8004674:	1cb9      	adds	r1, r7, #2
 8004676:	2300      	movs	r3, #0
 8004678:	f010 fe56 	bl	8015328 <xQueueGenericSendFromISR>
}
 800467c:	e00c      	b.n	8004698 <counterTiProcess+0xf8>
		TIM_TI_Stop();					
 800467e:	f015 fafd 	bl	8019c7c <TIM_TI_Stop>
		counter.tiState = TIMEOUT;	
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <counterTiProcess+0x104>)
 8004684:	2201      	movs	r2, #1
 8004686:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <counterTiProcess+0x10c>)
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	1d3a      	adds	r2, r7, #4
 8004690:	1cb9      	adds	r1, r7, #2
 8004692:	2300      	movs	r3, #0
 8004694:	f010 fe48 	bl	8015328 <xQueueGenericSendFromISR>
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bdb0      	pop	{r4, r5, r7, pc}
 80046a0:	20004568 	.word	0x20004568
 80046a4:	20004570 	.word	0x20004570
 80046a8:	20016740 	.word	0x20016740
 80046ac:	2000455c 	.word	0x2000455c
 80046b0:	20016680 	.word	0x20016680

080046b4 <counterIcDutyCycleProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcDutyCycleProcess(void)
{
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80046ba:	230e      	movs	r3, #14
 80046bc:	807b      	strh	r3, [r7, #2]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80046c0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d155      	bne.n	8004776 <counterIcDutyCycleProcess+0xc2>
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 80046ca:	485a      	ldr	r0, [pc, #360]	; (8004834 <counterIcDutyCycleProcess+0x180>)
 80046cc:	f016 f922 	bl	801a914 <DMA_TransferComplete>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a8 	beq.w	8004828 <counterIcDutyCycleProcess+0x174>
			/* Calculate duty cycle (ic1freq) and pulse width(ic2freq). Frequency struct variables temporarily used. */
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 80046d8:	4b55      	ldr	r3, [pc, #340]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80046da:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fb fee0 	bl	80004a4 <__aeabi_ui2d>
 80046e4:	4604      	mov	r4, r0
 80046e6:	460d      	mov	r5, r1
 80046e8:	4b51      	ldr	r3, [pc, #324]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb fed9 	bl	80004a4 <__aeabi_ui2d>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fc f877 	bl	80007ec <__aeabi_ddiv>
 80046fe:	4603      	mov	r3, r0
 8004700:	460c      	mov	r4, r1
 8004702:	4618      	mov	r0, r3
 8004704:	4621      	mov	r1, r4
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <counterIcDutyCycleProcess+0x184>)
 800470c:	f7fb ff44 	bl	8000598 <__aeabi_dmul>
 8004710:	4603      	mov	r3, r0
 8004712:	460c      	mov	r4, r1
 8004714:	4a46      	ldr	r2, [pc, #280]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004716:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 800471c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb febf 	bl	80004a4 <__aeabi_ui2d>
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 800472c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb feb7 	bl	80004a4 <__aeabi_ui2d>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fc f855 	bl	80007ec <__aeabi_ddiv>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	4a3a      	ldr	r2, [pc, #232]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004748:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388

			TIM_IC_DutyCycleDmaRestart();		
 800474c:	f015 fb6e 	bl	8019e2c <TIM_IC_DutyCycleDmaRestart>

			/* DMA transfers some unspecified number immediately after 
				 Duty Cycle start - getting rid of it. */
			if(counter.bin == BIN0){
 8004750:	4b37      	ldr	r3, [pc, #220]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004752:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <counterIcDutyCycleProcess+0xb2>
				counter.bin = BIN1;
 800475c:	4b34      	ldr	r3, [pc, #208]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 800475e:	2201      	movs	r2, #1
 8004760:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			}else{
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
			}					
		}
	}	
}
 8004764:	e060      	b.n	8004828 <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <counterIcDutyCycleProcess+0x188>)
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	1d3a      	adds	r2, r7, #4
 800476c:	1cb9      	adds	r1, r7, #2
 800476e:	2300      	movs	r3, #0
 8004770:	f010 fdda 	bl	8015328 <xQueueGenericSendFromISR>
}
 8004774:	e058      	b.n	8004828 <counterIcDutyCycleProcess+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004778:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d152      	bne.n	8004828 <counterIcDutyCycleProcess+0x174>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 8004782:	482f      	ldr	r0, [pc, #188]	; (8004840 <counterIcDutyCycleProcess+0x18c>)
 8004784:	f016 f8c6 	bl	801a914 <DMA_TransferComplete>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04c      	beq.n	8004828 <counterIcDutyCycleProcess+0x174>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fe86 	bl	80004a4 <__aeabi_ui2d>
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 800479e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fb fe7e 	bl	80004a4 <__aeabi_ui2d>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fc f81c 	bl	80007ec <__aeabi_ddiv>
 80047b4:	4603      	mov	r3, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4618      	mov	r0, r3
 80047ba:	4621      	mov	r1, r4
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <counterIcDutyCycleProcess+0x184>)
 80047c2:	f7fb fee9 	bl	8000598 <__aeabi_dmul>
 80047c6:	4603      	mov	r3, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	4a19      	ldr	r2, [pc, #100]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80047cc:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fe65 	bl	80004a4 <__aeabi_ui2d>
 80047da:	4604      	mov	r4, r0
 80047dc:	460d      	mov	r5, r1
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80047e0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fb fe5d 	bl	80004a4 <__aeabi_ui2d>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fb fffb 	bl	80007ec <__aeabi_ddiv>
 80047f6:	4603      	mov	r3, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 80047fc:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 8004800:	f015 fb14 	bl	8019e2c <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004806:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <counterIcDutyCycleProcess+0x166>
				counter.bin = BIN1;
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <counterIcDutyCycleProcess+0x17c>)
 8004812:	2201      	movs	r2, #1
 8004814:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 8004818:	e006      	b.n	8004828 <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <counterIcDutyCycleProcess+0x188>)
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	1d3a      	adds	r2, r7, #4
 8004820:	1cb9      	adds	r1, r7, #2
 8004822:	2300      	movs	r3, #0
 8004824:	f010 fd80 	bl	8015328 <xQueueGenericSendFromISR>
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bdb0      	pop	{r4, r5, r7, pc}
 8004830:	20004570 	.word	0x20004570
 8004834:	20016680 	.word	0x20016680
 8004838:	40590000 	.word	0x40590000
 800483c:	2000455c 	.word	0x2000455c
 8004840:	20016740 	.word	0x20016740
 8004844:	00000000 	.word	0x00000000

08004848 <counterGateConfig>:
 * @brief  This function configures ARR and PSC registers of 16b-it timer if running on 72 MHz.
 * @param  gateTime: gate time in milliseconds
 * @retval none
 */
void counterGateConfig(uint16_t gateTime)
{				
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	80fb      	strh	r3, [r7, #6]
	switch(gateTime){
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004858:	d01b      	beq.n	8004892 <counterGateConfig+0x4a>
 800485a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800485e:	dc05      	bgt.n	800486c <counterGateConfig+0x24>
 8004860:	2b64      	cmp	r3, #100	; 0x64
 8004862:	d00c      	beq.n	800487e <counterGateConfig+0x36>
 8004864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004868:	d00e      	beq.n	8004888 <counterGateConfig+0x40>
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
		break;
	default:
		break;
 800486a:	e021      	b.n	80048b0 <counterGateConfig+0x68>
	switch(gateTime){
 800486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <counterGateConfig+0x54>
 8004874:	f242 7210 	movw	r2, #10000	; 0x2710
 8004878:	4293      	cmp	r3, r2
 800487a:	d014      	beq.n	80048a6 <counterGateConfig+0x5e>
		break;
 800487c:	e018      	b.n	80048b0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.1);
 800487e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80048b8 <counterGateConfig+0x70>
 8004882:	f015 ff47 	bl	801a714 <TIM_ARR_PSC_Config>
		break;
 8004886:	e013      	b.n	80048b0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.5);
 8004888:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80048c0 <counterGateConfig+0x78>
 800488c:	f015 ff42 	bl	801a714 <TIM_ARR_PSC_Config>
		break;
 8004890:	e00e      	b.n	80048b0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(1);
 8004892:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80048c8 <counterGateConfig+0x80>
 8004896:	f015 ff3d 	bl	801a714 <TIM_ARR_PSC_Config>
		break;
 800489a:	e009      	b.n	80048b0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(5);
 800489c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80048d0 <counterGateConfig+0x88>
 80048a0:	f015 ff38 	bl	801a714 <TIM_ARR_PSC_Config>
		break;
 80048a4:	e004      	b.n	80048b0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(10);
 80048a6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80048d8 <counterGateConfig+0x90>
 80048aa:	f015 ff33 	bl	801a714 <TIM_ARR_PSC_Config>
		break;
 80048ae:	bf00      	nop
	}


}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	9999999a 	.word	0x9999999a
 80048bc:	3fb99999 	.word	0x3fb99999
 80048c0:	00000000 	.word	0x00000000
 80048c4:	3fe00000 	.word	0x3fe00000
 80048c8:	00000000 	.word	0x00000000
 80048cc:	3ff00000 	.word	0x3ff00000
 80048d0:	00000000 	.word	0x00000000
 80048d4:	40140000 	.word	0x40140000
 80048d8:	00000000 	.word	0x00000000
 80048dc:	40240000 	.word	0x40240000

080048e0 <counterEtrRefSetDefault>:
 * @param  None
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
	if(counter.state==COUNTER_ETR){
 80048e4:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <counterEtrRefSetDefault+0x84>)
 80048e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10e      	bne.n	800490e <counterEtrRefSetDefault+0x2e>
		counter.counterEtr.psc = TIM4_PSC;	
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <counterEtrRefSetDefault+0x84>)
 80048f2:	f244 129f 	movw	r2, #16799	; 0x419f
 80048f6:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <counterEtrRefSetDefault+0x84>)
 80048fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004900:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <counterEtrRefSetDefault+0x84>)
 8004906:	2264      	movs	r2, #100	; 0x64
 8004908:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 800490c:	e019      	b.n	8004942 <counterEtrRefSetDefault+0x62>
	}else{
		counter.counterEtr.psc = 59999;	
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <counterEtrRefSetDefault+0x84>)
 8004910:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004914:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <counterEtrRefSetDefault+0x84>)
 800491a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800491e:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <counterEtrRefSetDefault+0x84>)
 8004924:	f8b3 339a 	ldrh.w	r3, [r3, #922]	; 0x39a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3301      	adds	r3, #1
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <counterEtrRefSetDefault+0x84>)
 800492e:	f8b2 2398 	ldrh.w	r2, [r2, #920]	; 0x398
 8004932:	b292      	uxth	r2, r2
 8004934:	3201      	adds	r2, #1
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	461a      	mov	r2, r3
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <counterEtrRefSetDefault+0x84>)
 800493e:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <counterEtrRefSetDefault+0x84>)
 8004944:	2201      	movs	r2, #1
 8004946:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <counterEtrRefSetDefault+0x84>)
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <counterEtrRefSetDefault+0x84>)
 8004954:	2200      	movs	r2, #0
 8004956:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	20004570 	.word	0x20004570

08004968 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
	if(counter.state == COUNTER_IC){
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <counterIcTiSetDefault+0x84>)
 800496e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d10e      	bne.n	8004996 <counterIcTiSetDefault+0x2e>
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <counterIcTiSetDefault+0x84>)
 800497a:	2202      	movs	r2, #2
 800497c:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 2;
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <counterIcTiSetDefault+0x84>)
 8004980:	2202      	movs	r2, #2
 8004982:	811a      	strh	r2, [r3, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <counterIcTiSetDefault+0x84>)
 8004986:	2201      	movs	r2, #1
 8004988:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <counterIcTiSetDefault+0x84>)
 800498e:	2201      	movs	r2, #1
 8004990:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8004994:	e012      	b.n	80049bc <counterIcTiSetDefault+0x54>
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <counterIcTiSetDefault+0x84>)
 8004998:	2201      	movs	r2, #1
 800499a:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 1;
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <counterIcTiSetDefault+0x84>)
 800499e:	2201      	movs	r2, #1
 80049a0:	811a      	strh	r2, [r3, #8]
		counter.counterIc.tiTimeout = 10000;
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80049a8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f015 fcf3 	bl	801a3b8 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 80049d2:	2001      	movs	r0, #1
 80049d4:	f015 fd30 	bl	801a438 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049da:	2200      	movs	r2, #0
 80049dc:	809a      	strh	r2, [r3, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <counterIcTiSetDefault+0x84>)
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20004570 	.word	0x20004570

080049f0 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 80049f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049fc:	81fb      	strh	r3, [r7, #14]
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80049fe:	2200      	movs	r2, #0
 8004a00:	2102      	movs	r1, #2
 8004a02:	201e      	movs	r0, #30
 8004a04:	f010 faa2 	bl	8014f4c <xQueueGenericCreate>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <GeneratorTask+0x15c>)
 8004a0c:	601a      	str	r2, [r3, #0]
	generatorSetDefault();
 8004a0e:	f000 f8fd 	bl	8004c0c <generatorSetDefault>

	while(1){

		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004a12:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <GeneratorTask+0x15c>)
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f107 010e 	add.w	r1, r7, #14
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	f010 fd16 	bl	8015450 <xQueueGenericReceive>

		switch(message){
 8004a24:	89fb      	ldrh	r3, [r7, #14]
 8004a26:	3b21      	subs	r3, #33	; 0x21
 8004a28:	2b13      	cmp	r3, #19
 8004a2a:	f200 8087 	bhi.w	8004b3c <GeneratorTask+0x14c>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <GeneratorTask+0x44>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004b0f 	.word	0x08004b0f
 8004a38:	08004b05 	.word	0x08004b05
 8004a3c:	08004b3d 	.word	0x08004b3d
 8004a40:	08004b3d 	.word	0x08004b3d
 8004a44:	08004a8d 	.word	0x08004a8d
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004b19 	.word	0x08004b19
 8004a50:	08004b3d 	.word	0x08004b3d
 8004a54:	08004b3d 	.word	0x08004b3d
 8004a58:	08004b3d 	.word	0x08004b3d
 8004a5c:	08004b3d 	.word	0x08004b3d
 8004a60:	08004b3d 	.word	0x08004b3d
 8004a64:	08004b3d 	.word	0x08004b3d
 8004a68:	08004b3d 	.word	0x08004b3d
 8004a6c:	08004b3d 	.word	0x08004b3d
 8004a70:	08004b3d 	.word	0x08004b3d
 8004a74:	08004b3d 	.word	0x08004b3d
 8004a78:	08004b3d 	.word	0x08004b3d
 8004a7c:	08004b3d 	.word	0x08004b3d
 8004a80:	08004a85 	.word	0x08004a85
		case MSG_INVALIDATE:
			if(generator.state==GENERATOR_IDLE){}
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <GeneratorTask+0x160>)
 8004a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			break;
 8004a8a:	e05e      	b.n	8004b4a <GeneratorTask+0x15a>
		case MSG_GEN_START:
			if(generator.state==GENERATOR_IDLE){
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <GeneratorTask+0x160>)
 8004a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d153      	bne.n	8004b40 <GeneratorTask+0x150>
				if(generator.modeState==GENERATOR_DAC){
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <GeneratorTask+0x160>)
 8004a9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <GeneratorTask+0xbe>
					genInit();
 8004aa4:	f000 f8f0 	bl	8004c88 <genInit>
					GeneratingEnable();
 8004aa8:	f013 fcec 	bl	8018484 <GeneratingEnable>
 8004aac:	e009      	b.n	8004ac2 <GeneratorTask+0xd2>
				}else if(generator.modeState==GENERATOR_PWM){
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <GeneratorTask+0x160>)
 8004ab0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d103      	bne.n	8004ac2 <GeneratorTask+0xd2>
#ifdef USE_GEN_PWM
					genPwmInit();
 8004aba:	f000 f921 	bl	8004d00 <genPwmInit>
					PWMGeneratingEnable();
 8004abe:	f016 fbb5 	bl	801b22c <PWMGeneratingEnable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_RUN;
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <GeneratorTask+0x160>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8004aca:	e039      	b.n	8004b40 <GeneratorTask+0x150>
		case MSG_GEN_STOP:
			if(generator.state==GENERATOR_RUN){
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <GeneratorTask+0x160>)
 8004ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d135      	bne.n	8004b44 <GeneratorTask+0x154>
				if(generator.modeState==GENERATOR_DAC){
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <GeneratorTask+0x160>)
 8004ada:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <GeneratorTask+0xfa>
					GeneratingDisable();
 8004ae4:	f013 fcd6 	bl	8018494 <GeneratingDisable>
 8004ae8:	e007      	b.n	8004afa <GeneratorTask+0x10a>
				}else if(generator.modeState==GENERATOR_PWM){
 8004aea:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <GeneratorTask+0x160>)
 8004aec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <GeneratorTask+0x10a>
#ifdef USE_GEN_PWM
					PWMGeneratingDisable();
 8004af6:	f016 fbe1 	bl	801b2bc <PWMGeneratingDisable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_IDLE;
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <GeneratorTask+0x160>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8004b02:	e01f      	b.n	8004b44 <GeneratorTask+0x154>
		case MSG_GEN_PWM_MODE: /* Set PWM mode */
#ifdef USE_GEN_PWM
			generatorSetModePWM();
 8004b04:	f000 f850 	bl	8004ba8 <generatorSetModePWM>
			TIMGenPwmInit();
 8004b08:	f016 fc08 	bl	801b31c <TIMGenPwmInit>
#endif //USE_GEN_PWM
			break;
 8004b0c:	e01d      	b.n	8004b4a <GeneratorTask+0x15a>
		case MSG_GEN_DAC_MODE:  /* Set DAC mode */
			generatorSetModeDAC();
 8004b0e:	f000 f859 	bl	8004bc4 <generatorSetModeDAC>
			TIMGenInit();
 8004b12:	f016 fb19 	bl	801b148 <TIMGenInit>
			break;
 8004b16:	e018      	b.n	8004b4a <GeneratorTask+0x15a>
		case MSG_GEN_DEINIT:
			if(generator.modeState==GENERATOR_DAC){				
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <GeneratorTask+0x160>)
 8004b1a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <GeneratorTask+0x13a>
				TIMGenDacDeinit();
 8004b24:	f016 fb1a 	bl	801b15c <TIMGenDacDeinit>
#ifdef USE_GEN_PWM
				TIMGenPwmDeinit();

#endif //USE_GEN_PWM
			}
			break;
 8004b28:	e00e      	b.n	8004b48 <GeneratorTask+0x158>
			}else if(generator.modeState==GENERATOR_PWM){
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <GeneratorTask+0x160>)
 8004b2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d108      	bne.n	8004b48 <GeneratorTask+0x158>
				TIMGenPwmDeinit();
 8004b36:	f016 fbfd 	bl	801b334 <TIMGenPwmDeinit>
			break;
 8004b3a:	e005      	b.n	8004b48 <GeneratorTask+0x158>
		default:
			break;
 8004b3c:	bf00      	nop
 8004b3e:	e768      	b.n	8004a12 <GeneratorTask+0x22>
			break;
 8004b40:	bf00      	nop
 8004b42:	e766      	b.n	8004a12 <GeneratorTask+0x22>
			break;
 8004b44:	bf00      	nop
 8004b46:	e764      	b.n	8004a12 <GeneratorTask+0x22>
			break;
 8004b48:	bf00      	nop
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004b4a:	e762      	b.n	8004a12 <GeneratorTask+0x22>
 8004b4c:	20004988 	.word	0x20004988
 8004b50:	20004948 	.word	0x20004948

08004b54 <genSetMode>:
 * @brief  Sets arb. generator mode.
 * @param  mode: GEN_DAC or GEN_PWM
 * @retval None
 */
void genSetMode(uint8_t mode)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;

	switch(mode){
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <genSetMode+0x2e>
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d000      	beq.n	8004b6a <genSetMode+0x16>
	case GEN_DAC:
		passMsg = MSG_GEN_DAC_MODE;
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		break;
	default:
		break;
 8004b68:	e017      	b.n	8004b9a <genSetMode+0x46>
		passMsg = MSG_GEN_PWM_MODE;
 8004b6a:	2322      	movs	r3, #34	; 0x22
 8004b6c:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <genSetMode+0x50>)
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f107 010e 	add.w	r1, r7, #14
 8004b76:	2300      	movs	r3, #0
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	f010 fada 	bl	8015134 <xQueueGenericSend>
		break;
 8004b80:	e00b      	b.n	8004b9a <genSetMode+0x46>
		passMsg = MSG_GEN_DAC_MODE;
 8004b82:	2321      	movs	r3, #33	; 0x21
 8004b84:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <genSetMode+0x50>)
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f107 010e 	add.w	r1, r7, #14
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	f010 face 	bl	8015134 <xQueueGenericSend>
		break;
 8004b98:	bf00      	nop
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20004988 	.word	0x20004988

08004ba8 <generatorSetModePWM>:
/**
 * @brief  Sets generator mode to PWM.
 * @param  None
 * @retval None
 */
void generatorSetModePWM(void){
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
	//generator_deinit();
	generator.modeState = GENERATOR_PWM;
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <generatorSetModePWM+0x18>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20004948 	.word	0x20004948

08004bc4 <generatorSetModeDAC>:
/**
 * @brief  Sets generator mode to DAC.
 * @param  None
 * @retval None
 */
void generatorSetModeDAC(void){
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
	//generator_deinit();
	//TIMGenPwmDeinit();	
	generator.modeState = GENERATOR_DAC;
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <generatorSetModeDAC+0x18>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20004948 	.word	0x20004948

08004be0 <generator_deinit>:
/**
 * @brief  Generator deinitialization.
 * @param  None
 * @retval None
 */
void generator_deinit(void){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
	switch(generator.modeState){
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <generator_deinit+0x28>)
 8004be6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <generator_deinit+0x1c>
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d000      	beq.n	8004bf6 <generator_deinit+0x16>
		break;
	case GENERATOR_DAC:
		TIMGenDacDeinit();
		break;
	}
}
 8004bf4:	e005      	b.n	8004c02 <generator_deinit+0x22>
		TIMGenPwmDeinit();
 8004bf6:	f016 fb9d 	bl	801b334 <TIMGenPwmDeinit>
		break;
 8004bfa:	e002      	b.n	8004c02 <generator_deinit+0x22>
		TIMGenDacDeinit();
 8004bfc:	f016 faae 	bl	801b15c <TIMGenDacDeinit>
		break;
 8004c00:	bf00      	nop
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20004948 	.word	0x20004948

08004c0c <generatorSetDefault>:
 * @brief  Generator set Default values
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
	generator.bufferMemory=generatorBuffer;
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <generatorSetDefault+0x74>)
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <generatorSetDefault+0x78>)
 8004c16:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004c18:	2300      	movs	r3, #0
 8004c1a:	71fb      	strb	r3, [r7, #7]
 8004c1c:	e011      	b.n	8004c42 <generatorSetDefault+0x36>
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <generatorSetDefault+0x74>)
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2a:	605a      	str	r2, [r3, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <generatorSetDefault+0x74>)
 8004c30:	3302      	adds	r3, #2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c3a:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	71fb      	strb	r3, [r7, #7]
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d9ea      	bls.n	8004c1e <generatorSetDefault+0x12>
	}

	generator.numOfChannles=1;
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <generatorSetDefault+0x74>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <generatorSetDefault+0x74>)
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <generatorSetDefault+0x74>)
 8004c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5e:	869a      	strh	r2, [r3, #52]	; 0x34
	generator.pChanMem[0]=generatorBuffer;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <generatorSetDefault+0x74>)
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <generatorSetDefault+0x78>)
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c
	generator.state=GENERATOR_IDLE;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <generatorSetDefault+0x74>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <generatorSetDefault+0x74>)
 8004c70:	220c      	movs	r2, #12
 8004c72:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20004948 	.word	0x20004948
 8004c84:	2000498c 	.word	0x2000498c

08004c88 <genInit>:
 * @brief  Arb. DAC Generator initialization function.
 * @param  None
 * @retval None
 */
void genInit(void)
{	
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004c8e:	2300      	movs	r3, #0
 8004c90:	71fb      	strb	r3, [r7, #7]
 8004c92:	e02c      	b.n	8004cee <genInit+0x66>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <genInit+0x74>)
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	79f9      	ldrb	r1, [r7, #7]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f016 f9ca 	bl	801b03c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <genInit+0x74>)
 8004caa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	79fa      	ldrb	r2, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d212      	bcs.n	8004cdc <genInit+0x54>
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <genInit+0x74>)
 8004cba:	330a      	adds	r3, #10
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <genInit+0x74>)
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	889b      	ldrh	r3, [r3, #4]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f013 fb67 	bl	80183a8 <DAC_DMA_Reconfig>
 8004cda:	e005      	b.n	8004ce8 <genInit+0x60>
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f013 fb60 	bl	80183a8 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	3301      	adds	r3, #1
 8004cec:	71fb      	strb	r3, [r7, #7]
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d9cf      	bls.n	8004c94 <genInit+0xc>
		}
	}	
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20004948 	.word	0x20004948

08004d00 <genPwmInit>:
 * @brief  Arb. PWM Generator initialization function.
 * @param  None
 * @retval None
 */
void genPwmInit(void)
{	
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004d06:	2300      	movs	r3, #0
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	e017      	b.n	8004d3c <genPwmInit+0x3c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <genPwmInit+0x4c>)
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	79f9      	ldrb	r1, [r7, #7]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f016 f98e 	bl	801b03c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <genPwmInit+0x4c>)
 8004d22:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	79fa      	ldrb	r2, [r7, #7]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d203      	bcs.n	8004d36 <genPwmInit+0x36>
			TIM_DMA_Reconfig(i);			
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f016 fa41 	bl	801b1b8 <TIM_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d9e4      	bls.n	8004d0c <genPwmInit+0xc>
		}
	}
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20004948 	.word	0x20004948

08004d50 <genPwmSetFrequency>:

void genPwmSetFrequency(double freq, uint8_t channel){
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	ed97 0b02 	vldr	d0, [r7, #8]
 8004d66:	f016 f997 	bl	801b098 <TIM_Reconfig_GenPwm>
 8004d6a:	ed87 0b06 	vstr	d0, [r7, #24]

	uint16_t passMsg;
	if(channel == 0){
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d107      	bne.n	8004d84 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8004d74:	2323      	movs	r3, #35	; 0x23
 8004d76:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh1 = realPwmFrq;
 8004d78:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <genPwmSetFrequency+0x64>)
 8004d7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d7e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004d82:	e009      	b.n	8004d98 <genPwmSetFrequency+0x48>
	}else if(channel == 1){
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d106      	bne.n	8004d98 <genPwmSetFrequency+0x48>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8004d8a:	2324      	movs	r3, #36	; 0x24
 8004d8c:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh2 = realPwmFrq;
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <genPwmSetFrequency+0x64>)
 8004d90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d94:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <genPwmSetFrequency+0x68>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	f107 0116 	add.w	r1, r7, #22
 8004da0:	2300      	movs	r3, #0
 8004da2:	f04f 32ff 	mov.w	r2, #4294967295
 8004da6:	f010 f9c5 	bl	8015134 <xQueueGenericSend>
}
 8004daa:	bf00      	nop
 8004dac:	3724      	adds	r7, #36	; 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20004948 	.word	0x20004948
 8004db8:	2000455c 	.word	0x2000455c

08004dbc <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	717b      	strb	r3, [r7, #5]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	713b      	strb	r3, [r7, #4]
	uint8_t result = GEN_INVALID_STATE;
 8004dce:	2365      	movs	r3, #101	; 0x65
 8004dd0:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE ){
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <genSetData+0xc8>)
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d14c      	bne.n	8004e78 <genSetData+0xbc>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	005a      	lsls	r2, r3, #1
 8004de2:	797b      	ldrb	r3, [r7, #5]
 8004de4:	4413      	add	r3, r2
 8004de6:	0fda      	lsrs	r2, r3, #31
 8004de8:	4413      	add	r3, r2
 8004dea:	105b      	asrs	r3, r3, #1
 8004dec:	4619      	mov	r1, r3
 8004dee:	793b      	ldrb	r3, [r7, #4]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4a24      	ldr	r2, [pc, #144]	; (8004e84 <genSetData+0xc8>)
 8004df4:	3318      	adds	r3, #24
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	889b      	ldrh	r3, [r3, #4]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	dc38      	bgt.n	8004e74 <genSetData+0xb8>
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <genSetData+0xc8>)
 8004e04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	793a      	ldrb	r2, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d831      	bhi.n	8004e74 <genSetData+0xb8>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e10:	793b      	ldrb	r3, [r7, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <genSetData+0xc8>)
 8004e16:	330a      	adds	r3, #10
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	0052      	lsls	r2, r2, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	797a      	ldrb	r2, [r7, #5]
 8004e26:	b292      	uxth	r2, r2
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fac4 	bl	80033b8 <commBufferReadNBytes>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	797b      	ldrb	r3, [r7, #5]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d119      	bne.n	8004e6e <genSetData+0xb2>
 8004e3a:	f107 030f 	add.w	r3, r7, #15
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fa7c 	bl	800333c <commBufferReadByte>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d111      	bne.n	8004e6e <genSetData+0xb2>
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b3b      	cmp	r3, #59	; 0x3b
 8004e4e:	d10e      	bne.n	8004e6e <genSetData+0xb2>
				result = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
				uint16_t passMsg = MSG_INVALIDATE;
 8004e54:	2334      	movs	r3, #52	; 0x34
 8004e56:	81bb      	strh	r3, [r7, #12]
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <genSetData+0xcc>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	f107 010c 	add.w	r1, r7, #12
 8004e60:	2300      	movs	r3, #0
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	f010 f965 	bl	8015134 <xQueueGenericSend>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e6a:	bf00      	nop
 8004e6c:	e004      	b.n	8004e78 <genSetData+0xbc>
			}else{
				result = GEN_INVALID_DATA;
 8004e6e:	236d      	movs	r3, #109	; 0x6d
 8004e70:	73fb      	strb	r3, [r7, #15]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e72:	e001      	b.n	8004e78 <genSetData+0xbc>
			}
		}else{
			result = GEN_OUT_OF_MEMORY;
 8004e74:	2366      	movs	r3, #102	; 0x66
 8004e76:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20004948 	.word	0x20004948
 8004e88:	20004988 	.word	0x20004988

08004e8c <genSetFrequency>:
 * @brief  Arb. DAC Generator set frequency function.
 * @param  Freq: required generating frequency
 * @param  chan: channel number 1 or 2
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
	uint8_t result = GEN_TO_HIGH_FREQ;
 8004e98:	2369      	movs	r3, #105	; 0x69
 8004e9a:	73fb      	strb	r3, [r7, #15]
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <genSetFrequency+0x60>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d81e      	bhi.n	8004ee2 <genSetFrequency+0x56>
		generator.generatingFrequency[chan-1] = freq;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <genSetFrequency+0x64>)
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <genSetFrequency+0x64>)
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	6858      	ldr	r0, [r3, #4]
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f107 0208 	add.w	r2, r7, #8
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f016 f8b7 	bl	801b03c <TIM_Reconfig_gen>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]
		generator.realGenFrequency[chan-1] = realFreq;
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4905      	ldr	r1, [pc, #20]	; (8004ef0 <genSetFrequency+0x64>)
 8004eda:	3302      	adds	r3, #2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	605a      	str	r2, [r3, #4]
	}
	return result;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	001e8480 	.word	0x001e8480
 8004ef0:	20004948 	.word	0x20004948

08004ef4 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1;
 8004efa:	2328      	movs	r3, #40	; 0x28
 8004efc:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <genSendRealSamplingFreq+0x38>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	1db9      	adds	r1, r7, #6
 8004f04:	2300      	movs	r3, #0
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	f010 f913 	bl	8015134 <xQueueGenericSend>
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8004f0e:	2329      	movs	r3, #41	; 0x29
 8004f10:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <genSendRealSamplingFreq+0x38>)
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	1db9      	adds	r1, r7, #6
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	f010 f909 	bl	8015134 <xQueueGenericSend>
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000455c 	.word	0x2000455c

08004f30 <genDataOKSendNext>:

void genDataOKSendNext(void){
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_NEXT;
 8004f36:	232a      	movs	r3, #42	; 0x2a
 8004f38:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <genDataOKSendNext+0x24>)
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	1db9      	adds	r1, r7, #6
 8004f40:	2300      	movs	r3, #0
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	f010 f8f5 	bl	8015134 <xQueueGenericSend>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2000455c 	.word	0x2000455c

08004f58 <genStatusOK>:

void genStatusOK(void){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_OK;
 8004f5e:	232b      	movs	r3, #43	; 0x2b
 8004f60:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <genStatusOK+0x24>)
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	1db9      	adds	r1, r7, #6
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	f010 f8e1 	bl	8015134 <xQueueGenericSend>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	2000455c 	.word	0x2000455c

08004f80 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
	return generator.realGenFrequency[chan-1];
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <genGetRealSmplFreq+0x24>)
 8004f90:	3302      	adds	r3, #2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	685b      	ldr	r3, [r3, #4]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20004948 	.word	0x20004948

08004fa8 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t result=GEN_INVALID_STATE;
 8004fb4:	2365      	movs	r3, #101	; 0x65
 8004fb6:	75fb      	strb	r3, [r7, #23]
	if(generator.state==GENERATOR_IDLE){
 8004fb8:	4b17      	ldr	r3, [pc, #92]	; (8005018 <genSetLength+0x70>)
 8004fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d123      	bne.n	800500c <genSetLength+0x64>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <genSetLength+0x70>)
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	613b      	str	r3, [r7, #16]
		if(length<=generator.maxOneChanSamples){
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <genSetLength+0x70>)
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d80e      	bhi.n	8004ff2 <genSetLength+0x4a>
			generator.oneChanSamples[chan-1]=length;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	b291      	uxth	r1, r2
 8004fdc:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <genSetLength+0x70>)
 8004fde:	3318      	adds	r3, #24
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	809a      	strh	r2, [r3, #4]
			clearGenBuffer();
 8004fe8:	f000 f882 	bl	80050f0 <clearGenBuffer>
			result=0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
 8004ff0:	e001      	b.n	8004ff6 <genSetLength+0x4e>
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8004ff2:	2367      	movs	r3, #103	; 0x67
 8004ff4:	75fb      	strb	r3, [r7, #23]
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8004ff6:	2334      	movs	r3, #52	; 0x34
 8004ff8:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <genSetLength+0x74>)
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	f107 010e 	add.w	r1, r7, #14
 8005002:	2300      	movs	r3, #0
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	f010 f894 	bl	8015134 <xQueueGenericSend>
	}
	return result;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004948 	.word	0x20004948
 800501c:	20004988 	.word	0x20004988

08005020 <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
	uint8_t result=GEN_INVALID_STATE;
 800502a:	2365      	movs	r3, #101	; 0x65
 800502c:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=generator.numOfChannles;
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <genSetNumOfChannels+0xc4>)
 8005030:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005034:	73bb      	strb	r3, [r7, #14]
	if(generator.state==GENERATOR_IDLE){
 8005036:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <genSetNumOfChannels+0xc4>)
 8005038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d14b      	bne.n	80050da <genSetNumOfChannels+0xba>
		if(chan<=MAX_DAC_CHANNELS){
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d848      	bhi.n	80050da <genSetNumOfChannels+0xba>
			while(chanTmp>0){
 8005048:	e013      	b.n	8005072 <genSetNumOfChannels+0x52>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	3b01      	subs	r3, #1
 800504e:	73bb      	strb	r3, [r7, #14]
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <genSetNumOfChannels+0xc4>)
 8005054:	3318      	adds	r3, #24
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	889b      	ldrh	r3, [r3, #4]
 800505c:	b29b      	uxth	r3, r3
 800505e:	4619      	mov	r1, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	fb92 f3f3 	sdiv	r3, r2, r3
 800506a:	4299      	cmp	r1, r3
 800506c:	dd01      	ble.n	8005072 <genSetNumOfChannels+0x52>
					return GEN_BUFFER_SIZE_ERR;
 800506e:	2367      	movs	r3, #103	; 0x67
 8005070:	e034      	b.n	80050dc <genSetNumOfChannels+0xbc>
			while(chanTmp>0){
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e8      	bne.n	800504a <genSetNumOfChannels+0x2a>
				}
			}
			generator.numOfChannles=chan;
 8005078:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <genSetNumOfChannels+0xc4>)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	fb92 f3f3 	sdiv	r3, r2, r3
 800508a:	461a      	mov	r2, r3
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <genSetNumOfChannels+0xc4>)
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8005090:	2300      	movs	r3, #0
 8005092:	737b      	strb	r3, [r7, #13]
 8005094:	e010      	b.n	80050b8 <genSetNumOfChannels+0x98>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <genSetNumOfChannels+0xc4>)
 800509a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800509c:	fb02 f203 	mul.w	r2, r2, r3
 80050a0:	7b7b      	ldrb	r3, [r7, #13]
 80050a2:	0052      	lsls	r2, r2, #1
 80050a4:	4910      	ldr	r1, [pc, #64]	; (80050e8 <genSetNumOfChannels+0xc8>)
 80050a6:	440a      	add	r2, r1
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <genSetNumOfChannels+0xc4>)
 80050aa:	330a      	adds	r3, #10
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	3301      	adds	r3, #1
 80050b6:	737b      	strb	r3, [r7, #13]
 80050b8:	7b7a      	ldrb	r2, [r7, #13]
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3ea      	bcc.n	8005096 <genSetNumOfChannels+0x76>
			}
			result=0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
			uint16_t passMsg = MSG_INVALIDATE;
 80050c4:	2334      	movs	r3, #52	; 0x34
 80050c6:	817b      	strh	r3, [r7, #10]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80050c8:	4b08      	ldr	r3, [pc, #32]	; (80050ec <genSetNumOfChannels+0xcc>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	f107 010a 	add.w	r1, r7, #10
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	f010 f82d 	bl	8015134 <xQueueGenericSend>
		}
	}
	return result;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20004948 	.word	0x20004948
 80050e8:	2000498c 	.word	0x2000498c
 80050ec:	20004988 	.word	0x20004988

080050f0 <clearGenBuffer>:
/**
 * @brief 	Clears generator buffer
 * @param  None
 * @retval None
 */
void clearGenBuffer(void){
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e007      	b.n	800510c <clearGenBuffer+0x1c>
		generatorBuffer[i]=0;
 80050fc:	4a09      	ldr	r2, [pc, #36]	; (8005124 <clearGenBuffer+0x34>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2100      	movs	r1, #0
 8005102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3301      	adds	r3, #1
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005112:	4293      	cmp	r3, r2
 8005114:	d9f2      	bls.n	80050fc <clearGenBuffer+0xc>
	}
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000498c 	.word	0x2000498c

08005128 <genSetOutputBuffer>:

void genSetOutputBuffer(void){
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	DACSetOutputBuffer();
 800512c:	f013 f992 	bl	8018454 <DACSetOutputBuffer>
}
 8005130:	bf00      	nop
 8005132:	bd80      	pop	{r7, pc}

08005134 <genUnsetOutputBuffer>:

void genUnsetOutputBuffer(void){
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	DACUnsetOutputBuffer();
 8005138:	f013 f998 	bl	801846c <DACUnsetOutputBuffer>
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <genSetDAC>:

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	460a      	mov	r2, r1
 800514a:	80fb      	strh	r3, [r7, #6]
 800514c:	4613      	mov	r3, r2
 800514e:	80bb      	strh	r3, [r7, #4]
	uint8_t result=0;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE){
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <genSetDAC+0x9c>)
 8005156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11c      	bne.n	800519a <genSetDAC+0x5a>
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8005160:	2300      	movs	r3, #0
 8005162:	73bb      	strb	r3, [r7, #14]
 8005164:	e00e      	b.n	8005184 <genSetDAC+0x44>
			result+=genSetLength(1,i+1);
 8005166:	7bbb      	ldrb	r3, [r7, #14]
 8005168:	3301      	adds	r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	2001      	movs	r0, #1
 8005170:	f7ff ff1a 	bl	8004fa8 <genSetLength>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	4413      	add	r3, r2
 800517c:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	3301      	adds	r3, #1
 8005182:	73bb      	strb	r3, [r7, #14]
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d9ed      	bls.n	8005166 <genSetDAC+0x26>
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 800518a:	2002      	movs	r0, #2
 800518c:	f7ff ff48 	bl	8005020 <genSetNumOfChannels>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4413      	add	r3, r2
 8005198:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <genSetDAC+0x9c>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,1);
 80051a2:	2101      	movs	r1, #1
 80051a4:	2064      	movs	r0, #100	; 0x64
 80051a6:	f7ff fe71 	bl	8004e8c <genSetFrequency>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	4413      	add	r3, r2
 80051b2:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <genSetDAC+0x9c>)
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	88ba      	ldrh	r2, [r7, #4]
 80051ba:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,2);
 80051bc:	2102      	movs	r1, #2
 80051be:	2064      	movs	r0, #100	; 0x64
 80051c0:	f7ff fe64 	bl	8004e8c <genSetFrequency>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4413      	add	r3, r2
 80051cc:	73fb      	strb	r3, [r7, #15]
	}
	genStart();	
 80051ce:	f000 f807 	bl	80051e0 <genStart>


	return result;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20004948 	.word	0x20004948

080051e0 <genStart>:
/**
 * @brief  Start generator terminator skynet
 * @param  None
 * @retval None
 */
void genStart(void){
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_START;
 80051e6:	2325      	movs	r3, #37	; 0x25
 80051e8:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <genStart+0x24>)
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	1db9      	adds	r1, r7, #6
 80051f0:	2300      	movs	r3, #0
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	f00f ff9d 	bl	8015134 <xQueueGenericSend>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20004988 	.word	0x20004988

08005208 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_STOP;
 800520e:	2326      	movs	r3, #38	; 0x26
 8005210:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <genStop+0x24>)
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	1db9      	adds	r1, r7, #6
 8005218:	2300      	movs	r3, #0
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	f00f ff89 	bl	8015134 <xQueueGenericSend>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20004988 	.word	0x20004988

08005230 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_DEINIT;
 8005236:	2327      	movs	r3, #39	; 0x27
 8005238:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <genReset+0x24>)
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	1db9      	adds	r1, r7, #6
 8005240:	2300      	movs	r3, #0
 8005242:	f04f 32ff 	mov.w	r2, #4294967295
 8005246:	f00f ff75 	bl	8015134 <xQueueGenericSend>
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20004988 	.word	0x20004988

08005258 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 8005260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005264:	81fb      	strh	r3, [r7, #14]
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8005266:	2200      	movs	r2, #0
 8005268:	2104      	movs	r1, #4
 800526a:	2005      	movs	r0, #5
 800526c:	f00f fe6e 	bl	8014f4c <xQueueGenericCreate>
 8005270:	4602      	mov	r2, r0
 8005272:	4b25      	ldr	r3, [pc, #148]	; (8005308 <LogAnlysTask+0xb0>)
 8005274:	601a      	str	r2, [r3, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8005276:	2004      	movs	r0, #4
 8005278:	f00f feda 	bl	8015030 <xQueueCreateMutex>
 800527c:	4602      	mov	r2, r0
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <LogAnlysTask+0xb4>)
 8005280:	601a      	str	r2, [r3, #0]

	logAnlysSetDefault();
 8005282:	f000 f99d 	bl	80055c0 <logAnlysSetDefault>
	/* Get tick count for vTaskDelayUntil() function */
	//	xLastWakeTime = xTaskGetTickCount();

	while(1){

		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8005286:	4b20      	ldr	r3, [pc, #128]	; (8005308 <LogAnlysTask+0xb0>)
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f107 010e 	add.w	r1, r7, #14
 800528e:	2300      	movs	r3, #0
 8005290:	f04f 32ff 	mov.w	r2, #4294967295
 8005294:	f010 f8dc 	bl	8015450 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <LogAnlysTask+0xb4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f04f 31ff 	mov.w	r1, #4294967295
 80052a0:	4618      	mov	r0, r3
 80052a2:	f00f ff10 	bl	80150c6 <xQueueTakeMutexRecursive>

		switch(message){
 80052a6:	89fb      	ldrh	r3, [r7, #14]
 80052a8:	3b19      	subs	r3, #25
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d824      	bhi.n	80052f8 <LogAnlysTask+0xa0>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <LogAnlysTask+0x5c>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052c9 	.word	0x080052c9
 80052b8:	080052cf 	.word	0x080052cf
 80052bc:	080052d5 	.word	0x080052d5
 80052c0:	080052db 	.word	0x080052db
 80052c4:	080052e1 	.word	0x080052e1
		uint16_t passMsg;
		case MSG_LOGAN_INIT:
			//			logAnlys.state = LOGA_IDLE;
			logAnlysInit();
 80052c8:	f000 f886 	bl	80053d8 <logAnlysInit>
			break;
 80052cc:	e015      	b.n	80052fa <LogAnlysTask+0xa2>
		case MSG_LOGAN_DEINIT:
			logAnlysDeinit();
 80052ce:	f000 f88f 	bl	80053f0 <logAnlysDeinit>
			//			logAnlys.state = LOGA_IDLE;
			break;
 80052d2:	e012      	b.n	80052fa <LogAnlysTask+0xa2>
		case MSG_LOGAN_START:
			logAnlysStart();
 80052d4:	f000 f898 	bl	8005408 <logAnlysStart>
			break;
 80052d8:	e00f      	b.n	80052fa <LogAnlysTask+0xa2>
		case MSG_LOGAN_STOP:
			logAnlysStop();
 80052da:	f000 f8b7 	bl	800544c <logAnlysStop>
			break;
 80052de:	e00c      	b.n	80052fa <LogAnlysTask+0xa2>
		case MSG_LOGAN_SAMPLING_END:
			passMsg = MSG_LOGAN_SEND_DATA;
 80052e0:	231e      	movs	r3, #30
 80052e2:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <LogAnlysTask+0xb8>)
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	f107 010c 	add.w	r1, r7, #12
 80052ec:	2300      	movs	r3, #0
 80052ee:	f04f 32ff 	mov.w	r2, #4294967295
 80052f2:	f00f ff1f 	bl	8015134 <xQueueGenericSend>
			break;
 80052f6:	e000      	b.n	80052fa <LogAnlysTask+0xa2>
		default:
			break;
 80052f8:	bf00      	nop
		}			

		xSemaphoreGiveRecursive(logAnlysMutex);
 80052fa:	4b04      	ldr	r3, [pc, #16]	; (800530c <LogAnlysTask+0xb4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f00f feae 	bl	8015060 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8005304:	e7bf      	b.n	8005286 <LogAnlysTask+0x2e>
 8005306:	bf00      	nop
 8005308:	2000709c 	.word	0x2000709c
 800530c:	200070b8 	.word	0x200070b8
 8005310:	2000455c 	.word	0x2000455c

08005314 <logAnlysSendInit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendInit(void){
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_INIT;
 800531a:	2319      	movs	r3, #25
 800531c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <logAnlysSendInit+0x24>)
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	1db9      	adds	r1, r7, #6
 8005324:	2300      	movs	r3, #0
 8005326:	f04f 32ff 	mov.w	r2, #4294967295
 800532a:	f00f ff03 	bl	8015134 <xQueueGenericSend>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000709c 	.word	0x2000709c

0800533c <logAnlysSendDeinit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendDeinit(void){
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8005342:	231a      	movs	r3, #26
 8005344:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <logAnlysSendDeinit+0x24>)
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	1db9      	adds	r1, r7, #6
 800534c:	2300      	movs	r3, #0
 800534e:	f04f 32ff 	mov.w	r2, #4294967295
 8005352:	f00f feef 	bl	8015134 <xQueueGenericSend>
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	2000709c 	.word	0x2000709c

08005364 <logAnlysSendStart>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStart(void){
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_START;
 800536a:	231b      	movs	r3, #27
 800536c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <logAnlysSendStart+0x24>)
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	1db9      	adds	r1, r7, #6
 8005374:	2300      	movs	r3, #0
 8005376:	f04f 32ff 	mov.w	r2, #4294967295
 800537a:	f00f fedb 	bl	8015134 <xQueueGenericSend>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	2000709c 	.word	0x2000709c

0800538c <logAnlysSendStop>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStop(void){
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_STOP;
 8005392:	231c      	movs	r3, #28
 8005394:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <logAnlysSendStop+0x24>)
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	1db9      	adds	r1, r7, #6
 800539c:	2300      	movs	r3, #0
 800539e:	f04f 32ff 	mov.w	r2, #4294967295
 80053a2:	f00f fec7 	bl	8015134 <xQueueGenericSend>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000709c 	.word	0x2000709c

080053b4 <logAnlysPeriodElapsedCallback>:
 *					Sends the info to the queue of Logic analyzer task.
 *					Called from LOG_ANLYS_PeriodElapsedCallback() (ISR) in tim.c.
 * @param  None
 * @retval None
 */
void logAnlysPeriodElapsedCallback(void){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 80053ba:	231d      	movs	r3, #29
 80053bc:	807b      	strh	r3, [r7, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <logAnlysPeriodElapsedCallback+0x20>)
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	1d3a      	adds	r2, r7, #4
 80053c4:	1cb9      	adds	r1, r7, #2
 80053c6:	2300      	movs	r3, #0
 80053c8:	f00f ffae 	bl	8015328 <xQueueGenericSendFromISR>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	2000709c 	.word	0x2000709c

080053d8 <logAnlysInit>:
 * @brief  Initialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysInit(void){
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	/* Log. analyzer uses TIM4 as well as Universal counter. Therefore, there
		 has to be some clue for msp_init function to decide which functionality
		 to initialize - LOGA_ENABLED */
	logAnlys.enable = LOGA_ENABLED;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <logAnlysInit+0x14>)
 80053de:	2201      	movs	r2, #1
 80053e0:	74da      	strb	r2, [r3, #19]
	TIM_LogAnlys_Init();
 80053e2:	f016 f965 	bl	801b6b0 <TIM_LogAnlys_Init>
}	
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200070a0 	.word	0x200070a0

080053f0 <logAnlysDeinit>:
 * @brief  Deinitialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysDeinit(void){
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Deinit();
 80053f4:	f016 f98a 	bl	801b70c <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <logAnlysDeinit+0x14>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	74da      	strb	r2, [r3, #19]
}	
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200070a0 	.word	0x200070a0

08005408 <logAnlysStart>:
 * @brief  Start Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStart(void){
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
	/* Start sampling */		
	TIM_LogAnlys_Start();		
 800540c:	f016 f9ae 	bl	801b76c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <logAnlysStart+0x3c>)
 8005412:	2201      	movs	r2, #1
 8005414:	749a      	strb	r2, [r3, #18]

	/* Wait the pretrigger time */
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <logAnlysStart+0x3c>)
 8005418:	891b      	ldrh	r3, [r3, #8]
 800541a:	b29b      	uxth	r3, r3
 800541c:	4618      	mov	r0, r3
 800541e:	f010 fb63 	bl	8015ae8 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <logAnlysStart+0x40>)
 8005424:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8005428:	615a      	str	r2, [r3, #20]

	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <logAnlysStart+0x3c>)
 800542c:	7d1b      	ldrb	r3, [r3, #20]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <logAnlysStart+0x34>
		/* In AUTO trigger mode the posttriger is started without event trigger. After posttrigger 
			 time elapses the data is sent to PC even if the trigger did not occur. */
		LOG_ANLYS_TriggerEventOccured();		
 8005434:	f016 f928 	bl	801b688 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8005438:	f016 fa12 	bl	801b860 <TIM_PostTrigger_SoftwareStart>
	}

	/* Enable trigger after pretrigger time elapses */		
	GPIO_EnableTrigger();	
 800543c:	f016 fa44 	bl	801b8c8 <GPIO_EnableTrigger>
}	
 8005440:	bf00      	nop
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200070a0 	.word	0x200070a0
 8005448:	40010400 	.word	0x40010400

0800544c <logAnlysStop>:
 * @brief  Stop Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStop(void){
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Stop();
 8005450:	f016 f9a8 	bl	801b7a4 <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8005454:	4b02      	ldr	r3, [pc, #8]	; (8005460 <logAnlysStop+0x14>)
 8005456:	2204      	movs	r2, #4
 8005458:	749a      	strb	r2, [r3, #18]
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200070a0 	.word	0x200070a0

08005464 <logAnlysSetSamplingFreq>:
 *					This function sets timer frequency for triggering DMA in order to trasfer data from GPIOs to RAM.
 *					Called directly from parser (cmd_parser.c).
 * @param  arrPsc: 16-bit ARR and 16-bit PSC register values of timer in one 32-bit
 * @retval None
 */
void logAnlysSetSamplingFreq(uint32_t samplingFrequency){
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f016 f9d3 	bl	801b818 <TIM_LogAnlys_SamplingFreq_Reconfig>
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <logAnlysSetSamplesNum>:
 * @brief  Sets data length (samples number) of Logic analyzer.
 *					Called directly from parser (cmd_parser.c).
 * @param  samplesNum: 16-bit value
 * @retval None
 */
void logAnlysSetSamplesNum(uint16_t samplesNum){
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <logAnlysSetSamplesNum+0x30>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f04f 31ff 	mov.w	r1, #4294967295
 800548e:	4618      	mov	r0, r3
 8005490:	f00f fe19 	bl	80150c6 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 8005494:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <logAnlysSetSamplesNum+0x34>)
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	8213      	strh	r3, [r2, #16]
	xSemaphoreGiveRecursive(logAnlysMutex);
 800549a:	4b04      	ldr	r3, [pc, #16]	; (80054ac <logAnlysSetSamplesNum+0x30>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f00f fdde 	bl	8015060 <xQueueGiveMutexRecursive>
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200070b8 	.word	0x200070b8
 80054b0:	200070a0 	.word	0x200070a0

080054b4 <logAnlysSetPretrigger>:
 *					This function configures pretrigger time which represents the time before the trigger on selected channel occurs.
 *					Called directly from parser (cmd_parser.c).
 * @param  timeInMilliseconds: time in milliseconds
 * @retval None
 */
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <logAnlysSetPretrigger+0x30>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f04f 31ff 	mov.w	r1, #4294967295
 80054c4:	4618      	mov	r0, r3
 80054c6:	f00f fdfe 	bl	80150c6 <xQueueTakeMutexRecursive>
	/* logAnlys task to sleep for defined time in milliseconds */
	logAnlys.preTriggerTime = pretrigMillisec;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <logAnlysSetPretrigger+0x34>)
 80054d0:	811a      	strh	r2, [r3, #8]
	xSemaphoreGiveRecursive(logAnlysMutex);
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <logAnlysSetPretrigger+0x30>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f00f fdc2 	bl	8015060 <xQueueGiveMutexRecursive>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200070b8 	.word	0x200070b8
 80054e8:	200070a0 	.word	0x200070a0

080054ec <logAnlysSetPosttrigger>:
 *					This function configures and starts one timer which after timeout stops the sampling timer in order to stop transferring the data.
 *					Called directly from parser (cmd_parser.c).
 * @param  posttrigInSec: time of posttrigger in seconds
 * @retval None
 */
void logAnlysSetPosttrigger(double posttrigInSec){
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	ed87 0b00 	vstr	d0, [r7]
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 80054f6:	ed97 0b00 	vldr	d0, [r7]
 80054fa:	f016 f969 	bl	801b7d0 <TIM_LogAnlys_PostTrigger_Reconfig>
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <logAnlysSetTriggerRising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerRising(void){
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <logAnlysSetTriggerRising+0x14>)
 800550e:	2200      	movs	r2, #0
 8005510:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	200070a0 	.word	0x200070a0

08005520 <logAnlysSetTriggerFalling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerFalling(void){
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <logAnlysSetTriggerFalling+0x14>)
 8005526:	2201      	movs	r2, #1
 8005528:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	200070a0 	.word	0x200070a0

08005538 <logAnlysSetTriggerChannel>:
 * @brief  Sets trigger channel.
 *					Called directly from parser (cmd_parser.c)
 * @param  chan: channel number between 1 and 8
 * @retval None
 */
void logAnlysSetTriggerChannel(uint32_t chan){
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	switch(chan){
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3b01      	subs	r3, #1
 8005544:	2b07      	cmp	r3, #7
 8005546:	d833      	bhi.n	80055b0 <logAnlysSetTriggerChannel+0x78>
 8005548:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <logAnlysSetTriggerChannel+0x18>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	08005591 	.word	0x08005591
 8005564:	08005599 	.word	0x08005599
 8005568:	080055a1 	.word	0x080055a1
 800556c:	080055a9 	.word	0x080055a9
	case 1:
		logAnlys.trigConfig = TRIG_CHAN1;
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 8005572:	2200      	movs	r2, #0
 8005574:	755a      	strb	r2, [r3, #21]
		break;
 8005576:	e01b      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 2:
		logAnlys.trigConfig = TRIG_CHAN2;
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 800557a:	2201      	movs	r2, #1
 800557c:	755a      	strb	r2, [r3, #21]
		break;
 800557e:	e017      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 3:
		logAnlys.trigConfig = TRIG_CHAN3;
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 8005582:	2202      	movs	r2, #2
 8005584:	755a      	strb	r2, [r3, #21]
		break;
 8005586:	e013      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 4:
		logAnlys.trigConfig = TRIG_CHAN4;
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 800558a:	2203      	movs	r2, #3
 800558c:	755a      	strb	r2, [r3, #21]
		break;
 800558e:	e00f      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 5:
		logAnlys.trigConfig = TRIG_CHAN5;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 8005592:	2204      	movs	r2, #4
 8005594:	755a      	strb	r2, [r3, #21]
		break;
 8005596:	e00b      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 6:
		logAnlys.trigConfig = TRIG_CHAN6;
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 800559a:	2205      	movs	r2, #5
 800559c:	755a      	strb	r2, [r3, #21]
		break;
 800559e:	e007      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 7:
		logAnlys.trigConfig = TRIG_CHAN7;
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 80055a2:	2206      	movs	r2, #6
 80055a4:	755a      	strb	r2, [r3, #21]
		break;
 80055a6:	e003      	b.n	80055b0 <logAnlysSetTriggerChannel+0x78>
	case 8:
		logAnlys.trigConfig = TRIG_CHAN8;
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <logAnlysSetTriggerChannel+0x84>)
 80055aa:	2207      	movs	r2, #7
 80055ac:	755a      	strb	r2, [r3, #21]
		break;
 80055ae:	bf00      	nop
	}
	//		GPIO_EnableTrigger();
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	200070a0 	.word	0x200070a0

080055c0 <logAnlysSetDefault>:
 *					pretrigger time, samples number, trigger edge, trigger mode, pointer to samples buffer
 *					Called at the beginning of Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysSetDefault(void){
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055c6:	2232      	movs	r2, #50	; 0x32
 80055c8:	811a      	strh	r2, [r3, #8]
	logAnlys.samplesNumber = 1000;
 80055ca:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055d0:	821a      	strh	r2, [r3, #16]
	logAnlys.trigConfig = TRIG_CHAN1;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	755a      	strb	r2, [r3, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80055d8:	4b08      	ldr	r3, [pc, #32]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	759a      	strb	r2, [r3, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	751a      	strb	r2, [r3, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	75da      	strb	r2, [r3, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <logAnlysSetDefault+0x3c>)
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <logAnlysSetDefault+0x40>)
 80055ee:	60da      	str	r2, [r3, #12]
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200070a0 	.word	0x200070a0
 8005600:	200070c4 	.word	0x200070c4

08005604 <ScopeTask>:
 * 				task is getting messages from other tasks and takes care about oscilloscope functions
 * @param  Task handler, parameters pointer
 * @retval None
 */

void ScopeTask(void const *argument){
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(SCOPE_CH1_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH2_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH3_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH4_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 800560c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005610:	81fb      	strh	r3, [r7, #14]
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8005612:	2200      	movs	r2, #0
 8005614:	2102      	movs	r1, #2
 8005616:	201e      	movs	r0, #30
 8005618:	f00f fc98 	bl	8014f4c <xQueueGenericCreate>
 800561c:	4602      	mov	r2, r0
 800561e:	4b4f      	ldr	r3, [pc, #316]	; (800575c <ScopeTask+0x158>)
 8005620:	601a      	str	r2, [r3, #0]

	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8005622:	2004      	movs	r0, #4
 8005624:	f00f fd04 	bl	8015030 <xQueueCreateMutex>
 8005628:	4602      	mov	r2, r0
 800562a:	4b4d      	ldr	r3, [pc, #308]	; (8005760 <ScopeTask+0x15c>)
 800562c:	601a      	str	r2, [r3, #0]
	scopeSetDefault();
 800562e:	f000 fc49 	bl	8005ec4 <scopeSetDefault>

	while(1){
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <ScopeTask+0x158>)
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	f107 010e 	add.w	r1, r7, #14
 800563a:	2300      	movs	r3, #0
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	f00f ff06 	bl	8015450 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005644:	4b46      	ldr	r3, [pc, #280]	; (8005760 <ScopeTask+0x15c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f04f 31ff 	mov.w	r1, #4294967295
 800564c:	4618      	mov	r0, r3
 800564e:	f00f fd3a 	bl	80150c6 <xQueueTakeMutexRecursive>

		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	2b14      	cmp	r3, #20
 8005656:	d10a      	bne.n	800566e <ScopeTask+0x6a>
 8005658:	4b42      	ldr	r3, [pc, #264]	; (8005764 <ScopeTask+0x160>)
 800565a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <ScopeTask+0x6a>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8005664:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <ScopeTask+0x160>)
 8005666:	2206      	movs	r2, #6
 8005668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800566c:	e070      	b.n	8005750 <ScopeTask+0x14c>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	2b34      	cmp	r3, #52	; 0x34
 8005672:	d125      	bne.n	80056c0 <ScopeTask+0xbc>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8005674:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <ScopeTask+0x160>)
 8005676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b05      	cmp	r3, #5
 800567e:	d067      	beq.n	8005750 <ScopeTask+0x14c>
 8005680:	4b38      	ldr	r3, [pc, #224]	; (8005764 <ScopeTask+0x160>)
 8005682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d061      	beq.n	8005750 <ScopeTask+0x14c>
			}else{
				samplingDisable();
 800568c:	f012 fb4a 	bl	8017d24 <samplingDisable>
				scopeInit();
 8005690:	f000 fb56 	bl	8005d40 <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 8005694:	4b33      	ldr	r3, [pc, #204]	; (8005764 <ScopeTask+0x160>)
 8005696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b06      	cmp	r3, #6
 800569e:	d057      	beq.n	8005750 <ScopeTask+0x14c>
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <ScopeTask+0x160>)
 80056a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d051      	beq.n	8005750 <ScopeTask+0x14c>
					scope.state=SCOPE_SAMPLING_WAITING;
 80056ac:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <ScopeTask+0x160>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					samplesTaken=0;
 80056b4:	4b2c      	ldr	r3, [pc, #176]	; (8005768 <ScopeTask+0x164>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
					samplingEnable();
 80056ba:	f012 fb2d 	bl	8017d18 <samplingEnable>
 80056be:	e047      	b.n	8005750 <ScopeTask+0x14c>
				}
			}	
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80056c0:	89fb      	ldrh	r3, [r7, #14]
 80056c2:	2b12      	cmp	r3, #18
 80056c4:	d12b      	bne.n	800571e <ScopeTask+0x11a>
 80056c6:	4b27      	ldr	r3, [pc, #156]	; (8005764 <ScopeTask+0x160>)
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d025      	beq.n	800571e <ScopeTask+0x11a>
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <ScopeTask+0x160>)
 80056d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d01f      	beq.n	800571e <ScopeTask+0x11a>
 80056de:	4b21      	ldr	r3, [pc, #132]	; (8005764 <ScopeTask+0x160>)
 80056e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d019      	beq.n	800571e <ScopeTask+0x11a>
 80056ea:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <ScopeTask+0x160>)
 80056ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d013      	beq.n	800571e <ScopeTask+0x11a>
			scopeInit();
 80056f6:	f000 fb23 	bl	8005d40 <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 80056fa:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <ScopeTask+0x160>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			samplingEnable();
 8005702:	f012 fb09 	bl	8017d18 <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8005706:	2317      	movs	r3, #23
 8005708:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800570a:	4b18      	ldr	r3, [pc, #96]	; (800576c <ScopeTask+0x168>)
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	f107 010c 	add.w	r1, r7, #12
 8005712:	2300      	movs	r3, #0
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	f00f fd0c 	bl	8015134 <xQueueGenericSend>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 800571c:	e018      	b.n	8005750 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 800571e:	89fb      	ldrh	r3, [r7, #14]
 8005720:	2b13      	cmp	r3, #19
 8005722:	d106      	bne.n	8005732 <ScopeTask+0x12e>
			samplingDisable();
 8005724:	f012 fafe 	bl	8017d24 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8005728:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <ScopeTask+0x160>)
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005730:	e00e      	b.n	8005750 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	2b11      	cmp	r3, #17
 8005736:	d10b      	bne.n	8005750 <ScopeTask+0x14c>
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <ScopeTask+0x160>)
 800573a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b06      	cmp	r3, #6
 8005742:	d105      	bne.n	8005750 <ScopeTask+0x14c>
			//scopeInit();
			samplingEnable();
 8005744:	f012 fae8 	bl	8017d18 <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <ScopeTask+0x160>)
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <ScopeTask+0x15c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f00f fc83 	bl	8015060 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 800575a:	e76a      	b.n	8005632 <ScopeTask+0x2e>
 800575c:	200070c0 	.word	0x200070c0
 8005760:	20000388 	.word	0x20000388
 8005764:	20000394 	.word	0x20000394
 8005768:	200003e8 	.word	0x200003e8
 800576c:	2000455c 	.word	0x2000455c

08005770 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005778:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <ScopeTriggerTask+0x238>)
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d00c      	beq.n	800579e <ScopeTriggerTask+0x2e>
 8005784:	4b88      	ldr	r3, [pc, #544]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d006      	beq.n	800579e <ScopeTriggerTask+0x2e>
 8005790:	4b85      	ldr	r3, [pc, #532]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b03      	cmp	r3, #3
 800579a:	f040 8275 	bne.w	8005c88 <ScopeTriggerTask+0x518>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 800579e:	4b83      	ldr	r3, [pc, #524]	; (80059ac <ScopeTriggerTask+0x23c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f04f 31ff 	mov.w	r1, #4294967295
 80057a6:	4618      	mov	r0, r3
 80057a8:	f00f fc8d 	bl	80150c6 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 80057ac:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <ScopeTriggerTask+0x240>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a80      	ldr	r2, [pc, #512]	; (80059b4 <ScopeTriggerTask+0x244>)
 80057b2:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80057b4:	4b7c      	ldr	r3, [pc, #496]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057b6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80057b8:	4b7b      	ldr	r3, [pc, #492]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	f012 f9b9 	bl	8017b38 <DMA_GetCurrDataCounter>
 80057c6:	4603      	mov	r3, r0
 80057c8:	1ae3      	subs	r3, r4, r3
 80057ca:	4a79      	ldr	r2, [pc, #484]	; (80059b0 <ScopeTriggerTask+0x240>)
 80057cc:	6013      	str	r3, [r2, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80057ce:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d2:	4b77      	ldr	r3, [pc, #476]	; (80059b0 <ScopeTriggerTask+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a73      	ldr	r2, [pc, #460]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057de:	fbb3 f1f2 	udiv	r1, r3, r2
 80057e2:	fb02 f201 	mul.w	r2, r2, r1
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	4a73      	ldr	r2, [pc, #460]	; (80059b8 <ScopeTriggerTask+0x248>)
 80057ea:	6013      	str	r3, [r2, #0]
			uint16_t passMsg;

			//wait for right level before finding trigger (lower level then trigger level for rising edge, higher level for falling edge)
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 80057ec:	4b6e      	ldr	r3, [pc, #440]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 80a0 	bne.w	800593a <ScopeTriggerTask+0x1ca>
				if(scope.settings.adcRes<=8){
 80057fa:	4b6b      	ldr	r3, [pc, #428]	; (80059a8 <ScopeTriggerTask+0x238>)
 80057fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b08      	cmp	r3, #8
 8005802:	d818      	bhi.n	8005836 <ScopeTriggerTask+0xc6>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8005804:	4b68      	ldr	r3, [pc, #416]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005806:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800580a:	b2db      	uxtb	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	4a66      	ldr	r2, [pc, #408]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005810:	330a      	adds	r3, #10
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <ScopeTriggerTask+0x248>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	4413      	add	r3, r2
 8005822:	881a      	ldrh	r2, [r3, #0]
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <ScopeTriggerTask+0x24c>)
 8005826:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 8005828:	4b64      	ldr	r3, [pc, #400]	; (80059bc <ScopeTriggerTask+0x24c>)
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	b29a      	uxth	r2, r3
 8005830:	4b62      	ldr	r3, [pc, #392]	; (80059bc <ScopeTriggerTask+0x24c>)
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e010      	b.n	8005858 <ScopeTriggerTask+0xe8>
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8005836:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005838:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800583c:	b2db      	uxtb	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	4a59      	ldr	r2, [pc, #356]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005842:	330a      	adds	r3, #10
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <ScopeTriggerTask+0x248>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4413      	add	r3, r2
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <ScopeTriggerTask+0x24c>)
 8005856:	801a      	strh	r2, [r3, #0]
				}

				updateTrigger();
 8005858:	f000 fb00 	bl	8005e5c <updateTrigger>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800585c:	4b54      	ldr	r3, [pc, #336]	; (80059b0 <ScopeTriggerTask+0x240>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	b29a      	uxth	r2, r3
 8005862:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <ScopeTriggerTask+0x244>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 fa18 	bl	8005ca0 <samplesPassed>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	4b52      	ldr	r3, [pc, #328]	; (80059c0 <ScopeTriggerTask+0x250>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4413      	add	r3, r2
 800587a:	4a51      	ldr	r2, [pc, #324]	; (80059c0 <ScopeTriggerTask+0x250>)
 800587c:	6013      	str	r3, [r2, #0]
				//start finding right level before trigger (cannot start to find it earlier because pretrigger was not taken yet)
				if (samplesTaken > samplesToStart){
 800587e:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <ScopeTriggerTask+0x250>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <ScopeTriggerTask+0x254>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	f240 81dd 	bls.w	8005c46 <ScopeTriggerTask+0x4d6>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <ScopeTriggerTask+0x238>)
 800588e:	7e1b      	ldrb	r3, [r3, #24]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <ScopeTriggerTask+0x134>
 8005896:	4b49      	ldr	r3, [pc, #292]	; (80059bc <ScopeTriggerTask+0x24c>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	3310      	adds	r3, #16
 800589c:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <ScopeTriggerTask+0x258>)
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	db0b      	blt.n	80058bc <ScopeTriggerTask+0x14c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 80058a4:	4b40      	ldr	r3, [pc, #256]	; (80059a8 <ScopeTriggerTask+0x238>)
 80058a6:	7e1b      	ldrb	r3, [r3, #24]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d119      	bne.n	80058e2 <ScopeTriggerTask+0x172>
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <ScopeTriggerTask+0x24c>)
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	3b10      	subs	r3, #16
 80058b4:	4a44      	ldr	r2, [pc, #272]	; (80059c8 <ScopeTriggerTask+0x258>)
 80058b6:	8812      	ldrh	r2, [r2, #0]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	dd12      	ble.n	80058e2 <ScopeTriggerTask+0x172>
						autoTrigged=0;
 80058bc:	4b43      	ldr	r3, [pc, #268]	; (80059cc <ScopeTriggerTask+0x25c>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80058c2:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <ScopeTriggerTask+0x238>)
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 80058ca:	2317      	movs	r3, #23
 80058cc:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <ScopeTriggerTask+0x260>)
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	f107 010e 	add.w	r1, r7, #14
 80058d6:	2300      	movs	r3, #0
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	f00f fc2a 	bl	8015134 <xQueueGenericSend>
 80058e0:	e1b1      	b.n	8005c46 <ScopeTriggerTask+0x4d6>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <ScopeTriggerTask+0x238>)
 80058e4:	7e5b      	ldrb	r3, [r3, #25]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d106      	bne.n	80058fa <ScopeTriggerTask+0x18a>
 80058ec:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <ScopeTriggerTask+0x238>)
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	009a      	lsls	r2, r3, #2
 80058f2:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <ScopeTriggerTask+0x250>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d30c      	bcc.n	8005914 <ScopeTriggerTask+0x1a4>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <ScopeTriggerTask+0x238>)
 80058fc:	7e5b      	ldrb	r3, [r3, #25]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	f040 81a0 	bne.w	8005c46 <ScopeTriggerTask+0x4d6>
 8005906:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <ScopeTriggerTask+0x250>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	f080 8199 	bcs.w	8005c46 <ScopeTriggerTask+0x4d6>
						autoTrigged=1;
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <ScopeTriggerTask+0x25c>)
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <ScopeTriggerTask+0x238>)
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8005922:	2317      	movs	r3, #23
 8005924:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <ScopeTriggerTask+0x260>)
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	f107 010e 	add.w	r1, r7, #14
 800592e:	2300      	movs	r3, #0
 8005930:	f04f 32ff 	mov.w	r2, #4294967295
 8005934:	f00f fbfe 	bl	8015134 <xQueueGenericSend>
 8005938:	e185      	b.n	8005c46 <ScopeTriggerTask+0x4d6>
					}
				}
				//looking for trigger
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <ScopeTriggerTask+0x238>)
 800593c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	f040 80c1 	bne.w	8005aca <ScopeTriggerTask+0x35a>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <ScopeTriggerTask+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	b29a      	uxth	r2, r3
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <ScopeTriggerTask+0x244>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f000 f9a2 	bl	8005ca0 <samplesPassed>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <ScopeTriggerTask+0x250>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4413      	add	r3, r2
 8005966:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <ScopeTriggerTask+0x250>)
 8005968:	6013      	str	r3, [r2, #0]
				if(scope.settings.adcRes<=8){
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <ScopeTriggerTask+0x238>)
 800596c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b08      	cmp	r3, #8
 8005972:	d82f      	bhi.n	80059d4 <ScopeTriggerTask+0x264>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005976:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <ScopeTriggerTask+0x238>)
 8005980:	330a      	adds	r3, #10
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <ScopeTriggerTask+0x248>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <ScopeTriggerTask+0x24c>)
 8005996:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <ScopeTriggerTask+0x24c>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	b29a      	uxth	r2, r3
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <ScopeTriggerTask+0x24c>)
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	e027      	b.n	80059f6 <ScopeTriggerTask+0x286>
 80059a6:	bf00      	nop
 80059a8:	20000394 	.word	0x20000394
 80059ac:	20000388 	.word	0x20000388
 80059b0:	2000038c 	.word	0x2000038c
 80059b4:	20000390 	.word	0x20000390
 80059b8:	200003e0 	.word	0x200003e0
 80059bc:	200003e4 	.word	0x200003e4
 80059c0:	200003e8 	.word	0x200003e8
 80059c4:	20000380 	.word	0x20000380
 80059c8:	20000378 	.word	0x20000378
 80059cc:	20000384 	.word	0x20000384
 80059d0:	2000455c 	.word	0x2000455c
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80059d4:	4b9f      	ldr	r3, [pc, #636]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 80059d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a9d      	ldr	r2, [pc, #628]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 80059e0:	330a      	adds	r3, #10
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4b9b      	ldr	r3, [pc, #620]	; (8005c58 <ScopeTriggerTask+0x4e8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	881a      	ldrh	r2, [r3, #0]
 80059f2:	4b9a      	ldr	r3, [pc, #616]	; (8005c5c <ScopeTriggerTask+0x4ec>)
 80059f4:	801a      	strh	r2, [r3, #0]
				}
				updateTrigger();
 80059f6:	f000 fa31 	bl	8005e5c <updateTrigger>
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 80059fa:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 80059fc:	7e1b      	ldrb	r3, [r3, #24]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <ScopeTriggerTask+0x2a0>
 8005a04:	4b95      	ldr	r3, [pc, #596]	; (8005c5c <ScopeTriggerTask+0x4ec>)
 8005a06:	881a      	ldrh	r2, [r3, #0]
 8005a08:	4b95      	ldr	r3, [pc, #596]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d80a      	bhi.n	8005a26 <ScopeTriggerTask+0x2b6>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 8005a10:	4b90      	ldr	r3, [pc, #576]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a12:	7e1b      	ldrb	r3, [r3, #24]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d120      	bne.n	8005a5c <ScopeTriggerTask+0x2ec>
 8005a1a:	4b90      	ldr	r3, [pc, #576]	; (8005c5c <ScopeTriggerTask+0x4ec>)
 8005a1c:	881a      	ldrh	r2, [r3, #0]
 8005a1e:	4b90      	ldr	r3, [pc, #576]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d21a      	bcs.n	8005a5c <ScopeTriggerTask+0x2ec>
					totalSmpTaken = samplesTaken;
 8005a26:	4b8f      	ldr	r3, [pc, #572]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a8f      	ldr	r2, [pc, #572]	; (8005c68 <ScopeTriggerTask+0x4f8>)
 8005a2c:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 8005a2e:	4b8d      	ldr	r3, [pc, #564]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8005a34:	4b87      	ldr	r3, [pc, #540]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a36:	2203      	movs	r2, #3
 8005a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8005a3c:	4b86      	ldr	r3, [pc, #536]	; (8005c58 <ScopeTriggerTask+0x4e8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a8a      	ldr	r2, [pc, #552]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005a42:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8005a44:	2316      	movs	r3, #22
 8005a46:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005a48:	4b89      	ldr	r3, [pc, #548]	; (8005c70 <ScopeTriggerTask+0x500>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	f107 010e 	add.w	r1, r7, #14
 8005a50:	2300      	movs	r3, #0
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	f00f fb6d 	bl	8015134 <xQueueGenericSend>
 8005a5a:	e0f4      	b.n	8005c46 <ScopeTriggerTask+0x4d6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8005a5c:	4b7d      	ldr	r3, [pc, #500]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a5e:	7e5b      	ldrb	r3, [r3, #25]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d106      	bne.n	8005a74 <ScopeTriggerTask+0x304>
 8005a66:	4b7b      	ldr	r3, [pc, #492]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	009a      	lsls	r2, r3, #2
 8005a6c:	4b7d      	ldr	r3, [pc, #500]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d30c      	bcc.n	8005a8e <ScopeTriggerTask+0x31e>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 8005a74:	4b77      	ldr	r3, [pc, #476]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a76:	7e5b      	ldrb	r3, [r3, #25]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	f040 80e3 	bne.w	8005c46 <ScopeTriggerTask+0x4d6>
 8005a80:	4b74      	ldr	r3, [pc, #464]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	4b77      	ldr	r3, [pc, #476]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	f080 80dc 	bcs.w	8005c46 <ScopeTriggerTask+0x4d6>
					totalSmpTaken = samplesTaken;
 8005a8e:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a75      	ldr	r2, [pc, #468]	; (8005c68 <ScopeTriggerTask+0x4f8>)
 8005a94:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8005a9c:	4b6d      	ldr	r3, [pc, #436]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8005aa4:	4b6c      	ldr	r3, [pc, #432]	; (8005c58 <ScopeTriggerTask+0x4e8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a70      	ldr	r2, [pc, #448]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005aaa:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8005aac:	2316      	movs	r3, #22
 8005aae:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <ScopeTriggerTask+0x500>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	f107 010e 	add.w	r1, r7, #14
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295
 8005abe:	f00f fb39 	bl	8015134 <xQueueGenericSend>
					autoTrigged=1;
 8005ac2:	4b6c      	ldr	r3, [pc, #432]	; (8005c74 <ScopeTriggerTask+0x504>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e0bd      	b.n	8005c46 <ScopeTriggerTask+0x4d6>
				}
				//sampling after trigger event
			}else if(scope.state == SCOPE_SAMPLING){
 8005aca:	4b62      	ldr	r3, [pc, #392]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	f040 80b7 	bne.w	8005c46 <ScopeTriggerTask+0x4d6>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8005ad8:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <ScopeTriggerTask+0x508>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	4b67      	ldr	r3, [pc, #412]	; (8005c7c <ScopeTriggerTask+0x50c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f000 f8da 	bl	8005ca0 <samplesPassed>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b5c      	ldr	r3, [pc, #368]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4413      	add	r3, r2
 8005af6:	4a5b      	ldr	r2, [pc, #364]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005af8:	6013      	str	r3, [r2, #0]


				//sampling is done
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8005afa:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	f040 809f 	bne.w	8005c46 <ScopeTriggerTask+0x4d6>
 8005b08:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <ScopeTriggerTask+0x510>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f0c0 8098 	bcc.w	8005c46 <ScopeTriggerTask+0x4d6>
					samplingDisable();
 8005b16:	f012 f905 	bl	8017d24 <samplingDisable>

					//finding exact trigger position because not every samples are chcecked 
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <ScopeTriggerTask+0x504>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d178      	bne.n	8005c14 <ScopeTriggerTask+0x4a4>
						if(scope.settings.adcRes>8){
 8005b22:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b24:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d937      	bls.n	8005b9c <ScopeTriggerTask+0x42c>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8005b2c:	4b49      	ldr	r3, [pc, #292]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b2e:	7e1b      	ldrb	r3, [r3, #24]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11e      	bne.n	8005b74 <ScopeTriggerTask+0x404>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005b36:	e004      	b.n	8005b42 <ScopeTriggerTask+0x3d2>
									triggerIndex--;
 8005b38:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	4a4b      	ldr	r2, [pc, #300]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b40:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4a41      	ldr	r2, [pc, #260]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b4e:	330a      	adds	r3, #10
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881a      	ldrh	r2, [r3, #0]
 8005b60:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d8e7      	bhi.n	8005b38 <ScopeTriggerTask+0x3c8>
 8005b68:	e04f      	b.n	8005c0a <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005b6a:	4b40      	ldr	r3, [pc, #256]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4a3e      	ldr	r2, [pc, #248]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b72:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8005b74:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4a35      	ldr	r2, [pc, #212]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b80:	330a      	adds	r3, #10
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	4413      	add	r3, r2
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	4b33      	ldr	r3, [pc, #204]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3e7      	bcc.n	8005b6a <ScopeTriggerTask+0x3fa>
 8005b9a:	e036      	b.n	8005c0a <ScopeTriggerTask+0x49a>
								}
							}
						}else{							
							if(scope.settings.triggerEdge == EDGE_RISING){
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005b9e:	7e1b      	ldrb	r3, [r3, #24]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11e      	bne.n	8005be4 <ScopeTriggerTask+0x474>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005ba6:	e004      	b.n	8005bb2 <ScopeTriggerTask+0x442>
									triggerIndex--;
 8005ba8:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a2f      	ldr	r2, [pc, #188]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005bb0:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005bb2:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005bb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005bbe:	330a      	adds	r3, #10
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4413      	add	r3, r2
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	4b23      	ldr	r3, [pc, #140]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d8e7      	bhi.n	8005ba8 <ScopeTriggerTask+0x438>
 8005bd8:	e017      	b.n	8005c0a <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005be2:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005be6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005bf0:	330a      	adds	r3, #10
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <ScopeTriggerTask+0x4f0>)
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d3e7      	bcc.n	8005bda <ScopeTriggerTask+0x46a>
								}
							}
						}
						triggerIndex++;
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005c12:	6013      	str	r3, [r2, #0]
					}

					scope.triggerIndex = triggerIndex;
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <ScopeTriggerTask+0x4fc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005c1a:	6053      	str	r3, [r2, #4]
					scope.state = SCOPE_DATA_SENDING;
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <ScopeTriggerTask+0x4e4>)
 8005c1e:	2204      	movs	r2, #4
 8005c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

					samplesTaken = 0;
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <ScopeTriggerTask+0x4f4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
					totalSmpTaken = 0;
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <ScopeTriggerTask+0x4f8>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 8005c30:	2315      	movs	r3, #21
 8005c32:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <ScopeTriggerTask+0x500>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	f107 010e 	add.w	r1, r7, #14
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	f00f fa77 	bl	8015134 <xQueueGenericSend>
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <ScopeTriggerTask+0x514>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f00f fa08 	bl	8015060 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005c50:	e022      	b.n	8005c98 <ScopeTriggerTask+0x528>
 8005c52:	bf00      	nop
 8005c54:	20000394 	.word	0x20000394
 8005c58:	200003e0 	.word	0x200003e0
 8005c5c:	200003e4 	.word	0x200003e4
 8005c60:	20000378 	.word	0x20000378
 8005c64:	200003e8 	.word	0x200003e8
 8005c68:	200003ec 	.word	0x200003ec
 8005c6c:	20000374 	.word	0x20000374
 8005c70:	2000455c 	.word	0x2000455c
 8005c74:	20000384 	.word	0x20000384
 8005c78:	2000038c 	.word	0x2000038c
 8005c7c:	20000390 	.word	0x20000390
 8005c80:	2000037c 	.word	0x2000037c
 8005c84:	20000388 	.word	0x20000388
		}else{
			taskYIELD();
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <ScopeTriggerTask+0x52c>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005c98:	e56e      	b.n	8005778 <ScopeTriggerTask+0x8>
 8005c9a:	bf00      	nop
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <samplesPassed>:
/**
 * @brief 	Returns number of samples between indexes.
 * @param  actual index, last index
 * @retval None
 */
uint16_t samplesPassed(uint16_t index, uint16_t lastIndex){
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	460a      	mov	r2, r1
 8005caa:	80fb      	strh	r3, [r7, #6]
 8005cac:	4613      	mov	r3, r2
 8005cae:	80bb      	strh	r3, [r7, #4]
	uint16_t result=0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	81fb      	strh	r3, [r7, #14]
	if(index < lastIndex){
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	88bb      	ldrh	r3, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d209      	bcs.n	8005cd0 <samplesPassed+0x30>
		result = index + scope.oneChanSamples - lastIndex;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <samplesPassed+0x48>)
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	88bb      	ldrh	r3, [r7, #4]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	81fb      	strh	r3, [r7, #14]
 8005cce:	e003      	b.n	8005cd8 <samplesPassed+0x38>
	}else{
		result = index - lastIndex;
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000394 	.word	0x20000394

08005cec <validateBuffUsage>:
/**
 * @brief 	Checks if scope settings doesn't exceed memory
 * @param  None
 * @retval 1=err / 0=ok
 */
uint8_t validateBuffUsage(){
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
	uint8_t result=1;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	71fb      	strb	r3, [r7, #7]
	uint32_t data_len=scope.settings.samplesToSend;
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <validateBuffUsage+0x50>)
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	603b      	str	r3, [r7, #0]
	if(scope.settings.adcRes>8){
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <validateBuffUsage+0x50>)
 8005cfe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d902      	bls.n	8005d0c <validateBuffUsage+0x20>
		data_len=data_len*2;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	603b      	str	r3, [r7, #0]
	}
	data_len=data_len*scope.numOfChannles;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <validateBuffUsage+0x50>)
 8005d0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	603b      	str	r3, [r7, #0]
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d801      	bhi.n	8005d2c <validateBuffUsage+0x40>
		result=0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000394 	.word	0x20000394

08005d40 <scopeInit>:
 * @brief  Oscilloscope initialisation.
 *					Configurstion of DMA and TIM time base
 * @param  None
 * @retval None
 */
void scopeInit(void){
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
	writingIndex = 0;
 8005d46:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <scopeInit+0x114>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
	uint32_t realfreq=0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	603b      	str	r3, [r7, #0]

	ADC_DMA_Stop();
 8005d50:	f011 feda 	bl	8017b08 <ADC_DMA_Stop>

	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8005d54:	4b40      	ldr	r3, [pc, #256]	; (8005e58 <scopeInit+0x118>)
 8005d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d136      	bne.n	8005dce <scopeInit+0x8e>
		scope.settings.interleaved=2;
 8005d60:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <scopeInit+0x118>)
 8005d62:	2202      	movs	r2, #2
 8005d64:	779a      	strb	r2, [r3, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 8005d66:	4b3c      	ldr	r3, [pc, #240]	; (8005e58 <scopeInit+0x118>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f015 fea3 	bl	801babc <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f011 ff33 	bl	8017be4 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005d7e:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <scopeInit+0x118>)
 8005d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fcaa 	bl	80066e0 <scopeInitADCMode>

		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	e016      	b.n	8005dc0 <scopeInit+0x80>
			if(scope.numOfChannles>i){
 8005d92:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <scopeInit+0x118>)
 8005d94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	79fa      	ldrb	r2, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d20c      	bcs.n	8005dba <scopeInit+0x7a>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <scopeInit+0x118>)
 8005da4:	330a      	adds	r3, #10
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <scopeInit+0x118>)
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	085a      	lsrs	r2, r3, #1
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f011 fe59 	bl	8017a6c <ADC_DMA_Reconfig_Interleave>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	71fb      	strb	r3, [r7, #7]
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d9e5      	bls.n	8005d92 <scopeInit+0x52>
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <scopeInit+0x118>)
 8005dca:	60d3      	str	r3, [r2, #12]
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
	}
}
 8005dcc:	e03e      	b.n	8005e4c <scopeInit+0x10c>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <scopeInit+0x118>)
 8005dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d103      	bne.n	8005de2 <scopeInit+0xa2>
		scope.settings.ADCmux=2;
 8005dda:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <scopeInit+0x118>)
 8005ddc:	2202      	movs	r2, #2
 8005dde:	77da      	strb	r2, [r3, #31]
}
 8005de0:	e034      	b.n	8005e4c <scopeInit+0x10c>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <scopeInit+0x118>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2020 	strb.w	r2, [r3, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <scopeInit+0x118>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	463a      	mov	r2, r7
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f015 fe62 	bl	801babc <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f011 fef2 	bl	8017be4 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <scopeInit+0x118>)
 8005e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fc69 	bl	80066e0 <scopeInitADCMode>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005e0e:	2300      	movs	r3, #0
 8005e10:	71bb      	strb	r3, [r7, #6]
 8005e12:	e015      	b.n	8005e40 <scopeInit+0x100>
			if(scope.numOfChannles>i){
 8005e14:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <scopeInit+0x118>)
 8005e16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	79ba      	ldrb	r2, [r7, #6]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d20b      	bcs.n	8005e3a <scopeInit+0xfa>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8005e22:	79bb      	ldrb	r3, [r7, #6]
 8005e24:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <scopeInit+0x118>)
 8005e26:	330a      	adds	r3, #10
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <scopeInit+0x118>)
 8005e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e32:	79bb      	ldrb	r3, [r7, #6]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f011 fdc5 	bl	80179c4 <ADC_DMA_Reconfig>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005e3a:	79bb      	ldrb	r3, [r7, #6]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	71bb      	strb	r3, [r7, #6]
 8005e40:	79bb      	ldrb	r3, [r7, #6]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d9e6      	bls.n	8005e14 <scopeInit+0xd4>
		scope.settings.ADCSamplingFreq=realfreq;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <scopeInit+0x118>)
 8005e4a:	60d3      	str	r3, [r2, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	2000038c 	.word	0x2000038c
 8005e58:	20000394 	.word	0x20000394

08005e5c <updateTrigger>:
 * @brief  Update trigger level and pretriger values
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <updateTrigger+0x58>)
 8005e62:	8b5b      	ldrh	r3, [r3, #26]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <updateTrigger+0x58>)
 8005e6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	fb03 f302 	mul.w	r3, r3, r2
 8005e72:	141b      	asrs	r3, r3, #16
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <updateTrigger+0x5c>)
 8005e78:	801a      	strh	r2, [r3, #0]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <updateTrigger+0x58>)
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <updateTrigger+0x58>)
 8005e80:	8b9b      	ldrh	r3, [r3, #28]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005e88:	33ff      	adds	r3, #255	; 0xff
 8005e8a:	fb03 f302 	mul.w	r3, r3, r2
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <updateTrigger+0x60>)
 8005e94:	6013      	str	r3, [r2, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <updateTrigger+0x58>)
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <updateTrigger+0x58>)
 8005e9c:	8b92      	ldrh	r2, [r2, #28]
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <updateTrigger+0x64>)
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000394 	.word	0x20000394
 8005eb8:	20000378 	.word	0x20000378
 8005ebc:	2000037c 	.word	0x2000037c
 8005ec0:	20000380 	.word	0x20000380

08005ec4 <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
	scope.bufferMemory = scopeBuffer;
 8005ec8:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <scopeSetDefault+0x88>)
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <scopeSetDefault+0x8c>)
 8005ecc:	601a      	str	r2, [r3, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8005ece:	4b1f      	ldr	r3, [pc, #124]	; (8005f4c <scopeSetDefault+0x88>)
 8005ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ed4:	609a      	str	r2, [r3, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <scopeSetDefault+0x88>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	761a      	strb	r2, [r3, #24]
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <scopeSetDefault+0x88>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	765a      	strb	r2, [r3, #25]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <scopeSetDefault+0x88>)
 8005ee4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ee8:	835a      	strh	r2, [r3, #26]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <scopeSetDefault+0x88>)
 8005eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ef0:	839a      	strh	r2, [r3, #28]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8005ef2:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <scopeSetDefault+0x88>)
 8005ef4:	220c      	movs	r2, #12
 8005ef6:	845a      	strh	r2, [r3, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8005ef8:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <scopeSetDefault+0x88>)
 8005efa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005efe:	849a      	strh	r2, [r3, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8005f00:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <scopeSetDefault+0x88>)
 8005f02:	2264      	movs	r2, #100	; 0x64
 8005f04:	615a      	str	r2, [r3, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <scopeSetDefault+0x88>)
 8005f08:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <scopeSetDefault+0x8c>)
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <scopeSetDefault+0x88>)
 8005f0e:	f64e 22c4 	movw	r2, #60100	; 0xeac4
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <scopeSetDefault+0x88>)
 8005f16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d905      	bls.n	8005f2a <scopeSetDefault+0x66>
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <scopeSetDefault+0x88>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <scopeSetDefault+0x88>)
 8005f26:	6453      	str	r3, [r2, #68]	; 0x44
 8005f28:	e003      	b.n	8005f32 <scopeSetDefault+0x6e>
	}else{
		scope.oneChanSamples = scope.oneChanMemSize;
 8005f2a:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <scopeSetDefault+0x88>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <scopeSetDefault+0x88>)
 8005f30:	6453      	str	r3, [r2, #68]	; 0x44
	}
	scope.numOfChannles = 1;
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <scopeSetDefault+0x88>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	scope.triggerChannel = 1;
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <scopeSetDefault+0x88>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	scopeSetADCInputChannelDefault();
 8005f42:	f000 fb35 	bl	80065b0 <scopeSetADCInputChannelDefault>
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000394 	.word	0x20000394
 8005f50:	200070c4 	.word	0x200070c4

08005f54 <GetNumOfChannels>:
/**
 * @brief  Getter function number of scope channels being used
 * @param  None
 * @retval Number of channels
 */
uint8_t GetNumOfChannels (void){
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
	return scope.numOfChannles;
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <GetNumOfChannels+0x18>)
 8005f5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f5e:	b2db      	uxtb	r3, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000394 	.word	0x20000394

08005f70 <getDataPointer>:
/**
 * @brief  Getter function of pointer for data buffer.
 * @param  None
 * @retval Pointer to buffer
 */
uint16_t *getDataPointer(uint8_t chan){
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
	return scope.pChanMem[chan];
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	4a05      	ldr	r2, [pc, #20]	; (8005f94 <getDataPointer+0x24>)
 8005f7e:	330a      	adds	r3, #10
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	685b      	ldr	r3, [r3, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000394 	.word	0x20000394

08005f98 <getOneChanMemSize>:
/**
 * @brief  Getter function of one channel memory size.
 * @param  None
 * @retval One channel memory size
 */
uint32_t getOneChanMemSize(){
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
	return scope.oneChanMemSize;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <getOneChanMemSize+0x14>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000394 	.word	0x20000394

08005fb0 <getTriggerIndex>:
/**
 * @brief  Getter function of trigger index.
 * @param  None
 * @retval Pointer to sample where trigger occured
 */
uint32_t getTriggerIndex(void){
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
	return triggerIndex;
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <getTriggerIndex+0x14>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000374 	.word	0x20000374

08005fc8 <getSamples>:
/**
 * @brief  Getter function of data length.
 * @param  None
 * @retval Data length
 */
uint32_t getSamples(void){
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
	return scope.settings.samplesToSend;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <getSamples+0x14>)
 8005fce:	695b      	ldr	r3, [r3, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000394 	.word	0x20000394

08005fe0 <getADCRes>:
/**
 * @brief  Getter function of ADC resolution.
 * @param  None
 * @retval ADC resolution
 */
uint16_t getADCRes(void){
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
	return scope.settings.adcRes;
 8005fe4:	4b03      	ldr	r3, [pc, #12]	; (8005ff4 <getADCRes+0x14>)
 8005fe6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005fe8:	b29b      	uxth	r3, r3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000394 	.word	0x20000394

08005ff8 <getPretrigger>:
/**
 * @brief  Getter function of pretrigger.
 * @param  None
 * @retval Pretrigger value
 */
uint16_t getPretrigger(void){
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
	return scope.settings.pretrigger;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <getPretrigger+0x14>)
 8005ffe:	8b9b      	ldrh	r3, [r3, #28]
 8006000:	b29b      	uxth	r3, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000394 	.word	0x20000394

08006010 <getScopeState>:
/**
 * @brief  Getter for oscilloscope state.
 * @param  None
 * @retval Scope state
 */
scopeState getScopeState(void){
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
	return scope.state;
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <getScopeState+0x18>)
 8006016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601a:	b2db      	uxtb	r3, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000394 	.word	0x20000394

0800602c <scopeSetTriggerMode>:
/**
 * @brief  Setter for trigger mode
 * @param  Scope Trigger mode
 * @retval None
 */
void scopeSetTriggerMode(scopeTriggerMode mode){
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <scopeSetTriggerMode+0x30>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f04f 31ff 	mov.w	r1, #4294967295
 800603e:	4618      	mov	r0, r3
 8006040:	f00f f841 	bl	80150c6 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8006044:	4a06      	ldr	r2, [pc, #24]	; (8006060 <scopeSetTriggerMode+0x34>)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	7653      	strb	r3, [r2, #25]
	xSemaphoreGiveRecursive(scopeMutex);
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <scopeSetTriggerMode+0x30>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f00f f806 	bl	8015060 <xQueueGiveMutexRecursive>
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000388 	.word	0x20000388
 8006060:	20000394 	.word	0x20000394

08006064 <scopeSetTriggerEdge>:
/**
 * @brief  Setter for trigger edge
 * @param  Scope Trigger edge
 * @retval None
 */
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <scopeSetTriggerEdge+0x48>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f04f 31ff 	mov.w	r1, #4294967295
 8006076:	4618      	mov	r0, r3
 8006078:	f00f f825 	bl	80150c6 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <scopeSetTriggerEdge+0x4c>)
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	7613      	strb	r3, [r2, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <scopeSetTriggerEdge+0x48>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f00e ffea 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800608c:	2334      	movs	r3, #52	; 0x34
 800608e:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <scopeSetTriggerEdge+0x50>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	f107 010e 	add.w	r1, r7, #14
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	f00f f849 	bl	8015134 <xQueueGenericSend>
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000388 	.word	0x20000388
 80060b0:	20000394 	.word	0x20000394
 80060b4:	200070c0 	.word	0x200070c0

080060b8 <scopeSetDataDepth>:
/**
 * @brief  Setter for ADC resolution
 * @param  ADC resolution 2^N where N is number of bits
 * @retval success=0/error
 */
uint8_t scopeSetDataDepth(uint16_t res){
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	80fb      	strh	r3, [r7, #6]
	uint8_t result=BUFFER_SIZE_ERR;
 80060c2:	233a      	movs	r3, #58	; 0x3a
 80060c4:	73fb      	strb	r3, [r7, #15]
	uint8_t resTmp=res;
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <scopeSetDataDepth+0xd8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f04f 31ff 	mov.w	r1, #4294967295
 80060d2:	4618      	mov	r0, r3
 80060d4:	f00e fff7 	bl	80150c6 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <scopeSetDataDepth+0xdc>)
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	8453      	strh	r3, [r2, #34]	; 0x22
	if(validateBuffUsage()){
 80060de:	f7ff fe05 	bl	8005cec <validateBuffUsage>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <scopeSetDataDepth+0x3a>
		scope.settings.adcRes = resTmp;
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	4b29      	ldr	r3, [pc, #164]	; (8006194 <scopeSetDataDepth+0xdc>)
 80060ee:	845a      	strh	r2, [r3, #34]	; 0x22
 80060f0:	e034      	b.n	800615c <scopeSetDataDepth+0xa4>
	}else{
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 80060f2:	4b28      	ldr	r3, [pc, #160]	; (8006194 <scopeSetDataDepth+0xdc>)
 80060f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fa f9d3 	bl	80004a4 <__aeabi_ui2d>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	ec44 3b11 	vmov	d1, r3, r4
 8006106:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8006188 <scopeSetDataDepth+0xd0>
 800610a:	f016 fa63 	bl	801c5d4 <pow>
 800610e:	ec54 3b10 	vmov	r3, r4, d0
 8006112:	4618      	mov	r0, r3
 8006114:	4621      	mov	r1, r4
 8006116:	f7fa fd17 	bl	8000b48 <__aeabi_d2uiz>
 800611a:	4603      	mov	r3, r0
 800611c:	b29a      	uxth	r2, r3
 800611e:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <scopeSetDataDepth+0xdc>)
 8006120:	849a      	strh	r2, [r3, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <scopeSetDataDepth+0xdc>)
 8006124:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b08      	cmp	r3, #8
 800612a:	d905      	bls.n	8006138 <scopeSetDataDepth+0x80>
			scope.oneChanSamples=scope.oneChanMemSize/2;
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <scopeSetDataDepth+0xdc>)
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <scopeSetDataDepth+0xdc>)
 8006134:	6453      	str	r3, [r2, #68]	; 0x44
 8006136:	e003      	b.n	8006140 <scopeSetDataDepth+0x88>
		}else{
			scope.oneChanSamples=scope.oneChanMemSize;
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <scopeSetDataDepth+0xdc>)
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <scopeSetDataDepth+0xdc>)
 800613e:	6453      	str	r3, [r2, #68]	; 0x44
		}
		adcSetResolution(res);
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4618      	mov	r0, r3
 8006146:	f011 fe57 	bl	8017df8 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <scopeSetDataDepth+0xdc>)
 800614c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fac4 	bl	80066e0 <scopeInitADCMode>
		result=0;
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <scopeSetDataDepth+0xd8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f00e ff7d 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006166:	2334      	movs	r3, #52	; 0x34
 8006168:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <scopeSetDataDepth+0xe0>)
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	f107 010c 	add.w	r1, r7, #12
 8006172:	2300      	movs	r3, #0
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	f00e ffdc 	bl	8015134 <xQueueGenericSend>

	return result;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bd90      	pop	{r4, r7, pc}
 8006186:	bf00      	nop
 8006188:	00000000 	.word	0x00000000
 800618c:	40000000 	.word	0x40000000
 8006190:	20000388 	.word	0x20000388
 8006194:	20000394 	.word	0x20000394
 8006198:	200070c0 	.word	0x200070c0

0800619c <scopeSetSamplingFreq>:
/**
 * @brief  Setter for sampling frequency
 * @param  Samples per second
 * @retval success=0/error
 */
uint8_t scopeSetSamplingFreq(uint32_t freq){
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 80061a4:	2339      	movs	r3, #57	; 0x39
 80061a6:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <scopeSetSamplingFreq+0xa0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f04f 31ff 	mov.w	r1, #4294967295
 80061b0:	4618      	mov	r0, r3
 80061b2:	f00e ff88 	bl	80150c6 <xQueueTakeMutexRecursive>

	if (freq<UINT32_MAX){
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d007      	beq.n	80061ce <scopeSetSamplingFreq+0x32>
		scope.settings.samplingFrequency = freq;
 80061be:	4a20      	ldr	r2, [pc, #128]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6093      	str	r3, [r2, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80061c4:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2020 	strb.w	r2, [r3, #32]
 80061cc:	e01e      	b.n	800620c <scopeSetSamplingFreq+0x70>
	}else{
		if(scope.numOfChannles==1){
 80061ce:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d10e      	bne.n	80061f8 <scopeSetSamplingFreq+0x5c>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061de:	b29b      	uxth	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4618      	mov	r0, r3
 80061e4:	f015 fca0 	bl	801bb28 <getMaxScopeSamplingFreqInterleaved>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061ec:	609a      	str	r2, [r3, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2020 	strb.w	r2, [r3, #32]
 80061f6:	e009      	b.n	800620c <scopeSetSamplingFreq+0x70>
		}else{
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 80061f8:	4b11      	ldr	r3, [pc, #68]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 80061fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4618      	mov	r0, r3
 8006202:	f015 fc73 	bl	801baec <getMaxScopeSamplingFreq>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <scopeSetSamplingFreq+0xa4>)
 800620a:	609a      	str	r2, [r3, #8]
		}
	}
	result=0;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGiveRecursive(scopeMutex);
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <scopeSetSamplingFreq+0xa0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f00e ff23 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800621a:	2334      	movs	r3, #52	; 0x34
 800621c:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <scopeSetSamplingFreq+0xa8>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f107 010c 	add.w	r1, r7, #12
 8006226:	2300      	movs	r3, #0
 8006228:	f04f 32ff 	mov.w	r2, #4294967295
 800622c:	f00e ff82 	bl	8015134 <xQueueGenericSend>

	return result;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000388 	.word	0x20000388
 8006240:	20000394 	.word	0x20000394
 8006244:	200070c0 	.word	0x200070c0

08006248 <scopeSetTrigLevel>:
/**
 * @brief  Setter for trigger level
 * @param  Signal level to trigger (0xFFFF is 100%)
 * @retval None
 */
void scopeSetTrigLevel(uint16_t level){
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <scopeSetTrigLevel+0x30>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f04f 31ff 	mov.w	r1, #4294967295
 800625a:	4618      	mov	r0, r3
 800625c:	f00e ff33 	bl	80150c6 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8006260:	4a06      	ldr	r2, [pc, #24]	; (800627c <scopeSetTrigLevel+0x34>)
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	8353      	strh	r3, [r2, #26]
	xSemaphoreGiveRecursive(scopeMutex);
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <scopeSetTrigLevel+0x30>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f00e fef8 	bl	8015060 <xQueueGiveMutexRecursive>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000388 	.word	0x20000388
 800627c:	20000394 	.word	0x20000394

08006280 <scopeSetPretrigger>:
/**
 * @brief  Setter for pretrigger
 * @param  Fraction of buffer before trigger event (0xFFFF is 100%)
 * @retval None
 */
void scopeSetPretrigger(uint16_t pretrig){
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800628a:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <scopeSetPretrigger+0x30>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f04f 31ff 	mov.w	r1, #4294967295
 8006292:	4618      	mov	r0, r3
 8006294:	f00e ff17 	bl	80150c6 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8006298:	4a06      	ldr	r2, [pc, #24]	; (80062b4 <scopeSetPretrigger+0x34>)
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	8393      	strh	r3, [r2, #28]
	xSemaphoreGiveRecursive(scopeMutex);
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <scopeSetPretrigger+0x30>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f00e fedc 	bl	8015060 <xQueueGiveMutexRecursive>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20000388 	.word	0x20000388
 80062b4:	20000394 	.word	0x20000394

080062b8 <scopeSetNumOfSamples>:
/**
 * @brief  Setter for number of samples
 * @param  Numbr of samples
 * @retval success=0/error
 */
uint8_t scopeSetNumOfSamples(uint32_t smp){
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	uint8_t result=BUFFER_SIZE_ERR;
 80062c0:	233a      	movs	r3, #58	; 0x3a
 80062c2:	75fb      	strb	r3, [r7, #23]
	uint32_t smpTmp=scope.settings.samplesToSend;
 80062c4:	4b14      	ldr	r3, [pc, #80]	; (8006318 <scopeSetNumOfSamples+0x60>)
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	613b      	str	r3, [r7, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <scopeSetNumOfSamples+0x64>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f04f 31ff 	mov.w	r1, #4294967295
 80062d2:	4618      	mov	r0, r3
 80062d4:	f00e fef7 	bl	80150c6 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <scopeSetNumOfSamples+0x60>)
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d204      	bcs.n	80062ec <scopeSetNumOfSamples+0x34>
		scope.settings.samplesToSend = smp;
 80062e2:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <scopeSetNumOfSamples+0x60>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6153      	str	r3, [r2, #20]
		result=0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <scopeSetNumOfSamples+0x64>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f00e feb5 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80062f6:	2334      	movs	r3, #52	; 0x34
 80062f8:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <scopeSetNumOfSamples+0x68>)
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f107 010e 	add.w	r1, r7, #14
 8006302:	2300      	movs	r3, #0
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	f00e ff14 	bl	8015134 <xQueueGenericSend>
	return result;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000394 	.word	0x20000394
 800631c:	20000388 	.word	0x20000388
 8006320:	200070c0 	.word	0x200070c0

08006324 <scopeSetNumOfChannels>:
/**
 * @brief  Setter for number of channels
 * @param  Number of channels
 * @retval success=0/error
 */
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
	uint8_t result=BUFFER_SIZE_ERR;
 800632e:	233a      	movs	r3, #58	; 0x3a
 8006330:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=scope.numOfChannles;
 8006332:	4b56      	ldr	r3, [pc, #344]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006334:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006338:	737b      	strb	r3, [r7, #13]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800633a:	4b55      	ldr	r3, [pc, #340]	; (8006490 <scopeSetNumOfChannels+0x16c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f04f 31ff 	mov.w	r1, #4294967295
 8006342:	4618      	mov	r0, r3
 8006344:	f00e febf 	bl	80150c6 <xQueueTakeMutexRecursive>

	 //workaround to exit interleave mode when more channels needed
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d913      	bls.n	8006376 <scopeSetNumOfChannels+0x52>
 800634e:	4b4f      	ldr	r3, [pc, #316]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00d      	beq.n	8006376 <scopeSetNumOfChannels+0x52>
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 800635a:	4b4c      	ldr	r3, [pc, #304]	; (800648c <scopeSetNumOfChannels+0x168>)
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8006362:	4b4a      	ldr	r3, [pc, #296]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006364:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006366:	b29b      	uxth	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	4618      	mov	r0, r3
 800636c:	f015 fbbe 	bl	801baec <getMaxScopeSamplingFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b46      	ldr	r3, [pc, #280]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006374:	609a      	str	r2, [r3, #8]
	}
	//workaround to enter interleave mode again when one channel selected
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d119      	bne.n	80063b0 <scopeSetNumOfChannels+0x8c>
 800637c:	4b43      	ldr	r3, [pc, #268]	; (800648c <scopeSetNumOfChannels+0x168>)
 800637e:	689c      	ldr	r4, [r3, #8]
 8006380:	4b42      	ldr	r3, [pc, #264]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006382:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006384:	b29b      	uxth	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4618      	mov	r0, r3
 800638a:	f015 fbaf 	bl	801baec <getMaxScopeSamplingFreq>
 800638e:	4603      	mov	r3, r0
 8006390:	429c      	cmp	r4, r3
 8006392:	d10d      	bne.n	80063b0 <scopeSetNumOfChannels+0x8c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 8006394:	4b3d      	ldr	r3, [pc, #244]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 800639c:	4b3b      	ldr	r3, [pc, #236]	; (800648c <scopeSetNumOfChannels+0x168>)
 800639e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	4618      	mov	r0, r3
 80063a6:	f015 fbbf 	bl	801bb28 <getMaxScopeSamplingFreqInterleaved>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b37      	ldr	r3, [pc, #220]	; (800648c <scopeSetNumOfChannels+0x168>)
 80063ae:	609a      	str	r2, [r3, #8]
	}


	if(chan<=MAX_ADC_CHANNELS){
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d865      	bhi.n	8006482 <scopeSetNumOfChannels+0x15e>
		scope.numOfChannles=chan;
 80063b6:	4a35      	ldr	r2, [pc, #212]	; (800648c <scopeSetNumOfChannels+0x168>)
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		if(validateBuffUsage()){
 80063be:	f7ff fc95 	bl	8005cec <validateBuffUsage>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 80063c8:	4a30      	ldr	r2, [pc, #192]	; (800648c <scopeSetNumOfChannels+0x168>)
 80063ca:	7b7b      	ldrb	r3, [r7, #13]
 80063cc:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80063d0:	e047      	b.n	8006462 <scopeSetNumOfChannels+0x13e>
		}else{
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80063d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80063dc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80063e6:	fb91 f3f3 	sdiv	r3, r1, r3
 80063ea:	3364      	adds	r3, #100	; 0x64
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	bfb8      	it	lt
 80063f4:	425b      	neglt	r3, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <scopeSetNumOfChannels+0x168>)
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
			if(scope.settings.adcRes>8){
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006400:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b08      	cmp	r3, #8
 8006406:	d905      	bls.n	8006414 <scopeSetNumOfChannels+0xf0>
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <scopeSetNumOfChannels+0x168>)
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	085b      	lsrs	r3, r3, #1
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006410:	6453      	str	r3, [r2, #68]	; 0x44
 8006412:	e003      	b.n	800641c <scopeSetNumOfChannels+0xf8>
			}else{
				scope.oneChanSamples=scope.oneChanMemSize;
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <scopeSetNumOfChannels+0x168>)
 800641a:	6453      	str	r3, [r2, #68]	; 0x44
			}
			for(uint8_t i=0;i<chan;i++){
 800641c:	2300      	movs	r3, #0
 800641e:	73bb      	strb	r3, [r7, #14]
 8006420:	e019      	b.n	8006456 <scopeSetNumOfChannels+0x132>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006426:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <scopeSetNumOfChannels+0x170>)
 800642e:	1899      	adds	r1, r3, r2
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	4a16      	ldr	r2, [pc, #88]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006434:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <scopeSetNumOfChannels+0x170>)
 800643c:	4413      	add	r3, r2
 800643e:	f003 0201 	and.w	r2, r3, #1
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	440a      	add	r2, r1
 8006446:	4911      	ldr	r1, [pc, #68]	; (800648c <scopeSetNumOfChannels+0x168>)
 8006448:	330a      	adds	r3, #10
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	3301      	adds	r3, #1
 8006454:	73bb      	strb	r3, [r7, #14]
 8006456:	7bba      	ldrb	r2, [r7, #14]
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3e1      	bcc.n	8006422 <scopeSetNumOfChannels+0xfe>
			}
			result=0;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <scopeSetNumOfChannels+0x16c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f00e fdfa 	bl	8015060 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 800646c:	2334      	movs	r3, #52	; 0x34
 800646e:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006470:	4b09      	ldr	r3, [pc, #36]	; (8006498 <scopeSetNumOfChannels+0x174>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	f107 010a 	add.w	r1, r7, #10
 8006478:	2300      	movs	r3, #0
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	f00e fe59 	bl	8015134 <xQueueGenericSend>
	}
	return result;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}
 800648c:	20000394 	.word	0x20000394
 8006490:	20000388 	.word	0x20000388
 8006494:	200070c4 	.word	0x200070c4
 8006498:	200070c0 	.word	0x200070c0

0800649c <scopeSetTrigChannel>:
/**
 * @brief  Setter for trigger channel
 * @param  Trigger channel
 * @retval success=0/error
 */
uint8_t scopeSetTrigChannel(uint8_t chan){
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 80064a6:	2338      	movs	r3, #56	; 0x38
 80064a8:	73fb      	strb	r3, [r7, #15]
	if(chan<=MAX_ADC_CHANNELS){
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d81c      	bhi.n	80064ea <scopeSetTrigChannel+0x4e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <scopeSetTrigChannel+0x58>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f04f 31ff 	mov.w	r1, #4294967295
 80064b8:	4618      	mov	r0, r3
 80064ba:	f00e fe04 	bl	80150c6 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 80064be:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <scopeSetTrigChannel+0x5c>)
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
		result=0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <scopeSetTrigChannel+0x58>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f00e fdc6 	bl	8015060 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80064d4:	2334      	movs	r3, #52	; 0x34
 80064d6:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80064d8:	4b08      	ldr	r3, [pc, #32]	; (80064fc <scopeSetTrigChannel+0x60>)
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	f107 010c 	add.w	r1, r7, #12
 80064e0:	2300      	movs	r3, #0
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	f00e fe25 	bl	8015134 <xQueueGenericSend>
	}
	return result;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000388 	.word	0x20000388
 80064f8:	20000394 	.word	0x20000394
 80064fc:	200070c0 	.word	0x200070c0

08006500 <scopeGetRealSmplFreq>:

uint32_t scopeGetRealSmplFreq(){
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
	return scope.settings.samplingFrequency;
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <scopeGetRealSmplFreq+0x14>)
 8006506:	689b      	ldr	r3, [r3, #8]
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000394 	.word	0x20000394

08006518 <scopeSetADCInputChannel>:
 * @brief  ADC channel selections
 *					Selects ADC channel to be sampled. Possible selection defined in mcu_config.h
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	460a      	mov	r2, r1
 8006522:	71fb      	strb	r3, [r7, #7]
 8006524:	4613      	mov	r3, r2
 8006526:	71bb      	strb	r3, [r7, #6]
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8006528:	233d      	movs	r3, #61	; 0x3d
 800652a:	73fb      	strb	r3, [r7, #15]
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d831      	bhi.n	8006596 <scopeSetADCInputChannel+0x7e>
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	4a1a      	ldr	r2, [pc, #104]	; (80065a0 <scopeSetADCInputChannel+0x88>)
 8006536:	5cd3      	ldrb	r3, [r2, r3]
 8006538:	79ba      	ldrb	r2, [r7, #6]
 800653a:	429a      	cmp	r2, r3
 800653c:	d22b      	bcs.n	8006596 <scopeSetADCInputChannel+0x7e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <scopeSetADCInputChannel+0x8c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f04f 31ff 	mov.w	r1, #4294967295
 8006546:	4618      	mov	r0, r3
 8006548:	f00e fdbd 	bl	80150c6 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <scopeSetADCInputChannel+0x90>)
 8006550:	4413      	add	r3, r2
 8006552:	79ba      	ldrb	r2, [r7, #6]
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(adc, chann);
 8006558:	79ba      	ldrb	r2, [r7, #6]
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f011 fbe6 	bl	8017d30 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <scopeSetADCInputChannel+0x90>)
 8006566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f8b7 	bl	80066e0 <scopeInitADCMode>

		result = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <scopeSetADCInputChannel+0x8c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f00e fd70 	bl	8015060 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8006580:	2334      	movs	r3, #52	; 0x34
 8006582:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006584:	4b09      	ldr	r3, [pc, #36]	; (80065ac <scopeSetADCInputChannel+0x94>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	f107 010c 	add.w	r1, r7, #12
 800658c:	2300      	movs	r3, #0
 800658e:	f04f 32ff 	mov.w	r2, #4294967295
 8006592:	f00e fdcf 	bl	8015134 <xQueueGenericSend>
	}
	return result;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	0801dfac 	.word	0x0801dfac
 80065a4:	20000388 	.word	0x20000388
 80065a8:	20000394 	.word	0x20000394
 80065ac:	200070c0 	.word	0x200070c0

080065b0 <scopeSetADCInputChannelDefault>:
/**
 * @brief  Set ADC channels to default input
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 80065b6:	233d      	movs	r3, #61	; 0x3d
 80065b8:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80065ba:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <scopeSetADCInputChannelDefault+0x88>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f04f 31ff 	mov.w	r1, #4294967295
 80065c2:	4618      	mov	r0, r3
 80065c4:	f00e fd7f 	bl	80150c6 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80065c8:	2300      	movs	r3, #0
 80065ca:	71bb      	strb	r3, [r7, #6]
 80065cc:	e01c      	b.n	8006608 <scopeSetADCInputChannelDefault+0x58>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80065ce:	79ba      	ldrb	r2, [r7, #6]
 80065d0:	79bb      	ldrb	r3, [r7, #6]
 80065d2:	491a      	ldr	r1, [pc, #104]	; (800663c <scopeSetADCInputChannelDefault+0x8c>)
 80065d4:	5c89      	ldrb	r1, [r1, r2]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <scopeSetADCInputChannelDefault+0x90>)
 80065d8:	4413      	add	r3, r2
 80065da:	460a      	mov	r2, r1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80065e0:	79bb      	ldrb	r3, [r7, #6]
 80065e2:	4a16      	ldr	r2, [pc, #88]	; (800663c <scopeSetADCInputChannelDefault+0x8c>)
 80065e4:	5cd2      	ldrb	r2, [r2, r3]
 80065e6:	79bb      	ldrb	r3, [r7, #6]
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f011 fba0 	bl	8017d30 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80065f0:	4b13      	ldr	r3, [pc, #76]	; (8006640 <scopeSetADCInputChannelDefault+0x90>)
 80065f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f871 	bl	80066e0 <scopeInitADCMode>

		result = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8006602:	79bb      	ldrb	r3, [r7, #6]
 8006604:	3301      	adds	r3, #1
 8006606:	71bb      	strb	r3, [r7, #6]
 8006608:	79bb      	ldrb	r3, [r7, #6]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d9df      	bls.n	80065ce <scopeSetADCInputChannelDefault+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <scopeSetADCInputChannelDefault+0x88>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f00e fd24 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006618:	2334      	movs	r3, #52	; 0x34
 800661a:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <scopeSetADCInputChannelDefault+0x94>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	1d39      	adds	r1, r7, #4
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	f00e fd84 	bl	8015134 <xQueueGenericSend>
	return result;
 800662c:	79fb      	ldrb	r3, [r7, #7]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000388 	.word	0x20000388
 800663c:	0801dfa4 	.word	0x0801dfa4
 8006640:	20000394 	.word	0x20000394
 8006644:	200070c0 	.word	0x200070c0

08006648 <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 800664e:	233d      	movs	r3, #61	; 0x3d
 8006650:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <scopeSetADCInputChannelVref+0x88>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f04f 31ff 	mov.w	r1, #4294967295
 800665a:	4618      	mov	r0, r3
 800665c:	f00e fd33 	bl	80150c6 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8006660:	2300      	movs	r3, #0
 8006662:	71bb      	strb	r3, [r7, #6]
 8006664:	e01c      	b.n	80066a0 <scopeSetADCInputChannelVref+0x58>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8006666:	79ba      	ldrb	r2, [r7, #6]
 8006668:	79bb      	ldrb	r3, [r7, #6]
 800666a:	491a      	ldr	r1, [pc, #104]	; (80066d4 <scopeSetADCInputChannelVref+0x8c>)
 800666c:	5c89      	ldrb	r1, [r1, r2]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <scopeSetADCInputChannelVref+0x90>)
 8006670:	4413      	add	r3, r2
 8006672:	460a      	mov	r2, r1
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8006678:	79bb      	ldrb	r3, [r7, #6]
 800667a:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <scopeSetADCInputChannelVref+0x8c>)
 800667c:	5cd2      	ldrb	r2, [r2, r3]
 800667e:	79bb      	ldrb	r3, [r7, #6]
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f011 fb54 	bl	8017d30 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <scopeSetADCInputChannelVref+0x90>)
 800668a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4618      	mov	r0, r3
 8006692:	f000 f825 	bl	80066e0 <scopeInitADCMode>

		result = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 800669a:	79bb      	ldrb	r3, [r7, #6]
 800669c:	3301      	adds	r3, #1
 800669e:	71bb      	strb	r3, [r7, #6]
 80066a0:	79bb      	ldrb	r3, [r7, #6]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d9df      	bls.n	8006666 <scopeSetADCInputChannelVref+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <scopeSetADCInputChannelVref+0x88>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f00e fcd8 	bl	8015060 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80066b0:	2334      	movs	r3, #52	; 0x34
 80066b2:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <scopeSetADCInputChannelVref+0x94>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	1d39      	adds	r1, r7, #4
 80066ba:	2300      	movs	r3, #0
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	f00e fd38 	bl	8015134 <xQueueGenericSend>
	return result;
 80066c4:	79fb      	ldrb	r3, [r7, #7]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000388 	.word	0x20000388
 80066d4:	0801dfa8 	.word	0x0801dfa8
 80066d8:	20000394 	.word	0x20000394
 80066dc:	200070c0 	.word	0x200070c0

080066e0 <scopeInitADCMode>:


uint8_t scopeInitADCMode(scopeMode mode){
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	71fb      	strb	r3, [r7, #7]
	switch (mode){
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d006      	beq.n	80066fe <scopeInitADCMode+0x1e>
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d007      	beq.n	8006704 <scopeInitADCMode+0x24>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <scopeInitADCMode+0x2a>
	case SCOPE_NORMAL_MODE:
		ADCInitNormalMode();
 80066f8:	f011 fc02 	bl	8017f00 <ADCInitNormalMode>
		break;
 80066fc:	e005      	b.n	800670a <scopeInitADCMode+0x2a>
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
 80066fe:	f011 fc25 	bl	8017f4c <ADCInitInterleavedMode>
		break;
 8006702:	e002      	b.n	800670a <scopeInitADCMode+0x2a>
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 8006704:	f011 fc44 	bl	8017f90 <ADCInitMultiMode>
		break;
 8006708:	bf00      	nop
	}

}
 800670a:	bf00      	nop
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <scopeGetRanges>:
/**
 * @brief  getter of pointer to dafinition of input voltage ranges
 * @param  uint8 pointer - Number of ranges
 * @retval uint16 pointer - Pointer to ranges
 */
const int16_t* scopeGetRanges(uint8_t * len){
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2210      	movs	r2, #16
 8006720:	701a      	strb	r2, [r3, #0]
	return RANGES;	
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <scopeGetRanges+0x1c>)
#endif


}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	0801dfb0 	.word	0x0801dfb0

08006734 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_RESTART;
 800673a:	2311      	movs	r3, #17
 800673c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <scopeRestart+0x24>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	1db9      	adds	r1, r7, #6
 8006744:	2300      	movs	r3, #0
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	f00e fcf3 	bl	8015134 <xQueueGenericSend>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200070c0 	.word	0x200070c0

0800675c <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_START;
 8006762:	2312      	movs	r3, #18
 8006764:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <scopeStart+0x24>)
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	1db9      	adds	r1, r7, #6
 800676c:	2300      	movs	r3, #0
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	f00e fcdf 	bl	8015134 <xQueueGenericSend>
}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200070c0 	.word	0x200070c0

08006784 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_STOP;
 800678a:	2313      	movs	r3, #19
 800678c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <scopeStop+0x24>)
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	1db9      	adds	r1, r7, #6
 8006794:	2300      	movs	r3, #0
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	f00e fccb 	bl	8015134 <xQueueGenericSend>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200070c0 	.word	0x200070c0

080067ac <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 80067b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067b8:	81fb      	strh	r3, [r7, #14]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80067ba:	2200      	movs	r2, #0
 80067bc:	2102      	movs	r1, #2
 80067be:	2005      	movs	r0, #5
 80067c0:	f00e fbc4 	bl	8014f4c <xQueueGenericCreate>
 80067c4:	4602      	mov	r2, r0
 80067c6:	4b21      	ldr	r3, [pc, #132]	; (800684c <SyncPwmTask+0xa0>)
 80067c8:	601a      	str	r2, [r3, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80067ca:	2004      	movs	r0, #4
 80067cc:	f00e fc30 	bl	8015030 <xQueueCreateMutex>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <SyncPwmTask+0xa4>)
 80067d4:	601a      	str	r2, [r3, #0]

	if(syncPwmMessageQueue == 0){
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <SyncPwmTask+0xa0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d100      	bne.n	80067e0 <SyncPwmTask+0x34>
		while(1); // Queue was not created and must not be used.
 80067de:	e7fe      	b.n	80067de <SyncPwmTask+0x32>
	}

	syncPwmSetDefault();
 80067e0:	f000 f90a 	bl	80069f8 <syncPwmSetDefault>

	while(1){

		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <SyncPwmTask+0xa0>)
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	f107 010e 	add.w	r1, r7, #14
 80067ec:	2300      	movs	r3, #0
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295
 80067f2:	f00e fe2d 	bl	8015450 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 80067f6:	4b16      	ldr	r3, [pc, #88]	; (8006850 <SyncPwmTask+0xa4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f04f 31ff 	mov.w	r1, #4294967295
 80067fe:	4618      	mov	r0, r3
 8006800:	f00e fc61 	bl	80150c6 <xQueueTakeMutexRecursive>

		switch(message){
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	3b2d      	subs	r3, #45	; 0x2d
 8006808:	2b03      	cmp	r3, #3
 800680a:	d817      	bhi.n	800683c <SyncPwmTask+0x90>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <SyncPwmTask+0x68>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006825 	.word	0x08006825
 8006818:	0800682b 	.word	0x0800682b
 800681c:	08006831 	.word	0x08006831
 8006820:	08006837 	.word	0x08006837
		case MSG_SYNCPWM_INIT:
			syncPwmInit();
 8006824:	f000 f866 	bl	80068f4 <syncPwmInit>
			break;
 8006828:	e009      	b.n	800683e <SyncPwmTask+0x92>
		case MSG_SYNCPWM_DEINIT:
			syncPwmDeinit();
 800682a:	f000 f869 	bl	8006900 <syncPwmDeinit>
			break;
 800682e:	e006      	b.n	800683e <SyncPwmTask+0x92>
		case MSG_SYNCPWM_START:
			syncPwmStart();
 8006830:	f000 f86c 	bl	800690c <syncPwmStart>
			break;
 8006834:	e003      	b.n	800683e <SyncPwmTask+0x92>
		case MSG_SYNCPWM_STOP:
			syncPwmStop();
 8006836:	f000 f86f 	bl	8006918 <syncPwmStop>
			break;
 800683a:	e000      	b.n	800683e <SyncPwmTask+0x92>
		default:
			break;
 800683c:	bf00      	nop
		}

		xSemaphoreGiveRecursive(syncPwmMutex);
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <SyncPwmTask+0xa4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f00e fc0c 	bl	8015060 <xQueueGiveMutexRecursive>
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8006848:	e7cc      	b.n	80067e4 <SyncPwmTask+0x38>
 800684a:	bf00      	nop
 800684c:	20015ce0 	.word	0x20015ce0
 8006850:	20015ce4 	.word	0x20015ce4

08006854 <syncPwmSendInit>:
}

/* ************************************************************************************** */
/* -------------------- Sync PWM generator basic settings via queue --------------------- */
/* ************************************************************************************** */
void syncPwmSendInit(void){
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 800685a:	232d      	movs	r3, #45	; 0x2d
 800685c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <syncPwmSendInit+0x24>)
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	1db9      	adds	r1, r7, #6
 8006864:	2300      	movs	r3, #0
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	f00e fc63 	bl	8015134 <xQueueGenericSend>
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20015ce0 	.word	0x20015ce0

0800687c <syncPwmSendDeinit>:

void syncPwmSendDeinit(void){
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 8006882:	232e      	movs	r3, #46	; 0x2e
 8006884:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <syncPwmSendDeinit+0x24>)
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	1db9      	adds	r1, r7, #6
 800688c:	2300      	movs	r3, #0
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	f00e fc4f 	bl	8015134 <xQueueGenericSend>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20015ce0 	.word	0x20015ce0

080068a4 <syncPwmSendStart>:

void syncPwmSendStart(void){
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_START;
 80068aa:	232f      	movs	r3, #47	; 0x2f
 80068ac:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <syncPwmSendStart+0x24>)
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	1db9      	adds	r1, r7, #6
 80068b4:	2300      	movs	r3, #0
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	f00e fc3b 	bl	8015134 <xQueueGenericSend>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20015ce0 	.word	0x20015ce0

080068cc <syncPwmSendStop>:

void syncPwmSendStop(void){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 80068d2:	2330      	movs	r3, #48	; 0x30
 80068d4:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <syncPwmSendStop+0x24>)
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	1db9      	adds	r1, r7, #6
 80068dc:	2300      	movs	r3, #0
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	f00e fc27 	bl	8015134 <xQueueGenericSend>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20015ce0 	.word	0x20015ce0

080068f4 <syncPwmInit>:


/* ************************************************************************************** */
/* ------------------------- Sync PWM generator basic settings -------------------------- */
/* ************************************************************************************** */
void syncPwmInit(void){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Init();
 80068f8:	f015 fafc 	bl	801bef4 <TIM_SYNC_PWM_Init>
}	
 80068fc:	bf00      	nop
 80068fe:	bd80      	pop	{r7, pc}

08006900 <syncPwmDeinit>:

void syncPwmDeinit(void){
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Deinit();
 8006904:	f015 fafc 	bl	801bf00 <TIM_SYNC_PWM_Deinit>
}	
 8006908:	bf00      	nop
 800690a:	bd80      	pop	{r7, pc}

0800690c <syncPwmStart>:

void syncPwmStart(void){
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Start();
 8006910:	f015 fb56 	bl	801bfc0 <TIM_SYNC_PWM_Start>
}	
 8006914:	bf00      	nop
 8006916:	bd80      	pop	{r7, pc}

08006918 <syncPwmStop>:

void syncPwmStop(void){
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Stop();
 800691c:	f015 fc02 	bl	801c124 <TIM_SYNC_PWM_Stop>
}	
 8006920:	bf00      	nop
 8006922:	bd80      	pop	{r7, pc}

08006924 <syncPwmChannelNumber>:

/* The received number determines what channel needs to be configured. */
void syncPwmChannelNumber(uint8_t chanNum)
{	
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 800692e:	4a05      	ldr	r2, [pc, #20]	; (8006944 <syncPwmChannelNumber+0x20>)
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	f882 3020 	strb.w	r3, [r2, #32]
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20015cb8 	.word	0x20015cb8

08006948 <syncPwmChannelConfig>:

/* Set two DMA transfers to transfer the required data to CCR1 register
	 upon DMA Output Compare event. */
void syncPwmChannelConfig(uint32_t ccr1st, uint16_t ccr2nd)
{	
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	807b      	strh	r3, [r7, #2]
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	b29b      	uxth	r3, r3
 8006958:	887a      	ldrh	r2, [r7, #2]
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f015 fcb7 	bl	801c2d0 <TIM_SYNC_PWM_DMA_ChanConfig>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <syncPwmSetFreq>:

/* Frequency reconfiguring. */
double syncPwmSetFreq(double freq)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	ed87 0b00 	vstr	d0, [r7]
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8006976:	ed97 0b00 	vldr	d0, [r7]
 800697a:	f015 fd0d 	bl	801c398 <TIM_Reconfig_SyncPwm>
 800697e:	eeb0 7a40 	vmov.f32	s14, s0
 8006982:	eef0 7a60 	vmov.f32	s15, s1
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <syncPwmSetFreq+0x48>)
 8006988:	ed83 7b06 	vstr	d7, [r3, #24]
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 800698c:	2331      	movs	r3, #49	; 0x31
 800698e:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <syncPwmSetFreq+0x4c>)
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	f107 010e 	add.w	r1, r7, #14
 8006998:	2300      	movs	r3, #0
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	f00e fbc9 	bl	8015134 <xQueueGenericSend>
}
 80069a2:	bf00      	nop
 80069a4:	eeb0 0a47 	vmov.f32	s0, s14
 80069a8:	eef0 0a67 	vmov.f32	s1, s15
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20015cb8 	.word	0x20015cb8
 80069b8:	2000455c 	.word	0x2000455c

080069bc <syncPwmSetChannelState>:

void syncPwmSetChannelState(uint8_t channel, uint8_t state)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	460a      	mov	r2, r1
 80069c6:	71fb      	strb	r3, [r7, #7]
 80069c8:	4613      	mov	r3, r2
 80069ca:	71bb      	strb	r3, [r7, #6]
	TIM_SYNC_PWM_ChannelState(channel, state);
 80069cc:	79ba      	ldrb	r2, [r7, #6]
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f015 faac 	bl	801bf30 <TIM_SYNC_PWM_ChannelState>
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <syncPwmSetStepMode>:

void syncPwmSetStepMode(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Enable();
 80069e4:	f015 fcb4 	bl	801c350 <TIM_SYNC_PWM_StepMode_Enable>
}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}

080069ec <syncPwmResetStepMode>:

void syncPwmResetStepMode(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Disable();
 80069f0:	f015 fcc0 	bl	801c374 <TIM_SYNC_PWM_StepMode_Disable>
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <syncPwmSetDefault>:

void syncPwmSetDefault(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 80069fc:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <syncPwmSetDefault+0x6c>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 8006a04:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8006a0c:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 8006a1c:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a1e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006a22:	801a      	strh	r2, [r3, #0]
	syncPwm.dataEdgeChan1[1] = 0;
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	805a      	strh	r2, [r3, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a2c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006a30:	809a      	strh	r2, [r3, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a34:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006a38:	80da      	strh	r2, [r3, #6]
	syncPwm.dataEdgeChan3[0] = 10400;
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a3c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006a40:	811a      	strh	r2, [r3, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a44:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006a48:	815a      	strh	r2, [r3, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a4c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8006a50:	819a      	strh	r2, [r3, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 8006a52:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <syncPwmSetDefault+0x6c>)
 8006a54:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006a58:	81da      	strh	r2, [r3, #14]
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	20015cb8 	.word	0x20015cb8

08006a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a72:	2003      	movs	r0, #3
 8006a74:	f003 f990 	bl	8009d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f011 fec7 	bl	801880c <HAL_InitTick>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	71fb      	strb	r3, [r7, #7]
 8006a88:	e001      	b.n	8006a8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a8a:	f011 fe97 	bl	80187bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a8e:	79fb      	ldrb	r3, [r7, #7]

}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_IncTick+0x1c>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_IncTick+0x20>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4a03      	ldr	r2, [pc, #12]	; (8006ab4 <HAL_IncTick+0x1c>)
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	20015ce8 	.word	0x20015ce8
 8006ab8:	20000064 	.word	0x20000064

08006abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  return uwTick;
 8006ac0:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <HAL_GetTick+0x14>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20015ce8 	.word	0x20015ce8

08006ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006adc:	f7ff ffee 	bl	8006abc <HAL_GetTick>
 8006ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d004      	beq.n	8006af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <HAL_Delay+0x40>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006af8:	bf00      	nop
 8006afa:	f7ff ffdf 	bl	8006abc <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d8f7      	bhi.n	8006afa <HAL_Delay+0x26>
  {
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000064 	.word	0x20000064

08006b18 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return __STM32G4xx_HAL_VERSION;
 8006b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	609a      	str	r2, [r3, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0318 	and.w	r3, r3, #24
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006bb0:	b490      	push	{r4, r7}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3360      	adds	r3, #96	; 0x60
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <LL_ADC_SetOffset+0x40>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006be2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc90      	pop	{r4, r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	03fff000 	.word	0x03fff000

08006bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006bf4:	b490      	push	{r4, r7}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3360      	adds	r3, #96	; 0x60
 8006c02:	461a      	mov	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc90      	pop	{r4, r7}
 8006c1a:	4770      	bx	lr

08006c1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006c1c:	b490      	push	{r4, r7}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3360      	adds	r3, #96	; 0x60
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc90      	pop	{r4, r7}
 8006c4a:	4770      	bx	lr

08006c4c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006c4c:	b490      	push	{r4, r7}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3360      	adds	r3, #96	; 0x60
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc90      	pop	{r4, r7}
 8006c7a:	4770      	bx	lr

08006c7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006c7c:	b490      	push	{r4, r7}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3360      	adds	r3, #96	; 0x60
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc90      	pop	{r4, r7}
 8006caa:	4770      	bx	lr

08006cac <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	615a      	str	r2, [r3, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006cf8:	b490      	push	{r4, r7}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3330      	adds	r3, #48	; 0x30
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	0a1b      	lsrs	r3, r3, #8
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	f003 030c 	and.w	r3, r3, #12
 8006d14:	4413      	add	r3, r2
 8006d16:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	211f      	movs	r1, #31
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	43db      	mvns	r3, r3
 8006d28:	401a      	ands	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0e9b      	lsrs	r3, r3, #26
 8006d2e:	f003 011f 	and.w	r1, r3, #31
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc90      	pop	{r4, r7}
 8006d48:	4770      	bx	lr

08006d4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d4a:	b490      	push	{r4, r7}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	0e5b      	lsrs	r3, r3, #25
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	0d1b      	lsrs	r3, r3, #20
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2107      	movs	r1, #7
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	401a      	ands	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc90      	pop	{r4, r7}
 8006d98:	4770      	bx	lr
	...

08006d9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f003 0318 	and.w	r3, r3, #24
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006dc0:	40d9      	lsrs	r1, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	400b      	ands	r3, r1
 8006dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	0007ffff 	.word	0x0007ffff

08006de4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 031f 	and.w	r3, r3, #31
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6093      	str	r3, [r2, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e38:	d101      	bne.n	8006e3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e88:	d101      	bne.n	8006e8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb0:	f043 0201 	orr.w	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ed8:	f043 0202 	orr.w	r2, r3, #2
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <LL_ADC_IsEnabled+0x18>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <LL_ADC_IsEnabled+0x1a>
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d101      	bne.n	8006f2a <LL_ADC_IsDisableOngoing+0x18>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <LL_ADC_IsDisableOngoing+0x1a>
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f4c:	f043 0204 	orr.w	r2, r3, #4
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f74:	f043 0210 	orr.w	r2, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d101      	bne.n	8006fa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d101      	bne.n	8006fee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007008:	2300      	movs	r3, #0
 800700a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f000 bc90 	b.w	8007938 <HAL_ADC_Init+0x93c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007020:	d018      	beq.n	8007054 <HAL_ADC_Init+0x58>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a63      	ldr	r2, [pc, #396]	; (80071b4 <HAL_ADC_Init+0x1b8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_ADC_Init+0x58>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a61      	ldr	r2, [pc, #388]	; (80071b8 <HAL_ADC_Init+0x1bc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_ADC_Init+0x58>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a60      	ldr	r2, [pc, #384]	; (80071bc <HAL_ADC_Init+0x1c0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_ADC_Init+0x58>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a5e      	ldr	r2, [pc, #376]	; (80071c0 <HAL_ADC_Init+0x1c4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_ADC_Init+0x58>
 800704a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800704e:	485d      	ldr	r0, [pc, #372]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 8007050:	f011 fbad 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d049      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007066:	d044      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007070:	d03f      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d03b      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007082:	d036      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800708c:	d031      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007096:	d02c      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a0:	d027      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80070aa:	d022      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80070b4:	d01d      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80070be:	d018      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c8:	d013      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80070d2:	d00e      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80070dc:	d009      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80070e6:	d004      	beq.n	80070f2 <HAL_ADC_Init+0xf6>
 80070e8:	f240 11a5 	movw	r1, #421	; 0x1a5
 80070ec:	4835      	ldr	r0, [pc, #212]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 80070ee:	f011 fb5e 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d010      	beq.n	800711c <HAL_ADC_Init+0x120>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d00c      	beq.n	800711c <HAL_ADC_Init+0x120>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b10      	cmp	r3, #16
 8007108:	d008      	beq.n	800711c <HAL_ADC_Init+0x120>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b18      	cmp	r3, #24
 8007110:	d004      	beq.n	800711c <HAL_ADC_Init+0x120>
 8007112:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8007116:	482b      	ldr	r0, [pc, #172]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 8007118:	f011 fb49 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_ADC_Init+0x13c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d004      	beq.n	8007138 <HAL_ADC_Init+0x13c>
 800712e:	f240 11a7 	movw	r1, #423	; 0x1a7
 8007132:	4824      	ldr	r0, [pc, #144]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 8007134:	f011 fb3b 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f244 0209 	movw	r2, #16393	; 0x4009
 8007140:	4293      	cmp	r3, r2
 8007142:	d904      	bls.n	800714e <HAL_ADC_Init+0x152>
 8007144:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8007148:	481e      	ldr	r0, [pc, #120]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 800714a:	f011 fb30 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <HAL_ADC_Init+0x16c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d004      	beq.n	8007168 <HAL_ADC_Init+0x16c>
 800715e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007162:	4818      	ldr	r0, [pc, #96]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 8007164:	f011 fb23 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7f5b      	ldrb	r3, [r3, #29]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <HAL_ADC_Init+0x186>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	7f5b      	ldrb	r3, [r3, #29]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d004      	beq.n	8007182 <HAL_ADC_Init+0x186>
 8007178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800717c:	4811      	ldr	r0, [pc, #68]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 800717e:	f011 fb16 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01e      	beq.n	80071c8 <HAL_ADC_Init+0x1cc>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007192:	d019      	beq.n	80071c8 <HAL_ADC_Init+0x1cc>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719c:	d014      	beq.n	80071c8 <HAL_ADC_Init+0x1cc>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a6:	d00f      	beq.n	80071c8 <HAL_ADC_Init+0x1cc>
 80071a8:	f240 11ab 	movw	r1, #427	; 0x1ab
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <HAL_ADC_Init+0x1c8>)
 80071ae:	f011 fafe 	bl	80187ae <assert_failed>
 80071b2:	e009      	b.n	80071c8 <HAL_ADC_Init+0x1cc>
 80071b4:	50000100 	.word	0x50000100
 80071b8:	50000400 	.word	0x50000400
 80071bc:	50000500 	.word	0x50000500
 80071c0:	50000600 	.word	0x50000600
 80071c4:	0801d9dc 	.word	0x0801d9dc
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 80071d0:	f000 80f3 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 80071dc:	f000 80ed 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80071e8:	f000 80e7 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f5b3 6fac 	cmp.w	r3, #1376	; 0x560
 80071f4:	f000 80e1 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007200:	f000 80db 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800720c:	f000 80d5 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8007218:	f000 80cf 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8007224:	f000 80c9 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8007230:	f000 80c3 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800723c:	f000 80bd 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8007248:	f000 80b7 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007254:	f000 80b1 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8007260:	f000 80ab 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800726c:	f000 80a5 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	f5b3 6fd4 	cmp.w	r3, #1696	; 0x6a0
 8007278:	f000 809f 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8007284:	f000 8099 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8007290:	f000 8093 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800729c:	f000 808d 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80072a8:	f000 8087 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80072b4:	f000 8081 	beq.w	80073ba <HAL_ADC_Init+0x3be>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 80072c0:	d07b      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80072ca:	d076      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 80072d4:	d071      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072de:	d004      	beq.n	80072ea <HAL_ADC_Init+0x2ee>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a9a      	ldr	r2, [pc, #616]	; (8007550 <HAL_ADC_Init+0x554>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d127      	bne.n	800733a <HAL_ADC_Init+0x33e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d062      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80072fc:	d05d      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8007306:	d058      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007310:	d053      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 800731a:	d04e      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8007324:	d049      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800732e:	d044      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8007338:	d03f      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a85      	ldr	r2, [pc, #532]	; (8007554 <HAL_ADC_Init+0x558>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_ADC_Init+0x35c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a83      	ldr	r2, [pc, #524]	; (8007558 <HAL_ADC_Init+0x55c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_ADC_Init+0x35c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a82      	ldr	r2, [pc, #520]	; (800755c <HAL_ADC_Init+0x560>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d127      	bne.n	80073a8 <HAL_ADC_Init+0x3ac>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007360:	d02b      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800736a:	d026      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d021      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800737e:	d01c      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8007388:	d017      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8007392:	d012      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800739c:	d00d      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 80073a6:	d008      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_ADC_Init+0x3be>
 80073b0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80073b4:	486a      	ldr	r0, [pc, #424]	; (8007560 <HAL_ADC_Init+0x564>)
 80073b6:	f011 f9fa 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <HAL_ADC_Init+0x3e4>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ca:	d009      	beq.n	80073e0 <HAL_ADC_Init+0x3e4>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d4:	d004      	beq.n	80073e0 <HAL_ADC_Init+0x3e4>
 80073d6:	f240 11ad 	movw	r1, #429	; 0x1ad
 80073da:	4861      	ldr	r0, [pc, #388]	; (8007560 <HAL_ADC_Init+0x564>)
 80073dc:	f011 f9e7 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_ADC_Init+0x402>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d004      	beq.n	80073fe <HAL_ADC_Init+0x402>
 80073f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073f8:	4859      	ldr	r0, [pc, #356]	; (8007560 <HAL_ADC_Init+0x564>)
 80073fa:	f011 f9d8 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b04      	cmp	r3, #4
 8007404:	d008      	beq.n	8007418 <HAL_ADC_Init+0x41c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2b08      	cmp	r3, #8
 800740c:	d004      	beq.n	8007418 <HAL_ADC_Init+0x41c>
 800740e:	f240 11af 	movw	r1, #431	; 0x1af
 8007412:	4853      	ldr	r0, [pc, #332]	; (8007560 <HAL_ADC_Init+0x564>)
 8007414:	f011 f9cb 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <HAL_ADC_Init+0x438>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007428:	d004      	beq.n	8007434 <HAL_ADC_Init+0x438>
 800742a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800742e:	484c      	ldr	r0, [pc, #304]	; (8007560 <HAL_ADC_Init+0x564>)
 8007430:	f011 f9bd 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7f1b      	ldrb	r3, [r3, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <HAL_ADC_Init+0x452>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7f1b      	ldrb	r3, [r3, #28]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d004      	beq.n	800744e <HAL_ADC_Init+0x452>
 8007444:	f240 11b1 	movw	r1, #433	; 0x1b1
 8007448:	4845      	ldr	r0, [pc, #276]	; (8007560 <HAL_ADC_Init+0x564>)
 800744a:	f011 f9b0 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <HAL_ADC_Init+0x470>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800745e:	2b01      	cmp	r3, #1
 8007460:	d004      	beq.n	800746c <HAL_ADC_Init+0x470>
 8007462:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8007466:	483e      	ldr	r0, [pc, #248]	; (8007560 <HAL_ADC_Init+0x564>)
 8007468:	f011 f9a1 	bl	80187ae <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d02d      	beq.n	80074d0 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_ADC_Init+0x488>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	2b10      	cmp	r3, #16
 8007482:	d904      	bls.n	800748e <HAL_ADC_Init+0x492>
 8007484:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8007488:	4835      	ldr	r0, [pc, #212]	; (8007560 <HAL_ADC_Init+0x564>)
 800748a:	f011 f990 	bl	80187ae <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_ADC_Init+0x4b0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d004      	beq.n	80074ac <HAL_ADC_Init+0x4b0>
 80074a2:	f240 11b7 	movw	r1, #439	; 0x1b7
 80074a6:	482e      	ldr	r0, [pc, #184]	; (8007560 <HAL_ADC_Init+0x564>)
 80074a8:	f011 f981 	bl	80187ae <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d10c      	bne.n	80074d0 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_ADC_Init+0x4ca>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d904      	bls.n	80074d0 <HAL_ADC_Init+0x4d4>
 80074c6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80074ca:	4825      	ldr	r0, [pc, #148]	; (8007560 <HAL_ADC_Init+0x564>)
 80074cc:	f011 f96f 	bl	80187ae <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d108      	bne.n	80074ec <HAL_ADC_Init+0x4f0>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7f5b      	ldrb	r3, [r3, #29]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d104      	bne.n	80074ec <HAL_ADC_Init+0x4f0>
 80074e2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80074e6:	481e      	ldr	r0, [pc, #120]	; (8007560 <HAL_ADC_Init+0x564>)
 80074e8:	f011 f961 	bl	80187ae <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f010 f825 	bl	8017544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fc89 	bl	8006e24 <LL_ADC_IsDeepPowerDownEnabled>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fc6f 	bl	8006e00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fca4 	bl	8006e74 <LL_ADC_IsInternalRegulatorEnabled>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d122      	bne.n	8007578 <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fc88 	bl	8006e4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <HAL_ADC_Init+0x568>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	099b      	lsrs	r3, r3, #6
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <HAL_ADC_Init+0x56c>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	099b      	lsrs	r3, r3, #6
 800754a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800754c:	e011      	b.n	8007572 <HAL_ADC_Init+0x576>
 800754e:	bf00      	nop
 8007550:	50000100 	.word	0x50000100
 8007554:	50000400 	.word	0x50000400
 8007558:	50000500 	.word	0x50000500
 800755c:	50000600 	.word	0x50000600
 8007560:	0801d9dc 	.word	0x0801d9dc
 8007564:	200000d0 	.word	0x200000d0
 8007568:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	3b01      	subs	r3, #1
 8007570:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f9      	bne.n	800756c <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fc79 	bl	8006e74 <LL_ADC_IsInternalRegulatorEnabled>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10d      	bne.n	80075a4 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	f043 0210 	orr.w	r2, r3, #16
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fced 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 80075ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f040 81b4 	bne.w	8007926 <HAL_ADC_Init+0x92a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 81b0 	bne.w	8007926 <HAL_ADC_Init+0x92a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fc86 	bl	8006eec <LL_ADC_IsEnabled>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d141      	bne.n	800766a <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ee:	d004      	beq.n	80075fa <HAL_ADC_Init+0x5fe>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a60      	ldr	r2, [pc, #384]	; (8007778 <HAL_ADC_Init+0x77c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d10f      	bne.n	800761a <HAL_ADC_Init+0x61e>
 80075fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80075fe:	f7ff fc75 	bl	8006eec <LL_ADC_IsEnabled>
 8007602:	4604      	mov	r4, r0
 8007604:	485c      	ldr	r0, [pc, #368]	; (8007778 <HAL_ADC_Init+0x77c>)
 8007606:	f7ff fc71 	bl	8006eec <LL_ADC_IsEnabled>
 800760a:	4603      	mov	r3, r0
 800760c:	4323      	orrs	r3, r4
 800760e:	2b00      	cmp	r3, #0
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	e012      	b.n	8007640 <HAL_ADC_Init+0x644>
 800761a:	4858      	ldr	r0, [pc, #352]	; (800777c <HAL_ADC_Init+0x780>)
 800761c:	f7ff fc66 	bl	8006eec <LL_ADC_IsEnabled>
 8007620:	4604      	mov	r4, r0
 8007622:	4857      	ldr	r0, [pc, #348]	; (8007780 <HAL_ADC_Init+0x784>)
 8007624:	f7ff fc62 	bl	8006eec <LL_ADC_IsEnabled>
 8007628:	4603      	mov	r3, r0
 800762a:	431c      	orrs	r4, r3
 800762c:	4855      	ldr	r0, [pc, #340]	; (8007784 <HAL_ADC_Init+0x788>)
 800762e:	f7ff fc5d 	bl	8006eec <LL_ADC_IsEnabled>
 8007632:	4603      	mov	r3, r0
 8007634:	4323      	orrs	r3, r4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bf0c      	ite	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	2300      	movne	r3, #0
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800764c:	d004      	beq.n	8007658 <HAL_ADC_Init+0x65c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a49      	ldr	r2, [pc, #292]	; (8007778 <HAL_ADC_Init+0x77c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d101      	bne.n	800765c <HAL_ADC_Init+0x660>
 8007658:	4a4b      	ldr	r2, [pc, #300]	; (8007788 <HAL_ADC_Init+0x78c>)
 800765a:	e000      	b.n	800765e <HAL_ADC_Init+0x662>
 800765c:	4a4b      	ldr	r2, [pc, #300]	; (800778c <HAL_ADC_Init+0x790>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7ff fa60 	bl	8006b2a <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7f5b      	ldrb	r3, [r3, #29]
 800766e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007674:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800767a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007680:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007688:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007694:	2b01      	cmp	r3, #1
 8007696:	d106      	bne.n	80076a6 <HAL_ADC_Init+0x6aa>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	3b01      	subs	r3, #1
 800769e:	045b      	lsls	r3, r3, #17
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <HAL_ADC_Init+0x6c6>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	4b31      	ldr	r3, [pc, #196]	; (8007790 <HAL_ADC_Init+0x794>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	430b      	orrs	r3, r1
 80076d4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fc49 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 80076f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fc6a 	bl	8006fd6 <LL_ADC_INJ_IsConversionOngoing>
 8007702:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80eb 	bne.w	80078e2 <HAL_ADC_Init+0x8e6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 80e7 	bne.w	80078e2 <HAL_ADC_Init+0x8e6>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007718:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007720:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007730:	f023 0302 	bic.w	r3, r3, #2
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	69b9      	ldr	r1, [r7, #24]
 800773a:	430b      	orrs	r3, r1
 800773c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d026      	beq.n	8007794 <HAL_ADC_Init+0x798>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007754:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800775e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007762:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6911      	ldr	r1, [r2, #16]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	430b      	orrs	r3, r1
 8007770:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007774:	e022      	b.n	80077bc <HAL_ADC_Init+0x7c0>
 8007776:	bf00      	nop
 8007778:	50000100 	.word	0x50000100
 800777c:	50000400 	.word	0x50000400
 8007780:	50000500 	.word	0x50000500
 8007784:	50000600 	.word	0x50000600
 8007788:	50000300 	.word	0x50000300
 800778c:	50000700 	.word	0x50000700
 8007790:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80077a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80077b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80077b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	f040 8085 	bne.w	80078d2 <HAL_ADC_Init+0x8d6>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d020      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d01c      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d018      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	d014      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d010      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f4:	2b14      	cmp	r3, #20
 80077f6:	d00c      	beq.n	8007812 <HAL_ADC_Init+0x816>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fc:	2b18      	cmp	r3, #24
 80077fe:	d008      	beq.n	8007812 <HAL_ADC_Init+0x816>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	2b1c      	cmp	r3, #28
 8007806:	d004      	beq.n	8007812 <HAL_ADC_Init+0x816>
 8007808:	f44f 7120 	mov.w	r1, #640	; 0x280
 800780c:	484c      	ldr	r0, [pc, #304]	; (8007940 <HAL_ADC_Init+0x944>)
 800780e:	f010 ffce 	bl	80187ae <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	2b00      	cmp	r3, #0
 8007818:	d025      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	2b20      	cmp	r3, #32
 8007820:	d021      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	2b40      	cmp	r3, #64	; 0x40
 8007828:	d01d      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782e:	2b60      	cmp	r3, #96	; 0x60
 8007830:	d019      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	2b80      	cmp	r3, #128	; 0x80
 8007838:	d015      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783e:	2ba0      	cmp	r3, #160	; 0xa0
 8007840:	d011      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	2bc0      	cmp	r3, #192	; 0xc0
 8007848:	d00d      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784e:	2be0      	cmp	r3, #224	; 0xe0
 8007850:	d009      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d004      	beq.n	8007866 <HAL_ADC_Init+0x86a>
 800785c:	f240 2181 	movw	r1, #641	; 0x281
 8007860:	4837      	ldr	r0, [pc, #220]	; (8007940 <HAL_ADC_Init+0x944>)
 8007862:	f010 ffa4 	bl	80187ae <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_ADC_Init+0x886>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007876:	d004      	beq.n	8007882 <HAL_ADC_Init+0x886>
 8007878:	f240 2182 	movw	r1, #642	; 0x282
 800787c:	4830      	ldr	r0, [pc, #192]	; (8007940 <HAL_ADC_Init+0x944>)
 800787e:	f010 ff96 	bl	80187ae <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007886:	2b01      	cmp	r3, #1
 8007888:	d00a      	beq.n	80078a0 <HAL_ADC_Init+0x8a4>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	f240 4201 	movw	r2, #1025	; 0x401
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_ADC_Init+0x8a4>
 8007896:	f240 2183 	movw	r1, #643	; 0x283
 800789a:	4829      	ldr	r0, [pc, #164]	; (8007940 <HAL_ADC_Init+0x944>)
 800789c:	f010 ff87 	bl	80187ae <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078aa:	f023 0304 	bic.w	r3, r3, #4
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078b6:	4311      	orrs	r1, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078bc:	4311      	orrs	r1, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078c2:	430a      	orrs	r2, r1
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	611a      	str	r2, [r3, #16]
 80078d0:	e007      	b.n	80078e2 <HAL_ADC_Init+0x8e6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d10c      	bne.n	8007904 <HAL_ADC_Init+0x908>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	f023 010f 	bic.w	r1, r3, #15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	1e5a      	subs	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	631a      	str	r2, [r3, #48]	; 0x30
 8007902:	e007      	b.n	8007914 <HAL_ADC_Init+0x918>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 020f 	bic.w	r2, r2, #15
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	f043 0201 	orr.w	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c
 8007924:	e007      	b.n	8007936 <HAL_ADC_Init+0x93a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792a:	f043 0210 	orr.w	r2, r3, #16
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007936:	7ffb      	ldrb	r3, [r7, #31]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3724      	adds	r7, #36	; 0x24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}
 8007940:	0801d9dc 	.word	0x0801d9dc

08007944 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e17d      	b.n	8007c52 <HAL_ADC_DeInit+0x30e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800795e:	d018      	beq.n	8007992 <HAL_ADC_DeInit+0x4e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a8e      	ldr	r2, [pc, #568]	; (8007ba0 <HAL_ADC_DeInit+0x25c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d013      	beq.n	8007992 <HAL_ADC_DeInit+0x4e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a8d      	ldr	r2, [pc, #564]	; (8007ba4 <HAL_ADC_DeInit+0x260>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <HAL_ADC_DeInit+0x4e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a8b      	ldr	r2, [pc, #556]	; (8007ba8 <HAL_ADC_DeInit+0x264>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_ADC_DeInit+0x4e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a8a      	ldr	r2, [pc, #552]	; (8007bac <HAL_ADC_DeInit+0x268>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_ADC_DeInit+0x4e>
 8007988:	f240 21de 	movw	r1, #734	; 0x2de
 800798c:	4888      	ldr	r0, [pc, #544]	; (8007bb0 <HAL_ADC_DeInit+0x26c>)
 800798e:	f010 ff0e 	bl	80187ae <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007996:	f043 0202 	orr.w	r2, r3, #2
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800799e:	2103      	movs	r1, #3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fb49 	bl	8009038 <ADC_ConversionStop>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80079b8:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_ADC_DeInit+0x92>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fc7d 	bl	80092c0 <ADC_Disable>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <HAL_ADC_DeInit+0x92>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	65da      	str	r2, [r3, #92]	; 0x5c
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079e4:	f023 0307 	bic.w	r3, r3, #7
 80079e8:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80079f2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8007a02:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a12:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68d9      	ldr	r1, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <HAL_ADC_DeInit+0x270>)
 8007a20:	400b      	ands	r3, r1
 8007a22:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a32:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a56:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8007a66:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8007a76:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b45      	ldr	r3, [pc, #276]	; (8007bb8 <HAL_ADC_DeInit+0x274>)
 8007aa4:	400b      	ands	r3, r1
 8007aa6:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <HAL_ADC_DeInit+0x278>)
 8007ab4:	400b      	ands	r3, r1
 8007ab6:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b3e      	ldr	r3, [pc, #248]	; (8007bbc <HAL_ADC_DeInit+0x278>)
 8007ac4:	400b      	ands	r3, r1
 8007ac6:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8007ad6:	f023 0307 	bic.w	r3, r3, #7
 8007ada:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <HAL_ADC_DeInit+0x27c>)
 8007ae8:	400b      	ands	r3, r1
 8007aea:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b32      	ldr	r3, [pc, #200]	; (8007bc0 <HAL_ADC_DeInit+0x27c>)
 8007af8:	400b      	ands	r3, r1
 8007afa:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <HAL_ADC_DeInit+0x27c>)
 8007b08:	400b      	ands	r3, r1
 8007b0a:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <HAL_ADC_DeInit+0x27c>)
 8007b18:	400b      	ands	r3, r1
 8007b1a:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	0cdb      	lsrs	r3, r3, #19
 8007b2a:	04db      	lsls	r3, r3, #19
 8007b2c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	0cdb      	lsrs	r3, r3, #19
 8007b3e:	04db      	lsls	r3, r3, #19
 8007b40:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	0cdb      	lsrs	r3, r3, #19
 8007b52:	04db      	lsls	r3, r3, #19
 8007b54:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8007b68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b74:	d004      	beq.n	8007b80 <HAL_ADC_DeInit+0x23c>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <HAL_ADC_DeInit+0x25c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d121      	bne.n	8007bc4 <HAL_ADC_DeInit+0x280>
 8007b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007b84:	f7ff f9b2 	bl	8006eec <LL_ADC_IsEnabled>
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4805      	ldr	r0, [pc, #20]	; (8007ba0 <HAL_ADC_DeInit+0x25c>)
 8007b8c:	f7ff f9ae 	bl	8006eec <LL_ADC_IsEnabled>
 8007b90:	4603      	mov	r3, r0
 8007b92:	4323      	orrs	r3, r4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e024      	b.n	8007bea <HAL_ADC_DeInit+0x2a6>
 8007ba0:	50000100 	.word	0x50000100
 8007ba4:	50000400 	.word	0x50000400
 8007ba8:	50000500 	.word	0x50000500
 8007bac:	50000600 	.word	0x50000600
 8007bb0:	0801d9dc 	.word	0x0801d9dc
 8007bb4:	80000004 	.word	0x80000004
 8007bb8:	e0820830 	.word	0xe0820830
 8007bbc:	e0820820 	.word	0xe0820820
 8007bc0:	03fff000 	.word	0x03fff000
 8007bc4:	4825      	ldr	r0, [pc, #148]	; (8007c5c <HAL_ADC_DeInit+0x318>)
 8007bc6:	f7ff f991 	bl	8006eec <LL_ADC_IsEnabled>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4824      	ldr	r0, [pc, #144]	; (8007c60 <HAL_ADC_DeInit+0x31c>)
 8007bce:	f7ff f98d 	bl	8006eec <LL_ADC_IsEnabled>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	431c      	orrs	r4, r3
 8007bd6:	4823      	ldr	r0, [pc, #140]	; (8007c64 <HAL_ADC_DeInit+0x320>)
 8007bd8:	f7ff f988 	bl	8006eec <LL_ADC_IsEnabled>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4323      	orrs	r3, r4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01d      	beq.n	8007c2a <HAL_ADC_DeInit+0x2e6>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf6:	d004      	beq.n	8007c02 <HAL_ADC_DeInit+0x2be>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <HAL_ADC_DeInit+0x324>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d101      	bne.n	8007c06 <HAL_ADC_DeInit+0x2c2>
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <HAL_ADC_DeInit+0x328>)
 8007c04:	e000      	b.n	8007c08 <HAL_ADC_DeInit+0x2c4>
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <HAL_ADC_DeInit+0x32c>)
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c12:	d004      	beq.n	8007c1e <HAL_ADC_DeInit+0x2da>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a13      	ldr	r2, [pc, #76]	; (8007c68 <HAL_ADC_DeInit+0x324>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d101      	bne.n	8007c22 <HAL_ADC_DeInit+0x2de>
 8007c1e:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <HAL_ADC_DeInit+0x328>)
 8007c20:	e000      	b.n	8007c24 <HAL_ADC_DeInit+0x2e0>
 8007c22:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <HAL_ADC_DeInit+0x32c>)
 8007c24:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <HAL_ADC_DeInit+0x330>)
 8007c26:	400b      	ands	r3, r1
 8007c28:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f824 	bl	8007c78 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	665a      	str	r2, [r3, #100]	; 0x64
  hadc->InjectionConfig.ChannelCount = 0;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	50000400 	.word	0x50000400
 8007c60:	50000500 	.word	0x50000500
 8007c64:	50000600 	.word	0x50000600
 8007c68:	50000100 	.word	0x50000100
 8007c6c:	50000300 	.word	0x50000300
 8007c70:	50000700 	.word	0x50000700
 8007c74:	fe0010e0 	.word	0xfe0010e0

08007c78 <HAL_ADC_MspDeInit>:
  * @note   All ADC instances use the same core clock at RCC level, disabling
  *         the core clock reset all ADC instances).
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c9c:	d004      	beq.n	8007ca8 <HAL_ADC_Start+0x1c>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a76      	ldr	r2, [pc, #472]	; (8007e7c <HAL_ADC_Start+0x1f0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d101      	bne.n	8007cac <HAL_ADC_Start+0x20>
 8007ca8:	4b75      	ldr	r3, [pc, #468]	; (8007e80 <HAL_ADC_Start+0x1f4>)
 8007caa:	e000      	b.n	8007cae <HAL_ADC_Start+0x22>
 8007cac:	4b75      	ldr	r3, [pc, #468]	; (8007e84 <HAL_ADC_Start+0x1f8>)
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff f898 	bl	8006de4 <LL_ADC_GetMultimode>
 8007cb4:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cbe:	d018      	beq.n	8007cf2 <HAL_ADC_Start+0x66>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6d      	ldr	r2, [pc, #436]	; (8007e7c <HAL_ADC_Start+0x1f0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <HAL_ADC_Start+0x66>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a6e      	ldr	r2, [pc, #440]	; (8007e88 <HAL_ADC_Start+0x1fc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_ADC_Start+0x66>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a6c      	ldr	r2, [pc, #432]	; (8007e8c <HAL_ADC_Start+0x200>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_ADC_Start+0x66>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a6b      	ldr	r2, [pc, #428]	; (8007e90 <HAL_ADC_Start+0x204>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_ADC_Start+0x66>
 8007ce8:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8007cec:	4869      	ldr	r0, [pc, #420]	; (8007e94 <HAL_ADC_Start+0x208>)
 8007cee:	f010 fd5e 	bl	80187ae <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff f946 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 80b4 	bne.w	8007e6c <HAL_ADC_Start+0x1e0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_ADC_Start+0x86>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e0af      	b.n	8007e72 <HAL_ADC_Start+0x1e6>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fa76 	bl	800920c <ADC_Enable>
 8007d20:	4603      	mov	r3, r0
 8007d22:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 809b 	bne.w	8007e62 <HAL_ADC_Start+0x1d6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a4d      	ldr	r2, [pc, #308]	; (8007e7c <HAL_ADC_Start+0x1f0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_ADC_Start+0xd2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4f      	ldr	r2, [pc, #316]	; (8007e8c <HAL_ADC_Start+0x200>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d002      	beq.n	8007d5a <HAL_ADC_Start+0xce>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	e003      	b.n	8007d62 <HAL_ADC_Start+0xd6>
 8007d5a:	4b4b      	ldr	r3, [pc, #300]	; (8007e88 <HAL_ADC_Start+0x1fc>)
 8007d5c:	e001      	b.n	8007d62 <HAL_ADC_Start+0xd6>
 8007d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d002      	beq.n	8007d70 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <HAL_ADC_Start+0xf0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d88:	d106      	bne.n	8007d98 <HAL_ADC_Start+0x10c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8e:	f023 0206 	bic.w	r2, r3, #6
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	661a      	str	r2, [r3, #96]	; 0x60
 8007d96:	e002      	b.n	8007d9e <HAL_ADC_Start+0x112>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	221c      	movs	r2, #28
 8007da4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a32      	ldr	r2, [pc, #200]	; (8007e7c <HAL_ADC_Start+0x1f0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d009      	beq.n	8007dcc <HAL_ADC_Start+0x140>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a33      	ldr	r2, [pc, #204]	; (8007e8c <HAL_ADC_Start+0x200>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d002      	beq.n	8007dc8 <HAL_ADC_Start+0x13c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	e003      	b.n	8007dd0 <HAL_ADC_Start+0x144>
 8007dc8:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <HAL_ADC_Start+0x1fc>)
 8007dca:	e001      	b.n	8007dd0 <HAL_ADC_Start+0x144>
 8007dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d008      	beq.n	8007dea <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	d002      	beq.n	8007dea <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b09      	cmp	r3, #9
 8007de8:	d114      	bne.n	8007e14 <HAL_ADC_Start+0x188>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <HAL_ADC_Start+0x17c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f893 	bl	8006f38 <LL_ADC_REG_StartConversion>
 8007e12:	e02d      	b.n	8007e70 <HAL_ADC_Start+0x1e4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <HAL_ADC_Start+0x1f0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d009      	beq.n	8007e3e <HAL_ADC_Start+0x1b2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <HAL_ADC_Start+0x200>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d002      	beq.n	8007e3a <HAL_ADC_Start+0x1ae>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e003      	b.n	8007e42 <HAL_ADC_Start+0x1b6>
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <HAL_ADC_Start+0x1fc>)
 8007e3c:	e001      	b.n	8007e42 <HAL_ADC_Start+0x1b6>
 8007e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e42:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00f      	beq.n	8007e70 <HAL_ADC_Start+0x1e4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e60:	e006      	b.n	8007e70 <HAL_ADC_Start+0x1e4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007e6a:	e001      	b.n	8007e70 <HAL_ADC_Start+0x1e4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	50000100 	.word	0x50000100
 8007e80:	50000300 	.word	0x50000300
 8007e84:	50000700 	.word	0x50000700
 8007e88:	50000400 	.word	0x50000400
 8007e8c:	50000500 	.word	0x50000500
 8007e90:	50000600 	.word	0x50000600
 8007e94:	0801d9dc 	.word	0x0801d9dc

08007e98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eac:	d004      	beq.n	8007eb8 <HAL_ADC_Start_DMA+0x20>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a67      	ldr	r2, [pc, #412]	; (8008050 <HAL_ADC_Start_DMA+0x1b8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d101      	bne.n	8007ebc <HAL_ADC_Start_DMA+0x24>
 8007eb8:	4b66      	ldr	r3, [pc, #408]	; (8008054 <HAL_ADC_Start_DMA+0x1bc>)
 8007eba:	e000      	b.n	8007ebe <HAL_ADC_Start_DMA+0x26>
 8007ebc:	4b66      	ldr	r3, [pc, #408]	; (8008058 <HAL_ADC_Start_DMA+0x1c0>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe ff90 	bl	8006de4 <LL_ADC_GetMultimode>
 8007ec4:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ece:	d018      	beq.n	8007f02 <HAL_ADC_Start_DMA+0x6a>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5e      	ldr	r2, [pc, #376]	; (8008050 <HAL_ADC_Start_DMA+0x1b8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <HAL_ADC_Start_DMA+0x6a>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5f      	ldr	r2, [pc, #380]	; (800805c <HAL_ADC_Start_DMA+0x1c4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00e      	beq.n	8007f02 <HAL_ADC_Start_DMA+0x6a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5d      	ldr	r2, [pc, #372]	; (8008060 <HAL_ADC_Start_DMA+0x1c8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_ADC_Start_DMA+0x6a>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5c      	ldr	r2, [pc, #368]	; (8008064 <HAL_ADC_Start_DMA+0x1cc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_ADC_Start_DMA+0x6a>
 8007ef8:	f240 71dc 	movw	r1, #2012	; 0x7dc
 8007efc:	485a      	ldr	r0, [pc, #360]	; (8008068 <HAL_ADC_Start_DMA+0x1d0>)
 8007efe:	f010 fc56 	bl	80187ae <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff f83e 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 8096 	bne.w	8008040 <HAL_ADC_Start_DMA+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_ADC_Start_DMA+0x8a>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e091      	b.n	8008046 <HAL_ADC_Start_DMA+0x1ae>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d002      	beq.n	8007f3c <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b09      	cmp	r3, #9
 8007f3a:	d17a      	bne.n	8008032 <HAL_ADC_Start_DMA+0x19a>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 f965 	bl	800920c <ADC_Enable>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d16d      	bne.n	8008028 <HAL_ADC_Start_DMA+0x190>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a3a      	ldr	r2, [pc, #232]	; (8008050 <HAL_ADC_Start_DMA+0x1b8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <HAL_ADC_Start_DMA+0xe6>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <HAL_ADC_Start_DMA+0x1c8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d002      	beq.n	8007f7a <HAL_ADC_Start_DMA+0xe2>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	e003      	b.n	8007f82 <HAL_ADC_Start_DMA+0xea>
 8007f7a:	4b38      	ldr	r3, [pc, #224]	; (800805c <HAL_ADC_Start_DMA+0x1c4>)
 8007f7c:	e001      	b.n	8007f82 <HAL_ADC_Start_DMA+0xea>
 8007f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d002      	beq.n	8007f90 <HAL_ADC_Start_DMA+0xf8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d105      	bne.n	8007f9c <HAL_ADC_Start_DMA+0x104>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d006      	beq.n	8007fb6 <HAL_ADC_Start_DMA+0x11e>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fac:	f023 0206 	bic.w	r2, r3, #6
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	661a      	str	r2, [r3, #96]	; 0x60
 8007fb4:	e002      	b.n	8007fbc <HAL_ADC_Start_DMA+0x124>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc0:	4a2a      	ldr	r2, [pc, #168]	; (800806c <HAL_ADC_Start_DMA+0x1d4>)
 8007fc2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	4a29      	ldr	r2, [pc, #164]	; (8008070 <HAL_ADC_Start_DMA+0x1d8>)
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	4a28      	ldr	r2, [pc, #160]	; (8008074 <HAL_ADC_Start_DMA+0x1dc>)
 8007fd2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	221c      	movs	r2, #28
 8007fda:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0210 	orr.w	r2, r2, #16
 8007ff2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3340      	adds	r3, #64	; 0x40
 800800e:	4619      	mov	r1, r3
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f003 f97c 	bl	800b310 <HAL_DMA_Start_IT>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe ff89 	bl	8006f38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008026:	e00d      	b.n	8008044 <HAL_ADC_Start_DMA+0x1ac>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008030:	e008      	b.n	8008044 <HAL_ADC_Start_DMA+0x1ac>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800803e:	e001      	b.n	8008044 <HAL_ADC_Start_DMA+0x1ac>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008040:	2302      	movs	r3, #2
 8008042:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	50000100 	.word	0x50000100
 8008054:	50000300 	.word	0x50000300
 8008058:	50000700 	.word	0x50000700
 800805c:	50000400 	.word	0x50000400
 8008060:	50000500 	.word	0x50000500
 8008064:	50000600 	.word	0x50000600
 8008068:	0801d9dc 	.word	0x0801d9dc
 800806c:	08009371 	.word	0x08009371
 8008070:	08009449 	.word	0x08009449
 8008074:	08009465 	.word	0x08009465

08008078 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008088:	d018      	beq.n	80080bc <HAL_ADC_Stop_DMA+0x44>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <HAL_ADC_Stop_DMA+0x100>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <HAL_ADC_Stop_DMA+0x44>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a38      	ldr	r2, [pc, #224]	; (800817c <HAL_ADC_Stop_DMA+0x104>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00e      	beq.n	80080bc <HAL_ADC_Stop_DMA+0x44>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a37      	ldr	r2, [pc, #220]	; (8008180 <HAL_ADC_Stop_DMA+0x108>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_ADC_Stop_DMA+0x44>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a35      	ldr	r2, [pc, #212]	; (8008184 <HAL_ADC_Stop_DMA+0x10c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_ADC_Stop_DMA+0x44>
 80080b2:	f640 0166 	movw	r1, #2150	; 0x866
 80080b6:	4834      	ldr	r0, [pc, #208]	; (8008188 <HAL_ADC_Stop_DMA+0x110>)
 80080b8:	f010 fb79 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_ADC_Stop_DMA+0x52>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e051      	b.n	800816e <HAL_ADC_Stop_DMA+0xf6>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80080d2:	2103      	movs	r1, #3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 ffaf 	bl	8009038 <ADC_ConversionStop>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d13f      	bne.n	8008164 <HAL_ADC_Stop_DMA+0xec>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d10f      	bne.n	8008122 <HAL_ADC_Stop_DMA+0xaa>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	4618      	mov	r0, r3
 8008108:	f003 f98c 	bl	800b424 <HAL_DMA_Abort>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_ADC_Stop_DMA+0xaa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0210 	bic.w	r2, r2, #16
 8008130:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <HAL_ADC_Stop_DMA+0xcc>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f8c1 	bl	80092c0 <ADC_Disable>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
 8008142:	e002      	b.n	800814a <HAL_ADC_Stop_DMA+0xd2>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 f8bb 	bl	80092c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <HAL_ADC_Stop_DMA+0xec>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	f043 0201 	orr.w	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	50000100 	.word	0x50000100
 800817c:	50000400 	.word	0x50000400
 8008180:	50000500 	.word	0x50000500
 8008184:	50000600 	.word	0x50000600
 8008188:	0801d9dc 	.word	0x0801d9dc

0800818c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80081c8:	b590      	push	{r4, r7, lr}
 80081ca:	b0a7      	sub	sp, #156	; 0x9c
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e4:	d018      	beq.n	8008218 <HAL_ADC_ConfigChannel+0x50>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4aa2      	ldr	r2, [pc, #648]	; (8008474 <HAL_ADC_ConfigChannel+0x2ac>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d013      	beq.n	8008218 <HAL_ADC_ConfigChannel+0x50>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4aa0      	ldr	r2, [pc, #640]	; (8008478 <HAL_ADC_ConfigChannel+0x2b0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00e      	beq.n	8008218 <HAL_ADC_ConfigChannel+0x50>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a9f      	ldr	r2, [pc, #636]	; (800847c <HAL_ADC_ConfigChannel+0x2b4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d009      	beq.n	8008218 <HAL_ADC_ConfigChannel+0x50>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a9d      	ldr	r2, [pc, #628]	; (8008480 <HAL_ADC_ConfigChannel+0x2b8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_ADC_ConfigChannel+0x50>
 800820e:	f44f 612d 	mov.w	r1, #2768	; 0xad0
 8008212:	489c      	ldr	r0, [pc, #624]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 8008214:	f010 facb 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2b06      	cmp	r3, #6
 800821e:	d04f      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b0c      	cmp	r3, #12
 8008226:	d04b      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b12      	cmp	r3, #18
 800822e:	d047      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b18      	cmp	r3, #24
 8008236:	d043      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d03e      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800824a:	d039      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8008254:	d034      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800825e:	d02f      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8008268:	d02a      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008272:	d025      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f240 2206 	movw	r2, #518	; 0x206
 800827c:	4293      	cmp	r3, r2
 800827e:	d01f      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8008288:	d01a      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f240 2212 	movw	r2, #530	; 0x212
 8008292:	4293      	cmp	r3, r2
 8008294:	d014      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800829e:	d00f      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082a8:	d00a      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f240 3206 	movw	r2, #774	; 0x306
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <HAL_ADC_ConfigChannel+0xf8>
 80082b6:	f640 21d1 	movw	r1, #2769	; 0xad1
 80082ba:	4872      	ldr	r0, [pc, #456]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 80082bc:	f010 fa77 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d025      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d0:	d020      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d01c      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d018      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d014      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d010      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b05      	cmp	r3, #5
 80082f8:	d00c      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d008      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b07      	cmp	r3, #7
 8008308:	d004      	beq.n	8008314 <HAL_ADC_ConfigChannel+0x14c>
 800830a:	f640 21d2 	movw	r1, #2770	; 0xad2
 800830e:	485d      	ldr	r0, [pc, #372]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 8008310:	f010 fa4d 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b7f      	cmp	r3, #127	; 0x7f
 800831a:	d009      	beq.n	8008330 <HAL_ADC_ConfigChannel+0x168>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4a59      	ldr	r2, [pc, #356]	; (8008488 <HAL_ADC_ConfigChannel+0x2c0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_ADC_ConfigChannel+0x168>
 8008326:	f640 21d3 	movw	r1, #2771	; 0xad3
 800832a:	4856      	ldr	r0, [pc, #344]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 800832c:	f010 fa3f 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b04      	cmp	r3, #4
 8008336:	d014      	beq.n	8008362 <HAL_ADC_ConfigChannel+0x19a>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d010      	beq.n	8008362 <HAL_ADC_ConfigChannel+0x19a>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d00c      	beq.n	8008362 <HAL_ADC_ConfigChannel+0x19a>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d008      	beq.n	8008362 <HAL_ADC_ConfigChannel+0x19a>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d004      	beq.n	8008362 <HAL_ADC_ConfigChannel+0x19a>
 8008358:	f640 21d4 	movw	r1, #2772	; 0xad4
 800835c:	4849      	ldr	r0, [pc, #292]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 800835e:	f010 fa26 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695c      	ldr	r4, [r3, #20]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fc11 	bl	8006b92 <LL_ADC_GetResolution>
 8008370:	4603      	mov	r3, r0
 8008372:	089b      	lsrs	r3, r3, #2
 8008374:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
 800837c:	429c      	cmp	r4, r3
 800837e:	d904      	bls.n	800838a <HAL_ADC_ConfigChannel+0x1c2>
 8008380:	f640 21d5 	movw	r1, #2773	; 0xad5
 8008384:	483f      	ldr	r0, [pc, #252]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 8008386:	f010 fa12 	bl	80187ae <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d009      	beq.n	80083a6 <HAL_ADC_ConfigChannel+0x1de>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008398:	2b01      	cmp	r3, #1
 800839a:	d104      	bne.n	80083a6 <HAL_ADC_ConfigChannel+0x1de>
 800839c:	f640 21d9 	movw	r1, #2777	; 0xad9
 80083a0:	4838      	ldr	r0, [pc, #224]	; (8008484 <HAL_ADC_ConfigChannel+0x2bc>)
 80083a2:	f010 fa04 	bl	80187ae <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	4a37      	ldr	r2, [pc, #220]	; (8008488 <HAL_ADC_ConfigChannel+0x2c0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	f000 8189 	beq.w	80086c4 <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a35      	ldr	r2, [pc, #212]	; (800848c <HAL_ADC_ConfigChannel+0x2c4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	f000 8252 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a33      	ldr	r2, [pc, #204]	; (8008490 <HAL_ADC_ConfigChannel+0x2c8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	f000 824c 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a31      	ldr	r2, [pc, #196]	; (8008494 <HAL_ADC_ConfigChannel+0x2cc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	f000 8246 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2f      	ldr	r2, [pc, #188]	; (8008498 <HAL_ADC_ConfigChannel+0x2d0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	f000 8240 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2d      	ldr	r2, [pc, #180]	; (800849c <HAL_ADC_ConfigChannel+0x2d4>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f000 823a 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2b      	ldr	r2, [pc, #172]	; (80084a0 <HAL_ADC_ConfigChannel+0x2d8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	f000 8234 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <HAL_ADC_ConfigChannel+0x2dc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	f000 822e 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <HAL_ADC_ConfigChannel+0x2e0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	f000 8228 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a25      	ldr	r2, [pc, #148]	; (80084ac <HAL_ADC_ConfigChannel+0x2e4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	f000 8222 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a23      	ldr	r2, [pc, #140]	; (80084b0 <HAL_ADC_ConfigChannel+0x2e8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	f000 821c 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <HAL_ADC_ConfigChannel+0x2ec>)
 8008430:	4293      	cmp	r3, r2
 8008432:	f000 8216 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843e:	d155      	bne.n	80084ec <HAL_ADC_ConfigChannel+0x324>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a1c      	ldr	r2, [pc, #112]	; (80084b8 <HAL_ADC_ConfigChannel+0x2f0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	f000 820b 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <HAL_ADC_ConfigChannel+0x2f4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	f000 8205 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_ADC_ConfigChannel+0x2f8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	f000 81ff 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a16      	ldr	r2, [pc, #88]	; (80084c4 <HAL_ADC_ConfigChannel+0x2fc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	f000 81f9 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008470:	e02a      	b.n	80084c8 <HAL_ADC_ConfigChannel+0x300>
 8008472:	bf00      	nop
 8008474:	50000100 	.word	0x50000100
 8008478:	50000400 	.word	0x50000400
 800847c:	50000500 	.word	0x50000500
 8008480:	50000600 	.word	0x50000600
 8008484:	0801d9dc 	.word	0x0801d9dc
 8008488:	407f0000 	.word	0x407f0000
 800848c:	04300002 	.word	0x04300002
 8008490:	08600004 	.word	0x08600004
 8008494:	19200040 	.word	0x19200040
 8008498:	1d500080 	.word	0x1d500080
 800849c:	21800100 	.word	0x21800100
 80084a0:	25b00200 	.word	0x25b00200
 80084a4:	2a000400 	.word	0x2a000400
 80084a8:	2e300800 	.word	0x2e300800
 80084ac:	32601000 	.word	0x32601000
 80084b0:	3ac04000 	.word	0x3ac04000
 80084b4:	3ef08000 	.word	0x3ef08000
 80084b8:	0c900008 	.word	0x0c900008
 80084bc:	10c00010 	.word	0x10c00010
 80084c0:	14f00020 	.word	0x14f00020
 80084c4:	b6902000 	.word	0xb6902000
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a68      	ldr	r2, [pc, #416]	; (8008670 <HAL_ADC_ConfigChannel+0x4a8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f000 81c7 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a66      	ldr	r2, [pc, #408]	; (8008674 <HAL_ADC_ConfigChannel+0x4ac>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f000 81c1 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a64      	ldr	r2, [pc, #400]	; (8008678 <HAL_ADC_ConfigChannel+0x4b0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	f000 81bb 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a62      	ldr	r2, [pc, #392]	; (800867c <HAL_ADC_ConfigChannel+0x4b4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d129      	bne.n	800854a <HAL_ADC_ConfigChannel+0x382>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a61      	ldr	r2, [pc, #388]	; (8008680 <HAL_ADC_ConfigChannel+0x4b8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	f000 81b0 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a5f      	ldr	r2, [pc, #380]	; (8008684 <HAL_ADC_ConfigChannel+0x4bc>)
 8008508:	4293      	cmp	r3, r2
 800850a:	f000 81aa 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a5d      	ldr	r2, [pc, #372]	; (8008688 <HAL_ADC_ConfigChannel+0x4c0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	f000 81a4 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a5b      	ldr	r2, [pc, #364]	; (800868c <HAL_ADC_ConfigChannel+0x4c4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	f000 819e 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a59      	ldr	r2, [pc, #356]	; (8008690 <HAL_ADC_ConfigChannel+0x4c8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	f000 8198 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a57      	ldr	r2, [pc, #348]	; (8008694 <HAL_ADC_ConfigChannel+0x4cc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	f000 8192 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a55      	ldr	r2, [pc, #340]	; (8008698 <HAL_ADC_ConfigChannel+0x4d0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	f000 818c 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a53      	ldr	r2, [pc, #332]	; (800869c <HAL_ADC_ConfigChannel+0x4d4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d129      	bne.n	80085a8 <HAL_ADC_ConfigChannel+0x3e0>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a49      	ldr	r2, [pc, #292]	; (8008680 <HAL_ADC_ConfigChannel+0x4b8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	f000 8181 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a47      	ldr	r2, [pc, #284]	; (8008684 <HAL_ADC_ConfigChannel+0x4bc>)
 8008566:	4293      	cmp	r3, r2
 8008568:	f000 817b 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a45      	ldr	r2, [pc, #276]	; (8008688 <HAL_ADC_ConfigChannel+0x4c0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 8175 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a48      	ldr	r2, [pc, #288]	; (80086a0 <HAL_ADC_ConfigChannel+0x4d8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	f000 816f 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a46      	ldr	r2, [pc, #280]	; (80086a4 <HAL_ADC_ConfigChannel+0x4dc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f000 8169 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a37      	ldr	r2, [pc, #220]	; (8008674 <HAL_ADC_ConfigChannel+0x4ac>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f000 8163 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a35      	ldr	r2, [pc, #212]	; (8008678 <HAL_ADC_ConfigChannel+0x4b0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f000 815d 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a3e      	ldr	r2, [pc, #248]	; (80086a8 <HAL_ADC_ConfigChannel+0x4e0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d129      	bne.n	8008606 <HAL_ADC_ConfigChannel+0x43e>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a32      	ldr	r2, [pc, #200]	; (8008680 <HAL_ADC_ConfigChannel+0x4b8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	f000 8152 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a30      	ldr	r2, [pc, #192]	; (8008684 <HAL_ADC_ConfigChannel+0x4bc>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	f000 814c 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a2e      	ldr	r2, [pc, #184]	; (8008688 <HAL_ADC_ConfigChannel+0x4c0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	f000 8146 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2c      	ldr	r2, [pc, #176]	; (800868c <HAL_ADC_ConfigChannel+0x4c4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	f000 8140 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <HAL_ADC_ConfigChannel+0x4dc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	f000 813a 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <HAL_ADC_ConfigChannel+0x4e4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	f000 8134 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <HAL_ADC_ConfigChannel+0x4b0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	f000 812e 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <HAL_ADC_ConfigChannel+0x4e8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d129      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x49c>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <HAL_ADC_ConfigChannel+0x4ec>)
 8008616:	4293      	cmp	r3, r2
 8008618:	f000 8123 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <HAL_ADC_ConfigChannel+0x4f0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	f000 811d 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a23      	ldr	r2, [pc, #140]	; (80086bc <HAL_ADC_ConfigChannel+0x4f4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	f000 8117 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a14      	ldr	r2, [pc, #80]	; (800868c <HAL_ADC_ConfigChannel+0x4c4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	f000 8111 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <HAL_ADC_ConfigChannel+0x4dc>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f000 810b 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <HAL_ADC_ConfigChannel+0x4ac>)
 8008652:	4293      	cmp	r3, r2
 8008654:	f000 8105 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a06      	ldr	r2, [pc, #24]	; (8008678 <HAL_ADC_ConfigChannel+0x4b0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	f000 80ff 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008664:	f640 21de 	movw	r1, #2782	; 0xade
 8008668:	4815      	ldr	r0, [pc, #84]	; (80086c0 <HAL_ADC_ConfigChannel+0x4f8>)
 800866a:	f010 f8a0 	bl	80187ae <assert_failed>
 800866e:	e0f8      	b.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008670:	c3210000 	.word	0xc3210000
 8008674:	c7520000 	.word	0xc7520000
 8008678:	cb840000 	.word	0xcb840000
 800867c:	50000100 	.word	0x50000100
 8008680:	0c900008 	.word	0x0c900008
 8008684:	10c00010 	.word	0x10c00010
 8008688:	14f00020 	.word	0x14f00020
 800868c:	36902000 	.word	0x36902000
 8008690:	c3290000 	.word	0xc3290000
 8008694:	47520000 	.word	0x47520000
 8008698:	cb8c0000 	.word	0xcb8c0000
 800869c:	50000400 	.word	0x50000400
 80086a0:	b6982000 	.word	0xb6982000
 80086a4:	43210000 	.word	0x43210000
 80086a8:	50000500 	.word	0x50000500
 80086ac:	c75a0000 	.word	0xc75a0000
 80086b0:	50000600 	.word	0x50000600
 80086b4:	8c900008 	.word	0x8c900008
 80086b8:	90c00010 	.word	0x90c00010
 80086bc:	94f00020 	.word	0x94f00020
 80086c0:	0801d9dc 	.word	0x0801d9dc
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a8b      	ldr	r2, [pc, #556]	; (80088f8 <HAL_ADC_ConfigChannel+0x730>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	f000 80c9 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a89      	ldr	r2, [pc, #548]	; (80088fc <HAL_ADC_ConfigChannel+0x734>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	f000 80c3 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a87      	ldr	r2, [pc, #540]	; (8008900 <HAL_ADC_ConfigChannel+0x738>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	f000 80bd 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a85      	ldr	r2, [pc, #532]	; (8008904 <HAL_ADC_ConfigChannel+0x73c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	f000 80b7 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a83      	ldr	r2, [pc, #524]	; (8008908 <HAL_ADC_ConfigChannel+0x740>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	f000 80b1 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a81      	ldr	r2, [pc, #516]	; (800890c <HAL_ADC_ConfigChannel+0x744>)
 8008706:	4293      	cmp	r3, r2
 8008708:	f000 80ab 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a7f      	ldr	r2, [pc, #508]	; (8008910 <HAL_ADC_ConfigChannel+0x748>)
 8008712:	4293      	cmp	r3, r2
 8008714:	f000 80a5 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a7d      	ldr	r2, [pc, #500]	; (8008914 <HAL_ADC_ConfigChannel+0x74c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	f000 809f 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800872c:	d117      	bne.n	800875e <HAL_ADC_ConfigChannel+0x596>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a79      	ldr	r2, [pc, #484]	; (8008918 <HAL_ADC_ConfigChannel+0x750>)
 8008734:	4293      	cmp	r3, r2
 8008736:	f000 8094 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a77      	ldr	r2, [pc, #476]	; (800891c <HAL_ADC_ConfigChannel+0x754>)
 8008740:	4293      	cmp	r3, r2
 8008742:	f000 808e 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a75      	ldr	r2, [pc, #468]	; (8008920 <HAL_ADC_ConfigChannel+0x758>)
 800874c:	4293      	cmp	r3, r2
 800874e:	f000 8088 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a73      	ldr	r2, [pc, #460]	; (8008924 <HAL_ADC_ConfigChannel+0x75c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	f000 8082 	beq.w	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a71      	ldr	r2, [pc, #452]	; (8008928 <HAL_ADC_ConfigChannel+0x760>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d11d      	bne.n	80087a4 <HAL_ADC_ConfigChannel+0x5dc>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a6a      	ldr	r2, [pc, #424]	; (8008918 <HAL_ADC_ConfigChannel+0x750>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d077      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a69      	ldr	r2, [pc, #420]	; (800891c <HAL_ADC_ConfigChannel+0x754>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d072      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a67      	ldr	r2, [pc, #412]	; (8008920 <HAL_ADC_ConfigChannel+0x758>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d06d      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a66      	ldr	r2, [pc, #408]	; (8008924 <HAL_ADC_ConfigChannel+0x75c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d068      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a65      	ldr	r2, [pc, #404]	; (800892c <HAL_ADC_ConfigChannel+0x764>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d063      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a64      	ldr	r2, [pc, #400]	; (8008930 <HAL_ADC_ConfigChannel+0x768>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d05e      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a62      	ldr	r2, [pc, #392]	; (8008934 <HAL_ADC_ConfigChannel+0x76c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d118      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x618>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a59      	ldr	r2, [pc, #356]	; (8008918 <HAL_ADC_ConfigChannel+0x750>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d054      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a57      	ldr	r2, [pc, #348]	; (800891c <HAL_ADC_ConfigChannel+0x754>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d04f      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a56      	ldr	r2, [pc, #344]	; (8008920 <HAL_ADC_ConfigChannel+0x758>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d04a      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a54      	ldr	r2, [pc, #336]	; (8008924 <HAL_ADC_ConfigChannel+0x75c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d045      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a57      	ldr	r2, [pc, #348]	; (8008938 <HAL_ADC_ConfigChannel+0x770>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d040      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a55      	ldr	r2, [pc, #340]	; (800893c <HAL_ADC_ConfigChannel+0x774>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d122      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x668>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a4a      	ldr	r2, [pc, #296]	; (8008918 <HAL_ADC_ConfigChannel+0x750>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d036      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a48      	ldr	r2, [pc, #288]	; (800891c <HAL_ADC_ConfigChannel+0x754>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d031      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a47      	ldr	r2, [pc, #284]	; (8008920 <HAL_ADC_ConfigChannel+0x758>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d02c      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a45      	ldr	r2, [pc, #276]	; (8008924 <HAL_ADC_ConfigChannel+0x75c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d027      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a45      	ldr	r2, [pc, #276]	; (800892c <HAL_ADC_ConfigChannel+0x764>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d022      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a43      	ldr	r2, [pc, #268]	; (8008930 <HAL_ADC_ConfigChannel+0x768>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d01d      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a43      	ldr	r2, [pc, #268]	; (8008938 <HAL_ADC_ConfigChannel+0x770>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d018      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a42      	ldr	r2, [pc, #264]	; (8008940 <HAL_ADC_ConfigChannel+0x778>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d10e      	bne.n	8008858 <HAL_ADC_ConfigChannel+0x690>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a3b      	ldr	r2, [pc, #236]	; (800892c <HAL_ADC_ConfigChannel+0x764>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00e      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a39      	ldr	r2, [pc, #228]	; (8008930 <HAL_ADC_ConfigChannel+0x768>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d009      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a39      	ldr	r2, [pc, #228]	; (8008938 <HAL_ADC_ConfigChannel+0x770>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d004      	beq.n	8008862 <HAL_ADC_ConfigChannel+0x69a>
 8008858:	f640 21e2 	movw	r1, #2786	; 0xae2
 800885c:	4839      	ldr	r0, [pc, #228]	; (8008944 <HAL_ADC_ConfigChannel+0x77c>)
 800885e:	f00f ffa6 	bl	80187ae <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x6a8>
 800886c:	2302      	movs	r3, #2
 800886e:	e3d3      	b.n	8009018 <HAL_ADC_ConfigChannel+0xe50>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fb83 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 83b4 	bne.w	8008ff2 <HAL_ADC_ConfigChannel+0xe2a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	6859      	ldr	r1, [r3, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7fe fa2e 	bl	8006cf8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fb71 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 80088a6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fb91 	bl	8006fd6 <LL_ADC_INJ_IsConversionOngoing>
 80088b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80088b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 81c1 	bne.w	8008c44 <HAL_ADC_ConfigChannel+0xa7c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80088c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 81bc 	bne.w	8008c44 <HAL_ADC_ConfigChannel+0xa7c>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d4:	d138      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2200      	movs	r2, #0
 80088e0:	4619      	mov	r1, r3
 80088e2:	f7fe fa32 	bl	8006d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe f9dc 	bl	8006cac <LL_ADC_SetSamplingTimeCommonConfig>
 80088f4:	e037      	b.n	8008966 <HAL_ADC_ConfigChannel+0x79e>
 80088f6:	bf00      	nop
 80088f8:	04300002 	.word	0x04300002
 80088fc:	19200040 	.word	0x19200040
 8008900:	1d500080 	.word	0x1d500080
 8008904:	21800100 	.word	0x21800100
 8008908:	25b00200 	.word	0x25b00200
 800890c:	2a000400 	.word	0x2a000400
 8008910:	2e300800 	.word	0x2e300800
 8008914:	3ac04000 	.word	0x3ac04000
 8008918:	08600004 	.word	0x08600004
 800891c:	0c900008 	.word	0x0c900008
 8008920:	10c00010 	.word	0x10c00010
 8008924:	14f00020 	.word	0x14f00020
 8008928:	50000100 	.word	0x50000100
 800892c:	32601000 	.word	0x32601000
 8008930:	36902000 	.word	0x36902000
 8008934:	50000400 	.word	0x50000400
 8008938:	3ef08000 	.word	0x3ef08000
 800893c:	50000500 	.word	0x50000500
 8008940:	50000600 	.word	0x50000600
 8008944:	0801d9dc 	.word	0x0801d9dc
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	461a      	mov	r2, r3
 8008956:	f7fe f9f8 	bl	8006d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe f9a3 	bl	8006cac <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	08db      	lsrs	r3, r3, #3
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d03d      	beq.n	8008a04 <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6919      	ldr	r1, [r3, #16]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008998:	f7fe f90a 	bl	8006bb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <HAL_ADC_ConfigChannel+0x7f0>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089ac:	d004      	beq.n	80089b8 <HAL_ADC_ConfigChannel+0x7f0>
 80089ae:	f640 311a 	movw	r1, #2842	; 0xb1a
 80089b2:	4899      	ldr	r0, [pc, #612]	; (8008c18 <HAL_ADC_ConfigChannel+0xa50>)
 80089b4:	f00f fefb 	bl	80187ae <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	7f1b      	ldrb	r3, [r3, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d008      	beq.n	80089d2 <HAL_ADC_ConfigChannel+0x80a>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	7f1b      	ldrb	r3, [r3, #28]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d004      	beq.n	80089d2 <HAL_ADC_ConfigChannel+0x80a>
 80089c8:	f640 311b 	movw	r1, #2843	; 0xb1b
 80089cc:	4892      	ldr	r0, [pc, #584]	; (8008c18 <HAL_ADC_ConfigChannel+0xa50>)
 80089ce:	f00f feee 	bl	80187ae <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6919      	ldr	r1, [r3, #16]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	461a      	mov	r2, r3
 80089e0:	f7fe f934 	bl	8006c4c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	6919      	ldr	r1, [r3, #16]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	7f1b      	ldrb	r3, [r3, #28]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d102      	bne.n	80089fa <HAL_ADC_ConfigChannel+0x832>
 80089f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089f8:	e000      	b.n	80089fc <HAL_ADC_ConfigChannel+0x834>
 80089fa:	2300      	movs	r3, #0
 80089fc:	461a      	mov	r2, r3
 80089fe:	f7fe f93d 	bl	8006c7c <LL_ADC_SetOffsetSaturation>
 8008a02:	e11f      	b.n	8008c44 <HAL_ADC_ConfigChannel+0xa7c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe f8f2 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x868>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe f8e7 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008a26:	4603      	mov	r3, r0
 8008a28:	0e9b      	lsrs	r3, r3, #26
 8008a2a:	f003 021f 	and.w	r2, r3, #31
 8008a2e:	e012      	b.n	8008a56 <HAL_ADC_ConfigChannel+0x88e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2100      	movs	r1, #0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe f8dc 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a46:	fa93 f3a3 	rbit	r3, r3
 8008a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a4e:	fab3 f383 	clz	r3, r3
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <HAL_ADC_ConfigChannel+0x8a6>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	0e9b      	lsrs	r3, r3, #26
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	e00a      	b.n	8008a84 <HAL_ADC_ConfigChannel+0x8bc>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a76:	fa93 f3a3 	rbit	r3, r3
 8008a7a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a7e:	fab3 f383 	clz	r3, r3
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d106      	bne.n	8008a96 <HAL_ADC_ConfigChannel+0x8ce>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe f8c3 	bl	8006c1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe f8a9 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <HAL_ADC_ConfigChannel+0x8fa>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe f89e 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	0e9b      	lsrs	r3, r3, #26
 8008abc:	f003 021f 	and.w	r2, r3, #31
 8008ac0:	e010      	b.n	8008ae4 <HAL_ADC_ConfigChannel+0x91c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe f893 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad4:	fa93 f3a3 	rbit	r3, r3
 8008ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008adc:	fab3 f383 	clz	r3, r3
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x934>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	0e9b      	lsrs	r3, r3, #26
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	e00a      	b.n	8008b12 <HAL_ADC_ConfigChannel+0x94a>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b04:	fa93 f3a3 	rbit	r3, r3
 8008b08:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b0c:	fab3 f383 	clz	r3, r3
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d106      	bne.n	8008b24 <HAL_ADC_ConfigChannel+0x95c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe f87c 	bl	8006c1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2102      	movs	r1, #2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe f862 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0x988>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe f857 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008b46:	4603      	mov	r3, r0
 8008b48:	0e9b      	lsrs	r3, r3, #26
 8008b4a:	f003 021f 	and.w	r2, r3, #31
 8008b4e:	e010      	b.n	8008b72 <HAL_ADC_ConfigChannel+0x9aa>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2102      	movs	r1, #2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe f84c 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b62:	fa93 f3a3 	rbit	r3, r3
 8008b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6a:	fab3 f383 	clz	r3, r3
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <HAL_ADC_ConfigChannel+0x9c2>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	0e9b      	lsrs	r3, r3, #26
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	e00a      	b.n	8008ba0 <HAL_ADC_ConfigChannel+0x9d8>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b92:	fa93 f3a3 	rbit	r3, r3
 8008b96:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b9a:	fab3 f383 	clz	r3, r3
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d106      	bne.n	8008bb2 <HAL_ADC_ConfigChannel+0x9ea>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2102      	movs	r1, #2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fe f835 	bl	8006c1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe f81b 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <HAL_ADC_ConfigChannel+0xa16>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2103      	movs	r1, #3
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe f810 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	0e9b      	lsrs	r3, r3, #26
 8008bd8:	f003 021f 	and.w	r2, r3, #31
 8008bdc:	e010      	b.n	8008c00 <HAL_ADC_ConfigChannel+0xa38>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2103      	movs	r1, #3
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe f805 	bl	8006bf4 <LL_ADC_GetOffsetChannel>
 8008bea:	4603      	mov	r3, r0
 8008bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf0:	fa93 f3a3 	rbit	r3, r3
 8008bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf8:	fab3 f383 	clz	r3, r3
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <HAL_ADC_ConfigChannel+0xa54>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	0e9b      	lsrs	r3, r3, #26
 8008c12:	f003 031f 	and.w	r3, r3, #31
 8008c16:	e00c      	b.n	8008c32 <HAL_ADC_ConfigChannel+0xa6a>
 8008c18:	0801d9dc 	.word	0x0801d9dc
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c24:	fa93 f3a3 	rbit	r3, r3
 8008c28:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2c:	fab3 f383 	clz	r3, r3
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d106      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0xa7c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2103      	movs	r1, #3
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fd ffec 	bl	8006c1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe f94f 	bl	8006eec <LL_ADC_IsEnabled>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 810c 	bne.w	8008e6e <HAL_ADC_ConfigChannel+0xca6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f7fe f89a 	bl	8006d9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	4aae      	ldr	r2, [pc, #696]	; (8008f28 <HAL_ADC_ConfigChannel+0xd60>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f040 80fd 	bne.w	8008e6e <HAL_ADC_ConfigChannel+0xca6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <HAL_ADC_ConfigChannel+0xad4>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	0e9b      	lsrs	r3, r3, #26
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	f003 031f 	and.w	r3, r3, #31
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	bf94      	ite	ls
 8008c94:	2301      	movls	r3, #1
 8008c96:	2300      	movhi	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e012      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0xafa>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca4:	fa93 f3a3 	rbit	r3, r3
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	fab3 f383 	clz	r3, r3
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	f003 031f 	and.w	r3, r3, #31
 8008cb8:	2b09      	cmp	r3, #9
 8008cba:	bf94      	ite	ls
 8008cbc:	2301      	movls	r3, #1
 8008cbe:	2300      	movhi	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d064      	beq.n	8008d90 <HAL_ADC_ConfigChannel+0xbc8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d107      	bne.n	8008ce2 <HAL_ADC_ConfigChannel+0xb1a>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	0e9b      	lsrs	r3, r3, #26
 8008cd8:	3301      	adds	r3, #1
 8008cda:	069b      	lsls	r3, r3, #26
 8008cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ce0:	e00e      	b.n	8008d00 <HAL_ADC_ConfigChannel+0xb38>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	fa93 f3a3 	rbit	r3, r3
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	fab3 f383 	clz	r3, r3
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	069b      	lsls	r3, r3, #26
 8008cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d109      	bne.n	8008d20 <HAL_ADC_ConfigChannel+0xb58>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	0e9b      	lsrs	r3, r3, #26
 8008d12:	3301      	adds	r3, #1
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2101      	movs	r1, #1
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	e010      	b.n	8008d42 <HAL_ADC_ConfigChannel+0xb7a>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	fa93 f3a3 	rbit	r3, r3
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	fab3 f383 	clz	r3, r3
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3301      	adds	r3, #1
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d42:	ea42 0103 	orr.w	r1, r2, r3
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <HAL_ADC_ConfigChannel+0xba0>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	0e9b      	lsrs	r3, r3, #26
 8008d58:	3301      	adds	r3, #1
 8008d5a:	f003 021f 	and.w	r2, r3, #31
 8008d5e:	4613      	mov	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4413      	add	r3, r2
 8008d64:	051b      	lsls	r3, r3, #20
 8008d66:	e011      	b.n	8008d8c <HAL_ADC_ConfigChannel+0xbc4>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	fa93 f3a3 	rbit	r3, r3
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	fab3 f383 	clz	r3, r3
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	3301      	adds	r3, #1
 8008d80:	f003 021f 	and.w	r2, r3, #31
 8008d84:	4613      	mov	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	e069      	b.n	8008e64 <HAL_ADC_ConfigChannel+0xc9c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <HAL_ADC_ConfigChannel+0xbe4>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	0e9b      	lsrs	r3, r3, #26
 8008da2:	3301      	adds	r3, #1
 8008da4:	069b      	lsls	r3, r3, #26
 8008da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008daa:	e00e      	b.n	8008dca <HAL_ADC_ConfigChannel+0xc02>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	fa93 f3a3 	rbit	r3, r3
 8008db8:	61fb      	str	r3, [r7, #28]
  return result;
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	fab3 f383 	clz	r3, r3
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	069b      	lsls	r3, r3, #26
 8008dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <HAL_ADC_ConfigChannel+0xc22>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	0e9b      	lsrs	r3, r3, #26
 8008ddc:	3301      	adds	r3, #1
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	2101      	movs	r1, #1
 8008de4:	fa01 f303 	lsl.w	r3, r1, r3
 8008de8:	e010      	b.n	8008e0c <HAL_ADC_ConfigChannel+0xc44>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	fa93 f3a3 	rbit	r3, r3
 8008df6:	617b      	str	r3, [r7, #20]
  return result;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	fab3 f383 	clz	r3, r3
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	3301      	adds	r3, #1
 8008e02:	f003 031f 	and.w	r3, r3, #31
 8008e06:	2101      	movs	r1, #1
 8008e08:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0c:	ea42 0103 	orr.w	r1, r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10d      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0xc70>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	0e9b      	lsrs	r3, r3, #26
 8008e22:	3301      	adds	r3, #1
 8008e24:	f003 021f 	and.w	r2, r3, #31
 8008e28:	4613      	mov	r3, r2
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3b1e      	subs	r3, #30
 8008e30:	051b      	lsls	r3, r3, #20
 8008e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e36:	e014      	b.n	8008e62 <HAL_ADC_ConfigChannel+0xc9a>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	fa93 f3a3 	rbit	r3, r3
 8008e44:	60fb      	str	r3, [r7, #12]
  return result;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	fab3 f383 	clz	r3, r3
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f003 021f 	and.w	r2, r3, #31
 8008e54:	4613      	mov	r3, r2
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	4413      	add	r3, r2
 8008e5a:	3b1e      	subs	r3, #30
 8008e5c:	051b      	lsls	r3, r3, #20
 8008e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e62:	430b      	orrs	r3, r1
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	6892      	ldr	r2, [r2, #8]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fd ff6e 	bl	8006d4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b2e      	ldr	r3, [pc, #184]	; (8008f2c <HAL_ADC_ConfigChannel+0xd64>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 80c8 	beq.w	800900c <HAL_ADC_ConfigChannel+0xe44>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e84:	d004      	beq.n	8008e90 <HAL_ADC_ConfigChannel+0xcc8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a29      	ldr	r2, [pc, #164]	; (8008f30 <HAL_ADC_ConfigChannel+0xd68>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d101      	bne.n	8008e94 <HAL_ADC_ConfigChannel+0xccc>
 8008e90:	4b28      	ldr	r3, [pc, #160]	; (8008f34 <HAL_ADC_ConfigChannel+0xd6c>)
 8008e92:	e000      	b.n	8008e96 <HAL_ADC_ConfigChannel+0xcce>
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <HAL_ADC_ConfigChannel+0xd70>)
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fd fe6d 	bl	8006b76 <LL_ADC_GetCommonPathInternalCh>
 8008e9c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a25      	ldr	r2, [pc, #148]	; (8008f3c <HAL_ADC_ConfigChannel+0xd74>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d004      	beq.n	8008eb4 <HAL_ADC_ConfigChannel+0xcec>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <HAL_ADC_ConfigChannel+0xd78>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d14d      	bne.n	8008f50 <HAL_ADC_ConfigChannel+0xd88>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d147      	bne.n	8008f50 <HAL_ADC_ConfigChannel+0xd88>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec8:	d005      	beq.n	8008ed6 <HAL_ADC_ConfigChannel+0xd0e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1d      	ldr	r2, [pc, #116]	; (8008f44 <HAL_ADC_ConfigChannel+0xd7c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	f040 8098 	bne.w	8009006 <HAL_ADC_ConfigChannel+0xe3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ede:	d004      	beq.n	8008eea <HAL_ADC_ConfigChannel+0xd22>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a12      	ldr	r2, [pc, #72]	; (8008f30 <HAL_ADC_ConfigChannel+0xd68>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d101      	bne.n	8008eee <HAL_ADC_ConfigChannel+0xd26>
 8008eea:	4a12      	ldr	r2, [pc, #72]	; (8008f34 <HAL_ADC_ConfigChannel+0xd6c>)
 8008eec:	e000      	b.n	8008ef0 <HAL_ADC_ConfigChannel+0xd28>
 8008eee:	4a12      	ldr	r2, [pc, #72]	; (8008f38 <HAL_ADC_ConfigChannel+0xd70>)
 8008ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f7fd fe28 	bl	8006b50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008f00:	4b11      	ldr	r3, [pc, #68]	; (8008f48 <HAL_ADC_ConfigChannel+0xd80>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <HAL_ADC_ConfigChannel+0xd84>)
 8008f08:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0c:	099a      	lsrs	r2, r3, #6
 8008f0e:	4613      	mov	r3, r2
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f18:	e002      	b.n	8008f20 <HAL_ADC_ConfigChannel+0xd58>
          {
            wait_loop_index--;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f9      	bne.n	8008f1a <HAL_ADC_ConfigChannel+0xd52>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f26:	e06e      	b.n	8009006 <HAL_ADC_ConfigChannel+0xe3e>
 8008f28:	407f0000 	.word	0x407f0000
 8008f2c:	80080000 	.word	0x80080000
 8008f30:	50000100 	.word	0x50000100
 8008f34:	50000300 	.word	0x50000300
 8008f38:	50000700 	.word	0x50000700
 8008f3c:	c3210000 	.word	0xc3210000
 8008f40:	90c00010 	.word	0x90c00010
 8008f44:	50000600 	.word	0x50000600
 8008f48:	200000d0 	.word	0x200000d0
 8008f4c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a32      	ldr	r2, [pc, #200]	; (8009020 <HAL_ADC_ConfigChannel+0xe58>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d125      	bne.n	8008fa6 <HAL_ADC_ConfigChannel+0xdde>
 8008f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11f      	bne.n	8008fa6 <HAL_ADC_ConfigChannel+0xdde>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <HAL_ADC_ConfigChannel+0xe5c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d104      	bne.n	8008f7a <HAL_ADC_ConfigChannel+0xdb2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a2c      	ldr	r2, [pc, #176]	; (8009028 <HAL_ADC_ConfigChannel+0xe60>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d047      	beq.n	800900a <HAL_ADC_ConfigChannel+0xe42>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f82:	d004      	beq.n	8008f8e <HAL_ADC_ConfigChannel+0xdc6>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a26      	ldr	r2, [pc, #152]	; (8009024 <HAL_ADC_ConfigChannel+0xe5c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d101      	bne.n	8008f92 <HAL_ADC_ConfigChannel+0xdca>
 8008f8e:	4a27      	ldr	r2, [pc, #156]	; (800902c <HAL_ADC_ConfigChannel+0xe64>)
 8008f90:	e000      	b.n	8008f94 <HAL_ADC_ConfigChannel+0xdcc>
 8008f92:	4a27      	ldr	r2, [pc, #156]	; (8009030 <HAL_ADC_ConfigChannel+0xe68>)
 8008f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f7fd fdd6 	bl	8006b50 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008fa4:	e031      	b.n	800900a <HAL_ADC_ConfigChannel+0xe42>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a22      	ldr	r2, [pc, #136]	; (8009034 <HAL_ADC_ConfigChannel+0xe6c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d12d      	bne.n	800900c <HAL_ADC_ConfigChannel+0xe44>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d127      	bne.n	800900c <HAL_ADC_ConfigChannel+0xe44>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a18      	ldr	r2, [pc, #96]	; (8009024 <HAL_ADC_ConfigChannel+0xe5c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d022      	beq.n	800900c <HAL_ADC_ConfigChannel+0xe44>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fce:	d004      	beq.n	8008fda <HAL_ADC_ConfigChannel+0xe12>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <HAL_ADC_ConfigChannel+0xe5c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d101      	bne.n	8008fde <HAL_ADC_ConfigChannel+0xe16>
 8008fda:	4a14      	ldr	r2, [pc, #80]	; (800902c <HAL_ADC_ConfigChannel+0xe64>)
 8008fdc:	e000      	b.n	8008fe0 <HAL_ADC_ConfigChannel+0xe18>
 8008fde:	4a14      	ldr	r2, [pc, #80]	; (8009030 <HAL_ADC_ConfigChannel+0xe68>)
 8008fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7fd fdb0 	bl	8006b50 <LL_ADC_SetCommonPathInternalCh>
 8008ff0:	e00c      	b.n	800900c <HAL_ADC_ConfigChannel+0xe44>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff6:	f043 0220 	orr.w	r2, r3, #32
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009004:	e002      	b.n	800900c <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800900a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009014:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009018:	4618      	mov	r0, r3
 800901a:	379c      	adds	r7, #156	; 0x9c
 800901c:	46bd      	mov	sp, r7
 800901e:	bd90      	pop	{r4, r7, pc}
 8009020:	c7520000 	.word	0xc7520000
 8009024:	50000100 	.word	0x50000100
 8009028:	50000500 	.word	0x50000500
 800902c:	50000300 	.word	0x50000300
 8009030:	50000700 	.word	0x50000700
 8009034:	cb840000 	.word	0xcb840000

08009038 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009052:	d018      	beq.n	8009086 <ADC_ConversionStop+0x4e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a66      	ldr	r2, [pc, #408]	; (80091f4 <ADC_ConversionStop+0x1bc>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d013      	beq.n	8009086 <ADC_ConversionStop+0x4e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a65      	ldr	r2, [pc, #404]	; (80091f8 <ADC_ConversionStop+0x1c0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00e      	beq.n	8009086 <ADC_ConversionStop+0x4e>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a63      	ldr	r2, [pc, #396]	; (80091fc <ADC_ConversionStop+0x1c4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d009      	beq.n	8009086 <ADC_ConversionStop+0x4e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a62      	ldr	r2, [pc, #392]	; (8009200 <ADC_ConversionStop+0x1c8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <ADC_ConversionStop+0x4e>
 800907c:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 8009080:	4860      	ldr	r0, [pc, #384]	; (8009204 <ADC_ConversionStop+0x1cc>)
 8009082:	f00f fb94 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d00a      	beq.n	80090a2 <ADC_ConversionStop+0x6a>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d007      	beq.n	80090a2 <ADC_ConversionStop+0x6a>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d004      	beq.n	80090a2 <ADC_ConversionStop+0x6a>
 8009098:	f640 41e1 	movw	r1, #3297	; 0xce1
 800909c:	4859      	ldr	r0, [pc, #356]	; (8009204 <ADC_ConversionStop+0x1cc>)
 800909e:	f00f fb86 	bl	80187ae <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fd ff6e 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 80090ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd ff8f 	bl	8006fd6 <LL_ADC_INJ_IsConversionOngoing>
 80090b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <ADC_ConversionStop+0x90>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 8090 	beq.w	80091e8 <ADC_ConversionStop+0x1b0>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d02a      	beq.n	800912c <ADC_ConversionStop+0xf4>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7f5b      	ldrb	r3, [r3, #29]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d126      	bne.n	800912c <ADC_ConversionStop+0xf4>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7f1b      	ldrb	r3, [r3, #28]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d122      	bne.n	800912c <ADC_ConversionStop+0xf4>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80090e6:	2301      	movs	r3, #1
 80090e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80090ea:	e014      	b.n	8009116 <ADC_ConversionStop+0xde>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4a46      	ldr	r2, [pc, #280]	; (8009208 <ADC_ConversionStop+0x1d0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d90d      	bls.n	8009110 <ADC_ConversionStop+0xd8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f8:	f043 0210 	orr.w	r2, r3, #16
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009104:	f043 0201 	orr.w	r2, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e06c      	b.n	80091ea <ADC_ConversionStop+0x1b2>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	3301      	adds	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d1e3      	bne.n	80090ec <ADC_ConversionStop+0xb4>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2240      	movs	r2, #64	; 0x40
 800912a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d014      	beq.n	800915c <ADC_ConversionStop+0x124>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7fd ff26 	bl	8006f88 <LL_ADC_REG_IsConversionOngoing>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00c      	beq.n	800915c <ADC_ConversionStop+0x124>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd fee3 	bl	8006f12 <LL_ADC_IsDisableOngoing>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d104      	bne.n	800915c <ADC_ConversionStop+0x124>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd ff02 	bl	8006f60 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d014      	beq.n	800918c <ADC_ConversionStop+0x154>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7fd ff35 	bl	8006fd6 <LL_ADC_INJ_IsConversionOngoing>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00c      	beq.n	800918c <ADC_ConversionStop+0x154>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f7fd fecb 	bl	8006f12 <LL_ADC_IsDisableOngoing>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <ADC_ConversionStop+0x154>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7fd ff11 	bl	8006fae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d004      	beq.n	800919c <ADC_ConversionStop+0x164>
 8009192:	2b03      	cmp	r3, #3
 8009194:	d105      	bne.n	80091a2 <ADC_ConversionStop+0x16a>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009196:	230c      	movs	r3, #12
 8009198:	617b      	str	r3, [r7, #20]
        break;
 800919a:	e005      	b.n	80091a8 <ADC_ConversionStop+0x170>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800919c:	2308      	movs	r3, #8
 800919e:	617b      	str	r3, [r7, #20]
        break;
 80091a0:	e002      	b.n	80091a8 <ADC_ConversionStop+0x170>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80091a2:	2304      	movs	r3, #4
 80091a4:	617b      	str	r3, [r7, #20]
        break;
 80091a6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80091a8:	f7fd fc88 	bl	8006abc <HAL_GetTick>
 80091ac:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80091ae:	e014      	b.n	80091da <ADC_ConversionStop+0x1a2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80091b0:	f7fd fc84 	bl	8006abc <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d90d      	bls.n	80091da <ADC_ConversionStop+0x1a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c2:	f043 0210 	orr.w	r2, r3, #16
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ce:	f043 0201 	orr.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e007      	b.n	80091ea <ADC_ConversionStop+0x1b2>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e3      	bne.n	80091b0 <ADC_ConversionStop+0x178>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3720      	adds	r7, #32
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	50000100 	.word	0x50000100
 80091f8:	50000400 	.word	0x50000400
 80091fc:	50000500 	.word	0x50000500
 8009200:	50000600 	.word	0x50000600
 8009204:	0801d9dc 	.word	0x0801d9dc
 8009208:	a33fffff 	.word	0xa33fffff

0800920c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4618      	mov	r0, r3
 800921a:	f7fd fe67 	bl	8006eec <LL_ADC_IsEnabled>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d146      	bne.n	80092b2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	4b24      	ldr	r3, [pc, #144]	; (80092bc <ADC_Enable+0xb0>)
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00d      	beq.n	800924e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	f043 0210 	orr.w	r2, r3, #16
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009242:	f043 0201 	orr.w	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e032      	b.n	80092b4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fd fe22 	bl	8006e9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009258:	f7fd fc30 	bl	8006abc <HAL_GetTick>
 800925c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800925e:	e021      	b.n	80092a4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7fd fe41 	bl	8006eec <LL_ADC_IsEnabled>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7fd fe11 	bl	8006e9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800927a:	f7fd fc1f 	bl	8006abc <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d90d      	bls.n	80092a4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928c:	f043 0210 	orr.w	r2, r3, #16
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009298:	f043 0201 	orr.w	r2, r3, #1
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e007      	b.n	80092b4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d1d6      	bne.n	8009260 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	8000003f 	.word	0x8000003f

080092c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fd fe20 	bl	8006f12 <LL_ADC_IsDisableOngoing>
 80092d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fe07 	bl	8006eec <LL_ADC_IsEnabled>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d040      	beq.n	8009366 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d13d      	bne.n	8009366 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 030d 	and.w	r3, r3, #13
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d10c      	bne.n	8009312 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fd fde1 	bl	8006ec4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2203      	movs	r2, #3
 8009308:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800930a:	f7fd fbd7 	bl	8006abc <HAL_GetTick>
 800930e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009310:	e022      	b.n	8009358 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009316:	f043 0210 	orr.w	r2, r3, #16
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009322:	f043 0201 	orr.w	r2, r3, #1
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e01c      	b.n	8009368 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800932e:	f7fd fbc5 	bl	8006abc <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d90d      	bls.n	8009358 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009340:	f043 0210 	orr.w	r2, r3, #16
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800934c:	f043 0201 	orr.w	r2, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e007      	b.n	8009368 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e3      	bne.n	800932e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009386:	2b00      	cmp	r3, #0
 8009388:	d14b      	bne.n	8009422 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0308 	and.w	r3, r3, #8
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d021      	beq.n	80093e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fd fc92 	bl	8006cd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d032      	beq.n	800941a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d12b      	bne.n	800941a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d11f      	bne.n	800941a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093de:	f043 0201 	orr.w	r2, r3, #1
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80093e6:	e018      	b.n	800941a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d111      	bne.n	800941a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	f043 0201 	orr.w	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7fe feb6 	bl	800818c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009420:	e00e      	b.n	8009440 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7fe fec0 	bl	80081b4 <HAL_ADC_ErrorCallback>
}
 8009434:	e004      	b.n	8009440 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7fe fea2 	bl	80081a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800945c:	bf00      	nop
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009482:	f043 0204 	orr.w	r2, r3, #4
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7fe fe92 	bl	80081b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <LL_ADC_IsEnabled>:
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <LL_ADC_IsEnabled+0x18>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <LL_ADC_IsEnabled+0x1a>
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <LL_ADC_StartCalibration>:
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80094d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80094da:	4313      	orrs	r3, r2
 80094dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <LL_ADC_IsCalibrationOnGoing>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009504:	d101      	bne.n	800950a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8009506:	2301      	movs	r3, #1
 8009508:	e000      	b.n	800950c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <LL_ADC_REG_StartConversion>:
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800952c:	f043 0204 	orr.w	r2, r3, #4
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <LL_ADC_REG_IsConversionOngoing>:
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b04      	cmp	r3, #4
 8009552:	d101      	bne.n	8009558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800957e:	d017      	beq.n	80095b0 <HAL_ADCEx_Calibration_Start+0x48>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a3c      	ldr	r2, [pc, #240]	; (8009678 <HAL_ADCEx_Calibration_Start+0x110>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d012      	beq.n	80095b0 <HAL_ADCEx_Calibration_Start+0x48>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a3b      	ldr	r2, [pc, #236]	; (800967c <HAL_ADCEx_Calibration_Start+0x114>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00d      	beq.n	80095b0 <HAL_ADCEx_Calibration_Start+0x48>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a39      	ldr	r2, [pc, #228]	; (8009680 <HAL_ADCEx_Calibration_Start+0x118>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d008      	beq.n	80095b0 <HAL_ADCEx_Calibration_Start+0x48>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a38      	ldr	r2, [pc, #224]	; (8009684 <HAL_ADCEx_Calibration_Start+0x11c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <HAL_ADCEx_Calibration_Start+0x48>
 80095a8:	218e      	movs	r1, #142	; 0x8e
 80095aa:	4837      	ldr	r0, [pc, #220]	; (8009688 <HAL_ADCEx_Calibration_Start+0x120>)
 80095ac:	f00f f8ff 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b7f      	cmp	r3, #127	; 0x7f
 80095b4:	d007      	beq.n	80095c6 <HAL_ADCEx_Calibration_Start+0x5e>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	4a34      	ldr	r2, [pc, #208]	; (800968c <HAL_ADCEx_Calibration_Start+0x124>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d003      	beq.n	80095c6 <HAL_ADCEx_Calibration_Start+0x5e>
 80095be:	218f      	movs	r1, #143	; 0x8f
 80095c0:	4831      	ldr	r0, [pc, #196]	; (8009688 <HAL_ADCEx_Calibration_Start+0x120>)
 80095c2:	f00f f8f4 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_ADCEx_Calibration_Start+0x6c>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e04d      	b.n	8009670 <HAL_ADCEx_Calibration_Start+0x108>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fe6f 	bl	80092c0 <ADC_Disable>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d136      	bne.n	800965a <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80095f4:	f023 0302 	bic.w	r3, r3, #2
 80095f8:	f043 0202 	orr.w	r2, r3, #2
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ff59 	bl	80094be <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800960c:	e014      	b.n	8009638 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	3301      	adds	r3, #1
 8009612:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <HAL_ADCEx_Calibration_Start+0x128>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d90d      	bls.n	8009638 <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009620:	f023 0312 	bic.w	r3, r3, #18
 8009624:	f043 0210 	orr.w	r2, r3, #16
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e01b      	b.n	8009670 <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff ff57 	bl	80094f0 <LL_ADC_IsCalibrationOnGoing>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e2      	bne.n	800960e <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964c:	f023 0303 	bic.w	r3, r3, #3
 8009650:	f043 0201 	orr.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	65da      	str	r2, [r3, #92]	; 0x5c
 8009658:	e005      	b.n	8009666 <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800965e:	f043 0210 	orr.w	r2, r3, #16
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	50000100 	.word	0x50000100
 800967c:	50000400 	.word	0x50000400
 8009680:	50000500 	.word	0x50000500
 8009684:	50000600 	.word	0x50000600
 8009688:	0801da24 	.word	0x0801da24
 800968c:	407f0000 	.word	0x407f0000
 8009690:	0004de01 	.word	0x0004de01

08009694 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b0a2      	sub	sp, #136	; 0x88
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  ADC_HandleTypeDef tmphadcSlave;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a8:	d009      	beq.n	80096be <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a6e      	ldr	r2, [pc, #440]	; (8009868 <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d004      	beq.n	80096be <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80096b4:	f240 316a 	movw	r1, #874	; 0x36a
 80096b8:	486c      	ldr	r0, [pc, #432]	; (800986c <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80096ba:	f00f f878 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	7f5b      	ldrb	r3, [r3, #29]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	7f5b      	ldrb	r3, [r3, #29]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d004      	beq.n	80096d8 <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80096ce:	f240 316b 	movw	r1, #875	; 0x36b
 80096d2:	4866      	ldr	r0, [pc, #408]	; (800986c <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80096d4:	f00f f86b 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d013      	beq.n	8009708 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e8:	d00e      	beq.n	8009708 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f2:	d009      	beq.n	8009708 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096fc:	d004      	beq.n	8009708 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 80096fe:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8009702:	485a      	ldr	r0, [pc, #360]	; (800986c <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8009704:	f00f f853 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <HAL_ADCEx_MultiModeStart_DMA+0x92>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009718:	2b01      	cmp	r3, #1
 800971a:	d004      	beq.n	8009726 <HAL_ADCEx_MultiModeStart_DMA+0x92>
 800971c:	f240 316d 	movw	r1, #877	; 0x36d
 8009720:	4852      	ldr	r0, [pc, #328]	; (800986c <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8009722:	f00f f844 	bl	80187ae <assert_failed>

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff ff08 	bl	8009540 <LL_ADC_REG_IsConversionOngoing>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <HAL_ADCEx_MultiModeStart_DMA+0xa6>
  {
    return HAL_BUSY;
 8009736:	2302      	movs	r3, #2
 8009738:	e092      	b.n	8009860 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <HAL_ADCEx_MultiModeStart_DMA+0xb4>
 8009744:	2302      	movs	r3, #2
 8009746:	e08b      	b.n	8009860 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009758:	d102      	bne.n	8009760 <HAL_ADCEx_MultiModeStart_DMA+0xcc>
 800975a:	4b45      	ldr	r3, [pc, #276]	; (8009870 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	e009      	b.n	8009774 <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a40      	ldr	r2, [pc, #256]	; (8009868 <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d102      	bne.n	8009770 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
 800976a:	4b42      	ldr	r3, [pc, #264]	; (8009874 <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e001      	b.n	8009774 <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10b      	bne.n	8009792 <HAL_ADCEx_MultiModeStart_DMA+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977e:	f043 0220 	orr.w	r2, r3, #32
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e066      	b.n	8009860 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fd3a 	bl	800920c <ADC_Enable>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 800979e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d107      	bne.n	80097b6 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80097a6:	f107 0314 	add.w	r3, r7, #20
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fd2e 	bl	800920c <ADC_Enable>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80097b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d14a      	bne.n	8009854 <HAL_ADCEx_MultiModeStart_DMA+0x1c0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097c6:	f023 0301 	bic.w	r3, r3, #1
 80097ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097dc:	4a26      	ldr	r2, [pc, #152]	; (8009878 <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	4a25      	ldr	r2, [pc, #148]	; (800987c <HAL_ADCEx_MultiModeStart_DMA+0x1e8>)
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ec:	4a24      	ldr	r2, [pc, #144]	; (8009880 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>)
 80097ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f8:	d004      	beq.n	8009804 <HAL_ADCEx_MultiModeStart_DMA+0x170>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a1c      	ldr	r2, [pc, #112]	; (8009870 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d101      	bne.n	8009808 <HAL_ADCEx_MultiModeStart_DMA+0x174>
 8009804:	4b1f      	ldr	r3, [pc, #124]	; (8009884 <HAL_ADCEx_MultiModeStart_DMA+0x1f0>)
 8009806:	e000      	b.n	800980a <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8009808:	4b1f      	ldr	r3, [pc, #124]	; (8009888 <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 800980a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	221c      	movs	r2, #28
 8009814:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0210 	orr.w	r2, r2, #16
 800982c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009836:	330c      	adds	r3, #12
 8009838:	4619      	mov	r1, r3
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f001 fd67 	bl	800b310 <HAL_DMA_Start_IT>
 8009842:	4603      	mov	r3, r0
 8009844:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f7ff fe63 	bl	8009518 <LL_ADC_REG_StartConversion>
 8009852:	e003      	b.n	800985c <HAL_ADCEx_MultiModeStart_DMA+0x1c8>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800985c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8009860:	4618      	mov	r0, r3
 8009862:	3788      	adds	r7, #136	; 0x88
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	50000400 	.word	0x50000400
 800986c:	0801da24 	.word	0x0801da24
 8009870:	50000100 	.word	0x50000100
 8009874:	50000500 	.word	0x50000500
 8009878:	08009371 	.word	0x08009371
 800987c:	08009449 	.word	0x08009449
 8009880:	08009465 	.word	0x08009465
 8009884:	50000300 	.word	0x50000300
 8009888:	50000700 	.word	0x50000700

0800988c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b0a1      	sub	sp, #132	; 0x84
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098a4:	d009      	beq.n	80098ba <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4aa0      	ldr	r2, [pc, #640]	; (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80098b0:	f640 0127 	movw	r1, #2087	; 0x827
 80098b4:	489e      	ldr	r0, [pc, #632]	; (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80098b6:	f00e ff7a 	bl	80187ae <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d020      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d01c      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d018      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d014      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d010      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d00c      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b07      	cmp	r3, #7
 80098f0:	d008      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d004      	beq.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098fa:	f640 0128 	movw	r1, #2088	; 0x828
 80098fe:	488c      	ldr	r0, [pc, #560]	; (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8009900:	f00e ff55 	bl	80187ae <assert_failed>
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d052      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00e      	beq.n	8009932 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800991c:	d009      	beq.n	8009932 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009926:	d004      	beq.n	8009932 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009928:	f640 012b 	movw	r1, #2091	; 0x82b
 800992c:	4880      	ldr	r0, [pc, #512]	; (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 800992e:	f00e ff3e 	bl	80187ae <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d03b      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009942:	d036      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994c:	d031      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009956:	d02c      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009960:	d027      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800996a:	d022      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009974:	d01d      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800997e:	d018      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009988:	d013      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8009992:	d00e      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800999c:	d009      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80099a6:	d004      	beq.n	80099b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099a8:	f640 012c 	movw	r1, #2092	; 0x82c
 80099ac:	4860      	ldr	r0, [pc, #384]	; (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80099ae:	f00e fefe 	bl	80187ae <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d101      	bne.n	80099c0 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 80099bc:	2302      	movs	r3, #2
 80099be:	e0f2      	b.n	8009ba6 <HAL_ADCEx_MultiModeConfigChannel+0x31a>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099d0:	d102      	bne.n	80099d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80099d2:	4b58      	ldr	r3, [pc, #352]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 80099d4:	60bb      	str	r3, [r7, #8]
 80099d6:	e009      	b.n	80099ec <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a53      	ldr	r2, [pc, #332]	; (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d102      	bne.n	80099e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80099e2:	4b55      	ldr	r3, [pc, #340]	; (8009b38 <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	e001      	b.n	80099ec <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80099e8:	2300      	movs	r3, #0
 80099ea:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f6:	f043 0220 	orr.w	r2, r3, #32
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e0cd      	b.n	8009ba6 <HAL_ADCEx_MultiModeConfigChannel+0x31a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff fd97 	bl	8009540 <LL_ADC_REG_IsConversionOngoing>
 8009a12:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fd91 	bl	8009540 <LL_ADC_REG_IsConversionOngoing>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f040 80af 	bne.w	8009b84 <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f040 80ab 	bne.w	8009b84 <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a36:	d004      	beq.n	8009a42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a3d      	ldr	r2, [pc, #244]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d101      	bne.n	8009a46 <HAL_ADCEx_MultiModeConfigChannel+0x1ba>
 8009a42:	4b3e      	ldr	r3, [pc, #248]	; (8009b3c <HAL_ADCEx_MultiModeConfigChannel+0x2b0>)
 8009a44:	e000      	b.n	8009a48 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>
 8009a46:	4b3e      	ldr	r3, [pc, #248]	; (8009b40 <HAL_ADCEx_MultiModeConfigChannel+0x2b4>)
 8009a48:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04b      	beq.n	8009aea <HAL_ADCEx_MultiModeConfigChannel+0x25e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6859      	ldr	r1, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a64:	035b      	lsls	r3, r3, #13
 8009a66:	430b      	orrs	r3, r1
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a76:	d004      	beq.n	8009a82 <HAL_ADCEx_MultiModeConfigChannel+0x1f6>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a2d      	ldr	r2, [pc, #180]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d10f      	bne.n	8009aa2 <HAL_ADCEx_MultiModeConfigChannel+0x216>
 8009a82:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009a86:	f7ff fd07 	bl	8009498 <LL_ADC_IsEnabled>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4829      	ldr	r0, [pc, #164]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009a8e:	f7ff fd03 	bl	8009498 <LL_ADC_IsEnabled>
 8009a92:	4603      	mov	r3, r0
 8009a94:	4323      	orrs	r3, r4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bf0c      	ite	eq
 8009a9a:	2301      	moveq	r3, #1
 8009a9c:	2300      	movne	r3, #0
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	e012      	b.n	8009ac8 <HAL_ADCEx_MultiModeConfigChannel+0x23c>
 8009aa2:	4822      	ldr	r0, [pc, #136]	; (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8009aa4:	f7ff fcf8 	bl	8009498 <LL_ADC_IsEnabled>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	4823      	ldr	r0, [pc, #140]	; (8009b38 <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 8009aac:	f7ff fcf4 	bl	8009498 <LL_ADC_IsEnabled>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	431c      	orrs	r4, r3
 8009ab4:	4823      	ldr	r0, [pc, #140]	; (8009b44 <HAL_ADCEx_MultiModeConfigChannel+0x2b8>)
 8009ab6:	f7ff fcef 	bl	8009498 <LL_ADC_IsEnabled>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4323      	orrs	r3, r4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bf0c      	ite	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	2300      	movne	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d065      	beq.n	8009b98 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009ad4:	f023 030f 	bic.w	r3, r3, #15
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	6811      	ldr	r1, [r2, #0]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	6892      	ldr	r2, [r2, #8]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009ae8:	e056      	b.n	8009b98 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009af4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009afe:	d004      	beq.n	8009b0a <HAL_ADCEx_MultiModeConfigChannel+0x27e>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a0b      	ldr	r2, [pc, #44]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d11e      	bne.n	8009b48 <HAL_ADCEx_MultiModeConfigChannel+0x2bc>
 8009b0a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009b0e:	f7ff fcc3 	bl	8009498 <LL_ADC_IsEnabled>
 8009b12:	4604      	mov	r4, r0
 8009b14:	4807      	ldr	r0, [pc, #28]	; (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009b16:	f7ff fcbf 	bl	8009498 <LL_ADC_IsEnabled>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4323      	orrs	r3, r4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bf0c      	ite	eq
 8009b22:	2301      	moveq	r3, #1
 8009b24:	2300      	movne	r3, #0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	e021      	b.n	8009b6e <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 8009b2a:	bf00      	nop
 8009b2c:	50000400 	.word	0x50000400
 8009b30:	0801da24 	.word	0x0801da24
 8009b34:	50000100 	.word	0x50000100
 8009b38:	50000500 	.word	0x50000500
 8009b3c:	50000300 	.word	0x50000300
 8009b40:	50000700 	.word	0x50000700
 8009b44:	50000600 	.word	0x50000600
 8009b48:	4819      	ldr	r0, [pc, #100]	; (8009bb0 <HAL_ADCEx_MultiModeConfigChannel+0x324>)
 8009b4a:	f7ff fca5 	bl	8009498 <LL_ADC_IsEnabled>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4818      	ldr	r0, [pc, #96]	; (8009bb4 <HAL_ADCEx_MultiModeConfigChannel+0x328>)
 8009b52:	f7ff fca1 	bl	8009498 <LL_ADC_IsEnabled>
 8009b56:	4603      	mov	r3, r0
 8009b58:	431c      	orrs	r4, r3
 8009b5a:	4817      	ldr	r0, [pc, #92]	; (8009bb8 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8009b5c:	f7ff fc9c 	bl	8009498 <LL_ADC_IsEnabled>
 8009b60:	4603      	mov	r3, r0
 8009b62:	4323      	orrs	r3, r4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf0c      	ite	eq
 8009b68:	2301      	moveq	r3, #1
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d012      	beq.n	8009b98 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009b7a:	f023 030f 	bic.w	r3, r3, #15
 8009b7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009b82:	e009      	b.n	8009b98 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b88:	f043 0220 	orr.w	r2, r3, #32
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009b96:	e000      	b.n	8009b9a <HAL_ADCEx_MultiModeConfigChannel+0x30e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009ba2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3784      	adds	r7, #132	; 0x84
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd90      	pop	{r4, r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	50000400 	.word	0x50000400
 8009bb4:	50000500 	.word	0x50000500
 8009bb8:	50000600 	.word	0x50000600

08009bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bcc:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <__NVIC_SetPriorityGrouping+0x44>)
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009bd8:	4013      	ands	r3, r2
 8009bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009bee:	4a04      	ldr	r2, [pc, #16]	; (8009c00 <__NVIC_SetPriorityGrouping+0x44>)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	60d3      	str	r3, [r2, #12]
}
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	e000ed00 	.word	0xe000ed00

08009c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c08:	4b04      	ldr	r3, [pc, #16]	; (8009c1c <__NVIC_GetPriorityGrouping+0x18>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	0a1b      	lsrs	r3, r3, #8
 8009c0e:	f003 0307 	and.w	r3, r3, #7
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	e000ed00 	.word	0xe000ed00

08009c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	db0b      	blt.n	8009c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	f003 021f 	and.w	r2, r3, #31
 8009c38:	4907      	ldr	r1, [pc, #28]	; (8009c58 <__NVIC_EnableIRQ+0x38>)
 8009c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c3e:	095b      	lsrs	r3, r3, #5
 8009c40:	2001      	movs	r0, #1
 8009c42:	fa00 f202 	lsl.w	r2, r0, r2
 8009c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	e000e100 	.word	0xe000e100

08009c5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	db10      	blt.n	8009c90 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f003 021f 	and.w	r2, r3, #31
 8009c74:	4909      	ldr	r1, [pc, #36]	; (8009c9c <__NVIC_DisableIRQ+0x40>)
 8009c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8009c82:	3320      	adds	r3, #32
 8009c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c8c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	e000e100 	.word	0xe000e100

08009ca0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	db0c      	blt.n	8009ccc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	f003 021f 	and.w	r2, r3, #31
 8009cb8:	4907      	ldr	r1, [pc, #28]	; (8009cd8 <__NVIC_ClearPendingIRQ+0x38>)
 8009cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cbe:	095b      	lsrs	r3, r3, #5
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8009cc6:	3360      	adds	r3, #96	; 0x60
 8009cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	e000e100 	.word	0xe000e100

08009cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	db0a      	blt.n	8009d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	490c      	ldr	r1, [pc, #48]	; (8009d28 <__NVIC_SetPriority+0x4c>)
 8009cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfa:	0112      	lsls	r2, r2, #4
 8009cfc:	b2d2      	uxtb	r2, r2
 8009cfe:	440b      	add	r3, r1
 8009d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d04:	e00a      	b.n	8009d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	4908      	ldr	r1, [pc, #32]	; (8009d2c <__NVIC_SetPriority+0x50>)
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	3b04      	subs	r3, #4
 8009d14:	0112      	lsls	r2, r2, #4
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	440b      	add	r3, r1
 8009d1a:	761a      	strb	r2, [r3, #24]
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	e000e100 	.word	0xe000e100
 8009d2c:	e000ed00 	.word	0xe000ed00

08009d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f1c3 0307 	rsb	r3, r3, #7
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	bf28      	it	cs
 8009d4e:	2304      	movcs	r3, #4
 8009d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	3304      	adds	r3, #4
 8009d56:	2b06      	cmp	r3, #6
 8009d58:	d902      	bls.n	8009d60 <NVIC_EncodePriority+0x30>
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	3b03      	subs	r3, #3
 8009d5e:	e000      	b.n	8009d62 <NVIC_EncodePriority+0x32>
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6e:	43da      	mvns	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	401a      	ands	r2, r3
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d78:	f04f 31ff 	mov.w	r1, #4294967295
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d82:	43d9      	mvns	r1, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d88:	4313      	orrs	r3, r2
         );
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3724      	adds	r7, #36	; 0x24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b07      	cmp	r3, #7
 8009da4:	d00f      	beq.n	8009dc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b06      	cmp	r3, #6
 8009daa:	d00c      	beq.n	8009dc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d009      	beq.n	8009dc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d006      	beq.n	8009dc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d003      	beq.n	8009dc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009dbe:	21a7      	movs	r1, #167	; 0xa7
 8009dc0:	4804      	ldr	r0, [pc, #16]	; (8009dd4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009dc2:	f00e fcf4 	bl	80187ae <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff fef8 	bl	8009bbc <__NVIC_SetPriorityGrouping>
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	0801da70 	.word	0x0801da70

08009dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b0f      	cmp	r3, #15
 8009dea:	d903      	bls.n	8009df4 <HAL_NVIC_SetPriority+0x1c>
 8009dec:	21bf      	movs	r1, #191	; 0xbf
 8009dee:	480e      	ldr	r0, [pc, #56]	; (8009e28 <HAL_NVIC_SetPriority+0x50>)
 8009df0:	f00e fcdd 	bl	80187ae <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d903      	bls.n	8009e02 <HAL_NVIC_SetPriority+0x2a>
 8009dfa:	21c0      	movs	r1, #192	; 0xc0
 8009dfc:	480a      	ldr	r0, [pc, #40]	; (8009e28 <HAL_NVIC_SetPriority+0x50>)
 8009dfe:	f00e fcd6 	bl	80187ae <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8009e02:	f7ff feff 	bl	8009c04 <__NVIC_GetPriorityGrouping>
 8009e06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f7ff ff8f 	bl	8009d30 <NVIC_EncodePriority>
 8009e12:	4602      	mov	r2, r0
 8009e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ff5e 	bl	8009cdc <__NVIC_SetPriority>
}
 8009e20:	bf00      	nop
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	0801da70 	.word	0x0801da70

08009e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da03      	bge.n	8009e46 <HAL_NVIC_EnableIRQ+0x1a>
 8009e3e:	21d3      	movs	r1, #211	; 0xd3
 8009e40:	4805      	ldr	r0, [pc, #20]	; (8009e58 <HAL_NVIC_EnableIRQ+0x2c>)
 8009e42:	f00e fcb4 	bl	80187ae <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fee8 	bl	8009c20 <__NVIC_EnableIRQ>
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	0801da70 	.word	0x0801da70

08009e5c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da03      	bge.n	8009e76 <HAL_NVIC_DisableIRQ+0x1a>
 8009e6e:	21e3      	movs	r1, #227	; 0xe3
 8009e70:	4805      	ldr	r0, [pc, #20]	; (8009e88 <HAL_NVIC_DisableIRQ+0x2c>)
 8009e72:	f00e fc9c 	bl	80187ae <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff feee 	bl	8009c5c <__NVIC_DisableIRQ>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	0801da70 	.word	0x0801da70

08009e8c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da04      	bge.n	8009ea8 <HAL_NVIC_ClearPendingIRQ+0x1c>
 8009e9e:	f240 1165 	movw	r1, #357	; 0x165
 8009ea2:	4806      	ldr	r0, [pc, #24]	; (8009ebc <HAL_NVIC_ClearPendingIRQ+0x30>)
 8009ea4:	f00e fc83 	bl	80187ae <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff fef7 	bl	8009ca0 <__NVIC_ClearPendingIRQ>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0801da70 	.word	0x0801da70

08009ec0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e02d      	b.n	8009f2e <HAL_DAC_Init+0x6e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a18      	ldr	r2, [pc, #96]	; (8009f38 <HAL_DAC_Init+0x78>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <HAL_DAC_Init+0x44>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a16      	ldr	r2, [pc, #88]	; (8009f3c <HAL_DAC_Init+0x7c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00e      	beq.n	8009f04 <HAL_DAC_Init+0x44>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <HAL_DAC_Init+0x80>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d009      	beq.n	8009f04 <HAL_DAC_Init+0x44>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a13      	ldr	r2, [pc, #76]	; (8009f44 <HAL_DAC_Init+0x84>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_DAC_Init+0x44>
 8009efa:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8009efe:	4812      	ldr	r0, [pc, #72]	; (8009f48 <HAL_DAC_Init+0x88>)
 8009f00:	f00e fc55 	bl	80187ae <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	791b      	ldrb	r3, [r3, #4]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <HAL_DAC_Init+0x5a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f00e f9b1 	bl	801827c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	50000800 	.word	0x50000800
 8009f3c:	50000c00 	.word	0x50000c00
 8009f40:	50001000 	.word	0x50001000
 8009f44:	50001400 	.word	0x50001400
 8009f48:	0801dabc 	.word	0x0801dabc

08009f4c <HAL_DAC_Stop>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a1b      	ldr	r2, [pc, #108]	; (8009fc8 <HAL_DAC_Stop+0x7c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d106      	bne.n	8009f6e <HAL_DAC_Stop+0x22>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf0c      	ite	eq
 8009f66:	2301      	moveq	r3, #1
 8009f68:	2300      	movne	r3, #0
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	e00b      	b.n	8009f86 <HAL_DAC_Stop+0x3a>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <HAL_DAC_Stop+0x2e>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d101      	bne.n	8009f7e <HAL_DAC_Stop+0x32>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e000      	b.n	8009f80 <HAL_DAC_Stop+0x34>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d104      	bne.n	8009f94 <HAL_DAC_Stop+0x48>
 8009f8a:	f240 217e 	movw	r1, #638	; 0x27e
 8009f8e:	480f      	ldr	r0, [pc, #60]	; (8009fcc <HAL_DAC_Stop+0x80>)
 8009f90:	f00e fc0d 	bl	80187ae <assert_failed>

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa6:	43da      	mvns	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	400a      	ands	r2, r1
 8009fae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7fc fd8f 	bl	8006ad4 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	50000c00 	.word	0x50000c00
 8009fcc:	0801dabc 	.word	0x0801dabc

08009fd0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a6b      	ldr	r2, [pc, #428]	; (800a194 <HAL_DAC_Start_DMA+0x1c4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d106      	bne.n	8009ffa <HAL_DAC_Start_DMA+0x2a>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bf0c      	ite	eq
 8009ff2:	2301      	moveq	r3, #1
 8009ff4:	2300      	movne	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e00b      	b.n	800a012 <HAL_DAC_Start_DMA+0x42>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <HAL_DAC_Start_DMA+0x36>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b10      	cmp	r3, #16
 800a004:	d101      	bne.n	800a00a <HAL_DAC_Start_DMA+0x3a>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <HAL_DAC_Start_DMA+0x3c>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d104      	bne.n	800a020 <HAL_DAC_Start_DMA+0x50>
 800a016:	f240 21a7 	movw	r1, #679	; 0x2a7
 800a01a:	485f      	ldr	r0, [pc, #380]	; (800a198 <HAL_DAC_Start_DMA+0x1c8>)
 800a01c:	f00e fbc7 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <HAL_DAC_Start_DMA+0x6c>
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	2b04      	cmp	r3, #4
 800a02a:	d007      	beq.n	800a03c <HAL_DAC_Start_DMA+0x6c>
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d004      	beq.n	800a03c <HAL_DAC_Start_DMA+0x6c>
 800a032:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800a036:	4858      	ldr	r0, [pc, #352]	; (800a198 <HAL_DAC_Start_DMA+0x1c8>)
 800a038:	f00e fbb9 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	795b      	ldrb	r3, [r3, #5]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_DAC_Start_DMA+0x78>
 800a044:	2302      	movs	r3, #2
 800a046:	e0a1      	b.n	800a18c <HAL_DAC_Start_DMA+0x1bc>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2202      	movs	r2, #2
 800a052:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d12a      	bne.n	800a0b0 <HAL_DAC_Start_DMA+0xe0>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	4a4f      	ldr	r2, [pc, #316]	; (800a19c <HAL_DAC_Start_DMA+0x1cc>)
 800a060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	4a4e      	ldr	r2, [pc, #312]	; (800a1a0 <HAL_DAC_Start_DMA+0x1d0>)
 800a068:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4a4d      	ldr	r2, [pc, #308]	; (800a1a4 <HAL_DAC_Start_DMA+0x1d4>)
 800a070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a080:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	2b04      	cmp	r3, #4
 800a086:	d009      	beq.n	800a09c <HAL_DAC_Start_DMA+0xcc>
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d00c      	beq.n	800a0a6 <HAL_DAC_Start_DMA+0xd6>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d000      	beq.n	800a092 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a090:	e039      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	613b      	str	r3, [r7, #16]
        break;
 800a09a:	e034      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	613b      	str	r3, [r7, #16]
        break;
 800a0a4:	e02f      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3310      	adds	r3, #16
 800a0ac:	613b      	str	r3, [r7, #16]
        break;
 800a0ae:	e02a      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <HAL_DAC_Start_DMA+0x1d8>)
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	4a3b      	ldr	r2, [pc, #236]	; (800a1ac <HAL_DAC_Start_DMA+0x1dc>)
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a3a      	ldr	r2, [pc, #232]	; (800a1b0 <HAL_DAC_Start_DMA+0x1e0>)
 800a0c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a0d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d009      	beq.n	800a0f2 <HAL_DAC_Start_DMA+0x122>
 800a0de:	2b08      	cmp	r3, #8
 800a0e0:	d00c      	beq.n	800a0fc <HAL_DAC_Start_DMA+0x12c>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d000      	beq.n	800a0e8 <HAL_DAC_Start_DMA+0x118>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a0e6:	e00e      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3314      	adds	r3, #20
 800a0ee:	613b      	str	r3, [r7, #16]
        break;
 800a0f0:	e009      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3318      	adds	r3, #24
 800a0f8:	613b      	str	r3, [r7, #16]
        break;
 800a0fa:	e004      	b.n	800a106 <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	331c      	adds	r3, #28
 800a102:	613b      	str	r3, [r7, #16]
        break;
 800a104:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d111      	bne.n	800a130 <HAL_DAC_Start_DMA+0x160>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a11a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6898      	ldr	r0, [r3, #8]
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	f001 f8f3 	bl	800b310 <HAL_DMA_Start_IT>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
 800a12e:	e010      	b.n	800a152 <HAL_DAC_Start_DMA+0x182>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a13e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	68d8      	ldr	r0, [r3, #12]
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	f001 f8e1 	bl	800b310 <HAL_DMA_Start_IT>
 800a14e:	4603      	mov	r3, r0
 800a150:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10f      	bne.n	800a17e <HAL_DAC_Start_DMA+0x1ae>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6819      	ldr	r1, [r3, #0]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	2201      	movs	r2, #1
 800a16c:	409a      	lsls	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a176:	2001      	movs	r0, #1
 800a178:	f7fc fcac 	bl	8006ad4 <HAL_Delay>
 800a17c:	e005      	b.n	800a18a <HAL_DAC_Start_DMA+0x1ba>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f043 0204 	orr.w	r2, r3, #4
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	50000c00 	.word	0x50000c00
 800a198:	0801dabc 	.word	0x0801dabc
 800a19c:	0800a99d 	.word	0x0800a99d
 800a1a0:	0800a9bf 	.word	0x0800a9bf
 800a1a4:	0800a9db 	.word	0x0800a9db
 800a1a8:	0800acb9 	.word	0x0800acb9
 800a1ac:	0800acdb 	.word	0x0800acdb
 800a1b0:	0800acf7 	.word	0x0800acf7

0800a1b4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a37      	ldr	r2, [pc, #220]	; (800a2a0 <HAL_DAC_Stop_DMA+0xec>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d106      	bne.n	800a1d6 <HAL_DAC_Stop_DMA+0x22>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	e00b      	b.n	800a1ee <HAL_DAC_Stop_DMA+0x3a>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <HAL_DAC_Stop_DMA+0x2e>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b10      	cmp	r3, #16
 800a1e0:	d101      	bne.n	800a1e6 <HAL_DAC_Stop_DMA+0x32>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e000      	b.n	800a1e8 <HAL_DAC_Stop_DMA+0x34>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d104      	bne.n	800a1fc <HAL_DAC_Stop_DMA+0x48>
 800a1f2:	f240 312a 	movw	r1, #810	; 0x32a
 800a1f6:	482b      	ldr	r0, [pc, #172]	; (800a2a4 <HAL_DAC_Stop_DMA+0xf0>)
 800a1f8:	f00e fad9 	bl	80187ae <assert_failed>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6819      	ldr	r1, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a20c:	fa02 f303 	lsl.w	r3, r2, r3
 800a210:	43da      	mvns	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	400a      	ands	r2, r1
 800a218:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f003 0310 	and.w	r3, r3, #16
 800a226:	2201      	movs	r2, #1
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	43da      	mvns	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	400a      	ands	r2, r1
 800a234:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a236:	2001      	movs	r0, #1
 800a238:	f7fc fc4c 	bl	8006ad4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10f      	bne.n	800a262 <HAL_DAC_Stop_DMA+0xae>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f001 f8ec 	bl	800b424 <HAL_DMA_Abort>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e00e      	b.n	800a280 <HAL_DAC_Stop_DMA+0xcc>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	4618      	mov	r0, r3
 800a268:	f001 f8dc 	bl	800b424 <HAL_DMA_Abort>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a27e:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_DAC_Stop_DMA+0xda>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2204      	movs	r2, #4
 800a28a:	711a      	strb	r2, [r3, #4]
 800a28c:	e002      	b.n	800a294 <HAL_DAC_Stop_DMA+0xe0>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	50000c00 	.word	0x50000c00
 800a2a4:	0801dabc 	.word	0x0801dabc

0800a2a8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08a      	sub	sp, #40	; 0x28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d012      	beq.n	800a322 <HAL_DAC_ConfigChannel+0x3e>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a304:	d00d      	beq.n	800a322 <HAL_DAC_ConfigChannel+0x3e>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30e:	d008      	beq.n	800a322 <HAL_DAC_ConfigChannel+0x3e>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d004      	beq.n	800a322 <HAL_DAC_ConfigChannel+0x3e>
 800a318:	f240 4154 	movw	r1, #1108	; 0x454
 800a31c:	4892      	ldr	r0, [pc, #584]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a31e:	f00e fa46 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d070      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d06c      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	2b0a      	cmp	r3, #10
 800a338:	d068      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b0e      	cmp	r3, #14
 800a340:	d064      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2b12      	cmp	r3, #18
 800a348:	d060      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	2b16      	cmp	r3, #22
 800a350:	d05c      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b1a      	cmp	r3, #26
 800a358:	d058      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	2b1e      	cmp	r3, #30
 800a360:	d054      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2b22      	cmp	r3, #34	; 0x22
 800a368:	d050      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b26      	cmp	r3, #38	; 0x26
 800a370:	d04c      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2b2a      	cmp	r3, #42	; 0x2a
 800a378:	d048      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	2b2e      	cmp	r3, #46	; 0x2e
 800a380:	d044      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	2b32      	cmp	r3, #50	; 0x32
 800a388:	d040      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	2b36      	cmp	r3, #54	; 0x36
 800a390:	d03c      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	2b3a      	cmp	r3, #58	; 0x3a
 800a398:	d038      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a73      	ldr	r2, [pc, #460]	; (800a56c <HAL_DAC_ConfigChannel+0x288>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d107      	bne.n	800a3b4 <HAL_DAC_ConfigChannel+0xd0>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	2b06      	cmp	r3, #6
 800a3aa:	d02f      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a3b2:	d02b      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a6d      	ldr	r2, [pc, #436]	; (800a570 <HAL_DAC_ConfigChannel+0x28c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d107      	bne.n	800a3ce <HAL_DAC_ConfigChannel+0xea>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b06      	cmp	r3, #6
 800a3c4:	d022      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	2b3e      	cmp	r3, #62	; 0x3e
 800a3cc:	d01e      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a68      	ldr	r2, [pc, #416]	; (800a574 <HAL_DAC_ConfigChannel+0x290>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d107      	bne.n	800a3e8 <HAL_DAC_ConfigChannel+0x104>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2b06      	cmp	r3, #6
 800a3de:	d015      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b3e      	cmp	r3, #62	; 0x3e
 800a3e6:	d011      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a62      	ldr	r2, [pc, #392]	; (800a578 <HAL_DAC_ConfigChannel+0x294>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d107      	bne.n	800a402 <HAL_DAC_ConfigChannel+0x11e>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	2b06      	cmp	r3, #6
 800a3f8:	d008      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a400:	d004      	beq.n	800a40c <HAL_DAC_ConfigChannel+0x128>
 800a402:	f240 4155 	movw	r1, #1109	; 0x455
 800a406:	4858      	ldr	r0, [pc, #352]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a408:	f00e f9d1 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger2));
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d070      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d06c      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b0a      	cmp	r3, #10
 800a422:	d068      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b0e      	cmp	r3, #14
 800a42a:	d064      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b12      	cmp	r3, #18
 800a432:	d060      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b16      	cmp	r3, #22
 800a43a:	d05c      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	2b1a      	cmp	r3, #26
 800a442:	d058      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b1e      	cmp	r3, #30
 800a44a:	d054      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b22      	cmp	r3, #34	; 0x22
 800a452:	d050      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b26      	cmp	r3, #38	; 0x26
 800a45a:	d04c      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b2a      	cmp	r3, #42	; 0x2a
 800a462:	d048      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b2e      	cmp	r3, #46	; 0x2e
 800a46a:	d044      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b32      	cmp	r3, #50	; 0x32
 800a472:	d040      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b36      	cmp	r3, #54	; 0x36
 800a47a:	d03c      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b3a      	cmp	r3, #58	; 0x3a
 800a482:	d038      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a38      	ldr	r2, [pc, #224]	; (800a56c <HAL_DAC_ConfigChannel+0x288>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d107      	bne.n	800a49e <HAL_DAC_ConfigChannel+0x1ba>
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b06      	cmp	r3, #6
 800a494:	d02f      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b3e      	cmp	r3, #62	; 0x3e
 800a49c:	d02b      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a33      	ldr	r2, [pc, #204]	; (800a570 <HAL_DAC_ConfigChannel+0x28c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d107      	bne.n	800a4b8 <HAL_DAC_ConfigChannel+0x1d4>
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b06      	cmp	r3, #6
 800a4ae:	d022      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	2b3e      	cmp	r3, #62	; 0x3e
 800a4b6:	d01e      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a2d      	ldr	r2, [pc, #180]	; (800a574 <HAL_DAC_ConfigChannel+0x290>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d107      	bne.n	800a4d2 <HAL_DAC_ConfigChannel+0x1ee>
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b06      	cmp	r3, #6
 800a4c8:	d015      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b3e      	cmp	r3, #62	; 0x3e
 800a4d0:	d011      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a28      	ldr	r2, [pc, #160]	; (800a578 <HAL_DAC_ConfigChannel+0x294>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d107      	bne.n	800a4ec <HAL_DAC_ConfigChannel+0x208>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b06      	cmp	r3, #6
 800a4e2:	d008      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a4ea:	d004      	beq.n	800a4f6 <HAL_DAC_ConfigChannel+0x212>
 800a4ec:	f240 4156 	movw	r1, #1110	; 0x456
 800a4f0:	481d      	ldr	r0, [pc, #116]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a4f2:	f00e f95c 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <HAL_DAC_ConfigChannel+0x22c>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d004      	beq.n	800a510 <HAL_DAC_ConfigChannel+0x22c>
 800a506:	f240 4157 	movw	r1, #1111	; 0x457
 800a50a:	4817      	ldr	r0, [pc, #92]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a50c:	f00e f94f 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d00c      	beq.n	800a532 <HAL_DAC_ConfigChannel+0x24e>
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d008      	beq.n	800a532 <HAL_DAC_ConfigChannel+0x24e>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	2b04      	cmp	r3, #4
 800a526:	d004      	beq.n	800a532 <HAL_DAC_ConfigChannel+0x24e>
 800a528:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800a52c:	480e      	ldr	r0, [pc, #56]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a52e:	f00e f93e 	bl	80187ae <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d008      	beq.n	800a54c <HAL_DAC_ConfigChannel+0x268>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d004      	beq.n	800a54c <HAL_DAC_ConfigChannel+0x268>
 800a542:	f240 4159 	movw	r1, #1113	; 0x459
 800a546:	4808      	ldr	r0, [pc, #32]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a548:	f00e f931 	bl	80187ae <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d113      	bne.n	800a57c <HAL_DAC_ConfigChannel+0x298>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	2b1f      	cmp	r3, #31
 800a55a:	d90f      	bls.n	800a57c <HAL_DAC_ConfigChannel+0x298>
 800a55c:	f240 415c 	movw	r1, #1116	; 0x45c
 800a560:	4801      	ldr	r0, [pc, #4]	; (800a568 <HAL_DAC_ConfigChannel+0x284>)
 800a562:	f00e f924 	bl	80187ae <assert_failed>
 800a566:	e009      	b.n	800a57c <HAL_DAC_ConfigChannel+0x298>
 800a568:	0801dabc 	.word	0x0801dabc
 800a56c:	50000800 	.word	0x50000800
 800a570:	50000c00 	.word	0x50000c00
 800a574:	50001000 	.word	0x50001000
 800a578:	50001400 	.word	0x50001400
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <HAL_DAC_ConfigChannel+0x2b2>
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d004      	beq.n	800a596 <HAL_DAC_ConfigChannel+0x2b2>
 800a58c:	f240 415e 	movw	r1, #1118	; 0x45e
 800a590:	48a3      	ldr	r0, [pc, #652]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a592:	f00e f90c 	bl	80187ae <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d11c      	bne.n	800a5d8 <HAL_DAC_ConfigChannel+0x2f4>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a6:	d304      	bcc.n	800a5b2 <HAL_DAC_ConfigChannel+0x2ce>
 800a5a8:	f240 4161 	movw	r1, #1121	; 0x461
 800a5ac:	489c      	ldr	r0, [pc, #624]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a5ae:	f00e f8fe 	bl	80187ae <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ba:	d304      	bcc.n	800a5c6 <HAL_DAC_ConfigChannel+0x2e2>
 800a5bc:	f240 4162 	movw	r1, #1122	; 0x462
 800a5c0:	4897      	ldr	r0, [pc, #604]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a5c2:	f00e f8f4 	bl	80187ae <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	2bff      	cmp	r3, #255	; 0xff
 800a5cc:	d904      	bls.n	800a5d8 <HAL_DAC_ConfigChannel+0x2f4>
 800a5ce:	f240 4163 	movw	r1, #1123	; 0x463
 800a5d2:	4893      	ldr	r0, [pc, #588]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a5d4:	f00e f8eb 	bl	80187ae <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a91      	ldr	r2, [pc, #580]	; (800a824 <HAL_DAC_ConfigChannel+0x540>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d106      	bne.n	800a5f0 <HAL_DAC_ConfigChannel+0x30c>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bf0c      	ite	eq
 800a5e8:	2301      	moveq	r3, #1
 800a5ea:	2300      	movne	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	e00b      	b.n	800a608 <HAL_DAC_ConfigChannel+0x324>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_DAC_ConfigChannel+0x318>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b10      	cmp	r3, #16
 800a5fa:	d101      	bne.n	800a600 <HAL_DAC_ConfigChannel+0x31c>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e000      	b.n	800a602 <HAL_DAC_ConfigChannel+0x31e>
 800a600:	2300      	movs	r3, #0
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d104      	bne.n	800a616 <HAL_DAC_ConfigChannel+0x332>
 800a60c:	f240 4165 	movw	r1, #1125	; 0x465
 800a610:	4883      	ldr	r0, [pc, #524]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a612:	f00e f8cc 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	791b      	ldrb	r3, [r3, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_DAC_ConfigChannel+0x34c>
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	791b      	ldrb	r3, [r3, #4]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d004      	beq.n	800a630 <HAL_DAC_ConfigChannel+0x34c>
 800a626:	f240 4166 	movw	r1, #1126	; 0x466
 800a62a:	487d      	ldr	r0, [pc, #500]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a62c:	f00e f8bf 	bl	80187ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	795b      	ldrb	r3, [r3, #5]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d008      	beq.n	800a64a <HAL_DAC_ConfigChannel+0x366>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	795b      	ldrb	r3, [r3, #5]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d004      	beq.n	800a64a <HAL_DAC_ConfigChannel+0x366>
 800a640:	f240 4167 	movw	r1, #1127	; 0x467
 800a644:	4876      	ldr	r0, [pc, #472]	; (800a820 <HAL_DAC_ConfigChannel+0x53c>)
 800a646:	f00e f8b2 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	795b      	ldrb	r3, [r3, #5]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <HAL_DAC_ConfigChannel+0x372>
 800a652:	2302      	movs	r3, #2
 800a654:	e199      	b.n	800a98a <HAL_DAC_ConfigChannel+0x6a6>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2202      	movs	r2, #2
 800a660:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b04      	cmp	r3, #4
 800a668:	d174      	bne.n	800a754 <HAL_DAC_ConfigChannel+0x470>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d137      	bne.n	800a6e0 <HAL_DAC_ConfigChannel+0x3fc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a670:	f7fc fa24 	bl	8006abc <HAL_GetTick>
 800a674:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a676:	e011      	b.n	800a69c <HAL_DAC_ConfigChannel+0x3b8>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a678:	f7fc fa20 	bl	8006abc <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b01      	cmp	r3, #1
 800a684:	d90a      	bls.n	800a69c <HAL_DAC_ConfigChannel+0x3b8>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f043 0208 	orr.w	r2, r3, #8
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2203      	movs	r2, #3
 800a696:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e176      	b.n	800a98a <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e6      	bne.n	800a678 <HAL_DAC_ConfigChannel+0x394>
        }
      }
      HAL_Delay(1);
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	f7fc fa12 	bl	8006ad4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6b8:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ba:	e01e      	b.n	800a6fa <HAL_DAC_ConfigChannel+0x416>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a6bc:	f7fc f9fe 	bl	8006abc <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d90a      	bls.n	800a6e0 <HAL_DAC_ConfigChannel+0x3fc>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f043 0208 	orr.w	r2, r3, #8
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2203      	movs	r2, #3
 800a6da:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e154      	b.n	800a98a <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dbe8      	blt.n	800a6bc <HAL_DAC_ConfigChannel+0x3d8>
        }
      }
      HAL_Delay(1U);
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	f7fc f9f2 	bl	8006ad4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f003 0310 	and.w	r3, r3, #16
 800a706:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a70a:	fa01 f303 	lsl.w	r3, r1, r3
 800a70e:	43db      	mvns	r3, r3
 800a710:	ea02 0103 	and.w	r1, r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	409a      	lsls	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	21ff      	movs	r1, #255	; 0xff
 800a736:	fa01 f303 	lsl.w	r3, r1, r3
 800a73a:	43db      	mvns	r3, r3
 800a73c:	ea02 0103 	and.w	r1, r2, r3
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	409a      	lsls	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d11d      	bne.n	800a798 <HAL_DAC_ConfigChannel+0x4b4>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f003 0310 	and.w	r3, r3, #16
 800a76a:	221f      	movs	r2, #31
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	43db      	mvns	r3, r3
 800a772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a774:	4013      	ands	r3, r2
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	fa02 f303 	lsl.w	r3, r2, r3
 800a78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78c:	4313      	orrs	r3, r2
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2207      	movs	r2, #7
 800a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <HAL_DAC_ConfigChannel+0x4e2>
  {
    connectOnChip = 0x00000000UL;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	623b      	str	r3, [r7, #32]
 800a7c4:	e011      	b.n	800a7ea <HAL_DAC_ConfigChannel+0x506>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <HAL_DAC_ConfigChannel+0x4f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	623b      	str	r3, [r7, #32]
 800a7d6:	e008      	b.n	800a7ea <HAL_DAC_ConfigChannel+0x506>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <HAL_DAC_ConfigChannel+0x502>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	623b      	str	r3, [r7, #32]
 800a7e4:	e001      	b.n	800a7ea <HAL_DAC_ConfigChannel+0x506>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	6a3a      	ldr	r2, [r7, #32]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a804:	fa02 f303 	lsl.w	r3, r2, r3
 800a808:	43db      	mvns	r3, r3
 800a80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80c:	4013      	ands	r3, r2
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	791b      	ldrb	r3, [r3, #4]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d107      	bne.n	800a828 <HAL_DAC_ConfigChannel+0x544>
 800a818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a81c:	e005      	b.n	800a82a <HAL_DAC_ConfigChannel+0x546>
 800a81e:	bf00      	nop
 800a820:	0801dabc 	.word	0x0801dabc
 800a824:	50000c00 	.word	0x50000c00
 800a828:	2300      	movs	r3, #0
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	43db      	mvns	r3, r3
 800a840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a842:	4013      	ands	r3, r2
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	795b      	ldrb	r3, [r3, #5]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d102      	bne.n	800a854 <HAL_DAC_ConfigChannel+0x570>
 800a84e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a852:	e000      	b.n	800a856 <HAL_DAC_ConfigChannel+0x572>
 800a854:	2300      	movs	r3, #0
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	4313      	orrs	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d114      	bne.n	800a896 <HAL_DAC_ConfigChannel+0x5b2>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a86c:	f002 fb48 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 800a870:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	4a47      	ldr	r2, [pc, #284]	; (800a994 <HAL_DAC_ConfigChannel+0x6b0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d904      	bls.n	800a884 <HAL_DAC_ConfigChannel+0x5a0>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
 800a882:	e00d      	b.n	800a8a0 <HAL_DAC_ConfigChannel+0x5bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	4a44      	ldr	r2, [pc, #272]	; (800a998 <HAL_DAC_ConfigChannel+0x6b4>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d909      	bls.n	800a8a0 <HAL_DAC_ConfigChannel+0x5bc>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
 800a894:	e004      	b.n	800a8a0 <HAL_DAC_ConfigChannel+0x5bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89c:	4313      	orrs	r3, r2
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f003 0310 	and.w	r3, r3, #16
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6819      	ldr	r1, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ce:	43da      	mvns	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	400a      	ands	r2, r1
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f003 0310 	and.w	r3, r3, #16
 800a8e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	43db      	mvns	r3, r3
 800a8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90a:	4313      	orrs	r3, r2
 800a90c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a914:	601a      	str	r2, [r3, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f003 0310 	and.w	r3, r3, #16
 800a922:	22c0      	movs	r2, #192	; 0xc0
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	43da      	mvns	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	400a      	ands	r2, r1
 800a930:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	089b      	lsrs	r3, r3, #2
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	089b      	lsrs	r3, r3, #2
 800a944:	021b      	lsls	r3, r3, #8
 800a946:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f003 0310 	and.w	r3, r3, #16
 800a95c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	43db      	mvns	r3, r3
 800a966:	ea02 0103 	and.w	r1, r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	409a      	lsls	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2201      	movs	r2, #1
 800a980:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3728      	adds	r7, #40	; 0x28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	09896800 	.word	0x09896800
 800a998:	04c4b400 	.word	0x04c4b400

0800a99c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff fc7c 	bl	800a2a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	711a      	strb	r2, [r3, #4]
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff fc75 	bl	800a2bc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f043 0204 	orr.w	r2, r3, #4
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fc6b 	bl	800a2d0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	711a      	strb	r2, [r3, #4]
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08a      	sub	sp, #40	; 0x28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* store/restore channel configuration structure purpose */
  uint32_t oldmodeconfiguration;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a95      	ldr	r2, [pc, #596]	; (800acb0 <HAL_DACEx_SelfCalibrate+0x26c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d106      	bne.n	800aa6e <HAL_DACEx_SelfCalibrate+0x2a>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf0c      	ite	eq
 800aa66:	2301      	moveq	r3, #1
 800aa68:	2300      	movne	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	e00b      	b.n	800aa86 <HAL_DACEx_SelfCalibrate+0x42>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <HAL_DACEx_SelfCalibrate+0x36>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d101      	bne.n	800aa7e <HAL_DACEx_SelfCalibrate+0x3a>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <HAL_DACEx_SelfCalibrate+0x3c>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d104      	bne.n	800aa94 <HAL_DACEx_SelfCalibrate+0x50>
 800aa8a:	f240 3116 	movw	r1, #790	; 0x316
 800aa8e:	4889      	ldr	r0, [pc, #548]	; (800acb4 <HAL_DACEx_SelfCalibrate+0x270>)
 800aa90:	f00d fe8d 	bl	80187ae <assert_failed>

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <HAL_DACEx_SelfCalibrate+0x5e>
  {
    status = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aaa0:	e100      	b.n	800aca4 <HAL_DACEx_SelfCalibrate+0x260>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	791b      	ldrb	r3, [r3, #4]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d103      	bne.n	800aab4 <HAL_DACEx_SelfCalibrate+0x70>
  {
    status = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aab2:	e0f7      	b.n	800aca4 <HAL_DACEx_SelfCalibrate+0x260>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	795b      	ldrb	r3, [r3, #5]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_DACEx_SelfCalibrate+0x7c>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e0f3      	b.n	800aca8 <HAL_DACEx_SelfCalibrate+0x264>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2107      	movs	r1, #7
 800aad4:	fa01 f303 	lsl.w	r3, r1, r3
 800aad8:	4013      	ands	r3, r2
 800aada:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6819      	ldr	r1, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f003 0310 	and.w	r3, r3, #16
 800aae8:	2201      	movs	r2, #1
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	400a      	ands	r2, r1
 800aaf6:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 800aaf8:	2001      	movs	r0, #1
 800aafa:	f7fb ffeb 	bl	8006ad4 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f003 0310 	and.w	r3, r3, #16
 800ab0a:	2207      	movs	r2, #7
 800ab0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab10:	43da      	mvns	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	400a      	ands	r2, r1
 800ab18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <HAL_DACEx_SelfCalibrate+0xea>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	e002      	b.n	800ab34 <HAL_DACEx_SelfCalibrate+0xf0>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3314      	adds	r3, #20
 800ab32:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab3c:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f003 0310 	and.w	r3, r3, #16
 800ab4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab4e:	409a      	lsls	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 800ab58:	2310      	movs	r3, #16
 800ab5a:	623b      	str	r3, [r7, #32]
    delta = 8U;
 800ab5c:	2308      	movs	r3, #8
 800ab5e:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800ab60:	e037      	b.n	800abd2 <HAL_DACEx_SelfCalibrate+0x18e>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f003 0310 	and.w	r3, r3, #16
 800ab6e:	211f      	movs	r1, #31
 800ab70:	fa01 f303 	lsl.w	r3, r1, r3
 800ab74:	43db      	mvns	r3, r3
 800ab76:	ea02 0103 	and.w	r1, r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	6a3a      	ldr	r2, [r7, #32]
 800ab82:	409a      	lsls	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7fb ffa1 	bl	8006ad4 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f003 0310 	and.w	r3, r3, #16
 800ab9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aba2:	fa01 f303 	lsl.w	r3, r1, r3
 800aba6:	401a      	ands	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abb2:	fa01 f303 	lsl.w	r3, r1, r3
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d104      	bne.n	800abc4 <HAL_DACEx_SelfCalibrate+0x180>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800abba:	6a3a      	ldr	r2, [r7, #32]
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	e003      	b.n	800abcc <HAL_DACEx_SelfCalibrate+0x188>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 800abc4:	6a3a      	ldr	r2, [r7, #32]
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	4413      	add	r3, r2
 800abca:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	085b      	lsrs	r3, r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1c4      	bne.n	800ab62 <HAL_DACEx_SelfCalibrate+0x11e>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	211f      	movs	r1, #31
 800abe6:	fa01 f303 	lsl.w	r3, r1, r3
 800abea:	43db      	mvns	r3, r3
 800abec:	ea02 0103 	and.w	r1, r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	409a      	lsls	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 800ac02:	2001      	movs	r0, #1
 800ac04:	f7fb ff66 	bl	8006ad4 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f003 0310 	and.w	r3, r3, #16
 800ac14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac18:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d117      	bne.n	800ac52 <HAL_DACEx_SelfCalibrate+0x20e>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	3301      	adds	r3, #1
 800ac26:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f003 0310 	and.w	r3, r3, #16
 800ac34:	211f      	movs	r1, #31
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	43db      	mvns	r3, r3
 800ac3c:	ea02 0103 	and.w	r1, r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f003 0310 	and.w	r3, r3, #16
 800ac46:	6a3a      	ldr	r2, [r7, #32]
 800ac48:	409a      	lsls	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	43da      	mvns	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	400a      	ands	r2, r1
 800ac6e:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	6a3a      	ldr	r2, [r7, #32]
 800ac74:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f003 0310 	and.w	r3, r3, #16
 800ac88:	2107      	movs	r1, #7
 800ac8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	ea02 0103 	and.w	r1, r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	715a      	strb	r2, [r3, #5]
  }

  return status;
 800aca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3728      	adds	r7, #40	; 0x28
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	50000c00 	.word	0x50000c00
 800acb4:	0801db04 	.word	0x0801db04

0800acb8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fe9e 	bl	800aa08 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2201      	movs	r2, #1
 800acd0:	711a      	strb	r2, [r3, #4]
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7ff fe97 	bl	800aa1c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800acee:	bf00      	nop
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	f043 0204 	orr.w	r2, r3, #4
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff fe8d 	bl	800aa30 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	711a      	strb	r2, [r3, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e184      	b.n	800b040 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a70      	ldr	r2, [pc, #448]	; (800aefc <HAL_DMA_Init+0x1d8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d04e      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a6e      	ldr	r2, [pc, #440]	; (800af00 <HAL_DMA_Init+0x1dc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d049      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a6d      	ldr	r2, [pc, #436]	; (800af04 <HAL_DMA_Init+0x1e0>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d044      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a6b      	ldr	r2, [pc, #428]	; (800af08 <HAL_DMA_Init+0x1e4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d03f      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a6a      	ldr	r2, [pc, #424]	; (800af0c <HAL_DMA_Init+0x1e8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d03a      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a68      	ldr	r2, [pc, #416]	; (800af10 <HAL_DMA_Init+0x1ec>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d035      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a67      	ldr	r2, [pc, #412]	; (800af14 <HAL_DMA_Init+0x1f0>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d030      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a65      	ldr	r2, [pc, #404]	; (800af18 <HAL_DMA_Init+0x1f4>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d02b      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a64      	ldr	r2, [pc, #400]	; (800af1c <HAL_DMA_Init+0x1f8>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d026      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a62      	ldr	r2, [pc, #392]	; (800af20 <HAL_DMA_Init+0x1fc>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d021      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a61      	ldr	r2, [pc, #388]	; (800af24 <HAL_DMA_Init+0x200>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d01c      	beq.n	800adde <HAL_DMA_Init+0xba>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a5f      	ldr	r2, [pc, #380]	; (800af28 <HAL_DMA_Init+0x204>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d017      	beq.n	800adde <HAL_DMA_Init+0xba>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a5e      	ldr	r2, [pc, #376]	; (800af2c <HAL_DMA_Init+0x208>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d012      	beq.n	800adde <HAL_DMA_Init+0xba>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a5c      	ldr	r2, [pc, #368]	; (800af30 <HAL_DMA_Init+0x20c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00d      	beq.n	800adde <HAL_DMA_Init+0xba>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a5b      	ldr	r2, [pc, #364]	; (800af34 <HAL_DMA_Init+0x210>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d008      	beq.n	800adde <HAL_DMA_Init+0xba>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a59      	ldr	r2, [pc, #356]	; (800af38 <HAL_DMA_Init+0x214>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d003      	beq.n	800adde <HAL_DMA_Init+0xba>
 800add6:	21a3      	movs	r1, #163	; 0xa3
 800add8:	4858      	ldr	r0, [pc, #352]	; (800af3c <HAL_DMA_Init+0x218>)
 800adda:	f00d fce8 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <HAL_DMA_Init+0xdc>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	2b10      	cmp	r3, #16
 800adec:	d008      	beq.n	800ae00 <HAL_DMA_Init+0xdc>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adf6:	d003      	beq.n	800ae00 <HAL_DMA_Init+0xdc>
 800adf8:	21a4      	movs	r1, #164	; 0xa4
 800adfa:	4850      	ldr	r0, [pc, #320]	; (800af3c <HAL_DMA_Init+0x218>)
 800adfc:	f00d fcd7 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	2b40      	cmp	r3, #64	; 0x40
 800ae06:	d007      	beq.n	800ae18 <HAL_DMA_Init+0xf4>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <HAL_DMA_Init+0xf4>
 800ae10:	21a5      	movs	r1, #165	; 0xa5
 800ae12:	484a      	ldr	r0, [pc, #296]	; (800af3c <HAL_DMA_Init+0x218>)
 800ae14:	f00d fccb 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	2b80      	cmp	r3, #128	; 0x80
 800ae1e:	d007      	beq.n	800ae30 <HAL_DMA_Init+0x10c>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <HAL_DMA_Init+0x10c>
 800ae28:	21a6      	movs	r1, #166	; 0xa6
 800ae2a:	4844      	ldr	r0, [pc, #272]	; (800af3c <HAL_DMA_Init+0x218>)
 800ae2c:	f00d fcbf 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00d      	beq.n	800ae54 <HAL_DMA_Init+0x130>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae40:	d008      	beq.n	800ae54 <HAL_DMA_Init+0x130>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae4a:	d003      	beq.n	800ae54 <HAL_DMA_Init+0x130>
 800ae4c:	21a7      	movs	r1, #167	; 0xa7
 800ae4e:	483b      	ldr	r0, [pc, #236]	; (800af3c <HAL_DMA_Init+0x218>)
 800ae50:	f00d fcad 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00d      	beq.n	800ae78 <HAL_DMA_Init+0x154>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae64:	d008      	beq.n	800ae78 <HAL_DMA_Init+0x154>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae6e:	d003      	beq.n	800ae78 <HAL_DMA_Init+0x154>
 800ae70:	21a8      	movs	r1, #168	; 0xa8
 800ae72:	4832      	ldr	r0, [pc, #200]	; (800af3c <HAL_DMA_Init+0x218>)
 800ae74:	f00d fc9b 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d007      	beq.n	800ae90 <HAL_DMA_Init+0x16c>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d003      	beq.n	800ae90 <HAL_DMA_Init+0x16c>
 800ae88:	21a9      	movs	r1, #169	; 0xa9
 800ae8a:	482c      	ldr	r0, [pc, #176]	; (800af3c <HAL_DMA_Init+0x218>)
 800ae8c:	f00d fc8f 	bl	80187ae <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <HAL_DMA_Init+0x19a>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea0:	d00d      	beq.n	800aebe <HAL_DMA_Init+0x19a>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeaa:	d008      	beq.n	800aebe <HAL_DMA_Init+0x19a>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeb4:	d003      	beq.n	800aebe <HAL_DMA_Init+0x19a>
 800aeb6:	21aa      	movs	r1, #170	; 0xaa
 800aeb8:	4820      	ldr	r0, [pc, #128]	; (800af3c <HAL_DMA_Init+0x218>)
 800aeba:	f00d fc78 	bl	80187ae <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2b73      	cmp	r3, #115	; 0x73
 800aec4:	d903      	bls.n	800aece <HAL_DMA_Init+0x1aa>
 800aec6:	21ac      	movs	r1, #172	; 0xac
 800aec8:	481c      	ldr	r0, [pc, #112]	; (800af3c <HAL_DMA_Init+0x218>)
 800aeca:	f00d fc70 	bl	80187ae <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <HAL_DMA_Init+0x21c>)
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d83a      	bhi.n	800af50 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	4b18      	ldr	r3, [pc, #96]	; (800af44 <HAL_DMA_Init+0x220>)
 800aee2:	4413      	add	r3, r2
 800aee4:	4a18      	ldr	r2, [pc, #96]	; (800af48 <HAL_DMA_Init+0x224>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	091b      	lsrs	r3, r3, #4
 800aeec:	009a      	lsls	r2, r3, #2
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a15      	ldr	r2, [pc, #84]	; (800af4c <HAL_DMA_Init+0x228>)
 800aef6:	641a      	str	r2, [r3, #64]	; 0x40
 800aef8:	e039      	b.n	800af6e <HAL_DMA_Init+0x24a>
 800aefa:	bf00      	nop
 800aefc:	40020008 	.word	0x40020008
 800af00:	4002001c 	.word	0x4002001c
 800af04:	40020030 	.word	0x40020030
 800af08:	40020044 	.word	0x40020044
 800af0c:	40020058 	.word	0x40020058
 800af10:	4002006c 	.word	0x4002006c
 800af14:	40020080 	.word	0x40020080
 800af18:	40020094 	.word	0x40020094
 800af1c:	40020408 	.word	0x40020408
 800af20:	4002041c 	.word	0x4002041c
 800af24:	40020430 	.word	0x40020430
 800af28:	40020444 	.word	0x40020444
 800af2c:	40020458 	.word	0x40020458
 800af30:	4002046c 	.word	0x4002046c
 800af34:	40020480 	.word	0x40020480
 800af38:	40020494 	.word	0x40020494
 800af3c:	0801db50 	.word	0x0801db50
 800af40:	40020407 	.word	0x40020407
 800af44:	bffdfff8 	.word	0xbffdfff8
 800af48:	cccccccd 	.word	0xcccccccd
 800af4c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	461a      	mov	r2, r3
 800af56:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <HAL_DMA_Init+0x324>)
 800af58:	4413      	add	r3, r2
 800af5a:	4a3c      	ldr	r2, [pc, #240]	; (800b04c <HAL_DMA_Init+0x328>)
 800af5c:	fba2 2303 	umull	r2, r3, r2, r3
 800af60:	091b      	lsrs	r3, r3, #4
 800af62:	009a      	lsls	r2, r3, #2
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a39      	ldr	r2, [pc, #228]	; (800b050 <HAL_DMA_Init+0x32c>)
 800af6c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800af84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800af92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fc7f 	bl	800b8c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afce:	d102      	bne.n	800afd6 <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800afea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d010      	beq.n	800b016 <HAL_DMA_Init+0x2f2>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d80c      	bhi.n	800b016 <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fc9f 	bl	800b940 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	2200      	movs	r2, #0
 800b008:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b012:	605a      	str	r2, [r3, #4]
 800b014:	e008      	b.n	800b028 <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	bffdfbf8 	.word	0xbffdfbf8
 800b04c:	cccccccd 	.word	0xcccccccd
 800b050:	40020400 	.word	0x40020400

0800b054 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e0d0      	b.n	800b208 <HAL_DMA_DeInit+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a69      	ldr	r2, [pc, #420]	; (800b210 <HAL_DMA_DeInit+0x1bc>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d04f      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a67      	ldr	r2, [pc, #412]	; (800b214 <HAL_DMA_DeInit+0x1c0>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d04a      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a66      	ldr	r2, [pc, #408]	; (800b218 <HAL_DMA_DeInit+0x1c4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d045      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a64      	ldr	r2, [pc, #400]	; (800b21c <HAL_DMA_DeInit+0x1c8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d040      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a63      	ldr	r2, [pc, #396]	; (800b220 <HAL_DMA_DeInit+0x1cc>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d03b      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a61      	ldr	r2, [pc, #388]	; (800b224 <HAL_DMA_DeInit+0x1d0>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d036      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a60      	ldr	r2, [pc, #384]	; (800b228 <HAL_DMA_DeInit+0x1d4>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d031      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a5e      	ldr	r2, [pc, #376]	; (800b22c <HAL_DMA_DeInit+0x1d8>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d02c      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a5d      	ldr	r2, [pc, #372]	; (800b230 <HAL_DMA_DeInit+0x1dc>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d027      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a5b      	ldr	r2, [pc, #364]	; (800b234 <HAL_DMA_DeInit+0x1e0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d022      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a5a      	ldr	r2, [pc, #360]	; (800b238 <HAL_DMA_DeInit+0x1e4>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d01d      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a58      	ldr	r2, [pc, #352]	; (800b23c <HAL_DMA_DeInit+0x1e8>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d018      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a57      	ldr	r2, [pc, #348]	; (800b240 <HAL_DMA_DeInit+0x1ec>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d013      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a55      	ldr	r2, [pc, #340]	; (800b244 <HAL_DMA_DeInit+0x1f0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00e      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a54      	ldr	r2, [pc, #336]	; (800b248 <HAL_DMA_DeInit+0x1f4>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d009      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a52      	ldr	r2, [pc, #328]	; (800b24c <HAL_DMA_DeInit+0x1f8>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d004      	beq.n	800b110 <HAL_DMA_DeInit+0xbc>
 800b106:	f240 1111 	movw	r1, #273	; 0x111
 800b10a:	4851      	ldr	r0, [pc, #324]	; (800b250 <HAL_DMA_DeInit+0x1fc>)
 800b10c:	f00d fb4f 	bl	80187ae <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0201 	bic.w	r2, r2, #1
 800b11e:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	4b4b      	ldr	r3, [pc, #300]	; (800b254 <HAL_DMA_DeInit+0x200>)
 800b128:	429a      	cmp	r2, r3
 800b12a:	d80f      	bhi.n	800b14c <HAL_DMA_DeInit+0xf8>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	4b49      	ldr	r3, [pc, #292]	; (800b258 <HAL_DMA_DeInit+0x204>)
 800b134:	4413      	add	r3, r2
 800b136:	4a49      	ldr	r2, [pc, #292]	; (800b25c <HAL_DMA_DeInit+0x208>)
 800b138:	fba2 2303 	umull	r2, r3, r2, r3
 800b13c:	091b      	lsrs	r3, r3, #4
 800b13e:	009a      	lsls	r2, r3, #2
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a46      	ldr	r2, [pc, #280]	; (800b260 <HAL_DMA_DeInit+0x20c>)
 800b148:	641a      	str	r2, [r3, #64]	; 0x40
 800b14a:	e00e      	b.n	800b16a <HAL_DMA_DeInit+0x116>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	4b44      	ldr	r3, [pc, #272]	; (800b264 <HAL_DMA_DeInit+0x210>)
 800b154:	4413      	add	r3, r2
 800b156:	4a41      	ldr	r2, [pc, #260]	; (800b25c <HAL_DMA_DeInit+0x208>)
 800b158:	fba2 2303 	umull	r2, r3, r2, r3
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	009a      	lsls	r2, r3, #2
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a40      	ldr	r2, [pc, #256]	; (800b268 <HAL_DMA_DeInit+0x214>)
 800b168:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b176:	f003 021f 	and.w	r2, r3, #31
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	2101      	movs	r1, #1
 800b180:	fa01 f202 	lsl.w	r2, r1, r2
 800b184:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fb9c 	bl	800b8c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b19c:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00f      	beq.n	800b1c6 <HAL_DMA_DeInit+0x172>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d80b      	bhi.n	800b1c6 <HAL_DMA_DeInit+0x172>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fbc6 	bl	800b940 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b1c4:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	40020008 	.word	0x40020008
 800b214:	4002001c 	.word	0x4002001c
 800b218:	40020030 	.word	0x40020030
 800b21c:	40020044 	.word	0x40020044
 800b220:	40020058 	.word	0x40020058
 800b224:	4002006c 	.word	0x4002006c
 800b228:	40020080 	.word	0x40020080
 800b22c:	40020094 	.word	0x40020094
 800b230:	40020408 	.word	0x40020408
 800b234:	4002041c 	.word	0x4002041c
 800b238:	40020430 	.word	0x40020430
 800b23c:	40020444 	.word	0x40020444
 800b240:	40020458 	.word	0x40020458
 800b244:	4002046c 	.word	0x4002046c
 800b248:	40020480 	.word	0x40020480
 800b24c:	40020494 	.word	0x40020494
 800b250:	0801db50 	.word	0x0801db50
 800b254:	40020407 	.word	0x40020407
 800b258:	bffdfff8 	.word	0xbffdfff8
 800b25c:	cccccccd 	.word	0xcccccccd
 800b260:	40020000 	.word	0x40020000
 800b264:	bffdfbf8 	.word	0xbffdfbf8
 800b268:	40020400 	.word	0x40020400

0800b26c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <HAL_DMA_Start+0x20>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b28a:	d304      	bcc.n	800b296 <HAL_DMA_Start+0x2a>
 800b28c:	f240 117f 	movw	r1, #383	; 0x17f
 800b290:	481e      	ldr	r0, [pc, #120]	; (800b30c <HAL_DMA_Start+0xa0>)
 800b292:	f00d fa8c 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d101      	bne.n	800b2a4 <HAL_DMA_Start+0x38>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e02e      	b.n	800b302 <HAL_DMA_Start+0x96>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d11d      	bne.n	800b2f4 <HAL_DMA_Start+0x88>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0201 	bic.w	r2, r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fab3 	bl	800b848 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f042 0201 	orr.w	r2, r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	e005      	b.n	800b300 <HAL_DMA_Start+0x94>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0801db50 	.word	0x0801db50

0800b310 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <HAL_DMA_Start_IT+0x20>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b32e:	d304      	bcc.n	800b33a <HAL_DMA_Start_IT+0x2a>
 800b330:	f240 11ab 	movw	r1, #427	; 0x1ab
 800b334:	483a      	ldr	r0, [pc, #232]	; (800b420 <HAL_DMA_Start_IT+0x110>)
 800b336:	f00d fa3a 	bl	80187ae <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_DMA_Start_IT+0x38>
 800b344:	2302      	movs	r3, #2
 800b346:	e066      	b.n	800b416 <HAL_DMA_Start_IT+0x106>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d155      	bne.n	800b408 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2202      	movs	r2, #2
 800b360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f022 0201 	bic.w	r2, r2, #1
 800b378:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fa61 	bl	800b848 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d008      	beq.n	800b3a0 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f042 020e 	orr.w	r2, r2, #14
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e00f      	b.n	800b3c0 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f022 0204 	bic.w	r2, r2, #4
 800b3ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f042 020a 	orr.w	r2, r2, #10
 800b3be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0201 	orr.w	r2, r2, #1
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	e005      	b.n	800b414 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b410:	2302      	movs	r3, #2
 800b412:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	0801db50 	.word	0x0801db50

0800b424 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d005      	beq.n	800b448 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2204      	movs	r2, #4
 800b440:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	73fb      	strb	r3, [r7, #15]
 800b446:	e037      	b.n	800b4b8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 020e 	bic.w	r2, r2, #14
 800b456:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b466:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0201 	bic.w	r2, r2, #1
 800b476:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47c:	f003 021f 	and.w	r2, r3, #31
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b484:	2101      	movs	r1, #1
 800b486:	fa01 f202 	lsl.w	r2, r1, r2
 800b48a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b494:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00c      	beq.n	800b4b8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b4b6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d00d      	beq.n	800b50a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	73fb      	strb	r3, [r7, #15]
 800b508:	e047      	b.n	800b59a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 020e 	bic.w	r2, r2, #14
 800b518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0201 	bic.w	r2, r2, #1
 800b528:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53e:	f003 021f 	and.w	r2, r3, #31
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	2101      	movs	r1, #1
 800b548:	fa01 f202 	lsl.w	r2, r1, r2
 800b54c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b556:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00c      	beq.n	800b57a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b56e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b578:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	4798      	blx	r3
    }
  }
  return status;
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c0:	f003 031f 	and.w	r3, r3, #31
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	409a      	lsls	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d026      	beq.n	800b61e <HAL_DMA_IRQHandler+0x7a>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d021      	beq.n	800b61e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d107      	bne.n	800b5f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f022 0204 	bic.w	r2, r2, #4
 800b5f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fc:	f003 021f 	and.w	r2, r3, #31
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b604:	2104      	movs	r1, #4
 800b606:	fa01 f202 	lsl.w	r2, r1, r2
 800b60a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b610:	2b00      	cmp	r3, #0
 800b612:	d071      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b61c:	e06c      	b.n	800b6f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b622:	f003 031f 	and.w	r3, r3, #31
 800b626:	2202      	movs	r2, #2
 800b628:	409a      	lsls	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4013      	ands	r3, r2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d02e      	beq.n	800b690 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d029      	beq.n	800b690 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 020a 	bic.w	r2, r2, #10
 800b658:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b666:	f003 021f 	and.w	r2, r3, #31
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66e:	2102      	movs	r1, #2
 800b670:	fa01 f202 	lsl.w	r2, r1, r2
 800b674:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b682:	2b00      	cmp	r3, #0
 800b684:	d038      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b68e:	e033      	b.n	800b6f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b694:	f003 031f 	and.w	r3, r3, #31
 800b698:	2208      	movs	r2, #8
 800b69a:	409a      	lsls	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d02a      	beq.n	800b6fa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f003 0308 	and.w	r3, r3, #8
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d025      	beq.n	800b6fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 020e 	bic.w	r2, r2, #14
 800b6bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c2:	f003 021f 	and.w	r2, r3, #31
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	fa01 f202 	lsl.w	r2, r1, r2
 800b6d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
}
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
	...

0800b704 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	460b      	mov	r3, r1
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_DMA_RegisterCallback+0x20>
 800b720:	2302      	movs	r3, #2
 800b722:	e032      	b.n	800b78a <HAL_DMA_RegisterCallback+0x86>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b01      	cmp	r3, #1
 800b736:	d121      	bne.n	800b77c <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 800b738:	7afb      	ldrb	r3, [r7, #11]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d81a      	bhi.n	800b774 <HAL_DMA_RegisterCallback+0x70>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <HAL_DMA_RegisterCallback+0x40>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b75d 	.word	0x0800b75d
 800b74c:	0800b765 	.word	0x0800b765
 800b750:	0800b76d 	.word	0x0800b76d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b75a:	e011      	b.n	800b780 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b762:	e00d      	b.n	800b780 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b76a:	e009      	b.n	800b780 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b772:	e005      	b.n	800b780 <HAL_DMA_RegisterCallback+0x7c>

      default:
        status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
        break;
 800b778:	bf00      	nop
 800b77a:	e001      	b.n	800b780 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop

0800b798 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d101      	bne.n	800b7b6 <HAL_DMA_UnRegisterCallback+0x1e>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e042      	b.n	800b83c <HAL_DMA_UnRegisterCallback+0xa4>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d131      	bne.n	800b82e <HAL_DMA_UnRegisterCallback+0x96>
  {
    switch (CallbackID)
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	d82a      	bhi.n	800b826 <HAL_DMA_UnRegisterCallback+0x8e>
 800b7d0:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <HAL_DMA_UnRegisterCallback+0x40>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b7ed 	.word	0x0800b7ed
 800b7dc:	0800b7f5 	.word	0x0800b7f5
 800b7e0:	0800b7fd 	.word	0x0800b7fd
 800b7e4:	0800b805 	.word	0x0800b805
 800b7e8:	0800b80d 	.word	0x0800b80d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b7f2:	e01e      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = NULL;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b7fa:	e01a      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = NULL;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b802:	e016      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = NULL;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b80a:	e012      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>

      case   HAL_DMA_XFER_ALL_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma->XferHalfCpltCallback = NULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	631a      	str	r2, [r3, #48]	; 0x30
        hdma->XferErrorCallback = NULL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	635a      	str	r2, [r3, #52]	; 0x34
        hdma->XferAbortCallback = NULL;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b824:	e005      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>

      default:
        status = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	73fb      	strb	r3, [r7, #15]
        break;
 800b82a:	bf00      	nop
 800b82c:	e001      	b.n	800b832 <HAL_DMA_UnRegisterCallback+0x9a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b85e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b870:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b876:	f003 021f 	and.w	r2, r3, #31
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87e:	2101      	movs	r1, #1
 800b880:	fa01 f202 	lsl.w	r2, r1, r2
 800b884:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	2b10      	cmp	r3, #16
 800b894:	d108      	bne.n	800b8a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b8a6:	e007      	b.n	800b8b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	60da      	str	r2, [r3, #12]
}
 800b8b8:	bf00      	nop
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d802      	bhi.n	800b8de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e001      	b.n	800b8e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G474xx) || defined (STM32G473xx) || defined (STM32G471xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b8de:	4b15      	ldr	r3, [pc, #84]	; (800b934 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b8e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	3b08      	subs	r3, #8
 800b8ee:	4a12      	ldr	r2, [pc, #72]	; (800b938 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f4:	091b      	lsrs	r3, r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	089b      	lsrs	r3, r3, #2
 800b8fe:	009a      	lsls	r2, r3, #2
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	4413      	add	r3, r2
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a0b      	ldr	r2, [pc, #44]	; (800b93c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b90e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f003 031f 	and.w	r3, r3, #31
 800b916:	2201      	movs	r2, #1
 800b918:	409a      	lsls	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b91e:	bf00      	nop
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40020407 	.word	0x40020407
 800b930:	40020800 	.word	0x40020800
 800b934:	40020820 	.word	0x40020820
 800b938:	cccccccd 	.word	0xcccccccd
 800b93c:	40020880 	.word	0x40020880

0800b940 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	461a      	mov	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a08      	ldr	r2, [pc, #32]	; (800b984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b962:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	3b01      	subs	r3, #1
 800b968:	f003 031f 	and.w	r3, r3, #31
 800b96c:	2201      	movs	r2, #1
 800b96e:	409a      	lsls	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	1000823f 	.word	0x1000823f
 800b984:	40020940 	.word	0x40020940

0800b988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b99c:	d01b      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a3b      	ldr	r2, [pc, #236]	; (800ba90 <HAL_GPIO_Init+0x108>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d017      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a3a      	ldr	r2, [pc, #232]	; (800ba94 <HAL_GPIO_Init+0x10c>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d013      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a39      	ldr	r2, [pc, #228]	; (800ba98 <HAL_GPIO_Init+0x110>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d00f      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a38      	ldr	r2, [pc, #224]	; (800ba9c <HAL_GPIO_Init+0x114>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d00b      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a37      	ldr	r2, [pc, #220]	; (800baa0 <HAL_GPIO_Init+0x118>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d007      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a36      	ldr	r2, [pc, #216]	; (800baa4 <HAL_GPIO_Init+0x11c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d003      	beq.n	800b9d6 <HAL_GPIO_Init+0x4e>
 800b9ce:	21b1      	movs	r1, #177	; 0xb1
 800b9d0:	4835      	ldr	r0, [pc, #212]	; (800baa8 <HAL_GPIO_Init+0x120>)
 800b9d2:	f00c feec 	bl	80187ae <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d005      	beq.n	800b9ec <HAL_GPIO_Init+0x64>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	0c1b      	lsrs	r3, r3, #16
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <HAL_GPIO_Init+0x6c>
 800b9ec:	21b2      	movs	r1, #178	; 0xb2
 800b9ee:	482e      	ldr	r0, [pc, #184]	; (800baa8 <HAL_GPIO_Init+0x120>)
 800b9f0:	f00c fedd 	bl	80187ae <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d035      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d031      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	2b11      	cmp	r3, #17
 800ba0a:	d02d      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d029      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	2b12      	cmp	r3, #18
 800ba1a:	d025      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a22      	ldr	r2, [pc, #136]	; (800baac <HAL_GPIO_Init+0x124>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d020      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	4a21      	ldr	r2, [pc, #132]	; (800bab0 <HAL_GPIO_Init+0x128>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d01b      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	4a1f      	ldr	r2, [pc, #124]	; (800bab4 <HAL_GPIO_Init+0x12c>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d016      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4a1e      	ldr	r2, [pc, #120]	; (800bab8 <HAL_GPIO_Init+0x130>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d011      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	4a1c      	ldr	r2, [pc, #112]	; (800babc <HAL_GPIO_Init+0x134>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d00c      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <HAL_GPIO_Init+0x138>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d003      	beq.n	800ba68 <HAL_GPIO_Init+0xe0>
 800ba60:	21b3      	movs	r1, #179	; 0xb3
 800ba62:	4811      	ldr	r0, [pc, #68]	; (800baa8 <HAL_GPIO_Init+0x120>)
 800ba64:	f00c fea3 	bl	80187ae <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 81d2 	beq.w	800be16 <HAL_GPIO_Init+0x48e>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	f000 81cd 	beq.w	800be16 <HAL_GPIO_Init+0x48e>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	f000 81c8 	beq.w	800be16 <HAL_GPIO_Init+0x48e>
 800ba86:	21b4      	movs	r1, #180	; 0xb4
 800ba88:	4807      	ldr	r0, [pc, #28]	; (800baa8 <HAL_GPIO_Init+0x120>)
 800ba8a:	f00c fe90 	bl	80187ae <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ba8e:	e1c2      	b.n	800be16 <HAL_GPIO_Init+0x48e>
 800ba90:	48000400 	.word	0x48000400
 800ba94:	48000800 	.word	0x48000800
 800ba98:	48000c00 	.word	0x48000c00
 800ba9c:	48001000 	.word	0x48001000
 800baa0:	48001400 	.word	0x48001400
 800baa4:	48001800 	.word	0x48001800
 800baa8:	0801db98 	.word	0x0801db98
 800baac:	10110000 	.word	0x10110000
 800bab0:	10210000 	.word	0x10210000
 800bab4:	10310000 	.word	0x10310000
 800bab8:	10120000 	.word	0x10120000
 800babc:	10220000 	.word	0x10220000
 800bac0:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	2101      	movs	r1, #1
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	fa01 f303 	lsl.w	r3, r1, r3
 800bad0:	4013      	ands	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 819a 	beq.w	800be10 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d003      	beq.n	800baec <HAL_GPIO_Init+0x164>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b12      	cmp	r3, #18
 800baea:	d14b      	bne.n	800bb84 <HAL_GPIO_Init+0x1fc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800baf2:	d01b      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a8b      	ldr	r2, [pc, #556]	; (800bd24 <HAL_GPIO_Init+0x39c>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d017      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a8a      	ldr	r2, [pc, #552]	; (800bd28 <HAL_GPIO_Init+0x3a0>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d013      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a89      	ldr	r2, [pc, #548]	; (800bd2c <HAL_GPIO_Init+0x3a4>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d00f      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a88      	ldr	r2, [pc, #544]	; (800bd30 <HAL_GPIO_Init+0x3a8>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d00b      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a87      	ldr	r2, [pc, #540]	; (800bd34 <HAL_GPIO_Init+0x3ac>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d007      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a86      	ldr	r2, [pc, #536]	; (800bd38 <HAL_GPIO_Init+0x3b0>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d003      	beq.n	800bb2c <HAL_GPIO_Init+0x1a4>
 800bb24:	21c3      	movs	r1, #195	; 0xc3
 800bb26:	4885      	ldr	r0, [pc, #532]	; (800bd3c <HAL_GPIO_Init+0x3b4>)
 800bb28:	f00c fe41 	bl	80187ae <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b0f      	cmp	r3, #15
 800bb32:	d903      	bls.n	800bb3c <HAL_GPIO_Init+0x1b4>
 800bb34:	21c4      	movs	r1, #196	; 0xc4
 800bb36:	4881      	ldr	r0, [pc, #516]	; (800bd3c <HAL_GPIO_Init+0x3b4>)
 800bb38:	f00c fe39 	bl	80187ae <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	08da      	lsrs	r2, r3, #3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3208      	adds	r2, #8
 800bb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	220f      	movs	r2, #15
 800bb54:	fa02 f303 	lsl.w	r3, r2, r3
 800bb58:	43db      	mvns	r3, r3
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	08da      	lsrs	r2, r3, #3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3208      	adds	r2, #8
 800bb7e:	6939      	ldr	r1, [r7, #16]
 800bb80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	2203      	movs	r2, #3
 800bb90:	fa02 f303 	lsl.w	r3, r2, r3
 800bb94:	43db      	mvns	r3, r3
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4013      	ands	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	f003 0203 	and.w	r2, r3, #3
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d00b      	beq.n	800bbd8 <HAL_GPIO_Init+0x250>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d007      	beq.n	800bbd8 <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bbcc:	2b11      	cmp	r3, #17
 800bbce:	d003      	beq.n	800bbd8 <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b12      	cmp	r3, #18
 800bbd6:	d144      	bne.n	800bc62 <HAL_GPIO_Init+0x2da>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00f      	beq.n	800bc00 <HAL_GPIO_Init+0x278>
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d00b      	beq.n	800bc00 <HAL_GPIO_Init+0x278>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d007      	beq.n	800bc00 <HAL_GPIO_Init+0x278>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d003      	beq.n	800bc00 <HAL_GPIO_Init+0x278>
 800bbf8:	21d8      	movs	r1, #216	; 0xd8
 800bbfa:	4850      	ldr	r0, [pc, #320]	; (800bd3c <HAL_GPIO_Init+0x3b4>)
 800bbfc:	f00c fdd7 	bl	80187ae <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	2203      	movs	r2, #3
 800bc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc10:	43db      	mvns	r3, r3
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	4013      	ands	r3, r2
 800bc16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	fa02 f303 	lsl.w	r3, r2, r3
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc36:	2201      	movs	r2, #1
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3e:	43db      	mvns	r3, r3
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4013      	ands	r3, r2
 800bc44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	091b      	lsrs	r3, r3, #4
 800bc4c:	f003 0201 	and.w	r2, r3, #1
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	fa02 f303 	lsl.w	r3, r2, r3
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	4013      	ands	r3, r2
 800bc78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	fa02 f303 	lsl.w	r3, r2, r3
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 80b8 	beq.w	800be10 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bca0:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <HAL_GPIO_Init+0x3b8>)
 800bca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca4:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <HAL_GPIO_Init+0x3b8>)
 800bca6:	f043 0301 	orr.w	r3, r3, #1
 800bcaa:	6613      	str	r3, [r2, #96]	; 0x60
 800bcac:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <HAL_GPIO_Init+0x3b8>)
 800bcae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bcb8:	4a22      	ldr	r2, [pc, #136]	; (800bd44 <HAL_GPIO_Init+0x3bc>)
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	089b      	lsrs	r3, r3, #2
 800bcbe:	3302      	adds	r3, #2
 800bcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	220f      	movs	r2, #15
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	43db      	mvns	r3, r3
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	4013      	ands	r3, r2
 800bcda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bce2:	d031      	beq.n	800bd48 <HAL_GPIO_Init+0x3c0>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a0f      	ldr	r2, [pc, #60]	; (800bd24 <HAL_GPIO_Init+0x39c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d019      	beq.n	800bd20 <HAL_GPIO_Init+0x398>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a0e      	ldr	r2, [pc, #56]	; (800bd28 <HAL_GPIO_Init+0x3a0>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d013      	beq.n	800bd1c <HAL_GPIO_Init+0x394>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a0d      	ldr	r2, [pc, #52]	; (800bd2c <HAL_GPIO_Init+0x3a4>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00d      	beq.n	800bd18 <HAL_GPIO_Init+0x390>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a0c      	ldr	r2, [pc, #48]	; (800bd30 <HAL_GPIO_Init+0x3a8>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d007      	beq.n	800bd14 <HAL_GPIO_Init+0x38c>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a0b      	ldr	r2, [pc, #44]	; (800bd34 <HAL_GPIO_Init+0x3ac>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d101      	bne.n	800bd10 <HAL_GPIO_Init+0x388>
 800bd0c:	2305      	movs	r3, #5
 800bd0e:	e01c      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd10:	2306      	movs	r3, #6
 800bd12:	e01a      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd14:	2304      	movs	r3, #4
 800bd16:	e018      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e016      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e014      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e012      	b.n	800bd4a <HAL_GPIO_Init+0x3c2>
 800bd24:	48000400 	.word	0x48000400
 800bd28:	48000800 	.word	0x48000800
 800bd2c:	48000c00 	.word	0x48000c00
 800bd30:	48001000 	.word	0x48001000
 800bd34:	48001400 	.word	0x48001400
 800bd38:	48001800 	.word	0x48001800
 800bd3c:	0801db98 	.word	0x0801db98
 800bd40:	40021000 	.word	0x40021000
 800bd44:	40010000 	.word	0x40010000
 800bd48:	2300      	movs	r3, #0
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	f002 0203 	and.w	r2, r2, #3
 800bd50:	0092      	lsls	r2, r2, #2
 800bd52:	4093      	lsls	r3, r2
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd5a:	4935      	ldr	r1, [pc, #212]	; (800be30 <HAL_GPIO_Init+0x4a8>)
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	089b      	lsrs	r3, r3, #2
 800bd60:	3302      	adds	r3, #2
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bd68:	4b32      	ldr	r3, [pc, #200]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	43db      	mvns	r3, r3
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	4013      	ands	r3, r2
 800bd76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bd8c:	4a29      	ldr	r2, [pc, #164]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bd92:	4b28      	ldr	r3, [pc, #160]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	43db      	mvns	r3, r3
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	4013      	ands	r3, r2
 800bda0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bdb6:	4a1f      	ldr	r2, [pc, #124]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bdbc:	4b1d      	ldr	r3, [pc, #116]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	43db      	mvns	r3, r3
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	4013      	ands	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bde0:	4a14      	ldr	r2, [pc, #80]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	43db      	mvns	r3, r3
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800be0a:	4a0a      	ldr	r2, [pc, #40]	; (800be34 <HAL_GPIO_Init+0x4ac>)
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	3301      	adds	r3, #1
 800be14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	fa22 f303 	lsr.w	r3, r2, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	f47f ae4f 	bne.w	800bac4 <HAL_GPIO_Init+0x13c>
  }
}
 800be26:	bf00      	nop
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	40010000 	.word	0x40010000
 800be34:	40010400 	.word	0x40010400

0800be38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800be4c:	d01c      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a7a      	ldr	r2, [pc, #488]	; (800c03c <HAL_GPIO_DeInit+0x204>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d018      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a79      	ldr	r2, [pc, #484]	; (800c040 <HAL_GPIO_DeInit+0x208>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d014      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a78      	ldr	r2, [pc, #480]	; (800c044 <HAL_GPIO_DeInit+0x20c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d010      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a77      	ldr	r2, [pc, #476]	; (800c048 <HAL_GPIO_DeInit+0x210>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00c      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a76      	ldr	r2, [pc, #472]	; (800c04c <HAL_GPIO_DeInit+0x214>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d008      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a75      	ldr	r2, [pc, #468]	; (800c050 <HAL_GPIO_DeInit+0x218>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d004      	beq.n	800be88 <HAL_GPIO_DeInit+0x50>
 800be7e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800be82:	4874      	ldr	r0, [pc, #464]	; (800c054 <HAL_GPIO_DeInit+0x21c>)
 800be84:	f00c fc93 	bl	80187ae <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <HAL_GPIO_DeInit+0x64>
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	0c1b      	lsrs	r3, r3, #16
 800be94:	041b      	lsls	r3, r3, #16
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80c4 	beq.w	800c024 <HAL_GPIO_DeInit+0x1ec>
 800be9c:	f240 112f 	movw	r1, #303	; 0x12f
 800bea0:	486c      	ldr	r0, [pc, #432]	; (800c054 <HAL_GPIO_DeInit+0x21c>)
 800bea2:	f00c fc84 	bl	80187ae <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800bea6:	e0bd      	b.n	800c024 <HAL_GPIO_DeInit+0x1ec>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bea8:	2201      	movs	r2, #1
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	fa02 f303 	lsl.w	r3, r2, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	4013      	ands	r3, r2
 800beb4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80b0 	beq.w	800c01e <HAL_GPIO_DeInit+0x1e6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bebe:	4a66      	ldr	r2, [pc, #408]	; (800c058 <HAL_GPIO_DeInit+0x220>)
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	089b      	lsrs	r3, r3, #2
 800bec4:	3302      	adds	r3, #2
 800bec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	220f      	movs	r2, #15
 800bed6:	fa02 f303 	lsl.w	r3, r2, r3
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4013      	ands	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bee6:	d01f      	beq.n	800bf28 <HAL_GPIO_DeInit+0xf0>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a54      	ldr	r2, [pc, #336]	; (800c03c <HAL_GPIO_DeInit+0x204>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d019      	beq.n	800bf24 <HAL_GPIO_DeInit+0xec>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a53      	ldr	r2, [pc, #332]	; (800c040 <HAL_GPIO_DeInit+0x208>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d013      	beq.n	800bf20 <HAL_GPIO_DeInit+0xe8>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a52      	ldr	r2, [pc, #328]	; (800c044 <HAL_GPIO_DeInit+0x20c>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d00d      	beq.n	800bf1c <HAL_GPIO_DeInit+0xe4>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a51      	ldr	r2, [pc, #324]	; (800c048 <HAL_GPIO_DeInit+0x210>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d007      	beq.n	800bf18 <HAL_GPIO_DeInit+0xe0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a50      	ldr	r2, [pc, #320]	; (800c04c <HAL_GPIO_DeInit+0x214>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d101      	bne.n	800bf14 <HAL_GPIO_DeInit+0xdc>
 800bf10:	2305      	movs	r3, #5
 800bf12:	e00a      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf14:	2306      	movs	r3, #6
 800bf16:	e008      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf18:	2304      	movs	r3, #4
 800bf1a:	e006      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e004      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e002      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e000      	b.n	800bf2a <HAL_GPIO_DeInit+0xf2>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	f002 0203 	and.w	r2, r2, #3
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	4093      	lsls	r3, r2
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d132      	bne.n	800bfa0 <HAL_GPIO_DeInit+0x168>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f003 0303 	and.w	r3, r3, #3
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	220f      	movs	r2, #15
 800bf44:	fa02 f303 	lsl.w	r3, r2, r3
 800bf48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bf4a:	4a43      	ldr	r2, [pc, #268]	; (800c058 <HAL_GPIO_DeInit+0x220>)
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	089b      	lsrs	r3, r3, #2
 800bf50:	3302      	adds	r3, #2
 800bf52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	43da      	mvns	r2, r3
 800bf5a:	483f      	ldr	r0, [pc, #252]	; (800c058 <HAL_GPIO_DeInit+0x220>)
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	089b      	lsrs	r3, r3, #2
 800bf60:	400a      	ands	r2, r1
 800bf62:	3302      	adds	r3, #2
 800bf64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bf68:	4b3c      	ldr	r3, [pc, #240]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	43db      	mvns	r3, r3
 800bf70:	493a      	ldr	r1, [pc, #232]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bf76:	4b39      	ldr	r3, [pc, #228]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	4937      	ldr	r1, [pc, #220]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf80:	4013      	ands	r3, r2
 800bf82:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bf84:	4b35      	ldr	r3, [pc, #212]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	43db      	mvns	r3, r3
 800bf8c:	4933      	ldr	r1, [pc, #204]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf8e:	4013      	ands	r3, r2
 800bf90:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bf92:	4b32      	ldr	r3, [pc, #200]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf94:	68da      	ldr	r2, [r3, #12]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	43db      	mvns	r3, r3
 800bf9a:	4930      	ldr	r1, [pc, #192]	; (800c05c <HAL_GPIO_DeInit+0x224>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	2103      	movs	r1, #3
 800bfaa:	fa01 f303 	lsl.w	r3, r1, r3
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	08da      	lsrs	r2, r3, #3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3208      	adds	r2, #8
 800bfbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	220f      	movs	r2, #15
 800bfca:	fa02 f303 	lsl.w	r3, r2, r3
 800bfce:	43db      	mvns	r3, r3
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	08d2      	lsrs	r2, r2, #3
 800bfd4:	4019      	ands	r1, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3208      	adds	r2, #8
 800bfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689a      	ldr	r2, [r3, #8]
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	2103      	movs	r1, #3
 800bfe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfec:	43db      	mvns	r3, r3
 800bfee:	401a      	ands	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	2101      	movs	r1, #1
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	fa01 f303 	lsl.w	r3, r1, r3
 800c000:	43db      	mvns	r3, r3
 800c002:	401a      	ands	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	2103      	movs	r1, #3
 800c012:	fa01 f303 	lsl.w	r3, r1, r3
 800c016:	43db      	mvns	r3, r3
 800c018:	401a      	ands	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	3301      	adds	r3, #1
 800c022:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	fa22 f303 	lsr.w	r3, r2, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f47f af3b 	bne.w	800bea8 <HAL_GPIO_DeInit+0x70>
  }
}
 800c032:	bf00      	nop
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	48000400 	.word	0x48000400
 800c040:	48000800 	.word	0x48000800
 800c044:	48000c00 	.word	0x48000c00
 800c048:	48001000 	.word	0x48001000
 800c04c:	48001400 	.word	0x48001400
 800c050:	48001800 	.word	0x48001800
 800c054:	0801db98 	.word	0x0801db98
 800c058:	40010000 	.word	0x40010000
 800c05c:	40010400 	.word	0x40010400

0800c060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	807b      	strh	r3, [r7, #2]
 800c06c:	4613      	mov	r3, r2
 800c06e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c070:	887b      	ldrh	r3, [r7, #2]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <HAL_GPIO_WritePin+0x20>
 800c076:	887b      	ldrh	r3, [r7, #2]
 800c078:	0c1b      	lsrs	r3, r3, #16
 800c07a:	041b      	lsls	r3, r3, #16
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <HAL_GPIO_WritePin+0x2a>
 800c080:	f240 119d 	movw	r1, #413	; 0x19d
 800c084:	480d      	ldr	r0, [pc, #52]	; (800c0bc <HAL_GPIO_WritePin+0x5c>)
 800c086:	f00c fb92 	bl	80187ae <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800c08a:	787b      	ldrb	r3, [r7, #1]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <HAL_GPIO_WritePin+0x40>
 800c090:	787b      	ldrb	r3, [r7, #1]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d004      	beq.n	800c0a0 <HAL_GPIO_WritePin+0x40>
 800c096:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800c09a:	4808      	ldr	r0, [pc, #32]	; (800c0bc <HAL_GPIO_WritePin+0x5c>)
 800c09c:	f00c fb87 	bl	80187ae <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800c0a0:	787b      	ldrb	r3, [r7, #1]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c0a6:	887a      	ldrh	r2, [r7, #2]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c0ac:	e002      	b.n	800c0b4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c0ae:	887a      	ldrh	r2, [r7, #2]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	0801db98 	.word	0x0801db98

0800c0c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00b      	beq.n	800c0e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d4:	d007      	beq.n	800c0e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0dc:	d003      	beq.n	800c0e6 <HAL_PWREx_ControlVoltageScaling+0x26>
 800c0de:	219e      	movs	r1, #158	; 0x9e
 800c0e0:	484d      	ldr	r0, [pc, #308]	; (800c218 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800c0e2:	f00c fb64 	bl	80187ae <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d141      	bne.n	800c170 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c0ec:	4b4b      	ldr	r3, [pc, #300]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f8:	d131      	bne.n	800c15e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c0fa:	4b48      	ldr	r3, [pc, #288]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c100:	4a46      	ldr	r2, [pc, #280]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c106:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c10a:	4b44      	ldr	r3, [pc, #272]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c112:	4a42      	ldr	r2, [pc, #264]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c11a:	4b41      	ldr	r3, [pc, #260]	; (800c220 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2232      	movs	r2, #50	; 0x32
 800c120:	fb02 f303 	mul.w	r3, r2, r3
 800c124:	4a3f      	ldr	r2, [pc, #252]	; (800c224 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800c126:	fba2 2303 	umull	r2, r3, r2, r3
 800c12a:	0c9b      	lsrs	r3, r3, #18
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c130:	e002      	b.n	800c138 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3b01      	subs	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c138:	4b38      	ldr	r3, [pc, #224]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c144:	d102      	bne.n	800c14c <HAL_PWREx_ControlVoltageScaling+0x8c>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1f2      	bne.n	800c132 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c14c:	4b33      	ldr	r3, [pc, #204]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c158:	d158      	bne.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e057      	b.n	800c20e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c15e:	4b2f      	ldr	r3, [pc, #188]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c164:	4a2d      	ldr	r2, [pc, #180]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c16a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c16e:	e04d      	b.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c176:	d141      	bne.n	800c1fc <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c178:	4b28      	ldr	r3, [pc, #160]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c184:	d131      	bne.n	800c1ea <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c186:	4b25      	ldr	r3, [pc, #148]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c18c:	4a23      	ldr	r2, [pc, #140]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c18e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c192:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c196:	4b21      	ldr	r3, [pc, #132]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c19e:	4a1f      	ldr	r2, [pc, #124]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1a6:	4b1e      	ldr	r3, [pc, #120]	; (800c220 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2232      	movs	r2, #50	; 0x32
 800c1ac:	fb02 f303 	mul.w	r3, r2, r3
 800c1b0:	4a1c      	ldr	r2, [pc, #112]	; (800c224 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	0c9b      	lsrs	r3, r3, #18
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1bc:	e002      	b.n	800c1c4 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1c4:	4b15      	ldr	r3, [pc, #84]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d0:	d102      	bne.n	800c1d8 <HAL_PWREx_ControlVoltageScaling+0x118>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1f2      	bne.n	800c1be <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c1d8:	4b10      	ldr	r3, [pc, #64]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1e4:	d112      	bne.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	e011      	b.n	800c20e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1ea:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f0:	4a0a      	ldr	r2, [pc, #40]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c1fa:	e007      	b.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c204:	4a05      	ldr	r2, [pc, #20]	; (800c21c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c20a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	0801dbe4 	.word	0x0801dbe4
 800c21c:	40007000 	.word	0x40007000
 800c220:	200000d0 	.word	0x200000d0
 800c224:	431bde83 	.word	0x431bde83

0800c228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e3ff      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d022      	beq.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d11c      	bne.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d116      	bne.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 0320 	and.w	r3, r3, #32
 800c262:	2b00      	cmp	r3, #0
 800c264:	d110      	bne.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0308 	and.w	r3, r3, #8
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10a      	bne.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0304 	and.w	r3, r3, #4
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d104      	bne.n	800c288 <HAL_RCC_OscConfig+0x60>
 800c27e:	f240 114b 	movw	r1, #331	; 0x14b
 800c282:	48a4      	ldr	r0, [pc, #656]	; (800c514 <HAL_RCC_OscConfig+0x2ec>)
 800c284:	f00c fa93 	bl	80187ae <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 8089 	beq.w	800c3a8 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00e      	beq.n	800c2bc <HAL_RCC_OscConfig+0x94>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a6:	d009      	beq.n	800c2bc <HAL_RCC_OscConfig+0x94>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2b0:	d004      	beq.n	800c2bc <HAL_RCC_OscConfig+0x94>
 800c2b2:	f240 1151 	movw	r1, #337	; 0x151
 800c2b6:	4897      	ldr	r0, [pc, #604]	; (800c514 <HAL_RCC_OscConfig+0x2ec>)
 800c2b8:	f00c fa79 	bl	80187ae <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2bc:	4b96      	ldr	r3, [pc, #600]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f003 030c 	and.w	r3, r3, #12
 800c2c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2c6:	4b94      	ldr	r3, [pc, #592]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f003 0303 	and.w	r3, r3, #3
 800c2ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	2b0c      	cmp	r3, #12
 800c2d4:	d102      	bne.n	800c2dc <HAL_RCC_OscConfig+0xb4>
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d002      	beq.n	800c2e2 <HAL_RCC_OscConfig+0xba>
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b08      	cmp	r3, #8
 800c2e0:	d10b      	bne.n	800c2fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2e2:	4b8d      	ldr	r3, [pc, #564]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d05b      	beq.n	800c3a6 <HAL_RCC_OscConfig+0x17e>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d157      	bne.n	800c3a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e39f      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c302:	d106      	bne.n	800c312 <HAL_RCC_OscConfig+0xea>
 800c304:	4b84      	ldr	r3, [pc, #528]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a83      	ldr	r2, [pc, #524]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c30a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	e01d      	b.n	800c34e <HAL_RCC_OscConfig+0x126>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c31a:	d10c      	bne.n	800c336 <HAL_RCC_OscConfig+0x10e>
 800c31c:	4b7e      	ldr	r3, [pc, #504]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a7d      	ldr	r2, [pc, #500]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	4b7b      	ldr	r3, [pc, #492]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a7a      	ldr	r2, [pc, #488]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	e00b      	b.n	800c34e <HAL_RCC_OscConfig+0x126>
 800c336:	4b78      	ldr	r3, [pc, #480]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a77      	ldr	r2, [pc, #476]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	4b75      	ldr	r3, [pc, #468]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a74      	ldr	r2, [pc, #464]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c34c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d013      	beq.n	800c37e <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c356:	f7fa fbb1 	bl	8006abc <HAL_GetTick>
 800c35a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c35c:	e008      	b.n	800c370 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c35e:	f7fa fbad 	bl	8006abc <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	2b64      	cmp	r3, #100	; 0x64
 800c36a:	d901      	bls.n	800c370 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e364      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c370:	4b69      	ldr	r3, [pc, #420]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d0f0      	beq.n	800c35e <HAL_RCC_OscConfig+0x136>
 800c37c:	e014      	b.n	800c3a8 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37e:	f7fa fb9d 	bl	8006abc <HAL_GetTick>
 800c382:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c384:	e008      	b.n	800c398 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c386:	f7fa fb99 	bl	8006abc <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b64      	cmp	r3, #100	; 0x64
 800c392:	d901      	bls.n	800c398 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e350      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c398:	4b5f      	ldr	r3, [pc, #380]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1f0      	bne.n	800c386 <HAL_RCC_OscConfig+0x15e>
 800c3a4:	e000      	b.n	800c3a8 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 808b 	beq.w	800c4cc <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d009      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x1aa>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x1aa>
 800c3c8:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800c3cc:	4851      	ldr	r0, [pc, #324]	; (800c514 <HAL_RCC_OscConfig+0x2ec>)
 800c3ce:	f00c f9ee 	bl	80187ae <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b7f      	cmp	r3, #127	; 0x7f
 800c3d8:	d904      	bls.n	800c3e4 <HAL_RCC_OscConfig+0x1bc>
 800c3da:	f240 1187 	movw	r1, #391	; 0x187
 800c3de:	484d      	ldr	r0, [pc, #308]	; (800c514 <HAL_RCC_OscConfig+0x2ec>)
 800c3e0:	f00c f9e5 	bl	80187ae <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3e4:	4b4c      	ldr	r3, [pc, #304]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f003 030c 	and.w	r3, r3, #12
 800c3ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3ee:	4b4a      	ldr	r3, [pc, #296]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	2b0c      	cmp	r3, #12
 800c3fc:	d102      	bne.n	800c404 <HAL_RCC_OscConfig+0x1dc>
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d002      	beq.n	800c40a <HAL_RCC_OscConfig+0x1e2>
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	2b04      	cmp	r3, #4
 800c408:	d11d      	bne.n	800c446 <HAL_RCC_OscConfig+0x21e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c40a:	4b43      	ldr	r3, [pc, #268]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <HAL_RCC_OscConfig+0x1fa>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e30b      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c422:	4b3d      	ldr	r3, [pc, #244]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	061b      	lsls	r3, r3, #24
 800c430:	4939      	ldr	r1, [pc, #228]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c432:	4313      	orrs	r3, r2
 800c434:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c436:	2000      	movs	r0, #0
 800c438:	f00c f9e8 	bl	801880c <HAL_InitTick>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d043      	beq.n	800c4ca <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e2f9      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d023      	beq.n	800c496 <HAL_RCC_OscConfig+0x26e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c44e:	4b32      	ldr	r3, [pc, #200]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a31      	ldr	r2, [pc, #196]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c45a:	f7fa fb2f 	bl	8006abc <HAL_GetTick>
 800c45e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c460:	e008      	b.n	800c474 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c462:	f7fa fb2b 	bl	8006abc <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d901      	bls.n	800c474 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e2e2      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c474:	4b28      	ldr	r3, [pc, #160]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0f0      	beq.n	800c462 <HAL_RCC_OscConfig+0x23a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c480:	4b25      	ldr	r3, [pc, #148]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	061b      	lsls	r3, r3, #24
 800c48e:	4922      	ldr	r1, [pc, #136]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c490:	4313      	orrs	r3, r2
 800c492:	604b      	str	r3, [r1, #4]
 800c494:	e01a      	b.n	800c4cc <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c496:	4b20      	ldr	r3, [pc, #128]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a1f      	ldr	r2, [pc, #124]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c49c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4a2:	f7fa fb0b 	bl	8006abc <HAL_GetTick>
 800c4a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4a8:	e008      	b.n	800c4bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4aa:	f7fa fb07 	bl	8006abc <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d901      	bls.n	800c4bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	e2be      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4bc:	4b16      	ldr	r3, [pc, #88]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1f0      	bne.n	800c4aa <HAL_RCC_OscConfig+0x282>
 800c4c8:	e000      	b.n	800c4cc <HAL_RCC_OscConfig+0x2a4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c4ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d04e      	beq.n	800c576 <HAL_RCC_OscConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x2ca>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d004      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x2ca>
 800c4e8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800c4ec:	4809      	ldr	r0, [pc, #36]	; (800c514 <HAL_RCC_OscConfig+0x2ec>)
 800c4ee:	f00c f95e 	bl	80187ae <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d021      	beq.n	800c53e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4fa:	4b07      	ldr	r3, [pc, #28]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c4fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c500:	4a05      	ldr	r2, [pc, #20]	; (800c518 <HAL_RCC_OscConfig+0x2f0>)
 800c502:	f043 0301 	orr.w	r3, r3, #1
 800c506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c50a:	f7fa fad7 	bl	8006abc <HAL_GetTick>
 800c50e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c510:	e00d      	b.n	800c52e <HAL_RCC_OscConfig+0x306>
 800c512:	bf00      	nop
 800c514:	0801dc30 	.word	0x0801dc30
 800c518:	40021000 	.word	0x40021000
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c51c:	f7fa face 	bl	8006abc <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b02      	cmp	r3, #2
 800c528:	d901      	bls.n	800c52e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e285      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c52e:	4b95      	ldr	r3, [pc, #596]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d0ef      	beq.n	800c51c <HAL_RCC_OscConfig+0x2f4>
 800c53c:	e01b      	b.n	800c576 <HAL_RCC_OscConfig+0x34e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c53e:	4b91      	ldr	r3, [pc, #580]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c544:	4a8f      	ldr	r2, [pc, #572]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c54e:	f7fa fab5 	bl	8006abc <HAL_GetTick>
 800c552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c554:	e008      	b.n	800c568 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c556:	f7fa fab1 	bl	8006abc <HAL_GetTick>
 800c55a:	4602      	mov	r2, r0
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	2b02      	cmp	r3, #2
 800c562:	d901      	bls.n	800c568 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 800c564:	2303      	movs	r3, #3
 800c566:	e268      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c568:	4b86      	ldr	r3, [pc, #536]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c56a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1ef      	bne.n	800c556 <HAL_RCC_OscConfig+0x32e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0304 	and.w	r3, r3, #4
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80b7 	beq.w	800c6f2 <HAL_RCC_OscConfig+0x4ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c584:	2300      	movs	r3, #0
 800c586:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00c      	beq.n	800c5aa <HAL_RCC_OscConfig+0x382>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d008      	beq.n	800c5aa <HAL_RCC_OscConfig+0x382>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b05      	cmp	r3, #5
 800c59e:	d004      	beq.n	800c5aa <HAL_RCC_OscConfig+0x382>
 800c5a0:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800c5a4:	4878      	ldr	r0, [pc, #480]	; (800c788 <HAL_RCC_OscConfig+0x560>)
 800c5a6:	f00c f902 	bl	80187ae <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c5aa:	4b76      	ldr	r3, [pc, #472]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_RCC_OscConfig+0x392>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <HAL_RCC_OscConfig+0x394>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00d      	beq.n	800c5dc <HAL_RCC_OscConfig+0x3b4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c0:	4b70      	ldr	r3, [pc, #448]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c4:	4a6f      	ldr	r2, [pc, #444]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c5c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c5cc:	4b6d      	ldr	r3, [pc, #436]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5dc:	4b6b      	ldr	r3, [pc, #428]	; (800c78c <HAL_RCC_OscConfig+0x564>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d118      	bne.n	800c61a <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c5e8:	4b68      	ldr	r3, [pc, #416]	; (800c78c <HAL_RCC_OscConfig+0x564>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a67      	ldr	r2, [pc, #412]	; (800c78c <HAL_RCC_OscConfig+0x564>)
 800c5ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5f4:	f7fa fa62 	bl	8006abc <HAL_GetTick>
 800c5f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5fa:	e008      	b.n	800c60e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5fc:	f7fa fa5e 	bl	8006abc <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b02      	cmp	r3, #2
 800c608:	d901      	bls.n	800c60e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e215      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c60e:	4b5f      	ldr	r3, [pc, #380]	; (800c78c <HAL_RCC_OscConfig+0x564>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c616:	2b00      	cmp	r3, #0
 800c618:	d0f0      	beq.n	800c5fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d108      	bne.n	800c634 <HAL_RCC_OscConfig+0x40c>
 800c622:	4b58      	ldr	r3, [pc, #352]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c628:	4a56      	ldr	r2, [pc, #344]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c62a:	f043 0301 	orr.w	r3, r3, #1
 800c62e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c632:	e024      	b.n	800c67e <HAL_RCC_OscConfig+0x456>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	2b05      	cmp	r3, #5
 800c63a:	d110      	bne.n	800c65e <HAL_RCC_OscConfig+0x436>
 800c63c:	4b51      	ldr	r3, [pc, #324]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c642:	4a50      	ldr	r2, [pc, #320]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c644:	f043 0304 	orr.w	r3, r3, #4
 800c648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c64c:	4b4d      	ldr	r3, [pc, #308]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c652:	4a4c      	ldr	r2, [pc, #304]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c654:	f043 0301 	orr.w	r3, r3, #1
 800c658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c65c:	e00f      	b.n	800c67e <HAL_RCC_OscConfig+0x456>
 800c65e:	4b49      	ldr	r3, [pc, #292]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c664:	4a47      	ldr	r2, [pc, #284]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c666:	f023 0301 	bic.w	r3, r3, #1
 800c66a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c66e:	4b45      	ldr	r3, [pc, #276]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c674:	4a43      	ldr	r2, [pc, #268]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c676:	f023 0304 	bic.w	r3, r3, #4
 800c67a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d016      	beq.n	800c6b4 <HAL_RCC_OscConfig+0x48c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c686:	f7fa fa19 	bl	8006abc <HAL_GetTick>
 800c68a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c68c:	e00a      	b.n	800c6a4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c68e:	f7fa fa15 	bl	8006abc <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e1ca      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6a4:	4b37      	ldr	r3, [pc, #220]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0ed      	beq.n	800c68e <HAL_RCC_OscConfig+0x466>
 800c6b2:	e015      	b.n	800c6e0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b4:	f7fa fa02 	bl	8006abc <HAL_GetTick>
 800c6b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6ba:	e00a      	b.n	800c6d2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6bc:	f7fa f9fe 	bl	8006abc <HAL_GetTick>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d901      	bls.n	800c6d2 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e1b3      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6d2:	4b2c      	ldr	r3, [pc, #176]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1ed      	bne.n	800c6bc <HAL_RCC_OscConfig+0x494>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6e0:	7ffb      	ldrb	r3, [r7, #31]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d105      	bne.n	800c6f2 <HAL_RCC_OscConfig+0x4ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6e6:	4b27      	ldr	r3, [pc, #156]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ea:	4a26      	ldr	r2, [pc, #152]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c6ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d04f      	beq.n	800c79e <HAL_RCC_OscConfig+0x576>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d008      	beq.n	800c718 <HAL_RCC_OscConfig+0x4f0>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d004      	beq.n	800c718 <HAL_RCC_OscConfig+0x4f0>
 800c70e:	f240 2141 	movw	r1, #577	; 0x241
 800c712:	481d      	ldr	r0, [pc, #116]	; (800c788 <HAL_RCC_OscConfig+0x560>)
 800c714:	f00c f84b 	bl	80187ae <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01c      	beq.n	800c75a <HAL_RCC_OscConfig+0x532>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c720:	4b18      	ldr	r3, [pc, #96]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c726:	4a17      	ldr	r2, [pc, #92]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c728:	f043 0301 	orr.w	r3, r3, #1
 800c72c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c730:	f7fa f9c4 	bl	8006abc <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c738:	f7fa f9c0 	bl	8006abc <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e177      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c74a:	4b0e      	ldr	r3, [pc, #56]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c74c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0ef      	beq.n	800c738 <HAL_RCC_OscConfig+0x510>
 800c758:	e021      	b.n	800c79e <HAL_RCC_OscConfig+0x576>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c75a:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c75c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c760:	4a08      	ldr	r2, [pc, #32]	; (800c784 <HAL_RCC_OscConfig+0x55c>)
 800c762:	f023 0301 	bic.w	r3, r3, #1
 800c766:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c76a:	f7fa f9a7 	bl	8006abc <HAL_GetTick>
 800c76e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c770:	e00e      	b.n	800c790 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c772:	f7fa f9a3 	bl	8006abc <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d907      	bls.n	800c790 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e15a      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
 800c784:	40021000 	.word	0x40021000
 800c788:	0801dc30 	.word	0x0801dc30
 800c78c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c790:	4ba6      	ldr	r3, [pc, #664]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1e9      	bne.n	800c772 <HAL_RCC_OscConfig+0x54a>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	69db      	ldr	r3, [r3, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00c      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x598>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d008      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x598>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d004      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x598>
 800c7b6:	f240 216a 	movw	r1, #618	; 0x26a
 800c7ba:	489d      	ldr	r0, [pc, #628]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c7bc:	f00b fff7 	bl	80187ae <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	69db      	ldr	r3, [r3, #28]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 8137 	beq.w	800ca38 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c7ca:	4b98      	ldr	r3, [pc, #608]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f003 030c 	and.w	r3, r3, #12
 800c7d2:	2b0c      	cmp	r3, #12
 800c7d4:	f000 80ea 	beq.w	800c9ac <HAL_RCC_OscConfig+0x784>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	f040 80bd 	bne.w	800c95c <HAL_RCC_OscConfig+0x734>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00c      	beq.n	800c804 <HAL_RCC_OscConfig+0x5dc>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d008      	beq.n	800c804 <HAL_RCC_OscConfig+0x5dc>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d004      	beq.n	800c804 <HAL_RCC_OscConfig+0x5dc>
 800c7fa:	f44f 711d 	mov.w	r1, #628	; 0x274
 800c7fe:	488c      	ldr	r0, [pc, #560]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c800:	f00b ffd5 	bl	80187ae <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_RCC_OscConfig+0x5ec>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c810:	2b10      	cmp	r3, #16
 800c812:	d904      	bls.n	800c81e <HAL_RCC_OscConfig+0x5f6>
 800c814:	f240 2175 	movw	r1, #629	; 0x275
 800c818:	4885      	ldr	r0, [pc, #532]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c81a:	f00b ffc8 	bl	80187ae <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c822:	2b07      	cmp	r3, #7
 800c824:	d903      	bls.n	800c82e <HAL_RCC_OscConfig+0x606>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82a:	2b7f      	cmp	r3, #127	; 0x7f
 800c82c:	d904      	bls.n	800c838 <HAL_RCC_OscConfig+0x610>
 800c82e:	f240 2176 	movw	r1, #630	; 0x276
 800c832:	487f      	ldr	r0, [pc, #508]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c834:	f00b ffbb 	bl	80187ae <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d903      	bls.n	800c848 <HAL_RCC_OscConfig+0x620>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	2b1f      	cmp	r3, #31
 800c846:	d904      	bls.n	800c852 <HAL_RCC_OscConfig+0x62a>
 800c848:	f240 2177 	movw	r1, #631	; 0x277
 800c84c:	4878      	ldr	r0, [pc, #480]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c84e:	f00b ffae 	bl	80187ae <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c856:	2b02      	cmp	r3, #2
 800c858:	d010      	beq.n	800c87c <HAL_RCC_OscConfig+0x654>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	2b04      	cmp	r3, #4
 800c860:	d00c      	beq.n	800c87c <HAL_RCC_OscConfig+0x654>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c866:	2b06      	cmp	r3, #6
 800c868:	d008      	beq.n	800c87c <HAL_RCC_OscConfig+0x654>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d004      	beq.n	800c87c <HAL_RCC_OscConfig+0x654>
 800c872:	f44f 711e 	mov.w	r1, #632	; 0x278
 800c876:	486e      	ldr	r0, [pc, #440]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c878:	f00b ff99 	bl	80187ae <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c880:	2b02      	cmp	r3, #2
 800c882:	d010      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x67e>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d00c      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x67e>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c890:	2b06      	cmp	r3, #6
 800c892:	d008      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x67e>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d004      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x67e>
 800c89c:	f240 2179 	movw	r1, #633	; 0x279
 800c8a0:	4863      	ldr	r0, [pc, #396]	; (800ca30 <HAL_RCC_OscConfig+0x808>)
 800c8a2:	f00b ff84 	bl	80187ae <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8a6:	4b61      	ldr	r3, [pc, #388]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a60      	ldr	r2, [pc, #384]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c8ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b2:	f7fa f903 	bl	8006abc <HAL_GetTick>
 800c8b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8b8:	e008      	b.n	800c8cc <HAL_RCC_OscConfig+0x6a4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8ba:	f7fa f8ff 	bl	8006abc <HAL_GetTick>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d901      	bls.n	800c8cc <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e0b6      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8cc:	4b57      	ldr	r3, [pc, #348]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1f0      	bne.n	800c8ba <HAL_RCC_OscConfig+0x692>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8d8:	4b54      	ldr	r3, [pc, #336]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c8da:	68da      	ldr	r2, [r3, #12]
 800c8dc:	4b55      	ldr	r3, [pc, #340]	; (800ca34 <HAL_RCC_OscConfig+0x80c>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	6a11      	ldr	r1, [r2, #32]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c8e8:	3a01      	subs	r2, #1
 800c8ea:	0112      	lsls	r2, r2, #4
 800c8ec:	4311      	orrs	r1, r2
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c8f2:	0212      	lsls	r2, r2, #8
 800c8f4:	4311      	orrs	r1, r2
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c8fa:	0852      	lsrs	r2, r2, #1
 800c8fc:	3a01      	subs	r2, #1
 800c8fe:	0552      	lsls	r2, r2, #21
 800c900:	4311      	orrs	r1, r2
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c906:	0852      	lsrs	r2, r2, #1
 800c908:	3a01      	subs	r2, #1
 800c90a:	0652      	lsls	r2, r2, #25
 800c90c:	4311      	orrs	r1, r2
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c912:	06d2      	lsls	r2, r2, #27
 800c914:	430a      	orrs	r2, r1
 800c916:	4945      	ldr	r1, [pc, #276]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c918:	4313      	orrs	r3, r2
 800c91a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c91c:	4b43      	ldr	r3, [pc, #268]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a42      	ldr	r2, [pc, #264]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c928:	4b40      	ldr	r3, [pc, #256]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	4a3f      	ldr	r2, [pc, #252]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c92e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c934:	f7fa f8c2 	bl	8006abc <HAL_GetTick>
 800c938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c93a:	e008      	b.n	800c94e <HAL_RCC_OscConfig+0x726>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c93c:	f7fa f8be 	bl	8006abc <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e075      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c94e:	4b37      	ldr	r3, [pc, #220]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f0      	beq.n	800c93c <HAL_RCC_OscConfig+0x714>
 800c95a:	e06d      	b.n	800ca38 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c95c:	4b33      	ldr	r3, [pc, #204]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a32      	ldr	r2, [pc, #200]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c966:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c968:	4b30      	ldr	r3, [pc, #192]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	4a2f      	ldr	r2, [pc, #188]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c96e:	f023 0303 	bic.w	r3, r3, #3
 800c972:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c974:	4b2d      	ldr	r3, [pc, #180]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	4a2c      	ldr	r2, [pc, #176]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c97a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c97e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c984:	f7fa f89a 	bl	8006abc <HAL_GetTick>
 800c988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c98a:	e008      	b.n	800c99e <HAL_RCC_OscConfig+0x776>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c98c:	f7fa f896 	bl	8006abc <HAL_GetTick>
 800c990:	4602      	mov	r2, r0
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	2b02      	cmp	r3, #2
 800c998:	d901      	bls.n	800c99e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800c99a:	2303      	movs	r3, #3
 800c99c:	e04d      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c99e:	4b23      	ldr	r3, [pc, #140]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1f0      	bne.n	800c98c <HAL_RCC_OscConfig+0x764>
 800c9aa:	e045      	b.n	800ca38 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d101      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x790>
      {
        return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e040      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c9b8:	4b1c      	ldr	r3, [pc, #112]	; (800ca2c <HAL_RCC_OscConfig+0x804>)
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f003 0203 	and.w	r2, r3, #3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d12c      	bne.n	800ca26 <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d123      	bne.n	800ca26 <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d11b      	bne.n	800ca26 <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d113      	bne.n	800ca26 <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca08:	085b      	lsrs	r3, r3, #1
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d109      	bne.n	800ca26 <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1c:	085b      	lsrs	r3, r3, #1
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d008      	beq.n	800ca38 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e007      	b.n	800ca3a <HAL_RCC_OscConfig+0x812>
 800ca2a:	bf00      	nop
 800ca2c:	40021000 	.word	0x40021000
 800ca30:	0801dc30 	.word	0x0801dc30
 800ca34:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop

0800ca44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e1e0      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 030f 	and.w	r3, r3, #15
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d005      	beq.n	800ca74 <HAL_RCC_ClockConfig+0x30>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f023 030f 	bic.w	r3, r3, #15
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d004      	beq.n	800ca7e <HAL_RCC_ClockConfig+0x3a>
 800ca74:	f240 3112 	movw	r1, #786	; 0x312
 800ca78:	4897      	ldr	r0, [pc, #604]	; (800ccd8 <HAL_RCC_ClockConfig+0x294>)
 800ca7a:	f00b fe98 	bl	80187ae <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d031      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d02e      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d02b      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d028      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d025      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b05      	cmp	r3, #5
 800caa0:	d022      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b06      	cmp	r3, #6
 800caa6:	d01f      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	2b07      	cmp	r3, #7
 800caac:	d01c      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b08      	cmp	r3, #8
 800cab2:	d019      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2b09      	cmp	r3, #9
 800cab8:	d016      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b0a      	cmp	r3, #10
 800cabe:	d013      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2b0b      	cmp	r3, #11
 800cac4:	d010      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b0c      	cmp	r3, #12
 800caca:	d00d      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b0d      	cmp	r3, #13
 800cad0:	d00a      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b0e      	cmp	r3, #14
 800cad6:	d007      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b0f      	cmp	r3, #15
 800cadc:	d004      	beq.n	800cae8 <HAL_RCC_ClockConfig+0xa4>
 800cade:	f240 3113 	movw	r1, #787	; 0x313
 800cae2:	487d      	ldr	r0, [pc, #500]	; (800ccd8 <HAL_RCC_ClockConfig+0x294>)
 800cae4:	f00b fe63 	bl	80187ae <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cae8:	4b7c      	ldr	r3, [pc, #496]	; (800ccdc <HAL_RCC_ClockConfig+0x298>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 030f 	and.w	r3, r3, #15
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d910      	bls.n	800cb18 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800caf6:	4b79      	ldr	r3, [pc, #484]	; (800ccdc <HAL_RCC_ClockConfig+0x298>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f023 020f 	bic.w	r2, r3, #15
 800cafe:	4977      	ldr	r1, [pc, #476]	; (800ccdc <HAL_RCC_ClockConfig+0x298>)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb06:	4b75      	ldr	r3, [pc, #468]	; (800ccdc <HAL_RCC_ClockConfig+0x298>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d001      	beq.n	800cb18 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e182      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 8085 	beq.w	800cc30 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d00c      	beq.n	800cb48 <HAL_RCC_ClockConfig+0x104>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d008      	beq.n	800cb48 <HAL_RCC_ClockConfig+0x104>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d004      	beq.n	800cb48 <HAL_RCC_ClockConfig+0x104>
 800cb3e:	f240 312a 	movw	r1, #810	; 0x32a
 800cb42:	4865      	ldr	r0, [pc, #404]	; (800ccd8 <HAL_RCC_ClockConfig+0x294>)
 800cb44:	f00b fe33 	bl	80187ae <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d129      	bne.n	800cba4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb50:	4b63      	ldr	r3, [pc, #396]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e15e      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cb60:	f000 fa48 	bl	800cff4 <RCC_GetSysClockFreqFromPLLSource>
 800cb64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	4a5e      	ldr	r2, [pc, #376]	; (800cce4 <HAL_RCC_ClockConfig+0x2a0>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d93f      	bls.n	800cbee <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cb6e:	4b5c      	ldr	r3, [pc, #368]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d009      	beq.n	800cb8e <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d033      	beq.n	800cbee <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d12f      	bne.n	800cbee <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cb8e:	4b54      	ldr	r3, [pc, #336]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb96:	4a52      	ldr	r2, [pc, #328]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cb9e:	2380      	movs	r3, #128	; 0x80
 800cba0:	617b      	str	r3, [r7, #20]
 800cba2:	e024      	b.n	800cbee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cbac:	4b4c      	ldr	r3, [pc, #304]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d109      	bne.n	800cbcc <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e130      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbbc:	4b48      	ldr	r3, [pc, #288]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d101      	bne.n	800cbcc <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e128      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cbcc:	f000 f936 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800cbd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	4a43      	ldr	r2, [pc, #268]	; (800cce4 <HAL_RCC_ClockConfig+0x2a0>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d909      	bls.n	800cbee <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cbda:	4b41      	ldr	r3, [pc, #260]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbe2:	4a3f      	ldr	r2, [pc, #252]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cbea:	2380      	movs	r3, #128	; 0x80
 800cbec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cbee:	4b3c      	ldr	r3, [pc, #240]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f023 0203 	bic.w	r2, r3, #3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	4939      	ldr	r1, [pc, #228]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc00:	f7f9 ff5c 	bl	8006abc <HAL_GetTick>
 800cc04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc06:	e00a      	b.n	800cc1e <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc08:	f7f9 ff58 	bl	8006abc <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e0ff      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc1e:	4b30      	ldr	r3, [pc, #192]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 020c 	and.w	r2, r3, #12
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d1eb      	bne.n	800cc08 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d055      	beq.n	800cce8 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d005      	beq.n	800cc54 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc48:	4b25      	ldr	r3, [pc, #148]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	4a24      	ldr	r2, [pc, #144]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cc4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cc52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0308 	and.w	r3, r3, #8
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d007      	beq.n	800cc70 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cc60:	4b1f      	ldr	r3, [pc, #124]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc68:	4a1d      	ldr	r2, [pc, #116]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800cc6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cc6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d024      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b80      	cmp	r3, #128	; 0x80
 800cc7e:	d020      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b90      	cmp	r3, #144	; 0x90
 800cc86:	d01c      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	2ba0      	cmp	r3, #160	; 0xa0
 800cc8e:	d018      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	2bb0      	cmp	r3, #176	; 0xb0
 800cc96:	d014      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	2bc0      	cmp	r3, #192	; 0xc0
 800cc9e:	d010      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	2bd0      	cmp	r3, #208	; 0xd0
 800cca6:	d00c      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	2be0      	cmp	r3, #224	; 0xe0
 800ccae:	d008      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	2bf0      	cmp	r3, #240	; 0xf0
 800ccb6:	d004      	beq.n	800ccc2 <HAL_RCC_ClockConfig+0x27e>
 800ccb8:	f240 3181 	movw	r1, #897	; 0x381
 800ccbc:	4806      	ldr	r0, [pc, #24]	; (800ccd8 <HAL_RCC_ClockConfig+0x294>)
 800ccbe:	f00b fd76 	bl	80187ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	4904      	ldr	r1, [pc, #16]	; (800cce0 <HAL_RCC_ClockConfig+0x29c>)
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	608b      	str	r3, [r1, #8]
 800ccd4:	e011      	b.n	800ccfa <HAL_RCC_ClockConfig+0x2b6>
 800ccd6:	bf00      	nop
 800ccd8:	0801dc30 	.word	0x0801dc30
 800ccdc:	40022000 	.word	0x40022000
 800cce0:	40021000 	.word	0x40021000
 800cce4:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b80      	cmp	r3, #128	; 0x80
 800ccec:	d105      	bne.n	800ccfa <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ccee:	4b4e      	ldr	r3, [pc, #312]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	4a4d      	ldr	r2, [pc, #308]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800ccf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ccfa:	4b4c      	ldr	r3, [pc, #304]	; (800ce2c <HAL_RCC_ClockConfig+0x3e8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 030f 	and.w	r3, r3, #15
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d21d      	bcs.n	800cd44 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd08:	4b48      	ldr	r3, [pc, #288]	; (800ce2c <HAL_RCC_ClockConfig+0x3e8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f023 020f 	bic.w	r2, r3, #15
 800cd10:	4946      	ldr	r1, [pc, #280]	; (800ce2c <HAL_RCC_ClockConfig+0x3e8>)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cd18:	f7f9 fed0 	bl	8006abc <HAL_GetTick>
 800cd1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd1e:	e00a      	b.n	800cd36 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd20:	f7f9 fecc 	bl	8006abc <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d901      	bls.n	800cd36 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e073      	b.n	800ce1e <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd36:	4b3d      	ldr	r3, [pc, #244]	; (800ce2c <HAL_RCC_ClockConfig+0x3e8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 030f 	and.w	r3, r3, #15
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d1ed      	bne.n	800cd20 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0304 	and.w	r3, r3, #4
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d025      	beq.n	800cd9c <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d018      	beq.n	800cd8a <HAL_RCC_ClockConfig+0x346>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd60:	d013      	beq.n	800cd8a <HAL_RCC_ClockConfig+0x346>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cd6a:	d00e      	beq.n	800cd8a <HAL_RCC_ClockConfig+0x346>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cd74:	d009      	beq.n	800cd8a <HAL_RCC_ClockConfig+0x346>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd7e:	d004      	beq.n	800cd8a <HAL_RCC_ClockConfig+0x346>
 800cd80:	f240 31a3 	movw	r1, #931	; 0x3a3
 800cd84:	482a      	ldr	r0, [pc, #168]	; (800ce30 <HAL_RCC_ClockConfig+0x3ec>)
 800cd86:	f00b fd12 	bl	80187ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd8a:	4b27      	ldr	r3, [pc, #156]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	4924      	ldr	r1, [pc, #144]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0308 	and.w	r3, r3, #8
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d026      	beq.n	800cdf6 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d018      	beq.n	800cde2 <HAL_RCC_ClockConfig+0x39e>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdb8:	d013      	beq.n	800cde2 <HAL_RCC_ClockConfig+0x39e>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cdc2:	d00e      	beq.n	800cde2 <HAL_RCC_ClockConfig+0x39e>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cdcc:	d009      	beq.n	800cde2 <HAL_RCC_ClockConfig+0x39e>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdd6:	d004      	beq.n	800cde2 <HAL_RCC_ClockConfig+0x39e>
 800cdd8:	f240 31aa 	movw	r1, #938	; 0x3aa
 800cddc:	4814      	ldr	r0, [pc, #80]	; (800ce30 <HAL_RCC_ClockConfig+0x3ec>)
 800cdde:	f00b fce6 	bl	80187ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cde2:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	490d      	ldr	r1, [pc, #52]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cdf6:	f000 f821 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <HAL_RCC_ClockConfig+0x3e4>)
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	091b      	lsrs	r3, r3, #4
 800ce02:	f003 030f 	and.w	r3, r3, #15
 800ce06:	4a0b      	ldr	r2, [pc, #44]	; (800ce34 <HAL_RCC_ClockConfig+0x3f0>)
 800ce08:	5cd3      	ldrb	r3, [r2, r3]
 800ce0a:	f003 031f 	and.w	r3, r3, #31
 800ce0e:	fa21 f303 	lsr.w	r3, r1, r3
 800ce12:	4a09      	ldr	r2, [pc, #36]	; (800ce38 <HAL_RCC_ClockConfig+0x3f4>)
 800ce14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(TICK_INT_PRIORITY);
 800ce16:	2000      	movs	r0, #0
 800ce18:	f00b fcf8 	bl	801880c <HAL_InitTick>
 800ce1c:	4603      	mov	r3, r0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	40021000 	.word	0x40021000
 800ce2c:	40022000 	.word	0x40022000
 800ce30:	0801dc30 	.word	0x0801dc30
 800ce34:	0801e05c 	.word	0x0801e05c
 800ce38:	200000d0 	.word	0x200000d0

0800ce3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ce42:	4b2c      	ldr	r3, [pc, #176]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f003 030c 	and.w	r3, r3, #12
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d102      	bne.n	800ce54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce4e:	4b2a      	ldr	r3, [pc, #168]	; (800cef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce50:	613b      	str	r3, [r7, #16]
 800ce52:	e047      	b.n	800cee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ce54:	4b27      	ldr	r3, [pc, #156]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f003 030c 	and.w	r3, r3, #12
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d102      	bne.n	800ce66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce60:	4b26      	ldr	r3, [pc, #152]	; (800cefc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce62:	613b      	str	r3, [r7, #16]
 800ce64:	e03e      	b.n	800cee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ce66:	4b23      	ldr	r3, [pc, #140]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f003 030c 	and.w	r3, r3, #12
 800ce6e:	2b0c      	cmp	r3, #12
 800ce70:	d136      	bne.n	800cee0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce72:	4b20      	ldr	r3, [pc, #128]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	f003 0303 	and.w	r3, r3, #3
 800ce7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce7c:	4b1d      	ldr	r3, [pc, #116]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	091b      	lsrs	r3, r3, #4
 800ce82:	f003 030f 	and.w	r3, r3, #15
 800ce86:	3301      	adds	r3, #1
 800ce88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	d10c      	bne.n	800ceaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce90:	4a1a      	ldr	r2, [pc, #104]	; (800cefc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce98:	4a16      	ldr	r2, [pc, #88]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce9a:	68d2      	ldr	r2, [r2, #12]
 800ce9c:	0a12      	lsrs	r2, r2, #8
 800ce9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cea2:	fb02 f303 	mul.w	r3, r2, r3
 800cea6:	617b      	str	r3, [r7, #20]
      break;
 800cea8:	e00c      	b.n	800cec4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ceaa:	4a13      	ldr	r2, [pc, #76]	; (800cef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb2:	4a10      	ldr	r2, [pc, #64]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ceb4:	68d2      	ldr	r2, [r2, #12]
 800ceb6:	0a12      	lsrs	r2, r2, #8
 800ceb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cebc:	fb02 f303 	mul.w	r3, r2, r3
 800cec0:	617b      	str	r3, [r7, #20]
      break;
 800cec2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cec4:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	0e5b      	lsrs	r3, r3, #25
 800ceca:	f003 0303 	and.w	r3, r3, #3
 800cece:	3301      	adds	r3, #1
 800ced0:	005b      	lsls	r3, r3, #1
 800ced2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cedc:	613b      	str	r3, [r7, #16]
 800cede:	e001      	b.n	800cee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cee4:	693b      	ldr	r3, [r7, #16]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	40021000 	.word	0x40021000
 800cef8:	00f42400 	.word	0x00f42400
 800cefc:	016e3600 	.word	0x016e3600

0800cf00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf04:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf06:	681b      	ldr	r3, [r3, #0]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	200000d0 	.word	0x200000d0

0800cf18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf1c:	f7ff fff0 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 800cf20:	4601      	mov	r1, r0
 800cf22:	4b06      	ldr	r3, [pc, #24]	; (800cf3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	0a1b      	lsrs	r3, r3, #8
 800cf28:	f003 0307 	and.w	r3, r3, #7
 800cf2c:	4a04      	ldr	r2, [pc, #16]	; (800cf40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf2e:	5cd3      	ldrb	r3, [r2, r3]
 800cf30:	f003 031f 	and.w	r3, r3, #31
 800cf34:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	40021000 	.word	0x40021000
 800cf40:	0801e06c 	.word	0x0801e06c

0800cf44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf48:	f7ff ffda 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	0adb      	lsrs	r3, r3, #11
 800cf54:	f003 0307 	and.w	r3, r3, #7
 800cf58:	4a04      	ldr	r2, [pc, #16]	; (800cf6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf5a:	5cd3      	ldrb	r3, [r2, r3]
 800cf5c:	f003 031f 	and.w	r3, r3, #31
 800cf60:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	40021000 	.word	0x40021000
 800cf6c:	0801e06c 	.word	0x0801e06c

0800cf70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d104      	bne.n	800cf8a <HAL_RCC_GetClockConfig+0x1a>
 800cf80:	f240 41d9 	movw	r1, #1241	; 0x4d9
 800cf84:	4818      	ldr	r0, [pc, #96]	; (800cfe8 <HAL_RCC_GetClockConfig+0x78>)
 800cf86:	f00b fc12 	bl	80187ae <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d104      	bne.n	800cf9a <HAL_RCC_GetClockConfig+0x2a>
 800cf90:	f240 41da 	movw	r1, #1242	; 0x4da
 800cf94:	4814      	ldr	r0, [pc, #80]	; (800cfe8 <HAL_RCC_GetClockConfig+0x78>)
 800cf96:	f00b fc0a 	bl	80187ae <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	220f      	movs	r2, #15
 800cf9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800cfa0:	4b12      	ldr	r3, [pc, #72]	; (800cfec <HAL_RCC_GetClockConfig+0x7c>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f003 0203 	and.w	r2, r3, #3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800cfac:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <HAL_RCC_GetClockConfig+0x7c>)
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cfb8:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <HAL_RCC_GetClockConfig+0x7c>)
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cfc4:	4b09      	ldr	r3, [pc, #36]	; (800cfec <HAL_RCC_GetClockConfig+0x7c>)
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	08db      	lsrs	r3, r3, #3
 800cfca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cfd2:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <HAL_RCC_GetClockConfig+0x80>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 020f 	and.w	r2, r3, #15
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	601a      	str	r2, [r3, #0]
}
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0801dc30 	.word	0x0801dc30
 800cfec:	40021000 	.word	0x40021000
 800cff0:	40022000 	.word	0x40022000

0800cff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b087      	sub	sp, #28
 800cff8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cffa:	4b1e      	ldr	r3, [pc, #120]	; (800d074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	f003 0303 	and.w	r3, r3, #3
 800d002:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d004:	4b1b      	ldr	r3, [pc, #108]	; (800d074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	091b      	lsrs	r3, r3, #4
 800d00a:	f003 030f 	and.w	r3, r3, #15
 800d00e:	3301      	adds	r3, #1
 800d010:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	2b03      	cmp	r3, #3
 800d016:	d10c      	bne.n	800d032 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d018:	4a17      	ldr	r2, [pc, #92]	; (800d078 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d020:	4a14      	ldr	r2, [pc, #80]	; (800d074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d022:	68d2      	ldr	r2, [r2, #12]
 800d024:	0a12      	lsrs	r2, r2, #8
 800d026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d02a:	fb02 f303 	mul.w	r3, r2, r3
 800d02e:	617b      	str	r3, [r7, #20]
    break;
 800d030:	e00c      	b.n	800d04c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d032:	4a12      	ldr	r2, [pc, #72]	; (800d07c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03a:	4a0e      	ldr	r2, [pc, #56]	; (800d074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d03c:	68d2      	ldr	r2, [r2, #12]
 800d03e:	0a12      	lsrs	r2, r2, #8
 800d040:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d044:	fb02 f303 	mul.w	r3, r2, r3
 800d048:	617b      	str	r3, [r7, #20]
    break;
 800d04a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d04c:	4b09      	ldr	r3, [pc, #36]	; (800d074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	0e5b      	lsrs	r3, r3, #25
 800d052:	f003 0303 	and.w	r3, r3, #3
 800d056:	3301      	adds	r3, #1
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	fbb2 f3f3 	udiv	r3, r2, r3
 800d064:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d066:	687b      	ldr	r3, [r7, #4]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	40021000 	.word	0x40021000
 800d078:	016e3600 	.word	0x016e3600
 800d07c:	00f42400 	.word	0x00f42400

0800d080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d088:	2300      	movs	r3, #0
 800d08a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d08c:	2300      	movs	r3, #0
 800d08e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d175      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0302 	and.w	r3, r3, #2
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d16f      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d169      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d163      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0310 	and.w	r3, r3, #16
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d15d      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d157      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d151      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d14b      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d145      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d13f      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d110:	2b00      	cmp	r3, #0
 800d112:	d139      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d133      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d12d      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d127      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d121      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d11b      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d115      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10f      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d109      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d103      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d180:	2185      	movs	r1, #133	; 0x85
 800d182:	4855      	ldr	r0, [pc, #340]	; (800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d184:	f00b fb13 	bl	80187ae <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 80b2 	beq.w	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d196:	2300      	movs	r3, #0
 800d198:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d012      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1aa:	d00d      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b4:	d008      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1be:	d003      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1c0:	218d      	movs	r1, #141	; 0x8d
 800d1c2:	4845      	ldr	r0, [pc, #276]	; (800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1c4:	f00b faf3 	bl	80187ae <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1c8:	4b44      	ldr	r3, [pc, #272]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10d      	bne.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1d4:	4b41      	ldr	r3, [pc, #260]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d8:	4a40      	ldr	r2, [pc, #256]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1de:	6593      	str	r3, [r2, #88]	; 0x58
 800d1e0:	4b3e      	ldr	r3, [pc, #248]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	60bb      	str	r3, [r7, #8]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1f0:	4b3b      	ldr	r3, [pc, #236]	; (800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a3a      	ldr	r2, [pc, #232]	; (800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d1f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1fc:	f7f9 fc5e 	bl	8006abc <HAL_GetTick>
 800d200:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d202:	e009      	b.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d204:	f7f9 fc5a 	bl	8006abc <HAL_GetTick>
 800d208:	4602      	mov	r2, r0
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d902      	bls.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	74fb      	strb	r3, [r7, #19]
        break;
 800d216:	e005      	b.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d218:	4b31      	ldr	r3, [pc, #196]	; (800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d220:	2b00      	cmp	r3, #0
 800d222:	d0ef      	beq.n	800d204 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800d224:	7cfb      	ldrb	r3, [r7, #19]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d15c      	bne.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d22a:	4b2c      	ldr	r3, [pc, #176]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d234:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d01e      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	429a      	cmp	r2, r3
 800d244:	d019      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d246:	4b25      	ldr	r3, [pc, #148]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d24c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d252:	4b22      	ldr	r3, [pc, #136]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d258:	4a20      	ldr	r2, [pc, #128]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d25a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d25e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d262:	4b1e      	ldr	r3, [pc, #120]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d268:	4a1c      	ldr	r2, [pc, #112]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d26e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d272:	4a1a      	ldr	r2, [pc, #104]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	f003 0301 	and.w	r3, r3, #1
 800d280:	2b00      	cmp	r3, #0
 800d282:	d016      	beq.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d284:	f7f9 fc1a 	bl	8006abc <HAL_GetTick>
 800d288:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d28a:	e00b      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d28c:	f7f9 fc16 	bl	8006abc <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	f241 3288 	movw	r2, #5000	; 0x1388
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d902      	bls.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	74fb      	strb	r3, [r7, #19]
            break;
 800d2a2:	e006      	b.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2aa:	f003 0302 	and.w	r3, r3, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0ec      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d2b2:	7cfb      	ldrb	r3, [r7, #19]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10b      	bne.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2b8:	4b08      	ldr	r3, [pc, #32]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c6:	4905      	ldr	r1, [pc, #20]	; (800d2dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d2ce:	e00b      	b.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d2d0:	7cfb      	ldrb	r3, [r7, #19]
 800d2d2:	74bb      	strb	r3, [r7, #18]
 800d2d4:	e008      	b.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d2d6:	bf00      	nop
 800d2d8:	0801dc78 	.word	0x0801dc78
 800d2dc:	40021000 	.word	0x40021000
 800d2e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2e4:	7cfb      	ldrb	r3, [r7, #19]
 800d2e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d2e8:	7c7b      	ldrb	r3, [r7, #17]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d105      	bne.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2ee:	4ba7      	ldr	r3, [pc, #668]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2f2:	4aa6      	ldr	r2, [pc, #664]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d2f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 0301 	and.w	r3, r3, #1
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01e      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00f      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d00b      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d007      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	2b02      	cmp	r3, #2
 800d324:	d003      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d326:	21e2      	movs	r1, #226	; 0xe2
 800d328:	4899      	ldr	r0, [pc, #612]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d32a:	f00b fa40 	bl	80187ae <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d32e:	4b97      	ldr	r3, [pc, #604]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d334:	f023 0203 	bic.w	r2, r3, #3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	4993      	ldr	r1, [pc, #588]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d01e      	beq.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00f      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d00b      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	2b0c      	cmp	r3, #12
 800d366:	d007      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	2b08      	cmp	r3, #8
 800d36e:	d003      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d370:	21ec      	movs	r1, #236	; 0xec
 800d372:	4887      	ldr	r0, [pc, #540]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d374:	f00b fa1b 	bl	80187ae <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d378:	4b84      	ldr	r3, [pc, #528]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d37e:	f023 020c 	bic.w	r2, r3, #12
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	4981      	ldr	r1, [pc, #516]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d388:	4313      	orrs	r3, r2
 800d38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f003 0304 	and.w	r3, r3, #4
 800d396:	2b00      	cmp	r3, #0
 800d398:	d01e      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00f      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	2b10      	cmp	r3, #16
 800d3a8:	d00b      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	2b30      	cmp	r3, #48	; 0x30
 800d3b0:	d007      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	2b20      	cmp	r3, #32
 800d3b8:	d003      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3ba:	21f6      	movs	r1, #246	; 0xf6
 800d3bc:	4874      	ldr	r0, [pc, #464]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d3be:	f00b f9f6 	bl	80187ae <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d3c2:	4b72      	ldr	r3, [pc, #456]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	496e      	ldr	r1, [pc, #440]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0308 	and.w	r3, r3, #8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01f      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d010      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	2b40      	cmp	r3, #64	; 0x40
 800d3f2:	d00c      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	2bc0      	cmp	r3, #192	; 0xc0
 800d3fa:	d008      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	2b80      	cmp	r3, #128	; 0x80
 800d402:	d004      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d404:	f240 1101 	movw	r1, #257	; 0x101
 800d408:	4861      	ldr	r0, [pc, #388]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d40a:	f00b f9d0 	bl	80187ae <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d40e:	4b5f      	ldr	r3, [pc, #380]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d414:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	495b      	ldr	r1, [pc, #364]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 0310 	and.w	r3, r3, #16
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d022      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d013      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	695b      	ldr	r3, [r3, #20]
 800d43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d440:	d00e      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d44a:	d009      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d454:	d004      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d456:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800d45a:	484d      	ldr	r0, [pc, #308]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d45c:	f00b f9a7 	bl	80187ae <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d460:	4b4a      	ldr	r3, [pc, #296]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	4947      	ldr	r1, [pc, #284]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d470:	4313      	orrs	r3, r2
 800d472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d022      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d013      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d492:	d00e      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d49c:	d009      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4a6:	d004      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4a8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800d4ac:	4838      	ldr	r0, [pc, #224]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d4ae:	f00b f97e 	bl	80187ae <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d4b2:	4b36      	ldr	r3, [pc, #216]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	4932      	ldr	r1, [pc, #200]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d01d      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00e      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e4:	d009      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	69db      	ldr	r3, [r3, #28]
 800d4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4ee:	d004      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d4f0:	f44f 7192 	mov.w	r1, #292	; 0x124
 800d4f4:	4826      	ldr	r0, [pc, #152]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d4f6:	f00b f95a 	bl	80187ae <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d4fa:	4b24      	ldr	r3, [pc, #144]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	4920      	ldr	r1, [pc, #128]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01d      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00e      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d52c:	d009      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d536:	d004      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d538:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800d53c:	4814      	ldr	r0, [pc, #80]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d53e:	f00b f936 	bl	80187ae <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d542:	4b12      	ldr	r3, [pc, #72]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	490e      	ldr	r1, [pc, #56]	; (800d58c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d552:	4313      	orrs	r3, r2
 800d554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d560:	2b00      	cmp	r3, #0
 800d562:	d022      	beq.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d013      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d574:	d00e      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d57e:	d009      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d580:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d584:	4802      	ldr	r0, [pc, #8]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d586:	f00b f912 	bl	80187ae <assert_failed>
 800d58a:	e003      	b.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d58c:	40021000 	.word	0x40021000
 800d590:	0801dc78 	.word	0x0801dc78

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d594:	4ba0      	ldr	r3, [pc, #640]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d59a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	499d      	ldr	r1, [pc, #628]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d01b      	beq.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00c      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d008      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d004      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d5ce:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d5d2:	4892      	ldr	r0, [pc, #584]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d5d4:	f00b f8eb 	bl	80187ae <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5d8:	4b8f      	ldr	r3, [pc, #572]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5de:	f023 0203 	bic.w	r2, r3, #3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	498c      	ldr	r1, [pc, #560]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d022      	beq.n	800d640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d013      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d60a:	d00e      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d614:	d009      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d61e:	d004      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d620:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800d624:	487d      	ldr	r0, [pc, #500]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d626:	f00b f8c2 	bl	80187ae <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d62a:	4b7b      	ldr	r3, [pc, #492]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	4977      	ldr	r1, [pc, #476]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d63a:	4313      	orrs	r3, r2
 800d63c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d02d      	beq.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d650:	2b00      	cmp	r3, #0
 800d652:	d013      	beq.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d65c:	d00e      	beq.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d666:	d009      	beq.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d670:	d004      	beq.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d672:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800d676:	4869      	ldr	r0, [pc, #420]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d678:	f00b f899 	bl	80187ae <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d67c:	4b66      	ldr	r3, [pc, #408]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	4963      	ldr	r1, [pc, #396]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d68c:	4313      	orrs	r3, r2
 800d68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d69a:	d105      	bne.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d69c:	4b5e      	ldr	r3, [pc, #376]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	4a5d      	ldr	r2, [pc, #372]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d02d      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d013      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6c4:	d00e      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d6ce:	d009      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d6d8:	d004      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6da:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800d6de:	484f      	ldr	r0, [pc, #316]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d6e0:	f00b f865 	bl	80187ae <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d6e4:	4b4c      	ldr	r3, [pc, #304]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	4949      	ldr	r1, [pc, #292]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d702:	d105      	bne.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d704:	4b44      	ldr	r3, [pc, #272]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	4a43      	ldr	r2, [pc, #268]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d70a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d70e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d028      	beq.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00e      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d72c:	d009      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d736:	d004      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d738:	f240 117b 	movw	r1, #379	; 0x17b
 800d73c:	4837      	ldr	r0, [pc, #220]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d73e:	f00b f836 	bl	80187ae <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d742:	4b35      	ldr	r3, [pc, #212]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d748:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d750:	4931      	ldr	r1, [pc, #196]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d752:	4313      	orrs	r3, r2
 800d754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d760:	d105      	bne.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d762:	4b2d      	ldr	r3, [pc, #180]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	4a2c      	ldr	r2, [pc, #176]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d76c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d023      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x742>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d009      	beq.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d78a:	d004      	beq.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d78c:	f240 118d 	movw	r1, #397	; 0x18d
 800d790:	4822      	ldr	r0, [pc, #136]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d792:	f00b f80c 	bl	80187ae <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d796:	4b20      	ldr	r3, [pc, #128]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d79c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a4:	491c      	ldr	r1, [pc, #112]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7b4:	d105      	bne.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x742>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7b6:	4b18      	ldr	r3, [pc, #96]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	4a17      	ldr	r2, [pc, #92]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7c0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d028      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d009      	beq.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7de:	d004      	beq.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d7e0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d7e4:	480d      	ldr	r0, [pc, #52]	; (800d81c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d7e6:	f00a ffe2 	bl	80187ae <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d7ea:	4b0b      	ldr	r3, [pc, #44]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f8:	4907      	ldr	r1, [pc, #28]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d808:	d10a      	bne.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d80a:	4b03      	ldr	r3, [pc, #12]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	4a02      	ldr	r2, [pc, #8]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d814:	60d3      	str	r3, [r2, #12]
 800d816:	e003      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800d818:	40021000 	.word	0x40021000
 800d81c:	0801dc78 	.word	0x0801dc78
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d028      	beq.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00e      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d83c:	d009      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d846:	d004      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d848:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d84c:	483d      	ldr	r0, [pc, #244]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d84e:	f00a ffae 	bl	80187ae <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d852:	4b3d      	ldr	r3, [pc, #244]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d858:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d860:	4939      	ldr	r1, [pc, #228]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d862:	4313      	orrs	r3, r2
 800d864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d86c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d870:	d105      	bne.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d872:	4b35      	ldr	r3, [pc, #212]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	4a34      	ldr	r2, [pc, #208]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d87c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d028      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x85c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00e      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d89a:	d009      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8a4:	d004      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d8a6:	f240 11bb 	movw	r1, #443	; 0x1bb
 800d8aa:	4826      	ldr	r0, [pc, #152]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d8ac:	f00a ff7f 	bl	80187ae <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d8b0:	4b25      	ldr	r3, [pc, #148]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8be:	4922      	ldr	r1, [pc, #136]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ce:	d105      	bne.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d8d0:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	4a1c      	ldr	r2, [pc, #112]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d028      	beq.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8f0:	d00d      	beq.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d009      	beq.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d902:	d004      	beq.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d904:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800d908:	480e      	ldr	r0, [pc, #56]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d90a:	f00a ff50 	bl	80187ae <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d90e:	4b0e      	ldr	r3, [pc, #56]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d91c:	490a      	ldr	r1, [pc, #40]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d91e:	4313      	orrs	r3, r2
 800d920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d92c:	d105      	bne.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d92e:	4b06      	ldr	r3, [pc, #24]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	4a05      	ldr	r2, [pc, #20]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d938:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d93a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	0801dc78 	.word	0x0801dc78
 800d948:	40021000 	.word	0x40021000

0800d94c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e0a2      	b.n	800daa4 <HAL_TIM_Base_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a52      	ldr	r2, [pc, #328]	; (800daac <HAL_TIM_Base_Init+0x160>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d03b      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d970:	d036      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a4e      	ldr	r2, [pc, #312]	; (800dab0 <HAL_TIM_Base_Init+0x164>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d031      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a4c      	ldr	r2, [pc, #304]	; (800dab4 <HAL_TIM_Base_Init+0x168>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d02c      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a4b      	ldr	r2, [pc, #300]	; (800dab8 <HAL_TIM_Base_Init+0x16c>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d027      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a49      	ldr	r2, [pc, #292]	; (800dabc <HAL_TIM_Base_Init+0x170>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d022      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a48      	ldr	r2, [pc, #288]	; (800dac0 <HAL_TIM_Base_Init+0x174>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d01d      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a46      	ldr	r2, [pc, #280]	; (800dac4 <HAL_TIM_Base_Init+0x178>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d018      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a45      	ldr	r2, [pc, #276]	; (800dac8 <HAL_TIM_Base_Init+0x17c>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d013      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a43      	ldr	r2, [pc, #268]	; (800dacc <HAL_TIM_Base_Init+0x180>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d00e      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a42      	ldr	r2, [pc, #264]	; (800dad0 <HAL_TIM_Base_Init+0x184>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d009      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a40      	ldr	r2, [pc, #256]	; (800dad4 <HAL_TIM_Base_Init+0x188>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d004      	beq.n	800d9e0 <HAL_TIM_Base_Init+0x94>
 800d9d6:	f240 111b 	movw	r1, #283	; 0x11b
 800d9da:	483f      	ldr	r0, [pc, #252]	; (800dad8 <HAL_TIM_Base_Init+0x18c>)
 800d9dc:	f00a fee7 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d014      	beq.n	800da12 <HAL_TIM_Base_Init+0xc6>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	2b10      	cmp	r3, #16
 800d9ee:	d010      	beq.n	800da12 <HAL_TIM_Base_Init+0xc6>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d00c      	beq.n	800da12 <HAL_TIM_Base_Init+0xc6>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	2b40      	cmp	r3, #64	; 0x40
 800d9fe:	d008      	beq.n	800da12 <HAL_TIM_Base_Init+0xc6>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	2b60      	cmp	r3, #96	; 0x60
 800da06:	d004      	beq.n	800da12 <HAL_TIM_Base_Init+0xc6>
 800da08:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800da0c:	4832      	ldr	r0, [pc, #200]	; (800dad8 <HAL_TIM_Base_Init+0x18c>)
 800da0e:	f00a fece 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00e      	beq.n	800da38 <HAL_TIM_Base_Init+0xec>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da22:	d009      	beq.n	800da38 <HAL_TIM_Base_Init+0xec>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da2c:	d004      	beq.n	800da38 <HAL_TIM_Base_Init+0xec>
 800da2e:	f240 111d 	movw	r1, #285	; 0x11d
 800da32:	4829      	ldr	r0, [pc, #164]	; (800dad8 <HAL_TIM_Base_Init+0x18c>)
 800da34:	f00a febb 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d008      	beq.n	800da52 <HAL_TIM_Base_Init+0x106>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d004      	beq.n	800da52 <HAL_TIM_Base_Init+0x106>
 800da48:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800da4c:	4822      	ldr	r0, [pc, #136]	; (800dad8 <HAL_TIM_Base_Init+0x18c>)
 800da4e:	f00a feae 	bl	80187ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d111      	bne.n	800da82 <HAL_TIM_Base_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f004 fdb4 	bl	80125d4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <HAL_TIM_Base_Init+0x12e>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a19      	ldr	r2, [pc, #100]	; (800dadc <HAL_TIM_Base_Init+0x190>)
 800da78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2202      	movs	r2, #2
 800da86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3304      	adds	r3, #4
 800da92:	4619      	mov	r1, r3
 800da94:	4610      	mov	r0, r2
 800da96:	f003 fa6b 	bl	8010f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	40012c00 	.word	0x40012c00
 800dab0:	40000400 	.word	0x40000400
 800dab4:	40000800 	.word	0x40000800
 800dab8:	40000c00 	.word	0x40000c00
 800dabc:	40001000 	.word	0x40001000
 800dac0:	40001400 	.word	0x40001400
 800dac4:	40013400 	.word	0x40013400
 800dac8:	40014000 	.word	0x40014000
 800dacc:	40014400 	.word	0x40014400
 800dad0:	40014800 	.word	0x40014800
 800dad4:	40015000 	.word	0x40015000
 800dad8:	0801dcc4 	.word	0x0801dcc4
 800dadc:	08018c21 	.word	0x08018c21

0800dae0 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a39      	ldr	r2, [pc, #228]	; (800dbd4 <HAL_TIM_Base_DeInit+0xf4>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d03b      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dafa:	d036      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a35      	ldr	r2, [pc, #212]	; (800dbd8 <HAL_TIM_Base_DeInit+0xf8>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d031      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a34      	ldr	r2, [pc, #208]	; (800dbdc <HAL_TIM_Base_DeInit+0xfc>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d02c      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a32      	ldr	r2, [pc, #200]	; (800dbe0 <HAL_TIM_Base_DeInit+0x100>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d027      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a31      	ldr	r2, [pc, #196]	; (800dbe4 <HAL_TIM_Base_DeInit+0x104>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d022      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a2f      	ldr	r2, [pc, #188]	; (800dbe8 <HAL_TIM_Base_DeInit+0x108>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d01d      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a2e      	ldr	r2, [pc, #184]	; (800dbec <HAL_TIM_Base_DeInit+0x10c>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d018      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a2c      	ldr	r2, [pc, #176]	; (800dbf0 <HAL_TIM_Base_DeInit+0x110>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d013      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a2b      	ldr	r2, [pc, #172]	; (800dbf4 <HAL_TIM_Base_DeInit+0x114>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d00e      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a29      	ldr	r2, [pc, #164]	; (800dbf8 <HAL_TIM_Base_DeInit+0x118>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d009      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a28      	ldr	r2, [pc, #160]	; (800dbfc <HAL_TIM_Base_DeInit+0x11c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d004      	beq.n	800db6a <HAL_TIM_Base_DeInit+0x8a>
 800db60:	f240 1149 	movw	r1, #329	; 0x149
 800db64:	4826      	ldr	r0, [pc, #152]	; (800dc00 <HAL_TIM_Base_DeInit+0x120>)
 800db66:	f00a fe22 	bl	80187ae <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2202      	movs	r2, #2
 800db6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6a1a      	ldr	r2, [r3, #32]
 800db78:	f241 1311 	movw	r3, #4369	; 0x1111
 800db7c:	4013      	ands	r3, r2
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10f      	bne.n	800dba2 <HAL_TIM_Base_DeInit+0xc2>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6a1a      	ldr	r2, [r3, #32]
 800db88:	f244 4344 	movw	r3, #17476	; 0x4444
 800db8c:	4013      	ands	r3, r2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d107      	bne.n	800dba2 <HAL_TIM_Base_DeInit+0xc2>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 0201 	bic.w	r2, r2, #1
 800dba0:	601a      	str	r2, [r3, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  if (htim->Base_MspDeInitCallback == NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d102      	bne.n	800dbb0 <HAL_TIM_Base_DeInit+0xd0>
  {
    htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a15      	ldr	r2, [pc, #84]	; (800dc04 <HAL_TIM_Base_DeInit+0x124>)
 800dbae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	40012c00 	.word	0x40012c00
 800dbd8:	40000400 	.word	0x40000400
 800dbdc:	40000800 	.word	0x40000800
 800dbe0:	40000c00 	.word	0x40000c00
 800dbe4:	40001000 	.word	0x40001000
 800dbe8:	40001400 	.word	0x40001400
 800dbec:	40013400 	.word	0x40013400
 800dbf0:	40014000 	.word	0x40014000
 800dbf4:	40014400 	.word	0x40014400
 800dbf8:	40014800 	.word	0x40014800
 800dbfc:	40015000 	.word	0x40015000
 800dc00:	0801dcc4 	.word	0x0801dcc4
 800dc04:	08018d7d 	.word	0x08018d7d

0800dc08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a30      	ldr	r2, [pc, #192]	; (800dcd8 <HAL_TIM_Base_Start+0xd0>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d03b      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc22:	d036      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a2c      	ldr	r2, [pc, #176]	; (800dcdc <HAL_TIM_Base_Start+0xd4>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d031      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a2b      	ldr	r2, [pc, #172]	; (800dce0 <HAL_TIM_Base_Start+0xd8>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d02c      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a29      	ldr	r2, [pc, #164]	; (800dce4 <HAL_TIM_Base_Start+0xdc>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d027      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a28      	ldr	r2, [pc, #160]	; (800dce8 <HAL_TIM_Base_Start+0xe0>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d022      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a26      	ldr	r2, [pc, #152]	; (800dcec <HAL_TIM_Base_Start+0xe4>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d01d      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a25      	ldr	r2, [pc, #148]	; (800dcf0 <HAL_TIM_Base_Start+0xe8>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d018      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a23      	ldr	r2, [pc, #140]	; (800dcf4 <HAL_TIM_Base_Start+0xec>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d013      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a22      	ldr	r2, [pc, #136]	; (800dcf8 <HAL_TIM_Base_Start+0xf0>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d00e      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a20      	ldr	r2, [pc, #128]	; (800dcfc <HAL_TIM_Base_Start+0xf4>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d009      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a1f      	ldr	r2, [pc, #124]	; (800dd00 <HAL_TIM_Base_Start+0xf8>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d004      	beq.n	800dc92 <HAL_TIM_Base_Start+0x8a>
 800dc88:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800dc8c:	481d      	ldr	r0, [pc, #116]	; (800dd04 <HAL_TIM_Base_Start+0xfc>)
 800dc8e:	f00a fd8e 	bl	80187ae <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2202      	movs	r2, #2
 800dc96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	4b19      	ldr	r3, [pc, #100]	; (800dd08 <HAL_TIM_Base_Start+0x100>)
 800dca2:	4013      	ands	r3, r2
 800dca4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b06      	cmp	r3, #6
 800dcaa:	d00b      	beq.n	800dcc4 <HAL_TIM_Base_Start+0xbc>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcb2:	d007      	beq.n	800dcc4 <HAL_TIM_Base_Start+0xbc>
  {
    __HAL_TIM_ENABLE(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f042 0201 	orr.w	r2, r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	40012c00 	.word	0x40012c00
 800dcdc:	40000400 	.word	0x40000400
 800dce0:	40000800 	.word	0x40000800
 800dce4:	40000c00 	.word	0x40000c00
 800dce8:	40001000 	.word	0x40001000
 800dcec:	40001400 	.word	0x40001400
 800dcf0:	40013400 	.word	0x40013400
 800dcf4:	40014000 	.word	0x40014000
 800dcf8:	40014400 	.word	0x40014400
 800dcfc:	40014800 	.word	0x40014800
 800dd00:	40015000 	.word	0x40015000
 800dd04:	0801dcc4 	.word	0x0801dcc4
 800dd08:	00010007 	.word	0x00010007

0800dd0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a31      	ldr	r2, [pc, #196]	; (800dde0 <HAL_TIM_Base_Stop+0xd4>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d03b      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd26:	d036      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a2d      	ldr	r2, [pc, #180]	; (800dde4 <HAL_TIM_Base_Stop+0xd8>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d031      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a2c      	ldr	r2, [pc, #176]	; (800dde8 <HAL_TIM_Base_Stop+0xdc>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d02c      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a2a      	ldr	r2, [pc, #168]	; (800ddec <HAL_TIM_Base_Stop+0xe0>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d027      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a29      	ldr	r2, [pc, #164]	; (800ddf0 <HAL_TIM_Base_Stop+0xe4>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d022      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a27      	ldr	r2, [pc, #156]	; (800ddf4 <HAL_TIM_Base_Stop+0xe8>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d01d      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a26      	ldr	r2, [pc, #152]	; (800ddf8 <HAL_TIM_Base_Stop+0xec>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d018      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a24      	ldr	r2, [pc, #144]	; (800ddfc <HAL_TIM_Base_Stop+0xf0>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d013      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a23      	ldr	r2, [pc, #140]	; (800de00 <HAL_TIM_Base_Stop+0xf4>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d00e      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a21      	ldr	r2, [pc, #132]	; (800de04 <HAL_TIM_Base_Stop+0xf8>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d009      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a20      	ldr	r2, [pc, #128]	; (800de08 <HAL_TIM_Base_Stop+0xfc>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d004      	beq.n	800dd96 <HAL_TIM_Base_Stop+0x8a>
 800dd8c:	f240 11a9 	movw	r1, #425	; 0x1a9
 800dd90:	481e      	ldr	r0, [pc, #120]	; (800de0c <HAL_TIM_Base_Stop+0x100>)
 800dd92:	f00a fd0c 	bl	80187ae <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2202      	movs	r2, #2
 800dd9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6a1a      	ldr	r2, [r3, #32]
 800dda4:	f241 1311 	movw	r3, #4369	; 0x1111
 800dda8:	4013      	ands	r3, r2
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10f      	bne.n	800ddce <HAL_TIM_Base_Stop+0xc2>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6a1a      	ldr	r2, [r3, #32]
 800ddb4:	f244 4344 	movw	r3, #17476	; 0x4444
 800ddb8:	4013      	ands	r3, r2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d107      	bne.n	800ddce <HAL_TIM_Base_Stop+0xc2>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	40012c00 	.word	0x40012c00
 800dde4:	40000400 	.word	0x40000400
 800dde8:	40000800 	.word	0x40000800
 800ddec:	40000c00 	.word	0x40000c00
 800ddf0:	40001000 	.word	0x40001000
 800ddf4:	40001400 	.word	0x40001400
 800ddf8:	40013400 	.word	0x40013400
 800ddfc:	40014000 	.word	0x40014000
 800de00:	40014400 	.word	0x40014400
 800de04:	40014800 	.word	0x40014800
 800de08:	40015000 	.word	0x40015000
 800de0c:	0801dcc4 	.word	0x0801dcc4

0800de10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a30      	ldr	r2, [pc, #192]	; (800dee0 <HAL_TIM_Base_Start_IT+0xd0>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d03b      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de2a:	d036      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a2c      	ldr	r2, [pc, #176]	; (800dee4 <HAL_TIM_Base_Start_IT+0xd4>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d031      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a2b      	ldr	r2, [pc, #172]	; (800dee8 <HAL_TIM_Base_Start_IT+0xd8>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d02c      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a29      	ldr	r2, [pc, #164]	; (800deec <HAL_TIM_Base_Start_IT+0xdc>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d027      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a28      	ldr	r2, [pc, #160]	; (800def0 <HAL_TIM_Base_Start_IT+0xe0>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d022      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a26      	ldr	r2, [pc, #152]	; (800def4 <HAL_TIM_Base_Start_IT+0xe4>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d01d      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a25      	ldr	r2, [pc, #148]	; (800def8 <HAL_TIM_Base_Start_IT+0xe8>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d018      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a23      	ldr	r2, [pc, #140]	; (800defc <HAL_TIM_Base_Start_IT+0xec>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d013      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a22      	ldr	r2, [pc, #136]	; (800df00 <HAL_TIM_Base_Start_IT+0xf0>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00e      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a20      	ldr	r2, [pc, #128]	; (800df04 <HAL_TIM_Base_Start_IT+0xf4>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d009      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a1f      	ldr	r2, [pc, #124]	; (800df08 <HAL_TIM_Base_Start_IT+0xf8>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d004      	beq.n	800de9a <HAL_TIM_Base_Start_IT+0x8a>
 800de90:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800de94:	481d      	ldr	r0, [pc, #116]	; (800df0c <HAL_TIM_Base_Start_IT+0xfc>)
 800de96:	f00a fc8a 	bl	80187ae <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68da      	ldr	r2, [r3, #12]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f042 0201 	orr.w	r2, r2, #1
 800dea8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689a      	ldr	r2, [r3, #8]
 800deb0:	4b17      	ldr	r3, [pc, #92]	; (800df10 <HAL_TIM_Base_Start_IT+0x100>)
 800deb2:	4013      	ands	r3, r2
 800deb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d00b      	beq.n	800ded4 <HAL_TIM_Base_Start_IT+0xc4>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dec2:	d007      	beq.n	800ded4 <HAL_TIM_Base_Start_IT+0xc4>
  {
    __HAL_TIM_ENABLE(htim);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f042 0201 	orr.w	r2, r2, #1
 800ded2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	40012c00 	.word	0x40012c00
 800dee4:	40000400 	.word	0x40000400
 800dee8:	40000800 	.word	0x40000800
 800deec:	40000c00 	.word	0x40000c00
 800def0:	40001000 	.word	0x40001000
 800def4:	40001400 	.word	0x40001400
 800def8:	40013400 	.word	0x40013400
 800defc:	40014000 	.word	0x40014000
 800df00:	40014400 	.word	0x40014400
 800df04:	40014800 	.word	0x40014800
 800df08:	40015000 	.word	0x40015000
 800df0c:	0801dcc4 	.word	0x0801dcc4
 800df10:	00010007 	.word	0x00010007

0800df14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a31      	ldr	r2, [pc, #196]	; (800dfe8 <HAL_TIM_Base_Stop_IT+0xd4>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d03b      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df2e:	d036      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a2d      	ldr	r2, [pc, #180]	; (800dfec <HAL_TIM_Base_Stop_IT+0xd8>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d031      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a2c      	ldr	r2, [pc, #176]	; (800dff0 <HAL_TIM_Base_Stop_IT+0xdc>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d02c      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a2a      	ldr	r2, [pc, #168]	; (800dff4 <HAL_TIM_Base_Stop_IT+0xe0>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d027      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a29      	ldr	r2, [pc, #164]	; (800dff8 <HAL_TIM_Base_Stop_IT+0xe4>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d022      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a27      	ldr	r2, [pc, #156]	; (800dffc <HAL_TIM_Base_Stop_IT+0xe8>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d01d      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a26      	ldr	r2, [pc, #152]	; (800e000 <HAL_TIM_Base_Stop_IT+0xec>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d018      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a24      	ldr	r2, [pc, #144]	; (800e004 <HAL_TIM_Base_Stop_IT+0xf0>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d013      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a23      	ldr	r2, [pc, #140]	; (800e008 <HAL_TIM_Base_Stop_IT+0xf4>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d00e      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a21      	ldr	r2, [pc, #132]	; (800e00c <HAL_TIM_Base_Stop_IT+0xf8>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d009      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a20      	ldr	r2, [pc, #128]	; (800e010 <HAL_TIM_Base_Stop_IT+0xfc>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d004      	beq.n	800df9e <HAL_TIM_Base_Stop_IT+0x8a>
 800df94:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800df98:	481e      	ldr	r0, [pc, #120]	; (800e014 <HAL_TIM_Base_Stop_IT+0x100>)
 800df9a:	f00a fc08 	bl	80187ae <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68da      	ldr	r2, [r3, #12]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f022 0201 	bic.w	r2, r2, #1
 800dfac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	6a1a      	ldr	r2, [r3, #32]
 800dfb4:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfb8:	4013      	ands	r3, r2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10f      	bne.n	800dfde <HAL_TIM_Base_Stop_IT+0xca>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	6a1a      	ldr	r2, [r3, #32]
 800dfc4:	f244 4344 	movw	r3, #17476	; 0x4444
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d107      	bne.n	800dfde <HAL_TIM_Base_Stop_IT+0xca>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f022 0201 	bic.w	r2, r2, #1
 800dfdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	40012c00 	.word	0x40012c00
 800dfec:	40000400 	.word	0x40000400
 800dff0:	40000800 	.word	0x40000800
 800dff4:	40000c00 	.word	0x40000c00
 800dff8:	40001000 	.word	0x40001000
 800dffc:	40001400 	.word	0x40001400
 800e000:	40013400 	.word	0x40013400
 800e004:	40014000 	.word	0x40014000
 800e008:	40014400 	.word	0x40014400
 800e00c:	40014800 	.word	0x40014800
 800e010:	40015000 	.word	0x40015000
 800e014:	0801dcc4 	.word	0x0801dcc4

0800e018 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e0a2      	b.n	800e170 <HAL_TIM_OC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a52      	ldr	r2, [pc, #328]	; (800e178 <HAL_TIM_OC_Init+0x160>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d03b      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e03c:	d036      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a4e      	ldr	r2, [pc, #312]	; (800e17c <HAL_TIM_OC_Init+0x164>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d031      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a4c      	ldr	r2, [pc, #304]	; (800e180 <HAL_TIM_OC_Init+0x168>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d02c      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a4b      	ldr	r2, [pc, #300]	; (800e184 <HAL_TIM_OC_Init+0x16c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d027      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a49      	ldr	r2, [pc, #292]	; (800e188 <HAL_TIM_OC_Init+0x170>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d022      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a48      	ldr	r2, [pc, #288]	; (800e18c <HAL_TIM_OC_Init+0x174>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d01d      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a46      	ldr	r2, [pc, #280]	; (800e190 <HAL_TIM_OC_Init+0x178>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d018      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a45      	ldr	r2, [pc, #276]	; (800e194 <HAL_TIM_OC_Init+0x17c>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d013      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a43      	ldr	r2, [pc, #268]	; (800e198 <HAL_TIM_OC_Init+0x180>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d00e      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a42      	ldr	r2, [pc, #264]	; (800e19c <HAL_TIM_OC_Init+0x184>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d009      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a40      	ldr	r2, [pc, #256]	; (800e1a0 <HAL_TIM_OC_Init+0x188>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d004      	beq.n	800e0ac <HAL_TIM_OC_Init+0x94>
 800e0a2:	f240 2167 	movw	r1, #615	; 0x267
 800e0a6:	483f      	ldr	r0, [pc, #252]	; (800e1a4 <HAL_TIM_OC_Init+0x18c>)
 800e0a8:	f00a fb81 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d014      	beq.n	800e0de <HAL_TIM_OC_Init+0xc6>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	2b10      	cmp	r3, #16
 800e0ba:	d010      	beq.n	800e0de <HAL_TIM_OC_Init+0xc6>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	2b20      	cmp	r3, #32
 800e0c2:	d00c      	beq.n	800e0de <HAL_TIM_OC_Init+0xc6>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	2b40      	cmp	r3, #64	; 0x40
 800e0ca:	d008      	beq.n	800e0de <HAL_TIM_OC_Init+0xc6>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	2b60      	cmp	r3, #96	; 0x60
 800e0d2:	d004      	beq.n	800e0de <HAL_TIM_OC_Init+0xc6>
 800e0d4:	f44f 711a 	mov.w	r1, #616	; 0x268
 800e0d8:	4832      	ldr	r0, [pc, #200]	; (800e1a4 <HAL_TIM_OC_Init+0x18c>)
 800e0da:	f00a fb68 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00e      	beq.n	800e104 <HAL_TIM_OC_Init+0xec>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ee:	d009      	beq.n	800e104 <HAL_TIM_OC_Init+0xec>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0f8:	d004      	beq.n	800e104 <HAL_TIM_OC_Init+0xec>
 800e0fa:	f240 2169 	movw	r1, #617	; 0x269
 800e0fe:	4829      	ldr	r0, [pc, #164]	; (800e1a4 <HAL_TIM_OC_Init+0x18c>)
 800e100:	f00a fb55 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d008      	beq.n	800e11e <HAL_TIM_OC_Init+0x106>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	2b80      	cmp	r3, #128	; 0x80
 800e112:	d004      	beq.n	800e11e <HAL_TIM_OC_Init+0x106>
 800e114:	f240 216a 	movw	r1, #618	; 0x26a
 800e118:	4822      	ldr	r0, [pc, #136]	; (800e1a4 <HAL_TIM_OC_Init+0x18c>)
 800e11a:	f00a fb48 	bl	80187ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d111      	bne.n	800e14e <HAL_TIM_OC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f004 fa4e 	bl	80125d4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d102      	bne.n	800e146 <HAL_TIM_OC_Init+0x12e>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a19      	ldr	r2, [pc, #100]	; (800e1a8 <HAL_TIM_OC_Init+0x190>)
 800e144:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2202      	movs	r2, #2
 800e152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3304      	adds	r3, #4
 800e15e:	4619      	mov	r1, r3
 800e160:	4610      	mov	r0, r2
 800e162:	f002 ff05 	bl	8010f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	40012c00 	.word	0x40012c00
 800e17c:	40000400 	.word	0x40000400
 800e180:	40000800 	.word	0x40000800
 800e184:	40000c00 	.word	0x40000c00
 800e188:	40001000 	.word	0x40001000
 800e18c:	40001400 	.word	0x40001400
 800e190:	40013400 	.word	0x40013400
 800e194:	40014000 	.word	0x40014000
 800e198:	40014400 	.word	0x40014400
 800e19c:	40014800 	.word	0x40014800
 800e1a0:	40015000 	.word	0x40015000
 800e1a4:	0801dcc4 	.word	0x0801dcc4
 800e1a8:	0800e1ad 	.word	0x0800e1ad

0800e1ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e0a2      	b.n	800e318 <HAL_TIM_PWM_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a52      	ldr	r2, [pc, #328]	; (800e320 <HAL_TIM_PWM_Init+0x160>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d03b      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1e4:	d036      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a4e      	ldr	r2, [pc, #312]	; (800e324 <HAL_TIM_PWM_Init+0x164>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d031      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a4c      	ldr	r2, [pc, #304]	; (800e328 <HAL_TIM_PWM_Init+0x168>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d02c      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a4b      	ldr	r2, [pc, #300]	; (800e32c <HAL_TIM_PWM_Init+0x16c>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d027      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a49      	ldr	r2, [pc, #292]	; (800e330 <HAL_TIM_PWM_Init+0x170>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d022      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a48      	ldr	r2, [pc, #288]	; (800e334 <HAL_TIM_PWM_Init+0x174>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d01d      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a46      	ldr	r2, [pc, #280]	; (800e338 <HAL_TIM_PWM_Init+0x178>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d018      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a45      	ldr	r2, [pc, #276]	; (800e33c <HAL_TIM_PWM_Init+0x17c>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d013      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a43      	ldr	r2, [pc, #268]	; (800e340 <HAL_TIM_PWM_Init+0x180>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d00e      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a42      	ldr	r2, [pc, #264]	; (800e344 <HAL_TIM_PWM_Init+0x184>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d009      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a40      	ldr	r2, [pc, #256]	; (800e348 <HAL_TIM_PWM_Init+0x188>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d004      	beq.n	800e254 <HAL_TIM_PWM_Init+0x94>
 800e24a:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 800e24e:	483f      	ldr	r0, [pc, #252]	; (800e34c <HAL_TIM_PWM_Init+0x18c>)
 800e250:	f00a faad 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d014      	beq.n	800e286 <HAL_TIM_PWM_Init+0xc6>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	2b10      	cmp	r3, #16
 800e262:	d010      	beq.n	800e286 <HAL_TIM_PWM_Init+0xc6>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	2b20      	cmp	r3, #32
 800e26a:	d00c      	beq.n	800e286 <HAL_TIM_PWM_Init+0xc6>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	2b40      	cmp	r3, #64	; 0x40
 800e272:	d008      	beq.n	800e286 <HAL_TIM_PWM_Init+0xc6>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	2b60      	cmp	r3, #96	; 0x60
 800e27a:	d004      	beq.n	800e286 <HAL_TIM_PWM_Init+0xc6>
 800e27c:	f240 41a9 	movw	r1, #1193	; 0x4a9
 800e280:	4832      	ldr	r0, [pc, #200]	; (800e34c <HAL_TIM_PWM_Init+0x18c>)
 800e282:	f00a fa94 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00e      	beq.n	800e2ac <HAL_TIM_PWM_Init+0xec>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e296:	d009      	beq.n	800e2ac <HAL_TIM_PWM_Init+0xec>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2a0:	d004      	beq.n	800e2ac <HAL_TIM_PWM_Init+0xec>
 800e2a2:	f240 41aa 	movw	r1, #1194	; 0x4aa
 800e2a6:	4829      	ldr	r0, [pc, #164]	; (800e34c <HAL_TIM_PWM_Init+0x18c>)
 800e2a8:	f00a fa81 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	699b      	ldr	r3, [r3, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d008      	beq.n	800e2c6 <HAL_TIM_PWM_Init+0x106>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	2b80      	cmp	r3, #128	; 0x80
 800e2ba:	d004      	beq.n	800e2c6 <HAL_TIM_PWM_Init+0x106>
 800e2bc:	f240 41ab 	movw	r1, #1195	; 0x4ab
 800e2c0:	4822      	ldr	r0, [pc, #136]	; (800e34c <HAL_TIM_PWM_Init+0x18c>)
 800e2c2:	f00a fa74 	bl	80187ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d111      	bne.n	800e2f6 <HAL_TIM_PWM_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f004 f97a 	bl	80125d4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <HAL_TIM_PWM_Init+0x12e>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a19      	ldr	r2, [pc, #100]	; (800e350 <HAL_TIM_PWM_Init+0x190>)
 800e2ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3304      	adds	r3, #4
 800e306:	4619      	mov	r1, r3
 800e308:	4610      	mov	r0, r2
 800e30a:	f002 fe31 	bl	8010f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	40012c00 	.word	0x40012c00
 800e324:	40000400 	.word	0x40000400
 800e328:	40000800 	.word	0x40000800
 800e32c:	40000c00 	.word	0x40000c00
 800e330:	40001000 	.word	0x40001000
 800e334:	40001400 	.word	0x40001400
 800e338:	40013400 	.word	0x40013400
 800e33c:	40014000 	.word	0x40014000
 800e340:	40014400 	.word	0x40014400
 800e344:	40014800 	.word	0x40014800
 800e348:	40015000 	.word	0x40015000
 800e34c:	0801dcc4 	.word	0x0801dcc4
 800e350:	0800e355 	.word	0x0800e355

0800e354 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a7e      	ldr	r2, [pc, #504]	; (800e570 <HAL_TIM_PWM_Start+0x208>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d117      	bne.n	800e3ac <HAL_TIM_PWM_Start+0x44>
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 80aa 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2b04      	cmp	r3, #4
 800e388:	f000 80a6 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b08      	cmp	r3, #8
 800e390:	f000 80a2 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2b0c      	cmp	r3, #12
 800e398:	f000 809e 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2b10      	cmp	r3, #16
 800e3a0:	f000 809a 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b14      	cmp	r3, #20
 800e3a8:	f000 8096 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3b4:	d10f      	bne.n	800e3d6 <HAL_TIM_PWM_Start+0x6e>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 808d 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b04      	cmp	r3, #4
 800e3c2:	f000 8089 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	f000 8085 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b0c      	cmp	r3, #12
 800e3d2:	f000 8081 	beq.w	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a66      	ldr	r2, [pc, #408]	; (800e574 <HAL_TIM_PWM_Start+0x20c>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d10b      	bne.n	800e3f8 <HAL_TIM_PWM_Start+0x90>
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d078      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d075      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b08      	cmp	r3, #8
 800e3f0:	d072      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2b0c      	cmp	r3, #12
 800e3f6:	d06f      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a5e      	ldr	r2, [pc, #376]	; (800e578 <HAL_TIM_PWM_Start+0x210>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d10b      	bne.n	800e41a <HAL_TIM_PWM_Start+0xb2>
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d067      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	2b04      	cmp	r3, #4
 800e40c:	d064      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b08      	cmp	r3, #8
 800e412:	d061      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b0c      	cmp	r3, #12
 800e418:	d05e      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a57      	ldr	r2, [pc, #348]	; (800e57c <HAL_TIM_PWM_Start+0x214>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d10b      	bne.n	800e43c <HAL_TIM_PWM_Start+0xd4>
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d056      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	d053      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b08      	cmp	r3, #8
 800e434:	d050      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b0c      	cmp	r3, #12
 800e43a:	d04d      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a4f      	ldr	r2, [pc, #316]	; (800e580 <HAL_TIM_PWM_Start+0x218>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d111      	bne.n	800e46a <HAL_TIM_PWM_Start+0x102>
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d045      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d042      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b08      	cmp	r3, #8
 800e456:	d03f      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b0c      	cmp	r3, #12
 800e45c:	d03c      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b10      	cmp	r3, #16
 800e462:	d039      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b14      	cmp	r3, #20
 800e468:	d036      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a45      	ldr	r2, [pc, #276]	; (800e584 <HAL_TIM_PWM_Start+0x21c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d105      	bne.n	800e480 <HAL_TIM_PWM_Start+0x118>
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d02e      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b04      	cmp	r3, #4
 800e47e:	d02b      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a40      	ldr	r2, [pc, #256]	; (800e588 <HAL_TIM_PWM_Start+0x220>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d102      	bne.n	800e490 <HAL_TIM_PWM_Start+0x128>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d023      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a3d      	ldr	r2, [pc, #244]	; (800e58c <HAL_TIM_PWM_Start+0x224>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d102      	bne.n	800e4a0 <HAL_TIM_PWM_Start+0x138>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01b      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a3a      	ldr	r2, [pc, #232]	; (800e590 <HAL_TIM_PWM_Start+0x228>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d111      	bne.n	800e4ce <HAL_TIM_PWM_Start+0x166>
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d013      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d010      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b08      	cmp	r3, #8
 800e4ba:	d00d      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	2b0c      	cmp	r3, #12
 800e4c0:	d00a      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b10      	cmp	r3, #16
 800e4c6:	d007      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b14      	cmp	r3, #20
 800e4cc:	d004      	beq.n	800e4d8 <HAL_TIM_PWM_Start+0x170>
 800e4ce:	f240 5122 	movw	r1, #1314	; 0x522
 800e4d2:	4830      	ldr	r0, [pc, #192]	; (800e594 <HAL_TIM_PWM_Start+0x22c>)
 800e4d4:	f00a f96b 	bl	80187ae <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f003 fff9 	bl	80124d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a21      	ldr	r2, [pc, #132]	; (800e570 <HAL_TIM_PWM_Start+0x208>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d018      	beq.n	800e522 <HAL_TIM_PWM_Start+0x1ba>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a22      	ldr	r2, [pc, #136]	; (800e580 <HAL_TIM_PWM_Start+0x218>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d013      	beq.n	800e522 <HAL_TIM_PWM_Start+0x1ba>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a21      	ldr	r2, [pc, #132]	; (800e584 <HAL_TIM_PWM_Start+0x21c>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d00e      	beq.n	800e522 <HAL_TIM_PWM_Start+0x1ba>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a1f      	ldr	r2, [pc, #124]	; (800e588 <HAL_TIM_PWM_Start+0x220>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d009      	beq.n	800e522 <HAL_TIM_PWM_Start+0x1ba>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a1e      	ldr	r2, [pc, #120]	; (800e58c <HAL_TIM_PWM_Start+0x224>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d004      	beq.n	800e522 <HAL_TIM_PWM_Start+0x1ba>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a1c      	ldr	r2, [pc, #112]	; (800e590 <HAL_TIM_PWM_Start+0x228>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d101      	bne.n	800e526 <HAL_TIM_PWM_Start+0x1be>
 800e522:	2301      	movs	r3, #1
 800e524:	e000      	b.n	800e528 <HAL_TIM_PWM_Start+0x1c0>
 800e526:	2300      	movs	r3, #0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d007      	beq.n	800e53c <HAL_TIM_PWM_Start+0x1d4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e53a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	689a      	ldr	r2, [r3, #8]
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <HAL_TIM_PWM_Start+0x230>)
 800e544:	4013      	ands	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b06      	cmp	r3, #6
 800e54c:	d00b      	beq.n	800e566 <HAL_TIM_PWM_Start+0x1fe>
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e554:	d007      	beq.n	800e566 <HAL_TIM_PWM_Start+0x1fe>
  {
    __HAL_TIM_ENABLE(htim);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f042 0201 	orr.w	r2, r2, #1
 800e564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	40012c00 	.word	0x40012c00
 800e574:	40000400 	.word	0x40000400
 800e578:	40000800 	.word	0x40000800
 800e57c:	40000c00 	.word	0x40000c00
 800e580:	40013400 	.word	0x40013400
 800e584:	40014000 	.word	0x40014000
 800e588:	40014400 	.word	0x40014400
 800e58c:	40014800 	.word	0x40014800
 800e590:	40015000 	.word	0x40015000
 800e594:	0801dcc4 	.word	0x0801dcc4
 800e598:	00010007 	.word	0x00010007

0800e59c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a8a      	ldr	r2, [pc, #552]	; (800e7d4 <HAL_TIM_PWM_Stop+0x238>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d117      	bne.n	800e5e0 <HAL_TIM_PWM_Stop+0x44>
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80aa 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b04      	cmp	r3, #4
 800e5bc:	f000 80a6 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	2b08      	cmp	r3, #8
 800e5c4:	f000 80a2 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2b0c      	cmp	r3, #12
 800e5cc:	f000 809e 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	f000 809a 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b14      	cmp	r3, #20
 800e5dc:	f000 8096 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5e8:	d10f      	bne.n	800e60a <HAL_TIM_PWM_Stop+0x6e>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 808d 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	f000 8089 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	2b08      	cmp	r3, #8
 800e5fe:	f000 8085 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	2b0c      	cmp	r3, #12
 800e606:	f000 8081 	beq.w	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a72      	ldr	r2, [pc, #456]	; (800e7d8 <HAL_TIM_PWM_Stop+0x23c>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d10b      	bne.n	800e62c <HAL_TIM_PWM_Stop+0x90>
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d078      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	d075      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b08      	cmp	r3, #8
 800e624:	d072      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b0c      	cmp	r3, #12
 800e62a:	d06f      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a6a      	ldr	r2, [pc, #424]	; (800e7dc <HAL_TIM_PWM_Stop+0x240>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d10b      	bne.n	800e64e <HAL_TIM_PWM_Stop+0xb2>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d067      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b04      	cmp	r3, #4
 800e640:	d064      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b08      	cmp	r3, #8
 800e646:	d061      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b0c      	cmp	r3, #12
 800e64c:	d05e      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a63      	ldr	r2, [pc, #396]	; (800e7e0 <HAL_TIM_PWM_Stop+0x244>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d10b      	bne.n	800e670 <HAL_TIM_PWM_Stop+0xd4>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d056      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b04      	cmp	r3, #4
 800e662:	d053      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b08      	cmp	r3, #8
 800e668:	d050      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b0c      	cmp	r3, #12
 800e66e:	d04d      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a5b      	ldr	r2, [pc, #364]	; (800e7e4 <HAL_TIM_PWM_Stop+0x248>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d111      	bne.n	800e69e <HAL_TIM_PWM_Stop+0x102>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d045      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b04      	cmp	r3, #4
 800e684:	d042      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d03f      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b0c      	cmp	r3, #12
 800e690:	d03c      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	2b10      	cmp	r3, #16
 800e696:	d039      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2b14      	cmp	r3, #20
 800e69c:	d036      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a51      	ldr	r2, [pc, #324]	; (800e7e8 <HAL_TIM_PWM_Stop+0x24c>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d105      	bne.n	800e6b4 <HAL_TIM_PWM_Stop+0x118>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d02e      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b04      	cmp	r3, #4
 800e6b2:	d02b      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a4c      	ldr	r2, [pc, #304]	; (800e7ec <HAL_TIM_PWM_Stop+0x250>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d102      	bne.n	800e6c4 <HAL_TIM_PWM_Stop+0x128>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d023      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a49      	ldr	r2, [pc, #292]	; (800e7f0 <HAL_TIM_PWM_Stop+0x254>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d102      	bne.n	800e6d4 <HAL_TIM_PWM_Stop+0x138>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d01b      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a46      	ldr	r2, [pc, #280]	; (800e7f4 <HAL_TIM_PWM_Stop+0x258>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d111      	bne.n	800e702 <HAL_TIM_PWM_Stop+0x166>
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d013      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	2b04      	cmp	r3, #4
 800e6e8:	d010      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	2b08      	cmp	r3, #8
 800e6ee:	d00d      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	2b0c      	cmp	r3, #12
 800e6f4:	d00a      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b10      	cmp	r3, #16
 800e6fa:	d007      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2b14      	cmp	r3, #20
 800e700:	d004      	beq.n	800e70c <HAL_TIM_PWM_Stop+0x170>
 800e702:	f44f 61a9 	mov.w	r1, #1352	; 0x548
 800e706:	483c      	ldr	r0, [pc, #240]	; (800e7f8 <HAL_TIM_PWM_Stop+0x25c>)
 800e708:	f00a f851 	bl	80187ae <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2200      	movs	r2, #0
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	f003 fedf 	bl	80124d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a2d      	ldr	r2, [pc, #180]	; (800e7d4 <HAL_TIM_PWM_Stop+0x238>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d018      	beq.n	800e756 <HAL_TIM_PWM_Stop+0x1ba>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a2e      	ldr	r2, [pc, #184]	; (800e7e4 <HAL_TIM_PWM_Stop+0x248>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d013      	beq.n	800e756 <HAL_TIM_PWM_Stop+0x1ba>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a2d      	ldr	r2, [pc, #180]	; (800e7e8 <HAL_TIM_PWM_Stop+0x24c>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d00e      	beq.n	800e756 <HAL_TIM_PWM_Stop+0x1ba>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a2b      	ldr	r2, [pc, #172]	; (800e7ec <HAL_TIM_PWM_Stop+0x250>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d009      	beq.n	800e756 <HAL_TIM_PWM_Stop+0x1ba>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a2a      	ldr	r2, [pc, #168]	; (800e7f0 <HAL_TIM_PWM_Stop+0x254>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d004      	beq.n	800e756 <HAL_TIM_PWM_Stop+0x1ba>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a28      	ldr	r2, [pc, #160]	; (800e7f4 <HAL_TIM_PWM_Stop+0x258>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d101      	bne.n	800e75a <HAL_TIM_PWM_Stop+0x1be>
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <HAL_TIM_PWM_Stop+0x1c0>
 800e75a:	2300      	movs	r3, #0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d017      	beq.n	800e790 <HAL_TIM_PWM_Stop+0x1f4>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6a1a      	ldr	r2, [r3, #32]
 800e766:	f241 1311 	movw	r3, #4369	; 0x1111
 800e76a:	4013      	ands	r3, r2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d10f      	bne.n	800e790 <HAL_TIM_PWM_Stop+0x1f4>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6a1a      	ldr	r2, [r3, #32]
 800e776:	f244 4344 	movw	r3, #17476	; 0x4444
 800e77a:	4013      	ands	r3, r2
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d107      	bne.n	800e790 <HAL_TIM_PWM_Stop+0x1f4>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e78e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6a1a      	ldr	r2, [r3, #32]
 800e796:	f241 1311 	movw	r3, #4369	; 0x1111
 800e79a:	4013      	ands	r3, r2
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10f      	bne.n	800e7c0 <HAL_TIM_PWM_Stop+0x224>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	6a1a      	ldr	r2, [r3, #32]
 800e7a6:	f244 4344 	movw	r3, #17476	; 0x4444
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d107      	bne.n	800e7c0 <HAL_TIM_PWM_Stop+0x224>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f022 0201 	bic.w	r2, r2, #1
 800e7be:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	40012c00 	.word	0x40012c00
 800e7d8:	40000400 	.word	0x40000400
 800e7dc:	40000800 	.word	0x40000800
 800e7e0:	40000c00 	.word	0x40000c00
 800e7e4:	40013400 	.word	0x40013400
 800e7e8:	40014000 	.word	0x40014000
 800e7ec:	40014400 	.word	0x40014400
 800e7f0:	40014800 	.word	0x40014800
 800e7f4:	40015000 	.word	0x40015000
 800e7f8:	0801dcc4 	.word	0x0801dcc4

0800e7fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e0a2      	b.n	800e954 <HAL_TIM_IC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a52      	ldr	r2, [pc, #328]	; (800e95c <HAL_TIM_IC_Init+0x160>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d03b      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e820:	d036      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a4e      	ldr	r2, [pc, #312]	; (800e960 <HAL_TIM_IC_Init+0x164>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d031      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a4c      	ldr	r2, [pc, #304]	; (800e964 <HAL_TIM_IC_Init+0x168>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d02c      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a4b      	ldr	r2, [pc, #300]	; (800e968 <HAL_TIM_IC_Init+0x16c>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d027      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a49      	ldr	r2, [pc, #292]	; (800e96c <HAL_TIM_IC_Init+0x170>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d022      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a48      	ldr	r2, [pc, #288]	; (800e970 <HAL_TIM_IC_Init+0x174>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d01d      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a46      	ldr	r2, [pc, #280]	; (800e974 <HAL_TIM_IC_Init+0x178>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d018      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a45      	ldr	r2, [pc, #276]	; (800e978 <HAL_TIM_IC_Init+0x17c>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d013      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a43      	ldr	r2, [pc, #268]	; (800e97c <HAL_TIM_IC_Init+0x180>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d00e      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a42      	ldr	r2, [pc, #264]	; (800e980 <HAL_TIM_IC_Init+0x184>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d009      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a40      	ldr	r2, [pc, #256]	; (800e984 <HAL_TIM_IC_Init+0x188>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d004      	beq.n	800e890 <HAL_TIM_IC_Init+0x94>
 800e886:	f240 61ea 	movw	r1, #1770	; 0x6ea
 800e88a:	483f      	ldr	r0, [pc, #252]	; (800e988 <HAL_TIM_IC_Init+0x18c>)
 800e88c:	f009 ff8f 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d014      	beq.n	800e8c2 <HAL_TIM_IC_Init+0xc6>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	2b10      	cmp	r3, #16
 800e89e:	d010      	beq.n	800e8c2 <HAL_TIM_IC_Init+0xc6>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	2b20      	cmp	r3, #32
 800e8a6:	d00c      	beq.n	800e8c2 <HAL_TIM_IC_Init+0xc6>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	2b40      	cmp	r3, #64	; 0x40
 800e8ae:	d008      	beq.n	800e8c2 <HAL_TIM_IC_Init+0xc6>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	2b60      	cmp	r3, #96	; 0x60
 800e8b6:	d004      	beq.n	800e8c2 <HAL_TIM_IC_Init+0xc6>
 800e8b8:	f240 61eb 	movw	r1, #1771	; 0x6eb
 800e8bc:	4832      	ldr	r0, [pc, #200]	; (800e988 <HAL_TIM_IC_Init+0x18c>)
 800e8be:	f009 ff76 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00e      	beq.n	800e8e8 <HAL_TIM_IC_Init+0xec>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8d2:	d009      	beq.n	800e8e8 <HAL_TIM_IC_Init+0xec>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8dc:	d004      	beq.n	800e8e8 <HAL_TIM_IC_Init+0xec>
 800e8de:	f240 61ec 	movw	r1, #1772	; 0x6ec
 800e8e2:	4829      	ldr	r0, [pc, #164]	; (800e988 <HAL_TIM_IC_Init+0x18c>)
 800e8e4:	f009 ff63 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d008      	beq.n	800e902 <HAL_TIM_IC_Init+0x106>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	2b80      	cmp	r3, #128	; 0x80
 800e8f6:	d004      	beq.n	800e902 <HAL_TIM_IC_Init+0x106>
 800e8f8:	f240 61ed 	movw	r1, #1773	; 0x6ed
 800e8fc:	4822      	ldr	r0, [pc, #136]	; (800e988 <HAL_TIM_IC_Init+0x18c>)
 800e8fe:	f009 ff56 	bl	80187ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d111      	bne.n	800e932 <HAL_TIM_IC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f003 fe5c 	bl	80125d4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e920:	2b00      	cmp	r3, #0
 800e922:	d102      	bne.n	800e92a <HAL_TIM_IC_Init+0x12e>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a19      	ldr	r2, [pc, #100]	; (800e98c <HAL_TIM_IC_Init+0x190>)
 800e928:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2202      	movs	r2, #2
 800e936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3304      	adds	r3, #4
 800e942:	4619      	mov	r1, r3
 800e944:	4610      	mov	r0, r2
 800e946:	f002 fb13 	bl	8010f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	40012c00 	.word	0x40012c00
 800e960:	40000400 	.word	0x40000400
 800e964:	40000800 	.word	0x40000800
 800e968:	40000c00 	.word	0x40000c00
 800e96c:	40001000 	.word	0x40001000
 800e970:	40001400 	.word	0x40001400
 800e974:	40013400 	.word	0x40013400
 800e978:	40014000 	.word	0x40014000
 800e97c:	40014400 	.word	0x40014400
 800e980:	40014800 	.word	0x40014800
 800e984:	40015000 	.word	0x40015000
 800e988:	0801dcc4 	.word	0x0801dcc4
 800e98c:	0800e991 	.word	0x0800e991

0800e990 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e0bd      	b.n	800eb34 <HAL_TIM_OnePulse_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a5f      	ldr	r2, [pc, #380]	; (800eb3c <HAL_TIM_OnePulse_Init+0x198>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d03b      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9ca:	d036      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a5b      	ldr	r2, [pc, #364]	; (800eb40 <HAL_TIM_OnePulse_Init+0x19c>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d031      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a5a      	ldr	r2, [pc, #360]	; (800eb44 <HAL_TIM_OnePulse_Init+0x1a0>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d02c      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a58      	ldr	r2, [pc, #352]	; (800eb48 <HAL_TIM_OnePulse_Init+0x1a4>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d027      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a57      	ldr	r2, [pc, #348]	; (800eb4c <HAL_TIM_OnePulse_Init+0x1a8>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d022      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a55      	ldr	r2, [pc, #340]	; (800eb50 <HAL_TIM_OnePulse_Init+0x1ac>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d01d      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a54      	ldr	r2, [pc, #336]	; (800eb54 <HAL_TIM_OnePulse_Init+0x1b0>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d018      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a52      	ldr	r2, [pc, #328]	; (800eb58 <HAL_TIM_OnePulse_Init+0x1b4>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d013      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a51      	ldr	r2, [pc, #324]	; (800eb5c <HAL_TIM_OnePulse_Init+0x1b8>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d00e      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a4f      	ldr	r2, [pc, #316]	; (800eb60 <HAL_TIM_OnePulse_Init+0x1bc>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d009      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a4e      	ldr	r2, [pc, #312]	; (800eb64 <HAL_TIM_OnePulse_Init+0x1c0>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d004      	beq.n	800ea3a <HAL_TIM_OnePulse_Init+0x96>
 800ea30:	f640 1105 	movw	r1, #2309	; 0x905
 800ea34:	484c      	ldr	r0, [pc, #304]	; (800eb68 <HAL_TIM_OnePulse_Init+0x1c4>)
 800ea36:	f009 feba 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d014      	beq.n	800ea6c <HAL_TIM_OnePulse_Init+0xc8>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	2b10      	cmp	r3, #16
 800ea48:	d010      	beq.n	800ea6c <HAL_TIM_OnePulse_Init+0xc8>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	2b20      	cmp	r3, #32
 800ea50:	d00c      	beq.n	800ea6c <HAL_TIM_OnePulse_Init+0xc8>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	2b40      	cmp	r3, #64	; 0x40
 800ea58:	d008      	beq.n	800ea6c <HAL_TIM_OnePulse_Init+0xc8>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	2b60      	cmp	r3, #96	; 0x60
 800ea60:	d004      	beq.n	800ea6c <HAL_TIM_OnePulse_Init+0xc8>
 800ea62:	f640 1106 	movw	r1, #2310	; 0x906
 800ea66:	4840      	ldr	r0, [pc, #256]	; (800eb68 <HAL_TIM_OnePulse_Init+0x1c4>)
 800ea68:	f009 fea1 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00e      	beq.n	800ea92 <HAL_TIM_OnePulse_Init+0xee>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea7c:	d009      	beq.n	800ea92 <HAL_TIM_OnePulse_Init+0xee>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea86:	d004      	beq.n	800ea92 <HAL_TIM_OnePulse_Init+0xee>
 800ea88:	f640 1107 	movw	r1, #2311	; 0x907
 800ea8c:	4836      	ldr	r0, [pc, #216]	; (800eb68 <HAL_TIM_OnePulse_Init+0x1c4>)
 800ea8e:	f009 fe8e 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2b08      	cmp	r3, #8
 800ea96:	d007      	beq.n	800eaa8 <HAL_TIM_OnePulse_Init+0x104>
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d004      	beq.n	800eaa8 <HAL_TIM_OnePulse_Init+0x104>
 800ea9e:	f640 1108 	movw	r1, #2312	; 0x908
 800eaa2:	4831      	ldr	r0, [pc, #196]	; (800eb68 <HAL_TIM_OnePulse_Init+0x1c4>)
 800eaa4:	f009 fe83 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d008      	beq.n	800eac2 <HAL_TIM_OnePulse_Init+0x11e>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	2b80      	cmp	r3, #128	; 0x80
 800eab6:	d004      	beq.n	800eac2 <HAL_TIM_OnePulse_Init+0x11e>
 800eab8:	f640 1109 	movw	r1, #2313	; 0x909
 800eabc:	482a      	ldr	r0, [pc, #168]	; (800eb68 <HAL_TIM_OnePulse_Init+0x1c4>)
 800eabe:	f009 fe76 	bl	80187ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d111      	bne.n	800eaf2 <HAL_TIM_OnePulse_Init+0x14e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f003 fd7c 	bl	80125d4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <HAL_TIM_OnePulse_Init+0x146>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a21      	ldr	r2, [pc, #132]	; (800eb6c <HAL_TIM_OnePulse_Init+0x1c8>)
 800eae8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f002 fa33 	bl	8010f70 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f022 0208 	bic.w	r2, r2, #8
 800eb18:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6819      	ldr	r1, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	683a      	ldr	r2, [r7, #0]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	40012c00 	.word	0x40012c00
 800eb40:	40000400 	.word	0x40000400
 800eb44:	40000800 	.word	0x40000800
 800eb48:	40000c00 	.word	0x40000c00
 800eb4c:	40001000 	.word	0x40001000
 800eb50:	40001400 	.word	0x40001400
 800eb54:	40013400 	.word	0x40013400
 800eb58:	40014000 	.word	0x40014000
 800eb5c:	40014400 	.word	0x40014400
 800eb60:	40014800 	.word	0x40014800
 800eb64:	40015000 	.word	0x40015000
 800eb68:	0801dcc4 	.word	0x0801dcc4
 800eb6c:	0800eb71 	.word	0x0800eb71

0800eb70 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	691b      	ldr	r3, [r3, #16]
 800eb92:	f003 0302 	and.w	r3, r3, #2
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	d128      	bne.n	800ebec <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	f003 0302 	and.w	r3, r3, #2
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d121      	bne.n	800ebec <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f06f 0202 	mvn.w	r2, #2
 800ebb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d005      	beq.n	800ebd2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	4798      	blx	r3
 800ebd0:	e009      	b.n	800ebe6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	f003 0304 	and.w	r3, r3, #4
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d128      	bne.n	800ec4c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	f003 0304 	and.w	r3, r3, #4
 800ec04:	2b04      	cmp	r3, #4
 800ec06:	d121      	bne.n	800ec4c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f06f 0204 	mvn.w	r2, #4
 800ec10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d005      	beq.n	800ec32 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	4798      	blx	r3
 800ec30:	e009      	b.n	800ec46 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	f003 0308 	and.w	r3, r3, #8
 800ec56:	2b08      	cmp	r3, #8
 800ec58:	d128      	bne.n	800ecac <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f003 0308 	and.w	r3, r3, #8
 800ec64:	2b08      	cmp	r3, #8
 800ec66:	d121      	bne.n	800ecac <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f06f 0208 	mvn.w	r2, #8
 800ec70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2204      	movs	r2, #4
 800ec76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	f003 0303 	and.w	r3, r3, #3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d005      	beq.n	800ec92 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	4798      	blx	r3
 800ec90:	e009      	b.n	800eca6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	f003 0310 	and.w	r3, r3, #16
 800ecb6:	2b10      	cmp	r3, #16
 800ecb8:	d128      	bne.n	800ed0c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	f003 0310 	and.w	r3, r3, #16
 800ecc4:	2b10      	cmp	r3, #16
 800ecc6:	d121      	bne.n	800ed0c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f06f 0210 	mvn.w	r2, #16
 800ecd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2208      	movs	r2, #8
 800ecd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d005      	beq.n	800ecf2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	4798      	blx	r3
 800ecf0:	e009      	b.n	800ed06 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d10f      	bne.n	800ed3a <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d108      	bne.n	800ed3a <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f06f 0201 	mvn.w	r2, #1
 800ed30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed44:	2b80      	cmp	r3, #128	; 0x80
 800ed46:	d110      	bne.n	800ed6a <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed52:	2b80      	cmp	r3, #128	; 0x80
 800ed54:	d109      	bne.n	800ed6a <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ed5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed78:	d110      	bne.n	800ed9c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed84:	2b80      	cmp	r3, #128	; 0x80
 800ed86:	d109      	bne.n	800ed9c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda6:	2b40      	cmp	r3, #64	; 0x40
 800eda8:	d110      	bne.n	800edcc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb4:	2b40      	cmp	r3, #64	; 0x40
 800edb6:	d109      	bne.n	800edcc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800edc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	f003 0320 	and.w	r3, r3, #32
 800edd6:	2b20      	cmp	r3, #32
 800edd8:	d110      	bne.n	800edfc <HAL_TIM_IRQHandler+0x278>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f003 0320 	and.w	r3, r3, #32
 800ede4:	2b20      	cmp	r3, #32
 800ede6:	d109      	bne.n	800edfc <HAL_TIM_IRQHandler+0x278>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f06f 0220 	mvn.w	r2, #32
 800edf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee0a:	d111      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x2ac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee1a:	d109      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x2ac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ee24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee3e:	d111      	bne.n	800ee64 <HAL_TIM_IRQHandler+0x2e0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee4e:	d109      	bne.n	800ee64 <HAL_TIM_IRQHandler+0x2e0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ee58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee72:	d111      	bne.n	800ee98 <HAL_TIM_IRQHandler+0x314>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee82:	d109      	bne.n	800ee98 <HAL_TIM_IRQHandler+0x314>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ee8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eea6:	d111      	bne.n	800eecc <HAL_TIM_IRQHandler+0x348>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eeb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eeb6:	d109      	bne.n	800eecc <HAL_TIM_IRQHandler+0x348>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800eec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d016      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b04      	cmp	r3, #4
 800eeea:	d013      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b08      	cmp	r3, #8
 800eef0:	d010      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b0c      	cmp	r3, #12
 800eef6:	d00d      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2b10      	cmp	r3, #16
 800eefc:	d00a      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b14      	cmp	r3, #20
 800ef02:	d007      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b3c      	cmp	r3, #60	; 0x3c
 800ef08:	d004      	beq.n	800ef14 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef0a:	f640 518f 	movw	r1, #3471	; 0xd8f
 800ef0e:	4899      	ldr	r0, [pc, #612]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ef10:	f009 fc4d 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d027      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b10      	cmp	r3, #16
 800ef22:	d023      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b20      	cmp	r3, #32
 800ef2a:	d01f      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b30      	cmp	r3, #48	; 0x30
 800ef32:	d01b      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b50      	cmp	r3, #80	; 0x50
 800ef3a:	d017      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b40      	cmp	r3, #64	; 0x40
 800ef42:	d013      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef4c:	d00e      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4a89      	ldr	r2, [pc, #548]	; (800f178 <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d009      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a87      	ldr	r2, [pc, #540]	; (800f17c <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d004      	beq.n	800ef6c <HAL_TIM_OC_ConfigChannel+0x98>
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a86      	ldr	r2, [pc, #536]	; (800f180 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d10f      	bne.n	800ef8c <HAL_TIM_OC_ConfigChannel+0xb8>
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a82      	ldr	r2, [pc, #520]	; (800f17c <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d004      	beq.n	800ef80 <HAL_TIM_OC_ConfigChannel+0xac>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a81      	ldr	r2, [pc, #516]	; (800f180 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d10a      	bne.n	800ef96 <HAL_TIM_OC_ConfigChannel+0xc2>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b08      	cmp	r3, #8
 800ef84:	d007      	beq.n	800ef96 <HAL_TIM_OC_ConfigChannel+0xc2>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b0c      	cmp	r3, #12
 800ef8a:	d004      	beq.n	800ef96 <HAL_TIM_OC_ConfigChannel+0xc2>
 800ef8c:	f44f 6159 	mov.w	r1, #3472	; 0xd90
 800ef90:	4878      	ldr	r0, [pc, #480]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ef92:	f009 fc0c 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d008      	beq.n	800efb0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d004      	beq.n	800efb0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800efa6:	f640 5191 	movw	r1, #3473	; 0xd91
 800efaa:	4872      	ldr	r0, [pc, #456]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800efac:	f009 fbff 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d101      	bne.n	800efbe <HAL_TIM_OC_ConfigChannel+0xea>
 800efba:	2302      	movs	r3, #2
 800efbc:	e163      	b.n	800f286 <HAL_TIM_OC_ConfigChannel+0x3b2>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2202      	movs	r2, #2
 800efca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b14      	cmp	r3, #20
 800efd2:	f200 814e 	bhi.w	800f272 <HAL_TIM_OC_ConfigChannel+0x39e>
 800efd6:	a201      	add	r2, pc, #4	; (adr r2, 800efdc <HAL_TIM_OC_ConfigChannel+0x108>)
 800efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efdc:	0800f031 	.word	0x0800f031
 800efe0:	0800f273 	.word	0x0800f273
 800efe4:	0800f273 	.word	0x0800f273
 800efe8:	0800f273 	.word	0x0800f273
 800efec:	0800f0ad 	.word	0x0800f0ad
 800eff0:	0800f273 	.word	0x0800f273
 800eff4:	0800f273 	.word	0x0800f273
 800eff8:	0800f273 	.word	0x0800f273
 800effc:	0800f115 	.word	0x0800f115
 800f000:	0800f273 	.word	0x0800f273
 800f004:	0800f273 	.word	0x0800f273
 800f008:	0800f273 	.word	0x0800f273
 800f00c:	0800f1a9 	.word	0x0800f1a9
 800f010:	0800f273 	.word	0x0800f273
 800f014:	0800f273 	.word	0x0800f273
 800f018:	0800f273 	.word	0x0800f273
 800f01c:	0800f207 	.word	0x0800f207
 800f020:	0800f273 	.word	0x0800f273
 800f024:	0800f273 	.word	0x0800f273
 800f028:	0800f273 	.word	0x0800f273
 800f02c:	0800f23d 	.word	0x0800f23d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a53      	ldr	r2, [pc, #332]	; (800f184 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d031      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f042:	d02c      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a4f      	ldr	r2, [pc, #316]	; (800f188 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d027      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a4e      	ldr	r2, [pc, #312]	; (800f18c <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d022      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a4c      	ldr	r2, [pc, #304]	; (800f190 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d01d      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a4b      	ldr	r2, [pc, #300]	; (800f194 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d018      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a49      	ldr	r2, [pc, #292]	; (800f198 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d013      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a48      	ldr	r2, [pc, #288]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2c8>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d00e      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a46      	ldr	r2, [pc, #280]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2cc>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d009      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a45      	ldr	r2, [pc, #276]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d004      	beq.n	800f09e <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f094:	f640 519d 	movw	r1, #3485	; 0xd9d
 800f098:	4836      	ldr	r0, [pc, #216]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f09a:	f009 fb88 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f002 f80b 	bl	80110c0 <TIM_OC1_SetConfig>
      break;
 800f0aa:	e0e3      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a34      	ldr	r2, [pc, #208]	; (800f184 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d027      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0be:	d022      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a30      	ldr	r2, [pc, #192]	; (800f188 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d01d      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a2f      	ldr	r2, [pc, #188]	; (800f18c <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d018      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a2d      	ldr	r2, [pc, #180]	; (800f190 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d013      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a2c      	ldr	r2, [pc, #176]	; (800f194 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d00e      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4a2a      	ldr	r2, [pc, #168]	; (800f198 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d009      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a2b      	ldr	r2, [pc, #172]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d004      	beq.n	800f106 <HAL_TIM_OC_ConfigChannel+0x232>
 800f0fc:	f640 51a7 	movw	r1, #3495	; 0xda7
 800f100:	481c      	ldr	r0, [pc, #112]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f102:	f009 fb54 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68b9      	ldr	r1, [r7, #8]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f002 f89b 	bl	8011248 <TIM_OC2_SetConfig>
      break;
 800f112:	e0af      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a1a      	ldr	r2, [pc, #104]	; (800f184 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d022      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f126:	d01d      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a16      	ldr	r2, [pc, #88]	; (800f188 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d018      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a15      	ldr	r2, [pc, #84]	; (800f18c <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d013      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a13      	ldr	r2, [pc, #76]	; (800f190 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d00e      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a12      	ldr	r2, [pc, #72]	; (800f194 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d009      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a13      	ldr	r2, [pc, #76]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d004      	beq.n	800f164 <HAL_TIM_OC_ConfigChannel+0x290>
 800f15a:	f640 51b1 	movw	r1, #3505	; 0xdb1
 800f15e:	4805      	ldr	r0, [pc, #20]	; (800f174 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f160:	f009 fb25 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f002 f928 	bl	80113c0 <TIM_OC3_SetConfig>
      break;
 800f170:	e080      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
 800f172:	bf00      	nop
 800f174:	0801dcc4 	.word	0x0801dcc4
 800f178:	00010010 	.word	0x00010010
 800f17c:	00010030 	.word	0x00010030
 800f180:	00010020 	.word	0x00010020
 800f184:	40012c00 	.word	0x40012c00
 800f188:	40000400 	.word	0x40000400
 800f18c:	40000800 	.word	0x40000800
 800f190:	40000c00 	.word	0x40000c00
 800f194:	40013400 	.word	0x40013400
 800f198:	40014000 	.word	0x40014000
 800f19c:	40014400 	.word	0x40014400
 800f1a0:	40014800 	.word	0x40014800
 800f1a4:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a38      	ldr	r2, [pc, #224]	; (800f290 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d022      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ba:	d01d      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a34      	ldr	r2, [pc, #208]	; (800f294 <HAL_TIM_OC_ConfigChannel+0x3c0>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d018      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a33      	ldr	r2, [pc, #204]	; (800f298 <HAL_TIM_OC_ConfigChannel+0x3c4>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d013      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a31      	ldr	r2, [pc, #196]	; (800f29c <HAL_TIM_OC_ConfigChannel+0x3c8>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d00e      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4a30      	ldr	r2, [pc, #192]	; (800f2a0 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d009      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a2e      	ldr	r2, [pc, #184]	; (800f2a4 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d004      	beq.n	800f1f8 <HAL_TIM_OC_ConfigChannel+0x324>
 800f1ee:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800f1f2:	482d      	ldr	r0, [pc, #180]	; (800f2a8 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f1f4:	f009 fadb 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68b9      	ldr	r1, [r7, #8]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f002 f99a 	bl	8011538 <TIM_OC4_SetConfig>
      break;
 800f204:	e036      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a21      	ldr	r2, [pc, #132]	; (800f290 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d00e      	beq.n	800f22e <HAL_TIM_OC_ConfigChannel+0x35a>
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a22      	ldr	r2, [pc, #136]	; (800f2a0 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d009      	beq.n	800f22e <HAL_TIM_OC_ConfigChannel+0x35a>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4a21      	ldr	r2, [pc, #132]	; (800f2a4 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d004      	beq.n	800f22e <HAL_TIM_OC_ConfigChannel+0x35a>
 800f224:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800f228:	481f      	ldr	r0, [pc, #124]	; (800f2a8 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f22a:	f009 fac0 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	68b9      	ldr	r1, [r7, #8]
 800f234:	4618      	mov	r0, r3
 800f236:	f002 fa3b 	bl	80116b0 <TIM_OC5_SetConfig>
      break;
 800f23a:	e01b      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a13      	ldr	r2, [pc, #76]	; (800f290 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d00e      	beq.n	800f264 <HAL_TIM_OC_ConfigChannel+0x390>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a15      	ldr	r2, [pc, #84]	; (800f2a0 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d009      	beq.n	800f264 <HAL_TIM_OC_ConfigChannel+0x390>
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a13      	ldr	r2, [pc, #76]	; (800f2a4 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d004      	beq.n	800f264 <HAL_TIM_OC_ConfigChannel+0x390>
 800f25a:	f640 51cf 	movw	r1, #3535	; 0xdcf
 800f25e:	4812      	ldr	r0, [pc, #72]	; (800f2a8 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f260:	f009 faa5 	bl	80187ae <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68b9      	ldr	r1, [r7, #8]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f002 fa8a 	bl	8011784 <TIM_OC6_SetConfig>
      break;
 800f270:	e000      	b.n	800f274 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    default:
      break;
 800f272:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	40012c00 	.word	0x40012c00
 800f294:	40000400 	.word	0x40000400
 800f298:	40000800 	.word	0x40000800
 800f29c:	40000c00 	.word	0x40000c00
 800f2a0:	40013400 	.word	0x40013400
 800f2a4:	40015000 	.word	0x40015000
 800f2a8:	0801dcc4 	.word	0x0801dcc4

0800f2ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a77      	ldr	r2, [pc, #476]	; (800f49c <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d031      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2ca:	d02c      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a73      	ldr	r2, [pc, #460]	; (800f4a0 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d027      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a72      	ldr	r2, [pc, #456]	; (800f4a4 <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d022      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a70      	ldr	r2, [pc, #448]	; (800f4a8 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d01d      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a6f      	ldr	r2, [pc, #444]	; (800f4ac <HAL_TIM_IC_ConfigChannel+0x200>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d018      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a6d      	ldr	r2, [pc, #436]	; (800f4b0 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d013      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a6c      	ldr	r2, [pc, #432]	; (800f4b4 <HAL_TIM_IC_ConfigChannel+0x208>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d00e      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a6a      	ldr	r2, [pc, #424]	; (800f4b8 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d009      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a69      	ldr	r2, [pc, #420]	; (800f4bc <HAL_TIM_IC_ConfigChannel+0x210>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d004      	beq.n	800f326 <HAL_TIM_IC_ConfigChannel+0x7a>
 800f31c:	f640 51f1 	movw	r1, #3569	; 0xdf1
 800f320:	4867      	ldr	r0, [pc, #412]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f322:	f009 fa44 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00c      	beq.n	800f348 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d008      	beq.n	800f348 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b0a      	cmp	r3, #10
 800f33c:	d004      	beq.n	800f348 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f33e:	f640 51f2 	movw	r1, #3570	; 0xdf2
 800f342:	485f      	ldr	r0, [pc, #380]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f344:	f009 fa33 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d00c      	beq.n	800f36a <HAL_TIM_IC_ConfigChannel+0xbe>
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	2b02      	cmp	r3, #2
 800f356:	d008      	beq.n	800f36a <HAL_TIM_IC_ConfigChannel+0xbe>
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	2b03      	cmp	r3, #3
 800f35e:	d004      	beq.n	800f36a <HAL_TIM_IC_ConfigChannel+0xbe>
 800f360:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800f364:	4856      	ldr	r0, [pc, #344]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f366:	f009 fa22 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d010      	beq.n	800f394 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	2b04      	cmp	r3, #4
 800f378:	d00c      	beq.n	800f394 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	2b08      	cmp	r3, #8
 800f380:	d008      	beq.n	800f394 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	2b0c      	cmp	r3, #12
 800f388:	d004      	beq.n	800f394 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f38a:	f640 51f4 	movw	r1, #3572	; 0xdf4
 800f38e:	484c      	ldr	r0, [pc, #304]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f390:	f009 fa0d 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	2b0f      	cmp	r3, #15
 800f39a:	d904      	bls.n	800f3a6 <HAL_TIM_IC_ConfigChannel+0xfa>
 800f39c:	f640 51f5 	movw	r1, #3573	; 0xdf5
 800f3a0:	4847      	ldr	r0, [pc, #284]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f3a2:	f009 fa04 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d101      	bne.n	800f3b4 <HAL_TIM_IC_ConfigChannel+0x108>
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	e11b      	b.n	800f5ec <HAL_TIM_IC_ConfigChannel+0x340>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2202      	movs	r2, #2
 800f3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d11b      	bne.n	800f402 <HAL_TIM_IC_ConfigChannel+0x156>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6818      	ldr	r0, [r3, #0]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6819      	ldr	r1, [r3, #0]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	f002 feb7 	bl	801214c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	699a      	ldr	r2, [r3, #24]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f022 020c 	bic.w	r2, r2, #12
 800f3ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6999      	ldr	r1, [r3, #24]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	689a      	ldr	r2, [r3, #8]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	619a      	str	r2, [r3, #24]
 800f400:	e0eb      	b.n	800f5da <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b04      	cmp	r3, #4
 800f406:	d15d      	bne.n	800f4c4 <HAL_TIM_IC_ConfigChannel+0x218>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a23      	ldr	r2, [pc, #140]	; (800f49c <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d027      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f41a:	d022      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a1f      	ldr	r2, [pc, #124]	; (800f4a0 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d01d      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a1e      	ldr	r2, [pc, #120]	; (800f4a4 <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d018      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a1c      	ldr	r2, [pc, #112]	; (800f4a8 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d013      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a1b      	ldr	r2, [pc, #108]	; (800f4ac <HAL_TIM_IC_ConfigChannel+0x200>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d00e      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a19      	ldr	r2, [pc, #100]	; (800f4b0 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d009      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a1a      	ldr	r2, [pc, #104]	; (800f4bc <HAL_TIM_IC_ConfigChannel+0x210>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d004      	beq.n	800f462 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f458:	f640 610d 	movw	r1, #3597	; 0xe0d
 800f45c:	4818      	ldr	r0, [pc, #96]	; (800f4c0 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f45e:	f009 f9a6 	bl	80187ae <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	6819      	ldr	r1, [r3, #0]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	f002 ff0e 	bl	8012292 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	699a      	ldr	r2, [r3, #24]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f484:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6999      	ldr	r1, [r3, #24]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	021a      	lsls	r2, r3, #8
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	619a      	str	r2, [r3, #24]
 800f49a:	e09e      	b.n	800f5da <HAL_TIM_IC_ConfigChannel+0x32e>
 800f49c:	40012c00 	.word	0x40012c00
 800f4a0:	40000400 	.word	0x40000400
 800f4a4:	40000800 	.word	0x40000800
 800f4a8:	40000c00 	.word	0x40000c00
 800f4ac:	40013400 	.word	0x40013400
 800f4b0:	40014000 	.word	0x40014000
 800f4b4:	40014400 	.word	0x40014400
 800f4b8:	40014800 	.word	0x40014800
 800f4bc:	40015000 	.word	0x40015000
 800f4c0:	0801dcc4 	.word	0x0801dcc4
  }
  else if (Channel == TIM_CHANNEL_3)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b08      	cmp	r3, #8
 800f4c8:	d143      	bne.n	800f552 <HAL_TIM_IC_ConfigChannel+0x2a6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4a49      	ldr	r2, [pc, #292]	; (800f5f4 <HAL_TIM_IC_ConfigChannel+0x348>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d022      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4dc:	d01d      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a45      	ldr	r2, [pc, #276]	; (800f5f8 <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d018      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a43      	ldr	r2, [pc, #268]	; (800f5fc <HAL_TIM_IC_ConfigChannel+0x350>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d013      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4a42      	ldr	r2, [pc, #264]	; (800f600 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d00e      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a40      	ldr	r2, [pc, #256]	; (800f604 <HAL_TIM_IC_ConfigChannel+0x358>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d009      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a3f      	ldr	r2, [pc, #252]	; (800f608 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d004      	beq.n	800f51a <HAL_TIM_IC_ConfigChannel+0x26e>
 800f510:	f640 611d 	movw	r1, #3613	; 0xe1d
 800f514:	483d      	ldr	r0, [pc, #244]	; (800f60c <HAL_TIM_IC_ConfigChannel+0x360>)
 800f516:	f009 f94a 	bl	80187ae <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	6819      	ldr	r1, [r3, #0]
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	f002 ff1f 	bl	801236c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	69da      	ldr	r2, [r3, #28]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f022 020c 	bic.w	r2, r2, #12
 800f53c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	69d9      	ldr	r1, [r3, #28]
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	689a      	ldr	r2, [r3, #8]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	430a      	orrs	r2, r1
 800f54e:	61da      	str	r2, [r3, #28]
 800f550:	e043      	b.n	800f5da <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a27      	ldr	r2, [pc, #156]	; (800f5f4 <HAL_TIM_IC_ConfigChannel+0x348>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d022      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f564:	d01d      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a23      	ldr	r2, [pc, #140]	; (800f5f8 <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d018      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a21      	ldr	r2, [pc, #132]	; (800f5fc <HAL_TIM_IC_ConfigChannel+0x350>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d013      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a20      	ldr	r2, [pc, #128]	; (800f600 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d00e      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a1e      	ldr	r2, [pc, #120]	; (800f604 <HAL_TIM_IC_ConfigChannel+0x358>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d009      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a1d      	ldr	r2, [pc, #116]	; (800f608 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d004      	beq.n	800f5a2 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f598:	f640 612d 	movw	r1, #3629	; 0xe2d
 800f59c:	481b      	ldr	r0, [pc, #108]	; (800f60c <HAL_TIM_IC_ConfigChannel+0x360>)
 800f59e:	f009 f906 	bl	80187ae <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6818      	ldr	r0, [r3, #0]
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	6819      	ldr	r1, [r3, #0]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	f002 ff17 	bl	80123e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	69da      	ldr	r2, [r3, #28]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f5c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	69d9      	ldr	r1, [r3, #28]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	021a      	lsls	r2, r3, #8
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	430a      	orrs	r2, r1
 800f5d8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2201      	movs	r2, #1
 800f5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	40012c00 	.word	0x40012c00
 800f5f8:	40000400 	.word	0x40000400
 800f5fc:	40000800 	.word	0x40000800
 800f600:	40000c00 	.word	0x40000c00
 800f604:	40013400 	.word	0x40013400
 800f608:	40015000 	.word	0x40015000
 800f60c:	0801dcc4 	.word	0x0801dcc4

0800f610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d016      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b04      	cmp	r3, #4
 800f626:	d013      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b08      	cmp	r3, #8
 800f62c:	d010      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b0c      	cmp	r3, #12
 800f632:	d00d      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b10      	cmp	r3, #16
 800f638:	d00a      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2b14      	cmp	r3, #20
 800f63e:	d007      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b3c      	cmp	r3, #60	; 0x3c
 800f644:	d004      	beq.n	800f650 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f646:	f640 6156 	movw	r1, #3670	; 0xe56
 800f64a:	4892      	ldr	r0, [pc, #584]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f64c:	f009 f8af 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b60      	cmp	r3, #96	; 0x60
 800f656:	d01c      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b70      	cmp	r3, #112	; 0x70
 800f65e:	d018      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a8c      	ldr	r2, [pc, #560]	; (800f898 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d013      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a8b      	ldr	r2, [pc, #556]	; (800f89c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d00e      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a89      	ldr	r2, [pc, #548]	; (800f8a0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d009      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4a88      	ldr	r2, [pc, #544]	; (800f8a4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d004      	beq.n	800f692 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f688:	f640 6157 	movw	r1, #3671	; 0xe57
 800f68c:	4881      	ldr	r0, [pc, #516]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f68e:	f009 f88e 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d008      	beq.n	800f6ac <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d004      	beq.n	800f6ac <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f6a2:	f640 6158 	movw	r1, #3672	; 0xe58
 800f6a6:	487b      	ldr	r0, [pc, #492]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f6a8:	f009 f881 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d008      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	2b04      	cmp	r3, #4
 800f6ba:	d004      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f6bc:	f640 6159 	movw	r1, #3673	; 0xe59
 800f6c0:	4874      	ldr	r0, [pc, #464]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f6c2:	f009 f874 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d101      	bne.n	800f6d4 <HAL_TIM_PWM_ConfigChannel+0xc4>
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e1ff      	b.n	800fad4 <HAL_TIM_PWM_ConfigChannel+0x4c4>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2202      	movs	r2, #2
 800f6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b14      	cmp	r3, #20
 800f6e8:	f200 81ea 	bhi.w	800fac0 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800f6ec:	a201      	add	r2, pc, #4	; (adr r2, 800f6f4 <HAL_TIM_PWM_ConfigChannel+0xe4>)
 800f6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f2:	bf00      	nop
 800f6f4:	0800f749 	.word	0x0800f749
 800f6f8:	0800fac1 	.word	0x0800fac1
 800f6fc:	0800fac1 	.word	0x0800fac1
 800f700:	0800fac1 	.word	0x0800fac1
 800f704:	0800f7f7 	.word	0x0800f7f7
 800f708:	0800fac1 	.word	0x0800fac1
 800f70c:	0800fac1 	.word	0x0800fac1
 800f710:	0800fac1 	.word	0x0800fac1
 800f714:	0800f8cd 	.word	0x0800f8cd
 800f718:	0800fac1 	.word	0x0800fac1
 800f71c:	0800fac1 	.word	0x0800fac1
 800f720:	0800fac1 	.word	0x0800fac1
 800f724:	0800f95d 	.word	0x0800f95d
 800f728:	0800fac1 	.word	0x0800fac1
 800f72c:	0800fac1 	.word	0x0800fac1
 800f730:	0800fac1 	.word	0x0800fac1
 800f734:	0800f9ef 	.word	0x0800f9ef
 800f738:	0800fac1 	.word	0x0800fac1
 800f73c:	0800fac1 	.word	0x0800fac1
 800f740:	0800fac1 	.word	0x0800fac1
 800f744:	0800fa57 	.word	0x0800fa57
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a56      	ldr	r2, [pc, #344]	; (800f8a8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d031      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f75a:	d02c      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a52      	ldr	r2, [pc, #328]	; (800f8ac <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d027      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a51      	ldr	r2, [pc, #324]	; (800f8b0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d022      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a4f      	ldr	r2, [pc, #316]	; (800f8b4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d01d      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a4e      	ldr	r2, [pc, #312]	; (800f8b8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d018      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4a4c      	ldr	r2, [pc, #304]	; (800f8bc <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d013      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a4b      	ldr	r2, [pc, #300]	; (800f8c0 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d00e      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a49      	ldr	r2, [pc, #292]	; (800f8c4 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d009      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a48      	ldr	r2, [pc, #288]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d004      	beq.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7ac:	f640 6165 	movw	r1, #3685	; 0xe65
 800f7b0:	4838      	ldr	r0, [pc, #224]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f7b2:	f008 fffc 	bl	80187ae <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68b9      	ldr	r1, [r7, #8]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f001 fc7f 	bl	80110c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	699a      	ldr	r2, [r3, #24]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f042 0208 	orr.w	r2, r2, #8
 800f7d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	699a      	ldr	r2, [r3, #24]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f022 0204 	bic.w	r2, r2, #4
 800f7e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	6999      	ldr	r1, [r3, #24]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	691a      	ldr	r2, [r3, #16]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	619a      	str	r2, [r3, #24]
      break;
 800f7f4:	e165      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a2b      	ldr	r2, [pc, #172]	; (800f8a8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d027      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f808:	d022      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a27      	ldr	r2, [pc, #156]	; (800f8ac <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d01d      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a25      	ldr	r2, [pc, #148]	; (800f8b0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d018      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a24      	ldr	r2, [pc, #144]	; (800f8b4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d013      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a22      	ldr	r2, [pc, #136]	; (800f8b8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d00e      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4a21      	ldr	r2, [pc, #132]	; (800f8bc <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d009      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a21      	ldr	r2, [pc, #132]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d004      	beq.n	800f850 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f846:	f640 6176 	movw	r1, #3702	; 0xe76
 800f84a:	4812      	ldr	r0, [pc, #72]	; (800f894 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f84c:	f008 ffaf 	bl	80187ae <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68b9      	ldr	r1, [r7, #8]
 800f856:	4618      	mov	r0, r3
 800f858:	f001 fcf6 	bl	8011248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	699a      	ldr	r2, [r3, #24]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f86a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f87a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6999      	ldr	r1, [r3, #24]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	021a      	lsls	r2, r3, #8
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	430a      	orrs	r2, r1
 800f88e:	619a      	str	r2, [r3, #24]
      break;
 800f890:	e117      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
 800f892:	bf00      	nop
 800f894:	0801dcc4 	.word	0x0801dcc4
 800f898:	00010040 	.word	0x00010040
 800f89c:	00010050 	.word	0x00010050
 800f8a0:	00010060 	.word	0x00010060
 800f8a4:	00010070 	.word	0x00010070
 800f8a8:	40012c00 	.word	0x40012c00
 800f8ac:	40000400 	.word	0x40000400
 800f8b0:	40000800 	.word	0x40000800
 800f8b4:	40000c00 	.word	0x40000c00
 800f8b8:	40013400 	.word	0x40013400
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40014400 	.word	0x40014400
 800f8c4:	40014800 	.word	0x40014800
 800f8c8:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a82      	ldr	r2, [pc, #520]	; (800fadc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d022      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8de:	d01d      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a7e      	ldr	r2, [pc, #504]	; (800fae0 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d018      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a7d      	ldr	r2, [pc, #500]	; (800fae4 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d013      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a7b      	ldr	r2, [pc, #492]	; (800fae8 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d00e      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a7a      	ldr	r2, [pc, #488]	; (800faec <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d009      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a78      	ldr	r2, [pc, #480]	; (800faf0 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d004      	beq.n	800f91c <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f912:	f640 6187 	movw	r1, #3719	; 0xe87
 800f916:	4877      	ldr	r0, [pc, #476]	; (800faf4 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f918:	f008 ff49 	bl	80187ae <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68b9      	ldr	r1, [r7, #8]
 800f922:	4618      	mov	r0, r3
 800f924:	f001 fd4c 	bl	80113c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	69da      	ldr	r2, [r3, #28]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f042 0208 	orr.w	r2, r2, #8
 800f936:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	69da      	ldr	r2, [r3, #28]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f022 0204 	bic.w	r2, r2, #4
 800f946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	69d9      	ldr	r1, [r3, #28]
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	691a      	ldr	r2, [r3, #16]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	61da      	str	r2, [r3, #28]
      break;
 800f95a:	e0b2      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a5e      	ldr	r2, [pc, #376]	; (800fadc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d022      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f96e:	d01d      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a5a      	ldr	r2, [pc, #360]	; (800fae0 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d018      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a59      	ldr	r2, [pc, #356]	; (800fae4 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d013      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a57      	ldr	r2, [pc, #348]	; (800fae8 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d00e      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a56      	ldr	r2, [pc, #344]	; (800faec <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d009      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a54      	ldr	r2, [pc, #336]	; (800faf0 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d004      	beq.n	800f9ac <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9a2:	f640 6198 	movw	r1, #3736	; 0xe98
 800f9a6:	4853      	ldr	r0, [pc, #332]	; (800faf4 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f9a8:	f008 ff01 	bl	80187ae <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f001 fdc0 	bl	8011538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	69da      	ldr	r2, [r3, #28]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	69da      	ldr	r2, [r3, #28]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	69d9      	ldr	r1, [r3, #28]
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	691b      	ldr	r3, [r3, #16]
 800f9e2:	021a      	lsls	r2, r3, #8
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	430a      	orrs	r2, r1
 800f9ea:	61da      	str	r2, [r3, #28]
      break;
 800f9ec:	e069      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a3a      	ldr	r2, [pc, #232]	; (800fadc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d00e      	beq.n	800fa16 <HAL_TIM_PWM_ConfigChannel+0x406>
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a3b      	ldr	r2, [pc, #236]	; (800faec <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d009      	beq.n	800fa16 <HAL_TIM_PWM_ConfigChannel+0x406>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a3a      	ldr	r2, [pc, #232]	; (800faf0 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d004      	beq.n	800fa16 <HAL_TIM_PWM_ConfigChannel+0x406>
 800fa0c:	f640 61a9 	movw	r1, #3753	; 0xea9
 800fa10:	4838      	ldr	r0, [pc, #224]	; (800faf4 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800fa12:	f008 fecc 	bl	80187ae <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68b9      	ldr	r1, [r7, #8]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f001 fe47 	bl	80116b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f042 0208 	orr.w	r2, r2, #8
 800fa30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f022 0204 	bic.w	r2, r2, #4
 800fa40:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	691a      	ldr	r2, [r3, #16]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	430a      	orrs	r2, r1
 800fa52:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800fa54:	e035      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a20      	ldr	r2, [pc, #128]	; (800fadc <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d00e      	beq.n	800fa7e <HAL_TIM_PWM_ConfigChannel+0x46e>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a21      	ldr	r2, [pc, #132]	; (800faec <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d009      	beq.n	800fa7e <HAL_TIM_PWM_ConfigChannel+0x46e>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a20      	ldr	r2, [pc, #128]	; (800faf0 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d004      	beq.n	800fa7e <HAL_TIM_PWM_ConfigChannel+0x46e>
 800fa74:	f640 61ba 	movw	r1, #3770	; 0xeba
 800fa78:	481e      	ldr	r0, [pc, #120]	; (800faf4 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800fa7a:	f008 fe98 	bl	80187ae <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	68b9      	ldr	r1, [r7, #8]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f001 fe7d 	bl	8011784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faa8:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	021a      	lsls	r2, r3, #8
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	430a      	orrs	r2, r1
 800fabc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800fabe:	e000      	b.n	800fac2 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      break;
 800fac0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3710      	adds	r7, #16
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	40012c00 	.word	0x40012c00
 800fae0:	40000400 	.word	0x40000400
 800fae4:	40000800 	.word	0x40000800
 800fae8:	40000c00 	.word	0x40000c00
 800faec:	40013400 	.word	0x40013400
 800faf0:	40015000 	.word	0x40015000
 800faf4:	0801dcc4 	.word	0x0801dcc4

0800faf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d102      	bne.n	800fb12 <HAL_TIM_ConfigClockSource+0x1a>
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	f000 be84 	b.w	801081a <HAL_TIM_ConfigClockSource+0xd22>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb2a:	d051      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb34:	d04c      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d048      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b10      	cmp	r3, #16
 800fb44:	d044      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b20      	cmp	r3, #32
 800fb4c:	d040      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b30      	cmp	r3, #48	; 0x30
 800fb54:	d03c      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b40      	cmp	r3, #64	; 0x40
 800fb5c:	d038      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2b50      	cmp	r3, #80	; 0x50
 800fb64:	d034      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b60      	cmp	r3, #96	; 0x60
 800fb6c:	d030      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b70      	cmp	r3, #112	; 0x70
 800fb74:	d02c      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb7e:	d027      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fb88:	d022      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a70      	ldr	r2, [pc, #448]	; (800fd50 <HAL_TIM_ConfigClockSource+0x258>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d01d      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a6e      	ldr	r2, [pc, #440]	; (800fd54 <HAL_TIM_ConfigClockSource+0x25c>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d018      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a6d      	ldr	r2, [pc, #436]	; (800fd58 <HAL_TIM_ConfigClockSource+0x260>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d013      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a6b      	ldr	r2, [pc, #428]	; (800fd5c <HAL_TIM_ConfigClockSource+0x264>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d00e      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a6a      	ldr	r2, [pc, #424]	; (800fd60 <HAL_TIM_ConfigClockSource+0x268>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d009      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a68      	ldr	r2, [pc, #416]	; (800fd64 <HAL_TIM_ConfigClockSource+0x26c>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d004      	beq.n	800fbd0 <HAL_TIM_ConfigClockSource+0xd8>
 800fbc6:	f241 21ea 	movw	r1, #4842	; 0x12ea
 800fbca:	4867      	ldr	r0, [pc, #412]	; (800fd68 <HAL_TIM_ConfigClockSource+0x270>)
 800fbcc:	f008 fdef 	bl	80187ae <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800fbde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fbe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbfc:	d059      	beq.n	800fcb2 <HAL_TIM_ConfigClockSource+0x1ba>
 800fbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc02:	d821      	bhi.n	800fc48 <HAL_TIM_ConfigClockSource+0x150>
 800fc04:	2b30      	cmp	r3, #48	; 0x30
 800fc06:	f000 82f7 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc0a:	2b30      	cmp	r3, #48	; 0x30
 800fc0c:	d80a      	bhi.n	800fc24 <HAL_TIM_ConfigClockSource+0x12c>
 800fc0e:	2b10      	cmp	r3, #16
 800fc10:	f000 82f2 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	f000 82ef 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 82ec 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fc20:	f000 bdf2 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc24:	2b50      	cmp	r3, #80	; 0x50
 800fc26:	f000 81b7 	beq.w	800ff98 <HAL_TIM_ConfigClockSource+0x4a0>
 800fc2a:	2b50      	cmp	r3, #80	; 0x50
 800fc2c:	d804      	bhi.n	800fc38 <HAL_TIM_ConfigClockSource+0x140>
 800fc2e:	2b40      	cmp	r3, #64	; 0x40
 800fc30:	f000 8272 	beq.w	8010118 <HAL_TIM_ConfigClockSource+0x620>
      break;
 800fc34:	f000 bde8 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc38:	2b60      	cmp	r3, #96	; 0x60
 800fc3a:	f000 820d 	beq.w	8010058 <HAL_TIM_ConfigClockSource+0x560>
 800fc3e:	2b70      	cmp	r3, #112	; 0x70
 800fc40:	f000 80aa 	beq.w	800fd98 <HAL_TIM_ConfigClockSource+0x2a0>
      break;
 800fc44:	f000 bde0 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc48:	4a42      	ldr	r2, [pc, #264]	; (800fd54 <HAL_TIM_ConfigClockSource+0x25c>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	f000 82d4 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc50:	4a40      	ldr	r2, [pc, #256]	; (800fd54 <HAL_TIM_ConfigClockSource+0x25c>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d816      	bhi.n	800fc84 <HAL_TIM_ConfigClockSource+0x18c>
 800fc56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc5a:	f000 82cd 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc62:	d805      	bhi.n	800fc70 <HAL_TIM_ConfigClockSource+0x178>
 800fc64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc68:	f000 8111 	beq.w	800fe8e <HAL_TIM_ConfigClockSource+0x396>
      break;
 800fc6c:	f000 bdcc 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fc74:	f000 82c0 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc78:	4a35      	ldr	r2, [pc, #212]	; (800fd50 <HAL_TIM_ConfigClockSource+0x258>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	f000 82bc 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fc80:	f000 bdc2 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc84:	4a35      	ldr	r2, [pc, #212]	; (800fd5c <HAL_TIM_ConfigClockSource+0x264>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	f000 82b6 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fc8c:	4a33      	ldr	r2, [pc, #204]	; (800fd5c <HAL_TIM_ConfigClockSource+0x264>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d805      	bhi.n	800fc9e <HAL_TIM_ConfigClockSource+0x1a6>
 800fc92:	4a31      	ldr	r2, [pc, #196]	; (800fd58 <HAL_TIM_ConfigClockSource+0x260>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	f000 82af 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fc9a:	f000 bdb5 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc9e:	4a30      	ldr	r2, [pc, #192]	; (800fd60 <HAL_TIM_ConfigClockSource+0x268>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	f000 82a9 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
 800fca6:	4a2f      	ldr	r2, [pc, #188]	; (800fd64 <HAL_TIM_ConfigClockSource+0x26c>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	f000 82a5 	beq.w	80101f8 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fcae:	f000 bdab 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a2d      	ldr	r2, [pc, #180]	; (800fd6c <HAL_TIM_ConfigClockSource+0x274>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	f000 85a4 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcc6:	f000 859e 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a28      	ldr	r2, [pc, #160]	; (800fd70 <HAL_TIM_ConfigClockSource+0x278>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	f000 8598 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4a26      	ldr	r2, [pc, #152]	; (800fd74 <HAL_TIM_ConfigClockSource+0x27c>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	f000 8592 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a24      	ldr	r2, [pc, #144]	; (800fd78 <HAL_TIM_ConfigClockSource+0x280>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	f000 858c 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a22      	ldr	r2, [pc, #136]	; (800fd7c <HAL_TIM_ConfigClockSource+0x284>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	f000 8586 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a20      	ldr	r2, [pc, #128]	; (800fd80 <HAL_TIM_ConfigClockSource+0x288>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	f000 8580 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a1e      	ldr	r2, [pc, #120]	; (800fd84 <HAL_TIM_ConfigClockSource+0x28c>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	f000 857a 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a1c      	ldr	r2, [pc, #112]	; (800fd88 <HAL_TIM_ConfigClockSource+0x290>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	f000 8574 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a1a      	ldr	r2, [pc, #104]	; (800fd8c <HAL_TIM_ConfigClockSource+0x294>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	f000 856e 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a18      	ldr	r2, [pc, #96]	; (800fd90 <HAL_TIM_ConfigClockSource+0x298>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	f000 8568 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4a16      	ldr	r2, [pc, #88]	; (800fd94 <HAL_TIM_ConfigClockSource+0x29c>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	f000 8562 	beq.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd42:	f241 21f6 	movw	r1, #4854	; 0x12f6
 800fd46:	4808      	ldr	r0, [pc, #32]	; (800fd68 <HAL_TIM_ConfigClockSource+0x270>)
 800fd48:	f008 fd31 	bl	80187ae <assert_failed>
      break;
 800fd4c:	f000 bd5b 	b.w	8010806 <HAL_TIM_ConfigClockSource+0xd0e>
 800fd50:	00100020 	.word	0x00100020
 800fd54:	00100030 	.word	0x00100030
 800fd58:	00100040 	.word	0x00100040
 800fd5c:	00100050 	.word	0x00100050
 800fd60:	00100060 	.word	0x00100060
 800fd64:	00100070 	.word	0x00100070
 800fd68:	0801dcc4 	.word	0x0801dcc4
 800fd6c:	40012c00 	.word	0x40012c00
 800fd70:	40000400 	.word	0x40000400
 800fd74:	40000800 	.word	0x40000800
 800fd78:	40000c00 	.word	0x40000c00
 800fd7c:	40001000 	.word	0x40001000
 800fd80:	40001400 	.word	0x40001400
 800fd84:	40013400 	.word	0x40013400
 800fd88:	40014000 	.word	0x40014000
 800fd8c:	40014400 	.word	0x40014400
 800fd90:	40014800 	.word	0x40014800
 800fd94:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a77      	ldr	r2, [pc, #476]	; (800ff7c <HAL_TIM_ConfigClockSource+0x484>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d022      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdaa:	d01d      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a73      	ldr	r2, [pc, #460]	; (800ff80 <HAL_TIM_ConfigClockSource+0x488>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d018      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a72      	ldr	r2, [pc, #456]	; (800ff84 <HAL_TIM_ConfigClockSource+0x48c>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d013      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a70      	ldr	r2, [pc, #448]	; (800ff88 <HAL_TIM_ConfigClockSource+0x490>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d00e      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a6f      	ldr	r2, [pc, #444]	; (800ff8c <HAL_TIM_ConfigClockSource+0x494>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d009      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a6d      	ldr	r2, [pc, #436]	; (800ff90 <HAL_TIM_ConfigClockSource+0x498>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d004      	beq.n	800fde8 <HAL_TIM_ConfigClockSource+0x2f0>
 800fdde:	f241 21fd 	movw	r1, #4861	; 0x12fd
 800fde2:	486c      	ldr	r0, [pc, #432]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800fde4:	f008 fce3 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d013      	beq.n	800fe18 <HAL_TIM_ConfigClockSource+0x320>
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdf8:	d00e      	beq.n	800fe18 <HAL_TIM_ConfigClockSource+0x320>
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe02:	d009      	beq.n	800fe18 <HAL_TIM_ConfigClockSource+0x320>
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe0c:	d004      	beq.n	800fe18 <HAL_TIM_ConfigClockSource+0x320>
 800fe0e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800fe12:	4860      	ldr	r0, [pc, #384]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe14:	f008 fccb 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe20:	d014      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x354>
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d010      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x354>
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00c      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x354>
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d008      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x354>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	2b0a      	cmp	r3, #10
 800fe40:	d004      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x354>
 800fe42:	f241 3101 	movw	r1, #4865	; 0x1301
 800fe46:	4853      	ldr	r0, [pc, #332]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe48:	f008 fcb1 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	2b0f      	cmp	r3, #15
 800fe52:	d904      	bls.n	800fe5e <HAL_TIM_ConfigClockSource+0x366>
 800fe54:	f241 3102 	movw	r1, #4866	; 0x1302
 800fe58:	484e      	ldr	r0, [pc, #312]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe5a:	f008 fca8 	bl	80187ae <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6818      	ldr	r0, [r3, #0]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	6899      	ldr	r1, [r3, #8]
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	f002 fb13 	bl	8012498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fe80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	609a      	str	r2, [r3, #8]
      break;
 800fe8a:	f000 bcbd 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a3a      	ldr	r2, [pc, #232]	; (800ff7c <HAL_TIM_ConfigClockSource+0x484>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d022      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fea0:	d01d      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a36      	ldr	r2, [pc, #216]	; (800ff80 <HAL_TIM_ConfigClockSource+0x488>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d018      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a34      	ldr	r2, [pc, #208]	; (800ff84 <HAL_TIM_ConfigClockSource+0x48c>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d013      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a33      	ldr	r2, [pc, #204]	; (800ff88 <HAL_TIM_ConfigClockSource+0x490>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d00e      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a31      	ldr	r2, [pc, #196]	; (800ff8c <HAL_TIM_ConfigClockSource+0x494>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d009      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a30      	ldr	r2, [pc, #192]	; (800ff90 <HAL_TIM_ConfigClockSource+0x498>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d004      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x3e6>
 800fed4:	f241 3115 	movw	r1, #4885	; 0x1315
 800fed8:	482e      	ldr	r0, [pc, #184]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800feda:	f008 fc68 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d013      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x416>
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feee:	d00e      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x416>
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fef8:	d009      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x416>
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ff02:	d004      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x416>
 800ff04:	f241 3118 	movw	r1, #4888	; 0x1318
 800ff08:	4822      	ldr	r0, [pc, #136]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff0a:	f008 fc50 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff16:	d014      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x44a>
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d010      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x44a>
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00c      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x44a>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	d008      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x44a>
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	2b0a      	cmp	r3, #10
 800ff36:	d004      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x44a>
 800ff38:	f241 3119 	movw	r1, #4889	; 0x1319
 800ff3c:	4815      	ldr	r0, [pc, #84]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff3e:	f008 fc36 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	2b0f      	cmp	r3, #15
 800ff48:	d904      	bls.n	800ff54 <HAL_TIM_ConfigClockSource+0x45c>
 800ff4a:	f241 311a 	movw	r1, #4890	; 0x131a
 800ff4e:	4811      	ldr	r0, [pc, #68]	; (800ff94 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff50:	f008 fc2d 	bl	80187ae <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6818      	ldr	r0, [r3, #0]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	6899      	ldr	r1, [r3, #8]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	f002 fa98 	bl	8012498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	689a      	ldr	r2, [r3, #8]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff76:	609a      	str	r2, [r3, #8]
      break;
 800ff78:	f000 bc46 	b.w	8010808 <HAL_TIM_ConfigClockSource+0xd10>
 800ff7c:	40012c00 	.word	0x40012c00
 800ff80:	40000400 	.word	0x40000400
 800ff84:	40000800 	.word	0x40000800
 800ff88:	40000c00 	.word	0x40000c00
 800ff8c:	40013400 	.word	0x40013400
 800ff90:	40015000 	.word	0x40015000
 800ff94:	0801dcc4 	.word	0x0801dcc4
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a8e      	ldr	r2, [pc, #568]	; (80101d8 <HAL_TIM_ConfigClockSource+0x6e0>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d027      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffaa:	d022      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a8a      	ldr	r2, [pc, #552]	; (80101dc <HAL_TIM_ConfigClockSource+0x6e4>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d01d      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a89      	ldr	r2, [pc, #548]	; (80101e0 <HAL_TIM_ConfigClockSource+0x6e8>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d018      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a87      	ldr	r2, [pc, #540]	; (80101e4 <HAL_TIM_ConfigClockSource+0x6ec>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d013      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a86      	ldr	r2, [pc, #536]	; (80101e8 <HAL_TIM_ConfigClockSource+0x6f0>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d00e      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a84      	ldr	r2, [pc, #528]	; (80101ec <HAL_TIM_ConfigClockSource+0x6f4>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d009      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a83      	ldr	r2, [pc, #524]	; (80101f0 <HAL_TIM_ConfigClockSource+0x6f8>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d004      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffe8:	f241 3129 	movw	r1, #4905	; 0x1329
 800ffec:	4881      	ldr	r0, [pc, #516]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ffee:	f008 fbde 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fffa:	d014      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x52e>
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d010      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x52e>
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00c      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x52e>
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	2b02      	cmp	r3, #2
 8010012:	d008      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x52e>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2b0a      	cmp	r3, #10
 801001a:	d004      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x52e>
 801001c:	f241 312c 	movw	r1, #4908	; 0x132c
 8010020:	4874      	ldr	r0, [pc, #464]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010022:	f008 fbc4 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	2b0f      	cmp	r3, #15
 801002c:	d904      	bls.n	8010038 <HAL_TIM_ConfigClockSource+0x540>
 801002e:	f241 312d 	movw	r1, #4909	; 0x132d
 8010032:	4870      	ldr	r0, [pc, #448]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010034:	f008 fbbb 	bl	80187ae <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6818      	ldr	r0, [r3, #0]
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	6859      	ldr	r1, [r3, #4]
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	461a      	mov	r2, r3
 8010046:	f002 f8f5 	bl	8012234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2150      	movs	r1, #80	; 0x50
 8010050:	4618      	mov	r0, r3
 8010052:	f002 fa04 	bl	801245e <TIM_ITRx_SetConfig>
      break;
 8010056:	e3d7      	b.n	8010808 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a5e      	ldr	r2, [pc, #376]	; (80101d8 <HAL_TIM_ConfigClockSource+0x6e0>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d027      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801006a:	d022      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a5a      	ldr	r2, [pc, #360]	; (80101dc <HAL_TIM_ConfigClockSource+0x6e4>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d01d      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a59      	ldr	r2, [pc, #356]	; (80101e0 <HAL_TIM_ConfigClockSource+0x6e8>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d018      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4a57      	ldr	r2, [pc, #348]	; (80101e4 <HAL_TIM_ConfigClockSource+0x6ec>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d013      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a56      	ldr	r2, [pc, #344]	; (80101e8 <HAL_TIM_ConfigClockSource+0x6f0>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d00e      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a54      	ldr	r2, [pc, #336]	; (80101ec <HAL_TIM_ConfigClockSource+0x6f4>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d009      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4a53      	ldr	r2, [pc, #332]	; (80101f0 <HAL_TIM_ConfigClockSource+0x6f8>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d004      	beq.n	80100b2 <HAL_TIM_ConfigClockSource+0x5ba>
 80100a8:	f241 3139 	movw	r1, #4921	; 0x1339
 80100ac:	4851      	ldr	r0, [pc, #324]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80100ae:	f008 fb7e 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100ba:	d014      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ee>
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d010      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ee>
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00c      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ee>
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d008      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ee>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b0a      	cmp	r3, #10
 80100da:	d004      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ee>
 80100dc:	f241 313c 	movw	r1, #4924	; 0x133c
 80100e0:	4844      	ldr	r0, [pc, #272]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80100e2:	f008 fb64 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	2b0f      	cmp	r3, #15
 80100ec:	d904      	bls.n	80100f8 <HAL_TIM_ConfigClockSource+0x600>
 80100ee:	f241 313d 	movw	r1, #4925	; 0x133d
 80100f2:	4840      	ldr	r0, [pc, #256]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80100f4:	f008 fb5b 	bl	80187ae <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6818      	ldr	r0, [r3, #0]
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	6859      	ldr	r1, [r3, #4]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	461a      	mov	r2, r3
 8010106:	f002 f901 	bl	801230c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2160      	movs	r1, #96	; 0x60
 8010110:	4618      	mov	r0, r3
 8010112:	f002 f9a4 	bl	801245e <TIM_ITRx_SetConfig>
      break;
 8010116:	e377      	b.n	8010808 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a2e      	ldr	r2, [pc, #184]	; (80101d8 <HAL_TIM_ConfigClockSource+0x6e0>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d027      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801012a:	d022      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a2a      	ldr	r2, [pc, #168]	; (80101dc <HAL_TIM_ConfigClockSource+0x6e4>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d01d      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a29      	ldr	r2, [pc, #164]	; (80101e0 <HAL_TIM_ConfigClockSource+0x6e8>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d018      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a27      	ldr	r2, [pc, #156]	; (80101e4 <HAL_TIM_ConfigClockSource+0x6ec>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d013      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a26      	ldr	r2, [pc, #152]	; (80101e8 <HAL_TIM_ConfigClockSource+0x6f0>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d00e      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a24      	ldr	r2, [pc, #144]	; (80101ec <HAL_TIM_ConfigClockSource+0x6f4>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d009      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a23      	ldr	r2, [pc, #140]	; (80101f0 <HAL_TIM_ConfigClockSource+0x6f8>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d004      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x67a>
 8010168:	f241 3149 	movw	r1, #4937	; 0x1349
 801016c:	4821      	ldr	r0, [pc, #132]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 801016e:	f008 fb1e 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801017a:	d014      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x6ae>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d010      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x6ae>
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00c      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x6ae>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d008      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x6ae>
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	2b0a      	cmp	r3, #10
 801019a:	d004      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x6ae>
 801019c:	f241 314c 	movw	r1, #4940	; 0x134c
 80101a0:	4814      	ldr	r0, [pc, #80]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80101a2:	f008 fb04 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	2b0f      	cmp	r3, #15
 80101ac:	d904      	bls.n	80101b8 <HAL_TIM_ConfigClockSource+0x6c0>
 80101ae:	f241 314d 	movw	r1, #4941	; 0x134d
 80101b2:	4810      	ldr	r0, [pc, #64]	; (80101f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80101b4:	f008 fafb 	bl	80187ae <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	6859      	ldr	r1, [r3, #4]
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	461a      	mov	r2, r3
 80101c6:	f002 f835 	bl	8012234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2140      	movs	r1, #64	; 0x40
 80101d0:	4618      	mov	r0, r3
 80101d2:	f002 f944 	bl	801245e <TIM_ITRx_SetConfig>
      break;
 80101d6:	e317      	b.n	8010808 <HAL_TIM_ConfigClockSource+0xd10>
 80101d8:	40012c00 	.word	0x40012c00
 80101dc:	40000400 	.word	0x40000400
 80101e0:	40000800 	.word	0x40000800
 80101e4:	40000c00 	.word	0x40000c00
 80101e8:	40013400 	.word	0x40013400
 80101ec:	40014000 	.word	0x40014000
 80101f0:	40015000 	.word	0x40015000
 80101f4:	0801dcc4 	.word	0x0801dcc4
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4ab2      	ldr	r2, [pc, #712]	; (80104c8 <HAL_TIM_ConfigClockSource+0x9d0>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d158      	bne.n	80102b4 <HAL_TIM_ConfigClockSource+0x7bc>
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801020a:	f000 82f3 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010216:	f000 82ed 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b10      	cmp	r3, #16
 8010220:	f000 82e8 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2b20      	cmp	r3, #32
 801022a:	f000 82e3 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b30      	cmp	r3, #48	; 0x30
 8010234:	f000 82de 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b40      	cmp	r3, #64	; 0x40
 801023e:	f000 82d9 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b50      	cmp	r3, #80	; 0x50
 8010248:	f000 82d4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b60      	cmp	r3, #96	; 0x60
 8010252:	f000 82cf 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b70      	cmp	r3, #112	; 0x70
 801025c:	f000 82ca 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010268:	f000 82c4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010274:	f000 82be 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4a93      	ldr	r2, [pc, #588]	; (80104cc <HAL_TIM_ConfigClockSource+0x9d4>)
 801027e:	4293      	cmp	r3, r2
 8010280:	f000 82b8 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a91      	ldr	r2, [pc, #580]	; (80104d0 <HAL_TIM_ConfigClockSource+0x9d8>)
 801028a:	4293      	cmp	r3, r2
 801028c:	f000 82b2 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a8f      	ldr	r2, [pc, #572]	; (80104d4 <HAL_TIM_ConfigClockSource+0x9dc>)
 8010296:	4293      	cmp	r3, r2
 8010298:	f000 82ac 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a8d      	ldr	r2, [pc, #564]	; (80104d8 <HAL_TIM_ConfigClockSource+0x9e0>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	f000 82a6 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4a8b      	ldr	r2, [pc, #556]	; (80104dc <HAL_TIM_ConfigClockSource+0x9e4>)
 80102ae:	4293      	cmp	r3, r2
 80102b0:	f000 82a0 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102bc:	d15e      	bne.n	801037c <HAL_TIM_ConfigClockSource+0x884>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102c6:	f000 8295 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102d2:	f000 828f 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 828a 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b20      	cmp	r3, #32
 80102e6:	f000 8285 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b30      	cmp	r3, #48	; 0x30
 80102f0:	f000 8280 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b40      	cmp	r3, #64	; 0x40
 80102fa:	f000 827b 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b50      	cmp	r3, #80	; 0x50
 8010304:	f000 8276 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b60      	cmp	r3, #96	; 0x60
 801030e:	f000 8271 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b70      	cmp	r3, #112	; 0x70
 8010318:	f000 826c 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010324:	f000 8266 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010330:	f000 8260 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a64      	ldr	r2, [pc, #400]	; (80104cc <HAL_TIM_ConfigClockSource+0x9d4>)
 801033a:	4293      	cmp	r3, r2
 801033c:	f000 825a 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a62      	ldr	r2, [pc, #392]	; (80104d0 <HAL_TIM_ConfigClockSource+0x9d8>)
 8010346:	4293      	cmp	r3, r2
 8010348:	f000 8254 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4a60      	ldr	r2, [pc, #384]	; (80104d4 <HAL_TIM_ConfigClockSource+0x9dc>)
 8010352:	4293      	cmp	r3, r2
 8010354:	f000 824e 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a5e      	ldr	r2, [pc, #376]	; (80104d8 <HAL_TIM_ConfigClockSource+0x9e0>)
 801035e:	4293      	cmp	r3, r2
 8010360:	f000 8248 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4a5c      	ldr	r2, [pc, #368]	; (80104dc <HAL_TIM_ConfigClockSource+0x9e4>)
 801036a:	4293      	cmp	r3, r2
 801036c:	f000 8242 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a5a      	ldr	r2, [pc, #360]	; (80104e0 <HAL_TIM_ConfigClockSource+0x9e8>)
 8010376:	4293      	cmp	r3, r2
 8010378:	f000 823c 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a58      	ldr	r2, [pc, #352]	; (80104e4 <HAL_TIM_ConfigClockSource+0x9ec>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d158      	bne.n	8010438 <HAL_TIM_ConfigClockSource+0x940>
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801038e:	f000 8231 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801039a:	f000 822b 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f000 8226 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b10      	cmp	r3, #16
 80103ae:	f000 8221 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b30      	cmp	r3, #48	; 0x30
 80103b8:	f000 821c 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2b40      	cmp	r3, #64	; 0x40
 80103c2:	f000 8217 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b50      	cmp	r3, #80	; 0x50
 80103cc:	f000 8212 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b60      	cmp	r3, #96	; 0x60
 80103d6:	f000 820d 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b70      	cmp	r3, #112	; 0x70
 80103e0:	f000 8208 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103ec:	f000 8202 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80103f8:	f000 81fc 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a32      	ldr	r2, [pc, #200]	; (80104cc <HAL_TIM_ConfigClockSource+0x9d4>)
 8010402:	4293      	cmp	r3, r2
 8010404:	f000 81f6 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a30      	ldr	r2, [pc, #192]	; (80104d0 <HAL_TIM_ConfigClockSource+0x9d8>)
 801040e:	4293      	cmp	r3, r2
 8010410:	f000 81f0 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a2e      	ldr	r2, [pc, #184]	; (80104d4 <HAL_TIM_ConfigClockSource+0x9dc>)
 801041a:	4293      	cmp	r3, r2
 801041c:	f000 81ea 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a2c      	ldr	r2, [pc, #176]	; (80104d8 <HAL_TIM_ConfigClockSource+0x9e0>)
 8010426:	4293      	cmp	r3, r2
 8010428:	f000 81e4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a2a      	ldr	r2, [pc, #168]	; (80104dc <HAL_TIM_ConfigClockSource+0x9e4>)
 8010432:	4293      	cmp	r3, r2
 8010434:	f000 81de 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <HAL_TIM_ConfigClockSource+0x9f0>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d16c      	bne.n	801051c <HAL_TIM_ConfigClockSource+0xa24>
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801044a:	f000 81d3 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010456:	f000 81cd 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	f000 81c8 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b10      	cmp	r3, #16
 801046a:	f000 81c3 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b20      	cmp	r3, #32
 8010474:	f000 81be 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010480:	f000 81b8 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b40      	cmp	r3, #64	; 0x40
 801048a:	f000 81b3 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b50      	cmp	r3, #80	; 0x50
 8010494:	f000 81ae 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b60      	cmp	r3, #96	; 0x60
 801049e:	f000 81a9 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b70      	cmp	r3, #112	; 0x70
 80104a8:	f000 81a4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80104b4:	f000 819e 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a03      	ldr	r2, [pc, #12]	; (80104cc <HAL_TIM_ConfigClockSource+0x9d4>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	f000 8198 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80104c4:	e012      	b.n	80104ec <HAL_TIM_ConfigClockSource+0x9f4>
 80104c6:	bf00      	nop
 80104c8:	40012c00 	.word	0x40012c00
 80104cc:	00100020 	.word	0x00100020
 80104d0:	00100030 	.word	0x00100030
 80104d4:	00100040 	.word	0x00100040
 80104d8:	00100050 	.word	0x00100050
 80104dc:	00100060 	.word	0x00100060
 80104e0:	00100070 	.word	0x00100070
 80104e4:	40000400 	.word	0x40000400
 80104e8:	40000800 	.word	0x40000800
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4aa8      	ldr	r2, [pc, #672]	; (8010794 <HAL_TIM_ConfigClockSource+0xc9c>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	f000 817e 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4aa6      	ldr	r2, [pc, #664]	; (8010798 <HAL_TIM_ConfigClockSource+0xca0>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	f000 8178 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4aa4      	ldr	r2, [pc, #656]	; (801079c <HAL_TIM_ConfigClockSource+0xca4>)
 801050a:	4293      	cmp	r3, r2
 801050c:	f000 8172 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4aa2      	ldr	r2, [pc, #648]	; (80107a0 <HAL_TIM_ConfigClockSource+0xca8>)
 8010516:	4293      	cmp	r3, r2
 8010518:	f000 816c 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4aa0      	ldr	r2, [pc, #640]	; (80107a4 <HAL_TIM_ConfigClockSource+0xcac>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d157      	bne.n	80105d6 <HAL_TIM_ConfigClockSource+0xade>
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801052e:	f000 8161 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801053a:	f000 815b 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 8156 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2b10      	cmp	r3, #16
 801054e:	f000 8151 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b20      	cmp	r3, #32
 8010558:	f000 814c 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b30      	cmp	r3, #48	; 0x30
 8010562:	f000 8147 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b40      	cmp	r3, #64	; 0x40
 801056c:	f000 8142 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2b50      	cmp	r3, #80	; 0x50
 8010576:	f000 813d 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b60      	cmp	r3, #96	; 0x60
 8010580:	f000 8138 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2b70      	cmp	r3, #112	; 0x70
 801058a:	f000 8133 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010596:	f000 812d 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a82      	ldr	r2, [pc, #520]	; (80107a8 <HAL_TIM_ConfigClockSource+0xcb0>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	f000 8127 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a7a      	ldr	r2, [pc, #488]	; (8010794 <HAL_TIM_ConfigClockSource+0xc9c>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	f000 8121 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a78      	ldr	r2, [pc, #480]	; (8010798 <HAL_TIM_ConfigClockSource+0xca0>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	f000 811b 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a76      	ldr	r2, [pc, #472]	; (801079c <HAL_TIM_ConfigClockSource+0xca4>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	f000 8115 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a74      	ldr	r2, [pc, #464]	; (80107a0 <HAL_TIM_ConfigClockSource+0xca8>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	f000 810f 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a74      	ldr	r2, [pc, #464]	; (80107ac <HAL_TIM_ConfigClockSource+0xcb4>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d157      	bne.n	8010690 <HAL_TIM_ConfigClockSource+0xb98>
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105e8:	f000 8104 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105f4:	f000 80fe 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 80f9 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b10      	cmp	r3, #16
 8010608:	f000 80f4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2b20      	cmp	r3, #32
 8010612:	f000 80ef 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b30      	cmp	r3, #48	; 0x30
 801061c:	f000 80ea 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b40      	cmp	r3, #64	; 0x40
 8010626:	f000 80e5 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b50      	cmp	r3, #80	; 0x50
 8010630:	f000 80e0 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b60      	cmp	r3, #96	; 0x60
 801063a:	f000 80db 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b70      	cmp	r3, #112	; 0x70
 8010644:	f000 80d6 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010650:	f000 80d0 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a53      	ldr	r2, [pc, #332]	; (80107a8 <HAL_TIM_ConfigClockSource+0xcb0>)
 801065a:	4293      	cmp	r3, r2
 801065c:	f000 80ca 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a4b      	ldr	r2, [pc, #300]	; (8010794 <HAL_TIM_ConfigClockSource+0xc9c>)
 8010666:	4293      	cmp	r3, r2
 8010668:	f000 80c4 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a49      	ldr	r2, [pc, #292]	; (8010798 <HAL_TIM_ConfigClockSource+0xca0>)
 8010672:	4293      	cmp	r3, r2
 8010674:	f000 80be 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a47      	ldr	r2, [pc, #284]	; (801079c <HAL_TIM_ConfigClockSource+0xca4>)
 801067e:	4293      	cmp	r3, r2
 8010680:	f000 80b8 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a45      	ldr	r2, [pc, #276]	; (80107a0 <HAL_TIM_ConfigClockSource+0xca8>)
 801068a:	4293      	cmp	r3, r2
 801068c:	f000 80b2 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a46      	ldr	r2, [pc, #280]	; (80107b0 <HAL_TIM_ConfigClockSource+0xcb8>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d146      	bne.n	8010728 <HAL_TIM_ConfigClockSource+0xc30>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106a2:	f000 80a7 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f000 80a2 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b10      	cmp	r3, #16
 80106b6:	f000 809d 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b20      	cmp	r3, #32
 80106c0:	f000 8098 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b30      	cmp	r3, #48	; 0x30
 80106ca:	f000 8093 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b40      	cmp	r3, #64	; 0x40
 80106d4:	f000 808e 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b50      	cmp	r3, #80	; 0x50
 80106de:	f000 8089 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b60      	cmp	r3, #96	; 0x60
 80106e8:	f000 8084 	beq.w	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106f4:	d07e      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80106fe:	d079      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a23      	ldr	r2, [pc, #140]	; (8010794 <HAL_TIM_ConfigClockSource+0xc9c>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d074      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a22      	ldr	r2, [pc, #136]	; (8010798 <HAL_TIM_ConfigClockSource+0xca0>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d06f      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a20      	ldr	r2, [pc, #128]	; (801079c <HAL_TIM_ConfigClockSource+0xca4>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d06a      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a1f      	ldr	r2, [pc, #124]	; (80107a0 <HAL_TIM_ConfigClockSource+0xca8>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d065      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a21      	ldr	r2, [pc, #132]	; (80107b4 <HAL_TIM_ConfigClockSource+0xcbc>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d15b      	bne.n	80107ea <HAL_TIM_ConfigClockSource+0xcf2>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801073a:	d05b      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010744:	d056      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d052      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b10      	cmp	r3, #16
 8010754:	d04e      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b20      	cmp	r3, #32
 801075c:	d04a      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b30      	cmp	r3, #48	; 0x30
 8010764:	d046      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b40      	cmp	r3, #64	; 0x40
 801076c:	d042      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b50      	cmp	r3, #80	; 0x50
 8010774:	d03e      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b60      	cmp	r3, #96	; 0x60
 801077c:	d03a      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2b70      	cmp	r3, #112	; 0x70
 8010784:	d036      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801078e:	d031      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 8010790:	e012      	b.n	80107b8 <HAL_TIM_ConfigClockSource+0xcc0>
 8010792:	bf00      	nop
 8010794:	00100030 	.word	0x00100030
 8010798:	00100040 	.word	0x00100040
 801079c:	00100050 	.word	0x00100050
 80107a0:	00100060 	.word	0x00100060
 80107a4:	40000c00 	.word	0x40000c00
 80107a8:	00100020 	.word	0x00100020
 80107ac:	40013400 	.word	0x40013400
 80107b0:	40014000 	.word	0x40014000
 80107b4:	40015000 	.word	0x40015000
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80107c0:	d018      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4a17      	ldr	r2, [pc, #92]	; (8010824 <HAL_TIM_ConfigClockSource+0xd2c>)
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d013      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a15      	ldr	r2, [pc, #84]	; (8010828 <HAL_TIM_ConfigClockSource+0xd30>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d00e      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4a14      	ldr	r2, [pc, #80]	; (801082c <HAL_TIM_ConfigClockSource+0xd34>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d009      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a12      	ldr	r2, [pc, #72]	; (8010830 <HAL_TIM_ConfigClockSource+0xd38>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d004      	beq.n	80107f4 <HAL_TIM_ConfigClockSource+0xcfc>
 80107ea:	f241 3168 	movw	r1, #4968	; 0x1368
 80107ee:	4811      	ldr	r0, [pc, #68]	; (8010834 <HAL_TIM_ConfigClockSource+0xd3c>)
 80107f0:	f007 ffdd 	bl	80187ae <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4619      	mov	r1, r3
 80107fe:	4610      	mov	r0, r2
 8010800:	f001 fe2d 	bl	801245e <TIM_ITRx_SetConfig>
      break;
 8010804:	e000      	b.n	8010808 <HAL_TIM_ConfigClockSource+0xd10>
      break;
 8010806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	00100020 	.word	0x00100020
 8010828:	00100030 	.word	0x00100030
 801082c:	00100040 	.word	0x00100040
 8010830:	00100060 	.word	0x00100060
 8010834:	0801dcc4 	.word	0x0801dcc4

08010838 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4aa8      	ldr	r2, [pc, #672]	; (8010ae8 <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d027      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010854:	d022      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4aa4      	ldr	r2, [pc, #656]	; (8010aec <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d01d      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4aa2      	ldr	r2, [pc, #648]	; (8010af0 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d018      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4aa1      	ldr	r2, [pc, #644]	; (8010af4 <HAL_TIM_SlaveConfigSynchro+0x2bc>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d013      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4a9f      	ldr	r2, [pc, #636]	; (8010af8 <HAL_TIM_SlaveConfigSynchro+0x2c0>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d00e      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a9e      	ldr	r2, [pc, #632]	; (8010afc <HAL_TIM_SlaveConfigSynchro+0x2c4>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d009      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a9c      	ldr	r2, [pc, #624]	; (8010b00 <HAL_TIM_SlaveConfigSynchro+0x2c8>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d004      	beq.n	801089c <HAL_TIM_SlaveConfigSynchro+0x64>
 8010892:	f241 31a7 	movw	r1, #5031	; 0x13a7
 8010896:	489b      	ldr	r0, [pc, #620]	; (8010b04 <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 8010898:	f007 ff89 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d01e      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b04      	cmp	r3, #4
 80108aa:	d01a      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b05      	cmp	r3, #5
 80108b2:	d016      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b06      	cmp	r3, #6
 80108ba:	d012      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b07      	cmp	r3, #7
 80108c2:	d00e      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108cc:	d009      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80108d6:	d004      	beq.n	80108e2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108d8:	f241 31a8 	movw	r1, #5032	; 0x13a8
 80108dc:	4889      	ldr	r0, [pc, #548]	; (8010b04 <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 80108de:	f007 ff66 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a80      	ldr	r2, [pc, #512]	; (8010ae8 <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d14c      	bne.n	8010986 <HAL_TIM_SlaveConfigSynchro+0x14e>
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	2b10      	cmp	r3, #16
 80108f2:	f000 82a4 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	2b20      	cmp	r3, #32
 80108fc:	f000 829f 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	2b30      	cmp	r3, #48	; 0x30
 8010906:	f000 829a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	2b40      	cmp	r3, #64	; 0x40
 8010910:	f000 8295 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	2b50      	cmp	r3, #80	; 0x50
 801091a:	f000 8290 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	2b60      	cmp	r3, #96	; 0x60
 8010924:	f000 828b 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	2b70      	cmp	r3, #112	; 0x70
 801092e:	f000 8286 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801093a:	f000 8280 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010946:	f000 827a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	4a6e      	ldr	r2, [pc, #440]	; (8010b08 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010950:	4293      	cmp	r3, r2
 8010952:	f000 8274 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4a6c      	ldr	r2, [pc, #432]	; (8010b0c <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 801095c:	4293      	cmp	r3, r2
 801095e:	f000 826e 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	4a6a      	ldr	r2, [pc, #424]	; (8010b10 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010968:	4293      	cmp	r3, r2
 801096a:	f000 8268 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4a68      	ldr	r2, [pc, #416]	; (8010b14 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010974:	4293      	cmp	r3, r2
 8010976:	f000 8262 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	4a66      	ldr	r2, [pc, #408]	; (8010b18 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 8010980:	4293      	cmp	r3, r2
 8010982:	f000 825c 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801098e:	d152      	bne.n	8010a36 <HAL_TIM_SlaveConfigSynchro+0x1fe>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 8252 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	2b20      	cmp	r3, #32
 80109a0:	f000 824d 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	2b30      	cmp	r3, #48	; 0x30
 80109aa:	f000 8248 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	2b40      	cmp	r3, #64	; 0x40
 80109b4:	f000 8243 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	2b50      	cmp	r3, #80	; 0x50
 80109be:	f000 823e 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	2b60      	cmp	r3, #96	; 0x60
 80109c8:	f000 8239 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	2b70      	cmp	r3, #112	; 0x70
 80109d2:	f000 8234 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109de:	f000 822e 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80109ea:	f000 8228 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	4a45      	ldr	r2, [pc, #276]	; (8010b08 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	f000 8222 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	4a43      	ldr	r2, [pc, #268]	; (8010b0c <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	f000 821c 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	4a41      	ldr	r2, [pc, #260]	; (8010b10 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	f000 8216 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	4a3f      	ldr	r2, [pc, #252]	; (8010b14 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	f000 8210 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	4a3d      	ldr	r2, [pc, #244]	; (8010b18 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	f000 820a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	4a3b      	ldr	r2, [pc, #236]	; (8010b1c <HAL_TIM_SlaveConfigSynchro+0x2e4>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	f000 8204 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a2c      	ldr	r2, [pc, #176]	; (8010aec <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d14c      	bne.n	8010ada <HAL_TIM_SlaveConfigSynchro+0x2a2>
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 81fa 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	2b10      	cmp	r3, #16
 8010a50:	f000 81f5 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	2b30      	cmp	r3, #48	; 0x30
 8010a5a:	f000 81f0 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	2b40      	cmp	r3, #64	; 0x40
 8010a64:	f000 81eb 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	2b50      	cmp	r3, #80	; 0x50
 8010a6e:	f000 81e6 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	2b60      	cmp	r3, #96	; 0x60
 8010a78:	f000 81e1 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2b70      	cmp	r3, #112	; 0x70
 8010a82:	f000 81dc 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a8e:	f000 81d6 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010a9a:	f000 81d0 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	4a19      	ldr	r2, [pc, #100]	; (8010b08 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	f000 81ca 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	4a17      	ldr	r2, [pc, #92]	; (8010b0c <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	f000 81c4 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	4a15      	ldr	r2, [pc, #84]	; (8010b10 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	f000 81be 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	4a13      	ldr	r2, [pc, #76]	; (8010b14 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	f000 81b8 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	4a11      	ldr	r2, [pc, #68]	; (8010b18 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	f000 81b2 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d16a      	bne.n	8010bba <HAL_TIM_SlaveConfigSynchro+0x382>
 8010ae4:	e01c      	b.n	8010b20 <HAL_TIM_SlaveConfigSynchro+0x2e8>
 8010ae6:	bf00      	nop
 8010ae8:	40012c00 	.word	0x40012c00
 8010aec:	40000400 	.word	0x40000400
 8010af0:	40000800 	.word	0x40000800
 8010af4:	40000c00 	.word	0x40000c00
 8010af8:	40013400 	.word	0x40013400
 8010afc:	40014000 	.word	0x40014000
 8010b00:	40015000 	.word	0x40015000
 8010b04:	0801dcc4 	.word	0x0801dcc4
 8010b08:	00100020 	.word	0x00100020
 8010b0c:	00100030 	.word	0x00100030
 8010b10:	00100040 	.word	0x00100040
 8010b14:	00100050 	.word	0x00100050
 8010b18:	00100060 	.word	0x00100060
 8010b1c:	00100070 	.word	0x00100070
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f000 818a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	2b10      	cmp	r3, #16
 8010b30:	f000 8185 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	2b20      	cmp	r3, #32
 8010b3a:	f000 8180 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b46:	f000 817a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	2b40      	cmp	r3, #64	; 0x40
 8010b50:	f000 8175 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	2b50      	cmp	r3, #80	; 0x50
 8010b5a:	f000 8170 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	2b60      	cmp	r3, #96	; 0x60
 8010b64:	f000 816b 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	2b70      	cmp	r3, #112	; 0x70
 8010b6e:	f000 8166 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010b7a:	f000 8160 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	4aa3      	ldr	r2, [pc, #652]	; (8010e10 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	f000 815a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	4aa1      	ldr	r2, [pc, #644]	; (8010e14 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	f000 8154 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	4a9f      	ldr	r2, [pc, #636]	; (8010e18 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	f000 814e 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	4a9d      	ldr	r2, [pc, #628]	; (8010e1c <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	f000 8148 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	4a9b      	ldr	r2, [pc, #620]	; (8010e20 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	f000 8142 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a99      	ldr	r2, [pc, #612]	; (8010e24 <HAL_TIM_SlaveConfigSynchro+0x5ec>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d14b      	bne.n	8010c5c <HAL_TIM_SlaveConfigSynchro+0x424>
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 8138 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	2b10      	cmp	r3, #16
 8010bd4:	f000 8133 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	2b20      	cmp	r3, #32
 8010bde:	f000 812e 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	2b30      	cmp	r3, #48	; 0x30
 8010be8:	f000 8129 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	2b40      	cmp	r3, #64	; 0x40
 8010bf2:	f000 8124 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	2b50      	cmp	r3, #80	; 0x50
 8010bfc:	f000 811f 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	2b60      	cmp	r3, #96	; 0x60
 8010c06:	f000 811a 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	2b70      	cmp	r3, #112	; 0x70
 8010c10:	f000 8115 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010c1c:	f000 810f 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	4a7a      	ldr	r2, [pc, #488]	; (8010e10 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	f000 8109 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	4a78      	ldr	r2, [pc, #480]	; (8010e14 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	f000 8103 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	4a76      	ldr	r2, [pc, #472]	; (8010e18 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	f000 80fd 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	4a74      	ldr	r2, [pc, #464]	; (8010e1c <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	f000 80f7 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	4a72      	ldr	r2, [pc, #456]	; (8010e20 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	f000 80f1 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4a71      	ldr	r2, [pc, #452]	; (8010e28 <HAL_TIM_SlaveConfigSynchro+0x5f0>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d14b      	bne.n	8010cfe <HAL_TIM_SlaveConfigSynchro+0x4c6>
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f000 80e7 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	2b10      	cmp	r3, #16
 8010c76:	f000 80e2 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	2b20      	cmp	r3, #32
 8010c80:	f000 80dd 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	2b30      	cmp	r3, #48	; 0x30
 8010c8a:	f000 80d8 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	2b40      	cmp	r3, #64	; 0x40
 8010c94:	f000 80d3 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	2b50      	cmp	r3, #80	; 0x50
 8010c9e:	f000 80ce 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	2b60      	cmp	r3, #96	; 0x60
 8010ca8:	f000 80c9 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	2b70      	cmp	r3, #112	; 0x70
 8010cb2:	f000 80c4 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cbe:	f000 80be 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4a52      	ldr	r2, [pc, #328]	; (8010e10 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	f000 80b8 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4a50      	ldr	r2, [pc, #320]	; (8010e14 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	f000 80b2 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	4a4e      	ldr	r2, [pc, #312]	; (8010e18 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	f000 80ac 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	4a4c      	ldr	r2, [pc, #304]	; (8010e1c <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	f000 80a6 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	4a4a      	ldr	r2, [pc, #296]	; (8010e20 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	f000 80a0 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a4a      	ldr	r2, [pc, #296]	; (8010e2c <HAL_TIM_SlaveConfigSynchro+0x5f4>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d13e      	bne.n	8010d86 <HAL_TIM_SlaveConfigSynchro+0x54e>
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 8096 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	2b10      	cmp	r3, #16
 8010d18:	f000 8091 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	2b20      	cmp	r3, #32
 8010d22:	f000 808c 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	2b30      	cmp	r3, #48	; 0x30
 8010d2c:	f000 8087 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b40      	cmp	r3, #64	; 0x40
 8010d36:	f000 8082 	beq.w	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	2b50      	cmp	r3, #80	; 0x50
 8010d40:	d07d      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2b60      	cmp	r3, #96	; 0x60
 8010d48:	d079      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d52:	d074      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010d5c:	d06f      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	4a2c      	ldr	r2, [pc, #176]	; (8010e14 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d06a      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	4a2a      	ldr	r2, [pc, #168]	; (8010e18 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d065      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	4a29      	ldr	r2, [pc, #164]	; (8010e1c <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d060      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	4a27      	ldr	r2, [pc, #156]	; (8010e20 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d05b      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a29      	ldr	r2, [pc, #164]	; (8010e30 <HAL_TIM_SlaveConfigSynchro+0x5f8>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d151      	bne.n	8010e34 <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d052      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	2b10      	cmp	r3, #16
 8010d9e:	d04e      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	2b20      	cmp	r3, #32
 8010da6:	d04a      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	2b30      	cmp	r3, #48	; 0x30
 8010dae:	d046      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	2b40      	cmp	r3, #64	; 0x40
 8010db6:	d042      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	2b50      	cmp	r3, #80	; 0x50
 8010dbe:	d03e      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	2b60      	cmp	r3, #96	; 0x60
 8010dc6:	d03a      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	2b70      	cmp	r3, #112	; 0x70
 8010dce:	d036      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010dd8:	d031      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010de2:	d02c      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	4a09      	ldr	r2, [pc, #36]	; (8010e10 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d027      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	4a08      	ldr	r2, [pc, #32]	; (8010e14 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d022      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	4a06      	ldr	r2, [pc, #24]	; (8010e18 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d01d      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	4a06      	ldr	r2, [pc, #24]	; (8010e20 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d018      	beq.n	8010e3e <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e0c:	e012      	b.n	8010e34 <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010e0e:	bf00      	nop
 8010e10:	00100020 	.word	0x00100020
 8010e14:	00100030 	.word	0x00100030
 8010e18:	00100040 	.word	0x00100040
 8010e1c:	00100050 	.word	0x00100050
 8010e20:	00100060 	.word	0x00100060
 8010e24:	40000c00 	.word	0x40000c00
 8010e28:	40013400 	.word	0x40013400
 8010e2c:	40014000 	.word	0x40014000
 8010e30:	40015000 	.word	0x40015000
 8010e34:	f241 31a9 	movw	r1, #5033	; 0x13a9
 8010e38:	481f      	ldr	r0, [pc, #124]	; (8010eb8 <HAL_TIM_SlaveConfigSynchro+0x680>)
 8010e3a:	f007 fcb8 	bl	80187ae <assert_failed>

  __HAL_LOCK(htim);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d101      	bne.n	8010e4c <HAL_TIM_SlaveConfigSynchro+0x614>
 8010e48:	2302      	movs	r3, #2
 8010e4a:	e031      	b.n	8010eb0 <HAL_TIM_SlaveConfigSynchro+0x678>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2201      	movs	r2, #1
 8010e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2202      	movs	r2, #2
 8010e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010e5c:	6839      	ldr	r1, [r7, #0]
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 fcfc 	bl	801185c <TIM_SlaveTimer_SetConfig>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d009      	beq.n	8010e7e <HAL_TIM_SlaveConfigSynchro+0x646>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e018      	b.n	8010eb0 <HAL_TIM_SlaveConfigSynchro+0x678>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68da      	ldr	r2, [r3, #12]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68da      	ldr	r2, [r3, #12]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010e9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	0801dcc4 	.word	0x0801dcc4

08010ebc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f14:	bf00      	nop
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010f28:	bf00      	nop
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b083      	sub	sp, #12
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f3c:	bf00      	nop
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8010f50:	bf00      	nop
 8010f52:	370c      	adds	r7, #12
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010f64:	bf00      	nop
 8010f66:	370c      	adds	r7, #12
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4a46      	ldr	r2, [pc, #280]	; (801109c <TIM_Base_SetConfig+0x12c>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d017      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f8e:	d013      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4a43      	ldr	r2, [pc, #268]	; (80110a0 <TIM_Base_SetConfig+0x130>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d00f      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	4a42      	ldr	r2, [pc, #264]	; (80110a4 <TIM_Base_SetConfig+0x134>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d00b      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4a41      	ldr	r2, [pc, #260]	; (80110a8 <TIM_Base_SetConfig+0x138>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d007      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4a40      	ldr	r2, [pc, #256]	; (80110ac <TIM_Base_SetConfig+0x13c>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d003      	beq.n	8010fb8 <TIM_Base_SetConfig+0x48>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	4a3f      	ldr	r2, [pc, #252]	; (80110b0 <TIM_Base_SetConfig+0x140>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d108      	bne.n	8010fca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a33      	ldr	r2, [pc, #204]	; (801109c <TIM_Base_SetConfig+0x12c>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d023      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fd8:	d01f      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4a30      	ldr	r2, [pc, #192]	; (80110a0 <TIM_Base_SetConfig+0x130>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d01b      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4a2f      	ldr	r2, [pc, #188]	; (80110a4 <TIM_Base_SetConfig+0x134>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d017      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4a2e      	ldr	r2, [pc, #184]	; (80110a8 <TIM_Base_SetConfig+0x138>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d013      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a2d      	ldr	r2, [pc, #180]	; (80110ac <TIM_Base_SetConfig+0x13c>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d00f      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4a2d      	ldr	r2, [pc, #180]	; (80110b4 <TIM_Base_SetConfig+0x144>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d00b      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a2c      	ldr	r2, [pc, #176]	; (80110b8 <TIM_Base_SetConfig+0x148>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d007      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a2b      	ldr	r2, [pc, #172]	; (80110bc <TIM_Base_SetConfig+0x14c>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d003      	beq.n	801101a <TIM_Base_SetConfig+0xaa>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a26      	ldr	r2, [pc, #152]	; (80110b0 <TIM_Base_SetConfig+0x140>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d108      	bne.n	801102c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	68fa      	ldr	r2, [r7, #12]
 8011028:	4313      	orrs	r3, r2
 801102a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	695b      	ldr	r3, [r3, #20]
 8011036:	4313      	orrs	r3, r2
 8011038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	689a      	ldr	r2, [r3, #8]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a12      	ldr	r2, [pc, #72]	; (801109c <TIM_Base_SetConfig+0x12c>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d013      	beq.n	8011080 <TIM_Base_SetConfig+0x110>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a14      	ldr	r2, [pc, #80]	; (80110ac <TIM_Base_SetConfig+0x13c>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d00f      	beq.n	8011080 <TIM_Base_SetConfig+0x110>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a14      	ldr	r2, [pc, #80]	; (80110b4 <TIM_Base_SetConfig+0x144>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d00b      	beq.n	8011080 <TIM_Base_SetConfig+0x110>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4a13      	ldr	r2, [pc, #76]	; (80110b8 <TIM_Base_SetConfig+0x148>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d007      	beq.n	8011080 <TIM_Base_SetConfig+0x110>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4a12      	ldr	r2, [pc, #72]	; (80110bc <TIM_Base_SetConfig+0x14c>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d003      	beq.n	8011080 <TIM_Base_SetConfig+0x110>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	4a0d      	ldr	r2, [pc, #52]	; (80110b0 <TIM_Base_SetConfig+0x140>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d103      	bne.n	8011088 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	691a      	ldr	r2, [r3, #16]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	615a      	str	r2, [r3, #20]
}
 801108e:	bf00      	nop
 8011090:	3714      	adds	r7, #20
 8011092:	46bd      	mov	sp, r7
 8011094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	40012c00 	.word	0x40012c00
 80110a0:	40000400 	.word	0x40000400
 80110a4:	40000800 	.word	0x40000800
 80110a8:	40000c00 	.word	0x40000c00
 80110ac:	40013400 	.word	0x40013400
 80110b0:	40015000 	.word	0x40015000
 80110b4:	40014000 	.word	0x40014000
 80110b8:	40014400 	.word	0x40014400
 80110bc:	40014800 	.word	0x40014800

080110c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b086      	sub	sp, #24
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6a1b      	ldr	r3, [r3, #32]
 80110ce:	f023 0201 	bic.w	r2, r3, #1
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80110ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f023 0303 	bic.w	r3, r3, #3
 80110fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	68fa      	ldr	r2, [r7, #12]
 8011102:	4313      	orrs	r3, r2
 8011104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	f023 0302 	bic.w	r3, r3, #2
 801110c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	4313      	orrs	r3, r2
 8011116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a44      	ldr	r2, [pc, #272]	; (801122c <TIM_OC1_SetConfig+0x16c>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d013      	beq.n	8011148 <TIM_OC1_SetConfig+0x88>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a43      	ldr	r2, [pc, #268]	; (8011230 <TIM_OC1_SetConfig+0x170>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d00f      	beq.n	8011148 <TIM_OC1_SetConfig+0x88>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4a42      	ldr	r2, [pc, #264]	; (8011234 <TIM_OC1_SetConfig+0x174>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d00b      	beq.n	8011148 <TIM_OC1_SetConfig+0x88>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4a41      	ldr	r2, [pc, #260]	; (8011238 <TIM_OC1_SetConfig+0x178>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d007      	beq.n	8011148 <TIM_OC1_SetConfig+0x88>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4a40      	ldr	r2, [pc, #256]	; (801123c <TIM_OC1_SetConfig+0x17c>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d003      	beq.n	8011148 <TIM_OC1_SetConfig+0x88>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a3f      	ldr	r2, [pc, #252]	; (8011240 <TIM_OC1_SetConfig+0x180>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d119      	bne.n	801117c <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d008      	beq.n	8011162 <TIM_OC1_SetConfig+0xa2>
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	2b08      	cmp	r3, #8
 8011156:	d004      	beq.n	8011162 <TIM_OC1_SetConfig+0xa2>
 8011158:	f641 01a3 	movw	r1, #6307	; 0x18a3
 801115c:	4839      	ldr	r0, [pc, #228]	; (8011244 <TIM_OC1_SetConfig+0x184>)
 801115e:	f007 fb26 	bl	80187ae <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	f023 0308 	bic.w	r3, r3, #8
 8011168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	4313      	orrs	r3, r2
 8011172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	f023 0304 	bic.w	r3, r3, #4
 801117a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	4a2b      	ldr	r2, [pc, #172]	; (801122c <TIM_OC1_SetConfig+0x16c>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d013      	beq.n	80111ac <TIM_OC1_SetConfig+0xec>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a2a      	ldr	r2, [pc, #168]	; (8011230 <TIM_OC1_SetConfig+0x170>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d00f      	beq.n	80111ac <TIM_OC1_SetConfig+0xec>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4a29      	ldr	r2, [pc, #164]	; (8011234 <TIM_OC1_SetConfig+0x174>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d00b      	beq.n	80111ac <TIM_OC1_SetConfig+0xec>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4a28      	ldr	r2, [pc, #160]	; (8011238 <TIM_OC1_SetConfig+0x178>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d007      	beq.n	80111ac <TIM_OC1_SetConfig+0xec>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4a27      	ldr	r2, [pc, #156]	; (801123c <TIM_OC1_SetConfig+0x17c>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d003      	beq.n	80111ac <TIM_OC1_SetConfig+0xec>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4a26      	ldr	r2, [pc, #152]	; (8011240 <TIM_OC1_SetConfig+0x180>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d12d      	bne.n	8011208 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111b4:	d008      	beq.n	80111c8 <TIM_OC1_SetConfig+0x108>
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	699b      	ldr	r3, [r3, #24]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d004      	beq.n	80111c8 <TIM_OC1_SetConfig+0x108>
 80111be:	f641 01b0 	movw	r1, #6320	; 0x18b0
 80111c2:	4820      	ldr	r0, [pc, #128]	; (8011244 <TIM_OC1_SetConfig+0x184>)
 80111c4:	f007 faf3 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	695b      	ldr	r3, [r3, #20]
 80111cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111d0:	d008      	beq.n	80111e4 <TIM_OC1_SetConfig+0x124>
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	695b      	ldr	r3, [r3, #20]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d004      	beq.n	80111e4 <TIM_OC1_SetConfig+0x124>
 80111da:	f641 01b1 	movw	r1, #6321	; 0x18b1
 80111de:	4819      	ldr	r0, [pc, #100]	; (8011244 <TIM_OC1_SetConfig+0x184>)
 80111e0:	f007 fae5 	bl	80187ae <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80111f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	695b      	ldr	r3, [r3, #20]
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	699b      	ldr	r3, [r3, #24]
 8011202:	693a      	ldr	r2, [r7, #16]
 8011204:	4313      	orrs	r3, r2
 8011206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	693a      	ldr	r2, [r7, #16]
 801120c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	685a      	ldr	r2, [r3, #4]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	697a      	ldr	r2, [r7, #20]
 8011220:	621a      	str	r2, [r3, #32]
}
 8011222:	bf00      	nop
 8011224:	3718      	adds	r7, #24
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	40012c00 	.word	0x40012c00
 8011230:	40013400 	.word	0x40013400
 8011234:	40014000 	.word	0x40014000
 8011238:	40014400 	.word	0x40014400
 801123c:	40014800 	.word	0x40014800
 8011240:	40015000 	.word	0x40015000
 8011244:	0801dcc4 	.word	0x0801dcc4

08011248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b086      	sub	sp, #24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	f023 0210 	bic.w	r2, r3, #16
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	699b      	ldr	r3, [r3, #24]
 801126e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801127a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	021b      	lsls	r3, r3, #8
 801128a:	68fa      	ldr	r2, [r7, #12]
 801128c:	4313      	orrs	r3, r2
 801128e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	f023 0320 	bic.w	r3, r3, #32
 8011296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	011b      	lsls	r3, r3, #4
 801129e:	697a      	ldr	r2, [r7, #20]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a3f      	ldr	r2, [pc, #252]	; (80113a4 <TIM_OC2_SetConfig+0x15c>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d007      	beq.n	80112bc <TIM_OC2_SetConfig+0x74>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4a3e      	ldr	r2, [pc, #248]	; (80113a8 <TIM_OC2_SetConfig+0x160>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d003      	beq.n	80112bc <TIM_OC2_SetConfig+0x74>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4a3d      	ldr	r2, [pc, #244]	; (80113ac <TIM_OC2_SetConfig+0x164>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d11a      	bne.n	80112f2 <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d008      	beq.n	80112d6 <TIM_OC2_SetConfig+0x8e>
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	2b08      	cmp	r3, #8
 80112ca:	d004      	beq.n	80112d6 <TIM_OC2_SetConfig+0x8e>
 80112cc:	f641 01ee 	movw	r1, #6382	; 0x18ee
 80112d0:	4837      	ldr	r0, [pc, #220]	; (80113b0 <TIM_OC2_SetConfig+0x168>)
 80112d2:	f007 fa6c 	bl	80187ae <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	697a      	ldr	r2, [r7, #20]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a2b      	ldr	r2, [pc, #172]	; (80113a4 <TIM_OC2_SetConfig+0x15c>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d013      	beq.n	8011322 <TIM_OC2_SetConfig+0xda>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	4a2a      	ldr	r2, [pc, #168]	; (80113a8 <TIM_OC2_SetConfig+0x160>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d00f      	beq.n	8011322 <TIM_OC2_SetConfig+0xda>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4a2b      	ldr	r2, [pc, #172]	; (80113b4 <TIM_OC2_SetConfig+0x16c>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d00b      	beq.n	8011322 <TIM_OC2_SetConfig+0xda>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4a2a      	ldr	r2, [pc, #168]	; (80113b8 <TIM_OC2_SetConfig+0x170>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d007      	beq.n	8011322 <TIM_OC2_SetConfig+0xda>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	4a29      	ldr	r2, [pc, #164]	; (80113bc <TIM_OC2_SetConfig+0x174>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d003      	beq.n	8011322 <TIM_OC2_SetConfig+0xda>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4a23      	ldr	r2, [pc, #140]	; (80113ac <TIM_OC2_SetConfig+0x164>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d12f      	bne.n	8011382 <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	699b      	ldr	r3, [r3, #24]
 8011326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801132a:	d008      	beq.n	801133e <TIM_OC2_SetConfig+0xf6>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	699b      	ldr	r3, [r3, #24]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d004      	beq.n	801133e <TIM_OC2_SetConfig+0xf6>
 8011334:	f641 01fc 	movw	r1, #6396	; 0x18fc
 8011338:	481d      	ldr	r0, [pc, #116]	; (80113b0 <TIM_OC2_SetConfig+0x168>)
 801133a:	f007 fa38 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	695b      	ldr	r3, [r3, #20]
 8011342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011346:	d008      	beq.n	801135a <TIM_OC2_SetConfig+0x112>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	695b      	ldr	r3, [r3, #20]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d004      	beq.n	801135a <TIM_OC2_SetConfig+0x112>
 8011350:	f641 01fd 	movw	r1, #6397	; 0x18fd
 8011354:	4816      	ldr	r0, [pc, #88]	; (80113b0 <TIM_OC2_SetConfig+0x168>)
 8011356:	f007 fa2a 	bl	80187ae <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	695b      	ldr	r3, [r3, #20]
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	4313      	orrs	r3, r2
 8011374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	699b      	ldr	r3, [r3, #24]
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	4313      	orrs	r3, r2
 8011380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	693a      	ldr	r2, [r7, #16]
 8011386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	621a      	str	r2, [r3, #32]
}
 801139c:	bf00      	nop
 801139e:	3718      	adds	r7, #24
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	40012c00 	.word	0x40012c00
 80113a8:	40013400 	.word	0x40013400
 80113ac:	40015000 	.word	0x40015000
 80113b0:	0801dcc4 	.word	0x0801dcc4
 80113b4:	40014000 	.word	0x40014000
 80113b8:	40014400 	.word	0x40014400
 80113bc:	40014800 	.word	0x40014800

080113c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b086      	sub	sp, #24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a1b      	ldr	r3, [r3, #32]
 80113ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a1b      	ldr	r3, [r3, #32]
 80113da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	69db      	ldr	r3, [r3, #28]
 80113e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80113ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f023 0303 	bic.w	r3, r3, #3
 80113fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	4313      	orrs	r3, r2
 8011404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801140c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	021b      	lsls	r3, r3, #8
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	4313      	orrs	r3, r2
 8011418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	4a3f      	ldr	r2, [pc, #252]	; (801151c <TIM_OC3_SetConfig+0x15c>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d007      	beq.n	8011432 <TIM_OC3_SetConfig+0x72>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4a3e      	ldr	r2, [pc, #248]	; (8011520 <TIM_OC3_SetConfig+0x160>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d003      	beq.n	8011432 <TIM_OC3_SetConfig+0x72>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4a3d      	ldr	r2, [pc, #244]	; (8011524 <TIM_OC3_SetConfig+0x164>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d11a      	bne.n	8011468 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d008      	beq.n	801144c <TIM_OC3_SetConfig+0x8c>
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	2b08      	cmp	r3, #8
 8011440:	d004      	beq.n	801144c <TIM_OC3_SetConfig+0x8c>
 8011442:	f641 1139 	movw	r1, #6457	; 0x1939
 8011446:	4838      	ldr	r0, [pc, #224]	; (8011528 <TIM_OC3_SetConfig+0x168>)
 8011448:	f007 f9b1 	bl	80187ae <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	021b      	lsls	r3, r3, #8
 801145a:	697a      	ldr	r2, [r7, #20]
 801145c:	4313      	orrs	r3, r2
 801145e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	4a2c      	ldr	r2, [pc, #176]	; (801151c <TIM_OC3_SetConfig+0x15c>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d013      	beq.n	8011498 <TIM_OC3_SetConfig+0xd8>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	4a2b      	ldr	r2, [pc, #172]	; (8011520 <TIM_OC3_SetConfig+0x160>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d00f      	beq.n	8011498 <TIM_OC3_SetConfig+0xd8>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a2c      	ldr	r2, [pc, #176]	; (801152c <TIM_OC3_SetConfig+0x16c>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d00b      	beq.n	8011498 <TIM_OC3_SetConfig+0xd8>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a2b      	ldr	r2, [pc, #172]	; (8011530 <TIM_OC3_SetConfig+0x170>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d007      	beq.n	8011498 <TIM_OC3_SetConfig+0xd8>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4a2a      	ldr	r2, [pc, #168]	; (8011534 <TIM_OC3_SetConfig+0x174>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d003      	beq.n	8011498 <TIM_OC3_SetConfig+0xd8>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4a24      	ldr	r2, [pc, #144]	; (8011524 <TIM_OC3_SetConfig+0x164>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d12f      	bne.n	80114f8 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	699b      	ldr	r3, [r3, #24]
 801149c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114a0:	d008      	beq.n	80114b4 <TIM_OC3_SetConfig+0xf4>
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d004      	beq.n	80114b4 <TIM_OC3_SetConfig+0xf4>
 80114aa:	f641 1146 	movw	r1, #6470	; 0x1946
 80114ae:	481e      	ldr	r0, [pc, #120]	; (8011528 <TIM_OC3_SetConfig+0x168>)
 80114b0:	f007 f97d 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	695b      	ldr	r3, [r3, #20]
 80114b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114bc:	d008      	beq.n	80114d0 <TIM_OC3_SetConfig+0x110>
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d004      	beq.n	80114d0 <TIM_OC3_SetConfig+0x110>
 80114c6:	f641 1147 	movw	r1, #6471	; 0x1947
 80114ca:	4817      	ldr	r0, [pc, #92]	; (8011528 <TIM_OC3_SetConfig+0x168>)
 80114cc:	f007 f96f 	bl	80187ae <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80114de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	695b      	ldr	r3, [r3, #20]
 80114e4:	011b      	lsls	r3, r3, #4
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	4313      	orrs	r3, r2
 80114ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	699b      	ldr	r3, [r3, #24]
 80114f0:	011b      	lsls	r3, r3, #4
 80114f2:	693a      	ldr	r2, [r7, #16]
 80114f4:	4313      	orrs	r3, r2
 80114f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	693a      	ldr	r2, [r7, #16]
 80114fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	685a      	ldr	r2, [r3, #4]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	697a      	ldr	r2, [r7, #20]
 8011510:	621a      	str	r2, [r3, #32]
}
 8011512:	bf00      	nop
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	40012c00 	.word	0x40012c00
 8011520:	40013400 	.word	0x40013400
 8011524:	40015000 	.word	0x40015000
 8011528:	0801dcc4 	.word	0x0801dcc4
 801152c:	40014000 	.word	0x40014000
 8011530:	40014400 	.word	0x40014400
 8011534:	40014800 	.word	0x40014800

08011538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6a1b      	ldr	r3, [r3, #32]
 8011546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6a1b      	ldr	r3, [r3, #32]
 8011552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	69db      	ldr	r3, [r3, #28]
 801155e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801156a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	021b      	lsls	r3, r3, #8
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	4313      	orrs	r3, r2
 801157e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	031b      	lsls	r3, r3, #12
 801158e:	697a      	ldr	r2, [r7, #20]
 8011590:	4313      	orrs	r3, r2
 8011592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4a3f      	ldr	r2, [pc, #252]	; (8011694 <TIM_OC4_SetConfig+0x15c>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d007      	beq.n	80115ac <TIM_OC4_SetConfig+0x74>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	4a3e      	ldr	r2, [pc, #248]	; (8011698 <TIM_OC4_SetConfig+0x160>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d003      	beq.n	80115ac <TIM_OC4_SetConfig+0x74>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a3d      	ldr	r2, [pc, #244]	; (801169c <TIM_OC4_SetConfig+0x164>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d11a      	bne.n	80115e2 <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d008      	beq.n	80115c6 <TIM_OC4_SetConfig+0x8e>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	2b08      	cmp	r3, #8
 80115ba:	d004      	beq.n	80115c6 <TIM_OC4_SetConfig+0x8e>
 80115bc:	f641 1184 	movw	r1, #6532	; 0x1984
 80115c0:	4837      	ldr	r0, [pc, #220]	; (80116a0 <TIM_OC4_SetConfig+0x168>)
 80115c2:	f007 f8f4 	bl	80187ae <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80115cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	031b      	lsls	r3, r3, #12
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4a2b      	ldr	r2, [pc, #172]	; (8011694 <TIM_OC4_SetConfig+0x15c>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d013      	beq.n	8011612 <TIM_OC4_SetConfig+0xda>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4a2a      	ldr	r2, [pc, #168]	; (8011698 <TIM_OC4_SetConfig+0x160>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d00f      	beq.n	8011612 <TIM_OC4_SetConfig+0xda>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4a2b      	ldr	r2, [pc, #172]	; (80116a4 <TIM_OC4_SetConfig+0x16c>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d00b      	beq.n	8011612 <TIM_OC4_SetConfig+0xda>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4a2a      	ldr	r2, [pc, #168]	; (80116a8 <TIM_OC4_SetConfig+0x170>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d007      	beq.n	8011612 <TIM_OC4_SetConfig+0xda>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4a29      	ldr	r2, [pc, #164]	; (80116ac <TIM_OC4_SetConfig+0x174>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d003      	beq.n	8011612 <TIM_OC4_SetConfig+0xda>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4a23      	ldr	r2, [pc, #140]	; (801169c <TIM_OC4_SetConfig+0x164>)
 801160e:	4293      	cmp	r3, r2
 8011610:	d12f      	bne.n	8011672 <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	699b      	ldr	r3, [r3, #24]
 8011616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801161a:	d008      	beq.n	801162e <TIM_OC4_SetConfig+0xf6>
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	699b      	ldr	r3, [r3, #24]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d004      	beq.n	801162e <TIM_OC4_SetConfig+0xf6>
 8011624:	f641 1191 	movw	r1, #6545	; 0x1991
 8011628:	481d      	ldr	r0, [pc, #116]	; (80116a0 <TIM_OC4_SetConfig+0x168>)
 801162a:	f007 f8c0 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011636:	d008      	beq.n	801164a <TIM_OC4_SetConfig+0x112>
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	695b      	ldr	r3, [r3, #20]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d004      	beq.n	801164a <TIM_OC4_SetConfig+0x112>
 8011640:	f641 1192 	movw	r1, #6546	; 0x1992
 8011644:	4816      	ldr	r0, [pc, #88]	; (80116a0 <TIM_OC4_SetConfig+0x168>)
 8011646:	f007 f8b2 	bl	80187ae <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011650:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011658:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	695b      	ldr	r3, [r3, #20]
 801165e:	019b      	lsls	r3, r3, #6
 8011660:	693a      	ldr	r2, [r7, #16]
 8011662:	4313      	orrs	r3, r2
 8011664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	019b      	lsls	r3, r3, #6
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	4313      	orrs	r3, r2
 8011670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	693a      	ldr	r2, [r7, #16]
 8011676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	685a      	ldr	r2, [r3, #4]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	697a      	ldr	r2, [r7, #20]
 801168a:	621a      	str	r2, [r3, #32]
}
 801168c:	bf00      	nop
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	40012c00 	.word	0x40012c00
 8011698:	40013400 	.word	0x40013400
 801169c:	40015000 	.word	0x40015000
 80116a0:	0801dcc4 	.word	0x0801dcc4
 80116a4:	40014000 	.word	0x40014000
 80116a8:	40014400 	.word	0x40014400
 80116ac:	40014800 	.word	0x40014800

080116b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6a1b      	ldr	r3, [r3, #32]
 80116be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6a1b      	ldr	r3, [r3, #32]
 80116ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	4313      	orrs	r3, r2
 80116ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80116f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	041b      	lsls	r3, r3, #16
 80116fc:	693a      	ldr	r2, [r7, #16]
 80116fe:	4313      	orrs	r3, r2
 8011700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4a19      	ldr	r2, [pc, #100]	; (801176c <TIM_OC5_SetConfig+0xbc>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d013      	beq.n	8011732 <TIM_OC5_SetConfig+0x82>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4a18      	ldr	r2, [pc, #96]	; (8011770 <TIM_OC5_SetConfig+0xc0>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d00f      	beq.n	8011732 <TIM_OC5_SetConfig+0x82>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4a17      	ldr	r2, [pc, #92]	; (8011774 <TIM_OC5_SetConfig+0xc4>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d00b      	beq.n	8011732 <TIM_OC5_SetConfig+0x82>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4a16      	ldr	r2, [pc, #88]	; (8011778 <TIM_OC5_SetConfig+0xc8>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d007      	beq.n	8011732 <TIM_OC5_SetConfig+0x82>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4a15      	ldr	r2, [pc, #84]	; (801177c <TIM_OC5_SetConfig+0xcc>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d003      	beq.n	8011732 <TIM_OC5_SetConfig+0x82>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4a14      	ldr	r2, [pc, #80]	; (8011780 <TIM_OC5_SetConfig+0xd0>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d109      	bne.n	8011746 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	021b      	lsls	r3, r3, #8
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	4313      	orrs	r3, r2
 8011744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	697a      	ldr	r2, [r7, #20]
 801174a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	685a      	ldr	r2, [r3, #4]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	693a      	ldr	r2, [r7, #16]
 801175e:	621a      	str	r2, [r3, #32]
}
 8011760:	bf00      	nop
 8011762:	371c      	adds	r7, #28
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	40012c00 	.word	0x40012c00
 8011770:	40013400 	.word	0x40013400
 8011774:	40014000 	.word	0x40014000
 8011778:	40014400 	.word	0x40014400
 801177c:	40014800 	.word	0x40014800
 8011780:	40015000 	.word	0x40015000

08011784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011784:	b480      	push	{r7}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a1b      	ldr	r3, [r3, #32]
 8011792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6a1b      	ldr	r3, [r3, #32]
 801179e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80117b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	021b      	lsls	r3, r3, #8
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80117ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	051b      	lsls	r3, r3, #20
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	4313      	orrs	r3, r2
 80117d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a1a      	ldr	r2, [pc, #104]	; (8011844 <TIM_OC6_SetConfig+0xc0>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d013      	beq.n	8011808 <TIM_OC6_SetConfig+0x84>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a19      	ldr	r2, [pc, #100]	; (8011848 <TIM_OC6_SetConfig+0xc4>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d00f      	beq.n	8011808 <TIM_OC6_SetConfig+0x84>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4a18      	ldr	r2, [pc, #96]	; (801184c <TIM_OC6_SetConfig+0xc8>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d00b      	beq.n	8011808 <TIM_OC6_SetConfig+0x84>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4a17      	ldr	r2, [pc, #92]	; (8011850 <TIM_OC6_SetConfig+0xcc>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d007      	beq.n	8011808 <TIM_OC6_SetConfig+0x84>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a16      	ldr	r2, [pc, #88]	; (8011854 <TIM_OC6_SetConfig+0xd0>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d003      	beq.n	8011808 <TIM_OC6_SetConfig+0x84>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4a15      	ldr	r2, [pc, #84]	; (8011858 <TIM_OC6_SetConfig+0xd4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d109      	bne.n	801181c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801180e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	029b      	lsls	r3, r3, #10
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	4313      	orrs	r3, r2
 801181a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	697a      	ldr	r2, [r7, #20]
 8011820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	685a      	ldr	r2, [r3, #4]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	621a      	str	r2, [r3, #32]
}
 8011836:	bf00      	nop
 8011838:	371c      	adds	r7, #28
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr
 8011842:	bf00      	nop
 8011844:	40012c00 	.word	0x40012c00
 8011848:	40013400 	.word	0x40013400
 801184c:	40014000 	.word	0x40014000
 8011850:	40014400 	.word	0x40014400
 8011854:	40014800 	.word	0x40014800
 8011858:	40015000 	.word	0x40015000

0801185c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b086      	sub	sp, #24
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011878:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	4313      	orrs	r3, r2
 8011882:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801188a:	f023 0307 	bic.w	r3, r3, #7
 801188e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	4313      	orrs	r3, r2
 8011898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	697a      	ldr	r2, [r7, #20]
 80118a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	2b70      	cmp	r3, #112	; 0x70
 80118a8:	d046      	beq.n	8011938 <TIM_SlaveTimer_SetConfig+0xdc>
 80118aa:	2b70      	cmp	r3, #112	; 0x70
 80118ac:	d81a      	bhi.n	80118e4 <TIM_SlaveTimer_SetConfig+0x88>
 80118ae:	2b30      	cmp	r3, #48	; 0x30
 80118b0:	f000 8210 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 80118b4:	2b30      	cmp	r3, #48	; 0x30
 80118b6:	d80a      	bhi.n	80118ce <TIM_SlaveTimer_SetConfig+0x72>
 80118b8:	2b10      	cmp	r3, #16
 80118ba:	f000 820b 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 80118be:	2b20      	cmp	r3, #32
 80118c0:	f000 8208 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f000 8205 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80118ca:	f000 bc2a 	b.w	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 80118ce:	2b50      	cmp	r3, #80	; 0x50
 80118d0:	f000 812e 	beq.w	8011b30 <TIM_SlaveTimer_SetConfig+0x2d4>
 80118d4:	2b60      	cmp	r3, #96	; 0x60
 80118d6:	f000 818f 	beq.w	8011bf8 <TIM_SlaveTimer_SetConfig+0x39c>
 80118da:	2b40      	cmp	r3, #64	; 0x40
 80118dc:	f000 809a 	beq.w	8011a14 <TIM_SlaveTimer_SetConfig+0x1b8>
      break;
 80118e0:	f000 bc1f 	b.w	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 80118e4:	4a82      	ldr	r2, [pc, #520]	; (8011af0 <TIM_SlaveTimer_SetConfig+0x294>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	f000 81f4 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 80118ec:	4a80      	ldr	r2, [pc, #512]	; (8011af0 <TIM_SlaveTimer_SetConfig+0x294>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d80d      	bhi.n	801190e <TIM_SlaveTimer_SetConfig+0xb2>
 80118f2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80118f6:	f000 81ed 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 80118fa:	4a7e      	ldr	r2, [pc, #504]	; (8011af4 <TIM_SlaveTimer_SetConfig+0x298>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	f000 81e9 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 8011902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011906:	f000 81e5 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 801190a:	f000 bc0a 	b.w	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 801190e:	4a7a      	ldr	r2, [pc, #488]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x29c>)
 8011910:	4293      	cmp	r3, r2
 8011912:	f000 81df 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 8011916:	4a78      	ldr	r2, [pc, #480]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x29c>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d804      	bhi.n	8011926 <TIM_SlaveTimer_SetConfig+0xca>
 801191c:	4a77      	ldr	r2, [pc, #476]	; (8011afc <TIM_SlaveTimer_SetConfig+0x2a0>)
 801191e:	4293      	cmp	r3, r2
 8011920:	f000 81d8 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 8011924:	e3fd      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 8011926:	4a76      	ldr	r2, [pc, #472]	; (8011b00 <TIM_SlaveTimer_SetConfig+0x2a4>)
 8011928:	4293      	cmp	r3, r2
 801192a:	f000 81d3 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
 801192e:	4a75      	ldr	r2, [pc, #468]	; (8011b04 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8011930:	4293      	cmp	r3, r2
 8011932:	f000 81cf 	beq.w	8011cd4 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 8011936:	e3f4      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a72      	ldr	r2, [pc, #456]	; (8011b08 <TIM_SlaveTimer_SetConfig+0x2ac>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d022      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801194a:	d01d      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a6e      	ldr	r2, [pc, #440]	; (8011b0c <TIM_SlaveTimer_SetConfig+0x2b0>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d018      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a6d      	ldr	r2, [pc, #436]	; (8011b10 <TIM_SlaveTimer_SetConfig+0x2b4>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d013      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a6b      	ldr	r2, [pc, #428]	; (8011b14 <TIM_SlaveTimer_SetConfig+0x2b8>)
 8011966:	4293      	cmp	r3, r2
 8011968:	d00e      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a6a      	ldr	r2, [pc, #424]	; (8011b18 <TIM_SlaveTimer_SetConfig+0x2bc>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d009      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4a68      	ldr	r2, [pc, #416]	; (8011b1c <TIM_SlaveTimer_SetConfig+0x2c0>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d004      	beq.n	8011988 <TIM_SlaveTimer_SetConfig+0x12c>
 801197e:	f641 213a 	movw	r1, #6714	; 0x1a3a
 8011982:	4867      	ldr	r0, [pc, #412]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011984:	f006 ff13 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d013      	beq.n	80119b8 <TIM_SlaveTimer_SetConfig+0x15c>
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011998:	d00e      	beq.n	80119b8 <TIM_SlaveTimer_SetConfig+0x15c>
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80119a2:	d009      	beq.n	80119b8 <TIM_SlaveTimer_SetConfig+0x15c>
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80119ac:	d004      	beq.n	80119b8 <TIM_SlaveTimer_SetConfig+0x15c>
 80119ae:	f641 213b 	movw	r1, #6715	; 0x1a3b
 80119b2:	485b      	ldr	r0, [pc, #364]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80119b4:	f006 fefb 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119c0:	d014      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x190>
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	689b      	ldr	r3, [r3, #8]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d010      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x190>
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00c      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x190>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	d008      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x190>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	2b0a      	cmp	r3, #10
 80119e0:	d004      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x190>
 80119e2:	f641 213c 	movw	r1, #6716	; 0x1a3c
 80119e6:	484e      	ldr	r0, [pc, #312]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80119e8:	f006 fee1 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	691b      	ldr	r3, [r3, #16]
 80119f0:	2b0f      	cmp	r3, #15
 80119f2:	d904      	bls.n	80119fe <TIM_SlaveTimer_SetConfig+0x1a2>
 80119f4:	f641 213d 	movw	r1, #6717	; 0x1a3d
 80119f8:	4849      	ldr	r0, [pc, #292]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80119fa:	f006 fed8 	bl	80187ae <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68d9      	ldr	r1, [r3, #12]
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	689a      	ldr	r2, [r3, #8]
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	691b      	ldr	r3, [r3, #16]
 8011a0e:	f000 fd43 	bl	8012498 <TIM_ETR_SetConfig>
      break;
 8011a12:	e386      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4a3b      	ldr	r2, [pc, #236]	; (8011b08 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d031      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a26:	d02c      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4a37      	ldr	r2, [pc, #220]	; (8011b0c <TIM_SlaveTimer_SetConfig+0x2b0>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d027      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4a36      	ldr	r2, [pc, #216]	; (8011b10 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d022      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4a34      	ldr	r2, [pc, #208]	; (8011b14 <TIM_SlaveTimer_SetConfig+0x2b8>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d01d      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a33      	ldr	r2, [pc, #204]	; (8011b18 <TIM_SlaveTimer_SetConfig+0x2bc>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d018      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a33      	ldr	r2, [pc, #204]	; (8011b24 <TIM_SlaveTimer_SetConfig+0x2c8>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d013      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4a32      	ldr	r2, [pc, #200]	; (8011b28 <TIM_SlaveTimer_SetConfig+0x2cc>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d00e      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a30      	ldr	r2, [pc, #192]	; (8011b2c <TIM_SlaveTimer_SetConfig+0x2d0>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d009      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4a2a      	ldr	r2, [pc, #168]	; (8011b1c <TIM_SlaveTimer_SetConfig+0x2c0>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d004      	beq.n	8011a82 <TIM_SlaveTimer_SetConfig+0x226>
 8011a78:	f641 2149 	movw	r1, #6729	; 0x1a49
 8011a7c:	4828      	ldr	r0, [pc, #160]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011a7e:	f006 fe96 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	691b      	ldr	r3, [r3, #16]
 8011a86:	2b0f      	cmp	r3, #15
 8011a88:	d904      	bls.n	8011a94 <TIM_SlaveTimer_SetConfig+0x238>
 8011a8a:	f641 214a 	movw	r1, #6730	; 0x1a4a
 8011a8e:	4824      	ldr	r0, [pc, #144]	; (8011b20 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011a90:	f006 fe8d 	bl	80187ae <assert_failed>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b05      	cmp	r3, #5
 8011a9a:	d004      	beq.n	8011aa6 <TIM_SlaveTimer_SetConfig+0x24a>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8011aa4:	d101      	bne.n	8011aaa <TIM_SlaveTimer_SetConfig+0x24e>
        return HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e33c      	b.n	8012124 <TIM_SlaveTimer_SetConfig+0x8c8>
      tmpccer = htim->Instance->CCER;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6a1b      	ldr	r3, [r3, #32]
 8011ab0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	6a1a      	ldr	r2, [r3, #32]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	f022 0201 	bic.w	r2, r2, #1
 8011ac0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	699b      	ldr	r3, [r3, #24]
 8011ac8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011ad0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	011b      	lsls	r3, r3, #4
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	4313      	orrs	r3, r2
 8011adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	693a      	ldr	r2, [r7, #16]
 8011aec:	621a      	str	r2, [r3, #32]
      break;
 8011aee:	e318      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
 8011af0:	00100030 	.word	0x00100030
 8011af4:	00100020 	.word	0x00100020
 8011af8:	00100050 	.word	0x00100050
 8011afc:	00100040 	.word	0x00100040
 8011b00:	00100060 	.word	0x00100060
 8011b04:	00100070 	.word	0x00100070
 8011b08:	40012c00 	.word	0x40012c00
 8011b0c:	40000400 	.word	0x40000400
 8011b10:	40000800 	.word	0x40000800
 8011b14:	40000c00 	.word	0x40000c00
 8011b18:	40013400 	.word	0x40013400
 8011b1c:	40015000 	.word	0x40015000
 8011b20:	0801dcc4 	.word	0x0801dcc4
 8011b24:	40014000 	.word	0x40014000
 8011b28:	40014400 	.word	0x40014400
 8011b2c:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a5d      	ldr	r2, [pc, #372]	; (8011cac <TIM_SlaveTimer_SetConfig+0x450>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d031      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b42:	d02c      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a59      	ldr	r2, [pc, #356]	; (8011cb0 <TIM_SlaveTimer_SetConfig+0x454>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d027      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a58      	ldr	r2, [pc, #352]	; (8011cb4 <TIM_SlaveTimer_SetConfig+0x458>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d022      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4a56      	ldr	r2, [pc, #344]	; (8011cb8 <TIM_SlaveTimer_SetConfig+0x45c>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d01d      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a55      	ldr	r2, [pc, #340]	; (8011cbc <TIM_SlaveTimer_SetConfig+0x460>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d018      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a53      	ldr	r2, [pc, #332]	; (8011cc0 <TIM_SlaveTimer_SetConfig+0x464>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d013      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4a52      	ldr	r2, [pc, #328]	; (8011cc4 <TIM_SlaveTimer_SetConfig+0x468>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d00e      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4a50      	ldr	r2, [pc, #320]	; (8011cc8 <TIM_SlaveTimer_SetConfig+0x46c>)
 8011b86:	4293      	cmp	r3, r2
 8011b88:	d009      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	4a4f      	ldr	r2, [pc, #316]	; (8011ccc <TIM_SlaveTimer_SetConfig+0x470>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d004      	beq.n	8011b9e <TIM_SlaveTimer_SetConfig+0x342>
 8011b94:	f641 2163 	movw	r1, #6755	; 0x1a63
 8011b98:	484d      	ldr	r0, [pc, #308]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011b9a:	f006 fe08 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ba6:	d014      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x376>
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d010      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x376>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00c      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x376>
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	689b      	ldr	r3, [r3, #8]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d008      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x376>
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	2b0a      	cmp	r3, #10
 8011bc6:	d004      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x376>
 8011bc8:	f641 2164 	movw	r1, #6756	; 0x1a64
 8011bcc:	4840      	ldr	r0, [pc, #256]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011bce:	f006 fdee 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	2b0f      	cmp	r3, #15
 8011bd8:	d904      	bls.n	8011be4 <TIM_SlaveTimer_SetConfig+0x388>
 8011bda:	f641 2165 	movw	r1, #6757	; 0x1a65
 8011bde:	483c      	ldr	r0, [pc, #240]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011be0:	f006 fde5 	bl	80187ae <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6818      	ldr	r0, [r3, #0]
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	6899      	ldr	r1, [r3, #8]
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	691b      	ldr	r3, [r3, #16]
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	f000 fb1f 	bl	8012234 <TIM_TI1_ConfigInputStage>
      break;
 8011bf6:	e294      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a2b      	ldr	r2, [pc, #172]	; (8011cac <TIM_SlaveTimer_SetConfig+0x450>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d027      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c0a:	d022      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	4a27      	ldr	r2, [pc, #156]	; (8011cb0 <TIM_SlaveTimer_SetConfig+0x454>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d01d      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4a26      	ldr	r2, [pc, #152]	; (8011cb4 <TIM_SlaveTimer_SetConfig+0x458>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d018      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4a24      	ldr	r2, [pc, #144]	; (8011cb8 <TIM_SlaveTimer_SetConfig+0x45c>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d013      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4a23      	ldr	r2, [pc, #140]	; (8011cbc <TIM_SlaveTimer_SetConfig+0x460>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d00e      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a21      	ldr	r2, [pc, #132]	; (8011cc0 <TIM_SlaveTimer_SetConfig+0x464>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d009      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a22      	ldr	r2, [pc, #136]	; (8011ccc <TIM_SlaveTimer_SetConfig+0x470>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d004      	beq.n	8011c52 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c48:	f641 2171 	movw	r1, #6769	; 0x1a71
 8011c4c:	4820      	ldr	r0, [pc, #128]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c4e:	f006 fdae 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	689b      	ldr	r3, [r3, #8]
 8011c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c5a:	d014      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x42a>
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d010      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x42a>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	689b      	ldr	r3, [r3, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d00c      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x42a>
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d008      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x42a>
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	2b0a      	cmp	r3, #10
 8011c7a:	d004      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x42a>
 8011c7c:	f641 2172 	movw	r1, #6770	; 0x1a72
 8011c80:	4813      	ldr	r0, [pc, #76]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c82:	f006 fd94 	bl	80187ae <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	2b0f      	cmp	r3, #15
 8011c8c:	d904      	bls.n	8011c98 <TIM_SlaveTimer_SetConfig+0x43c>
 8011c8e:	f641 2173 	movw	r1, #6771	; 0x1a73
 8011c92:	480f      	ldr	r0, [pc, #60]	; (8011cd0 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c94:	f006 fd8b 	bl	80187ae <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6818      	ldr	r0, [r3, #0]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	6899      	ldr	r1, [r3, #8]
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	691b      	ldr	r3, [r3, #16]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	f000 fb31 	bl	801230c <TIM_TI2_ConfigInputStage>
      break;
 8011caa:	e23a      	b.n	8012122 <TIM_SlaveTimer_SetConfig+0x8c6>
 8011cac:	40012c00 	.word	0x40012c00
 8011cb0:	40000400 	.word	0x40000400
 8011cb4:	40000800 	.word	0x40000800
 8011cb8:	40000c00 	.word	0x40000c00
 8011cbc:	40013400 	.word	0x40013400
 8011cc0:	40014000 	.word	0x40014000
 8011cc4:	40014400 	.word	0x40014400
 8011cc8:	40014800 	.word	0x40014800
 8011ccc:	40015000 	.word	0x40015000
 8011cd0:	0801dcc4 	.word	0x0801dcc4
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4aae      	ldr	r2, [pc, #696]	; (8011f94 <TIM_SlaveTimer_SetConfig+0x738>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d13e      	bne.n	8011d5c <TIM_SlaveTimer_SetConfig+0x500>
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	2b10      	cmp	r3, #16
 8011ce4:	f000 821c 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	2b20      	cmp	r3, #32
 8011cee:	f000 8217 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	2b30      	cmp	r3, #48	; 0x30
 8011cf8:	f000 8212 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d04:	f000 820c 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d10:	f000 8206 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	4a9f      	ldr	r2, [pc, #636]	; (8011f98 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	f000 8200 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	4a9d      	ldr	r2, [pc, #628]	; (8011f9c <TIM_SlaveTimer_SetConfig+0x740>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	f000 81fa 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	4a9b      	ldr	r2, [pc, #620]	; (8011fa0 <TIM_SlaveTimer_SetConfig+0x744>)
 8011d32:	4293      	cmp	r3, r2
 8011d34:	f000 81f4 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	4a99      	ldr	r2, [pc, #612]	; (8011fa4 <TIM_SlaveTimer_SetConfig+0x748>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	f000 81ee 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	4a97      	ldr	r2, [pc, #604]	; (8011fa8 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	f000 81e8 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	f000 81e2 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d64:	d144      	bne.n	8011df0 <TIM_SlaveTimer_SetConfig+0x594>
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f000 81d8 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	2b20      	cmp	r3, #32
 8011d76:	f000 81d3 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	2b30      	cmp	r3, #48	; 0x30
 8011d80:	f000 81ce 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d8c:	f000 81c8 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d98:	f000 81c2 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	4a7d      	ldr	r2, [pc, #500]	; (8011f98 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	f000 81bc 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	4a7b      	ldr	r2, [pc, #492]	; (8011f9c <TIM_SlaveTimer_SetConfig+0x740>)
 8011dae:	4293      	cmp	r3, r2
 8011db0:	f000 81b6 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	4a79      	ldr	r2, [pc, #484]	; (8011fa0 <TIM_SlaveTimer_SetConfig+0x744>)
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	f000 81b0 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	4a77      	ldr	r2, [pc, #476]	; (8011fa4 <TIM_SlaveTimer_SetConfig+0x748>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	f000 81aa 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	4a75      	ldr	r2, [pc, #468]	; (8011fa8 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	f000 81a4 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	4a73      	ldr	r2, [pc, #460]	; (8011fac <TIM_SlaveTimer_SetConfig+0x750>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	f000 819e 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dec:	f000 8198 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a6e      	ldr	r2, [pc, #440]	; (8011fb0 <TIM_SlaveTimer_SetConfig+0x754>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d13e      	bne.n	8011e78 <TIM_SlaveTimer_SetConfig+0x61c>
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f000 818e 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	2b10      	cmp	r3, #16
 8011e0a:	f000 8189 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	2b30      	cmp	r3, #48	; 0x30
 8011e14:	f000 8184 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e20:	f000 817e 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011e2c:	f000 8178 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	4a58      	ldr	r2, [pc, #352]	; (8011f98 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	f000 8172 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	4a56      	ldr	r2, [pc, #344]	; (8011f9c <TIM_SlaveTimer_SetConfig+0x740>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	f000 816c 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	4a54      	ldr	r2, [pc, #336]	; (8011fa0 <TIM_SlaveTimer_SetConfig+0x744>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	f000 8166 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	4a52      	ldr	r2, [pc, #328]	; (8011fa4 <TIM_SlaveTimer_SetConfig+0x748>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	f000 8160 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	4a50      	ldr	r2, [pc, #320]	; (8011fa8 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011e66:	4293      	cmp	r3, r2
 8011e68:	f000 815a 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e74:	f000 8154 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4a4d      	ldr	r2, [pc, #308]	; (8011fb4 <TIM_SlaveTimer_SetConfig+0x758>)
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d13e      	bne.n	8011f00 <TIM_SlaveTimer_SetConfig+0x6a4>
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f000 814a 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	2b10      	cmp	r3, #16
 8011e92:	f000 8145 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	2b20      	cmp	r3, #32
 8011e9c:	f000 8140 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ea8:	f000 813a 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011eb4:	f000 8134 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	4a36      	ldr	r2, [pc, #216]	; (8011f98 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	f000 812e 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	4a34      	ldr	r2, [pc, #208]	; (8011f9c <TIM_SlaveTimer_SetConfig+0x740>)
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	f000 8128 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	4a32      	ldr	r2, [pc, #200]	; (8011fa0 <TIM_SlaveTimer_SetConfig+0x744>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	f000 8122 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	4a30      	ldr	r2, [pc, #192]	; (8011fa4 <TIM_SlaveTimer_SetConfig+0x748>)
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	f000 811c 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	4a2e      	ldr	r2, [pc, #184]	; (8011fa8 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	f000 8116 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011efc:	f000 8110 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4a2c      	ldr	r2, [pc, #176]	; (8011fb8 <TIM_SlaveTimer_SetConfig+0x75c>)
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d13d      	bne.n	8011f86 <TIM_SlaveTimer_SetConfig+0x72a>
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f000 8106 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	2b10      	cmp	r3, #16
 8011f1a:	f000 8101 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	2b20      	cmp	r3, #32
 8011f24:	f000 80fc 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	2b30      	cmp	r3, #48	; 0x30
 8011f2e:	f000 80f7 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f3a:	f000 80f1 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	4a15      	ldr	r2, [pc, #84]	; (8011f98 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	f000 80eb 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	4a13      	ldr	r2, [pc, #76]	; (8011f9c <TIM_SlaveTimer_SetConfig+0x740>)
 8011f50:	4293      	cmp	r3, r2
 8011f52:	f000 80e5 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	4a11      	ldr	r2, [pc, #68]	; (8011fa0 <TIM_SlaveTimer_SetConfig+0x744>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	f000 80df 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	4a0f      	ldr	r2, [pc, #60]	; (8011fa4 <TIM_SlaveTimer_SetConfig+0x748>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	f000 80d9 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	4a0d      	ldr	r2, [pc, #52]	; (8011fa8 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011f74:	4293      	cmp	r3, r2
 8011f76:	f000 80d3 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f82:	f000 80cd 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a0c      	ldr	r2, [pc, #48]	; (8011fbc <TIM_SlaveTimer_SetConfig+0x760>)
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	d152      	bne.n	8012036 <TIM_SlaveTimer_SetConfig+0x7da>
 8011f90:	e016      	b.n	8011fc0 <TIM_SlaveTimer_SetConfig+0x764>
 8011f92:	bf00      	nop
 8011f94:	40012c00 	.word	0x40012c00
 8011f98:	00100020 	.word	0x00100020
 8011f9c:	00100030 	.word	0x00100030
 8011fa0:	00100040 	.word	0x00100040
 8011fa4:	00100050 	.word	0x00100050
 8011fa8:	00100060 	.word	0x00100060
 8011fac:	00100070 	.word	0x00100070
 8011fb0:	40000400 	.word	0x40000400
 8011fb4:	40000800 	.word	0x40000800
 8011fb8:	40000c00 	.word	0x40000c00
 8011fbc:	40013400 	.word	0x40013400
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f000 80ab 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	2b10      	cmp	r3, #16
 8011fd0:	f000 80a6 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	2b20      	cmp	r3, #32
 8011fda:	f000 80a1 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	2b30      	cmp	r3, #48	; 0x30
 8011fe4:	f000 809c 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ff0:	f000 8096 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	4a4c      	ldr	r2, [pc, #304]	; (801212c <TIM_SlaveTimer_SetConfig+0x8d0>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	f000 8090 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	4a4a      	ldr	r2, [pc, #296]	; (8012130 <TIM_SlaveTimer_SetConfig+0x8d4>)
 8012006:	4293      	cmp	r3, r2
 8012008:	f000 808a 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	4a48      	ldr	r2, [pc, #288]	; (8012134 <TIM_SlaveTimer_SetConfig+0x8d8>)
 8012012:	4293      	cmp	r3, r2
 8012014:	f000 8084 	beq.w	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	4a46      	ldr	r2, [pc, #280]	; (8012138 <TIM_SlaveTimer_SetConfig+0x8dc>)
 801201e:	4293      	cmp	r3, r2
 8012020:	d07e      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	4a45      	ldr	r2, [pc, #276]	; (801213c <TIM_SlaveTimer_SetConfig+0x8e0>)
 8012028:	4293      	cmp	r3, r2
 801202a:	d079      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012034:	d074      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a41      	ldr	r2, [pc, #260]	; (8012140 <TIM_SlaveTimer_SetConfig+0x8e4>)
 801203c:	4293      	cmp	r3, r2
 801203e:	d132      	bne.n	80120a6 <TIM_SlaveTimer_SetConfig+0x84a>
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d06b      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	2b10      	cmp	r3, #16
 801204e:	d067      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	2b20      	cmp	r3, #32
 8012056:	d063      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	2b30      	cmp	r3, #48	; 0x30
 801205e:	d05f      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012068:	d05a      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012072:	d055      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	4a2d      	ldr	r2, [pc, #180]	; (8012130 <TIM_SlaveTimer_SetConfig+0x8d4>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d050      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	4a2c      	ldr	r2, [pc, #176]	; (8012134 <TIM_SlaveTimer_SetConfig+0x8d8>)
 8012084:	4293      	cmp	r3, r2
 8012086:	d04b      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	4a2a      	ldr	r2, [pc, #168]	; (8012138 <TIM_SlaveTimer_SetConfig+0x8dc>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d046      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	4a29      	ldr	r2, [pc, #164]	; (801213c <TIM_SlaveTimer_SetConfig+0x8e0>)
 8012098:	4293      	cmp	r3, r2
 801209a:	d041      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a4:	d03c      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a26      	ldr	r2, [pc, #152]	; (8012144 <TIM_SlaveTimer_SetConfig+0x8e8>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d132      	bne.n	8012116 <TIM_SlaveTimer_SetConfig+0x8ba>
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d033      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	2b10      	cmp	r3, #16
 80120be:	d02f      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	2b20      	cmp	r3, #32
 80120c6:	d02b      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	2b30      	cmp	r3, #48	; 0x30
 80120ce:	d027      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80120d8:	d022      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80120e2:	d01d      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	4a10      	ldr	r2, [pc, #64]	; (801212c <TIM_SlaveTimer_SetConfig+0x8d0>)
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d018      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	4a0f      	ldr	r2, [pc, #60]	; (8012130 <TIM_SlaveTimer_SetConfig+0x8d4>)
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d013      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	4a0d      	ldr	r2, [pc, #52]	; (8012134 <TIM_SlaveTimer_SetConfig+0x8d8>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d00e      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	4a0d      	ldr	r2, [pc, #52]	; (801213c <TIM_SlaveTimer_SetConfig+0x8e0>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d009      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012114:	d004      	beq.n	8012120 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012116:	f641 218e 	movw	r1, #6798	; 0x1a8e
 801211a:	480b      	ldr	r0, [pc, #44]	; (8012148 <TIM_SlaveTimer_SetConfig+0x8ec>)
 801211c:	f006 fb47 	bl	80187ae <assert_failed>
      break;
 8012120:	bf00      	nop
  }
  return HAL_OK;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	00100020 	.word	0x00100020
 8012130:	00100030 	.word	0x00100030
 8012134:	00100040 	.word	0x00100040
 8012138:	00100050 	.word	0x00100050
 801213c:	00100060 	.word	0x00100060
 8012140:	40014000 	.word	0x40014000
 8012144:	40015000 	.word	0x40015000
 8012148:	0801dcc4 	.word	0x0801dcc4

0801214c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801214c:	b480      	push	{r7}
 801214e:	b087      	sub	sp, #28
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
 8012158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	f023 0201 	bic.w	r2, r3, #1
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	699b      	ldr	r3, [r3, #24]
 801216a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	6a1b      	ldr	r3, [r3, #32]
 8012170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	4a28      	ldr	r2, [pc, #160]	; (8012218 <TIM_TI1_SetConfig+0xcc>)
 8012176:	4293      	cmp	r3, r2
 8012178:	d01b      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012180:	d017      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	4a25      	ldr	r2, [pc, #148]	; (801221c <TIM_TI1_SetConfig+0xd0>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d013      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	4a24      	ldr	r2, [pc, #144]	; (8012220 <TIM_TI1_SetConfig+0xd4>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d00f      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	4a23      	ldr	r2, [pc, #140]	; (8012224 <TIM_TI1_SetConfig+0xd8>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d00b      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	4a22      	ldr	r2, [pc, #136]	; (8012228 <TIM_TI1_SetConfig+0xdc>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d007      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	4a21      	ldr	r2, [pc, #132]	; (801222c <TIM_TI1_SetConfig+0xe0>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d003      	beq.n	80121b2 <TIM_TI1_SetConfig+0x66>
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	4a20      	ldr	r2, [pc, #128]	; (8012230 <TIM_TI1_SetConfig+0xe4>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d101      	bne.n	80121b6 <TIM_TI1_SetConfig+0x6a>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <TIM_TI1_SetConfig+0x6c>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d008      	beq.n	80121ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	f023 0303 	bic.w	r3, r3, #3
 80121c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80121c4:	697a      	ldr	r2, [r7, #20]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4313      	orrs	r3, r2
 80121ca:	617b      	str	r3, [r7, #20]
 80121cc:	e003      	b.n	80121d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	f043 0301 	orr.w	r3, r3, #1
 80121d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80121dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	011b      	lsls	r3, r3, #4
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	4313      	orrs	r3, r2
 80121e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	f023 030a 	bic.w	r3, r3, #10
 80121f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	f003 030a 	and.w	r3, r3, #10
 80121f8:	693a      	ldr	r2, [r7, #16]
 80121fa:	4313      	orrs	r3, r2
 80121fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	697a      	ldr	r2, [r7, #20]
 8012202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	693a      	ldr	r2, [r7, #16]
 8012208:	621a      	str	r2, [r3, #32]
}
 801220a:	bf00      	nop
 801220c:	371c      	adds	r7, #28
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop
 8012218:	40012c00 	.word	0x40012c00
 801221c:	40000400 	.word	0x40000400
 8012220:	40000800 	.word	0x40000800
 8012224:	40000c00 	.word	0x40000c00
 8012228:	40013400 	.word	0x40013400
 801222c:	40014000 	.word	0x40014000
 8012230:	40015000 	.word	0x40015000

08012234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012234:	b480      	push	{r7}
 8012236:	b087      	sub	sp, #28
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6a1b      	ldr	r3, [r3, #32]
 8012244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6a1b      	ldr	r3, [r3, #32]
 801224a:	f023 0201 	bic.w	r2, r3, #1
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	699b      	ldr	r3, [r3, #24]
 8012256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801225e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	011b      	lsls	r3, r3, #4
 8012264:	693a      	ldr	r2, [r7, #16]
 8012266:	4313      	orrs	r3, r2
 8012268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	f023 030a 	bic.w	r3, r3, #10
 8012270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012272:	697a      	ldr	r2, [r7, #20]
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	4313      	orrs	r3, r2
 8012278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	693a      	ldr	r2, [r7, #16]
 801227e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	621a      	str	r2, [r3, #32]
}
 8012286:	bf00      	nop
 8012288:	371c      	adds	r7, #28
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr

08012292 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012292:	b480      	push	{r7}
 8012294:	b087      	sub	sp, #28
 8012296:	af00      	add	r7, sp, #0
 8012298:	60f8      	str	r0, [r7, #12]
 801229a:	60b9      	str	r1, [r7, #8]
 801229c:	607a      	str	r2, [r7, #4]
 801229e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	6a1b      	ldr	r3, [r3, #32]
 80122a4:	f023 0210 	bic.w	r2, r3, #16
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	699b      	ldr	r3, [r3, #24]
 80122b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6a1b      	ldr	r3, [r3, #32]
 80122b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	021b      	lsls	r3, r3, #8
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80122d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	031b      	lsls	r3, r3, #12
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	697a      	ldr	r2, [r7, #20]
 80122da:	4313      	orrs	r3, r2
 80122dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80122e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	011b      	lsls	r3, r3, #4
 80122ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80122ee:	693a      	ldr	r2, [r7, #16]
 80122f0:	4313      	orrs	r3, r2
 80122f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	697a      	ldr	r2, [r7, #20]
 80122f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	621a      	str	r2, [r3, #32]
}
 8012300:	bf00      	nop
 8012302:	371c      	adds	r7, #28
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801230c:	b480      	push	{r7}
 801230e:	b087      	sub	sp, #28
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6a1b      	ldr	r3, [r3, #32]
 801231c:	f023 0210 	bic.w	r2, r3, #16
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	699b      	ldr	r3, [r3, #24]
 8012328:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6a1b      	ldr	r3, [r3, #32]
 801232e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012336:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	031b      	lsls	r3, r3, #12
 801233c:	697a      	ldr	r2, [r7, #20]
 801233e:	4313      	orrs	r3, r2
 8012340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012348:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	011b      	lsls	r3, r3, #4
 801234e:	693a      	ldr	r2, [r7, #16]
 8012350:	4313      	orrs	r3, r2
 8012352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	697a      	ldr	r2, [r7, #20]
 8012358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	621a      	str	r2, [r3, #32]
}
 8012360:	bf00      	nop
 8012362:	371c      	adds	r7, #28
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr

0801236c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801236c:	b480      	push	{r7}
 801236e:	b087      	sub	sp, #28
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6a1b      	ldr	r3, [r3, #32]
 801237e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	69db      	ldr	r3, [r3, #28]
 801238a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	6a1b      	ldr	r3, [r3, #32]
 8012390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f023 0303 	bic.w	r3, r3, #3
 8012398:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801239a:	697a      	ldr	r2, [r7, #20]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4313      	orrs	r3, r2
 80123a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80123a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	011b      	lsls	r3, r3, #4
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	697a      	ldr	r2, [r7, #20]
 80123b2:	4313      	orrs	r3, r2
 80123b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80123bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	021b      	lsls	r3, r3, #8
 80123c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80123c6:	693a      	ldr	r2, [r7, #16]
 80123c8:	4313      	orrs	r3, r2
 80123ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	697a      	ldr	r2, [r7, #20]
 80123d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	693a      	ldr	r2, [r7, #16]
 80123d6:	621a      	str	r2, [r3, #32]
}
 80123d8:	bf00      	nop
 80123da:	371c      	adds	r7, #28
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	69db      	ldr	r3, [r3, #28]
 8012402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6a1b      	ldr	r3, [r3, #32]
 8012408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	021b      	lsls	r3, r3, #8
 8012416:	697a      	ldr	r2, [r7, #20]
 8012418:	4313      	orrs	r3, r2
 801241a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012422:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	031b      	lsls	r3, r3, #12
 8012428:	b29b      	uxth	r3, r3
 801242a:	697a      	ldr	r2, [r7, #20]
 801242c:	4313      	orrs	r3, r2
 801242e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8012436:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	031b      	lsls	r3, r3, #12
 801243c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012440:	693a      	ldr	r2, [r7, #16]
 8012442:	4313      	orrs	r3, r2
 8012444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	697a      	ldr	r2, [r7, #20]
 801244a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	693a      	ldr	r2, [r7, #16]
 8012450:	621a      	str	r2, [r3, #32]
}
 8012452:	bf00      	nop
 8012454:	371c      	adds	r7, #28
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr

0801245e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801245e:	b480      	push	{r7}
 8012460:	b085      	sub	sp, #20
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	689b      	ldr	r3, [r3, #8]
 801246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801247a:	683a      	ldr	r2, [r7, #0]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	4313      	orrs	r3, r2
 8012480:	f043 0307 	orr.w	r3, r3, #7
 8012484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	609a      	str	r2, [r3, #8]
}
 801248c:	bf00      	nop
 801248e:	3714      	adds	r7, #20
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012498:	b480      	push	{r7}
 801249a:	b087      	sub	sp, #28
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
 80124a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80124b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	021a      	lsls	r2, r3, #8
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	431a      	orrs	r2, r3
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	4313      	orrs	r3, r2
 80124c0:	697a      	ldr	r2, [r7, #20]
 80124c2:	4313      	orrs	r3, r2
 80124c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	609a      	str	r2, [r3, #8]
}
 80124cc:	bf00      	nop
 80124ce:	371c      	adds	r7, #28
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr

080124d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	4a31      	ldr	r2, [pc, #196]	; (80125ac <TIM_CCxChannelCmd+0xd4>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d028      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124f2:	d024      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	4a2e      	ldr	r2, [pc, #184]	; (80125b0 <TIM_CCxChannelCmd+0xd8>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d020      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	4a2d      	ldr	r2, [pc, #180]	; (80125b4 <TIM_CCxChannelCmd+0xdc>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d01c      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	4a2c      	ldr	r2, [pc, #176]	; (80125b8 <TIM_CCxChannelCmd+0xe0>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d018      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	4a2b      	ldr	r2, [pc, #172]	; (80125bc <TIM_CCxChannelCmd+0xe4>)
 8012510:	4293      	cmp	r3, r2
 8012512:	d014      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	4a2a      	ldr	r2, [pc, #168]	; (80125c0 <TIM_CCxChannelCmd+0xe8>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d010      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	4a29      	ldr	r2, [pc, #164]	; (80125c4 <TIM_CCxChannelCmd+0xec>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d00c      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	4a28      	ldr	r2, [pc, #160]	; (80125c8 <TIM_CCxChannelCmd+0xf0>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d008      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4a27      	ldr	r2, [pc, #156]	; (80125cc <TIM_CCxChannelCmd+0xf4>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d004      	beq.n	801253e <TIM_CCxChannelCmd+0x66>
 8012534:	f641 4102 	movw	r1, #7170	; 0x1c02
 8012538:	4825      	ldr	r0, [pc, #148]	; (80125d0 <TIM_CCxChannelCmd+0xf8>)
 801253a:	f006 f938 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d016      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	2b04      	cmp	r3, #4
 8012548:	d013      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	2b08      	cmp	r3, #8
 801254e:	d010      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b0c      	cmp	r3, #12
 8012554:	d00d      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b10      	cmp	r3, #16
 801255a:	d00a      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	2b14      	cmp	r3, #20
 8012560:	d007      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	2b3c      	cmp	r3, #60	; 0x3c
 8012566:	d004      	beq.n	8012572 <TIM_CCxChannelCmd+0x9a>
 8012568:	f641 4103 	movw	r1, #7171	; 0x1c03
 801256c:	4818      	ldr	r0, [pc, #96]	; (80125d0 <TIM_CCxChannelCmd+0xf8>)
 801256e:	f006 f91e 	bl	80187ae <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	f003 031f 	and.w	r3, r3, #31
 8012578:	2201      	movs	r2, #1
 801257a:	fa02 f303 	lsl.w	r3, r2, r3
 801257e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6a1a      	ldr	r2, [r3, #32]
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	43db      	mvns	r3, r3
 8012588:	401a      	ands	r2, r3
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6a1a      	ldr	r2, [r3, #32]
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	f003 031f 	and.w	r3, r3, #31
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	fa01 f303 	lsl.w	r3, r1, r3
 801259e:	431a      	orrs	r2, r3
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	621a      	str	r2, [r3, #32]
}
 80125a4:	bf00      	nop
 80125a6:	3718      	adds	r7, #24
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	40012c00 	.word	0x40012c00
 80125b0:	40000400 	.word	0x40000400
 80125b4:	40000800 	.word	0x40000800
 80125b8:	40000c00 	.word	0x40000c00
 80125bc:	40013400 	.word	0x40013400
 80125c0:	40014000 	.word	0x40014000
 80125c4:	40014400 	.word	0x40014400
 80125c8:	40014800 	.word	0x40014800
 80125cc:	40015000 	.word	0x40015000
 80125d0:	0801dcc4 	.word	0x0801dcc4

080125d4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4a25      	ldr	r2, [pc, #148]	; (8012674 <TIM_ResetCallback+0xa0>)
 80125e0:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4a24      	ldr	r2, [pc, #144]	; (8012678 <TIM_ResetCallback+0xa4>)
 80125e6:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4a24      	ldr	r2, [pc, #144]	; (801267c <TIM_ResetCallback+0xa8>)
 80125ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4a23      	ldr	r2, [pc, #140]	; (8012680 <TIM_ResetCallback+0xac>)
 80125f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a22      	ldr	r2, [pc, #136]	; (8012684 <TIM_ResetCallback+0xb0>)
 80125fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4a21      	ldr	r2, [pc, #132]	; (8012688 <TIM_ResetCallback+0xb4>)
 8012604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4a20      	ldr	r2, [pc, #128]	; (801268c <TIM_ResetCallback+0xb8>)
 801260c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4a1f      	ldr	r2, [pc, #124]	; (8012690 <TIM_ResetCallback+0xbc>)
 8012614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	4a1e      	ldr	r2, [pc, #120]	; (8012694 <TIM_ResetCallback+0xc0>)
 801261c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	4a1d      	ldr	r2, [pc, #116]	; (8012698 <TIM_ResetCallback+0xc4>)
 8012624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	4a1c      	ldr	r2, [pc, #112]	; (801269c <TIM_ResetCallback+0xc8>)
 801262c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	4a1b      	ldr	r2, [pc, #108]	; (80126a0 <TIM_ResetCallback+0xcc>)
 8012634:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4a1a      	ldr	r2, [pc, #104]	; (80126a4 <TIM_ResetCallback+0xd0>)
 801263c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4a19      	ldr	r2, [pc, #100]	; (80126a8 <TIM_ResetCallback+0xd4>)
 8012644:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;            /* Legacy weak Encoder Index Callback            */
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	4a18      	ldr	r2, [pc, #96]	; (80126ac <TIM_ResetCallback+0xd8>)
 801264c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;         /* Legacy weak Direction Change Callback         */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4a17      	ldr	r2, [pc, #92]	; (80126b0 <TIM_ResetCallback+0xdc>)
 8012654:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;              /* Legacy weak Index Error Callback              */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4a16      	ldr	r2, [pc, #88]	; (80126b4 <TIM_ResetCallback+0xe0>)
 801265c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;         /* Legacy weak Transition Error Callback         */
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4a15      	ldr	r2, [pc, #84]	; (80126b8 <TIM_ResetCallback+0xe4>)
 8012664:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	08018785 	.word	0x08018785
 8012678:	08010ebd 	.word	0x08010ebd
 801267c:	08010f35 	.word	0x08010f35
 8012680:	08010f49 	.word	0x08010f49
 8012684:	08010ee5 	.word	0x08010ee5
 8012688:	08010ef9 	.word	0x08010ef9
 801268c:	08010ed1 	.word	0x08010ed1
 8012690:	08010f0d 	.word	0x08010f0d
 8012694:	08010f21 	.word	0x08010f21
 8012698:	08010f5d 	.word	0x08010f5d
 801269c:	08012c55 	.word	0x08012c55
 80126a0:	08012c69 	.word	0x08012c69
 80126a4:	08012c7d 	.word	0x08012c7d
 80126a8:	08012c91 	.word	0x08012c91
 80126ac:	08012ca5 	.word	0x08012ca5
 80126b0:	08012cb9 	.word	0x08012cb9
 80126b4:	08012ccd 	.word	0x08012ccd
 80126b8:	08012ce1 	.word	0x08012ce1

080126bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4a8e      	ldr	r2, [pc, #568]	; (8012904 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d031      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126d8:	d02c      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4a8a      	ldr	r2, [pc, #552]	; (8012908 <HAL_TIMEx_MasterConfigSynchronization+0x24c>)
 80126e0:	4293      	cmp	r3, r2
 80126e2:	d027      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4a88      	ldr	r2, [pc, #544]	; (801290c <HAL_TIMEx_MasterConfigSynchronization+0x250>)
 80126ea:	4293      	cmp	r3, r2
 80126ec:	d022      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4a87      	ldr	r2, [pc, #540]	; (8012910 <HAL_TIMEx_MasterConfigSynchronization+0x254>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d01d      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a85      	ldr	r2, [pc, #532]	; (8012914 <HAL_TIMEx_MasterConfigSynchronization+0x258>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d018      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	4a84      	ldr	r2, [pc, #528]	; (8012918 <HAL_TIMEx_MasterConfigSynchronization+0x25c>)
 8012708:	4293      	cmp	r3, r2
 801270a:	d013      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a82      	ldr	r2, [pc, #520]	; (801291c <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d00e      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4a81      	ldr	r2, [pc, #516]	; (8012920 <HAL_TIMEx_MasterConfigSynchronization+0x264>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d009      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4a7f      	ldr	r2, [pc, #508]	; (8012924 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d004      	beq.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801272a:	f240 7133 	movw	r1, #1843	; 0x733
 801272e:	487e      	ldr	r0, [pc, #504]	; (8012928 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8012730:	f006 f83d 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d025      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b10      	cmp	r3, #16
 8012742:	d021      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2b20      	cmp	r3, #32
 801274a:	d01d      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2b30      	cmp	r3, #48	; 0x30
 8012752:	d019      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b40      	cmp	r3, #64	; 0x40
 801275a:	d015      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b50      	cmp	r3, #80	; 0x50
 8012762:	d011      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2b60      	cmp	r3, #96	; 0x60
 801276a:	d00d      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b70      	cmp	r3, #112	; 0x70
 8012772:	d009      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801277c:	d004      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801277e:	f240 7134 	movw	r1, #1844	; 0x734
 8012782:	4869      	ldr	r0, [pc, #420]	; (8012928 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8012784:	f006 f813 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	2b80      	cmp	r3, #128	; 0x80
 801278e:	d008      	beq.n	80127a2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d004      	beq.n	80127a2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 8012798:	f240 7135 	movw	r1, #1845	; 0x735
 801279c:	4862      	ldr	r0, [pc, #392]	; (8012928 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 801279e:	f006 f806 	bl	80187ae <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d101      	bne.n	80127b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80127ac:	2302      	movs	r3, #2
 80127ae:	e0a5      	b.n	80128fc <HAL_TIMEx_MasterConfigSynchronization+0x240>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2201      	movs	r2, #1
 80127b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2202      	movs	r2, #2
 80127bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4a4b      	ldr	r2, [pc, #300]	; (8012904 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d009      	beq.n	80127ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4a4f      	ldr	r2, [pc, #316]	; (801291c <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d004      	beq.n	80127ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a4e      	ldr	r2, [pc, #312]	; (8012924 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d161      	bne.n	80128b2 <HAL_TIMEx_MasterConfigSynchronization+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d054      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127fe:	d04f      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012808:	d04a      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012812:	d045      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801281c:	d040      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8012826:	d03b      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012830:	d036      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801283a:	d031      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8012844:	d02c      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801284e:	d027      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8012858:	d022      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8012862:	d01d      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 801286c:	d018      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012876:	d013      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8012880:	d00e      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 801288a:	d009      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8012894:	d004      	beq.n	80128a0 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012896:	f240 7147 	movw	r1, #1863	; 0x747
 801289a:	4823      	ldr	r0, [pc, #140]	; (8012928 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 801289c:	f005 ff87 	bl	80187ae <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80128a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80128b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	4313      	orrs	r3, r2
 80128c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	68ba      	ldr	r2, [r7, #8]
 80128d6:	4313      	orrs	r3, r2
 80128d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	68fa      	ldr	r2, [r7, #12]
 80128e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	68ba      	ldr	r2, [r7, #8]
 80128e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2201      	movs	r2, #1
 80128ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80128fa:	2300      	movs	r3, #0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	40012c00 	.word	0x40012c00
 8012908:	40000400 	.word	0x40000400
 801290c:	40000800 	.word	0x40000800
 8012910:	40000c00 	.word	0x40000c00
 8012914:	40001000 	.word	0x40001000
 8012918:	40001400 	.word	0x40001400
 801291c:	40013400 	.word	0x40013400
 8012920:	40014000 	.word	0x40014000
 8012924:	40015000 	.word	0x40015000
 8012928:	0801dd0c 	.word	0x0801dd0c

0801292c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012936:	2300      	movs	r3, #0
 8012938:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4a4c      	ldr	r2, [pc, #304]	; (8012a70 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d01d      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a4a      	ldr	r2, [pc, #296]	; (8012a74 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d018      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	4a49      	ldr	r2, [pc, #292]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8012954:	4293      	cmp	r3, r2
 8012956:	d013      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4a47      	ldr	r2, [pc, #284]	; (8012a7c <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d00e      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4a46      	ldr	r2, [pc, #280]	; (8012a80 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 8012968:	4293      	cmp	r3, r2
 801296a:	d009      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a44      	ldr	r2, [pc, #272]	; (8012a84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d004      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012976:	f240 7176 	movw	r1, #1910	; 0x776
 801297a:	4843      	ldr	r0, [pc, #268]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801297c:	f005 ff17 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012988:	d008      	beq.n	801299c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d004      	beq.n	801299c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8012992:	f240 7177 	movw	r1, #1911	; 0x777
 8012996:	483c      	ldr	r0, [pc, #240]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012998:	f005 ff09 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80129a4:	d008      	beq.n	80129b8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d004      	beq.n	80129b8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80129ae:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80129b2:	4835      	ldr	r0, [pc, #212]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129b4:	f005 fefb 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	689b      	ldr	r3, [r3, #8]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d013      	beq.n	80129e8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	689b      	ldr	r3, [r3, #8]
 80129c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129c8:	d00e      	beq.n	80129e8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129d2:	d009      	beq.n	80129e8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80129dc:	d004      	beq.n	80129e8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129de:	f240 7179 	movw	r1, #1913	; 0x779
 80129e2:	4829      	ldr	r0, [pc, #164]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129e4:	f005 fee3 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	2bff      	cmp	r3, #255	; 0xff
 80129ee:	d904      	bls.n	80129fa <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 80129f0:	f240 717a 	movw	r1, #1914	; 0x77a
 80129f4:	4824      	ldr	r0, [pc, #144]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129f6:	f005 feda 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a02:	d008      	beq.n	8012a16 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	691b      	ldr	r3, [r3, #16]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d004      	beq.n	8012a16 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8012a0c:	f240 717b 	movw	r1, #1915	; 0x77b
 8012a10:	481d      	ldr	r0, [pc, #116]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a12:	f005 fecc 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	695b      	ldr	r3, [r3, #20]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d009      	beq.n	8012a32 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	695b      	ldr	r3, [r3, #20]
 8012a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012a26:	d004      	beq.n	8012a32 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012a28:	f240 717c 	movw	r1, #1916	; 0x77c
 8012a2c:	4816      	ldr	r0, [pc, #88]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a2e:	f005 febe 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	699b      	ldr	r3, [r3, #24]
 8012a36:	2b0f      	cmp	r3, #15
 8012a38:	d904      	bls.n	8012a44 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8012a3a:	f240 717d 	movw	r1, #1917	; 0x77d
 8012a3e:	4812      	ldr	r0, [pc, #72]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a40:	f005 feb5 	bl	80187ae <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a4c:	d008      	beq.n	8012a60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d004      	beq.n	8012a60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8012a56:	f240 717e 	movw	r1, #1918	; 0x77e
 8012a5a:	480b      	ldr	r0, [pc, #44]	; (8012a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a5c:	f005 fea7 	bl	80187ae <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d110      	bne.n	8012a8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	e0e6      	b.n	8012c3c <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 8012a6e:	bf00      	nop
 8012a70:	40012c00 	.word	0x40012c00
 8012a74:	40013400 	.word	0x40013400
 8012a78:	40014000 	.word	0x40014000
 8012a7c:	40014400 	.word	0x40014400
 8012a80:	40014800 	.word	0x40014800
 8012a84:	40015000 	.word	0x40015000
 8012a88:	0801dd0c 	.word	0x0801dd0c
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	689b      	ldr	r3, [r3, #8]
 8012aac:	4313      	orrs	r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	4313      	orrs	r3, r2
 8012abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	691b      	ldr	r3, [r3, #16]
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	4313      	orrs	r3, r2
 8012ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012af2:	4313      	orrs	r3, r2
 8012af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	699b      	ldr	r3, [r3, #24]
 8012b00:	041b      	lsls	r3, r3, #16
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a4e      	ldr	r2, [pc, #312]	; (8012c44 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d009      	beq.n	8012b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a4c      	ldr	r2, [pc, #304]	; (8012c48 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d004      	beq.n	8012b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a4b      	ldr	r2, [pc, #300]	; (8012c4c <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d114      	bne.n	8012b4e <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	69db      	ldr	r3, [r3, #28]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d009      	beq.n	8012b40 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	69db      	ldr	r3, [r3, #28]
 8012b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b34:	d004      	beq.n	8012b40 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8012b36:	f240 7193 	movw	r1, #1939	; 0x793
 8012b3a:	4845      	ldr	r0, [pc, #276]	; (8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012b3c:	f005 fe37 	bl	80187ae <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	69db      	ldr	r3, [r3, #28]
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	4a3c      	ldr	r2, [pc, #240]	; (8012c44 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d009      	beq.n	8012b6c <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4a3a      	ldr	r2, [pc, #232]	; (8012c48 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d004      	beq.n	8012b6c <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a39      	ldr	r2, [pc, #228]	; (8012c4c <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d15e      	bne.n	8012c2a <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	6a1b      	ldr	r3, [r3, #32]
 8012b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012b74:	d008      	beq.n	8012b88 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	6a1b      	ldr	r3, [r3, #32]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d004      	beq.n	8012b88 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8012b7e:	f240 719c 	movw	r1, #1948	; 0x79c
 8012b82:	4833      	ldr	r0, [pc, #204]	; (8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012b84:	f005 fe13 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d009      	beq.n	8012ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012b98:	d004      	beq.n	8012ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8012b9a:	f240 719d 	movw	r1, #1949	; 0x79d
 8012b9e:	482c      	ldr	r0, [pc, #176]	; (8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012ba0:	f005 fe05 	bl	80187ae <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ba8:	2b0f      	cmp	r3, #15
 8012baa:	d904      	bls.n	8012bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 8012bac:	f240 719e 	movw	r1, #1950	; 0x79e
 8012bb0:	4827      	ldr	r0, [pc, #156]	; (8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012bb2:	f005 fdfc 	bl	80187ae <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bc0:	051b      	lsls	r3, r3, #20
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	6a1b      	ldr	r3, [r3, #32]
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bde:	4313      	orrs	r3, r2
 8012be0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	4a17      	ldr	r2, [pc, #92]	; (8012c44 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d009      	beq.n	8012c00 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a15      	ldr	r2, [pc, #84]	; (8012c48 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d004      	beq.n	8012c00 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4a14      	ldr	r2, [pc, #80]	; (8012c4c <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d114      	bne.n	8012c2a <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d009      	beq.n	8012c1c <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c10:	d004      	beq.n	8012c1c <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012c12:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8012c16:	480e      	ldr	r0, [pc, #56]	; (8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012c18:	f005 fdc9 	bl	80187ae <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c26:	4313      	orrs	r3, r2
 8012c28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c3a:	2300      	movs	r3, #0
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3710      	adds	r7, #16
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	40012c00 	.word	0x40012c00
 8012c48:	40013400 	.word	0x40013400
 8012c4c:	40015000 	.word	0x40015000
 8012c50:	0801dd0c 	.word	0x0801dd0c

08012c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012c5c:	bf00      	nop
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8012c70:	bf00      	nop
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012c84:	bf00      	nop
 8012c86:	370c      	adds	r7, #12
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8e:	4770      	bx	lr

08012c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012cac:	bf00      	nop
 8012cae:	370c      	adds	r7, #12
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012cc0:	bf00      	nop
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012cd4:	bf00      	nop
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr

08012ce0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012ce8:	bf00      	nop
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d101      	bne.n	8012d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d02:	2301      	movs	r3, #1
 8012d04:	e08d      	b.n	8012e22 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	699b      	ldr	r3, [r3, #24]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d023      	beq.n	8012d56 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a46      	ldr	r2, [pc, #280]	; (8012e2c <HAL_UART_Init+0x138>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d041      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a44      	ldr	r2, [pc, #272]	; (8012e30 <HAL_UART_Init+0x13c>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d03c      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a43      	ldr	r2, [pc, #268]	; (8012e34 <HAL_UART_Init+0x140>)
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d037      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a41      	ldr	r2, [pc, #260]	; (8012e38 <HAL_UART_Init+0x144>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d032      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a40      	ldr	r2, [pc, #256]	; (8012e3c <HAL_UART_Init+0x148>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d02d      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a3e      	ldr	r2, [pc, #248]	; (8012e40 <HAL_UART_Init+0x14c>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d028      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d4a:	f44f 7199 	mov.w	r1, #306	; 0x132
 8012d4e:	483d      	ldr	r0, [pc, #244]	; (8012e44 <HAL_UART_Init+0x150>)
 8012d50:	f005 fd2d 	bl	80187ae <assert_failed>
 8012d54:	e022      	b.n	8012d9c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a34      	ldr	r2, [pc, #208]	; (8012e2c <HAL_UART_Init+0x138>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d01d      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a32      	ldr	r2, [pc, #200]	; (8012e30 <HAL_UART_Init+0x13c>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d018      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a31      	ldr	r2, [pc, #196]	; (8012e34 <HAL_UART_Init+0x140>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d013      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a2f      	ldr	r2, [pc, #188]	; (8012e38 <HAL_UART_Init+0x144>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d00e      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4a2e      	ldr	r2, [pc, #184]	; (8012e3c <HAL_UART_Init+0x148>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d009      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4a2c      	ldr	r2, [pc, #176]	; (8012e40 <HAL_UART_Init+0x14c>)
 8012d8e:	4293      	cmp	r3, r2
 8012d90:	d004      	beq.n	8012d9c <HAL_UART_Init+0xa8>
 8012d92:	f240 1137 	movw	r1, #311	; 0x137
 8012d96:	482b      	ldr	r0, [pc, #172]	; (8012e44 <HAL_UART_Init+0x150>)
 8012d98:	f005 fd09 	bl	80187ae <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2200      	movs	r2, #0
 8012daa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f009 fb58 	bl	801c464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2224      	movs	r2, #36	; 0x24
 8012db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f022 0201 	bic.w	r2, r2, #1
 8012dca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f000 f8d3 	bl	8012f78 <UART_SetConfig>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b01      	cmp	r3, #1
 8012dd6:	d101      	bne.n	8012ddc <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e022      	b.n	8012e22 <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d002      	beq.n	8012dea <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f001 fb63 	bl	80144b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	685a      	ldr	r2, [r3, #4]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012df8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	689a      	ldr	r2, [r3, #8]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012e08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f042 0201 	orr.w	r2, r2, #1
 8012e18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f001 fca6 	bl	801476c <UART_CheckIdleState>
 8012e20:	4603      	mov	r3, r0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	40013800 	.word	0x40013800
 8012e30:	40004400 	.word	0x40004400
 8012e34:	40004800 	.word	0x40004800
 8012e38:	40004c00 	.word	0x40004c00
 8012e3c:	40005000 	.word	0x40005000
 8012e40:	40008000 	.word	0x40008000
 8012e44:	0801dd58 	.word	0x0801dd58

08012e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b08a      	sub	sp, #40	; 0x28
 8012e4c:	af02      	add	r7, sp, #8
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	603b      	str	r3, [r7, #0]
 8012e54:	4613      	mov	r3, r2
 8012e56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e5e:	2b20      	cmp	r3, #32
 8012e60:	f040 8083 	bne.w	8012f6a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <HAL_UART_Transmit+0x28>
 8012e6a:	88fb      	ldrh	r3, [r7, #6]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d101      	bne.n	8012e74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012e70:	2301      	movs	r3, #1
 8012e72:	e07b      	b.n	8012f6c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d101      	bne.n	8012e82 <HAL_UART_Transmit+0x3a>
 8012e7e:	2302      	movs	r3, #2
 8012e80:	e074      	b.n	8012f6c <HAL_UART_Transmit+0x124>
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2201      	movs	r2, #1
 8012e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2221      	movs	r2, #33	; 0x21
 8012e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8012e9a:	f7f3 fe0f 	bl	8006abc <HAL_GetTick>
 8012e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	88fa      	ldrh	r2, [r7, #6]
 8012ea4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	88fa      	ldrh	r2, [r7, #6]
 8012eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012eb8:	d108      	bne.n	8012ecc <HAL_UART_Transmit+0x84>
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	691b      	ldr	r3, [r3, #16]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d104      	bne.n	8012ecc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	61bb      	str	r3, [r7, #24]
 8012eca:	e003      	b.n	8012ed4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012ed4:	e02c      	b.n	8012f30 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	2200      	movs	r2, #0
 8012ede:	2180      	movs	r1, #128	; 0x80
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f001 fc8b 	bl	80147fc <UART_WaitOnFlagUntilTimeout>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d001      	beq.n	8012ef0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8012eec:	2303      	movs	r3, #3
 8012eee:	e03d      	b.n	8012f6c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10b      	bne.n	8012f0e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	881b      	ldrh	r3, [r3, #0]
 8012efa:	461a      	mov	r2, r3
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012f04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	3302      	adds	r3, #2
 8012f0a:	61bb      	str	r3, [r7, #24]
 8012f0c:	e007      	b.n	8012f1e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	781a      	ldrb	r2, [r3, #0]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	3b01      	subs	r3, #1
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d1cc      	bne.n	8012ed6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	2200      	movs	r2, #0
 8012f44:	2140      	movs	r1, #64	; 0x40
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f001 fc58 	bl	80147fc <UART_WaitOnFlagUntilTimeout>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d001      	beq.n	8012f56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012f52:	2303      	movs	r3, #3
 8012f54:	e00a      	b.n	8012f6c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2220      	movs	r2, #32
 8012f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2200      	movs	r2, #0
 8012f62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e000      	b.n	8012f6c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8012f6a:	2302      	movs	r3, #2
  }
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3720      	adds	r7, #32
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	0000      	movs	r0, r0
	...

08012f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012f78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012f7c:	b088      	sub	sp, #32
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012f82:	2300      	movs	r3, #0
 8012f84:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f86:	2300      	movs	r3, #0
 8012f88:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	4a9f      	ldr	r2, [pc, #636]	; (8013210 <UART_SetConfig+0x298>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d904      	bls.n	8012fa2 <UART_SetConfig+0x2a>
 8012f98:	f640 21b4 	movw	r1, #2740	; 0xab4
 8012f9c:	489d      	ldr	r0, [pc, #628]	; (8013214 <UART_SetConfig+0x29c>)
 8012f9e:	f005 fc06 	bl	80187ae <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	689b      	ldr	r3, [r3, #8]
 8012fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012faa:	d00d      	beq.n	8012fc8 <UART_SetConfig+0x50>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	689b      	ldr	r3, [r3, #8]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d009      	beq.n	8012fc8 <UART_SetConfig+0x50>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fbc:	d004      	beq.n	8012fc8 <UART_SetConfig+0x50>
 8012fbe:	f640 21b5 	movw	r1, #2741	; 0xab5
 8012fc2:	4894      	ldr	r0, [pc, #592]	; (8013214 <UART_SetConfig+0x29c>)
 8012fc4:	f005 fbf3 	bl	80187ae <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4a92      	ldr	r2, [pc, #584]	; (8013218 <UART_SetConfig+0x2a0>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d10e      	bne.n	8012ff0 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d030      	beq.n	801303c <UART_SetConfig+0xc4>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012fe2:	d02b      	beq.n	801303c <UART_SetConfig+0xc4>
 8012fe4:	f640 21b8 	movw	r1, #2744	; 0xab8
 8012fe8:	488a      	ldr	r0, [pc, #552]	; (8013214 <UART_SetConfig+0x29c>)
 8012fea:	f005 fbe0 	bl	80187ae <assert_failed>
 8012fee:	e025      	b.n	801303c <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ff8:	d012      	beq.n	8013020 <UART_SetConfig+0xa8>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	68db      	ldr	r3, [r3, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d00e      	beq.n	8013020 <UART_SetConfig+0xa8>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801300a:	d009      	beq.n	8013020 <UART_SetConfig+0xa8>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013014:	d004      	beq.n	8013020 <UART_SetConfig+0xa8>
 8013016:	f640 21bc 	movw	r1, #2748	; 0xabc
 801301a:	487e      	ldr	r0, [pc, #504]	; (8013214 <UART_SetConfig+0x29c>)
 801301c:	f005 fbc7 	bl	80187ae <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d009      	beq.n	801303c <UART_SetConfig+0xc4>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6a1b      	ldr	r3, [r3, #32]
 801302c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013030:	d004      	beq.n	801303c <UART_SetConfig+0xc4>
 8013032:	f640 21bd 	movw	r1, #2749	; 0xabd
 8013036:	4877      	ldr	r0, [pc, #476]	; (8013214 <UART_SetConfig+0x29c>)
 8013038:	f005 fbb9 	bl	80187ae <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00e      	beq.n	8013062 <UART_SetConfig+0xea>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801304c:	d009      	beq.n	8013062 <UART_SetConfig+0xea>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013056:	d004      	beq.n	8013062 <UART_SetConfig+0xea>
 8013058:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 801305c:	486d      	ldr	r0, [pc, #436]	; (8013214 <UART_SetConfig+0x29c>)
 801305e:	f005 fba6 	bl	80187ae <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	f023 030c 	bic.w	r3, r3, #12
 801306a:	2b00      	cmp	r3, #0
 801306c:	d103      	bne.n	8013076 <UART_SetConfig+0xfe>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	695b      	ldr	r3, [r3, #20]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d104      	bne.n	8013080 <UART_SetConfig+0x108>
 8013076:	f640 21c1 	movw	r1, #2753	; 0xac1
 801307a:	4866      	ldr	r0, [pc, #408]	; (8013214 <UART_SetConfig+0x29c>)
 801307c:	f005 fb97 	bl	80187ae <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d013      	beq.n	80130b0 <UART_SetConfig+0x138>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013090:	d00e      	beq.n	80130b0 <UART_SetConfig+0x138>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	699b      	ldr	r3, [r3, #24]
 8013096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801309a:	d009      	beq.n	80130b0 <UART_SetConfig+0x138>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	699b      	ldr	r3, [r3, #24]
 80130a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80130a4:	d004      	beq.n	80130b0 <UART_SetConfig+0x138>
 80130a6:	f640 21c2 	movw	r1, #2754	; 0xac2
 80130aa:	485a      	ldr	r0, [pc, #360]	; (8013214 <UART_SetConfig+0x29c>)
 80130ac:	f005 fb7f 	bl	80187ae <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	69db      	ldr	r3, [r3, #28]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d009      	beq.n	80130cc <UART_SetConfig+0x154>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	69db      	ldr	r3, [r3, #28]
 80130bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130c0:	d004      	beq.n	80130cc <UART_SetConfig+0x154>
 80130c2:	f640 21c3 	movw	r1, #2755	; 0xac3
 80130c6:	4853      	ldr	r0, [pc, #332]	; (8013214 <UART_SetConfig+0x29c>)
 80130c8:	f005 fb71 	bl	80187ae <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d030      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d02c      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d028      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e8:	2b03      	cmp	r3, #3
 80130ea:	d024      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f0:	2b04      	cmp	r3, #4
 80130f2:	d020      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f8:	2b05      	cmp	r3, #5
 80130fa:	d01c      	beq.n	8013136 <UART_SetConfig+0x1be>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	2b06      	cmp	r3, #6
 8013102:	d018      	beq.n	8013136 <UART_SetConfig+0x1be>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013108:	2b07      	cmp	r3, #7
 801310a:	d014      	beq.n	8013136 <UART_SetConfig+0x1be>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013110:	2b08      	cmp	r3, #8
 8013112:	d010      	beq.n	8013136 <UART_SetConfig+0x1be>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	2b09      	cmp	r3, #9
 801311a:	d00c      	beq.n	8013136 <UART_SetConfig+0x1be>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013120:	2b0a      	cmp	r3, #10
 8013122:	d008      	beq.n	8013136 <UART_SetConfig+0x1be>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013128:	2b0b      	cmp	r3, #11
 801312a:	d004      	beq.n	8013136 <UART_SetConfig+0x1be>
 801312c:	f640 21c4 	movw	r1, #2756	; 0xac4
 8013130:	4838      	ldr	r0, [pc, #224]	; (8013214 <UART_SetConfig+0x29c>)
 8013132:	f005 fb3c 	bl	80187ae <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	689a      	ldr	r2, [r3, #8]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	431a      	orrs	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	695b      	ldr	r3, [r3, #20]
 8013144:	431a      	orrs	r2, r3
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	69db      	ldr	r3, [r3, #28]
 801314a:	4313      	orrs	r3, r2
 801314c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013152:	69fa      	ldr	r2, [r7, #28]
 8013154:	4313      	orrs	r3, r2
 8013156:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	4b2f      	ldr	r3, [pc, #188]	; (801321c <UART_SetConfig+0x2a4>)
 8013160:	4013      	ands	r3, r2
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	6812      	ldr	r2, [r2, #0]
 8013166:	69f9      	ldr	r1, [r7, #28]
 8013168:	430b      	orrs	r3, r1
 801316a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	430a      	orrs	r2, r1
 8013180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a22      	ldr	r2, [pc, #136]	; (8013218 <UART_SetConfig+0x2a0>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d004      	beq.n	801319c <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6a1b      	ldr	r3, [r3, #32]
 8013196:	69fa      	ldr	r2, [r7, #28]
 8013198:	4313      	orrs	r3, r2
 801319a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80131a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	6812      	ldr	r2, [r2, #0]
 80131ae:	69f9      	ldr	r1, [r7, #28]
 80131b0:	430b      	orrs	r3, r1
 80131b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ba:	f023 010f 	bic.w	r1, r3, #15
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	430a      	orrs	r2, r1
 80131c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a14      	ldr	r2, [pc, #80]	; (8013220 <UART_SetConfig+0x2a8>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d12d      	bne.n	8013230 <UART_SetConfig+0x2b8>
 80131d4:	4b13      	ldr	r3, [pc, #76]	; (8013224 <UART_SetConfig+0x2ac>)
 80131d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131da:	f003 0303 	and.w	r3, r3, #3
 80131de:	2b03      	cmp	r3, #3
 80131e0:	d822      	bhi.n	8013228 <UART_SetConfig+0x2b0>
 80131e2:	a201      	add	r2, pc, #4	; (adr r2, 80131e8 <UART_SetConfig+0x270>)
 80131e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e8:	080131f9 	.word	0x080131f9
 80131ec:	08013205 	.word	0x08013205
 80131f0:	080131ff 	.word	0x080131ff
 80131f4:	0801320b 	.word	0x0801320b
 80131f8:	2301      	movs	r3, #1
 80131fa:	76fb      	strb	r3, [r7, #27]
 80131fc:	e0f4      	b.n	80133e8 <UART_SetConfig+0x470>
 80131fe:	2302      	movs	r3, #2
 8013200:	76fb      	strb	r3, [r7, #27]
 8013202:	e0f1      	b.n	80133e8 <UART_SetConfig+0x470>
 8013204:	2304      	movs	r3, #4
 8013206:	76fb      	strb	r3, [r7, #27]
 8013208:	e0ee      	b.n	80133e8 <UART_SetConfig+0x470>
 801320a:	2308      	movs	r3, #8
 801320c:	76fb      	strb	r3, [r7, #27]
 801320e:	e0eb      	b.n	80133e8 <UART_SetConfig+0x470>
 8013210:	011e1a30 	.word	0x011e1a30
 8013214:	0801dd58 	.word	0x0801dd58
 8013218:	40008000 	.word	0x40008000
 801321c:	cfff69f3 	.word	0xcfff69f3
 8013220:	40013800 	.word	0x40013800
 8013224:	40021000 	.word	0x40021000
 8013228:	2310      	movs	r3, #16
 801322a:	76fb      	strb	r3, [r7, #27]
 801322c:	bf00      	nop
 801322e:	e0db      	b.n	80133e8 <UART_SetConfig+0x470>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4aa5      	ldr	r2, [pc, #660]	; (80134cc <UART_SetConfig+0x554>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d134      	bne.n	80132a4 <UART_SetConfig+0x32c>
 801323a:	4ba5      	ldr	r3, [pc, #660]	; (80134d0 <UART_SetConfig+0x558>)
 801323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013240:	f003 030c 	and.w	r3, r3, #12
 8013244:	2b0c      	cmp	r3, #12
 8013246:	d829      	bhi.n	801329c <UART_SetConfig+0x324>
 8013248:	a201      	add	r2, pc, #4	; (adr r2, 8013250 <UART_SetConfig+0x2d8>)
 801324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801324e:	bf00      	nop
 8013250:	08013285 	.word	0x08013285
 8013254:	0801329d 	.word	0x0801329d
 8013258:	0801329d 	.word	0x0801329d
 801325c:	0801329d 	.word	0x0801329d
 8013260:	08013291 	.word	0x08013291
 8013264:	0801329d 	.word	0x0801329d
 8013268:	0801329d 	.word	0x0801329d
 801326c:	0801329d 	.word	0x0801329d
 8013270:	0801328b 	.word	0x0801328b
 8013274:	0801329d 	.word	0x0801329d
 8013278:	0801329d 	.word	0x0801329d
 801327c:	0801329d 	.word	0x0801329d
 8013280:	08013297 	.word	0x08013297
 8013284:	2300      	movs	r3, #0
 8013286:	76fb      	strb	r3, [r7, #27]
 8013288:	e0ae      	b.n	80133e8 <UART_SetConfig+0x470>
 801328a:	2302      	movs	r3, #2
 801328c:	76fb      	strb	r3, [r7, #27]
 801328e:	e0ab      	b.n	80133e8 <UART_SetConfig+0x470>
 8013290:	2304      	movs	r3, #4
 8013292:	76fb      	strb	r3, [r7, #27]
 8013294:	e0a8      	b.n	80133e8 <UART_SetConfig+0x470>
 8013296:	2308      	movs	r3, #8
 8013298:	76fb      	strb	r3, [r7, #27]
 801329a:	e0a5      	b.n	80133e8 <UART_SetConfig+0x470>
 801329c:	2310      	movs	r3, #16
 801329e:	76fb      	strb	r3, [r7, #27]
 80132a0:	bf00      	nop
 80132a2:	e0a1      	b.n	80133e8 <UART_SetConfig+0x470>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	4a8a      	ldr	r2, [pc, #552]	; (80134d4 <UART_SetConfig+0x55c>)
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d120      	bne.n	80132f0 <UART_SetConfig+0x378>
 80132ae:	4b88      	ldr	r3, [pc, #544]	; (80134d0 <UART_SetConfig+0x558>)
 80132b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80132b8:	2b10      	cmp	r3, #16
 80132ba:	d00f      	beq.n	80132dc <UART_SetConfig+0x364>
 80132bc:	2b10      	cmp	r3, #16
 80132be:	d802      	bhi.n	80132c6 <UART_SetConfig+0x34e>
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d005      	beq.n	80132d0 <UART_SetConfig+0x358>
 80132c4:	e010      	b.n	80132e8 <UART_SetConfig+0x370>
 80132c6:	2b20      	cmp	r3, #32
 80132c8:	d005      	beq.n	80132d6 <UART_SetConfig+0x35e>
 80132ca:	2b30      	cmp	r3, #48	; 0x30
 80132cc:	d009      	beq.n	80132e2 <UART_SetConfig+0x36a>
 80132ce:	e00b      	b.n	80132e8 <UART_SetConfig+0x370>
 80132d0:	2300      	movs	r3, #0
 80132d2:	76fb      	strb	r3, [r7, #27]
 80132d4:	e088      	b.n	80133e8 <UART_SetConfig+0x470>
 80132d6:	2302      	movs	r3, #2
 80132d8:	76fb      	strb	r3, [r7, #27]
 80132da:	e085      	b.n	80133e8 <UART_SetConfig+0x470>
 80132dc:	2304      	movs	r3, #4
 80132de:	76fb      	strb	r3, [r7, #27]
 80132e0:	e082      	b.n	80133e8 <UART_SetConfig+0x470>
 80132e2:	2308      	movs	r3, #8
 80132e4:	76fb      	strb	r3, [r7, #27]
 80132e6:	e07f      	b.n	80133e8 <UART_SetConfig+0x470>
 80132e8:	2310      	movs	r3, #16
 80132ea:	76fb      	strb	r3, [r7, #27]
 80132ec:	bf00      	nop
 80132ee:	e07b      	b.n	80133e8 <UART_SetConfig+0x470>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4a78      	ldr	r2, [pc, #480]	; (80134d8 <UART_SetConfig+0x560>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d120      	bne.n	801333c <UART_SetConfig+0x3c4>
 80132fa:	4b75      	ldr	r3, [pc, #468]	; (80134d0 <UART_SetConfig+0x558>)
 80132fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013300:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013304:	2b40      	cmp	r3, #64	; 0x40
 8013306:	d00f      	beq.n	8013328 <UART_SetConfig+0x3b0>
 8013308:	2b40      	cmp	r3, #64	; 0x40
 801330a:	d802      	bhi.n	8013312 <UART_SetConfig+0x39a>
 801330c:	2b00      	cmp	r3, #0
 801330e:	d005      	beq.n	801331c <UART_SetConfig+0x3a4>
 8013310:	e010      	b.n	8013334 <UART_SetConfig+0x3bc>
 8013312:	2b80      	cmp	r3, #128	; 0x80
 8013314:	d005      	beq.n	8013322 <UART_SetConfig+0x3aa>
 8013316:	2bc0      	cmp	r3, #192	; 0xc0
 8013318:	d009      	beq.n	801332e <UART_SetConfig+0x3b6>
 801331a:	e00b      	b.n	8013334 <UART_SetConfig+0x3bc>
 801331c:	2300      	movs	r3, #0
 801331e:	76fb      	strb	r3, [r7, #27]
 8013320:	e062      	b.n	80133e8 <UART_SetConfig+0x470>
 8013322:	2302      	movs	r3, #2
 8013324:	76fb      	strb	r3, [r7, #27]
 8013326:	e05f      	b.n	80133e8 <UART_SetConfig+0x470>
 8013328:	2304      	movs	r3, #4
 801332a:	76fb      	strb	r3, [r7, #27]
 801332c:	e05c      	b.n	80133e8 <UART_SetConfig+0x470>
 801332e:	2308      	movs	r3, #8
 8013330:	76fb      	strb	r3, [r7, #27]
 8013332:	e059      	b.n	80133e8 <UART_SetConfig+0x470>
 8013334:	2310      	movs	r3, #16
 8013336:	76fb      	strb	r3, [r7, #27]
 8013338:	bf00      	nop
 801333a:	e055      	b.n	80133e8 <UART_SetConfig+0x470>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a66      	ldr	r2, [pc, #408]	; (80134dc <UART_SetConfig+0x564>)
 8013342:	4293      	cmp	r3, r2
 8013344:	d124      	bne.n	8013390 <UART_SetConfig+0x418>
 8013346:	4b62      	ldr	r3, [pc, #392]	; (80134d0 <UART_SetConfig+0x558>)
 8013348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801334c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013354:	d012      	beq.n	801337c <UART_SetConfig+0x404>
 8013356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801335a:	d802      	bhi.n	8013362 <UART_SetConfig+0x3ea>
 801335c:	2b00      	cmp	r3, #0
 801335e:	d007      	beq.n	8013370 <UART_SetConfig+0x3f8>
 8013360:	e012      	b.n	8013388 <UART_SetConfig+0x410>
 8013362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013366:	d006      	beq.n	8013376 <UART_SetConfig+0x3fe>
 8013368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801336c:	d009      	beq.n	8013382 <UART_SetConfig+0x40a>
 801336e:	e00b      	b.n	8013388 <UART_SetConfig+0x410>
 8013370:	2300      	movs	r3, #0
 8013372:	76fb      	strb	r3, [r7, #27]
 8013374:	e038      	b.n	80133e8 <UART_SetConfig+0x470>
 8013376:	2302      	movs	r3, #2
 8013378:	76fb      	strb	r3, [r7, #27]
 801337a:	e035      	b.n	80133e8 <UART_SetConfig+0x470>
 801337c:	2304      	movs	r3, #4
 801337e:	76fb      	strb	r3, [r7, #27]
 8013380:	e032      	b.n	80133e8 <UART_SetConfig+0x470>
 8013382:	2308      	movs	r3, #8
 8013384:	76fb      	strb	r3, [r7, #27]
 8013386:	e02f      	b.n	80133e8 <UART_SetConfig+0x470>
 8013388:	2310      	movs	r3, #16
 801338a:	76fb      	strb	r3, [r7, #27]
 801338c:	bf00      	nop
 801338e:	e02b      	b.n	80133e8 <UART_SetConfig+0x470>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4a52      	ldr	r2, [pc, #328]	; (80134e0 <UART_SetConfig+0x568>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d124      	bne.n	80133e4 <UART_SetConfig+0x46c>
 801339a:	4b4d      	ldr	r3, [pc, #308]	; (80134d0 <UART_SetConfig+0x558>)
 801339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80133a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80133a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133a8:	d012      	beq.n	80133d0 <UART_SetConfig+0x458>
 80133aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133ae:	d802      	bhi.n	80133b6 <UART_SetConfig+0x43e>
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d007      	beq.n	80133c4 <UART_SetConfig+0x44c>
 80133b4:	e012      	b.n	80133dc <UART_SetConfig+0x464>
 80133b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80133ba:	d006      	beq.n	80133ca <UART_SetConfig+0x452>
 80133bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80133c0:	d009      	beq.n	80133d6 <UART_SetConfig+0x45e>
 80133c2:	e00b      	b.n	80133dc <UART_SetConfig+0x464>
 80133c4:	2300      	movs	r3, #0
 80133c6:	76fb      	strb	r3, [r7, #27]
 80133c8:	e00e      	b.n	80133e8 <UART_SetConfig+0x470>
 80133ca:	2302      	movs	r3, #2
 80133cc:	76fb      	strb	r3, [r7, #27]
 80133ce:	e00b      	b.n	80133e8 <UART_SetConfig+0x470>
 80133d0:	2304      	movs	r3, #4
 80133d2:	76fb      	strb	r3, [r7, #27]
 80133d4:	e008      	b.n	80133e8 <UART_SetConfig+0x470>
 80133d6:	2308      	movs	r3, #8
 80133d8:	76fb      	strb	r3, [r7, #27]
 80133da:	e005      	b.n	80133e8 <UART_SetConfig+0x470>
 80133dc:	2310      	movs	r3, #16
 80133de:	76fb      	strb	r3, [r7, #27]
 80133e0:	bf00      	nop
 80133e2:	e001      	b.n	80133e8 <UART_SetConfig+0x470>
 80133e4:	2310      	movs	r3, #16
 80133e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	4a3c      	ldr	r2, [pc, #240]	; (80134e0 <UART_SetConfig+0x568>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	f040 8429 	bne.w	8013c46 <UART_SetConfig+0xcce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80133f4:	7efb      	ldrb	r3, [r7, #27]
 80133f6:	2b08      	cmp	r3, #8
 80133f8:	f200 8168 	bhi.w	80136cc <UART_SetConfig+0x754>
 80133fc:	a201      	add	r2, pc, #4	; (adr r2, 8013404 <UART_SetConfig+0x48c>)
 80133fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013402:	bf00      	nop
 8013404:	08013429 	.word	0x08013429
 8013408:	080136cd 	.word	0x080136cd
 801340c:	080134e5 	.word	0x080134e5
 8013410:	080136cd 	.word	0x080136cd
 8013414:	0801357d 	.word	0x0801357d
 8013418:	080136cd 	.word	0x080136cd
 801341c:	080136cd 	.word	0x080136cd
 8013420:	080136cd 	.word	0x080136cd
 8013424:	0801361f 	.word	0x0801361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8013428:	f7f9 fd76 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801342c:	4602      	mov	r2, r0
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013432:	2b00      	cmp	r3, #0
 8013434:	d044      	beq.n	80134c0 <UART_SetConfig+0x548>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343a:	2b01      	cmp	r3, #1
 801343c:	d03e      	beq.n	80134bc <UART_SetConfig+0x544>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013442:	2b02      	cmp	r3, #2
 8013444:	d038      	beq.n	80134b8 <UART_SetConfig+0x540>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344a:	2b03      	cmp	r3, #3
 801344c:	d032      	beq.n	80134b4 <UART_SetConfig+0x53c>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013452:	2b04      	cmp	r3, #4
 8013454:	d02c      	beq.n	80134b0 <UART_SetConfig+0x538>
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345a:	2b05      	cmp	r3, #5
 801345c:	d026      	beq.n	80134ac <UART_SetConfig+0x534>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013462:	2b06      	cmp	r3, #6
 8013464:	d020      	beq.n	80134a8 <UART_SetConfig+0x530>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346a:	2b07      	cmp	r3, #7
 801346c:	d01a      	beq.n	80134a4 <UART_SetConfig+0x52c>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013472:	2b08      	cmp	r3, #8
 8013474:	d014      	beq.n	80134a0 <UART_SetConfig+0x528>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	2b09      	cmp	r3, #9
 801347c:	d00e      	beq.n	801349c <UART_SetConfig+0x524>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013482:	2b0a      	cmp	r3, #10
 8013484:	d008      	beq.n	8013498 <UART_SetConfig+0x520>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	2b0b      	cmp	r3, #11
 801348c:	d102      	bne.n	8013494 <UART_SetConfig+0x51c>
 801348e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013492:	e016      	b.n	80134c2 <UART_SetConfig+0x54a>
 8013494:	2301      	movs	r3, #1
 8013496:	e014      	b.n	80134c2 <UART_SetConfig+0x54a>
 8013498:	2380      	movs	r3, #128	; 0x80
 801349a:	e012      	b.n	80134c2 <UART_SetConfig+0x54a>
 801349c:	2340      	movs	r3, #64	; 0x40
 801349e:	e010      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134a0:	2320      	movs	r3, #32
 80134a2:	e00e      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134a4:	2310      	movs	r3, #16
 80134a6:	e00c      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134a8:	230c      	movs	r3, #12
 80134aa:	e00a      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134ac:	230a      	movs	r3, #10
 80134ae:	e008      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134b0:	2308      	movs	r3, #8
 80134b2:	e006      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134b4:	2306      	movs	r3, #6
 80134b6:	e004      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134b8:	2304      	movs	r3, #4
 80134ba:	e002      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134bc:	2302      	movs	r3, #2
 80134be:	e000      	b.n	80134c2 <UART_SetConfig+0x54a>
 80134c0:	2301      	movs	r3, #1
 80134c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80134c6:	60fb      	str	r3, [r7, #12]
        break;
 80134c8:	e103      	b.n	80136d2 <UART_SetConfig+0x75a>
 80134ca:	bf00      	nop
 80134cc:	40004400 	.word	0x40004400
 80134d0:	40021000 	.word	0x40021000
 80134d4:	40004800 	.word	0x40004800
 80134d8:	40004c00 	.word	0x40004c00
 80134dc:	40005000 	.word	0x40005000
 80134e0:	40008000 	.word	0x40008000
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d044      	beq.n	8013576 <UART_SetConfig+0x5fe>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d03e      	beq.n	8013572 <UART_SetConfig+0x5fa>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f8:	2b02      	cmp	r3, #2
 80134fa:	d038      	beq.n	801356e <UART_SetConfig+0x5f6>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013500:	2b03      	cmp	r3, #3
 8013502:	d032      	beq.n	801356a <UART_SetConfig+0x5f2>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013508:	2b04      	cmp	r3, #4
 801350a:	d02c      	beq.n	8013566 <UART_SetConfig+0x5ee>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013510:	2b05      	cmp	r3, #5
 8013512:	d026      	beq.n	8013562 <UART_SetConfig+0x5ea>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	2b06      	cmp	r3, #6
 801351a:	d020      	beq.n	801355e <UART_SetConfig+0x5e6>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013520:	2b07      	cmp	r3, #7
 8013522:	d01a      	beq.n	801355a <UART_SetConfig+0x5e2>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013528:	2b08      	cmp	r3, #8
 801352a:	d014      	beq.n	8013556 <UART_SetConfig+0x5de>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013530:	2b09      	cmp	r3, #9
 8013532:	d00e      	beq.n	8013552 <UART_SetConfig+0x5da>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013538:	2b0a      	cmp	r3, #10
 801353a:	d008      	beq.n	801354e <UART_SetConfig+0x5d6>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	2b0b      	cmp	r3, #11
 8013542:	d102      	bne.n	801354a <UART_SetConfig+0x5d2>
 8013544:	f24f 4324 	movw	r3, #62500	; 0xf424
 8013548:	e016      	b.n	8013578 <UART_SetConfig+0x600>
 801354a:	4ba1      	ldr	r3, [pc, #644]	; (80137d0 <UART_SetConfig+0x858>)
 801354c:	e014      	b.n	8013578 <UART_SetConfig+0x600>
 801354e:	4ba1      	ldr	r3, [pc, #644]	; (80137d4 <UART_SetConfig+0x85c>)
 8013550:	e012      	b.n	8013578 <UART_SetConfig+0x600>
 8013552:	4ba1      	ldr	r3, [pc, #644]	; (80137d8 <UART_SetConfig+0x860>)
 8013554:	e010      	b.n	8013578 <UART_SetConfig+0x600>
 8013556:	4ba1      	ldr	r3, [pc, #644]	; (80137dc <UART_SetConfig+0x864>)
 8013558:	e00e      	b.n	8013578 <UART_SetConfig+0x600>
 801355a:	4ba1      	ldr	r3, [pc, #644]	; (80137e0 <UART_SetConfig+0x868>)
 801355c:	e00c      	b.n	8013578 <UART_SetConfig+0x600>
 801355e:	4ba1      	ldr	r3, [pc, #644]	; (80137e4 <UART_SetConfig+0x86c>)
 8013560:	e00a      	b.n	8013578 <UART_SetConfig+0x600>
 8013562:	4ba1      	ldr	r3, [pc, #644]	; (80137e8 <UART_SetConfig+0x870>)
 8013564:	e008      	b.n	8013578 <UART_SetConfig+0x600>
 8013566:	4ba1      	ldr	r3, [pc, #644]	; (80137ec <UART_SetConfig+0x874>)
 8013568:	e006      	b.n	8013578 <UART_SetConfig+0x600>
 801356a:	4ba1      	ldr	r3, [pc, #644]	; (80137f0 <UART_SetConfig+0x878>)
 801356c:	e004      	b.n	8013578 <UART_SetConfig+0x600>
 801356e:	4ba1      	ldr	r3, [pc, #644]	; (80137f4 <UART_SetConfig+0x87c>)
 8013570:	e002      	b.n	8013578 <UART_SetConfig+0x600>
 8013572:	4ba1      	ldr	r3, [pc, #644]	; (80137f8 <UART_SetConfig+0x880>)
 8013574:	e000      	b.n	8013578 <UART_SetConfig+0x600>
 8013576:	4b96      	ldr	r3, [pc, #600]	; (80137d0 <UART_SetConfig+0x858>)
 8013578:	60fb      	str	r3, [r7, #12]
        break;
 801357a:	e0aa      	b.n	80136d2 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801357c:	f7f9 fc5e 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 8013580:	4602      	mov	r2, r0
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013586:	2b00      	cmp	r3, #0
 8013588:	d044      	beq.n	8013614 <UART_SetConfig+0x69c>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801358e:	2b01      	cmp	r3, #1
 8013590:	d03e      	beq.n	8013610 <UART_SetConfig+0x698>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013596:	2b02      	cmp	r3, #2
 8013598:	d038      	beq.n	801360c <UART_SetConfig+0x694>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359e:	2b03      	cmp	r3, #3
 80135a0:	d032      	beq.n	8013608 <UART_SetConfig+0x690>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a6:	2b04      	cmp	r3, #4
 80135a8:	d02c      	beq.n	8013604 <UART_SetConfig+0x68c>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ae:	2b05      	cmp	r3, #5
 80135b0:	d026      	beq.n	8013600 <UART_SetConfig+0x688>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b6:	2b06      	cmp	r3, #6
 80135b8:	d020      	beq.n	80135fc <UART_SetConfig+0x684>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135be:	2b07      	cmp	r3, #7
 80135c0:	d01a      	beq.n	80135f8 <UART_SetConfig+0x680>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c6:	2b08      	cmp	r3, #8
 80135c8:	d014      	beq.n	80135f4 <UART_SetConfig+0x67c>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ce:	2b09      	cmp	r3, #9
 80135d0:	d00e      	beq.n	80135f0 <UART_SetConfig+0x678>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d6:	2b0a      	cmp	r3, #10
 80135d8:	d008      	beq.n	80135ec <UART_SetConfig+0x674>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135de:	2b0b      	cmp	r3, #11
 80135e0:	d102      	bne.n	80135e8 <UART_SetConfig+0x670>
 80135e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135e6:	e016      	b.n	8013616 <UART_SetConfig+0x69e>
 80135e8:	2301      	movs	r3, #1
 80135ea:	e014      	b.n	8013616 <UART_SetConfig+0x69e>
 80135ec:	2380      	movs	r3, #128	; 0x80
 80135ee:	e012      	b.n	8013616 <UART_SetConfig+0x69e>
 80135f0:	2340      	movs	r3, #64	; 0x40
 80135f2:	e010      	b.n	8013616 <UART_SetConfig+0x69e>
 80135f4:	2320      	movs	r3, #32
 80135f6:	e00e      	b.n	8013616 <UART_SetConfig+0x69e>
 80135f8:	2310      	movs	r3, #16
 80135fa:	e00c      	b.n	8013616 <UART_SetConfig+0x69e>
 80135fc:	230c      	movs	r3, #12
 80135fe:	e00a      	b.n	8013616 <UART_SetConfig+0x69e>
 8013600:	230a      	movs	r3, #10
 8013602:	e008      	b.n	8013616 <UART_SetConfig+0x69e>
 8013604:	2308      	movs	r3, #8
 8013606:	e006      	b.n	8013616 <UART_SetConfig+0x69e>
 8013608:	2306      	movs	r3, #6
 801360a:	e004      	b.n	8013616 <UART_SetConfig+0x69e>
 801360c:	2304      	movs	r3, #4
 801360e:	e002      	b.n	8013616 <UART_SetConfig+0x69e>
 8013610:	2302      	movs	r3, #2
 8013612:	e000      	b.n	8013616 <UART_SetConfig+0x69e>
 8013614:	2301      	movs	r3, #1
 8013616:	fbb2 f3f3 	udiv	r3, r2, r3
 801361a:	60fb      	str	r3, [r7, #12]
        break;
 801361c:	e059      	b.n	80136d2 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013622:	2b00      	cmp	r3, #0
 8013624:	d04e      	beq.n	80136c4 <UART_SetConfig+0x74c>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362a:	2b01      	cmp	r3, #1
 801362c:	d047      	beq.n	80136be <UART_SetConfig+0x746>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013632:	2b02      	cmp	r3, #2
 8013634:	d040      	beq.n	80136b8 <UART_SetConfig+0x740>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801363a:	2b03      	cmp	r3, #3
 801363c:	d039      	beq.n	80136b2 <UART_SetConfig+0x73a>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013642:	2b04      	cmp	r3, #4
 8013644:	d032      	beq.n	80136ac <UART_SetConfig+0x734>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801364a:	2b05      	cmp	r3, #5
 801364c:	d02b      	beq.n	80136a6 <UART_SetConfig+0x72e>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013652:	2b06      	cmp	r3, #6
 8013654:	d024      	beq.n	80136a0 <UART_SetConfig+0x728>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365a:	2b07      	cmp	r3, #7
 801365c:	d01d      	beq.n	801369a <UART_SetConfig+0x722>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013662:	2b08      	cmp	r3, #8
 8013664:	d016      	beq.n	8013694 <UART_SetConfig+0x71c>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366a:	2b09      	cmp	r3, #9
 801366c:	d00f      	beq.n	801368e <UART_SetConfig+0x716>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013672:	2b0a      	cmp	r3, #10
 8013674:	d008      	beq.n	8013688 <UART_SetConfig+0x710>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367a:	2b0b      	cmp	r3, #11
 801367c:	d101      	bne.n	8013682 <UART_SetConfig+0x70a>
 801367e:	2380      	movs	r3, #128	; 0x80
 8013680:	e022      	b.n	80136c8 <UART_SetConfig+0x750>
 8013682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013686:	e01f      	b.n	80136c8 <UART_SetConfig+0x750>
 8013688:	f44f 7380 	mov.w	r3, #256	; 0x100
 801368c:	e01c      	b.n	80136c8 <UART_SetConfig+0x750>
 801368e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013692:	e019      	b.n	80136c8 <UART_SetConfig+0x750>
 8013694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013698:	e016      	b.n	80136c8 <UART_SetConfig+0x750>
 801369a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801369e:	e013      	b.n	80136c8 <UART_SetConfig+0x750>
 80136a0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80136a4:	e010      	b.n	80136c8 <UART_SetConfig+0x750>
 80136a6:	f640 43cc 	movw	r3, #3276	; 0xccc
 80136aa:	e00d      	b.n	80136c8 <UART_SetConfig+0x750>
 80136ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136b0:	e00a      	b.n	80136c8 <UART_SetConfig+0x750>
 80136b2:	f241 5355 	movw	r3, #5461	; 0x1555
 80136b6:	e007      	b.n	80136c8 <UART_SetConfig+0x750>
 80136b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136bc:	e004      	b.n	80136c8 <UART_SetConfig+0x750>
 80136be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80136c2:	e001      	b.n	80136c8 <UART_SetConfig+0x750>
 80136c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136c8:	60fb      	str	r3, [r7, #12]
        break;
 80136ca:	e002      	b.n	80136d2 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80136cc:	2301      	movs	r3, #1
 80136ce:	74fb      	strb	r3, [r7, #19]
        break;
 80136d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 86c1 	beq.w	801445c <UART_SetConfig+0x14e4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	685a      	ldr	r2, [r3, #4]
 80136de:	4613      	mov	r3, r2
 80136e0:	005b      	lsls	r3, r3, #1
 80136e2:	4413      	add	r3, r2
 80136e4:	68fa      	ldr	r2, [r7, #12]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d305      	bcc.n	80136f6 <UART_SetConfig+0x77e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136f0:	68fa      	ldr	r2, [r7, #12]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d903      	bls.n	80136fe <UART_SetConfig+0x786>
      {
        ret = HAL_ERROR;
 80136f6:	2301      	movs	r3, #1
 80136f8:	74fb      	strb	r3, [r7, #19]
 80136fa:	f000 beaf 	b.w	801445c <UART_SetConfig+0x14e4>
      }
      else
      {
        switch (clocksource)
 80136fe:	7efb      	ldrb	r3, [r7, #27]
 8013700:	2b08      	cmp	r3, #8
 8013702:	f200 828b 	bhi.w	8013c1c <UART_SetConfig+0xca4>
 8013706:	a201      	add	r2, pc, #4	; (adr r2, 801370c <UART_SetConfig+0x794>)
 8013708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801370c:	08013731 	.word	0x08013731
 8013710:	08013c1d 	.word	0x08013c1d
 8013714:	0801389b 	.word	0x0801389b
 8013718:	08013c1d 	.word	0x08013c1d
 801371c:	08013991 	.word	0x08013991
 8013720:	08013c1d 	.word	0x08013c1d
 8013724:	08013c1d 	.word	0x08013c1d
 8013728:	08013c1d 	.word	0x08013c1d
 801372c:	08013acd 	.word	0x08013acd
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013730:	f7f9 fbf2 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 8013734:	4603      	mov	r3, r0
 8013736:	4618      	mov	r0, r3
 8013738:	f04f 0100 	mov.w	r1, #0
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013740:	2b00      	cmp	r3, #0
 8013742:	d07e      	beq.n	8013842 <UART_SetConfig+0x8ca>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013748:	2b01      	cmp	r3, #1
 801374a:	d075      	beq.n	8013838 <UART_SetConfig+0x8c0>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013750:	2b02      	cmp	r3, #2
 8013752:	d06c      	beq.n	801382e <UART_SetConfig+0x8b6>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013758:	2b03      	cmp	r3, #3
 801375a:	d063      	beq.n	8013824 <UART_SetConfig+0x8ac>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013760:	2b04      	cmp	r3, #4
 8013762:	d05a      	beq.n	801381a <UART_SetConfig+0x8a2>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013768:	2b05      	cmp	r3, #5
 801376a:	d051      	beq.n	8013810 <UART_SetConfig+0x898>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013770:	2b06      	cmp	r3, #6
 8013772:	d048      	beq.n	8013806 <UART_SetConfig+0x88e>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013778:	2b07      	cmp	r3, #7
 801377a:	d03f      	beq.n	80137fc <UART_SetConfig+0x884>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013780:	2b08      	cmp	r3, #8
 8013782:	d01f      	beq.n	80137c4 <UART_SetConfig+0x84c>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013788:	2b09      	cmp	r3, #9
 801378a:	d016      	beq.n	80137ba <UART_SetConfig+0x842>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013790:	2b0a      	cmp	r3, #10
 8013792:	d00d      	beq.n	80137b0 <UART_SetConfig+0x838>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013798:	2b0b      	cmp	r3, #11
 801379a:	d104      	bne.n	80137a6 <UART_SetConfig+0x82e>
 801379c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137a0:	f04f 0400 	mov.w	r4, #0
 80137a4:	e051      	b.n	801384a <UART_SetConfig+0x8d2>
 80137a6:	f04f 0301 	mov.w	r3, #1
 80137aa:	f04f 0400 	mov.w	r4, #0
 80137ae:	e04c      	b.n	801384a <UART_SetConfig+0x8d2>
 80137b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80137b4:	f04f 0400 	mov.w	r4, #0
 80137b8:	e047      	b.n	801384a <UART_SetConfig+0x8d2>
 80137ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80137be:	f04f 0400 	mov.w	r4, #0
 80137c2:	e042      	b.n	801384a <UART_SetConfig+0x8d2>
 80137c4:	f04f 0320 	mov.w	r3, #32
 80137c8:	f04f 0400 	mov.w	r4, #0
 80137cc:	e03d      	b.n	801384a <UART_SetConfig+0x8d2>
 80137ce:	bf00      	nop
 80137d0:	00f42400 	.word	0x00f42400
 80137d4:	0001e848 	.word	0x0001e848
 80137d8:	0003d090 	.word	0x0003d090
 80137dc:	0007a120 	.word	0x0007a120
 80137e0:	000f4240 	.word	0x000f4240
 80137e4:	00145855 	.word	0x00145855
 80137e8:	00186a00 	.word	0x00186a00
 80137ec:	001e8480 	.word	0x001e8480
 80137f0:	0028b0aa 	.word	0x0028b0aa
 80137f4:	003d0900 	.word	0x003d0900
 80137f8:	007a1200 	.word	0x007a1200
 80137fc:	f04f 0310 	mov.w	r3, #16
 8013800:	f04f 0400 	mov.w	r4, #0
 8013804:	e021      	b.n	801384a <UART_SetConfig+0x8d2>
 8013806:	f04f 030c 	mov.w	r3, #12
 801380a:	f04f 0400 	mov.w	r4, #0
 801380e:	e01c      	b.n	801384a <UART_SetConfig+0x8d2>
 8013810:	f04f 030a 	mov.w	r3, #10
 8013814:	f04f 0400 	mov.w	r4, #0
 8013818:	e017      	b.n	801384a <UART_SetConfig+0x8d2>
 801381a:	f04f 0308 	mov.w	r3, #8
 801381e:	f04f 0400 	mov.w	r4, #0
 8013822:	e012      	b.n	801384a <UART_SetConfig+0x8d2>
 8013824:	f04f 0306 	mov.w	r3, #6
 8013828:	f04f 0400 	mov.w	r4, #0
 801382c:	e00d      	b.n	801384a <UART_SetConfig+0x8d2>
 801382e:	f04f 0304 	mov.w	r3, #4
 8013832:	f04f 0400 	mov.w	r4, #0
 8013836:	e008      	b.n	801384a <UART_SetConfig+0x8d2>
 8013838:	f04f 0302 	mov.w	r3, #2
 801383c:	f04f 0400 	mov.w	r4, #0
 8013840:	e003      	b.n	801384a <UART_SetConfig+0x8d2>
 8013842:	f04f 0301 	mov.w	r3, #1
 8013846:	f04f 0400 	mov.w	r4, #0
 801384a:	461a      	mov	r2, r3
 801384c:	4623      	mov	r3, r4
 801384e:	f7ed f9eb 	bl	8000c28 <__aeabi_uldivmod>
 8013852:	4603      	mov	r3, r0
 8013854:	460c      	mov	r4, r1
 8013856:	4619      	mov	r1, r3
 8013858:	4622      	mov	r2, r4
 801385a:	f04f 0300 	mov.w	r3, #0
 801385e:	f04f 0400 	mov.w	r4, #0
 8013862:	0214      	lsls	r4, r2, #8
 8013864:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013868:	020b      	lsls	r3, r1, #8
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	6852      	ldr	r2, [r2, #4]
 801386e:	0852      	lsrs	r2, r2, #1
 8013870:	4611      	mov	r1, r2
 8013872:	f04f 0200 	mov.w	r2, #0
 8013876:	eb13 0b01 	adds.w	fp, r3, r1
 801387a:	eb44 0c02 	adc.w	ip, r4, r2
 801387e:	4658      	mov	r0, fp
 8013880:	4661      	mov	r1, ip
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	f04f 0400 	mov.w	r4, #0
 801388a:	461a      	mov	r2, r3
 801388c:	4623      	mov	r3, r4
 801388e:	f7ed f9cb 	bl	8000c28 <__aeabi_uldivmod>
 8013892:	4603      	mov	r3, r0
 8013894:	460c      	mov	r4, r1
 8013896:	617b      	str	r3, [r7, #20]
            break;
 8013898:	e1c3      	b.n	8013c22 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d05b      	beq.n	801395a <UART_SetConfig+0x9e2>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d053      	beq.n	8013952 <UART_SetConfig+0x9da>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	2b02      	cmp	r3, #2
 80138b0:	d04b      	beq.n	801394a <UART_SetConfig+0x9d2>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b6:	2b03      	cmp	r3, #3
 80138b8:	d043      	beq.n	8013942 <UART_SetConfig+0x9ca>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138be:	2b04      	cmp	r3, #4
 80138c0:	d03b      	beq.n	801393a <UART_SetConfig+0x9c2>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c6:	2b05      	cmp	r3, #5
 80138c8:	d033      	beq.n	8013932 <UART_SetConfig+0x9ba>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ce:	2b06      	cmp	r3, #6
 80138d0:	d02b      	beq.n	801392a <UART_SetConfig+0x9b2>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d6:	2b07      	cmp	r3, #7
 80138d8:	d023      	beq.n	8013922 <UART_SetConfig+0x9aa>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138de:	2b08      	cmp	r3, #8
 80138e0:	d01b      	beq.n	801391a <UART_SetConfig+0x9a2>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e6:	2b09      	cmp	r3, #9
 80138e8:	d013      	beq.n	8013912 <UART_SetConfig+0x99a>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ee:	2b0a      	cmp	r3, #10
 80138f0:	d00b      	beq.n	801390a <UART_SetConfig+0x992>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f6:	2b0b      	cmp	r3, #11
 80138f8:	d103      	bne.n	8013902 <UART_SetConfig+0x98a>
 80138fa:	4bad      	ldr	r3, [pc, #692]	; (8013bb0 <UART_SetConfig+0xc38>)
 80138fc:	f04f 0400 	mov.w	r4, #0
 8013900:	e02e      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013902:	4bac      	ldr	r3, [pc, #688]	; (8013bb4 <UART_SetConfig+0xc3c>)
 8013904:	f04f 0400 	mov.w	r4, #0
 8013908:	e02a      	b.n	8013960 <UART_SetConfig+0x9e8>
 801390a:	4bab      	ldr	r3, [pc, #684]	; (8013bb8 <UART_SetConfig+0xc40>)
 801390c:	f04f 0400 	mov.w	r4, #0
 8013910:	e026      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013912:	4baa      	ldr	r3, [pc, #680]	; (8013bbc <UART_SetConfig+0xc44>)
 8013914:	f04f 0400 	mov.w	r4, #0
 8013918:	e022      	b.n	8013960 <UART_SetConfig+0x9e8>
 801391a:	4ba9      	ldr	r3, [pc, #676]	; (8013bc0 <UART_SetConfig+0xc48>)
 801391c:	f04f 0400 	mov.w	r4, #0
 8013920:	e01e      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013922:	4ba8      	ldr	r3, [pc, #672]	; (8013bc4 <UART_SetConfig+0xc4c>)
 8013924:	f04f 0400 	mov.w	r4, #0
 8013928:	e01a      	b.n	8013960 <UART_SetConfig+0x9e8>
 801392a:	a49d      	add	r4, pc, #628	; (adr r4, 8013ba0 <UART_SetConfig+0xc28>)
 801392c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013930:	e016      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013932:	4ba5      	ldr	r3, [pc, #660]	; (8013bc8 <UART_SetConfig+0xc50>)
 8013934:	f04f 0400 	mov.w	r4, #0
 8013938:	e012      	b.n	8013960 <UART_SetConfig+0x9e8>
 801393a:	4ba4      	ldr	r3, [pc, #656]	; (8013bcc <UART_SetConfig+0xc54>)
 801393c:	f04f 0400 	mov.w	r4, #0
 8013940:	e00e      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013942:	a499      	add	r4, pc, #612	; (adr r4, 8013ba8 <UART_SetConfig+0xc30>)
 8013944:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013948:	e00a      	b.n	8013960 <UART_SetConfig+0x9e8>
 801394a:	4ba1      	ldr	r3, [pc, #644]	; (8013bd0 <UART_SetConfig+0xc58>)
 801394c:	f04f 0400 	mov.w	r4, #0
 8013950:	e006      	b.n	8013960 <UART_SetConfig+0x9e8>
 8013952:	4ba0      	ldr	r3, [pc, #640]	; (8013bd4 <UART_SetConfig+0xc5c>)
 8013954:	f04f 0400 	mov.w	r4, #0
 8013958:	e002      	b.n	8013960 <UART_SetConfig+0x9e8>
 801395a:	4b96      	ldr	r3, [pc, #600]	; (8013bb4 <UART_SetConfig+0xc3c>)
 801395c:	f04f 0400 	mov.w	r4, #0
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	6852      	ldr	r2, [r2, #4]
 8013964:	0852      	lsrs	r2, r2, #1
 8013966:	4611      	mov	r1, r2
 8013968:	f04f 0200 	mov.w	r2, #0
 801396c:	eb13 0b01 	adds.w	fp, r3, r1
 8013970:	eb44 0c02 	adc.w	ip, r4, r2
 8013974:	4658      	mov	r0, fp
 8013976:	4661      	mov	r1, ip
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	f04f 0400 	mov.w	r4, #0
 8013980:	461a      	mov	r2, r3
 8013982:	4623      	mov	r3, r4
 8013984:	f7ed f950 	bl	8000c28 <__aeabi_uldivmod>
 8013988:	4603      	mov	r3, r0
 801398a:	460c      	mov	r4, r1
 801398c:	617b      	str	r3, [r7, #20]
            break;
 801398e:	e148      	b.n	8013c22 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013990:	f7f9 fa54 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 8013994:	4603      	mov	r3, r0
 8013996:	4618      	mov	r0, r3
 8013998:	f04f 0100 	mov.w	r1, #0
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d067      	beq.n	8013a74 <UART_SetConfig+0xafc>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d05e      	beq.n	8013a6a <UART_SetConfig+0xaf2>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d055      	beq.n	8013a60 <UART_SetConfig+0xae8>
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b8:	2b03      	cmp	r3, #3
 80139ba:	d04c      	beq.n	8013a56 <UART_SetConfig+0xade>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c0:	2b04      	cmp	r3, #4
 80139c2:	d043      	beq.n	8013a4c <UART_SetConfig+0xad4>
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c8:	2b05      	cmp	r3, #5
 80139ca:	d03a      	beq.n	8013a42 <UART_SetConfig+0xaca>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d0:	2b06      	cmp	r3, #6
 80139d2:	d031      	beq.n	8013a38 <UART_SetConfig+0xac0>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	2b07      	cmp	r3, #7
 80139da:	d028      	beq.n	8013a2e <UART_SetConfig+0xab6>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e0:	2b08      	cmp	r3, #8
 80139e2:	d01f      	beq.n	8013a24 <UART_SetConfig+0xaac>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	2b09      	cmp	r3, #9
 80139ea:	d016      	beq.n	8013a1a <UART_SetConfig+0xaa2>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f0:	2b0a      	cmp	r3, #10
 80139f2:	d00d      	beq.n	8013a10 <UART_SetConfig+0xa98>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f8:	2b0b      	cmp	r3, #11
 80139fa:	d104      	bne.n	8013a06 <UART_SetConfig+0xa8e>
 80139fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013a00:	f04f 0400 	mov.w	r4, #0
 8013a04:	e03a      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a06:	f04f 0301 	mov.w	r3, #1
 8013a0a:	f04f 0400 	mov.w	r4, #0
 8013a0e:	e035      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8013a14:	f04f 0400 	mov.w	r4, #0
 8013a18:	e030      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8013a1e:	f04f 0400 	mov.w	r4, #0
 8013a22:	e02b      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a24:	f04f 0320 	mov.w	r3, #32
 8013a28:	f04f 0400 	mov.w	r4, #0
 8013a2c:	e026      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a2e:	f04f 0310 	mov.w	r3, #16
 8013a32:	f04f 0400 	mov.w	r4, #0
 8013a36:	e021      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a38:	f04f 030c 	mov.w	r3, #12
 8013a3c:	f04f 0400 	mov.w	r4, #0
 8013a40:	e01c      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a42:	f04f 030a 	mov.w	r3, #10
 8013a46:	f04f 0400 	mov.w	r4, #0
 8013a4a:	e017      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a4c:	f04f 0308 	mov.w	r3, #8
 8013a50:	f04f 0400 	mov.w	r4, #0
 8013a54:	e012      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a56:	f04f 0306 	mov.w	r3, #6
 8013a5a:	f04f 0400 	mov.w	r4, #0
 8013a5e:	e00d      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a60:	f04f 0304 	mov.w	r3, #4
 8013a64:	f04f 0400 	mov.w	r4, #0
 8013a68:	e008      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a6a:	f04f 0302 	mov.w	r3, #2
 8013a6e:	f04f 0400 	mov.w	r4, #0
 8013a72:	e003      	b.n	8013a7c <UART_SetConfig+0xb04>
 8013a74:	f04f 0301 	mov.w	r3, #1
 8013a78:	f04f 0400 	mov.w	r4, #0
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	4623      	mov	r3, r4
 8013a80:	f7ed f8d2 	bl	8000c28 <__aeabi_uldivmod>
 8013a84:	4603      	mov	r3, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	4619      	mov	r1, r3
 8013a8a:	4622      	mov	r2, r4
 8013a8c:	f04f 0300 	mov.w	r3, #0
 8013a90:	f04f 0400 	mov.w	r4, #0
 8013a94:	0214      	lsls	r4, r2, #8
 8013a96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013a9a:	020b      	lsls	r3, r1, #8
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	6852      	ldr	r2, [r2, #4]
 8013aa0:	0852      	lsrs	r2, r2, #1
 8013aa2:	4611      	mov	r1, r2
 8013aa4:	f04f 0200 	mov.w	r2, #0
 8013aa8:	eb13 0b01 	adds.w	fp, r3, r1
 8013aac:	eb44 0c02 	adc.w	ip, r4, r2
 8013ab0:	4658      	mov	r0, fp
 8013ab2:	4661      	mov	r1, ip
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	f04f 0400 	mov.w	r4, #0
 8013abc:	461a      	mov	r2, r3
 8013abe:	4623      	mov	r3, r4
 8013ac0:	f7ed f8b2 	bl	8000c28 <__aeabi_uldivmod>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	617b      	str	r3, [r7, #20]
            break;
 8013aca:	e0aa      	b.n	8013c22 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f000 8087 	beq.w	8013be4 <UART_SetConfig+0xc6c>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d05b      	beq.n	8013b96 <UART_SetConfig+0xc1e>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae2:	2b02      	cmp	r3, #2
 8013ae4:	d052      	beq.n	8013b8c <UART_SetConfig+0xc14>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aea:	2b03      	cmp	r3, #3
 8013aec:	d04a      	beq.n	8013b84 <UART_SetConfig+0xc0c>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af2:	2b04      	cmp	r3, #4
 8013af4:	d041      	beq.n	8013b7a <UART_SetConfig+0xc02>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afa:	2b05      	cmp	r3, #5
 8013afc:	d039      	beq.n	8013b72 <UART_SetConfig+0xbfa>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b02:	2b06      	cmp	r3, #6
 8013b04:	d031      	beq.n	8013b6a <UART_SetConfig+0xbf2>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0a:	2b07      	cmp	r3, #7
 8013b0c:	d028      	beq.n	8013b60 <UART_SetConfig+0xbe8>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b12:	2b08      	cmp	r3, #8
 8013b14:	d01f      	beq.n	8013b56 <UART_SetConfig+0xbde>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b1a:	2b09      	cmp	r3, #9
 8013b1c:	d016      	beq.n	8013b4c <UART_SetConfig+0xbd4>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b22:	2b0a      	cmp	r3, #10
 8013b24:	d00d      	beq.n	8013b42 <UART_SetConfig+0xbca>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2a:	2b0b      	cmp	r3, #11
 8013b2c:	d104      	bne.n	8013b38 <UART_SetConfig+0xbc0>
 8013b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b32:	f04f 0400 	mov.w	r4, #0
 8013b36:	e059      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013b3c:	f04f 0400 	mov.w	r4, #0
 8013b40:	e054      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013b46:	f04f 0400 	mov.w	r4, #0
 8013b4a:	e04f      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b50:	f04f 0400 	mov.w	r4, #0
 8013b54:	e04a      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013b5a:	f04f 0400 	mov.w	r4, #0
 8013b5e:	e045      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013b64:	f04f 0400 	mov.w	r4, #0
 8013b68:	e040      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b6a:	4b1b      	ldr	r3, [pc, #108]	; (8013bd8 <UART_SetConfig+0xc60>)
 8013b6c:	f04f 0400 	mov.w	r4, #0
 8013b70:	e03c      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b72:	4b1a      	ldr	r3, [pc, #104]	; (8013bdc <UART_SetConfig+0xc64>)
 8013b74:	f04f 0400 	mov.w	r4, #0
 8013b78:	e038      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013b7e:	f04f 0400 	mov.w	r4, #0
 8013b82:	e033      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b84:	4b16      	ldr	r3, [pc, #88]	; (8013be0 <UART_SetConfig+0xc68>)
 8013b86:	f04f 0400 	mov.w	r4, #0
 8013b8a:	e02f      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013b90:	f04f 0400 	mov.w	r4, #0
 8013b94:	e02a      	b.n	8013bec <UART_SetConfig+0xc74>
 8013b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013b9a:	f04f 0400 	mov.w	r4, #0
 8013b9e:	e025      	b.n	8013bec <UART_SetConfig+0xc74>
 8013ba0:	14585500 	.word	0x14585500
 8013ba4:	00000000 	.word	0x00000000
 8013ba8:	28b0aa00 	.word	0x28b0aa00
 8013bac:	00000000 	.word	0x00000000
 8013bb0:	00f42400 	.word	0x00f42400
 8013bb4:	f4240000 	.word	0xf4240000
 8013bb8:	01e84800 	.word	0x01e84800
 8013bbc:	03d09000 	.word	0x03d09000
 8013bc0:	07a12000 	.word	0x07a12000
 8013bc4:	0f424000 	.word	0x0f424000
 8013bc8:	186a0000 	.word	0x186a0000
 8013bcc:	1e848000 	.word	0x1e848000
 8013bd0:	3d090000 	.word	0x3d090000
 8013bd4:	7a120000 	.word	0x7a120000
 8013bd8:	000aaa00 	.word	0x000aaa00
 8013bdc:	000ccc00 	.word	0x000ccc00
 8013be0:	00155500 	.word	0x00155500
 8013be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013be8:	f04f 0400 	mov.w	r4, #0
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	6852      	ldr	r2, [r2, #4]
 8013bf0:	0852      	lsrs	r2, r2, #1
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	f04f 0200 	mov.w	r2, #0
 8013bf8:	eb13 0b01 	adds.w	fp, r3, r1
 8013bfc:	eb44 0c02 	adc.w	ip, r4, r2
 8013c00:	4658      	mov	r0, fp
 8013c02:	4661      	mov	r1, ip
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	f04f 0400 	mov.w	r4, #0
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	4623      	mov	r3, r4
 8013c10:	f7ed f80a 	bl	8000c28 <__aeabi_uldivmod>
 8013c14:	4603      	mov	r3, r0
 8013c16:	460c      	mov	r4, r1
 8013c18:	617b      	str	r3, [r7, #20]
            break;
 8013c1a:	e002      	b.n	8013c22 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8013c20:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c28:	d309      	bcc.n	8013c3e <UART_SetConfig+0xcc6>
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c30:	d205      	bcs.n	8013c3e <UART_SetConfig+0xcc6>
        {
          huart->Instance->BRR = usartdiv;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	697a      	ldr	r2, [r7, #20]
 8013c38:	60da      	str	r2, [r3, #12]
 8013c3a:	f000 bc0f 	b.w	801445c <UART_SetConfig+0x14e4>
        }
        else
        {
          ret = HAL_ERROR;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	74fb      	strb	r3, [r7, #19]
 8013c42:	f000 bc0b 	b.w	801445c <UART_SetConfig+0x14e4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	69db      	ldr	r3, [r3, #28]
 8013c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c4e:	f040 81ff 	bne.w	8014050 <UART_SetConfig+0x10d8>
  {
    switch (clocksource)
 8013c52:	7efb      	ldrb	r3, [r7, #27]
 8013c54:	2b08      	cmp	r3, #8
 8013c56:	f200 81db 	bhi.w	8014010 <UART_SetConfig+0x1098>
 8013c5a:	a201      	add	r2, pc, #4	; (adr r2, 8013c60 <UART_SetConfig+0xce8>)
 8013c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c60:	08013c85 	.word	0x08013c85
 8013c64:	08013d3b 	.word	0x08013d3b
 8013c68:	08013df1 	.word	0x08013df1
 8013c6c:	08014011 	.word	0x08014011
 8013c70:	08013e99 	.word	0x08013e99
 8013c74:	08014011 	.word	0x08014011
 8013c78:	08014011 	.word	0x08014011
 8013c7c:	08014011 	.word	0x08014011
 8013c80:	08013f4f 	.word	0x08013f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013c84:	f7f9 f948 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d044      	beq.n	8013d1c <UART_SetConfig+0xda4>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d03e      	beq.n	8013d18 <UART_SetConfig+0xda0>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c9e:	2b02      	cmp	r3, #2
 8013ca0:	d038      	beq.n	8013d14 <UART_SetConfig+0xd9c>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca6:	2b03      	cmp	r3, #3
 8013ca8:	d032      	beq.n	8013d10 <UART_SetConfig+0xd98>
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cae:	2b04      	cmp	r3, #4
 8013cb0:	d02c      	beq.n	8013d0c <UART_SetConfig+0xd94>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb6:	2b05      	cmp	r3, #5
 8013cb8:	d026      	beq.n	8013d08 <UART_SetConfig+0xd90>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbe:	2b06      	cmp	r3, #6
 8013cc0:	d020      	beq.n	8013d04 <UART_SetConfig+0xd8c>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc6:	2b07      	cmp	r3, #7
 8013cc8:	d01a      	beq.n	8013d00 <UART_SetConfig+0xd88>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cce:	2b08      	cmp	r3, #8
 8013cd0:	d014      	beq.n	8013cfc <UART_SetConfig+0xd84>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	2b09      	cmp	r3, #9
 8013cd8:	d00e      	beq.n	8013cf8 <UART_SetConfig+0xd80>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cde:	2b0a      	cmp	r3, #10
 8013ce0:	d008      	beq.n	8013cf4 <UART_SetConfig+0xd7c>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ce6:	2b0b      	cmp	r3, #11
 8013ce8:	d102      	bne.n	8013cf0 <UART_SetConfig+0xd78>
 8013cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013cee:	e016      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e014      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013cf4:	2380      	movs	r3, #128	; 0x80
 8013cf6:	e012      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013cf8:	2340      	movs	r3, #64	; 0x40
 8013cfa:	e010      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013cfc:	2320      	movs	r3, #32
 8013cfe:	e00e      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d00:	2310      	movs	r3, #16
 8013d02:	e00c      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d04:	230c      	movs	r3, #12
 8013d06:	e00a      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d08:	230a      	movs	r3, #10
 8013d0a:	e008      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d0c:	2308      	movs	r3, #8
 8013d0e:	e006      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d10:	2306      	movs	r3, #6
 8013d12:	e004      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d14:	2304      	movs	r3, #4
 8013d16:	e002      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d18:	2302      	movs	r3, #2
 8013d1a:	e000      	b.n	8013d1e <UART_SetConfig+0xda6>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d22:	005a      	lsls	r2, r3, #1
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	085b      	lsrs	r3, r3, #1
 8013d2a:	441a      	add	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	617b      	str	r3, [r7, #20]
        break;
 8013d38:	e16d      	b.n	8014016 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d3a:	f7f9 f903 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d044      	beq.n	8013dd2 <UART_SetConfig+0xe5a>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d03e      	beq.n	8013dce <UART_SetConfig+0xe56>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d54:	2b02      	cmp	r3, #2
 8013d56:	d038      	beq.n	8013dca <UART_SetConfig+0xe52>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d032      	beq.n	8013dc6 <UART_SetConfig+0xe4e>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d64:	2b04      	cmp	r3, #4
 8013d66:	d02c      	beq.n	8013dc2 <UART_SetConfig+0xe4a>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d6c:	2b05      	cmp	r3, #5
 8013d6e:	d026      	beq.n	8013dbe <UART_SetConfig+0xe46>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d74:	2b06      	cmp	r3, #6
 8013d76:	d020      	beq.n	8013dba <UART_SetConfig+0xe42>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7c:	2b07      	cmp	r3, #7
 8013d7e:	d01a      	beq.n	8013db6 <UART_SetConfig+0xe3e>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d84:	2b08      	cmp	r3, #8
 8013d86:	d014      	beq.n	8013db2 <UART_SetConfig+0xe3a>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8c:	2b09      	cmp	r3, #9
 8013d8e:	d00e      	beq.n	8013dae <UART_SetConfig+0xe36>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d94:	2b0a      	cmp	r3, #10
 8013d96:	d008      	beq.n	8013daa <UART_SetConfig+0xe32>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9c:	2b0b      	cmp	r3, #11
 8013d9e:	d102      	bne.n	8013da6 <UART_SetConfig+0xe2e>
 8013da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013da4:	e016      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013da6:	2301      	movs	r3, #1
 8013da8:	e014      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013daa:	2380      	movs	r3, #128	; 0x80
 8013dac:	e012      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dae:	2340      	movs	r3, #64	; 0x40
 8013db0:	e010      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013db2:	2320      	movs	r3, #32
 8013db4:	e00e      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013db6:	2310      	movs	r3, #16
 8013db8:	e00c      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dba:	230c      	movs	r3, #12
 8013dbc:	e00a      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dbe:	230a      	movs	r3, #10
 8013dc0:	e008      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dc2:	2308      	movs	r3, #8
 8013dc4:	e006      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dc6:	2306      	movs	r3, #6
 8013dc8:	e004      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dca:	2304      	movs	r3, #4
 8013dcc:	e002      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dce:	2302      	movs	r3, #2
 8013dd0:	e000      	b.n	8013dd4 <UART_SetConfig+0xe5c>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dd8:	005a      	lsls	r2, r3, #1
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	085b      	lsrs	r3, r3, #1
 8013de0:	441a      	add	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	617b      	str	r3, [r7, #20]
        break;
 8013dee:	e112      	b.n	8014016 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d043      	beq.n	8013e80 <UART_SetConfig+0xf08>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d03d      	beq.n	8013e7c <UART_SetConfig+0xf04>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	d037      	beq.n	8013e78 <UART_SetConfig+0xf00>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0c:	2b03      	cmp	r3, #3
 8013e0e:	d031      	beq.n	8013e74 <UART_SetConfig+0xefc>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e14:	2b04      	cmp	r3, #4
 8013e16:	d02b      	beq.n	8013e70 <UART_SetConfig+0xef8>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e1c:	2b05      	cmp	r3, #5
 8013e1e:	d025      	beq.n	8013e6c <UART_SetConfig+0xef4>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e24:	2b06      	cmp	r3, #6
 8013e26:	d01f      	beq.n	8013e68 <UART_SetConfig+0xef0>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2c:	2b07      	cmp	r3, #7
 8013e2e:	d019      	beq.n	8013e64 <UART_SetConfig+0xeec>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e34:	2b08      	cmp	r3, #8
 8013e36:	d013      	beq.n	8013e60 <UART_SetConfig+0xee8>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3c:	2b09      	cmp	r3, #9
 8013e3e:	d00d      	beq.n	8013e5c <UART_SetConfig+0xee4>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e44:	2b0a      	cmp	r3, #10
 8013e46:	d007      	beq.n	8013e58 <UART_SetConfig+0xee0>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e4c:	2b0b      	cmp	r3, #11
 8013e4e:	d101      	bne.n	8013e54 <UART_SetConfig+0xedc>
 8013e50:	4b8c      	ldr	r3, [pc, #560]	; (8014084 <UART_SetConfig+0x110c>)
 8013e52:	e016      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e54:	4b8c      	ldr	r3, [pc, #560]	; (8014088 <UART_SetConfig+0x1110>)
 8013e56:	e014      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e58:	4b8c      	ldr	r3, [pc, #560]	; (801408c <UART_SetConfig+0x1114>)
 8013e5a:	e012      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e5c:	4b8c      	ldr	r3, [pc, #560]	; (8014090 <UART_SetConfig+0x1118>)
 8013e5e:	e010      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e60:	4b8c      	ldr	r3, [pc, #560]	; (8014094 <UART_SetConfig+0x111c>)
 8013e62:	e00e      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e64:	4b8c      	ldr	r3, [pc, #560]	; (8014098 <UART_SetConfig+0x1120>)
 8013e66:	e00c      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e68:	4b8c      	ldr	r3, [pc, #560]	; (801409c <UART_SetConfig+0x1124>)
 8013e6a:	e00a      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e6c:	4b8c      	ldr	r3, [pc, #560]	; (80140a0 <UART_SetConfig+0x1128>)
 8013e6e:	e008      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e70:	4b8c      	ldr	r3, [pc, #560]	; (80140a4 <UART_SetConfig+0x112c>)
 8013e72:	e006      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e74:	4b8c      	ldr	r3, [pc, #560]	; (80140a8 <UART_SetConfig+0x1130>)
 8013e76:	e004      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e78:	4b8c      	ldr	r3, [pc, #560]	; (80140ac <UART_SetConfig+0x1134>)
 8013e7a:	e002      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e7c:	4b8c      	ldr	r3, [pc, #560]	; (80140b0 <UART_SetConfig+0x1138>)
 8013e7e:	e000      	b.n	8013e82 <UART_SetConfig+0xf0a>
 8013e80:	4b81      	ldr	r3, [pc, #516]	; (8014088 <UART_SetConfig+0x1110>)
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	6852      	ldr	r2, [r2, #4]
 8013e86:	0852      	lsrs	r2, r2, #1
 8013e88:	441a      	add	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e92:	b29b      	uxth	r3, r3
 8013e94:	617b      	str	r3, [r7, #20]
        break;
 8013e96:	e0be      	b.n	8014016 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e98:	f7f8 ffd0 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d044      	beq.n	8013f30 <UART_SetConfig+0xfb8>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d03e      	beq.n	8013f2c <UART_SetConfig+0xfb4>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb2:	2b02      	cmp	r3, #2
 8013eb4:	d038      	beq.n	8013f28 <UART_SetConfig+0xfb0>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	d032      	beq.n	8013f24 <UART_SetConfig+0xfac>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec2:	2b04      	cmp	r3, #4
 8013ec4:	d02c      	beq.n	8013f20 <UART_SetConfig+0xfa8>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eca:	2b05      	cmp	r3, #5
 8013ecc:	d026      	beq.n	8013f1c <UART_SetConfig+0xfa4>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed2:	2b06      	cmp	r3, #6
 8013ed4:	d020      	beq.n	8013f18 <UART_SetConfig+0xfa0>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eda:	2b07      	cmp	r3, #7
 8013edc:	d01a      	beq.n	8013f14 <UART_SetConfig+0xf9c>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee2:	2b08      	cmp	r3, #8
 8013ee4:	d014      	beq.n	8013f10 <UART_SetConfig+0xf98>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eea:	2b09      	cmp	r3, #9
 8013eec:	d00e      	beq.n	8013f0c <UART_SetConfig+0xf94>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef2:	2b0a      	cmp	r3, #10
 8013ef4:	d008      	beq.n	8013f08 <UART_SetConfig+0xf90>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013efa:	2b0b      	cmp	r3, #11
 8013efc:	d102      	bne.n	8013f04 <UART_SetConfig+0xf8c>
 8013efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f02:	e016      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f04:	2301      	movs	r3, #1
 8013f06:	e014      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f08:	2380      	movs	r3, #128	; 0x80
 8013f0a:	e012      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f0c:	2340      	movs	r3, #64	; 0x40
 8013f0e:	e010      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f10:	2320      	movs	r3, #32
 8013f12:	e00e      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f14:	2310      	movs	r3, #16
 8013f16:	e00c      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f18:	230c      	movs	r3, #12
 8013f1a:	e00a      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f1c:	230a      	movs	r3, #10
 8013f1e:	e008      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f20:	2308      	movs	r3, #8
 8013f22:	e006      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f24:	2306      	movs	r3, #6
 8013f26:	e004      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f28:	2304      	movs	r3, #4
 8013f2a:	e002      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f2c:	2302      	movs	r3, #2
 8013f2e:	e000      	b.n	8013f32 <UART_SetConfig+0xfba>
 8013f30:	2301      	movs	r3, #1
 8013f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f36:	005a      	lsls	r2, r3, #1
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	085b      	lsrs	r3, r3, #1
 8013f3e:	441a      	add	r2, r3
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	617b      	str	r3, [r7, #20]
        break;
 8013f4c:	e063      	b.n	8014016 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d04f      	beq.n	8013ff6 <UART_SetConfig+0x107e>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d048      	beq.n	8013ff0 <UART_SetConfig+0x1078>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f62:	2b02      	cmp	r3, #2
 8013f64:	d041      	beq.n	8013fea <UART_SetConfig+0x1072>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f6a:	2b03      	cmp	r3, #3
 8013f6c:	d03a      	beq.n	8013fe4 <UART_SetConfig+0x106c>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f72:	2b04      	cmp	r3, #4
 8013f74:	d033      	beq.n	8013fde <UART_SetConfig+0x1066>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d02c      	beq.n	8013fd8 <UART_SetConfig+0x1060>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f82:	2b06      	cmp	r3, #6
 8013f84:	d025      	beq.n	8013fd2 <UART_SetConfig+0x105a>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8a:	2b07      	cmp	r3, #7
 8013f8c:	d01e      	beq.n	8013fcc <UART_SetConfig+0x1054>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f92:	2b08      	cmp	r3, #8
 8013f94:	d017      	beq.n	8013fc6 <UART_SetConfig+0x104e>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9a:	2b09      	cmp	r3, #9
 8013f9c:	d010      	beq.n	8013fc0 <UART_SetConfig+0x1048>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa2:	2b0a      	cmp	r3, #10
 8013fa4:	d009      	beq.n	8013fba <UART_SetConfig+0x1042>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013faa:	2b0b      	cmp	r3, #11
 8013fac:	d102      	bne.n	8013fb4 <UART_SetConfig+0x103c>
 8013fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fb2:	e022      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013fb8:	e01f      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fbe:	e01c      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fc4:	e019      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fca:	e016      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013fd0:	e013      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fd2:	f241 5354 	movw	r3, #5460	; 0x1554
 8013fd6:	e010      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fd8:	f641 1398 	movw	r3, #6552	; 0x1998
 8013fdc:	e00d      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013fe2:	e00a      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fe4:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8013fe8:	e007      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013fee:	e004      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ff4:	e001      	b.n	8013ffa <UART_SetConfig+0x1082>
 8013ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	6852      	ldr	r2, [r2, #4]
 8013ffe:	0852      	lsrs	r2, r2, #1
 8014000:	441a      	add	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	fbb2 f3f3 	udiv	r3, r2, r3
 801400a:	b29b      	uxth	r3, r3
 801400c:	617b      	str	r3, [r7, #20]
        break;
 801400e:	e002      	b.n	8014016 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8014010:	2301      	movs	r3, #1
 8014012:	74fb      	strb	r3, [r7, #19]
        break;
 8014014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	2b0f      	cmp	r3, #15
 801401a:	d916      	bls.n	801404a <UART_SetConfig+0x10d2>
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014022:	d212      	bcs.n	801404a <UART_SetConfig+0x10d2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	b29b      	uxth	r3, r3
 8014028:	f023 030f 	bic.w	r3, r3, #15
 801402c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	085b      	lsrs	r3, r3, #1
 8014032:	b29b      	uxth	r3, r3
 8014034:	f003 0307 	and.w	r3, r3, #7
 8014038:	b29a      	uxth	r2, r3
 801403a:	897b      	ldrh	r3, [r7, #10]
 801403c:	4313      	orrs	r3, r2
 801403e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	897a      	ldrh	r2, [r7, #10]
 8014046:	60da      	str	r2, [r3, #12]
 8014048:	e208      	b.n	801445c <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 801404a:	2301      	movs	r3, #1
 801404c:	74fb      	strb	r3, [r7, #19]
 801404e:	e205      	b.n	801445c <UART_SetConfig+0x14e4>
    }
  }
  else
  {
    switch (clocksource)
 8014050:	7efb      	ldrb	r3, [r7, #27]
 8014052:	2b08      	cmp	r3, #8
 8014054:	f200 81f1 	bhi.w	801443a <UART_SetConfig+0x14c2>
 8014058:	a201      	add	r2, pc, #4	; (adr r2, 8014060 <UART_SetConfig+0x10e8>)
 801405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801405e:	bf00      	nop
 8014060:	080140b5 	.word	0x080140b5
 8014064:	08014169 	.word	0x08014169
 8014068:	0801421d 	.word	0x0801421d
 801406c:	0801443b 	.word	0x0801443b
 8014070:	080142c7 	.word	0x080142c7
 8014074:	0801443b 	.word	0x0801443b
 8014078:	0801443b 	.word	0x0801443b
 801407c:	0801443b 	.word	0x0801443b
 8014080:	0801437b 	.word	0x0801437b
 8014084:	0001e848 	.word	0x0001e848
 8014088:	01e84800 	.word	0x01e84800
 801408c:	0003d090 	.word	0x0003d090
 8014090:	0007a120 	.word	0x0007a120
 8014094:	000f4240 	.word	0x000f4240
 8014098:	001e8480 	.word	0x001e8480
 801409c:	0028b0aa 	.word	0x0028b0aa
 80140a0:	0030d400 	.word	0x0030d400
 80140a4:	003d0900 	.word	0x003d0900
 80140a8:	00516154 	.word	0x00516154
 80140ac:	007a1200 	.word	0x007a1200
 80140b0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80140b4:	f7f8 ff30 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 80140b8:	4602      	mov	r2, r0
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d044      	beq.n	801414c <UART_SetConfig+0x11d4>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d03e      	beq.n	8014148 <UART_SetConfig+0x11d0>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d038      	beq.n	8014144 <UART_SetConfig+0x11cc>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d6:	2b03      	cmp	r3, #3
 80140d8:	d032      	beq.n	8014140 <UART_SetConfig+0x11c8>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140de:	2b04      	cmp	r3, #4
 80140e0:	d02c      	beq.n	801413c <UART_SetConfig+0x11c4>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140e6:	2b05      	cmp	r3, #5
 80140e8:	d026      	beq.n	8014138 <UART_SetConfig+0x11c0>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ee:	2b06      	cmp	r3, #6
 80140f0:	d020      	beq.n	8014134 <UART_SetConfig+0x11bc>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f6:	2b07      	cmp	r3, #7
 80140f8:	d01a      	beq.n	8014130 <UART_SetConfig+0x11b8>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fe:	2b08      	cmp	r3, #8
 8014100:	d014      	beq.n	801412c <UART_SetConfig+0x11b4>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014106:	2b09      	cmp	r3, #9
 8014108:	d00e      	beq.n	8014128 <UART_SetConfig+0x11b0>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410e:	2b0a      	cmp	r3, #10
 8014110:	d008      	beq.n	8014124 <UART_SetConfig+0x11ac>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014116:	2b0b      	cmp	r3, #11
 8014118:	d102      	bne.n	8014120 <UART_SetConfig+0x11a8>
 801411a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801411e:	e016      	b.n	801414e <UART_SetConfig+0x11d6>
 8014120:	2301      	movs	r3, #1
 8014122:	e014      	b.n	801414e <UART_SetConfig+0x11d6>
 8014124:	2380      	movs	r3, #128	; 0x80
 8014126:	e012      	b.n	801414e <UART_SetConfig+0x11d6>
 8014128:	2340      	movs	r3, #64	; 0x40
 801412a:	e010      	b.n	801414e <UART_SetConfig+0x11d6>
 801412c:	2320      	movs	r3, #32
 801412e:	e00e      	b.n	801414e <UART_SetConfig+0x11d6>
 8014130:	2310      	movs	r3, #16
 8014132:	e00c      	b.n	801414e <UART_SetConfig+0x11d6>
 8014134:	230c      	movs	r3, #12
 8014136:	e00a      	b.n	801414e <UART_SetConfig+0x11d6>
 8014138:	230a      	movs	r3, #10
 801413a:	e008      	b.n	801414e <UART_SetConfig+0x11d6>
 801413c:	2308      	movs	r3, #8
 801413e:	e006      	b.n	801414e <UART_SetConfig+0x11d6>
 8014140:	2306      	movs	r3, #6
 8014142:	e004      	b.n	801414e <UART_SetConfig+0x11d6>
 8014144:	2304      	movs	r3, #4
 8014146:	e002      	b.n	801414e <UART_SetConfig+0x11d6>
 8014148:	2302      	movs	r3, #2
 801414a:	e000      	b.n	801414e <UART_SetConfig+0x11d6>
 801414c:	2301      	movs	r3, #1
 801414e:	fbb2 f2f3 	udiv	r2, r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	085b      	lsrs	r3, r3, #1
 8014158:	441a      	add	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014162:	b29b      	uxth	r3, r3
 8014164:	617b      	str	r3, [r7, #20]
        break;
 8014166:	e16b      	b.n	8014440 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014168:	f7f8 feec 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 801416c:	4602      	mov	r2, r0
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014172:	2b00      	cmp	r3, #0
 8014174:	d044      	beq.n	8014200 <UART_SetConfig+0x1288>
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417a:	2b01      	cmp	r3, #1
 801417c:	d03e      	beq.n	80141fc <UART_SetConfig+0x1284>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014182:	2b02      	cmp	r3, #2
 8014184:	d038      	beq.n	80141f8 <UART_SetConfig+0x1280>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801418a:	2b03      	cmp	r3, #3
 801418c:	d032      	beq.n	80141f4 <UART_SetConfig+0x127c>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014192:	2b04      	cmp	r3, #4
 8014194:	d02c      	beq.n	80141f0 <UART_SetConfig+0x1278>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419a:	2b05      	cmp	r3, #5
 801419c:	d026      	beq.n	80141ec <UART_SetConfig+0x1274>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a2:	2b06      	cmp	r3, #6
 80141a4:	d020      	beq.n	80141e8 <UART_SetConfig+0x1270>
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141aa:	2b07      	cmp	r3, #7
 80141ac:	d01a      	beq.n	80141e4 <UART_SetConfig+0x126c>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b2:	2b08      	cmp	r3, #8
 80141b4:	d014      	beq.n	80141e0 <UART_SetConfig+0x1268>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ba:	2b09      	cmp	r3, #9
 80141bc:	d00e      	beq.n	80141dc <UART_SetConfig+0x1264>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c2:	2b0a      	cmp	r3, #10
 80141c4:	d008      	beq.n	80141d8 <UART_SetConfig+0x1260>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ca:	2b0b      	cmp	r3, #11
 80141cc:	d102      	bne.n	80141d4 <UART_SetConfig+0x125c>
 80141ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141d2:	e016      	b.n	8014202 <UART_SetConfig+0x128a>
 80141d4:	2301      	movs	r3, #1
 80141d6:	e014      	b.n	8014202 <UART_SetConfig+0x128a>
 80141d8:	2380      	movs	r3, #128	; 0x80
 80141da:	e012      	b.n	8014202 <UART_SetConfig+0x128a>
 80141dc:	2340      	movs	r3, #64	; 0x40
 80141de:	e010      	b.n	8014202 <UART_SetConfig+0x128a>
 80141e0:	2320      	movs	r3, #32
 80141e2:	e00e      	b.n	8014202 <UART_SetConfig+0x128a>
 80141e4:	2310      	movs	r3, #16
 80141e6:	e00c      	b.n	8014202 <UART_SetConfig+0x128a>
 80141e8:	230c      	movs	r3, #12
 80141ea:	e00a      	b.n	8014202 <UART_SetConfig+0x128a>
 80141ec:	230a      	movs	r3, #10
 80141ee:	e008      	b.n	8014202 <UART_SetConfig+0x128a>
 80141f0:	2308      	movs	r3, #8
 80141f2:	e006      	b.n	8014202 <UART_SetConfig+0x128a>
 80141f4:	2306      	movs	r3, #6
 80141f6:	e004      	b.n	8014202 <UART_SetConfig+0x128a>
 80141f8:	2304      	movs	r3, #4
 80141fa:	e002      	b.n	8014202 <UART_SetConfig+0x128a>
 80141fc:	2302      	movs	r3, #2
 80141fe:	e000      	b.n	8014202 <UART_SetConfig+0x128a>
 8014200:	2301      	movs	r3, #1
 8014202:	fbb2 f2f3 	udiv	r2, r2, r3
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	085b      	lsrs	r3, r3, #1
 801420c:	441a      	add	r2, r3
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	fbb2 f3f3 	udiv	r3, r2, r3
 8014216:	b29b      	uxth	r3, r3
 8014218:	617b      	str	r3, [r7, #20]
        break;
 801421a:	e111      	b.n	8014440 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014220:	2b00      	cmp	r3, #0
 8014222:	d044      	beq.n	80142ae <UART_SetConfig+0x1336>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014228:	2b01      	cmp	r3, #1
 801422a:	d03e      	beq.n	80142aa <UART_SetConfig+0x1332>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014230:	2b02      	cmp	r3, #2
 8014232:	d038      	beq.n	80142a6 <UART_SetConfig+0x132e>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014238:	2b03      	cmp	r3, #3
 801423a:	d032      	beq.n	80142a2 <UART_SetConfig+0x132a>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014240:	2b04      	cmp	r3, #4
 8014242:	d02c      	beq.n	801429e <UART_SetConfig+0x1326>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014248:	2b05      	cmp	r3, #5
 801424a:	d026      	beq.n	801429a <UART_SetConfig+0x1322>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014250:	2b06      	cmp	r3, #6
 8014252:	d020      	beq.n	8014296 <UART_SetConfig+0x131e>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014258:	2b07      	cmp	r3, #7
 801425a:	d01a      	beq.n	8014292 <UART_SetConfig+0x131a>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014260:	2b08      	cmp	r3, #8
 8014262:	d014      	beq.n	801428e <UART_SetConfig+0x1316>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	2b09      	cmp	r3, #9
 801426a:	d00e      	beq.n	801428a <UART_SetConfig+0x1312>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014270:	2b0a      	cmp	r3, #10
 8014272:	d008      	beq.n	8014286 <UART_SetConfig+0x130e>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014278:	2b0b      	cmp	r3, #11
 801427a:	d102      	bne.n	8014282 <UART_SetConfig+0x130a>
 801427c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8014280:	e016      	b.n	80142b0 <UART_SetConfig+0x1338>
 8014282:	4b80      	ldr	r3, [pc, #512]	; (8014484 <UART_SetConfig+0x150c>)
 8014284:	e014      	b.n	80142b0 <UART_SetConfig+0x1338>
 8014286:	4b80      	ldr	r3, [pc, #512]	; (8014488 <UART_SetConfig+0x1510>)
 8014288:	e012      	b.n	80142b0 <UART_SetConfig+0x1338>
 801428a:	4b80      	ldr	r3, [pc, #512]	; (801448c <UART_SetConfig+0x1514>)
 801428c:	e010      	b.n	80142b0 <UART_SetConfig+0x1338>
 801428e:	4b80      	ldr	r3, [pc, #512]	; (8014490 <UART_SetConfig+0x1518>)
 8014290:	e00e      	b.n	80142b0 <UART_SetConfig+0x1338>
 8014292:	4b80      	ldr	r3, [pc, #512]	; (8014494 <UART_SetConfig+0x151c>)
 8014294:	e00c      	b.n	80142b0 <UART_SetConfig+0x1338>
 8014296:	4b80      	ldr	r3, [pc, #512]	; (8014498 <UART_SetConfig+0x1520>)
 8014298:	e00a      	b.n	80142b0 <UART_SetConfig+0x1338>
 801429a:	4b80      	ldr	r3, [pc, #512]	; (801449c <UART_SetConfig+0x1524>)
 801429c:	e008      	b.n	80142b0 <UART_SetConfig+0x1338>
 801429e:	4b80      	ldr	r3, [pc, #512]	; (80144a0 <UART_SetConfig+0x1528>)
 80142a0:	e006      	b.n	80142b0 <UART_SetConfig+0x1338>
 80142a2:	4b80      	ldr	r3, [pc, #512]	; (80144a4 <UART_SetConfig+0x152c>)
 80142a4:	e004      	b.n	80142b0 <UART_SetConfig+0x1338>
 80142a6:	4b80      	ldr	r3, [pc, #512]	; (80144a8 <UART_SetConfig+0x1530>)
 80142a8:	e002      	b.n	80142b0 <UART_SetConfig+0x1338>
 80142aa:	4b80      	ldr	r3, [pc, #512]	; (80144ac <UART_SetConfig+0x1534>)
 80142ac:	e000      	b.n	80142b0 <UART_SetConfig+0x1338>
 80142ae:	4b75      	ldr	r3, [pc, #468]	; (8014484 <UART_SetConfig+0x150c>)
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	6852      	ldr	r2, [r2, #4]
 80142b4:	0852      	lsrs	r2, r2, #1
 80142b6:	441a      	add	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	617b      	str	r3, [r7, #20]
        break;
 80142c4:	e0bc      	b.n	8014440 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80142c6:	f7f8 fdb9 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 80142ca:	4602      	mov	r2, r0
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d044      	beq.n	801435e <UART_SetConfig+0x13e6>
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d03e      	beq.n	801435a <UART_SetConfig+0x13e2>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e0:	2b02      	cmp	r3, #2
 80142e2:	d038      	beq.n	8014356 <UART_SetConfig+0x13de>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e8:	2b03      	cmp	r3, #3
 80142ea:	d032      	beq.n	8014352 <UART_SetConfig+0x13da>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f0:	2b04      	cmp	r3, #4
 80142f2:	d02c      	beq.n	801434e <UART_SetConfig+0x13d6>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f8:	2b05      	cmp	r3, #5
 80142fa:	d026      	beq.n	801434a <UART_SetConfig+0x13d2>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014300:	2b06      	cmp	r3, #6
 8014302:	d020      	beq.n	8014346 <UART_SetConfig+0x13ce>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014308:	2b07      	cmp	r3, #7
 801430a:	d01a      	beq.n	8014342 <UART_SetConfig+0x13ca>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014310:	2b08      	cmp	r3, #8
 8014312:	d014      	beq.n	801433e <UART_SetConfig+0x13c6>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014318:	2b09      	cmp	r3, #9
 801431a:	d00e      	beq.n	801433a <UART_SetConfig+0x13c2>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014320:	2b0a      	cmp	r3, #10
 8014322:	d008      	beq.n	8014336 <UART_SetConfig+0x13be>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014328:	2b0b      	cmp	r3, #11
 801432a:	d102      	bne.n	8014332 <UART_SetConfig+0x13ba>
 801432c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014330:	e016      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014332:	2301      	movs	r3, #1
 8014334:	e014      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014336:	2380      	movs	r3, #128	; 0x80
 8014338:	e012      	b.n	8014360 <UART_SetConfig+0x13e8>
 801433a:	2340      	movs	r3, #64	; 0x40
 801433c:	e010      	b.n	8014360 <UART_SetConfig+0x13e8>
 801433e:	2320      	movs	r3, #32
 8014340:	e00e      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014342:	2310      	movs	r3, #16
 8014344:	e00c      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014346:	230c      	movs	r3, #12
 8014348:	e00a      	b.n	8014360 <UART_SetConfig+0x13e8>
 801434a:	230a      	movs	r3, #10
 801434c:	e008      	b.n	8014360 <UART_SetConfig+0x13e8>
 801434e:	2308      	movs	r3, #8
 8014350:	e006      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014352:	2306      	movs	r3, #6
 8014354:	e004      	b.n	8014360 <UART_SetConfig+0x13e8>
 8014356:	2304      	movs	r3, #4
 8014358:	e002      	b.n	8014360 <UART_SetConfig+0x13e8>
 801435a:	2302      	movs	r3, #2
 801435c:	e000      	b.n	8014360 <UART_SetConfig+0x13e8>
 801435e:	2301      	movs	r3, #1
 8014360:	fbb2 f2f3 	udiv	r2, r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	085b      	lsrs	r3, r3, #1
 801436a:	441a      	add	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	fbb2 f3f3 	udiv	r3, r2, r3
 8014374:	b29b      	uxth	r3, r3
 8014376:	617b      	str	r3, [r7, #20]
        break;
 8014378:	e062      	b.n	8014440 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437e:	2b00      	cmp	r3, #0
 8014380:	d04e      	beq.n	8014420 <UART_SetConfig+0x14a8>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014386:	2b01      	cmp	r3, #1
 8014388:	d047      	beq.n	801441a <UART_SetConfig+0x14a2>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438e:	2b02      	cmp	r3, #2
 8014390:	d040      	beq.n	8014414 <UART_SetConfig+0x149c>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014396:	2b03      	cmp	r3, #3
 8014398:	d039      	beq.n	801440e <UART_SetConfig+0x1496>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439e:	2b04      	cmp	r3, #4
 80143a0:	d032      	beq.n	8014408 <UART_SetConfig+0x1490>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a6:	2b05      	cmp	r3, #5
 80143a8:	d02b      	beq.n	8014402 <UART_SetConfig+0x148a>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ae:	2b06      	cmp	r3, #6
 80143b0:	d024      	beq.n	80143fc <UART_SetConfig+0x1484>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b6:	2b07      	cmp	r3, #7
 80143b8:	d01d      	beq.n	80143f6 <UART_SetConfig+0x147e>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143be:	2b08      	cmp	r3, #8
 80143c0:	d016      	beq.n	80143f0 <UART_SetConfig+0x1478>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c6:	2b09      	cmp	r3, #9
 80143c8:	d00f      	beq.n	80143ea <UART_SetConfig+0x1472>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ce:	2b0a      	cmp	r3, #10
 80143d0:	d008      	beq.n	80143e4 <UART_SetConfig+0x146c>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d6:	2b0b      	cmp	r3, #11
 80143d8:	d101      	bne.n	80143de <UART_SetConfig+0x1466>
 80143da:	2380      	movs	r3, #128	; 0x80
 80143dc:	e022      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143e2:	e01f      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80143e8:	e01c      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143ee:	e019      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143f4:	e016      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80143fa:	e013      	b.n	8014424 <UART_SetConfig+0x14ac>
 80143fc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8014400:	e010      	b.n	8014424 <UART_SetConfig+0x14ac>
 8014402:	f640 43cc 	movw	r3, #3276	; 0xccc
 8014406:	e00d      	b.n	8014424 <UART_SetConfig+0x14ac>
 8014408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801440c:	e00a      	b.n	8014424 <UART_SetConfig+0x14ac>
 801440e:	f241 5355 	movw	r3, #5461	; 0x1555
 8014412:	e007      	b.n	8014424 <UART_SetConfig+0x14ac>
 8014414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014418:	e004      	b.n	8014424 <UART_SetConfig+0x14ac>
 801441a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801441e:	e001      	b.n	8014424 <UART_SetConfig+0x14ac>
 8014420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	6852      	ldr	r2, [r2, #4]
 8014428:	0852      	lsrs	r2, r2, #1
 801442a:	441a      	add	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	fbb2 f3f3 	udiv	r3, r2, r3
 8014434:	b29b      	uxth	r3, r3
 8014436:	617b      	str	r3, [r7, #20]
        break;
 8014438:	e002      	b.n	8014440 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 801443a:	2301      	movs	r3, #1
 801443c:	74fb      	strb	r3, [r7, #19]
        break;
 801443e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	2b0f      	cmp	r3, #15
 8014444:	d908      	bls.n	8014458 <UART_SetConfig+0x14e0>
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801444c:	d204      	bcs.n	8014458 <UART_SetConfig+0x14e0>
    {
      huart->Instance->BRR = usartdiv;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	60da      	str	r2, [r3, #12]
 8014456:	e001      	b.n	801445c <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	74fb      	strb	r3, [r7, #19]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2201      	movs	r2, #1
 8014460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2201      	movs	r2, #1
 8014468:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2200      	movs	r2, #0
 8014470:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2200      	movs	r2, #0
 8014476:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8014478:	7cfb      	ldrb	r3, [r7, #19]
}
 801447a:	4618      	mov	r0, r3
 801447c:	3720      	adds	r7, #32
 801447e:	46bd      	mov	sp, r7
 8014480:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8014484:	00f42400 	.word	0x00f42400
 8014488:	0001e848 	.word	0x0001e848
 801448c:	0003d090 	.word	0x0003d090
 8014490:	0007a120 	.word	0x0007a120
 8014494:	000f4240 	.word	0x000f4240
 8014498:	00145855 	.word	0x00145855
 801449c:	00186a00 	.word	0x00186a00
 80144a0:	001e8480 	.word	0x001e8480
 80144a4:	0028b0aa 	.word	0x0028b0aa
 80144a8:	003d0900 	.word	0x003d0900
 80144ac:	007a1200 	.word	0x007a1200

080144b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144bc:	2bff      	cmp	r3, #255	; 0xff
 80144be:	d904      	bls.n	80144ca <UART_AdvFeatureConfig+0x1a>
 80144c0:	f640 318c 	movw	r1, #2956	; 0xb8c
 80144c4:	489b      	ldr	r0, [pc, #620]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 80144c6:	f004 f972 	bl	80187ae <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ce:	f003 0301 	and.w	r3, r3, #1
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d018      	beq.n	8014508 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d009      	beq.n	80144f2 <UART_AdvFeatureConfig+0x42>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80144e6:	d004      	beq.n	80144f2 <UART_AdvFeatureConfig+0x42>
 80144e8:	f640 3191 	movw	r1, #2961	; 0xb91
 80144ec:	4891      	ldr	r0, [pc, #580]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 80144ee:	f004 f95e 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	430a      	orrs	r2, r1
 8014506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801450c:	f003 0302 	and.w	r3, r3, #2
 8014510:	2b00      	cmp	r3, #0
 8014512:	d018      	beq.n	8014546 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014518:	2b00      	cmp	r3, #0
 801451a:	d009      	beq.n	8014530 <UART_AdvFeatureConfig+0x80>
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014524:	d004      	beq.n	8014530 <UART_AdvFeatureConfig+0x80>
 8014526:	f640 3198 	movw	r1, #2968	; 0xb98
 801452a:	4882      	ldr	r0, [pc, #520]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 801452c:	f004 f93f 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	430a      	orrs	r2, r1
 8014544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801454a:	f003 0304 	and.w	r3, r3, #4
 801454e:	2b00      	cmp	r3, #0
 8014550:	d018      	beq.n	8014584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014556:	2b00      	cmp	r3, #0
 8014558:	d009      	beq.n	801456e <UART_AdvFeatureConfig+0xbe>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801455e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014562:	d004      	beq.n	801456e <UART_AdvFeatureConfig+0xbe>
 8014564:	f640 319f 	movw	r1, #2975	; 0xb9f
 8014568:	4872      	ldr	r0, [pc, #456]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 801456a:	f004 f920 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	430a      	orrs	r2, r1
 8014582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014588:	f003 0308 	and.w	r3, r3, #8
 801458c:	2b00      	cmp	r3, #0
 801458e:	d018      	beq.n	80145c2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014594:	2b00      	cmp	r3, #0
 8014596:	d009      	beq.n	80145ac <UART_AdvFeatureConfig+0xfc>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145a0:	d004      	beq.n	80145ac <UART_AdvFeatureConfig+0xfc>
 80145a2:	f640 31a6 	movw	r1, #2982	; 0xba6
 80145a6:	4863      	ldr	r0, [pc, #396]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 80145a8:	f004 f901 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	430a      	orrs	r2, r1
 80145c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145c6:	f003 0310 	and.w	r3, r3, #16
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d018      	beq.n	8014600 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d009      	beq.n	80145ea <UART_AdvFeatureConfig+0x13a>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145de:	d004      	beq.n	80145ea <UART_AdvFeatureConfig+0x13a>
 80145e0:	f640 31ad 	movw	r1, #2989	; 0xbad
 80145e4:	4853      	ldr	r0, [pc, #332]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 80145e6:	f004 f8e2 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	430a      	orrs	r2, r1
 80145fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014604:	f003 0320 	and.w	r3, r3, #32
 8014608:	2b00      	cmp	r3, #0
 801460a:	d018      	beq.n	801463e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014610:	2b00      	cmp	r3, #0
 8014612:	d009      	beq.n	8014628 <UART_AdvFeatureConfig+0x178>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801461c:	d004      	beq.n	8014628 <UART_AdvFeatureConfig+0x178>
 801461e:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8014622:	4844      	ldr	r0, [pc, #272]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 8014624:	f004 f8c3 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	689b      	ldr	r3, [r3, #8]
 801462e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	430a      	orrs	r2, r1
 801463c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014646:	2b00      	cmp	r3, #0
 8014648:	d05e      	beq.n	8014708 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4a3a      	ldr	r2, [pc, #232]	; (8014738 <UART_AdvFeatureConfig+0x288>)
 8014650:	4293      	cmp	r3, r2
 8014652:	d018      	beq.n	8014686 <UART_AdvFeatureConfig+0x1d6>
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4a38      	ldr	r2, [pc, #224]	; (801473c <UART_AdvFeatureConfig+0x28c>)
 801465a:	4293      	cmp	r3, r2
 801465c:	d013      	beq.n	8014686 <UART_AdvFeatureConfig+0x1d6>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4a37      	ldr	r2, [pc, #220]	; (8014740 <UART_AdvFeatureConfig+0x290>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d00e      	beq.n	8014686 <UART_AdvFeatureConfig+0x1d6>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4a35      	ldr	r2, [pc, #212]	; (8014744 <UART_AdvFeatureConfig+0x294>)
 801466e:	4293      	cmp	r3, r2
 8014670:	d009      	beq.n	8014686 <UART_AdvFeatureConfig+0x1d6>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	4a34      	ldr	r2, [pc, #208]	; (8014748 <UART_AdvFeatureConfig+0x298>)
 8014678:	4293      	cmp	r3, r2
 801467a:	d004      	beq.n	8014686 <UART_AdvFeatureConfig+0x1d6>
 801467c:	f640 31bb 	movw	r1, #3003	; 0xbbb
 8014680:	482c      	ldr	r0, [pc, #176]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 8014682:	f004 f894 	bl	80187ae <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801468a:	2b00      	cmp	r3, #0
 801468c:	d009      	beq.n	80146a2 <UART_AdvFeatureConfig+0x1f2>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014696:	d004      	beq.n	80146a2 <UART_AdvFeatureConfig+0x1f2>
 8014698:	f640 31bc 	movw	r1, #3004	; 0xbbc
 801469c:	4825      	ldr	r0, [pc, #148]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 801469e:	f004 f886 	bl	80187ae <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	430a      	orrs	r2, r1
 80146b6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146c0:	d122      	bne.n	8014708 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d013      	beq.n	80146f2 <UART_AdvFeatureConfig+0x242>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80146d2:	d00e      	beq.n	80146f2 <UART_AdvFeatureConfig+0x242>
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80146dc:	d009      	beq.n	80146f2 <UART_AdvFeatureConfig+0x242>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80146e6:	d004      	beq.n	80146f2 <UART_AdvFeatureConfig+0x242>
 80146e8:	f640 31c1 	movw	r1, #3009	; 0xbc1
 80146ec:	4811      	ldr	r0, [pc, #68]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 80146ee:	f004 f85e 	bl	80187ae <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	430a      	orrs	r2, r1
 8014706:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014710:	2b00      	cmp	r3, #0
 8014712:	d026      	beq.n	8014762 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014718:	2b00      	cmp	r3, #0
 801471a:	d017      	beq.n	801474c <UART_AdvFeatureConfig+0x29c>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8014724:	d012      	beq.n	801474c <UART_AdvFeatureConfig+0x29c>
 8014726:	f640 31c9 	movw	r1, #3017	; 0xbc9
 801472a:	4802      	ldr	r0, [pc, #8]	; (8014734 <UART_AdvFeatureConfig+0x284>)
 801472c:	f004 f83f 	bl	80187ae <assert_failed>
 8014730:	e00c      	b.n	801474c <UART_AdvFeatureConfig+0x29c>
 8014732:	bf00      	nop
 8014734:	0801dd58 	.word	0x0801dd58
 8014738:	40013800 	.word	0x40013800
 801473c:	40004400 	.word	0x40004400
 8014740:	40004800 	.word	0x40004800
 8014744:	40004c00 	.word	0x40004c00
 8014748:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	430a      	orrs	r2, r1
 8014760:	605a      	str	r2, [r3, #4]
  }
}
 8014762:	bf00      	nop
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop

0801476c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b086      	sub	sp, #24
 8014770:	af02      	add	r7, sp, #8
 8014772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801477c:	f7f2 f99e 	bl	8006abc <HAL_GetTick>
 8014780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	f003 0308 	and.w	r3, r3, #8
 801478c:	2b08      	cmp	r3, #8
 801478e:	d10e      	bne.n	80147ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2200      	movs	r2, #0
 801479a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 f82c 	bl	80147fc <UART_WaitOnFlagUntilTimeout>
 80147a4:	4603      	mov	r3, r0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d001      	beq.n	80147ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80147aa:	2303      	movs	r3, #3
 80147ac:	e022      	b.n	80147f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f003 0304 	and.w	r3, r3, #4
 80147b8:	2b04      	cmp	r3, #4
 80147ba:	d10e      	bne.n	80147da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80147bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80147c0:	9300      	str	r3, [sp, #0]
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 f816 	bl	80147fc <UART_WaitOnFlagUntilTimeout>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d001      	beq.n	80147da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80147d6:	2303      	movs	r3, #3
 80147d8:	e00c      	b.n	80147f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2220      	movs	r2, #32
 80147de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2220      	movs	r2, #32
 80147e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2200      	movs	r2, #0
 80147ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3710      	adds	r7, #16
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	603b      	str	r3, [r7, #0]
 8014808:	4613      	mov	r3, r2
 801480a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801480c:	e02c      	b.n	8014868 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014814:	d028      	beq.n	8014868 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014816:	f7f2 f951 	bl	8006abc <HAL_GetTick>
 801481a:	4602      	mov	r2, r0
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	69ba      	ldr	r2, [r7, #24]
 8014822:	429a      	cmp	r2, r3
 8014824:	d302      	bcc.n	801482c <UART_WaitOnFlagUntilTimeout+0x30>
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d11d      	bne.n	8014868 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801483a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	689a      	ldr	r2, [r3, #8]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f022 0201 	bic.w	r2, r2, #1
 801484a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2220      	movs	r2, #32
 8014850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2220      	movs	r2, #32
 8014858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2200      	movs	r2, #0
 8014860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8014864:	2303      	movs	r3, #3
 8014866:	e00f      	b.n	8014888 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	69da      	ldr	r2, [r3, #28]
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	4013      	ands	r3, r2
 8014872:	68ba      	ldr	r2, [r7, #8]
 8014874:	429a      	cmp	r2, r3
 8014876:	bf0c      	ite	eq
 8014878:	2301      	moveq	r3, #1
 801487a:	2300      	movne	r3, #0
 801487c:	b2db      	uxtb	r3, r3
 801487e:	461a      	mov	r2, r3
 8014880:	79fb      	ldrb	r3, [r7, #7]
 8014882:	429a      	cmp	r2, r3
 8014884:	d0c3      	beq.n	801480e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014886:	2300      	movs	r3, #0
}
 8014888:	4618      	mov	r0, r3
 801488a:	3710      	adds	r7, #16
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b084      	sub	sp, #16
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4a29      	ldr	r2, [pc, #164]	; (8014944 <HAL_UARTEx_DisableFifoMode+0xb4>)
 801489e:	4293      	cmp	r3, r2
 80148a0:	d01d      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	4a28      	ldr	r2, [pc, #160]	; (8014948 <HAL_UARTEx_DisableFifoMode+0xb8>)
 80148a8:	4293      	cmp	r3, r2
 80148aa:	d018      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4a26      	ldr	r2, [pc, #152]	; (801494c <HAL_UARTEx_DisableFifoMode+0xbc>)
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d013      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4a25      	ldr	r2, [pc, #148]	; (8014950 <HAL_UARTEx_DisableFifoMode+0xc0>)
 80148bc:	4293      	cmp	r3, r2
 80148be:	d00e      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4a23      	ldr	r2, [pc, #140]	; (8014954 <HAL_UARTEx_DisableFifoMode+0xc4>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d009      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	4a22      	ldr	r2, [pc, #136]	; (8014958 <HAL_UARTEx_DisableFifoMode+0xc8>)
 80148d0:	4293      	cmp	r3, r2
 80148d2:	d004      	beq.n	80148de <HAL_UARTEx_DisableFifoMode+0x4e>
 80148d4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80148d8:	4820      	ldr	r0, [pc, #128]	; (801495c <HAL_UARTEx_DisableFifoMode+0xcc>)
 80148da:	f003 ff68 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d101      	bne.n	80148ec <HAL_UARTEx_DisableFifoMode+0x5c>
 80148e8:	2302      	movs	r3, #2
 80148ea:	e027      	b.n	801493c <HAL_UARTEx_DisableFifoMode+0xac>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2201      	movs	r2, #1
 80148f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2224      	movs	r2, #36	; 0x24
 80148f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	f022 0201 	bic.w	r2, r2, #1
 8014912:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801491a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2200      	movs	r2, #0
 8014920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	68fa      	ldr	r2, [r7, #12]
 8014928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2220      	movs	r2, #32
 801492e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2200      	movs	r2, #0
 8014936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801493a:	2300      	movs	r3, #0
}
 801493c:	4618      	mov	r0, r3
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	40013800 	.word	0x40013800
 8014948:	40004400 	.word	0x40004400
 801494c:	40004800 	.word	0x40004800
 8014950:	40004c00 	.word	0x40004c00
 8014954:	40005000 	.word	0x40005000
 8014958:	40008000 	.word	0x40008000
 801495c:	0801dda4 	.word	0x0801dda4

08014960 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	4a3b      	ldr	r2, [pc, #236]	; (8014a5c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8014970:	4293      	cmp	r3, r2
 8014972:	d01d      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4a39      	ldr	r2, [pc, #228]	; (8014a60 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d018      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4a38      	ldr	r2, [pc, #224]	; (8014a64 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d013      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4a36      	ldr	r2, [pc, #216]	; (8014a68 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 801498e:	4293      	cmp	r3, r2
 8014990:	d00e      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4a35      	ldr	r2, [pc, #212]	; (8014a6c <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 8014998:	4293      	cmp	r3, r2
 801499a:	d009      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4a33      	ldr	r2, [pc, #204]	; (8014a70 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d004      	beq.n	80149b0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149a6:	f240 2142 	movw	r1, #578	; 0x242
 80149aa:	4832      	ldr	r0, [pc, #200]	; (8014a74 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 80149ac:	f003 feff 	bl	80187ae <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d018      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80149bc:	d014      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80149c4:	d010      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80149cc:	d00c      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149d4:	d008      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80149dc:	d004      	beq.n	80149e8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149de:	f240 2143 	movw	r1, #579	; 0x243
 80149e2:	4824      	ldr	r0, [pc, #144]	; (8014a74 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 80149e4:	f003 fee3 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80149ee:	2b01      	cmp	r3, #1
 80149f0:	d101      	bne.n	80149f6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 80149f2:	2302      	movs	r3, #2
 80149f4:	e02d      	b.n	8014a52 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2201      	movs	r2, #1
 80149fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2224      	movs	r2, #36	; 0x24
 8014a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	681a      	ldr	r2, [r3, #0]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	f022 0201 	bic.w	r2, r2, #1
 8014a1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	683a      	ldr	r2, [r7, #0]
 8014a2e:	430a      	orrs	r2, r1
 8014a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 f8ac 	bl	8014b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	68fa      	ldr	r2, [r7, #12]
 8014a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2220      	movs	r2, #32
 8014a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014a50:	2300      	movs	r3, #0
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	40013800 	.word	0x40013800
 8014a60:	40004400 	.word	0x40004400
 8014a64:	40004800 	.word	0x40004800
 8014a68:	40004c00 	.word	0x40004c00
 8014a6c:	40005000 	.word	0x40005000
 8014a70:	40008000 	.word	0x40008000
 8014a74:	0801dda4 	.word	0x0801dda4

08014a78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4a3b      	ldr	r2, [pc, #236]	; (8014b74 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d01d      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a39      	ldr	r2, [pc, #228]	; (8014b78 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d018      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4a38      	ldr	r2, [pc, #224]	; (8014b7c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d013      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	4a36      	ldr	r2, [pc, #216]	; (8014b80 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d00e      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	4a35      	ldr	r2, [pc, #212]	; (8014b84 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d009      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	4a33      	ldr	r2, [pc, #204]	; (8014b88 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d004      	beq.n	8014ac8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014abe:	f240 2173 	movw	r1, #627	; 0x273
 8014ac2:	4832      	ldr	r0, [pc, #200]	; (8014b8c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8014ac4:	f003 fe73 	bl	80187ae <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d018      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014ad4:	d014      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014adc:	d010      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8014ae4:	d00c      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014aec:	d008      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8014af4:	d004      	beq.n	8014b00 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014af6:	f44f 711d 	mov.w	r1, #628	; 0x274
 8014afa:	4824      	ldr	r0, [pc, #144]	; (8014b8c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8014afc:	f003 fe57 	bl	80187ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d101      	bne.n	8014b0e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8014b0a:	2302      	movs	r3, #2
 8014b0c:	e02d      	b.n	8014b6a <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2201      	movs	r2, #1
 8014b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2224      	movs	r2, #36	; 0x24
 8014b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f022 0201 	bic.w	r2, r2, #1
 8014b34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	683a      	ldr	r2, [r7, #0]
 8014b46:	430a      	orrs	r2, r1
 8014b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f000 f820 	bl	8014b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2220      	movs	r2, #32
 8014b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014b68:	2300      	movs	r3, #0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	40013800 	.word	0x40013800
 8014b78:	40004400 	.word	0x40004400
 8014b7c:	40004800 	.word	0x40004800
 8014b80:	40004c00 	.word	0x40004c00
 8014b84:	40005000 	.word	0x40005000
 8014b88:	40008000 	.word	0x40008000
 8014b8c:	0801dda4 	.word	0x0801dda4

08014b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014b90:	b480      	push	{r7}
 8014b92:	b089      	sub	sp, #36	; 0x24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8014b98:	4a2f      	ldr	r2, [pc, #188]	; (8014c58 <UARTEx_SetNbDataToProcess+0xc8>)
 8014b9a:	f107 0314 	add.w	r3, r7, #20
 8014b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ba2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8014ba6:	4a2d      	ldr	r2, [pc, #180]	; (8014c5c <UARTEx_SetNbDataToProcess+0xcc>)
 8014ba8:	f107 030c 	add.w	r3, r7, #12
 8014bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bb0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d108      	bne.n	8014bce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014bcc:	e03d      	b.n	8014c4a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014bce:	2308      	movs	r3, #8
 8014bd0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014bd2:	2308      	movs	r3, #8
 8014bd4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	689b      	ldr	r3, [r3, #8]
 8014bdc:	0e5b      	lsrs	r3, r3, #25
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	f003 0307 	and.w	r3, r3, #7
 8014be4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	0f5b      	lsrs	r3, r3, #29
 8014bee:	b2db      	uxtb	r3, r3
 8014bf0:	f003 0307 	and.w	r3, r3, #7
 8014bf4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8014bf6:	7fbb      	ldrb	r3, [r7, #30]
 8014bf8:	7f3a      	ldrb	r2, [r7, #28]
 8014bfa:	f107 0120 	add.w	r1, r7, #32
 8014bfe:	440a      	add	r2, r1
 8014c00:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014c04:	fb02 f303 	mul.w	r3, r2, r3
 8014c08:	7f3a      	ldrb	r2, [r7, #28]
 8014c0a:	f107 0120 	add.w	r1, r7, #32
 8014c0e:	440a      	add	r2, r1
 8014c10:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c18:	b29a      	uxth	r2, r3
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8014c20:	7ffb      	ldrb	r3, [r7, #31]
 8014c22:	7f7a      	ldrb	r2, [r7, #29]
 8014c24:	f107 0120 	add.w	r1, r7, #32
 8014c28:	440a      	add	r2, r1
 8014c2a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014c2e:	fb02 f303 	mul.w	r3, r2, r3
 8014c32:	7f7a      	ldrb	r2, [r7, #29]
 8014c34:	f107 0120 	add.w	r1, r7, #32
 8014c38:	440a      	add	r2, r1
 8014c3a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014c4a:	bf00      	nop
 8014c4c:	3724      	adds	r7, #36	; 0x24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop
 8014c58:	0801ddf0 	.word	0x0801ddf0
 8014c5c:	0801ddf8 	.word	0x0801ddf8

08014c60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	4603      	mov	r3, r0
 8014c68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c72:	2b84      	cmp	r3, #132	; 0x84
 8014c74:	d005      	beq.n	8014c82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014c76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	4413      	add	r3, r2
 8014c7e:	3303      	adds	r3, #3
 8014c80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014c82:	68fb      	ldr	r3, [r7, #12]
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3714      	adds	r7, #20
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014c94:	f000 ff5c 	bl	8015b50 <vTaskStartScheduler>
  
  return osOK;
 8014c98:	2300      	movs	r3, #0
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca0:	b087      	sub	sp, #28
 8014ca2:	af02      	add	r7, sp, #8
 8014ca4:	6078      	str	r0, [r7, #4]
 8014ca6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	685c      	ldr	r4, [r3, #4]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014cb4:	b29e      	uxth	r6, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7ff ffcf 	bl	8014c60 <makeFreeRtosPriority>
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	f107 030c 	add.w	r3, r7, #12
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	9200      	str	r2, [sp, #0]
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	4632      	mov	r2, r6
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	f000 fdde 	bl	8015894 <xTaskCreate>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d001      	beq.n	8014ce2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	e000      	b.n	8014ce4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3714      	adds	r7, #20
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014cec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <osDelay+0x16>
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	e000      	b.n	8014d04 <osDelay+0x18>
 8014d02:	2301      	movs	r3, #1
 8014d04:	4618      	mov	r0, r3
 8014d06:	f000 feef 	bl	8015ae8 <vTaskDelay>
  
  return osOK;
 8014d0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3710      	adds	r7, #16
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f103 0208 	add.w	r2, r3, #8
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f04f 32ff 	mov.w	r2, #4294967295
 8014d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f103 0208 	add.w	r2, r3, #8
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f103 0208 	add.w	r2, r3, #8
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2200      	movs	r2, #0
 8014d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014d48:	bf00      	nop
 8014d4a:	370c      	adds	r7, #12
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d52:	4770      	bx	lr

08014d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014d62:	bf00      	nop
 8014d64:	370c      	adds	r7, #12
 8014d66:	46bd      	mov	sp, r7
 8014d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6c:	4770      	bx	lr

08014d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d6e:	b480      	push	{r7}
 8014d70:	b085      	sub	sp, #20
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
 8014d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	689a      	ldr	r2, [r3, #8]
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	689b      	ldr	r3, [r3, #8]
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	1c5a      	adds	r2, r3, #1
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	601a      	str	r2, [r3, #0]
}
 8014daa:	bf00      	nop
 8014dac:	3714      	adds	r7, #20
 8014dae:	46bd      	mov	sp, r7
 8014db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db4:	4770      	bx	lr

08014db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014db6:	b480      	push	{r7}
 8014db8:	b085      	sub	sp, #20
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	6078      	str	r0, [r7, #4]
 8014dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dcc:	d103      	bne.n	8014dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	e00c      	b.n	8014df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3308      	adds	r3, #8
 8014dda:	60fb      	str	r3, [r7, #12]
 8014ddc:	e002      	b.n	8014de4 <vListInsert+0x2e>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	60fb      	str	r3, [r7, #12]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d2f6      	bcs.n	8014dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	685a      	ldr	r2, [r3, #4]
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	683a      	ldr	r2, [r7, #0]
 8014dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	68fa      	ldr	r2, [r7, #12]
 8014e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	683a      	ldr	r2, [r7, #0]
 8014e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	1c5a      	adds	r2, r3, #1
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	601a      	str	r2, [r3, #0]
}
 8014e1c:	bf00      	nop
 8014e1e:	3714      	adds	r7, #20
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr

08014e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	691b      	ldr	r3, [r3, #16]
 8014e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	6892      	ldr	r2, [r2, #8]
 8014e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	6852      	ldr	r2, [r2, #4]
 8014e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d103      	bne.n	8014e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	689a      	ldr	r2, [r3, #8]
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	1e5a      	subs	r2, r3, #1
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	681b      	ldr	r3, [r3, #0]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3714      	adds	r7, #20
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d109      	bne.n	8014ea4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e94:	f383 8811 	msr	BASEPRI, r3
 8014e98:	f3bf 8f6f 	isb	sy
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	60bb      	str	r3, [r7, #8]
 8014ea2:	e7fe      	b.n	8014ea2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8014ea4:	f001 fd04 	bl	80168b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014eb0:	68f9      	ldr	r1, [r7, #12]
 8014eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014eb4:	fb01 f303 	mul.w	r3, r1, r3
 8014eb8:	441a      	add	r2, r3
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	68f9      	ldr	r1, [r7, #12]
 8014ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014eda:	fb01 f303 	mul.w	r3, r1, r3
 8014ede:	441a      	add	r2, r3
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	22ff      	movs	r2, #255	; 0xff
 8014ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	22ff      	movs	r2, #255	; 0xff
 8014ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d114      	bne.n	8014f24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	691b      	ldr	r3, [r3, #16]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d01a      	beq.n	8014f38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3310      	adds	r3, #16
 8014f06:	4618      	mov	r0, r3
 8014f08:	f001 f86e 	bl	8015fe8 <xTaskRemoveFromEventList>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d012      	beq.n	8014f38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014f12:	4b0d      	ldr	r3, [pc, #52]	; (8014f48 <xQueueGenericReset+0xcc>)
 8014f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	f3bf 8f6f 	isb	sy
 8014f22:	e009      	b.n	8014f38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	3310      	adds	r3, #16
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7ff fef3 	bl	8014d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	3324      	adds	r3, #36	; 0x24
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff feee 	bl	8014d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014f38:	f001 fce8 	bl	801690c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014f3c:	2301      	movs	r3, #1
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3710      	adds	r7, #16
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	e000ed04 	.word	0xe000ed04

08014f4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08a      	sub	sp, #40	; 0x28
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	4613      	mov	r3, r2
 8014f58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d109      	bne.n	8014f74 <xQueueGenericCreate+0x28>
 8014f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f64:	f383 8811 	msr	BASEPRI, r3
 8014f68:	f3bf 8f6f 	isb	sy
 8014f6c:	f3bf 8f4f 	dsb	sy
 8014f70:	613b      	str	r3, [r7, #16]
 8014f72:	e7fe      	b.n	8014f72 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d102      	bne.n	8014f80 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	61fb      	str	r3, [r7, #28]
 8014f7e:	e004      	b.n	8014f8a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	68ba      	ldr	r2, [r7, #8]
 8014f84:	fb02 f303 	mul.w	r3, r2, r3
 8014f88:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	3348      	adds	r3, #72	; 0x48
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f001 fd9e 	bl	8016ad0 <pvPortMalloc>
 8014f94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00b      	beq.n	8014fb4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	3348      	adds	r3, #72	; 0x48
 8014fa0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014fa2:	79fa      	ldrb	r2, [r7, #7]
 8014fa4:	69bb      	ldr	r3, [r7, #24]
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	4613      	mov	r3, r2
 8014faa:	697a      	ldr	r2, [r7, #20]
 8014fac:	68b9      	ldr	r1, [r7, #8]
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f000 f805 	bl	8014fbe <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8014fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3720      	adds	r7, #32
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}

08014fbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014fbe:	b580      	push	{r7, lr}
 8014fc0:	b084      	sub	sp, #16
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	60f8      	str	r0, [r7, #12]
 8014fc6:	60b9      	str	r1, [r7, #8]
 8014fc8:	607a      	str	r2, [r7, #4]
 8014fca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d103      	bne.n	8014fda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	69ba      	ldr	r2, [r7, #24]
 8014fd6:	601a      	str	r2, [r3, #0]
 8014fd8:	e002      	b.n	8014fe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	68fa      	ldr	r2, [r7, #12]
 8014fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	68ba      	ldr	r2, [r7, #8]
 8014fea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014fec:	2101      	movs	r1, #1
 8014fee:	69b8      	ldr	r0, [r7, #24]
 8014ff0:	f7ff ff44 	bl	8014e7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014ff4:	bf00      	nop
 8014ff6:	3710      	adds	r7, #16
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00e      	beq.n	8015028 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2200      	movs	r2, #0
 801500e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2200      	movs	r2, #0
 801501a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801501c:	2300      	movs	r3, #0
 801501e:	2200      	movs	r2, #0
 8015020:	2100      	movs	r1, #0
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f000 f886 	bl	8015134 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015028:	bf00      	nop
 801502a:	3708      	adds	r7, #8
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}

08015030 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af00      	add	r7, sp, #0
 8015036:	4603      	mov	r3, r0
 8015038:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801503a:	2301      	movs	r3, #1
 801503c:	617b      	str	r3, [r7, #20]
 801503e:	2300      	movs	r3, #0
 8015040:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015042:	79fb      	ldrb	r3, [r7, #7]
 8015044:	461a      	mov	r2, r3
 8015046:	6939      	ldr	r1, [r7, #16]
 8015048:	6978      	ldr	r0, [r7, #20]
 801504a:	f7ff ff7f 	bl	8014f4c <xQueueGenericCreate>
 801504e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	f7ff ffd3 	bl	8014ffc <prvInitialiseMutex>

		return pxNewQueue;
 8015056:	68fb      	ldr	r3, [r7, #12]
	}
 8015058:	4618      	mov	r0, r3
 801505a:	3718      	adds	r7, #24
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015060:	b590      	push	{r4, r7, lr}
 8015062:	b087      	sub	sp, #28
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d109      	bne.n	8015086 <xQueueGiveMutexRecursive+0x26>
 8015072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	60fb      	str	r3, [r7, #12]
 8015084:	e7fe      	b.n	8015084 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	685c      	ldr	r4, [r3, #4]
 801508a:	f001 f967 	bl	801635c <xTaskGetCurrentTaskHandle>
 801508e:	4603      	mov	r3, r0
 8015090:	429c      	cmp	r4, r3
 8015092:	d111      	bne.n	80150b8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	1e5a      	subs	r2, r3, #1
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d105      	bne.n	80150b2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80150a6:	2300      	movs	r3, #0
 80150a8:	2200      	movs	r2, #0
 80150aa:	2100      	movs	r1, #0
 80150ac:	6938      	ldr	r0, [r7, #16]
 80150ae:	f000 f841 	bl	8015134 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80150b2:	2301      	movs	r3, #1
 80150b4:	617b      	str	r3, [r7, #20]
 80150b6:	e001      	b.n	80150bc <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80150b8:	2300      	movs	r3, #0
 80150ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80150bc:	697b      	ldr	r3, [r7, #20]
	}
 80150be:	4618      	mov	r0, r3
 80150c0:	371c      	adds	r7, #28
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd90      	pop	{r4, r7, pc}

080150c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80150c6:	b590      	push	{r4, r7, lr}
 80150c8:	b087      	sub	sp, #28
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
 80150ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80150d4:	693b      	ldr	r3, [r7, #16]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d109      	bne.n	80150ee <xQueueTakeMutexRecursive+0x28>
 80150da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150de:	f383 8811 	msr	BASEPRI, r3
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	f3bf 8f4f 	dsb	sy
 80150ea:	60fb      	str	r3, [r7, #12]
 80150ec:	e7fe      	b.n	80150ec <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	685c      	ldr	r4, [r3, #4]
 80150f2:	f001 f933 	bl	801635c <xTaskGetCurrentTaskHandle>
 80150f6:	4603      	mov	r3, r0
 80150f8:	429c      	cmp	r4, r3
 80150fa:	d107      	bne.n	801510c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	1c5a      	adds	r2, r3, #1
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015106:	2301      	movs	r3, #1
 8015108:	617b      	str	r3, [r7, #20]
 801510a:	e00e      	b.n	801512a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 801510c:	2300      	movs	r3, #0
 801510e:	683a      	ldr	r2, [r7, #0]
 8015110:	2100      	movs	r1, #0
 8015112:	6938      	ldr	r0, [r7, #16]
 8015114:	f000 f99c 	bl	8015450 <xQueueGenericReceive>
 8015118:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d004      	beq.n	801512a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	1c5a      	adds	r2, r3, #1
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801512a:	697b      	ldr	r3, [r7, #20]
	}
 801512c:	4618      	mov	r0, r3
 801512e:	371c      	adds	r7, #28
 8015130:	46bd      	mov	sp, r7
 8015132:	bd90      	pop	{r4, r7, pc}

08015134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b08e      	sub	sp, #56	; 0x38
 8015138:	af00      	add	r7, sp, #0
 801513a:	60f8      	str	r0, [r7, #12]
 801513c:	60b9      	str	r1, [r7, #8]
 801513e:	607a      	str	r2, [r7, #4]
 8015140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015142:	2300      	movs	r3, #0
 8015144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514c:	2b00      	cmp	r3, #0
 801514e:	d109      	bne.n	8015164 <xQueueGenericSend+0x30>
 8015150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015154:	f383 8811 	msr	BASEPRI, r3
 8015158:	f3bf 8f6f 	isb	sy
 801515c:	f3bf 8f4f 	dsb	sy
 8015160:	62bb      	str	r3, [r7, #40]	; 0x28
 8015162:	e7fe      	b.n	8015162 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d103      	bne.n	8015172 <xQueueGenericSend+0x3e>
 801516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801516e:	2b00      	cmp	r3, #0
 8015170:	d101      	bne.n	8015176 <xQueueGenericSend+0x42>
 8015172:	2301      	movs	r3, #1
 8015174:	e000      	b.n	8015178 <xQueueGenericSend+0x44>
 8015176:	2300      	movs	r3, #0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d109      	bne.n	8015190 <xQueueGenericSend+0x5c>
 801517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015180:	f383 8811 	msr	BASEPRI, r3
 8015184:	f3bf 8f6f 	isb	sy
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	627b      	str	r3, [r7, #36]	; 0x24
 801518e:	e7fe      	b.n	801518e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	2b02      	cmp	r3, #2
 8015194:	d103      	bne.n	801519e <xQueueGenericSend+0x6a>
 8015196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801519a:	2b01      	cmp	r3, #1
 801519c:	d101      	bne.n	80151a2 <xQueueGenericSend+0x6e>
 801519e:	2301      	movs	r3, #1
 80151a0:	e000      	b.n	80151a4 <xQueueGenericSend+0x70>
 80151a2:	2300      	movs	r3, #0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d109      	bne.n	80151bc <xQueueGenericSend+0x88>
 80151a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ac:	f383 8811 	msr	BASEPRI, r3
 80151b0:	f3bf 8f6f 	isb	sy
 80151b4:	f3bf 8f4f 	dsb	sy
 80151b8:	623b      	str	r3, [r7, #32]
 80151ba:	e7fe      	b.n	80151ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80151bc:	f001 f8de 	bl	801637c <xTaskGetSchedulerState>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d102      	bne.n	80151cc <xQueueGenericSend+0x98>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d101      	bne.n	80151d0 <xQueueGenericSend+0x9c>
 80151cc:	2301      	movs	r3, #1
 80151ce:	e000      	b.n	80151d2 <xQueueGenericSend+0x9e>
 80151d0:	2300      	movs	r3, #0
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d109      	bne.n	80151ea <xQueueGenericSend+0xb6>
 80151d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151da:	f383 8811 	msr	BASEPRI, r3
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f3bf 8f4f 	dsb	sy
 80151e6:	61fb      	str	r3, [r7, #28]
 80151e8:	e7fe      	b.n	80151e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80151ea:	f001 fb61 	bl	80168b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80151ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d302      	bcc.n	8015200 <xQueueGenericSend+0xcc>
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	2b02      	cmp	r3, #2
 80151fe:	d129      	bne.n	8015254 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015200:	683a      	ldr	r2, [r7, #0]
 8015202:	68b9      	ldr	r1, [r7, #8]
 8015204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015206:	f000 fa35 	bl	8015674 <prvCopyDataToQueue>
 801520a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015210:	2b00      	cmp	r3, #0
 8015212:	d010      	beq.n	8015236 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015216:	3324      	adds	r3, #36	; 0x24
 8015218:	4618      	mov	r0, r3
 801521a:	f000 fee5 	bl	8015fe8 <xTaskRemoveFromEventList>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d013      	beq.n	801524c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015224:	4b3f      	ldr	r3, [pc, #252]	; (8015324 <xQueueGenericSend+0x1f0>)
 8015226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801522a:	601a      	str	r2, [r3, #0]
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	f3bf 8f6f 	isb	sy
 8015234:	e00a      	b.n	801524c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015238:	2b00      	cmp	r3, #0
 801523a:	d007      	beq.n	801524c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801523c:	4b39      	ldr	r3, [pc, #228]	; (8015324 <xQueueGenericSend+0x1f0>)
 801523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015242:	601a      	str	r2, [r3, #0]
 8015244:	f3bf 8f4f 	dsb	sy
 8015248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801524c:	f001 fb5e 	bl	801690c <vPortExitCritical>
				return pdPASS;
 8015250:	2301      	movs	r3, #1
 8015252:	e063      	b.n	801531c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d103      	bne.n	8015262 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801525a:	f001 fb57 	bl	801690c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801525e:	2300      	movs	r3, #0
 8015260:	e05c      	b.n	801531c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015264:	2b00      	cmp	r3, #0
 8015266:	d106      	bne.n	8015276 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015268:	f107 0314 	add.w	r3, r7, #20
 801526c:	4618      	mov	r0, r3
 801526e:	f000 ff1d 	bl	80160ac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015272:	2301      	movs	r3, #1
 8015274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015276:	f001 fb49 	bl	801690c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801527a:	f000 fcaf 	bl	8015bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801527e:	f001 fb17 	bl	80168b0 <vPortEnterCritical>
 8015282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015288:	b25b      	sxtb	r3, r3
 801528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801528e:	d103      	bne.n	8015298 <xQueueGenericSend+0x164>
 8015290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015292:	2200      	movs	r2, #0
 8015294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801529a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801529e:	b25b      	sxtb	r3, r3
 80152a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152a4:	d103      	bne.n	80152ae <xQueueGenericSend+0x17a>
 80152a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a8:	2200      	movs	r2, #0
 80152aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80152ae:	f001 fb2d 	bl	801690c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80152b2:	1d3a      	adds	r2, r7, #4
 80152b4:	f107 0314 	add.w	r3, r7, #20
 80152b8:	4611      	mov	r1, r2
 80152ba:	4618      	mov	r0, r3
 80152bc:	f000 ff1a 	bl	80160f4 <xTaskCheckForTimeOut>
 80152c0:	4603      	mov	r3, r0
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d124      	bne.n	8015310 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80152c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152c8:	f000 facc 	bl	8015864 <prvIsQueueFull>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d018      	beq.n	8015304 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80152d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d4:	3310      	adds	r3, #16
 80152d6:	687a      	ldr	r2, [r7, #4]
 80152d8:	4611      	mov	r1, r2
 80152da:	4618      	mov	r0, r3
 80152dc:	f000 fe60 	bl	8015fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80152e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152e2:	f000 fa57 	bl	8015794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80152e6:	f000 fc87 	bl	8015bf8 <xTaskResumeAll>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	f47f af7c 	bne.w	80151ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80152f2:	4b0c      	ldr	r3, [pc, #48]	; (8015324 <xQueueGenericSend+0x1f0>)
 80152f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152f8:	601a      	str	r2, [r3, #0]
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	f3bf 8f6f 	isb	sy
 8015302:	e772      	b.n	80151ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015306:	f000 fa45 	bl	8015794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801530a:	f000 fc75 	bl	8015bf8 <xTaskResumeAll>
 801530e:	e76c      	b.n	80151ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015312:	f000 fa3f 	bl	8015794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015316:	f000 fc6f 	bl	8015bf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801531a:	2300      	movs	r3, #0
		}
	}
}
 801531c:	4618      	mov	r0, r3
 801531e:	3738      	adds	r7, #56	; 0x38
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	e000ed04 	.word	0xe000ed04

08015328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08e      	sub	sp, #56	; 0x38
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533c:	2b00      	cmp	r3, #0
 801533e:	d109      	bne.n	8015354 <xQueueGenericSendFromISR+0x2c>
 8015340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015344:	f383 8811 	msr	BASEPRI, r3
 8015348:	f3bf 8f6f 	isb	sy
 801534c:	f3bf 8f4f 	dsb	sy
 8015350:	627b      	str	r3, [r7, #36]	; 0x24
 8015352:	e7fe      	b.n	8015352 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d103      	bne.n	8015362 <xQueueGenericSendFromISR+0x3a>
 801535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801535e:	2b00      	cmp	r3, #0
 8015360:	d101      	bne.n	8015366 <xQueueGenericSendFromISR+0x3e>
 8015362:	2301      	movs	r3, #1
 8015364:	e000      	b.n	8015368 <xQueueGenericSendFromISR+0x40>
 8015366:	2300      	movs	r3, #0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d109      	bne.n	8015380 <xQueueGenericSendFromISR+0x58>
 801536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015370:	f383 8811 	msr	BASEPRI, r3
 8015374:	f3bf 8f6f 	isb	sy
 8015378:	f3bf 8f4f 	dsb	sy
 801537c:	623b      	str	r3, [r7, #32]
 801537e:	e7fe      	b.n	801537e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	2b02      	cmp	r3, #2
 8015384:	d103      	bne.n	801538e <xQueueGenericSendFromISR+0x66>
 8015386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801538a:	2b01      	cmp	r3, #1
 801538c:	d101      	bne.n	8015392 <xQueueGenericSendFromISR+0x6a>
 801538e:	2301      	movs	r3, #1
 8015390:	e000      	b.n	8015394 <xQueueGenericSendFromISR+0x6c>
 8015392:	2300      	movs	r3, #0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d109      	bne.n	80153ac <xQueueGenericSendFromISR+0x84>
 8015398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801539c:	f383 8811 	msr	BASEPRI, r3
 80153a0:	f3bf 8f6f 	isb	sy
 80153a4:	f3bf 8f4f 	dsb	sy
 80153a8:	61fb      	str	r3, [r7, #28]
 80153aa:	e7fe      	b.n	80153aa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80153ac:	f001 fb52 	bl	8016a54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80153b0:	f3ef 8211 	mrs	r2, BASEPRI
 80153b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b8:	f383 8811 	msr	BASEPRI, r3
 80153bc:	f3bf 8f6f 	isb	sy
 80153c0:	f3bf 8f4f 	dsb	sy
 80153c4:	61ba      	str	r2, [r7, #24]
 80153c6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80153c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80153ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80153d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d302      	bcc.n	80153de <xQueueGenericSendFromISR+0xb6>
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d12c      	bne.n	8015438 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80153de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	68b9      	ldr	r1, [r7, #8]
 80153ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153ee:	f000 f941 	bl	8015674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80153f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80153f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153fa:	d112      	bne.n	8015422 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015400:	2b00      	cmp	r3, #0
 8015402:	d016      	beq.n	8015432 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015406:	3324      	adds	r3, #36	; 0x24
 8015408:	4618      	mov	r0, r3
 801540a:	f000 fded 	bl	8015fe8 <xTaskRemoveFromEventList>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d00e      	beq.n	8015432 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d00b      	beq.n	8015432 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2201      	movs	r2, #1
 801541e:	601a      	str	r2, [r3, #0]
 8015420:	e007      	b.n	8015432 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015426:	3301      	adds	r3, #1
 8015428:	b2db      	uxtb	r3, r3
 801542a:	b25a      	sxtb	r2, r3
 801542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015432:	2301      	movs	r3, #1
 8015434:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015436:	e001      	b.n	801543c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015438:	2300      	movs	r3, #0
 801543a:	637b      	str	r3, [r7, #52]	; 0x34
 801543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015448:	4618      	mov	r0, r3
 801544a:	3738      	adds	r7, #56	; 0x38
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b08e      	sub	sp, #56	; 0x38
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801545e:	2300      	movs	r3, #0
 8015460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015468:	2b00      	cmp	r3, #0
 801546a:	d109      	bne.n	8015480 <xQueueGenericReceive+0x30>
	__asm volatile
 801546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015470:	f383 8811 	msr	BASEPRI, r3
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	f3bf 8f4f 	dsb	sy
 801547c:	627b      	str	r3, [r7, #36]	; 0x24
 801547e:	e7fe      	b.n	801547e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d103      	bne.n	801548e <xQueueGenericReceive+0x3e>
 8015486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <xQueueGenericReceive+0x42>
 801548e:	2301      	movs	r3, #1
 8015490:	e000      	b.n	8015494 <xQueueGenericReceive+0x44>
 8015492:	2300      	movs	r3, #0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d109      	bne.n	80154ac <xQueueGenericReceive+0x5c>
 8015498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549c:	f383 8811 	msr	BASEPRI, r3
 80154a0:	f3bf 8f6f 	isb	sy
 80154a4:	f3bf 8f4f 	dsb	sy
 80154a8:	623b      	str	r3, [r7, #32]
 80154aa:	e7fe      	b.n	80154aa <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80154ac:	f000 ff66 	bl	801637c <xTaskGetSchedulerState>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d102      	bne.n	80154bc <xQueueGenericReceive+0x6c>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d101      	bne.n	80154c0 <xQueueGenericReceive+0x70>
 80154bc:	2301      	movs	r3, #1
 80154be:	e000      	b.n	80154c2 <xQueueGenericReceive+0x72>
 80154c0:	2300      	movs	r3, #0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d109      	bne.n	80154da <xQueueGenericReceive+0x8a>
 80154c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ca:	f383 8811 	msr	BASEPRI, r3
 80154ce:	f3bf 8f6f 	isb	sy
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	61fb      	str	r3, [r7, #28]
 80154d8:	e7fe      	b.n	80154d8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80154da:	f001 f9e9 	bl	80168b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154e2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d046      	beq.n	8015578 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80154ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80154f0:	68b9      	ldr	r1, [r7, #8]
 80154f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154f4:	f000 f928 	bl	8015748 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d121      	bne.n	8015542 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80154fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015500:	1e5a      	subs	r2, r3, #1
 8015502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015504:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d104      	bne.n	8015518 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801550e:	f001 f84d 	bl	80165ac <pvTaskIncrementMutexHeldCount>
 8015512:	4602      	mov	r2, r0
 8015514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015516:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551a:	691b      	ldr	r3, [r3, #16]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d027      	beq.n	8015570 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015522:	3310      	adds	r3, #16
 8015524:	4618      	mov	r0, r3
 8015526:	f000 fd5f 	bl	8015fe8 <xTaskRemoveFromEventList>
 801552a:	4603      	mov	r3, r0
 801552c:	2b00      	cmp	r3, #0
 801552e:	d01f      	beq.n	8015570 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015530:	4b4f      	ldr	r3, [pc, #316]	; (8015670 <xQueueGenericReceive+0x220>)
 8015532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015536:	601a      	str	r2, [r3, #0]
 8015538:	f3bf 8f4f 	dsb	sy
 801553c:	f3bf 8f6f 	isb	sy
 8015540:	e016      	b.n	8015570 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015546:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801554c:	2b00      	cmp	r3, #0
 801554e:	d00f      	beq.n	8015570 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015552:	3324      	adds	r3, #36	; 0x24
 8015554:	4618      	mov	r0, r3
 8015556:	f000 fd47 	bl	8015fe8 <xTaskRemoveFromEventList>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d007      	beq.n	8015570 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015560:	4b43      	ldr	r3, [pc, #268]	; (8015670 <xQueueGenericReceive+0x220>)
 8015562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015566:	601a      	str	r2, [r3, #0]
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015570:	f001 f9cc 	bl	801690c <vPortExitCritical>
				return pdPASS;
 8015574:	2301      	movs	r3, #1
 8015576:	e077      	b.n	8015668 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d103      	bne.n	8015586 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801557e:	f001 f9c5 	bl	801690c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015582:	2300      	movs	r3, #0
 8015584:	e070      	b.n	8015668 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015588:	2b00      	cmp	r3, #0
 801558a:	d106      	bne.n	801559a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 801558c:	f107 0314 	add.w	r3, r7, #20
 8015590:	4618      	mov	r0, r3
 8015592:	f000 fd8b 	bl	80160ac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015596:	2301      	movs	r3, #1
 8015598:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801559a:	f001 f9b7 	bl	801690c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801559e:	f000 fb1d 	bl	8015bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80155a2:	f001 f985 	bl	80168b0 <vPortEnterCritical>
 80155a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155ac:	b25b      	sxtb	r3, r3
 80155ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155b2:	d103      	bne.n	80155bc <xQueueGenericReceive+0x16c>
 80155b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b6:	2200      	movs	r2, #0
 80155b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80155bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155c2:	b25b      	sxtb	r3, r3
 80155c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155c8:	d103      	bne.n	80155d2 <xQueueGenericReceive+0x182>
 80155ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155cc:	2200      	movs	r2, #0
 80155ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80155d2:	f001 f99b 	bl	801690c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80155d6:	1d3a      	adds	r2, r7, #4
 80155d8:	f107 0314 	add.w	r3, r7, #20
 80155dc:	4611      	mov	r1, r2
 80155de:	4618      	mov	r0, r3
 80155e0:	f000 fd88 	bl	80160f4 <xTaskCheckForTimeOut>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d131      	bne.n	801564e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80155ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155ec:	f000 f924 	bl	8015838 <prvIsQueueEmpty>
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d025      	beq.n	8015642 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80155f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d108      	bne.n	8015610 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80155fe:	f001 f957 	bl	80168b0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	4618      	mov	r0, r3
 8015608:	f000 fed6 	bl	80163b8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 801560c:	f001 f97e 	bl	801690c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015612:	3324      	adds	r3, #36	; 0x24
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	4611      	mov	r1, r2
 8015618:	4618      	mov	r0, r3
 801561a:	f000 fcc1 	bl	8015fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801561e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015620:	f000 f8b8 	bl	8015794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015624:	f000 fae8 	bl	8015bf8 <xTaskResumeAll>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	f47f af55 	bne.w	80154da <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015630:	4b0f      	ldr	r3, [pc, #60]	; (8015670 <xQueueGenericReceive+0x220>)
 8015632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015636:	601a      	str	r2, [r3, #0]
 8015638:	f3bf 8f4f 	dsb	sy
 801563c:	f3bf 8f6f 	isb	sy
 8015640:	e74b      	b.n	80154da <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015644:	f000 f8a6 	bl	8015794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015648:	f000 fad6 	bl	8015bf8 <xTaskResumeAll>
 801564c:	e745      	b.n	80154da <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 801564e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015650:	f000 f8a0 	bl	8015794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015654:	f000 fad0 	bl	8015bf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801565a:	f000 f8ed 	bl	8015838 <prvIsQueueEmpty>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	f43f af3a 	beq.w	80154da <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015666:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015668:	4618      	mov	r0, r3
 801566a:	3738      	adds	r7, #56	; 0x38
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	e000ed04 	.word	0xe000ed04

08015674 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b086      	sub	sp, #24
 8015678:	af00      	add	r7, sp, #0
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015680:	2300      	movs	r3, #0
 8015682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801568e:	2b00      	cmp	r3, #0
 8015690:	d10d      	bne.n	80156ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d14d      	bne.n	8015736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	685b      	ldr	r3, [r3, #4]
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 ff00 	bl	80164a4 <xTaskPriorityDisinherit>
 80156a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	2200      	movs	r2, #0
 80156aa:	605a      	str	r2, [r3, #4]
 80156ac:	e043      	b.n	8015736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d119      	bne.n	80156e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6898      	ldr	r0, [r3, #8]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156bc:	461a      	mov	r2, r3
 80156be:	68b9      	ldr	r1, [r7, #8]
 80156c0:	f006 ff74 	bl	801c5ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	689a      	ldr	r2, [r3, #8]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156cc:	441a      	add	r2, r3
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	689a      	ldr	r2, [r3, #8]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	429a      	cmp	r2, r3
 80156dc:	d32b      	bcc.n	8015736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	609a      	str	r2, [r3, #8]
 80156e6:	e026      	b.n	8015736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	68d8      	ldr	r0, [r3, #12]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156f0:	461a      	mov	r2, r3
 80156f2:	68b9      	ldr	r1, [r7, #8]
 80156f4:	f006 ff5a 	bl	801c5ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	68da      	ldr	r2, [r3, #12]
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015700:	425b      	negs	r3, r3
 8015702:	441a      	add	r2, r3
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	68da      	ldr	r2, [r3, #12]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	429a      	cmp	r2, r3
 8015712:	d207      	bcs.n	8015724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801571c:	425b      	negs	r3, r3
 801571e:	441a      	add	r2, r3
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2b02      	cmp	r3, #2
 8015728:	d105      	bne.n	8015736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d002      	beq.n	8015736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	3b01      	subs	r3, #1
 8015734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	1c5a      	adds	r2, r3, #1
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801573e:	697b      	ldr	r3, [r7, #20]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3718      	adds	r7, #24
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}

08015748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015756:	2b00      	cmp	r3, #0
 8015758:	d018      	beq.n	801578c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	68da      	ldr	r2, [r3, #12]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015762:	441a      	add	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	68da      	ldr	r2, [r3, #12]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	685b      	ldr	r3, [r3, #4]
 8015770:	429a      	cmp	r2, r3
 8015772:	d303      	bcc.n	801577c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681a      	ldr	r2, [r3, #0]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	68d9      	ldr	r1, [r3, #12]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015784:	461a      	mov	r2, r3
 8015786:	6838      	ldr	r0, [r7, #0]
 8015788:	f006 ff10 	bl	801c5ac <memcpy>
	}
}
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801579c:	f001 f888 	bl	80168b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80157a8:	e011      	b.n	80157ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d012      	beq.n	80157d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3324      	adds	r3, #36	; 0x24
 80157b6:	4618      	mov	r0, r3
 80157b8:	f000 fc16 	bl	8015fe8 <xTaskRemoveFromEventList>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d001      	beq.n	80157c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80157c2:	f000 fcf5 	bl	80161b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80157c6:	7bfb      	ldrb	r3, [r7, #15]
 80157c8:	3b01      	subs	r3, #1
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80157ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	dce9      	bgt.n	80157aa <prvUnlockQueue+0x16>
 80157d6:	e000      	b.n	80157da <prvUnlockQueue+0x46>
					break;
 80157d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	22ff      	movs	r2, #255	; 0xff
 80157de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80157e2:	f001 f893 	bl	801690c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80157e6:	f001 f863 	bl	80168b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80157f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80157f2:	e011      	b.n	8015818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	691b      	ldr	r3, [r3, #16]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d012      	beq.n	8015822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	3310      	adds	r3, #16
 8015800:	4618      	mov	r0, r3
 8015802:	f000 fbf1 	bl	8015fe8 <xTaskRemoveFromEventList>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801580c:	f000 fcd0 	bl	80161b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015810:	7bbb      	ldrb	r3, [r7, #14]
 8015812:	3b01      	subs	r3, #1
 8015814:	b2db      	uxtb	r3, r3
 8015816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801581c:	2b00      	cmp	r3, #0
 801581e:	dce9      	bgt.n	80157f4 <prvUnlockQueue+0x60>
 8015820:	e000      	b.n	8015824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	22ff      	movs	r2, #255	; 0xff
 8015828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801582c:	f001 f86e 	bl	801690c <vPortExitCritical>
}
 8015830:	bf00      	nop
 8015832:	3710      	adds	r7, #16
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015840:	f001 f836 	bl	80168b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015848:	2b00      	cmp	r3, #0
 801584a:	d102      	bne.n	8015852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801584c:	2301      	movs	r3, #1
 801584e:	60fb      	str	r3, [r7, #12]
 8015850:	e001      	b.n	8015856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015852:	2300      	movs	r3, #0
 8015854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015856:	f001 f859 	bl	801690c <vPortExitCritical>

	return xReturn;
 801585a:	68fb      	ldr	r3, [r7, #12]
}
 801585c:	4618      	mov	r0, r3
 801585e:	3710      	adds	r7, #16
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b084      	sub	sp, #16
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801586c:	f001 f820 	bl	80168b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015878:	429a      	cmp	r2, r3
 801587a:	d102      	bne.n	8015882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801587c:	2301      	movs	r3, #1
 801587e:	60fb      	str	r3, [r7, #12]
 8015880:	e001      	b.n	8015886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015882:	2300      	movs	r3, #0
 8015884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015886:	f001 f841 	bl	801690c <vPortExitCritical>

	return xReturn;
 801588a:	68fb      	ldr	r3, [r7, #12]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3710      	adds	r7, #16
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015894:	b580      	push	{r7, lr}
 8015896:	b08c      	sub	sp, #48	; 0x30
 8015898:	af04      	add	r7, sp, #16
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	603b      	str	r3, [r7, #0]
 80158a0:	4613      	mov	r3, r2
 80158a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158a4:	88fb      	ldrh	r3, [r7, #6]
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	4618      	mov	r0, r3
 80158aa:	f001 f911 	bl	8016ad0 <pvPortMalloc>
 80158ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00e      	beq.n	80158d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80158b6:	2054      	movs	r0, #84	; 0x54
 80158b8:	f001 f90a 	bl	8016ad0 <pvPortMalloc>
 80158bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d003      	beq.n	80158cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	697a      	ldr	r2, [r7, #20]
 80158c8:	631a      	str	r2, [r3, #48]	; 0x30
 80158ca:	e005      	b.n	80158d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80158cc:	6978      	ldr	r0, [r7, #20]
 80158ce:	f001 f9c1 	bl	8016c54 <vPortFree>
 80158d2:	e001      	b.n	80158d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80158d4:	2300      	movs	r3, #0
 80158d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d013      	beq.n	8015906 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80158de:	88fa      	ldrh	r2, [r7, #6]
 80158e0:	2300      	movs	r3, #0
 80158e2:	9303      	str	r3, [sp, #12]
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	9302      	str	r3, [sp, #8]
 80158e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ea:	9301      	str	r3, [sp, #4]
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	68b9      	ldr	r1, [r7, #8]
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f000 f80e 	bl	8015916 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80158fa:	69f8      	ldr	r0, [r7, #28]
 80158fc:	f000 f88a 	bl	8015a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015900:	2301      	movs	r3, #1
 8015902:	61bb      	str	r3, [r7, #24]
 8015904:	e002      	b.n	801590c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015906:	f04f 33ff 	mov.w	r3, #4294967295
 801590a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801590c:	69bb      	ldr	r3, [r7, #24]
	}
 801590e:	4618      	mov	r0, r3
 8015910:	3720      	adds	r7, #32
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}

08015916 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8015916:	b580      	push	{r7, lr}
 8015918:	b088      	sub	sp, #32
 801591a:	af00      	add	r7, sp, #0
 801591c:	60f8      	str	r0, [r7, #12]
 801591e:	60b9      	str	r1, [r7, #8]
 8015920:	607a      	str	r2, [r7, #4]
 8015922:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8015924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801592e:	3b01      	subs	r3, #1
 8015930:	009b      	lsls	r3, r3, #2
 8015932:	4413      	add	r3, r2
 8015934:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	f023 0307 	bic.w	r3, r3, #7
 801593c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	f003 0307 	and.w	r3, r3, #7
 8015944:	2b00      	cmp	r3, #0
 8015946:	d009      	beq.n	801595c <prvInitialiseNewTask+0x46>
 8015948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594c:	f383 8811 	msr	BASEPRI, r3
 8015950:	f3bf 8f6f 	isb	sy
 8015954:	f3bf 8f4f 	dsb	sy
 8015958:	617b      	str	r3, [r7, #20]
 801595a:	e7fe      	b.n	801595a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801595c:	2300      	movs	r3, #0
 801595e:	61fb      	str	r3, [r7, #28]
 8015960:	e012      	b.n	8015988 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	69fb      	ldr	r3, [r7, #28]
 8015966:	4413      	add	r3, r2
 8015968:	7819      	ldrb	r1, [r3, #0]
 801596a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	4413      	add	r3, r2
 8015970:	3334      	adds	r3, #52	; 0x34
 8015972:	460a      	mov	r2, r1
 8015974:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8015976:	68ba      	ldr	r2, [r7, #8]
 8015978:	69fb      	ldr	r3, [r7, #28]
 801597a:	4413      	add	r3, r2
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d006      	beq.n	8015990 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	3301      	adds	r3, #1
 8015986:	61fb      	str	r3, [r7, #28]
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	2b0f      	cmp	r3, #15
 801598c:	d9e9      	bls.n	8015962 <prvInitialiseNewTask+0x4c>
 801598e:	e000      	b.n	8015992 <prvInitialiseNewTask+0x7c>
		{
			break;
 8015990:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015994:	2200      	movs	r2, #0
 8015996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599c:	2b06      	cmp	r3, #6
 801599e:	d901      	bls.n	80159a4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80159a0:	2306      	movs	r3, #6
 80159a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80159a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80159aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80159b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b2:	2200      	movs	r2, #0
 80159b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80159b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b8:	3304      	adds	r3, #4
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7ff f9ca 	bl	8014d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80159c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c2:	3318      	adds	r3, #24
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7ff f9c5 	bl	8014d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80159ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d2:	f1c3 0207 	rsb	r2, r3, #7
 80159d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80159e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e2:	2200      	movs	r2, #0
 80159e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80159e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e8:	2200      	movs	r2, #0
 80159ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	68f9      	ldr	r1, [r7, #12]
 80159f2:	69b8      	ldr	r0, [r7, #24]
 80159f4:	f000 fe54 	bl	80166a0 <pxPortInitialiseStack>
 80159f8:	4602      	mov	r2, r0
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d002      	beq.n	8015a0a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a0a:	bf00      	nop
 8015a0c:	3720      	adds	r7, #32
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
	...

08015a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015a1c:	f000 ff48 	bl	80168b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015a20:	4b2a      	ldr	r3, [pc, #168]	; (8015acc <prvAddNewTaskToReadyList+0xb8>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	3301      	adds	r3, #1
 8015a26:	4a29      	ldr	r2, [pc, #164]	; (8015acc <prvAddNewTaskToReadyList+0xb8>)
 8015a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015a2a:	4b29      	ldr	r3, [pc, #164]	; (8015ad0 <prvAddNewTaskToReadyList+0xbc>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d109      	bne.n	8015a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015a32:	4a27      	ldr	r2, [pc, #156]	; (8015ad0 <prvAddNewTaskToReadyList+0xbc>)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015a38:	4b24      	ldr	r3, [pc, #144]	; (8015acc <prvAddNewTaskToReadyList+0xb8>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d110      	bne.n	8015a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015a40:	f000 fbda 	bl	80161f8 <prvInitialiseTaskLists>
 8015a44:	e00d      	b.n	8015a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015a46:	4b23      	ldr	r3, [pc, #140]	; (8015ad4 <prvAddNewTaskToReadyList+0xc0>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d109      	bne.n	8015a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015a4e:	4b20      	ldr	r3, [pc, #128]	; (8015ad0 <prvAddNewTaskToReadyList+0xbc>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d802      	bhi.n	8015a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015a5c:	4a1c      	ldr	r2, [pc, #112]	; (8015ad0 <prvAddNewTaskToReadyList+0xbc>)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015a62:	4b1d      	ldr	r3, [pc, #116]	; (8015ad8 <prvAddNewTaskToReadyList+0xc4>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	3301      	adds	r3, #1
 8015a68:	4a1b      	ldr	r2, [pc, #108]	; (8015ad8 <prvAddNewTaskToReadyList+0xc4>)
 8015a6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a70:	2201      	movs	r2, #1
 8015a72:	409a      	lsls	r2, r3
 8015a74:	4b19      	ldr	r3, [pc, #100]	; (8015adc <prvAddNewTaskToReadyList+0xc8>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	4313      	orrs	r3, r2
 8015a7a:	4a18      	ldr	r2, [pc, #96]	; (8015adc <prvAddNewTaskToReadyList+0xc8>)
 8015a7c:	6013      	str	r3, [r2, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a82:	4613      	mov	r3, r2
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	4413      	add	r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4a15      	ldr	r2, [pc, #84]	; (8015ae0 <prvAddNewTaskToReadyList+0xcc>)
 8015a8c:	441a      	add	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	3304      	adds	r3, #4
 8015a92:	4619      	mov	r1, r3
 8015a94:	4610      	mov	r0, r2
 8015a96:	f7ff f96a 	bl	8014d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015a9a:	f000 ff37 	bl	801690c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015a9e:	4b0d      	ldr	r3, [pc, #52]	; (8015ad4 <prvAddNewTaskToReadyList+0xc0>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00e      	beq.n	8015ac4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015aa6:	4b0a      	ldr	r3, [pc, #40]	; (8015ad0 <prvAddNewTaskToReadyList+0xbc>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d207      	bcs.n	8015ac4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015ab4:	4b0b      	ldr	r3, [pc, #44]	; (8015ae4 <prvAddNewTaskToReadyList+0xd0>)
 8015ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aba:	601a      	str	r2, [r3, #0]
 8015abc:	f3bf 8f4f 	dsb	sy
 8015ac0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ac4:	bf00      	nop
 8015ac6:	3708      	adds	r7, #8
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}
 8015acc:	200004f0 	.word	0x200004f0
 8015ad0:	200003f0 	.word	0x200003f0
 8015ad4:	200004fc 	.word	0x200004fc
 8015ad8:	2000050c 	.word	0x2000050c
 8015adc:	200004f8 	.word	0x200004f8
 8015ae0:	200003f4 	.word	0x200003f4
 8015ae4:	e000ed04 	.word	0xe000ed04

08015ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015af0:	2300      	movs	r3, #0
 8015af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d016      	beq.n	8015b28 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015afa:	4b13      	ldr	r3, [pc, #76]	; (8015b48 <vTaskDelay+0x60>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d009      	beq.n	8015b16 <vTaskDelay+0x2e>
 8015b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b06:	f383 8811 	msr	BASEPRI, r3
 8015b0a:	f3bf 8f6f 	isb	sy
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	60bb      	str	r3, [r7, #8]
 8015b14:	e7fe      	b.n	8015b14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8015b16:	f000 f861 	bl	8015bdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 fd59 	bl	80165d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015b22:	f000 f869 	bl	8015bf8 <xTaskResumeAll>
 8015b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d107      	bne.n	8015b3e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8015b2e:	4b07      	ldr	r3, [pc, #28]	; (8015b4c <vTaskDelay+0x64>)
 8015b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b34:	601a      	str	r2, [r3, #0]
 8015b36:	f3bf 8f4f 	dsb	sy
 8015b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b3e:	bf00      	nop
 8015b40:	3710      	adds	r7, #16
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	20000518 	.word	0x20000518
 8015b4c:	e000ed04 	.word	0xe000ed04

08015b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015b56:	4b1b      	ldr	r3, [pc, #108]	; (8015bc4 <vTaskStartScheduler+0x74>)
 8015b58:	9301      	str	r3, [sp, #4]
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	9300      	str	r3, [sp, #0]
 8015b5e:	2300      	movs	r3, #0
 8015b60:	2280      	movs	r2, #128	; 0x80
 8015b62:	4919      	ldr	r1, [pc, #100]	; (8015bc8 <vTaskStartScheduler+0x78>)
 8015b64:	4819      	ldr	r0, [pc, #100]	; (8015bcc <vTaskStartScheduler+0x7c>)
 8015b66:	f7ff fe95 	bl	8015894 <xTaskCreate>
 8015b6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d115      	bne.n	8015b9e <vTaskStartScheduler+0x4e>
 8015b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b76:	f383 8811 	msr	BASEPRI, r3
 8015b7a:	f3bf 8f6f 	isb	sy
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015b84:	4b12      	ldr	r3, [pc, #72]	; (8015bd0 <vTaskStartScheduler+0x80>)
 8015b86:	f04f 32ff 	mov.w	r2, #4294967295
 8015b8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015b8c:	4b11      	ldr	r3, [pc, #68]	; (8015bd4 <vTaskStartScheduler+0x84>)
 8015b8e:	2201      	movs	r2, #1
 8015b90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015b92:	4b11      	ldr	r3, [pc, #68]	; (8015bd8 <vTaskStartScheduler+0x88>)
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015b98:	f000 fdfe 	bl	8016798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015b9c:	e00d      	b.n	8015bba <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ba4:	d109      	bne.n	8015bba <vTaskStartScheduler+0x6a>
 8015ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015baa:	f383 8811 	msr	BASEPRI, r3
 8015bae:	f3bf 8f6f 	isb	sy
 8015bb2:	f3bf 8f4f 	dsb	sy
 8015bb6:	607b      	str	r3, [r7, #4]
 8015bb8:	e7fe      	b.n	8015bb8 <vTaskStartScheduler+0x68>
}
 8015bba:	bf00      	nop
 8015bbc:	3710      	adds	r7, #16
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20000514 	.word	0x20000514
 8015bc8:	0801de00 	.word	0x0801de00
 8015bcc:	080161c9 	.word	0x080161c9
 8015bd0:	20000510 	.word	0x20000510
 8015bd4:	200004fc 	.word	0x200004fc
 8015bd8:	200004f4 	.word	0x200004f4

08015bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015bdc:	b480      	push	{r7}
 8015bde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015be0:	4b04      	ldr	r3, [pc, #16]	; (8015bf4 <vTaskSuspendAll+0x18>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	3301      	adds	r3, #1
 8015be6:	4a03      	ldr	r2, [pc, #12]	; (8015bf4 <vTaskSuspendAll+0x18>)
 8015be8:	6013      	str	r3, [r2, #0]
}
 8015bea:	bf00      	nop
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr
 8015bf4:	20000518 	.word	0x20000518

08015bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015c02:	2300      	movs	r3, #0
 8015c04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015c06:	4b41      	ldr	r3, [pc, #260]	; (8015d0c <xTaskResumeAll+0x114>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d109      	bne.n	8015c22 <xTaskResumeAll+0x2a>
 8015c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c12:	f383 8811 	msr	BASEPRI, r3
 8015c16:	f3bf 8f6f 	isb	sy
 8015c1a:	f3bf 8f4f 	dsb	sy
 8015c1e:	603b      	str	r3, [r7, #0]
 8015c20:	e7fe      	b.n	8015c20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015c22:	f000 fe45 	bl	80168b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015c26:	4b39      	ldr	r3, [pc, #228]	; (8015d0c <xTaskResumeAll+0x114>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	3b01      	subs	r3, #1
 8015c2c:	4a37      	ldr	r2, [pc, #220]	; (8015d0c <xTaskResumeAll+0x114>)
 8015c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c30:	4b36      	ldr	r3, [pc, #216]	; (8015d0c <xTaskResumeAll+0x114>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d161      	bne.n	8015cfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015c38:	4b35      	ldr	r3, [pc, #212]	; (8015d10 <xTaskResumeAll+0x118>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d05d      	beq.n	8015cfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015c40:	e02e      	b.n	8015ca0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015c42:	4b34      	ldr	r3, [pc, #208]	; (8015d14 <xTaskResumeAll+0x11c>)
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	3318      	adds	r3, #24
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7ff f8ea 	bl	8014e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	3304      	adds	r3, #4
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ff f8e5 	bl	8014e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c62:	2201      	movs	r2, #1
 8015c64:	409a      	lsls	r2, r3
 8015c66:	4b2c      	ldr	r3, [pc, #176]	; (8015d18 <xTaskResumeAll+0x120>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4313      	orrs	r3, r2
 8015c6c:	4a2a      	ldr	r2, [pc, #168]	; (8015d18 <xTaskResumeAll+0x120>)
 8015c6e:	6013      	str	r3, [r2, #0]
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c74:	4613      	mov	r3, r2
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	4413      	add	r3, r2
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	4a27      	ldr	r2, [pc, #156]	; (8015d1c <xTaskResumeAll+0x124>)
 8015c7e:	441a      	add	r2, r3
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	3304      	adds	r3, #4
 8015c84:	4619      	mov	r1, r3
 8015c86:	4610      	mov	r0, r2
 8015c88:	f7ff f871 	bl	8014d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c90:	4b23      	ldr	r3, [pc, #140]	; (8015d20 <xTaskResumeAll+0x128>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d302      	bcc.n	8015ca0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8015c9a:	4b22      	ldr	r3, [pc, #136]	; (8015d24 <xTaskResumeAll+0x12c>)
 8015c9c:	2201      	movs	r2, #1
 8015c9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015ca0:	4b1c      	ldr	r3, [pc, #112]	; (8015d14 <xTaskResumeAll+0x11c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1cc      	bne.n	8015c42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d001      	beq.n	8015cb2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015cae:	f000 fb2f 	bl	8016310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015cb2:	4b1d      	ldr	r3, [pc, #116]	; (8015d28 <xTaskResumeAll+0x130>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d010      	beq.n	8015ce0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015cbe:	f000 f859 	bl	8015d74 <xTaskIncrementTick>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d002      	beq.n	8015cce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8015cc8:	4b16      	ldr	r3, [pc, #88]	; (8015d24 <xTaskResumeAll+0x12c>)
 8015cca:	2201      	movs	r2, #1
 8015ccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	3b01      	subs	r3, #1
 8015cd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d1f1      	bne.n	8015cbe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8015cda:	4b13      	ldr	r3, [pc, #76]	; (8015d28 <xTaskResumeAll+0x130>)
 8015cdc:	2200      	movs	r2, #0
 8015cde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015ce0:	4b10      	ldr	r3, [pc, #64]	; (8015d24 <xTaskResumeAll+0x12c>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d009      	beq.n	8015cfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015cec:	4b0f      	ldr	r3, [pc, #60]	; (8015d2c <xTaskResumeAll+0x134>)
 8015cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cf2:	601a      	str	r2, [r3, #0]
 8015cf4:	f3bf 8f4f 	dsb	sy
 8015cf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015cfc:	f000 fe06 	bl	801690c <vPortExitCritical>

	return xAlreadyYielded;
 8015d00:	68bb      	ldr	r3, [r7, #8]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	20000518 	.word	0x20000518
 8015d10:	200004f0 	.word	0x200004f0
 8015d14:	200004b0 	.word	0x200004b0
 8015d18:	200004f8 	.word	0x200004f8
 8015d1c:	200003f4 	.word	0x200003f4
 8015d20:	200003f0 	.word	0x200003f0
 8015d24:	20000504 	.word	0x20000504
 8015d28:	20000500 	.word	0x20000500
 8015d2c:	e000ed04 	.word	0xe000ed04

08015d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015d36:	4b05      	ldr	r3, [pc, #20]	; (8015d4c <xTaskGetTickCount+0x1c>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015d3c:	687b      	ldr	r3, [r7, #4]
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	370c      	adds	r7, #12
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop
 8015d4c:	200004f4 	.word	0x200004f4

08015d50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b082      	sub	sp, #8
 8015d54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d56:	f000 fe7d 	bl	8016a54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015d5e:	4b04      	ldr	r3, [pc, #16]	; (8015d70 <xTaskGetTickCountFromISR+0x20>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d64:	683b      	ldr	r3, [r7, #0]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3708      	adds	r7, #8
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	200004f4 	.word	0x200004f4

08015d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d7e:	4b50      	ldr	r3, [pc, #320]	; (8015ec0 <xTaskIncrementTick+0x14c>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	f040 808c 	bne.w	8015ea0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8015d88:	4b4e      	ldr	r3, [pc, #312]	; (8015ec4 <xTaskIncrementTick+0x150>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015d90:	4a4c      	ldr	r2, [pc, #304]	; (8015ec4 <xTaskIncrementTick+0x150>)
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d11f      	bne.n	8015ddc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8015d9c:	4b4a      	ldr	r3, [pc, #296]	; (8015ec8 <xTaskIncrementTick+0x154>)
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d009      	beq.n	8015dba <xTaskIncrementTick+0x46>
 8015da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015daa:	f383 8811 	msr	BASEPRI, r3
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	603b      	str	r3, [r7, #0]
 8015db8:	e7fe      	b.n	8015db8 <xTaskIncrementTick+0x44>
 8015dba:	4b43      	ldr	r3, [pc, #268]	; (8015ec8 <xTaskIncrementTick+0x154>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	60fb      	str	r3, [r7, #12]
 8015dc0:	4b42      	ldr	r3, [pc, #264]	; (8015ecc <xTaskIncrementTick+0x158>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4a40      	ldr	r2, [pc, #256]	; (8015ec8 <xTaskIncrementTick+0x154>)
 8015dc6:	6013      	str	r3, [r2, #0]
 8015dc8:	4a40      	ldr	r2, [pc, #256]	; (8015ecc <xTaskIncrementTick+0x158>)
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6013      	str	r3, [r2, #0]
 8015dce:	4b40      	ldr	r3, [pc, #256]	; (8015ed0 <xTaskIncrementTick+0x15c>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	4a3e      	ldr	r2, [pc, #248]	; (8015ed0 <xTaskIncrementTick+0x15c>)
 8015dd6:	6013      	str	r3, [r2, #0]
 8015dd8:	f000 fa9a 	bl	8016310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ddc:	4b3d      	ldr	r3, [pc, #244]	; (8015ed4 <xTaskIncrementTick+0x160>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	693a      	ldr	r2, [r7, #16]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d34d      	bcc.n	8015e82 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015de6:	4b38      	ldr	r3, [pc, #224]	; (8015ec8 <xTaskIncrementTick+0x154>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d101      	bne.n	8015df4 <xTaskIncrementTick+0x80>
 8015df0:	2301      	movs	r3, #1
 8015df2:	e000      	b.n	8015df6 <xTaskIncrementTick+0x82>
 8015df4:	2300      	movs	r3, #0
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d004      	beq.n	8015e04 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dfa:	4b36      	ldr	r3, [pc, #216]	; (8015ed4 <xTaskIncrementTick+0x160>)
 8015dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8015e00:	601a      	str	r2, [r3, #0]
					break;
 8015e02:	e03e      	b.n	8015e82 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015e04:	4b30      	ldr	r3, [pc, #192]	; (8015ec8 <xTaskIncrementTick+0x154>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	68db      	ldr	r3, [r3, #12]
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015e14:	693a      	ldr	r2, [r7, #16]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d203      	bcs.n	8015e24 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015e1c:	4a2d      	ldr	r2, [pc, #180]	; (8015ed4 <xTaskIncrementTick+0x160>)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	6013      	str	r3, [r2, #0]
						break;
 8015e22:	e02e      	b.n	8015e82 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	3304      	adds	r3, #4
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7fe fffd 	bl	8014e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d004      	beq.n	8015e40 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	3318      	adds	r3, #24
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fe fff4 	bl	8014e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e44:	2201      	movs	r2, #1
 8015e46:	409a      	lsls	r2, r3
 8015e48:	4b23      	ldr	r3, [pc, #140]	; (8015ed8 <xTaskIncrementTick+0x164>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	4313      	orrs	r3, r2
 8015e4e:	4a22      	ldr	r2, [pc, #136]	; (8015ed8 <xTaskIncrementTick+0x164>)
 8015e50:	6013      	str	r3, [r2, #0]
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e56:	4613      	mov	r3, r2
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	4413      	add	r3, r2
 8015e5c:	009b      	lsls	r3, r3, #2
 8015e5e:	4a1f      	ldr	r2, [pc, #124]	; (8015edc <xTaskIncrementTick+0x168>)
 8015e60:	441a      	add	r2, r3
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	3304      	adds	r3, #4
 8015e66:	4619      	mov	r1, r3
 8015e68:	4610      	mov	r0, r2
 8015e6a:	f7fe ff80 	bl	8014d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e72:	4b1b      	ldr	r3, [pc, #108]	; (8015ee0 <xTaskIncrementTick+0x16c>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d3b4      	bcc.n	8015de6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e80:	e7b1      	b.n	8015de6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015e82:	4b17      	ldr	r3, [pc, #92]	; (8015ee0 <xTaskIncrementTick+0x16c>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e88:	4914      	ldr	r1, [pc, #80]	; (8015edc <xTaskIncrementTick+0x168>)
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4413      	add	r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	440b      	add	r3, r1
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d907      	bls.n	8015eaa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	617b      	str	r3, [r7, #20]
 8015e9e:	e004      	b.n	8015eaa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015ea0:	4b10      	ldr	r3, [pc, #64]	; (8015ee4 <xTaskIncrementTick+0x170>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	4a0f      	ldr	r2, [pc, #60]	; (8015ee4 <xTaskIncrementTick+0x170>)
 8015ea8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015eaa:	4b0f      	ldr	r3, [pc, #60]	; (8015ee8 <xTaskIncrementTick+0x174>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d001      	beq.n	8015eb6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015eb6:	697b      	ldr	r3, [r7, #20]
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3718      	adds	r7, #24
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	20000518 	.word	0x20000518
 8015ec4:	200004f4 	.word	0x200004f4
 8015ec8:	200004a8 	.word	0x200004a8
 8015ecc:	200004ac 	.word	0x200004ac
 8015ed0:	20000508 	.word	0x20000508
 8015ed4:	20000510 	.word	0x20000510
 8015ed8:	200004f8 	.word	0x200004f8
 8015edc:	200003f4 	.word	0x200003f4
 8015ee0:	200003f0 	.word	0x200003f0
 8015ee4:	20000500 	.word	0x20000500
 8015ee8:	20000504 	.word	0x20000504

08015eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015eec:	b480      	push	{r7}
 8015eee:	b087      	sub	sp, #28
 8015ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ef2:	4b26      	ldr	r3, [pc, #152]	; (8015f8c <vTaskSwitchContext+0xa0>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d003      	beq.n	8015f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015efa:	4b25      	ldr	r3, [pc, #148]	; (8015f90 <vTaskSwitchContext+0xa4>)
 8015efc:	2201      	movs	r2, #1
 8015efe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015f00:	e03e      	b.n	8015f80 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8015f02:	4b23      	ldr	r3, [pc, #140]	; (8015f90 <vTaskSwitchContext+0xa4>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015f08:	4b22      	ldr	r3, [pc, #136]	; (8015f94 <vTaskSwitchContext+0xa8>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	fab3 f383 	clz	r3, r3
 8015f14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015f16:	7afb      	ldrb	r3, [r7, #11]
 8015f18:	f1c3 031f 	rsb	r3, r3, #31
 8015f1c:	617b      	str	r3, [r7, #20]
 8015f1e:	491e      	ldr	r1, [pc, #120]	; (8015f98 <vTaskSwitchContext+0xac>)
 8015f20:	697a      	ldr	r2, [r7, #20]
 8015f22:	4613      	mov	r3, r2
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	4413      	add	r3, r2
 8015f28:	009b      	lsls	r3, r3, #2
 8015f2a:	440b      	add	r3, r1
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d109      	bne.n	8015f46 <vTaskSwitchContext+0x5a>
	__asm volatile
 8015f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f36:	f383 8811 	msr	BASEPRI, r3
 8015f3a:	f3bf 8f6f 	isb	sy
 8015f3e:	f3bf 8f4f 	dsb	sy
 8015f42:	607b      	str	r3, [r7, #4]
 8015f44:	e7fe      	b.n	8015f44 <vTaskSwitchContext+0x58>
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	4413      	add	r3, r2
 8015f4e:	009b      	lsls	r3, r3, #2
 8015f50:	4a11      	ldr	r2, [pc, #68]	; (8015f98 <vTaskSwitchContext+0xac>)
 8015f52:	4413      	add	r3, r2
 8015f54:	613b      	str	r3, [r7, #16]
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	685a      	ldr	r2, [r3, #4]
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	605a      	str	r2, [r3, #4]
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	685a      	ldr	r2, [r3, #4]
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	3308      	adds	r3, #8
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d104      	bne.n	8015f76 <vTaskSwitchContext+0x8a>
 8015f6c:	693b      	ldr	r3, [r7, #16]
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	685a      	ldr	r2, [r3, #4]
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	605a      	str	r2, [r3, #4]
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	685b      	ldr	r3, [r3, #4]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	4a07      	ldr	r2, [pc, #28]	; (8015f9c <vTaskSwitchContext+0xb0>)
 8015f7e:	6013      	str	r3, [r2, #0]
}
 8015f80:	bf00      	nop
 8015f82:	371c      	adds	r7, #28
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr
 8015f8c:	20000518 	.word	0x20000518
 8015f90:	20000504 	.word	0x20000504
 8015f94:	200004f8 	.word	0x200004f8
 8015f98:	200003f4 	.word	0x200003f4
 8015f9c:	200003f0 	.word	0x200003f0

08015fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b084      	sub	sp, #16
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d109      	bne.n	8015fc4 <vTaskPlaceOnEventList+0x24>
 8015fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb4:	f383 8811 	msr	BASEPRI, r3
 8015fb8:	f3bf 8f6f 	isb	sy
 8015fbc:	f3bf 8f4f 	dsb	sy
 8015fc0:	60fb      	str	r3, [r7, #12]
 8015fc2:	e7fe      	b.n	8015fc2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015fc4:	4b07      	ldr	r3, [pc, #28]	; (8015fe4 <vTaskPlaceOnEventList+0x44>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	3318      	adds	r3, #24
 8015fca:	4619      	mov	r1, r3
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7fe fef2 	bl	8014db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015fd2:	2101      	movs	r1, #1
 8015fd4:	6838      	ldr	r0, [r7, #0]
 8015fd6:	f000 fafd 	bl	80165d4 <prvAddCurrentTaskToDelayedList>
}
 8015fda:	bf00      	nop
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	200003f0 	.word	0x200003f0

08015fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b086      	sub	sp, #24
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68db      	ldr	r3, [r3, #12]
 8015ff4:	68db      	ldr	r3, [r3, #12]
 8015ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d109      	bne.n	8016012 <xTaskRemoveFromEventList+0x2a>
 8015ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016002:	f383 8811 	msr	BASEPRI, r3
 8016006:	f3bf 8f6f 	isb	sy
 801600a:	f3bf 8f4f 	dsb	sy
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	e7fe      	b.n	8016010 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	3318      	adds	r3, #24
 8016016:	4618      	mov	r0, r3
 8016018:	f7fe ff06 	bl	8014e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801601c:	4b1d      	ldr	r3, [pc, #116]	; (8016094 <xTaskRemoveFromEventList+0xac>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d11c      	bne.n	801605e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	3304      	adds	r3, #4
 8016028:	4618      	mov	r0, r3
 801602a:	f7fe fefd 	bl	8014e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016032:	2201      	movs	r2, #1
 8016034:	409a      	lsls	r2, r3
 8016036:	4b18      	ldr	r3, [pc, #96]	; (8016098 <xTaskRemoveFromEventList+0xb0>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4313      	orrs	r3, r2
 801603c:	4a16      	ldr	r2, [pc, #88]	; (8016098 <xTaskRemoveFromEventList+0xb0>)
 801603e:	6013      	str	r3, [r2, #0]
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016044:	4613      	mov	r3, r2
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	4413      	add	r3, r2
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	4a13      	ldr	r2, [pc, #76]	; (801609c <xTaskRemoveFromEventList+0xb4>)
 801604e:	441a      	add	r2, r3
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	3304      	adds	r3, #4
 8016054:	4619      	mov	r1, r3
 8016056:	4610      	mov	r0, r2
 8016058:	f7fe fe89 	bl	8014d6e <vListInsertEnd>
 801605c:	e005      	b.n	801606a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	3318      	adds	r3, #24
 8016062:	4619      	mov	r1, r3
 8016064:	480e      	ldr	r0, [pc, #56]	; (80160a0 <xTaskRemoveFromEventList+0xb8>)
 8016066:	f7fe fe82 	bl	8014d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801606e:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <xTaskRemoveFromEventList+0xbc>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016074:	429a      	cmp	r2, r3
 8016076:	d905      	bls.n	8016084 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016078:	2301      	movs	r3, #1
 801607a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801607c:	4b0a      	ldr	r3, [pc, #40]	; (80160a8 <xTaskRemoveFromEventList+0xc0>)
 801607e:	2201      	movs	r2, #1
 8016080:	601a      	str	r2, [r3, #0]
 8016082:	e001      	b.n	8016088 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8016084:	2300      	movs	r3, #0
 8016086:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016088:	697b      	ldr	r3, [r7, #20]
}
 801608a:	4618      	mov	r0, r3
 801608c:	3718      	adds	r7, #24
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	20000518 	.word	0x20000518
 8016098:	200004f8 	.word	0x200004f8
 801609c:	200003f4 	.word	0x200003f4
 80160a0:	200004b0 	.word	0x200004b0
 80160a4:	200003f0 	.word	0x200003f0
 80160a8:	20000504 	.word	0x20000504

080160ac <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80160ac:	b480      	push	{r7}
 80160ae:	b085      	sub	sp, #20
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d109      	bne.n	80160ce <vTaskSetTimeOutState+0x22>
 80160ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160be:	f383 8811 	msr	BASEPRI, r3
 80160c2:	f3bf 8f6f 	isb	sy
 80160c6:	f3bf 8f4f 	dsb	sy
 80160ca:	60fb      	str	r3, [r7, #12]
 80160cc:	e7fe      	b.n	80160cc <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80160ce:	4b07      	ldr	r3, [pc, #28]	; (80160ec <vTaskSetTimeOutState+0x40>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80160d6:	4b06      	ldr	r3, [pc, #24]	; (80160f0 <vTaskSetTimeOutState+0x44>)
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	605a      	str	r2, [r3, #4]
}
 80160de:	bf00      	nop
 80160e0:	3714      	adds	r7, #20
 80160e2:	46bd      	mov	sp, r7
 80160e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e8:	4770      	bx	lr
 80160ea:	bf00      	nop
 80160ec:	20000508 	.word	0x20000508
 80160f0:	200004f4 	.word	0x200004f4

080160f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d109      	bne.n	8016118 <xTaskCheckForTimeOut+0x24>
 8016104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016108:	f383 8811 	msr	BASEPRI, r3
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	f3bf 8f4f 	dsb	sy
 8016114:	60fb      	str	r3, [r7, #12]
 8016116:	e7fe      	b.n	8016116 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d109      	bne.n	8016132 <xTaskCheckForTimeOut+0x3e>
 801611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	60bb      	str	r3, [r7, #8]
 8016130:	e7fe      	b.n	8016130 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016132:	f000 fbbd 	bl	80168b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016136:	4b1c      	ldr	r3, [pc, #112]	; (80161a8 <xTaskCheckForTimeOut+0xb4>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016144:	d102      	bne.n	801614c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016146:	2300      	movs	r3, #0
 8016148:	617b      	str	r3, [r7, #20]
 801614a:	e026      	b.n	801619a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	4b16      	ldr	r3, [pc, #88]	; (80161ac <xTaskCheckForTimeOut+0xb8>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	429a      	cmp	r2, r3
 8016156:	d007      	beq.n	8016168 <xTaskCheckForTimeOut+0x74>
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	693a      	ldr	r2, [r7, #16]
 801615e:	429a      	cmp	r2, r3
 8016160:	d302      	bcc.n	8016168 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016162:	2301      	movs	r3, #1
 8016164:	617b      	str	r3, [r7, #20]
 8016166:	e018      	b.n	801619a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	693a      	ldr	r2, [r7, #16]
 801616e:	1ad2      	subs	r2, r2, r3
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	429a      	cmp	r2, r3
 8016176:	d20e      	bcs.n	8016196 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6859      	ldr	r1, [r3, #4]
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	1acb      	subs	r3, r1, r3
 8016184:	441a      	add	r2, r3
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7ff ff8e 	bl	80160ac <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8016190:	2300      	movs	r3, #0
 8016192:	617b      	str	r3, [r7, #20]
 8016194:	e001      	b.n	801619a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8016196:	2301      	movs	r3, #1
 8016198:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801619a:	f000 fbb7 	bl	801690c <vPortExitCritical>

	return xReturn;
 801619e:	697b      	ldr	r3, [r7, #20]
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3718      	adds	r7, #24
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	200004f4 	.word	0x200004f4
 80161ac:	20000508 	.word	0x20000508

080161b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80161b0:	b480      	push	{r7}
 80161b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80161b4:	4b03      	ldr	r3, [pc, #12]	; (80161c4 <vTaskMissedYield+0x14>)
 80161b6:	2201      	movs	r2, #1
 80161b8:	601a      	str	r2, [r3, #0]
}
 80161ba:	bf00      	nop
 80161bc:	46bd      	mov	sp, r7
 80161be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c2:	4770      	bx	lr
 80161c4:	20000504 	.word	0x20000504

080161c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80161d0:	f000 f852 	bl	8016278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80161d4:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <prvIdleTask+0x28>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d9f9      	bls.n	80161d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80161dc:	4b05      	ldr	r3, [pc, #20]	; (80161f4 <prvIdleTask+0x2c>)
 80161de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161e2:	601a      	str	r2, [r3, #0]
 80161e4:	f3bf 8f4f 	dsb	sy
 80161e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80161ec:	e7f0      	b.n	80161d0 <prvIdleTask+0x8>
 80161ee:	bf00      	nop
 80161f0:	200003f4 	.word	0x200003f4
 80161f4:	e000ed04 	.word	0xe000ed04

080161f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80161fe:	2300      	movs	r3, #0
 8016200:	607b      	str	r3, [r7, #4]
 8016202:	e00c      	b.n	801621e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	4613      	mov	r3, r2
 8016208:	009b      	lsls	r3, r3, #2
 801620a:	4413      	add	r3, r2
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	4a12      	ldr	r2, [pc, #72]	; (8016258 <prvInitialiseTaskLists+0x60>)
 8016210:	4413      	add	r3, r2
 8016212:	4618      	mov	r0, r3
 8016214:	f7fe fd7e 	bl	8014d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	3301      	adds	r3, #1
 801621c:	607b      	str	r3, [r7, #4]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2b06      	cmp	r3, #6
 8016222:	d9ef      	bls.n	8016204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016224:	480d      	ldr	r0, [pc, #52]	; (801625c <prvInitialiseTaskLists+0x64>)
 8016226:	f7fe fd75 	bl	8014d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801622a:	480d      	ldr	r0, [pc, #52]	; (8016260 <prvInitialiseTaskLists+0x68>)
 801622c:	f7fe fd72 	bl	8014d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016230:	480c      	ldr	r0, [pc, #48]	; (8016264 <prvInitialiseTaskLists+0x6c>)
 8016232:	f7fe fd6f 	bl	8014d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016236:	480c      	ldr	r0, [pc, #48]	; (8016268 <prvInitialiseTaskLists+0x70>)
 8016238:	f7fe fd6c 	bl	8014d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801623c:	480b      	ldr	r0, [pc, #44]	; (801626c <prvInitialiseTaskLists+0x74>)
 801623e:	f7fe fd69 	bl	8014d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016242:	4b0b      	ldr	r3, [pc, #44]	; (8016270 <prvInitialiseTaskLists+0x78>)
 8016244:	4a05      	ldr	r2, [pc, #20]	; (801625c <prvInitialiseTaskLists+0x64>)
 8016246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016248:	4b0a      	ldr	r3, [pc, #40]	; (8016274 <prvInitialiseTaskLists+0x7c>)
 801624a:	4a05      	ldr	r2, [pc, #20]	; (8016260 <prvInitialiseTaskLists+0x68>)
 801624c:	601a      	str	r2, [r3, #0]
}
 801624e:	bf00      	nop
 8016250:	3708      	adds	r7, #8
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	200003f4 	.word	0x200003f4
 801625c:	20000480 	.word	0x20000480
 8016260:	20000494 	.word	0x20000494
 8016264:	200004b0 	.word	0x200004b0
 8016268:	200004c4 	.word	0x200004c4
 801626c:	200004dc 	.word	0x200004dc
 8016270:	200004a8 	.word	0x200004a8
 8016274:	200004ac 	.word	0x200004ac

08016278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801627e:	e028      	b.n	80162d2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016280:	f7ff fcac 	bl	8015bdc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016284:	4b17      	ldr	r3, [pc, #92]	; (80162e4 <prvCheckTasksWaitingTermination+0x6c>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	bf0c      	ite	eq
 801628c:	2301      	moveq	r3, #1
 801628e:	2300      	movne	r3, #0
 8016290:	b2db      	uxtb	r3, r3
 8016292:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016294:	f7ff fcb0 	bl	8015bf8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d119      	bne.n	80162d2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 801629e:	f000 fb07 	bl	80168b0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80162a2:	4b10      	ldr	r3, [pc, #64]	; (80162e4 <prvCheckTasksWaitingTermination+0x6c>)
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	3304      	adds	r3, #4
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe fdba 	bl	8014e28 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80162b4:	4b0c      	ldr	r3, [pc, #48]	; (80162e8 <prvCheckTasksWaitingTermination+0x70>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	3b01      	subs	r3, #1
 80162ba:	4a0b      	ldr	r2, [pc, #44]	; (80162e8 <prvCheckTasksWaitingTermination+0x70>)
 80162bc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80162be:	4b0b      	ldr	r3, [pc, #44]	; (80162ec <prvCheckTasksWaitingTermination+0x74>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	3b01      	subs	r3, #1
 80162c4:	4a09      	ldr	r2, [pc, #36]	; (80162ec <prvCheckTasksWaitingTermination+0x74>)
 80162c6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80162c8:	f000 fb20 	bl	801690c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80162cc:	6838      	ldr	r0, [r7, #0]
 80162ce:	f000 f80f 	bl	80162f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80162d2:	4b06      	ldr	r3, [pc, #24]	; (80162ec <prvCheckTasksWaitingTermination+0x74>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d1d2      	bne.n	8016280 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	200004c4 	.word	0x200004c4
 80162e8:	200004f0 	.word	0x200004f0
 80162ec:	200004d8 	.word	0x200004d8

080162f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162fc:	4618      	mov	r0, r3
 80162fe:	f000 fca9 	bl	8016c54 <vPortFree>
			vPortFree( pxTCB );
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fca6 	bl	8016c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016308:	bf00      	nop
 801630a:	3708      	adds	r7, #8
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016316:	4b0f      	ldr	r3, [pc, #60]	; (8016354 <prvResetNextTaskUnblockTime+0x44>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d101      	bne.n	8016324 <prvResetNextTaskUnblockTime+0x14>
 8016320:	2301      	movs	r3, #1
 8016322:	e000      	b.n	8016326 <prvResetNextTaskUnblockTime+0x16>
 8016324:	2300      	movs	r3, #0
 8016326:	2b00      	cmp	r3, #0
 8016328:	d004      	beq.n	8016334 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801632a:	4b0b      	ldr	r3, [pc, #44]	; (8016358 <prvResetNextTaskUnblockTime+0x48>)
 801632c:	f04f 32ff 	mov.w	r2, #4294967295
 8016330:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016332:	e008      	b.n	8016346 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016334:	4b07      	ldr	r3, [pc, #28]	; (8016354 <prvResetNextTaskUnblockTime+0x44>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	68db      	ldr	r3, [r3, #12]
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	4a05      	ldr	r2, [pc, #20]	; (8016358 <prvResetNextTaskUnblockTime+0x48>)
 8016344:	6013      	str	r3, [r2, #0]
}
 8016346:	bf00      	nop
 8016348:	370c      	adds	r7, #12
 801634a:	46bd      	mov	sp, r7
 801634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop
 8016354:	200004a8 	.word	0x200004a8
 8016358:	20000510 	.word	0x20000510

0801635c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016362:	4b05      	ldr	r3, [pc, #20]	; (8016378 <xTaskGetCurrentTaskHandle+0x1c>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016368:	687b      	ldr	r3, [r7, #4]
	}
 801636a:	4618      	mov	r0, r3
 801636c:	370c      	adds	r7, #12
 801636e:	46bd      	mov	sp, r7
 8016370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop
 8016378:	200003f0 	.word	0x200003f0

0801637c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801637c:	b480      	push	{r7}
 801637e:	b083      	sub	sp, #12
 8016380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016382:	4b0b      	ldr	r3, [pc, #44]	; (80163b0 <xTaskGetSchedulerState+0x34>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d102      	bne.n	8016390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801638a:	2301      	movs	r3, #1
 801638c:	607b      	str	r3, [r7, #4]
 801638e:	e008      	b.n	80163a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016390:	4b08      	ldr	r3, [pc, #32]	; (80163b4 <xTaskGetSchedulerState+0x38>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d102      	bne.n	801639e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016398:	2302      	movs	r3, #2
 801639a:	607b      	str	r3, [r7, #4]
 801639c:	e001      	b.n	80163a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801639e:	2300      	movs	r3, #0
 80163a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80163a2:	687b      	ldr	r3, [r7, #4]
	}
 80163a4:	4618      	mov	r0, r3
 80163a6:	370c      	adds	r7, #12
 80163a8:	46bd      	mov	sp, r7
 80163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ae:	4770      	bx	lr
 80163b0:	200004fc 	.word	0x200004fc
 80163b4:	20000518 	.word	0x20000518

080163b8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d062      	beq.n	8016490 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163ce:	4b32      	ldr	r3, [pc, #200]	; (8016498 <vTaskPriorityInherit+0xe0>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d25b      	bcs.n	8016490 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	699b      	ldr	r3, [r3, #24]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	db06      	blt.n	80163ee <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163e0:	4b2d      	ldr	r3, [pc, #180]	; (8016498 <vTaskPriorityInherit+0xe0>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163e6:	f1c3 0207 	rsb	r2, r3, #7
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6959      	ldr	r1, [r3, #20]
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163f6:	4613      	mov	r3, r2
 80163f8:	009b      	lsls	r3, r3, #2
 80163fa:	4413      	add	r3, r2
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	4a27      	ldr	r2, [pc, #156]	; (801649c <vTaskPriorityInherit+0xe4>)
 8016400:	4413      	add	r3, r2
 8016402:	4299      	cmp	r1, r3
 8016404:	d101      	bne.n	801640a <vTaskPriorityInherit+0x52>
 8016406:	2301      	movs	r3, #1
 8016408:	e000      	b.n	801640c <vTaskPriorityInherit+0x54>
 801640a:	2300      	movs	r3, #0
 801640c:	2b00      	cmp	r3, #0
 801640e:	d03a      	beq.n	8016486 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	3304      	adds	r3, #4
 8016414:	4618      	mov	r0, r3
 8016416:	f7fe fd07 	bl	8014e28 <uxListRemove>
 801641a:	4603      	mov	r3, r0
 801641c:	2b00      	cmp	r3, #0
 801641e:	d115      	bne.n	801644c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016424:	491d      	ldr	r1, [pc, #116]	; (801649c <vTaskPriorityInherit+0xe4>)
 8016426:	4613      	mov	r3, r2
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	4413      	add	r3, r2
 801642c:	009b      	lsls	r3, r3, #2
 801642e:	440b      	add	r3, r1
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d10a      	bne.n	801644c <vTaskPriorityInherit+0x94>
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801643a:	2201      	movs	r2, #1
 801643c:	fa02 f303 	lsl.w	r3, r2, r3
 8016440:	43da      	mvns	r2, r3
 8016442:	4b17      	ldr	r3, [pc, #92]	; (80164a0 <vTaskPriorityInherit+0xe8>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4013      	ands	r3, r2
 8016448:	4a15      	ldr	r2, [pc, #84]	; (80164a0 <vTaskPriorityInherit+0xe8>)
 801644a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801644c:	4b12      	ldr	r3, [pc, #72]	; (8016498 <vTaskPriorityInherit+0xe0>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801645a:	2201      	movs	r2, #1
 801645c:	409a      	lsls	r2, r3
 801645e:	4b10      	ldr	r3, [pc, #64]	; (80164a0 <vTaskPriorityInherit+0xe8>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4313      	orrs	r3, r2
 8016464:	4a0e      	ldr	r2, [pc, #56]	; (80164a0 <vTaskPriorityInherit+0xe8>)
 8016466:	6013      	str	r3, [r2, #0]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801646c:	4613      	mov	r3, r2
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	4413      	add	r3, r2
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	4a09      	ldr	r2, [pc, #36]	; (801649c <vTaskPriorityInherit+0xe4>)
 8016476:	441a      	add	r2, r3
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	3304      	adds	r3, #4
 801647c:	4619      	mov	r1, r3
 801647e:	4610      	mov	r0, r2
 8016480:	f7fe fc75 	bl	8014d6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016484:	e004      	b.n	8016490 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016486:	4b04      	ldr	r3, [pc, #16]	; (8016498 <vTaskPriorityInherit+0xe0>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8016490:	bf00      	nop
 8016492:	3710      	adds	r7, #16
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}
 8016498:	200003f0 	.word	0x200003f0
 801649c:	200003f4 	.word	0x200003f4
 80164a0:	200004f8 	.word	0x200004f8

080164a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b086      	sub	sp, #24
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80164b0:	2300      	movs	r3, #0
 80164b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d06c      	beq.n	8016594 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80164ba:	4b39      	ldr	r3, [pc, #228]	; (80165a0 <xTaskPriorityDisinherit+0xfc>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	693a      	ldr	r2, [r7, #16]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d009      	beq.n	80164d8 <xTaskPriorityDisinherit+0x34>
 80164c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c8:	f383 8811 	msr	BASEPRI, r3
 80164cc:	f3bf 8f6f 	isb	sy
 80164d0:	f3bf 8f4f 	dsb	sy
 80164d4:	60fb      	str	r3, [r7, #12]
 80164d6:	e7fe      	b.n	80164d6 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d109      	bne.n	80164f4 <xTaskPriorityDisinherit+0x50>
 80164e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e4:	f383 8811 	msr	BASEPRI, r3
 80164e8:	f3bf 8f6f 	isb	sy
 80164ec:	f3bf 8f4f 	dsb	sy
 80164f0:	60bb      	str	r3, [r7, #8]
 80164f2:	e7fe      	b.n	80164f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80164f4:	693b      	ldr	r3, [r7, #16]
 80164f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164f8:	1e5a      	subs	r2, r3, #1
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016502:	693b      	ldr	r3, [r7, #16]
 8016504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016506:	429a      	cmp	r2, r3
 8016508:	d044      	beq.n	8016594 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801650e:	2b00      	cmp	r3, #0
 8016510:	d140      	bne.n	8016594 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	3304      	adds	r3, #4
 8016516:	4618      	mov	r0, r3
 8016518:	f7fe fc86 	bl	8014e28 <uxListRemove>
 801651c:	4603      	mov	r3, r0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d115      	bne.n	801654e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016526:	491f      	ldr	r1, [pc, #124]	; (80165a4 <xTaskPriorityDisinherit+0x100>)
 8016528:	4613      	mov	r3, r2
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	4413      	add	r3, r2
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	440b      	add	r3, r1
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d10a      	bne.n	801654e <xTaskPriorityDisinherit+0xaa>
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801653c:	2201      	movs	r2, #1
 801653e:	fa02 f303 	lsl.w	r3, r2, r3
 8016542:	43da      	mvns	r2, r3
 8016544:	4b18      	ldr	r3, [pc, #96]	; (80165a8 <xTaskPriorityDisinherit+0x104>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	4013      	ands	r3, r2
 801654a:	4a17      	ldr	r2, [pc, #92]	; (80165a8 <xTaskPriorityDisinherit+0x104>)
 801654c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801655a:	f1c3 0207 	rsb	r2, r3, #7
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016566:	2201      	movs	r2, #1
 8016568:	409a      	lsls	r2, r3
 801656a:	4b0f      	ldr	r3, [pc, #60]	; (80165a8 <xTaskPriorityDisinherit+0x104>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4313      	orrs	r3, r2
 8016570:	4a0d      	ldr	r2, [pc, #52]	; (80165a8 <xTaskPriorityDisinherit+0x104>)
 8016572:	6013      	str	r3, [r2, #0]
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016578:	4613      	mov	r3, r2
 801657a:	009b      	lsls	r3, r3, #2
 801657c:	4413      	add	r3, r2
 801657e:	009b      	lsls	r3, r3, #2
 8016580:	4a08      	ldr	r2, [pc, #32]	; (80165a4 <xTaskPriorityDisinherit+0x100>)
 8016582:	441a      	add	r2, r3
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	3304      	adds	r3, #4
 8016588:	4619      	mov	r1, r3
 801658a:	4610      	mov	r0, r2
 801658c:	f7fe fbef 	bl	8014d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016590:	2301      	movs	r3, #1
 8016592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016594:	697b      	ldr	r3, [r7, #20]
	}
 8016596:	4618      	mov	r0, r3
 8016598:	3718      	adds	r7, #24
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	200003f0 	.word	0x200003f0
 80165a4:	200003f4 	.word	0x200003f4
 80165a8:	200004f8 	.word	0x200004f8

080165ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80165ac:	b480      	push	{r7}
 80165ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80165b0:	4b07      	ldr	r3, [pc, #28]	; (80165d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d004      	beq.n	80165c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80165b8:	4b05      	ldr	r3, [pc, #20]	; (80165d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80165be:	3201      	adds	r2, #1
 80165c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80165c2:	4b03      	ldr	r3, [pc, #12]	; (80165d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80165c4:	681b      	ldr	r3, [r3, #0]
	}
 80165c6:	4618      	mov	r0, r3
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr
 80165d0:	200003f0 	.word	0x200003f0

080165d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80165de:	4b29      	ldr	r3, [pc, #164]	; (8016684 <prvAddCurrentTaskToDelayedList+0xb0>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80165e4:	4b28      	ldr	r3, [pc, #160]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	3304      	adds	r3, #4
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7fe fc1c 	bl	8014e28 <uxListRemove>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d10b      	bne.n	801660e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80165f6:	4b24      	ldr	r3, [pc, #144]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165fc:	2201      	movs	r2, #1
 80165fe:	fa02 f303 	lsl.w	r3, r2, r3
 8016602:	43da      	mvns	r2, r3
 8016604:	4b21      	ldr	r3, [pc, #132]	; (801668c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	4013      	ands	r3, r2
 801660a:	4a20      	ldr	r2, [pc, #128]	; (801668c <prvAddCurrentTaskToDelayedList+0xb8>)
 801660c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016614:	d10a      	bne.n	801662c <prvAddCurrentTaskToDelayedList+0x58>
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d007      	beq.n	801662c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801661c:	4b1a      	ldr	r3, [pc, #104]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	3304      	adds	r3, #4
 8016622:	4619      	mov	r1, r3
 8016624:	481a      	ldr	r0, [pc, #104]	; (8016690 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016626:	f7fe fba2 	bl	8014d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801662a:	e026      	b.n	801667a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801662c:	68fa      	ldr	r2, [r7, #12]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	4413      	add	r3, r2
 8016632:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016634:	4b14      	ldr	r3, [pc, #80]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	68ba      	ldr	r2, [r7, #8]
 801663a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801663c:	68ba      	ldr	r2, [r7, #8]
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	429a      	cmp	r2, r3
 8016642:	d209      	bcs.n	8016658 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016644:	4b13      	ldr	r3, [pc, #76]	; (8016694 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	4b0f      	ldr	r3, [pc, #60]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	3304      	adds	r3, #4
 801664e:	4619      	mov	r1, r3
 8016650:	4610      	mov	r0, r2
 8016652:	f7fe fbb0 	bl	8014db6 <vListInsert>
}
 8016656:	e010      	b.n	801667a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016658:	4b0f      	ldr	r3, [pc, #60]	; (8016698 <prvAddCurrentTaskToDelayedList+0xc4>)
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	4b0a      	ldr	r3, [pc, #40]	; (8016688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	3304      	adds	r3, #4
 8016662:	4619      	mov	r1, r3
 8016664:	4610      	mov	r0, r2
 8016666:	f7fe fba6 	bl	8014db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801666a:	4b0c      	ldr	r3, [pc, #48]	; (801669c <prvAddCurrentTaskToDelayedList+0xc8>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	68ba      	ldr	r2, [r7, #8]
 8016670:	429a      	cmp	r2, r3
 8016672:	d202      	bcs.n	801667a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016674:	4a09      	ldr	r2, [pc, #36]	; (801669c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	6013      	str	r3, [r2, #0]
}
 801667a:	bf00      	nop
 801667c:	3710      	adds	r7, #16
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
 8016682:	bf00      	nop
 8016684:	200004f4 	.word	0x200004f4
 8016688:	200003f0 	.word	0x200003f0
 801668c:	200004f8 	.word	0x200004f8
 8016690:	200004dc 	.word	0x200004dc
 8016694:	200004ac 	.word	0x200004ac
 8016698:	200004a8 	.word	0x200004a8
 801669c:	20000510 	.word	0x20000510

080166a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80166a0:	b480      	push	{r7}
 80166a2:	b085      	sub	sp, #20
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	3b04      	subs	r3, #4
 80166b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80166b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	3b04      	subs	r3, #4
 80166be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	f023 0201 	bic.w	r2, r3, #1
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	3b04      	subs	r3, #4
 80166ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80166d0:	4a0c      	ldr	r2, [pc, #48]	; (8016704 <pxPortInitialiseStack+0x64>)
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	3b14      	subs	r3, #20
 80166da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	3b04      	subs	r3, #4
 80166e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	f06f 0202 	mvn.w	r2, #2
 80166ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	3b20      	subs	r3, #32
 80166f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80166f6:	68fb      	ldr	r3, [r7, #12]
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3714      	adds	r7, #20
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	08016709 	.word	0x08016709

08016708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016708:	b480      	push	{r7}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801670e:	4b0c      	ldr	r3, [pc, #48]	; (8016740 <prvTaskExitError+0x38>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016716:	d009      	beq.n	801672c <prvTaskExitError+0x24>
 8016718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671c:	f383 8811 	msr	BASEPRI, r3
 8016720:	f3bf 8f6f 	isb	sy
 8016724:	f3bf 8f4f 	dsb	sy
 8016728:	607b      	str	r3, [r7, #4]
 801672a:	e7fe      	b.n	801672a <prvTaskExitError+0x22>
 801672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016730:	f383 8811 	msr	BASEPRI, r3
 8016734:	f3bf 8f6f 	isb	sy
 8016738:	f3bf 8f4f 	dsb	sy
 801673c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 801673e:	e7fe      	b.n	801673e <prvTaskExitError+0x36>
 8016740:	20000068 	.word	0x20000068
	...

08016750 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016750:	4b07      	ldr	r3, [pc, #28]	; (8016770 <pxCurrentTCBConst2>)
 8016752:	6819      	ldr	r1, [r3, #0]
 8016754:	6808      	ldr	r0, [r1, #0]
 8016756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675a:	f380 8809 	msr	PSP, r0
 801675e:	f3bf 8f6f 	isb	sy
 8016762:	f04f 0000 	mov.w	r0, #0
 8016766:	f380 8811 	msr	BASEPRI, r0
 801676a:	4770      	bx	lr
 801676c:	f3af 8000 	nop.w

08016770 <pxCurrentTCBConst2>:
 8016770:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016774:	bf00      	nop
 8016776:	bf00      	nop

08016778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8016778:	4806      	ldr	r0, [pc, #24]	; (8016794 <prvPortStartFirstTask+0x1c>)
 801677a:	6800      	ldr	r0, [r0, #0]
 801677c:	6800      	ldr	r0, [r0, #0]
 801677e:	f380 8808 	msr	MSP, r0
 8016782:	b662      	cpsie	i
 8016784:	b661      	cpsie	f
 8016786:	f3bf 8f4f 	dsb	sy
 801678a:	f3bf 8f6f 	isb	sy
 801678e:	df00      	svc	0
 8016790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016792:	bf00      	nop
 8016794:	e000ed08 	.word	0xe000ed08

08016798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b086      	sub	sp, #24
 801679c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801679e:	4b3b      	ldr	r3, [pc, #236]	; (801688c <xPortStartScheduler+0xf4>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4a3b      	ldr	r2, [pc, #236]	; (8016890 <xPortStartScheduler+0xf8>)
 80167a4:	4293      	cmp	r3, r2
 80167a6:	d109      	bne.n	80167bc <xPortStartScheduler+0x24>
 80167a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ac:	f383 8811 	msr	BASEPRI, r3
 80167b0:	f3bf 8f6f 	isb	sy
 80167b4:	f3bf 8f4f 	dsb	sy
 80167b8:	613b      	str	r3, [r7, #16]
 80167ba:	e7fe      	b.n	80167ba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80167bc:	4b33      	ldr	r3, [pc, #204]	; (801688c <xPortStartScheduler+0xf4>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4a34      	ldr	r2, [pc, #208]	; (8016894 <xPortStartScheduler+0xfc>)
 80167c2:	4293      	cmp	r3, r2
 80167c4:	d109      	bne.n	80167da <xPortStartScheduler+0x42>
 80167c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ca:	f383 8811 	msr	BASEPRI, r3
 80167ce:	f3bf 8f6f 	isb	sy
 80167d2:	f3bf 8f4f 	dsb	sy
 80167d6:	60fb      	str	r3, [r7, #12]
 80167d8:	e7fe      	b.n	80167d8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80167da:	4b2f      	ldr	r3, [pc, #188]	; (8016898 <xPortStartScheduler+0x100>)
 80167dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	22ff      	movs	r2, #255	; 0xff
 80167ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80167f4:	79fb      	ldrb	r3, [r7, #7]
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80167fc:	b2da      	uxtb	r2, r3
 80167fe:	4b27      	ldr	r3, [pc, #156]	; (801689c <xPortStartScheduler+0x104>)
 8016800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016802:	4b27      	ldr	r3, [pc, #156]	; (80168a0 <xPortStartScheduler+0x108>)
 8016804:	2207      	movs	r2, #7
 8016806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016808:	e009      	b.n	801681e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801680a:	4b25      	ldr	r3, [pc, #148]	; (80168a0 <xPortStartScheduler+0x108>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	3b01      	subs	r3, #1
 8016810:	4a23      	ldr	r2, [pc, #140]	; (80168a0 <xPortStartScheduler+0x108>)
 8016812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016814:	79fb      	ldrb	r3, [r7, #7]
 8016816:	b2db      	uxtb	r3, r3
 8016818:	005b      	lsls	r3, r3, #1
 801681a:	b2db      	uxtb	r3, r3
 801681c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801681e:	79fb      	ldrb	r3, [r7, #7]
 8016820:	b2db      	uxtb	r3, r3
 8016822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016826:	2b80      	cmp	r3, #128	; 0x80
 8016828:	d0ef      	beq.n	801680a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801682a:	4b1d      	ldr	r3, [pc, #116]	; (80168a0 <xPortStartScheduler+0x108>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	021b      	lsls	r3, r3, #8
 8016830:	4a1b      	ldr	r2, [pc, #108]	; (80168a0 <xPortStartScheduler+0x108>)
 8016832:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016834:	4b1a      	ldr	r3, [pc, #104]	; (80168a0 <xPortStartScheduler+0x108>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801683c:	4a18      	ldr	r2, [pc, #96]	; (80168a0 <xPortStartScheduler+0x108>)
 801683e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	b2da      	uxtb	r2, r3
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016848:	4b16      	ldr	r3, [pc, #88]	; (80168a4 <xPortStartScheduler+0x10c>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	4a15      	ldr	r2, [pc, #84]	; (80168a4 <xPortStartScheduler+0x10c>)
 801684e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016852:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016854:	4b13      	ldr	r3, [pc, #76]	; (80168a4 <xPortStartScheduler+0x10c>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	4a12      	ldr	r2, [pc, #72]	; (80168a4 <xPortStartScheduler+0x10c>)
 801685a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801685e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016860:	f000 f8d2 	bl	8016a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016864:	4b10      	ldr	r3, [pc, #64]	; (80168a8 <xPortStartScheduler+0x110>)
 8016866:	2200      	movs	r2, #0
 8016868:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801686a:	f000 f8e9 	bl	8016a40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801686e:	4b0f      	ldr	r3, [pc, #60]	; (80168ac <xPortStartScheduler+0x114>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	4a0e      	ldr	r2, [pc, #56]	; (80168ac <xPortStartScheduler+0x114>)
 8016874:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016878:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801687a:	f7ff ff7d 	bl	8016778 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 801687e:	f7ff ff43 	bl	8016708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016882:	2300      	movs	r3, #0
}
 8016884:	4618      	mov	r0, r3
 8016886:	3718      	adds	r7, #24
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}
 801688c:	e000ed00 	.word	0xe000ed00
 8016890:	410fc271 	.word	0x410fc271
 8016894:	410fc270 	.word	0x410fc270
 8016898:	e000e400 	.word	0xe000e400
 801689c:	2000051c 	.word	0x2000051c
 80168a0:	20000520 	.word	0x20000520
 80168a4:	e000ed20 	.word	0xe000ed20
 80168a8:	20000068 	.word	0x20000068
 80168ac:	e000ef34 	.word	0xe000ef34

080168b0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80168b0:	b480      	push	{r7}
 80168b2:	b083      	sub	sp, #12
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ba:	f383 8811 	msr	BASEPRI, r3
 80168be:	f3bf 8f6f 	isb	sy
 80168c2:	f3bf 8f4f 	dsb	sy
 80168c6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80168c8:	4b0e      	ldr	r3, [pc, #56]	; (8016904 <vPortEnterCritical+0x54>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	3301      	adds	r3, #1
 80168ce:	4a0d      	ldr	r2, [pc, #52]	; (8016904 <vPortEnterCritical+0x54>)
 80168d0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80168d2:	4b0c      	ldr	r3, [pc, #48]	; (8016904 <vPortEnterCritical+0x54>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2b01      	cmp	r3, #1
 80168d8:	d10e      	bne.n	80168f8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80168da:	4b0b      	ldr	r3, [pc, #44]	; (8016908 <vPortEnterCritical+0x58>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d009      	beq.n	80168f8 <vPortEnterCritical+0x48>
 80168e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e8:	f383 8811 	msr	BASEPRI, r3
 80168ec:	f3bf 8f6f 	isb	sy
 80168f0:	f3bf 8f4f 	dsb	sy
 80168f4:	603b      	str	r3, [r7, #0]
 80168f6:	e7fe      	b.n	80168f6 <vPortEnterCritical+0x46>
	}
}
 80168f8:	bf00      	nop
 80168fa:	370c      	adds	r7, #12
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr
 8016904:	20000068 	.word	0x20000068
 8016908:	e000ed04 	.word	0xe000ed04

0801690c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016912:	4b11      	ldr	r3, [pc, #68]	; (8016958 <vPortExitCritical+0x4c>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d109      	bne.n	801692e <vPortExitCritical+0x22>
 801691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801691e:	f383 8811 	msr	BASEPRI, r3
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	607b      	str	r3, [r7, #4]
 801692c:	e7fe      	b.n	801692c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801692e:	4b0a      	ldr	r3, [pc, #40]	; (8016958 <vPortExitCritical+0x4c>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	3b01      	subs	r3, #1
 8016934:	4a08      	ldr	r2, [pc, #32]	; (8016958 <vPortExitCritical+0x4c>)
 8016936:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016938:	4b07      	ldr	r3, [pc, #28]	; (8016958 <vPortExitCritical+0x4c>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d104      	bne.n	801694a <vPortExitCritical+0x3e>
 8016940:	2300      	movs	r3, #0
 8016942:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801694a:	bf00      	nop
 801694c:	370c      	adds	r7, #12
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr
 8016956:	bf00      	nop
 8016958:	20000068 	.word	0x20000068
 801695c:	00000000 	.word	0x00000000

08016960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016960:	f3ef 8009 	mrs	r0, PSP
 8016964:	f3bf 8f6f 	isb	sy
 8016968:	4b15      	ldr	r3, [pc, #84]	; (80169c0 <pxCurrentTCBConst>)
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	f01e 0f10 	tst.w	lr, #16
 8016970:	bf08      	it	eq
 8016972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801697a:	6010      	str	r0, [r2, #0]
 801697c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8016980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016984:	f380 8811 	msr	BASEPRI, r0
 8016988:	f3bf 8f4f 	dsb	sy
 801698c:	f3bf 8f6f 	isb	sy
 8016990:	f7ff faac 	bl	8015eec <vTaskSwitchContext>
 8016994:	f04f 0000 	mov.w	r0, #0
 8016998:	f380 8811 	msr	BASEPRI, r0
 801699c:	bc08      	pop	{r3}
 801699e:	6819      	ldr	r1, [r3, #0]
 80169a0:	6808      	ldr	r0, [r1, #0]
 80169a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a6:	f01e 0f10 	tst.w	lr, #16
 80169aa:	bf08      	it	eq
 80169ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80169b0:	f380 8809 	msr	PSP, r0
 80169b4:	f3bf 8f6f 	isb	sy
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop
 80169bc:	f3af 8000 	nop.w

080169c0 <pxCurrentTCBConst>:
 80169c0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80169c4:	bf00      	nop
 80169c6:	bf00      	nop

080169c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
	__asm volatile
 80169ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d2:	f383 8811 	msr	BASEPRI, r3
 80169d6:	f3bf 8f6f 	isb	sy
 80169da:	f3bf 8f4f 	dsb	sy
 80169de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80169e0:	f7ff f9c8 	bl	8015d74 <xTaskIncrementTick>
 80169e4:	4603      	mov	r3, r0
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d003      	beq.n	80169f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80169ea:	4b06      	ldr	r3, [pc, #24]	; (8016a04 <SysTick_Handler+0x3c>)
 80169ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169f0:	601a      	str	r2, [r3, #0]
 80169f2:	2300      	movs	r3, #0
 80169f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80169fc:	bf00      	nop
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	e000ed04 	.word	0xe000ed04

08016a08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016a08:	b480      	push	{r7}
 8016a0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016a0c:	4b08      	ldr	r3, [pc, #32]	; (8016a30 <vPortSetupTimerInterrupt+0x28>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4a08      	ldr	r2, [pc, #32]	; (8016a34 <vPortSetupTimerInterrupt+0x2c>)
 8016a12:	fba2 2303 	umull	r2, r3, r2, r3
 8016a16:	099b      	lsrs	r3, r3, #6
 8016a18:	4a07      	ldr	r2, [pc, #28]	; (8016a38 <vPortSetupTimerInterrupt+0x30>)
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016a1e:	4b07      	ldr	r3, [pc, #28]	; (8016a3c <vPortSetupTimerInterrupt+0x34>)
 8016a20:	2207      	movs	r2, #7
 8016a22:	601a      	str	r2, [r3, #0]
}
 8016a24:	bf00      	nop
 8016a26:	46bd      	mov	sp, r7
 8016a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2c:	4770      	bx	lr
 8016a2e:	bf00      	nop
 8016a30:	200000d0 	.word	0x200000d0
 8016a34:	10624dd3 	.word	0x10624dd3
 8016a38:	e000e014 	.word	0xe000e014
 8016a3c:	e000e010 	.word	0xe000e010

08016a40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016a40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016a50 <vPortEnableVFP+0x10>
 8016a44:	6801      	ldr	r1, [r0, #0]
 8016a46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016a4a:	6001      	str	r1, [r0, #0]
 8016a4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016a4e:	bf00      	nop
 8016a50:	e000ed88 	.word	0xe000ed88

08016a54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016a54:	b480      	push	{r7}
 8016a56:	b085      	sub	sp, #20
 8016a58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8016a5a:	f3ef 8305 	mrs	r3, IPSR
 8016a5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	2b0f      	cmp	r3, #15
 8016a64:	d913      	bls.n	8016a8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016a66:	4a16      	ldr	r2, [pc, #88]	; (8016ac0 <vPortValidateInterruptPriority+0x6c>)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	4413      	add	r3, r2
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016a70:	4b14      	ldr	r3, [pc, #80]	; (8016ac4 <vPortValidateInterruptPriority+0x70>)
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	7afa      	ldrb	r2, [r7, #11]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d209      	bcs.n	8016a8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8016a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a7e:	f383 8811 	msr	BASEPRI, r3
 8016a82:	f3bf 8f6f 	isb	sy
 8016a86:	f3bf 8f4f 	dsb	sy
 8016a8a:	607b      	str	r3, [r7, #4]
 8016a8c:	e7fe      	b.n	8016a8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016a8e:	4b0e      	ldr	r3, [pc, #56]	; (8016ac8 <vPortValidateInterruptPriority+0x74>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016a96:	4b0d      	ldr	r3, [pc, #52]	; (8016acc <vPortValidateInterruptPriority+0x78>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d909      	bls.n	8016ab2 <vPortValidateInterruptPriority+0x5e>
 8016a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa2:	f383 8811 	msr	BASEPRI, r3
 8016aa6:	f3bf 8f6f 	isb	sy
 8016aaa:	f3bf 8f4f 	dsb	sy
 8016aae:	603b      	str	r3, [r7, #0]
 8016ab0:	e7fe      	b.n	8016ab0 <vPortValidateInterruptPriority+0x5c>
	}
 8016ab2:	bf00      	nop
 8016ab4:	3714      	adds	r7, #20
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	e000e3f0 	.word	0xe000e3f0
 8016ac4:	2000051c 	.word	0x2000051c
 8016ac8:	e000ed0c 	.word	0xe000ed0c
 8016acc:	20000520 	.word	0x20000520

08016ad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b08a      	sub	sp, #40	; 0x28
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016adc:	f7ff f87e 	bl	8015bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016ae0:	4b57      	ldr	r3, [pc, #348]	; (8016c40 <pvPortMalloc+0x170>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d101      	bne.n	8016aec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016ae8:	f000 f90c 	bl	8016d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016aec:	4b55      	ldr	r3, [pc, #340]	; (8016c44 <pvPortMalloc+0x174>)
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	4013      	ands	r3, r2
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	f040 808c 	bne.w	8016c12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d01c      	beq.n	8016b3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8016b00:	2208      	movs	r2, #8
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4413      	add	r3, r2
 8016b06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f003 0307 	and.w	r3, r3, #7
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d013      	beq.n	8016b3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f023 0307 	bic.w	r3, r3, #7
 8016b18:	3308      	adds	r3, #8
 8016b1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f003 0307 	and.w	r3, r3, #7
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d009      	beq.n	8016b3a <pvPortMalloc+0x6a>
 8016b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b2a:	f383 8811 	msr	BASEPRI, r3
 8016b2e:	f3bf 8f6f 	isb	sy
 8016b32:	f3bf 8f4f 	dsb	sy
 8016b36:	617b      	str	r3, [r7, #20]
 8016b38:	e7fe      	b.n	8016b38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d068      	beq.n	8016c12 <pvPortMalloc+0x142>
 8016b40:	4b41      	ldr	r3, [pc, #260]	; (8016c48 <pvPortMalloc+0x178>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d863      	bhi.n	8016c12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016b4a:	4b40      	ldr	r3, [pc, #256]	; (8016c4c <pvPortMalloc+0x17c>)
 8016b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016b4e:	4b3f      	ldr	r3, [pc, #252]	; (8016c4c <pvPortMalloc+0x17c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b54:	e004      	b.n	8016b60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b62:	685b      	ldr	r3, [r3, #4]
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d903      	bls.n	8016b72 <pvPortMalloc+0xa2>
 8016b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1f1      	bne.n	8016b56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016b72:	4b33      	ldr	r3, [pc, #204]	; (8016c40 <pvPortMalloc+0x170>)
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d04a      	beq.n	8016c12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2208      	movs	r2, #8
 8016b82:	4413      	add	r3, r2
 8016b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	6a3b      	ldr	r3, [r7, #32]
 8016b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b90:	685a      	ldr	r2, [r3, #4]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	1ad2      	subs	r2, r2, r3
 8016b96:	2308      	movs	r3, #8
 8016b98:	005b      	lsls	r3, r3, #1
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d91e      	bls.n	8016bdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	4413      	add	r3, r2
 8016ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	f003 0307 	and.w	r3, r3, #7
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d009      	beq.n	8016bc4 <pvPortMalloc+0xf4>
 8016bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb4:	f383 8811 	msr	BASEPRI, r3
 8016bb8:	f3bf 8f6f 	isb	sy
 8016bbc:	f3bf 8f4f 	dsb	sy
 8016bc0:	613b      	str	r3, [r7, #16]
 8016bc2:	e7fe      	b.n	8016bc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc6:	685a      	ldr	r2, [r3, #4]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	1ad2      	subs	r2, r2, r3
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd2:	687a      	ldr	r2, [r7, #4]
 8016bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016bd6:	69b8      	ldr	r0, [r7, #24]
 8016bd8:	f000 f8f6 	bl	8016dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016bdc:	4b1a      	ldr	r3, [pc, #104]	; (8016c48 <pvPortMalloc+0x178>)
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	1ad3      	subs	r3, r2, r3
 8016be6:	4a18      	ldr	r2, [pc, #96]	; (8016c48 <pvPortMalloc+0x178>)
 8016be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016bea:	4b17      	ldr	r3, [pc, #92]	; (8016c48 <pvPortMalloc+0x178>)
 8016bec:	681a      	ldr	r2, [r3, #0]
 8016bee:	4b18      	ldr	r3, [pc, #96]	; (8016c50 <pvPortMalloc+0x180>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d203      	bcs.n	8016bfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016bf6:	4b14      	ldr	r3, [pc, #80]	; (8016c48 <pvPortMalloc+0x178>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4a15      	ldr	r2, [pc, #84]	; (8016c50 <pvPortMalloc+0x180>)
 8016bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c00:	685a      	ldr	r2, [r3, #4]
 8016c02:	4b10      	ldr	r3, [pc, #64]	; (8016c44 <pvPortMalloc+0x174>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	431a      	orrs	r2, r3
 8016c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c0e:	2200      	movs	r2, #0
 8016c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016c12:	f7fe fff1 	bl	8015bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c16:	69fb      	ldr	r3, [r7, #28]
 8016c18:	f003 0307 	and.w	r3, r3, #7
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d009      	beq.n	8016c34 <pvPortMalloc+0x164>
 8016c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c24:	f383 8811 	msr	BASEPRI, r3
 8016c28:	f3bf 8f6f 	isb	sy
 8016c2c:	f3bf 8f4f 	dsb	sy
 8016c30:	60fb      	str	r3, [r7, #12]
 8016c32:	e7fe      	b.n	8016c32 <pvPortMalloc+0x162>
	return pvReturn;
 8016c34:	69fb      	ldr	r3, [r7, #28]
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	3728      	adds	r7, #40	; 0x28
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	2000452c 	.word	0x2000452c
 8016c44:	20004538 	.word	0x20004538
 8016c48:	20004530 	.word	0x20004530
 8016c4c:	20004524 	.word	0x20004524
 8016c50:	20004534 	.word	0x20004534

08016c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d046      	beq.n	8016cf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016c66:	2308      	movs	r3, #8
 8016c68:	425b      	negs	r3, r3
 8016c6a:	697a      	ldr	r2, [r7, #20]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	685a      	ldr	r2, [r3, #4]
 8016c78:	4b20      	ldr	r3, [pc, #128]	; (8016cfc <vPortFree+0xa8>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4013      	ands	r3, r2
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d109      	bne.n	8016c96 <vPortFree+0x42>
 8016c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c86:	f383 8811 	msr	BASEPRI, r3
 8016c8a:	f3bf 8f6f 	isb	sy
 8016c8e:	f3bf 8f4f 	dsb	sy
 8016c92:	60fb      	str	r3, [r7, #12]
 8016c94:	e7fe      	b.n	8016c94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d009      	beq.n	8016cb2 <vPortFree+0x5e>
 8016c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca2:	f383 8811 	msr	BASEPRI, r3
 8016ca6:	f3bf 8f6f 	isb	sy
 8016caa:	f3bf 8f4f 	dsb	sy
 8016cae:	60bb      	str	r3, [r7, #8]
 8016cb0:	e7fe      	b.n	8016cb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	685a      	ldr	r2, [r3, #4]
 8016cb6:	4b11      	ldr	r3, [pc, #68]	; (8016cfc <vPortFree+0xa8>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	4013      	ands	r3, r2
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d019      	beq.n	8016cf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d115      	bne.n	8016cf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	4b0b      	ldr	r3, [pc, #44]	; (8016cfc <vPortFree+0xa8>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	43db      	mvns	r3, r3
 8016cd2:	401a      	ands	r2, r3
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016cd8:	f7fe ff80 	bl	8015bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	685a      	ldr	r2, [r3, #4]
 8016ce0:	4b07      	ldr	r3, [pc, #28]	; (8016d00 <vPortFree+0xac>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	4a06      	ldr	r2, [pc, #24]	; (8016d00 <vPortFree+0xac>)
 8016ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016cea:	6938      	ldr	r0, [r7, #16]
 8016cec:	f000 f86c 	bl	8016dc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016cf0:	f7fe ff82 	bl	8015bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016cf4:	bf00      	nop
 8016cf6:	3718      	adds	r7, #24
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}
 8016cfc:	20004538 	.word	0x20004538
 8016d00:	20004530 	.word	0x20004530

08016d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016d04:	b480      	push	{r7}
 8016d06:	b085      	sub	sp, #20
 8016d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016d10:	4b27      	ldr	r3, [pc, #156]	; (8016db0 <prvHeapInit+0xac>)
 8016d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	f003 0307 	and.w	r3, r3, #7
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d00c      	beq.n	8016d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	3307      	adds	r3, #7
 8016d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f023 0307 	bic.w	r3, r3, #7
 8016d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016d2c:	68ba      	ldr	r2, [r7, #8]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	1ad3      	subs	r3, r2, r3
 8016d32:	4a1f      	ldr	r2, [pc, #124]	; (8016db0 <prvHeapInit+0xac>)
 8016d34:	4413      	add	r3, r2
 8016d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016d3c:	4a1d      	ldr	r2, [pc, #116]	; (8016db4 <prvHeapInit+0xb0>)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016d42:	4b1c      	ldr	r3, [pc, #112]	; (8016db4 <prvHeapInit+0xb0>)
 8016d44:	2200      	movs	r2, #0
 8016d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	68ba      	ldr	r2, [r7, #8]
 8016d4c:	4413      	add	r3, r2
 8016d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016d50:	2208      	movs	r2, #8
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	1a9b      	subs	r3, r3, r2
 8016d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	f023 0307 	bic.w	r3, r3, #7
 8016d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	4a15      	ldr	r2, [pc, #84]	; (8016db8 <prvHeapInit+0xb4>)
 8016d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016d66:	4b14      	ldr	r3, [pc, #80]	; (8016db8 <prvHeapInit+0xb4>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016d6e:	4b12      	ldr	r3, [pc, #72]	; (8016db8 <prvHeapInit+0xb4>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	2200      	movs	r2, #0
 8016d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	68fa      	ldr	r2, [r7, #12]
 8016d7e:	1ad2      	subs	r2, r2, r3
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016d84:	4b0c      	ldr	r3, [pc, #48]	; (8016db8 <prvHeapInit+0xb4>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	683b      	ldr	r3, [r7, #0]
 8016d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	4a0a      	ldr	r2, [pc, #40]	; (8016dbc <prvHeapInit+0xb8>)
 8016d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	4a09      	ldr	r2, [pc, #36]	; (8016dc0 <prvHeapInit+0xbc>)
 8016d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016d9c:	4b09      	ldr	r3, [pc, #36]	; (8016dc4 <prvHeapInit+0xc0>)
 8016d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016da2:	601a      	str	r2, [r3, #0]
}
 8016da4:	bf00      	nop
 8016da6:	3714      	adds	r7, #20
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr
 8016db0:	20000524 	.word	0x20000524
 8016db4:	20004524 	.word	0x20004524
 8016db8:	2000452c 	.word	0x2000452c
 8016dbc:	20004534 	.word	0x20004534
 8016dc0:	20004530 	.word	0x20004530
 8016dc4:	20004538 	.word	0x20004538

08016dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b085      	sub	sp, #20
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016dd0:	4b28      	ldr	r3, [pc, #160]	; (8016e74 <prvInsertBlockIntoFreeList+0xac>)
 8016dd2:	60fb      	str	r3, [r7, #12]
 8016dd4:	e002      	b.n	8016ddc <prvInsertBlockIntoFreeList+0x14>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	60fb      	str	r3, [r7, #12]
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d8f7      	bhi.n	8016dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	68ba      	ldr	r2, [r7, #8]
 8016df0:	4413      	add	r3, r2
 8016df2:	687a      	ldr	r2, [r7, #4]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d108      	bne.n	8016e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	685a      	ldr	r2, [r3, #4]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	441a      	add	r2, r3
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	68ba      	ldr	r2, [r7, #8]
 8016e14:	441a      	add	r2, r3
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d118      	bne.n	8016e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681a      	ldr	r2, [r3, #0]
 8016e22:	4b15      	ldr	r3, [pc, #84]	; (8016e78 <prvInsertBlockIntoFreeList+0xb0>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d00d      	beq.n	8016e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	685a      	ldr	r2, [r3, #4]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	441a      	add	r2, r3
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	681a      	ldr	r2, [r3, #0]
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	601a      	str	r2, [r3, #0]
 8016e44:	e008      	b.n	8016e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016e46:	4b0c      	ldr	r3, [pc, #48]	; (8016e78 <prvInsertBlockIntoFreeList+0xb0>)
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	601a      	str	r2, [r3, #0]
 8016e4e:	e003      	b.n	8016e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681a      	ldr	r2, [r3, #0]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d002      	beq.n	8016e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016e66:	bf00      	nop
 8016e68:	3714      	adds	r7, #20
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop
 8016e74:	20004524 	.word	0x20004524
 8016e78:	2000452c 	.word	0x2000452c

08016e7c <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b08c      	sub	sp, #48	; 0x30
 8016e80:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8016e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e86:	2200      	movs	r2, #0
 8016e88:	601a      	str	r2, [r3, #0]
 8016e8a:	605a      	str	r2, [r3, #4]
 8016e8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8016e8e:	4b31      	ldr	r3, [pc, #196]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016e90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016e94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016e96:	4b2f      	ldr	r3, [pc, #188]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADCResolution;
 8016e9e:	4b2e      	ldr	r3, [pc, #184]	; (8016f58 <MX_ADC1_Init+0xdc>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	4a2c      	ldr	r2, [pc, #176]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ea4:	6093      	str	r3, [r2, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016ea6:	4b2b      	ldr	r3, [pc, #172]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	615a      	str	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016eac:	4b29      	ldr	r3, [pc, #164]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016eae:	2200      	movs	r2, #0
 8016eb0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016eb2:	4b28      	ldr	r3, [pc, #160]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016eba:	4b26      	ldr	r3, [pc, #152]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016ec2:	4b24      	ldr	r3, [pc, #144]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ec4:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016eca:	4b22      	ldr	r3, [pc, #136]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ecc:	2200      	movs	r2, #0
 8016ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016ed0:	4b20      	ldr	r3, [pc, #128]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8016ed6:	4b1f      	ldr	r3, [pc, #124]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ed8:	2201      	movs	r2, #1
 8016eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016ede:	4b1d      	ldr	r3, [pc, #116]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ee0:	2204      	movs	r2, #4
 8016ee2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8016ee4:	4b1b      	ldr	r3, [pc, #108]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016eea:	4b1a      	ldr	r3, [pc, #104]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.GainCompensation = 0;
 8016ef2:	4b18      	ldr	r3, [pc, #96]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.OversamplingMode = DISABLE;
 8016ef8:	4b16      	ldr	r3, [pc, #88]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016efa:	2200      	movs	r2, #0
 8016efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc1);
 8016f00:	4814      	ldr	r0, [pc, #80]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016f02:	f7f0 f87b 	bl	8006ffc <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8016f06:	2300      	movs	r3, #0
 8016f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 8016f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f0e:	4619      	mov	r1, r3
 8016f10:	4810      	ldr	r0, [pc, #64]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016f12:	f7f2 fcbb 	bl	800988c <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 8016f16:	4b11      	ldr	r3, [pc, #68]	; (8016f5c <MX_ADC1_Init+0xe0>)
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	4b10      	ldr	r3, [pc, #64]	; (8016f60 <MX_ADC1_Init+0xe4>)
 8016f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016f24:	2306      	movs	r3, #6
 8016f26:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016f28:	237f      	movs	r3, #127	; 0x7f
 8016f2a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016f2c:	4b0d      	ldr	r3, [pc, #52]	; (8016f64 <MX_ADC1_Init+0xe8>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016f32:	2304      	movs	r3, #4
 8016f34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016f36:	2300      	movs	r3, #0
 8016f38:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8016f3a:	1d3b      	adds	r3, r7, #4
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	4805      	ldr	r0, [pc, #20]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016f40:	f7f1 f942 	bl	80081c8 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8016f44:	217f      	movs	r1, #127	; 0x7f
 8016f46:	4803      	ldr	r0, [pc, #12]	; (8016f54 <MX_ADC1_Init+0xd8>)
 8016f48:	f7f2 fb0e 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 8016f4c:	bf00      	nop
 8016f4e:	3730      	adds	r7, #48	; 0x30
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}
 8016f54:	20015e18 	.word	0x20015e18
 8016f58:	20004544 	.word	0x20004544
 8016f5c:	20004550 	.word	0x20004550
 8016f60:	0801dfd8 	.word	0x0801dfd8
 8016f64:	20004548 	.word	0x20004548

08016f68 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b08c      	sub	sp, #48	; 0x30
 8016f6c:	af00      	add	r7, sp, #0

  ADC_MultiModeTypeDef multimode = {0};
 8016f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f72:	2200      	movs	r2, #0
 8016f74:	601a      	str	r2, [r3, #0]
 8016f76:	605a      	str	r2, [r3, #4]
 8016f78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8016f7a:	4b2d      	ldr	r3, [pc, #180]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f7c:	4a2d      	ldr	r2, [pc, #180]	; (8017034 <MX_ADC2_Init+0xcc>)
 8016f7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016f80:	4b2b      	ldr	r3, [pc, #172]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016f86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADCResolution;
 8016f88:	4b2b      	ldr	r3, [pc, #172]	; (8017038 <MX_ADC2_Init+0xd0>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	4a28      	ldr	r2, [pc, #160]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f8e:	6093      	str	r3, [r2, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016f90:	4b27      	ldr	r3, [pc, #156]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f92:	2200      	movs	r2, #0
 8016f94:	615a      	str	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016f96:	4b26      	ldr	r3, [pc, #152]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f98:	2200      	movs	r2, #0
 8016f9a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016f9c:	4b24      	ldr	r3, [pc, #144]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016fa4:	4b22      	ldr	r3, [pc, #136]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016faa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016fac:	4b20      	ldr	r3, [pc, #128]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fae:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016fb4:	4b1e      	ldr	r3, [pc, #120]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016fba:	4b1d      	ldr	r3, [pc, #116]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8016fc0:	4b1b      	ldr	r3, [pc, #108]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016fc8:	4b19      	ldr	r3, [pc, #100]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fca:	2204      	movs	r2, #4
 8016fcc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8016fce:	4b18      	ldr	r3, [pc, #96]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016fd4:	4b16      	ldr	r3, [pc, #88]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016fda:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc2.Init.GainCompensation = 0;
 8016fdc:	4b14      	ldr	r3, [pc, #80]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fde:	2200      	movs	r2, #0
 8016fe0:	611a      	str	r2, [r3, #16]
  hadc2.Init.OversamplingMode = DISABLE;
 8016fe2:	4b13      	ldr	r3, [pc, #76]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc2);
 8016fea:	4811      	ldr	r0, [pc, #68]	; (8017030 <MX_ADC2_Init+0xc8>)
 8016fec:	f7f0 f806 	bl	8006ffc <HAL_ADC_Init>
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 8016ff0:	4b12      	ldr	r3, [pc, #72]	; (801703c <MX_ADC2_Init+0xd4>)
 8016ff2:	785b      	ldrb	r3, [r3, #1]
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4b12      	ldr	r3, [pc, #72]	; (8017040 <MX_ADC2_Init+0xd8>)
 8016ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016ffe:	2306      	movs	r3, #6
 8017000:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017002:	237f      	movs	r3, #127	; 0x7f
 8017004:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8017006:	4b0f      	ldr	r3, [pc, #60]	; (8017044 <MX_ADC2_Init+0xdc>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801700c:	2304      	movs	r3, #4
 801700e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8017014:	1d3b      	adds	r3, r7, #4
 8017016:	4619      	mov	r1, r3
 8017018:	4805      	ldr	r0, [pc, #20]	; (8017030 <MX_ADC2_Init+0xc8>)
 801701a:	f7f1 f8d5 	bl	80081c8 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 801701e:	217f      	movs	r1, #127	; 0x7f
 8017020:	4803      	ldr	r0, [pc, #12]	; (8017030 <MX_ADC2_Init+0xc8>)
 8017022:	f7f2 faa1 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 8017026:	bf00      	nop
 8017028:	3730      	adds	r7, #48	; 0x30
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	20015d4c 	.word	0x20015d4c
 8017034:	50000100 	.word	0x50000100
 8017038:	20004544 	.word	0x20004544
 801703c:	20004550 	.word	0x20004550
 8017040:	0801e00c 	.word	0x0801e00c
 8017044:	20004548 	.word	0x20004548

08017048 <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b08c      	sub	sp, #48	; 0x30
 801704c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 801704e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017052:	2200      	movs	r2, #0
 8017054:	601a      	str	r2, [r3, #0]
 8017056:	605a      	str	r2, [r3, #4]
 8017058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 801705a:	4b31      	ldr	r3, [pc, #196]	; (8017120 <MX_ADC3_Init+0xd8>)
 801705c:	4a31      	ldr	r2, [pc, #196]	; (8017124 <MX_ADC3_Init+0xdc>)
 801705e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017060:	4b2f      	ldr	r3, [pc, #188]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017066:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADCResolution;
 8017068:	4b2f      	ldr	r3, [pc, #188]	; (8017128 <MX_ADC3_Init+0xe0>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	4a2c      	ldr	r2, [pc, #176]	; (8017120 <MX_ADC3_Init+0xd8>)
 801706e:	6093      	str	r3, [r2, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8017070:	4b2b      	ldr	r3, [pc, #172]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017072:	2200      	movs	r2, #0
 8017074:	615a      	str	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8017076:	4b2a      	ldr	r3, [pc, #168]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017078:	2200      	movs	r2, #0
 801707a:	775a      	strb	r2, [r3, #29]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801707c:	4b28      	ldr	r3, [pc, #160]	; (8017120 <MX_ADC3_Init+0xd8>)
 801707e:	2200      	movs	r2, #0
 8017080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017084:	4b26      	ldr	r3, [pc, #152]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801708a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 801708c:	4b24      	ldr	r3, [pc, #144]	; (8017120 <MX_ADC3_Init+0xd8>)
 801708e:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017094:	4b22      	ldr	r3, [pc, #136]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017096:	2200      	movs	r2, #0
 8017098:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 801709a:	4b21      	ldr	r3, [pc, #132]	; (8017120 <MX_ADC3_Init+0xd8>)
 801709c:	2201      	movs	r2, #1
 801709e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80170a0:	4b1f      	ldr	r3, [pc, #124]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170a2:	2201      	movs	r2, #1
 80170a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80170a8:	4b1d      	ldr	r3, [pc, #116]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170aa:	2204      	movs	r2, #4
 80170ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80170ae:	4b1c      	ldr	r3, [pc, #112]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170b0:	2200      	movs	r2, #0
 80170b2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80170b4:	4b1a      	ldr	r3, [pc, #104]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80170ba:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc3.Init.GainCompensation = 0;
 80170bc:	4b18      	ldr	r3, [pc, #96]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170be:	2200      	movs	r2, #0
 80170c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.OversamplingMode = DISABLE;
 80170c2:	4b17      	ldr	r3, [pc, #92]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc3);
 80170ca:	4815      	ldr	r0, [pc, #84]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170cc:	f7ef ff96 	bl	8006ffc <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 80170d0:	2300      	movs	r3, #0
 80170d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode);
 80170d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80170d8:	4619      	mov	r1, r3
 80170da:	4811      	ldr	r0, [pc, #68]	; (8017120 <MX_ADC3_Init+0xd8>)
 80170dc:	f7f2 fbd6 	bl	800988c <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 80170e0:	4b12      	ldr	r3, [pc, #72]	; (801712c <MX_ADC3_Init+0xe4>)
 80170e2:	789b      	ldrb	r3, [r3, #2]
 80170e4:	461a      	mov	r2, r3
 80170e6:	4b12      	ldr	r3, [pc, #72]	; (8017130 <MX_ADC3_Init+0xe8>)
 80170e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80170ee:	2306      	movs	r3, #6
 80170f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80170f2:	237f      	movs	r3, #127	; 0x7f
 80170f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 80170f6:	4b0f      	ldr	r3, [pc, #60]	; (8017134 <MX_ADC3_Init+0xec>)
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80170fc:	2304      	movs	r3, #4
 80170fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017100:	2300      	movs	r3, #0
 8017102:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8017104:	1d3b      	adds	r3, r7, #4
 8017106:	4619      	mov	r1, r3
 8017108:	4805      	ldr	r0, [pc, #20]	; (8017120 <MX_ADC3_Init+0xd8>)
 801710a:	f7f1 f85d 	bl	80081c8 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 801710e:	217f      	movs	r1, #127	; 0x7f
 8017110:	4803      	ldr	r0, [pc, #12]	; (8017120 <MX_ADC3_Init+0xd8>)
 8017112:	f7f2 fa29 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 8017116:	bf00      	nop
 8017118:	3730      	adds	r7, #48	; 0x30
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	20015e84 	.word	0x20015e84
 8017124:	50000400 	.word	0x50000400
 8017128:	20004544 	.word	0x20004544
 801712c:	20004550 	.word	0x20004550
 8017130:	0801e034 	.word	0x0801e034
 8017134:	20004548 	.word	0x20004548

08017138 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08c      	sub	sp, #48	; 0x30
 801713c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 801713e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017142:	2200      	movs	r2, #0
 8017144:	601a      	str	r2, [r3, #0]
 8017146:	605a      	str	r2, [r3, #4]
 8017148:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc4.Instance = ADC4;
 801714a:	4b2d      	ldr	r3, [pc, #180]	; (8017200 <MX_ADC4_Init+0xc8>)
 801714c:	4a2d      	ldr	r2, [pc, #180]	; (8017204 <MX_ADC4_Init+0xcc>)
 801714e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017150:	4b2b      	ldr	r3, [pc, #172]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017156:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADCResolution;
 8017158:	4b2b      	ldr	r3, [pc, #172]	; (8017208 <MX_ADC4_Init+0xd0>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	4a28      	ldr	r2, [pc, #160]	; (8017200 <MX_ADC4_Init+0xc8>)
 801715e:	6093      	str	r3, [r2, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8017160:	4b27      	ldr	r3, [pc, #156]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017162:	2200      	movs	r2, #0
 8017164:	615a      	str	r2, [r3, #20]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8017166:	4b26      	ldr	r3, [pc, #152]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017168:	2200      	movs	r2, #0
 801716a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 801716c:	4b24      	ldr	r3, [pc, #144]	; (8017200 <MX_ADC4_Init+0xc8>)
 801716e:	2200      	movs	r2, #0
 8017170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017174:	4b22      	ldr	r3, [pc, #136]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801717a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 801717c:	4b20      	ldr	r3, [pc, #128]	; (8017200 <MX_ADC4_Init+0xc8>)
 801717e:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017184:	4b1e      	ldr	r3, [pc, #120]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017186:	2200      	movs	r2, #0
 8017188:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 801718a:	4b1d      	ldr	r3, [pc, #116]	; (8017200 <MX_ADC4_Init+0xc8>)
 801718c:	2201      	movs	r2, #1
 801718e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8017190:	4b1b      	ldr	r3, [pc, #108]	; (8017200 <MX_ADC4_Init+0xc8>)
 8017192:	2201      	movs	r2, #1
 8017194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017198:	4b19      	ldr	r3, [pc, #100]	; (8017200 <MX_ADC4_Init+0xc8>)
 801719a:	2204      	movs	r2, #4
 801719c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 801719e:	4b18      	ldr	r3, [pc, #96]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171a0:	2200      	movs	r2, #0
 80171a2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80171a4:	4b16      	ldr	r3, [pc, #88]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80171aa:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc4.Init.GainCompensation = 0;
 80171ac:	4b14      	ldr	r3, [pc, #80]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171ae:	2200      	movs	r2, #0
 80171b0:	611a      	str	r2, [r3, #16]
  hadc4.Init.OversamplingMode = DISABLE;
 80171b2:	4b13      	ldr	r3, [pc, #76]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171b4:	2200      	movs	r2, #0
 80171b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc4);
 80171ba:	4811      	ldr	r0, [pc, #68]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171bc:	f7ef ff1e 	bl	8006ffc <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 80171c0:	4b12      	ldr	r3, [pc, #72]	; (801720c <MX_ADC4_Init+0xd4>)
 80171c2:	78db      	ldrb	r3, [r3, #3]
 80171c4:	461a      	mov	r2, r3
 80171c6:	4b12      	ldr	r3, [pc, #72]	; (8017210 <MX_ADC4_Init+0xd8>)
 80171c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80171ce:	2306      	movs	r3, #6
 80171d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80171d2:	237f      	movs	r3, #127	; 0x7f
 80171d4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 80171d6:	4b0f      	ldr	r3, [pc, #60]	; (8017214 <MX_ADC4_Init+0xdc>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80171dc:	2304      	movs	r3, #4
 80171de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80171e0:	2300      	movs	r3, #0
 80171e2:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 80171e4:	1d3b      	adds	r3, r7, #4
 80171e6:	4619      	mov	r1, r3
 80171e8:	4805      	ldr	r0, [pc, #20]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171ea:	f7f0 ffed 	bl	80081c8 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80171ee:	217f      	movs	r1, #127	; 0x7f
 80171f0:	4803      	ldr	r0, [pc, #12]	; (8017200 <MX_ADC4_Init+0xc8>)
 80171f2:	f7f2 f9b9 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 80171f6:	bf00      	nop
 80171f8:	3730      	adds	r7, #48	; 0x30
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	20015f50 	.word	0x20015f50
 8017204:	50000500 	.word	0x50000500
 8017208:	20004544 	.word	0x20004544
 801720c:	20004550 	.word	0x20004550
 8017210:	0801e04c 	.word	0x0801e04c
 8017214:	20004548 	.word	0x20004548

08017218 <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 8017218:	b580      	push	{r7, lr}
 801721a:	b08c      	sub	sp, #48	; 0x30
 801721c:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
 801721e:	4b5d      	ldr	r3, [pc, #372]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017220:	4a5d      	ldr	r2, [pc, #372]	; (8017398 <MX_ADC12_Interleaved_Init+0x180>)
 8017222:	601a      	str	r2, [r3, #0]
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017224:	4b5b      	ldr	r3, [pc, #364]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801722a:	605a      	str	r2, [r3, #4]
	  hadc2.Init.Resolution = ADCResolution;
 801722c:	4b5b      	ldr	r3, [pc, #364]	; (801739c <MX_ADC12_Interleaved_Init+0x184>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	4a58      	ldr	r2, [pc, #352]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017232:	6093      	str	r3, [r2, #8]
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8017234:	4b57      	ldr	r3, [pc, #348]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017236:	2201      	movs	r2, #1
 8017238:	615a      	str	r2, [r3, #20]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 801723a:	4b56      	ldr	r3, [pc, #344]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 801723c:	2200      	movs	r2, #0
 801723e:	775a      	strb	r2, [r3, #29]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8017240:	4b54      	ldr	r3, [pc, #336]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017242:	2200      	movs	r2, #0
 8017244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017248:	4b52      	ldr	r3, [pc, #328]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 801724a:	2200      	movs	r2, #0
 801724c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 801724e:	4b51      	ldr	r3, [pc, #324]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017250:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017254:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017256:	4b4f      	ldr	r3, [pc, #316]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017258:	2200      	movs	r2, #0
 801725a:	60da      	str	r2, [r3, #12]
	  hadc2.Init.NbrOfConversion =1;
 801725c:	4b4d      	ldr	r3, [pc, #308]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 801725e:	2201      	movs	r2, #1
 8017260:	621a      	str	r2, [r3, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 8017262:	4b4c      	ldr	r3, [pc, #304]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017264:	2201      	movs	r2, #1
 8017266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801726a:	4b4a      	ldr	r3, [pc, #296]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 801726c:	2204      	movs	r2, #4
 801726e:	619a      	str	r2, [r3, #24]
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 8017270:	4b48      	ldr	r3, [pc, #288]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017272:	2200      	movs	r2, #0
 8017274:	771a      	strb	r2, [r3, #28]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8017276:	4b47      	ldr	r3, [pc, #284]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801727c:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc2.Init.GainCompensation = 0;
 801727e:	4b45      	ldr	r3, [pc, #276]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017280:	2200      	movs	r2, #0
 8017282:	611a      	str	r2, [r3, #16]
	  hadc2.Init.OversamplingMode = DISABLE;
 8017284:	4b43      	ldr	r3, [pc, #268]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017286:	2200      	movs	r2, #0
 8017288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc2);
 801728c:	4841      	ldr	r0, [pc, #260]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 801728e:	f7ef feb5 	bl	8006ffc <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 8017292:	4b43      	ldr	r3, [pc, #268]	; (80173a0 <MX_ADC12_Interleaved_Init+0x188>)
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	461a      	mov	r2, r3
 8017298:	4b42      	ldr	r3, [pc, #264]	; (80173a4 <MX_ADC12_Interleaved_Init+0x18c>)
 801729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801729e:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80172a0:	2306      	movs	r3, #6
 80172a2:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80172a4:	237f      	movs	r3, #127	; 0x7f
 80172a6:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80172a8:	2300      	movs	r3, #0
 80172aa:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80172ac:	2304      	movs	r3, #4
 80172ae:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 80172b0:	2300      	movs	r3, #0
 80172b2:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80172b4:	f107 0310 	add.w	r3, r7, #16
 80172b8:	4619      	mov	r1, r3
 80172ba:	4836      	ldr	r0, [pc, #216]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 80172bc:	f7f0 ff84 	bl	80081c8 <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 80172c0:	4b39      	ldr	r3, [pc, #228]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80172c6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80172c8:	4b37      	ldr	r3, [pc, #220]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80172ce:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADCResolution;
 80172d0:	4b32      	ldr	r3, [pc, #200]	; (801739c <MX_ADC12_Interleaved_Init+0x184>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	4a34      	ldr	r2, [pc, #208]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172d6:	6093      	str	r3, [r2, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80172d8:	4b33      	ldr	r3, [pc, #204]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172da:	2200      	movs	r2, #0
 80172dc:	615a      	str	r2, [r3, #20]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80172de:	4b32      	ldr	r3, [pc, #200]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172e0:	2200      	movs	r2, #0
 80172e2:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80172e4:	4b30      	ldr	r3, [pc, #192]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172e6:	2200      	movs	r2, #0
 80172e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80172ec:	4b2e      	ldr	r3, [pc, #184]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80172f2:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80172f4:	4b2c      	ldr	r3, [pc, #176]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172f6:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80172fa:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80172fc:	4b2a      	ldr	r3, [pc, #168]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 80172fe:	2200      	movs	r2, #0
 8017300:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8017302:	4b29      	ldr	r3, [pc, #164]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017304:	2201      	movs	r2, #1
 8017306:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8017308:	4b27      	ldr	r3, [pc, #156]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 801730a:	2201      	movs	r2, #1
 801730c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017310:	4b25      	ldr	r3, [pc, #148]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017312:	2204      	movs	r2, #4
 8017314:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8017316:	4b24      	ldr	r3, [pc, #144]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017318:	2200      	movs	r2, #0
 801731a:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801731c:	4b22      	ldr	r3, [pc, #136]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 801731e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017322:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc1.Init.GainCompensation = 0;
 8017324:	4b20      	ldr	r3, [pc, #128]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017326:	2200      	movs	r2, #0
 8017328:	611a      	str	r2, [r3, #16]
	  hadc1.Init.OversamplingMode = DISABLE;
 801732a:	4b1f      	ldr	r3, [pc, #124]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 801732c:	2200      	movs	r2, #0
 801732e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc1);
 8017332:	481d      	ldr	r0, [pc, #116]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017334:	f7ef fe62 	bl	8006ffc <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8017338:	f107 0310 	add.w	r3, r7, #16
 801733c:	4619      	mov	r1, r3
 801733e:	481a      	ldr	r0, [pc, #104]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017340:	f7f0 ff42 	bl	80081c8 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 8017344:	2307      	movs	r3, #7
 8017346:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017348:	4b14      	ldr	r3, [pc, #80]	; (801739c <MX_ADC12_Interleaved_Init+0x184>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	2b10      	cmp	r3, #16
 801734e:	d003      	beq.n	8017358 <MX_ADC12_Interleaved_Init+0x140>
 8017350:	4b12      	ldr	r3, [pc, #72]	; (801739c <MX_ADC12_Interleaved_Init+0x184>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	2b18      	cmp	r3, #24
 8017356:	d106      	bne.n	8017366 <MX_ADC12_Interleaved_Init+0x14e>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 8017358:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801735c:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 801735e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017362:	60fb      	str	r3, [r7, #12]
 8017364:	e005      	b.n	8017372 <MX_ADC12_Interleaved_Init+0x15a>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8017366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801736a:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 801736c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017370:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 8017372:	1d3b      	adds	r3, r7, #4
 8017374:	4619      	mov	r1, r3
 8017376:	480c      	ldr	r0, [pc, #48]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017378:	f7f2 fa88 	bl	800988c <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 801737c:	217f      	movs	r1, #127	; 0x7f
 801737e:	480a      	ldr	r0, [pc, #40]	; (80173a8 <MX_ADC12_Interleaved_Init+0x190>)
 8017380:	f7f2 f8f2 	bl	8009568 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8017384:	217f      	movs	r1, #127	; 0x7f
 8017386:	4803      	ldr	r0, [pc, #12]	; (8017394 <MX_ADC12_Interleaved_Init+0x17c>)
 8017388:	f7f2 f8ee 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 801738c:	bf00      	nop
 801738e:	3730      	adds	r7, #48	; 0x30
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}
 8017394:	20015d4c 	.word	0x20015d4c
 8017398:	50000100 	.word	0x50000100
 801739c:	20004544 	.word	0x20004544
 80173a0:	20004550 	.word	0x20004550
 80173a4:	0801dfd8 	.word	0x0801dfd8
 80173a8:	20015e18 	.word	0x20015e18

080173ac <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b08c      	sub	sp, #48	; 0x30
 80173b0:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
 80173b2:	4b5d      	ldr	r3, [pc, #372]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173b4:	4a5d      	ldr	r2, [pc, #372]	; (801752c <MX_ADC34_Interleaved_Init+0x180>)
 80173b6:	601a      	str	r2, [r3, #0]
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80173b8:	4b5b      	ldr	r3, [pc, #364]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80173be:	605a      	str	r2, [r3, #4]
	  hadc4.Init.Resolution = ADCResolution;
 80173c0:	4b5b      	ldr	r3, [pc, #364]	; (8017530 <MX_ADC34_Interleaved_Init+0x184>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	4a58      	ldr	r2, [pc, #352]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173c6:	6093      	str	r3, [r2, #8]
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80173c8:	4b57      	ldr	r3, [pc, #348]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173ca:	2201      	movs	r2, #1
 80173cc:	615a      	str	r2, [r3, #20]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 80173ce:	4b56      	ldr	r3, [pc, #344]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173d0:	2200      	movs	r2, #0
 80173d2:	775a      	strb	r2, [r3, #29]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80173d4:	4b54      	ldr	r3, [pc, #336]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173d6:	2200      	movs	r2, #0
 80173d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80173dc:	4b52      	ldr	r3, [pc, #328]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173de:	2200      	movs	r2, #0
 80173e0:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80173e2:	4b51      	ldr	r3, [pc, #324]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173e4:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80173e8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80173ea:	4b4f      	ldr	r3, [pc, #316]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173ec:	2200      	movs	r2, #0
 80173ee:	60da      	str	r2, [r3, #12]
	  hadc4.Init.NbrOfConversion =1;
 80173f0:	4b4d      	ldr	r3, [pc, #308]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173f2:	2201      	movs	r2, #1
 80173f4:	621a      	str	r2, [r3, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 80173f6:	4b4c      	ldr	r3, [pc, #304]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 80173f8:	2201      	movs	r2, #1
 80173fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80173fe:	4b4a      	ldr	r3, [pc, #296]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 8017400:	2204      	movs	r2, #4
 8017402:	619a      	str	r2, [r3, #24]
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 8017404:	4b48      	ldr	r3, [pc, #288]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 8017406:	2200      	movs	r2, #0
 8017408:	771a      	strb	r2, [r3, #28]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801740a:	4b47      	ldr	r3, [pc, #284]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 801740c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017410:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc4.Init.GainCompensation = 0;
 8017412:	4b45      	ldr	r3, [pc, #276]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 8017414:	2200      	movs	r2, #0
 8017416:	611a      	str	r2, [r3, #16]
	  hadc4.Init.OversamplingMode = DISABLE;
 8017418:	4b43      	ldr	r3, [pc, #268]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 801741a:	2200      	movs	r2, #0
 801741c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc4);
 8017420:	4841      	ldr	r0, [pc, #260]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 8017422:	f7ef fdeb 	bl	8006ffc <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 8017426:	4b43      	ldr	r3, [pc, #268]	; (8017534 <MX_ADC34_Interleaved_Init+0x188>)
 8017428:	789b      	ldrb	r3, [r3, #2]
 801742a:	461a      	mov	r2, r3
 801742c:	4b42      	ldr	r3, [pc, #264]	; (8017538 <MX_ADC34_Interleaved_Init+0x18c>)
 801742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017432:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017434:	2306      	movs	r3, #6
 8017436:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017438:	237f      	movs	r3, #127	; 0x7f
 801743a:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801743c:	2300      	movs	r3, #0
 801743e:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8017440:	2304      	movs	r3, #4
 8017442:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 8017444:	2300      	movs	r3, #0
 8017446:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 8017448:	f107 0310 	add.w	r3, r7, #16
 801744c:	4619      	mov	r1, r3
 801744e:	4836      	ldr	r0, [pc, #216]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 8017450:	f7f0 feba 	bl	80081c8 <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 8017454:	4b39      	ldr	r3, [pc, #228]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017456:	4a3a      	ldr	r2, [pc, #232]	; (8017540 <MX_ADC34_Interleaved_Init+0x194>)
 8017458:	601a      	str	r2, [r3, #0]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801745a:	4b38      	ldr	r3, [pc, #224]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 801745c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017460:	605a      	str	r2, [r3, #4]
	  hadc3.Init.Resolution = ADCResolution;
 8017462:	4b33      	ldr	r3, [pc, #204]	; (8017530 <MX_ADC34_Interleaved_Init+0x184>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	4a35      	ldr	r2, [pc, #212]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017468:	6093      	str	r3, [r2, #8]
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801746a:	4b34      	ldr	r3, [pc, #208]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 801746c:	2200      	movs	r2, #0
 801746e:	615a      	str	r2, [r3, #20]
	  hadc3.Init.ContinuousConvMode = DISABLE;
 8017470:	4b32      	ldr	r3, [pc, #200]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017472:	2200      	movs	r2, #0
 8017474:	775a      	strb	r2, [r3, #29]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8017476:	4b31      	ldr	r3, [pc, #196]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017478:	2200      	movs	r2, #0
 801747a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801747e:	4b2f      	ldr	r3, [pc, #188]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017484:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8017486:	4b2d      	ldr	r3, [pc, #180]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017488:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 801748c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801748e:	4b2b      	ldr	r3, [pc, #172]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017490:	2200      	movs	r2, #0
 8017492:	60da      	str	r2, [r3, #12]
	  hadc3.Init.NbrOfConversion = 1;
 8017494:	4b29      	ldr	r3, [pc, #164]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017496:	2201      	movs	r2, #1
 8017498:	621a      	str	r2, [r3, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 801749a:	4b28      	ldr	r3, [pc, #160]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 801749c:	2201      	movs	r2, #1
 801749e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80174a2:	4b26      	ldr	r3, [pc, #152]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174a4:	2204      	movs	r2, #4
 80174a6:	619a      	str	r2, [r3, #24]
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 80174a8:	4b24      	ldr	r3, [pc, #144]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174aa:	2200      	movs	r2, #0
 80174ac:	771a      	strb	r2, [r3, #28]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80174ae:	4b23      	ldr	r3, [pc, #140]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80174b4:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc3.Init.GainCompensation = 0;
 80174b6:	4b21      	ldr	r3, [pc, #132]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174b8:	2200      	movs	r2, #0
 80174ba:	611a      	str	r2, [r3, #16]
	  hadc3.Init.OversamplingMode = DISABLE;
 80174bc:	4b1f      	ldr	r3, [pc, #124]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174be:	2200      	movs	r2, #0
 80174c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc3);
 80174c4:	481d      	ldr	r0, [pc, #116]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174c6:	f7ef fd99 	bl	8006ffc <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80174ca:	f107 0310 	add.w	r3, r7, #16
 80174ce:	4619      	mov	r1, r3
 80174d0:	481a      	ldr	r0, [pc, #104]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 80174d2:	f7f0 fe79 	bl	80081c8 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 80174d6:	2307      	movs	r3, #7
 80174d8:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 80174da:	4b15      	ldr	r3, [pc, #84]	; (8017530 <MX_ADC34_Interleaved_Init+0x184>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b10      	cmp	r3, #16
 80174e0:	d003      	beq.n	80174ea <MX_ADC34_Interleaved_Init+0x13e>
 80174e2:	4b13      	ldr	r3, [pc, #76]	; (8017530 <MX_ADC34_Interleaved_Init+0x184>)
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	2b18      	cmp	r3, #24
 80174e8:	d106      	bne.n	80174f8 <MX_ADC34_Interleaved_Init+0x14c>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 80174ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80174ee:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 80174f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174f4:	60fb      	str	r3, [r7, #12]
 80174f6:	e005      	b.n	8017504 <MX_ADC34_Interleaved_Init+0x158>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80174f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80174fc:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80174fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017502:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 8017504:	1d3b      	adds	r3, r7, #4
 8017506:	4619      	mov	r1, r3
 8017508:	480c      	ldr	r0, [pc, #48]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 801750a:	f7f2 f9bf 	bl	800988c <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 801750e:	217f      	movs	r1, #127	; 0x7f
 8017510:	480a      	ldr	r0, [pc, #40]	; (801753c <MX_ADC34_Interleaved_Init+0x190>)
 8017512:	f7f2 f829 	bl	8009568 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017516:	217f      	movs	r1, #127	; 0x7f
 8017518:	4803      	ldr	r0, [pc, #12]	; (8017528 <MX_ADC34_Interleaved_Init+0x17c>)
 801751a:	f7f2 f825 	bl	8009568 <HAL_ADCEx_Calibration_Start>

}
 801751e:	bf00      	nop
 8017520:	3730      	adds	r7, #48	; 0x30
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop
 8017528:	20015f50 	.word	0x20015f50
 801752c:	50000500 	.word	0x50000500
 8017530:	20004544 	.word	0x20004544
 8017534:	20004550 	.word	0x20004550
 8017538:	0801e034 	.word	0x0801e034
 801753c:	20015e84 	.word	0x20015e84
 8017540:	50000400 	.word	0x50000400

08017544 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b08c      	sub	sp, #48	; 0x30
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017554:	f040 8089 	bne.w	801766a <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    ADC12_CLK_ENABLED++;
 8017558:	4b7c      	ldr	r3, [pc, #496]	; (801774c <HAL_ADC_MspInit+0x208>)
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	3301      	adds	r3, #1
 801755e:	4a7b      	ldr	r2, [pc, #492]	; (801774c <HAL_ADC_MspInit+0x208>)
 8017560:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 8017562:	4b7a      	ldr	r3, [pc, #488]	; (801774c <HAL_ADC_MspInit+0x208>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	2b01      	cmp	r3, #1
 8017568:	d10b      	bne.n	8017582 <HAL_ADC_MspInit+0x3e>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 801756a:	4b79      	ldr	r3, [pc, #484]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 801756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801756e:	4a78      	ldr	r2, [pc, #480]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 8017570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017576:	4b76      	ldr	r3, [pc, #472]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 8017578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801757a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801757e:	61bb      	str	r3, [r7, #24]
 8017580:	69bb      	ldr	r3, [r7, #24]
    }
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 8017582:	4b74      	ldr	r3, [pc, #464]	; (8017754 <HAL_ADC_MspInit+0x210>)
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	461a      	mov	r2, r3
 8017588:	4b73      	ldr	r3, [pc, #460]	; (8017758 <HAL_ADC_MspInit+0x214>)
 801758a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d016      	beq.n	80175c0 <HAL_ADC_MspInit+0x7c>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 8017592:	4b70      	ldr	r3, [pc, #448]	; (8017754 <HAL_ADC_MspInit+0x210>)
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	461a      	mov	r2, r3
 8017598:	4b6f      	ldr	r3, [pc, #444]	; (8017758 <HAL_ADC_MspInit+0x214>)
 801759a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801759e:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80175a0:	2303      	movs	r3, #3
 80175a2:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175a4:	2300      	movs	r3, #0
 80175a6:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 80175a8:	4b6a      	ldr	r3, [pc, #424]	; (8017754 <HAL_ADC_MspInit+0x210>)
 80175aa:	781b      	ldrb	r3, [r3, #0]
 80175ac:	461a      	mov	r2, r3
 80175ae:	4b6b      	ldr	r3, [pc, #428]	; (801775c <HAL_ADC_MspInit+0x218>)
 80175b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175b4:	f107 021c 	add.w	r2, r7, #28
 80175b8:	4611      	mov	r1, r2
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f4 f9e4 	bl	800b988 <HAL_GPIO_Init>
    }

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80175c0:	4b67      	ldr	r3, [pc, #412]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175c2:	4a68      	ldr	r2, [pc, #416]	; (8017764 <HAL_ADC_MspInit+0x220>)
 80175c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80175c6:	4b66      	ldr	r3, [pc, #408]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175c8:	2205      	movs	r2, #5
 80175ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80175cc:	4b64      	ldr	r3, [pc, #400]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175ce:	2200      	movs	r2, #0
 80175d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80175d2:	4b63      	ldr	r3, [pc, #396]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175d4:	2200      	movs	r2, #0
 80175d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80175d8:	4b61      	ldr	r3, [pc, #388]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175da:	2280      	movs	r2, #128	; 0x80
 80175dc:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 80175de:	4b62      	ldr	r3, [pc, #392]	; (8017768 <HAL_ADC_MspInit+0x224>)
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d019      	beq.n	801761a <HAL_ADC_MspInit+0xd6>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 80175e6:	4b61      	ldr	r3, [pc, #388]	; (801776c <HAL_ADC_MspInit+0x228>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b10      	cmp	r3, #16
 80175ec:	d003      	beq.n	80175f6 <HAL_ADC_MspInit+0xb2>
 80175ee:	4b5f      	ldr	r3, [pc, #380]	; (801776c <HAL_ADC_MspInit+0x228>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2b18      	cmp	r3, #24
 80175f4:	d108      	bne.n	8017608 <HAL_ADC_MspInit+0xc4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80175f6:	4b5a      	ldr	r3, [pc, #360]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 80175f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80175fc:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80175fe:	4b58      	ldr	r3, [pc, #352]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017604:	615a      	str	r2, [r3, #20]
 8017606:	e01f      	b.n	8017648 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017608:	4b55      	ldr	r3, [pc, #340]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 801760a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801760e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017610:	4b53      	ldr	r3, [pc, #332]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017616:	615a      	str	r2, [r3, #20]
 8017618:	e016      	b.n	8017648 <HAL_ADC_MspInit+0x104>
		}
	}else{
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801761a:	4b54      	ldr	r3, [pc, #336]	; (801776c <HAL_ADC_MspInit+0x228>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	2b10      	cmp	r3, #16
 8017620:	d003      	beq.n	801762a <HAL_ADC_MspInit+0xe6>
 8017622:	4b52      	ldr	r3, [pc, #328]	; (801776c <HAL_ADC_MspInit+0x228>)
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	2b18      	cmp	r3, #24
 8017628:	d106      	bne.n	8017638 <HAL_ADC_MspInit+0xf4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801762a:	4b4d      	ldr	r3, [pc, #308]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 801762c:	2200      	movs	r2, #0
 801762e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017630:	4b4b      	ldr	r3, [pc, #300]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017632:	2200      	movs	r2, #0
 8017634:	615a      	str	r2, [r3, #20]
 8017636:	e007      	b.n	8017648 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017638:	4b49      	ldr	r3, [pc, #292]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 801763a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801763e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017640:	4b47      	ldr	r3, [pc, #284]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017646:	615a      	str	r2, [r3, #20]
		}
	}
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8017648:	4b45      	ldr	r3, [pc, #276]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 801764a:	2220      	movs	r2, #32
 801764c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 801764e:	4b44      	ldr	r3, [pc, #272]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017654:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc1);
 8017656:	4842      	ldr	r0, [pc, #264]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017658:	f7f3 fb64 	bl	800ad24 <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	4a40      	ldr	r2, [pc, #256]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017660:	655a      	str	r2, [r3, #84]	; 0x54
 8017662:	4a3f      	ldr	r2, [pc, #252]	; (8017760 <HAL_ADC_MspInit+0x21c>)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8017668:	e18a      	b.n	8017980 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC2)
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	4a40      	ldr	r2, [pc, #256]	; (8017770 <HAL_ADC_MspInit+0x22c>)
 8017670:	4293      	cmp	r3, r2
 8017672:	f040 8087 	bne.w	8017784 <HAL_ADC_MspInit+0x240>
    ADC12_CLK_ENABLED++;
 8017676:	4b35      	ldr	r3, [pc, #212]	; (801774c <HAL_ADC_MspInit+0x208>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	3301      	adds	r3, #1
 801767c:	4a33      	ldr	r2, [pc, #204]	; (801774c <HAL_ADC_MspInit+0x208>)
 801767e:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 8017680:	4b32      	ldr	r3, [pc, #200]	; (801774c <HAL_ADC_MspInit+0x208>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	2b01      	cmp	r3, #1
 8017686:	d10b      	bne.n	80176a0 <HAL_ADC_MspInit+0x15c>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 8017688:	4b31      	ldr	r3, [pc, #196]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 801768a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801768c:	4a30      	ldr	r2, [pc, #192]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 801768e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017694:	4b2e      	ldr	r3, [pc, #184]	; (8017750 <HAL_ADC_MspInit+0x20c>)
 8017696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801769c:	617b      	str	r3, [r7, #20]
 801769e:	697b      	ldr	r3, [r7, #20]
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80176a0:	4b2c      	ldr	r3, [pc, #176]	; (8017754 <HAL_ADC_MspInit+0x210>)
 80176a2:	785b      	ldrb	r3, [r3, #1]
 80176a4:	461a      	mov	r2, r3
 80176a6:	4b33      	ldr	r3, [pc, #204]	; (8017774 <HAL_ADC_MspInit+0x230>)
 80176a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d016      	beq.n	80176de <HAL_ADC_MspInit+0x19a>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 80176b0:	4b28      	ldr	r3, [pc, #160]	; (8017754 <HAL_ADC_MspInit+0x210>)
 80176b2:	785b      	ldrb	r3, [r3, #1]
 80176b4:	461a      	mov	r2, r3
 80176b6:	4b2f      	ldr	r3, [pc, #188]	; (8017774 <HAL_ADC_MspInit+0x230>)
 80176b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80176bc:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80176be:	2303      	movs	r3, #3
 80176c0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176c2:	2300      	movs	r3, #0
 80176c4:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 80176c6:	4b23      	ldr	r3, [pc, #140]	; (8017754 <HAL_ADC_MspInit+0x210>)
 80176c8:	785b      	ldrb	r3, [r3, #1]
 80176ca:	461a      	mov	r2, r3
 80176cc:	4b2a      	ldr	r3, [pc, #168]	; (8017778 <HAL_ADC_MspInit+0x234>)
 80176ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176d2:	f107 021c 	add.w	r2, r7, #28
 80176d6:	4611      	mov	r1, r2
 80176d8:	4618      	mov	r0, r3
 80176da:	f7f4 f955 	bl	800b988 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 80176de:	4b27      	ldr	r3, [pc, #156]	; (801777c <HAL_ADC_MspInit+0x238>)
 80176e0:	4a27      	ldr	r2, [pc, #156]	; (8017780 <HAL_ADC_MspInit+0x23c>)
 80176e2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80176e4:	4b25      	ldr	r3, [pc, #148]	; (801777c <HAL_ADC_MspInit+0x238>)
 80176e6:	2224      	movs	r2, #36	; 0x24
 80176e8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80176ea:	4b24      	ldr	r3, [pc, #144]	; (801777c <HAL_ADC_MspInit+0x238>)
 80176ec:	2200      	movs	r2, #0
 80176ee:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80176f0:	4b22      	ldr	r3, [pc, #136]	; (801777c <HAL_ADC_MspInit+0x238>)
 80176f2:	2200      	movs	r2, #0
 80176f4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80176f6:	4b21      	ldr	r3, [pc, #132]	; (801777c <HAL_ADC_MspInit+0x238>)
 80176f8:	2280      	movs	r2, #128	; 0x80
 80176fa:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 80176fc:	4b1b      	ldr	r3, [pc, #108]	; (801776c <HAL_ADC_MspInit+0x228>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2b10      	cmp	r3, #16
 8017702:	d003      	beq.n	801770c <HAL_ADC_MspInit+0x1c8>
 8017704:	4b19      	ldr	r3, [pc, #100]	; (801776c <HAL_ADC_MspInit+0x228>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2b18      	cmp	r3, #24
 801770a:	d106      	bne.n	801771a <HAL_ADC_MspInit+0x1d6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 801770c:	4b1b      	ldr	r3, [pc, #108]	; (801777c <HAL_ADC_MspInit+0x238>)
 801770e:	2200      	movs	r2, #0
 8017710:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017712:	4b1a      	ldr	r3, [pc, #104]	; (801777c <HAL_ADC_MspInit+0x238>)
 8017714:	2200      	movs	r2, #0
 8017716:	615a      	str	r2, [r3, #20]
 8017718:	e007      	b.n	801772a <HAL_ADC_MspInit+0x1e6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801771a:	4b18      	ldr	r3, [pc, #96]	; (801777c <HAL_ADC_MspInit+0x238>)
 801771c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017720:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017722:	4b16      	ldr	r3, [pc, #88]	; (801777c <HAL_ADC_MspInit+0x238>)
 8017724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017728:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 801772a:	4b14      	ldr	r3, [pc, #80]	; (801777c <HAL_ADC_MspInit+0x238>)
 801772c:	2220      	movs	r2, #32
 801772e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8017730:	4b12      	ldr	r3, [pc, #72]	; (801777c <HAL_ADC_MspInit+0x238>)
 8017732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017736:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc2);
 8017738:	4810      	ldr	r0, [pc, #64]	; (801777c <HAL_ADC_MspInit+0x238>)
 801773a:	f7f3 faf3 	bl	800ad24 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	4a0e      	ldr	r2, [pc, #56]	; (801777c <HAL_ADC_MspInit+0x238>)
 8017742:	655a      	str	r2, [r3, #84]	; 0x54
 8017744:	4a0d      	ldr	r2, [pc, #52]	; (801777c <HAL_ADC_MspInit+0x238>)
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6293      	str	r3, [r2, #40]	; 0x28
}
 801774a:	e119      	b.n	8017980 <HAL_ADC_MspInit+0x43c>
 801774c:	2000453c 	.word	0x2000453c
 8017750:	40021000 	.word	0x40021000
 8017754:	20004550 	.word	0x20004550
 8017758:	0801dfc4 	.word	0x0801dfc4
 801775c:	2000006c 	.word	0x2000006c
 8017760:	20015ef0 	.word	0x20015ef0
 8017764:	40020008 	.word	0x40020008
 8017768:	2000454c 	.word	0x2000454c
 801776c:	20004544 	.word	0x20004544
 8017770:	50000100 	.word	0x50000100
 8017774:	0801dffc 	.word	0x0801dffc
 8017778:	20000090 	.word	0x20000090
 801777c:	20015fbc 	.word	0x20015fbc
 8017780:	40020058 	.word	0x40020058
  else if(hadc->Instance==ADC3)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	4a7f      	ldr	r2, [pc, #508]	; (8017988 <HAL_ADC_MspInit+0x444>)
 801778a:	4293      	cmp	r3, r2
 801778c:	f040 8089 	bne.w	80178a2 <HAL_ADC_MspInit+0x35e>
    ADC34_CLK_ENABLED++;
 8017790:	4b7e      	ldr	r3, [pc, #504]	; (801798c <HAL_ADC_MspInit+0x448>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	3301      	adds	r3, #1
 8017796:	4a7d      	ldr	r2, [pc, #500]	; (801798c <HAL_ADC_MspInit+0x448>)
 8017798:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 801779a:	4b7c      	ldr	r3, [pc, #496]	; (801798c <HAL_ADC_MspInit+0x448>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	2b01      	cmp	r3, #1
 80177a0:	d10b      	bne.n	80177ba <HAL_ADC_MspInit+0x276>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80177a2:	4b7b      	ldr	r3, [pc, #492]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80177a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177a6:	4a7a      	ldr	r2, [pc, #488]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80177a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80177ae:	4b78      	ldr	r3, [pc, #480]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80177b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177b6:	613b      	str	r3, [r7, #16]
 80177b8:	693b      	ldr	r3, [r7, #16]
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80177ba:	4b76      	ldr	r3, [pc, #472]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80177bc:	789b      	ldrb	r3, [r3, #2]
 80177be:	461a      	mov	r2, r3
 80177c0:	4b75      	ldr	r3, [pc, #468]	; (8017998 <HAL_ADC_MspInit+0x454>)
 80177c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d016      	beq.n	80177f8 <HAL_ADC_MspInit+0x2b4>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 80177ca:	4b72      	ldr	r3, [pc, #456]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80177cc:	789b      	ldrb	r3, [r3, #2]
 80177ce:	461a      	mov	r2, r3
 80177d0:	4b71      	ldr	r3, [pc, #452]	; (8017998 <HAL_ADC_MspInit+0x454>)
 80177d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80177d6:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80177d8:	2303      	movs	r3, #3
 80177da:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177dc:	2300      	movs	r3, #0
 80177de:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 80177e0:	4b6c      	ldr	r3, [pc, #432]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80177e2:	789b      	ldrb	r3, [r3, #2]
 80177e4:	461a      	mov	r2, r3
 80177e6:	4b6d      	ldr	r3, [pc, #436]	; (801799c <HAL_ADC_MspInit+0x458>)
 80177e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177ec:	f107 021c 	add.w	r2, r7, #28
 80177f0:	4611      	mov	r1, r2
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7f4 f8c8 	bl	800b988 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80177f8:	4b69      	ldr	r3, [pc, #420]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 80177fa:	4a6a      	ldr	r2, [pc, #424]	; (80179a4 <HAL_ADC_MspInit+0x460>)
 80177fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80177fe:	4b68      	ldr	r3, [pc, #416]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017800:	2225      	movs	r2, #37	; 0x25
 8017802:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017804:	4b66      	ldr	r3, [pc, #408]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017806:	2200      	movs	r2, #0
 8017808:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 801780a:	4b65      	ldr	r3, [pc, #404]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 801780c:	2200      	movs	r2, #0
 801780e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8017810:	4b63      	ldr	r3, [pc, #396]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017812:	2280      	movs	r2, #128	; 0x80
 8017814:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 8017816:	4b64      	ldr	r3, [pc, #400]	; (80179a8 <HAL_ADC_MspInit+0x464>)
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d019      	beq.n	8017852 <HAL_ADC_MspInit+0x30e>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801781e:	4b63      	ldr	r3, [pc, #396]	; (80179ac <HAL_ADC_MspInit+0x468>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	2b10      	cmp	r3, #16
 8017824:	d003      	beq.n	801782e <HAL_ADC_MspInit+0x2ea>
 8017826:	4b61      	ldr	r3, [pc, #388]	; (80179ac <HAL_ADC_MspInit+0x468>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b18      	cmp	r3, #24
 801782c:	d108      	bne.n	8017840 <HAL_ADC_MspInit+0x2fc>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801782e:	4b5c      	ldr	r3, [pc, #368]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017834:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017836:	4b5a      	ldr	r3, [pc, #360]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017838:	f44f 7280 	mov.w	r2, #256	; 0x100
 801783c:	615a      	str	r2, [r3, #20]
 801783e:	e01f      	b.n	8017880 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017840:	4b57      	ldr	r3, [pc, #348]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017846:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017848:	4b55      	ldr	r3, [pc, #340]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 801784a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801784e:	615a      	str	r2, [r3, #20]
 8017850:	e016      	b.n	8017880 <HAL_ADC_MspInit+0x33c>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017852:	4b56      	ldr	r3, [pc, #344]	; (80179ac <HAL_ADC_MspInit+0x468>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b10      	cmp	r3, #16
 8017858:	d003      	beq.n	8017862 <HAL_ADC_MspInit+0x31e>
 801785a:	4b54      	ldr	r3, [pc, #336]	; (80179ac <HAL_ADC_MspInit+0x468>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b18      	cmp	r3, #24
 8017860:	d106      	bne.n	8017870 <HAL_ADC_MspInit+0x32c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8017862:	4b4f      	ldr	r3, [pc, #316]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017864:	2200      	movs	r2, #0
 8017866:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017868:	4b4d      	ldr	r3, [pc, #308]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 801786a:	2200      	movs	r2, #0
 801786c:	615a      	str	r2, [r3, #20]
 801786e:	e007      	b.n	8017880 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017870:	4b4b      	ldr	r3, [pc, #300]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017876:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017878:	4b49      	ldr	r3, [pc, #292]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 801787a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801787e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8017880:	4b47      	ldr	r3, [pc, #284]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017882:	2220      	movs	r2, #32
 8017884:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8017886:	4b46      	ldr	r3, [pc, #280]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801788c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc3);
 801788e:	4844      	ldr	r0, [pc, #272]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017890:	f7f3 fa48 	bl	800ad24 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	4a42      	ldr	r2, [pc, #264]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 8017898:	655a      	str	r2, [r3, #84]	; 0x54
 801789a:	4a41      	ldr	r2, [pc, #260]	; (80179a0 <HAL_ADC_MspInit+0x45c>)
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6293      	str	r3, [r2, #40]	; 0x28
}
 80178a0:	e06e      	b.n	8017980 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC4)
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	4a42      	ldr	r2, [pc, #264]	; (80179b0 <HAL_ADC_MspInit+0x46c>)
 80178a8:	4293      	cmp	r3, r2
 80178aa:	d169      	bne.n	8017980 <HAL_ADC_MspInit+0x43c>
    ADC34_CLK_ENABLED++;
 80178ac:	4b37      	ldr	r3, [pc, #220]	; (801798c <HAL_ADC_MspInit+0x448>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	3301      	adds	r3, #1
 80178b2:	4a36      	ldr	r2, [pc, #216]	; (801798c <HAL_ADC_MspInit+0x448>)
 80178b4:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 80178b6:	4b35      	ldr	r3, [pc, #212]	; (801798c <HAL_ADC_MspInit+0x448>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	2b01      	cmp	r3, #1
 80178bc:	d10b      	bne.n	80178d6 <HAL_ADC_MspInit+0x392>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80178be:	4b34      	ldr	r3, [pc, #208]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80178c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178c2:	4a33      	ldr	r2, [pc, #204]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80178c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80178c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80178ca:	4b31      	ldr	r3, [pc, #196]	; (8017990 <HAL_ADC_MspInit+0x44c>)
 80178cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80178d2:	60fb      	str	r3, [r7, #12]
 80178d4:	68fb      	ldr	r3, [r7, #12]
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80178d6:	4b2f      	ldr	r3, [pc, #188]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80178d8:	78db      	ldrb	r3, [r3, #3]
 80178da:	461a      	mov	r2, r3
 80178dc:	4b35      	ldr	r3, [pc, #212]	; (80179b4 <HAL_ADC_MspInit+0x470>)
 80178de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d016      	beq.n	8017914 <HAL_ADC_MspInit+0x3d0>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 80178e6:	4b2b      	ldr	r3, [pc, #172]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80178e8:	78db      	ldrb	r3, [r3, #3]
 80178ea:	461a      	mov	r2, r3
 80178ec:	4b31      	ldr	r3, [pc, #196]	; (80179b4 <HAL_ADC_MspInit+0x470>)
 80178ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80178f2:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80178f4:	2303      	movs	r3, #3
 80178f6:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178f8:	2300      	movs	r3, #0
 80178fa:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 80178fc:	4b25      	ldr	r3, [pc, #148]	; (8017994 <HAL_ADC_MspInit+0x450>)
 80178fe:	78db      	ldrb	r3, [r3, #3]
 8017900:	461a      	mov	r2, r3
 8017902:	4b2d      	ldr	r3, [pc, #180]	; (80179b8 <HAL_ADC_MspInit+0x474>)
 8017904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017908:	f107 021c 	add.w	r2, r7, #28
 801790c:	4611      	mov	r1, r2
 801790e:	4618      	mov	r0, r3
 8017910:	f7f4 f83a 	bl	800b988 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8017914:	4b29      	ldr	r3, [pc, #164]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017916:	4a2a      	ldr	r2, [pc, #168]	; (80179c0 <HAL_ADC_MspInit+0x47c>)
 8017918:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 801791a:	4b28      	ldr	r3, [pc, #160]	; (80179bc <HAL_ADC_MspInit+0x478>)
 801791c:	2226      	movs	r2, #38	; 0x26
 801791e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017920:	4b26      	ldr	r3, [pc, #152]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017922:	2200      	movs	r2, #0
 8017924:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8017926:	4b25      	ldr	r3, [pc, #148]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017928:	2200      	movs	r2, #0
 801792a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 801792c:	4b23      	ldr	r3, [pc, #140]	; (80179bc <HAL_ADC_MspInit+0x478>)
 801792e:	2280      	movs	r2, #128	; 0x80
 8017930:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017932:	4b1e      	ldr	r3, [pc, #120]	; (80179ac <HAL_ADC_MspInit+0x468>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	2b10      	cmp	r3, #16
 8017938:	d003      	beq.n	8017942 <HAL_ADC_MspInit+0x3fe>
 801793a:	4b1c      	ldr	r3, [pc, #112]	; (80179ac <HAL_ADC_MspInit+0x468>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b18      	cmp	r3, #24
 8017940:	d106      	bne.n	8017950 <HAL_ADC_MspInit+0x40c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 8017942:	4b1e      	ldr	r3, [pc, #120]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017944:	2200      	movs	r2, #0
 8017946:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017948:	4b1c      	ldr	r3, [pc, #112]	; (80179bc <HAL_ADC_MspInit+0x478>)
 801794a:	2200      	movs	r2, #0
 801794c:	615a      	str	r2, [r3, #20]
 801794e:	e007      	b.n	8017960 <HAL_ADC_MspInit+0x41c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017950:	4b1a      	ldr	r3, [pc, #104]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017956:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017958:	4b18      	ldr	r3, [pc, #96]	; (80179bc <HAL_ADC_MspInit+0x478>)
 801795a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801795e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8017960:	4b16      	ldr	r3, [pc, #88]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017962:	2220      	movs	r2, #32
 8017964:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 8017966:	4b15      	ldr	r3, [pc, #84]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801796c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc4);
 801796e:	4813      	ldr	r0, [pc, #76]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017970:	f7f3 f9d8 	bl	800ad24 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	4a11      	ldr	r2, [pc, #68]	; (80179bc <HAL_ADC_MspInit+0x478>)
 8017978:	655a      	str	r2, [r3, #84]	; 0x54
 801797a:	4a10      	ldr	r2, [pc, #64]	; (80179bc <HAL_ADC_MspInit+0x478>)
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8017980:	bf00      	nop
 8017982:	3730      	adds	r7, #48	; 0x30
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	50000400 	.word	0x50000400
 801798c:	20004540 	.word	0x20004540
 8017990:	40021000 	.word	0x40021000
 8017994:	20004550 	.word	0x20004550
 8017998:	0801e02c 	.word	0x0801e02c
 801799c:	200000b0 	.word	0x200000b0
 80179a0:	20015db8 	.word	0x20015db8
 80179a4:	40020030 	.word	0x40020030
 80179a8:	2000454c 	.word	0x2000454c
 80179ac:	20004544 	.word	0x20004544
 80179b0:	50000500 	.word	0x50000500
 80179b4:	0801e044 	.word	0x0801e044
 80179b8:	200000c0 	.word	0x200000c0
 80179bc:	20015cec 	.word	0x20015cec
 80179c0:	40020044 	.word	0x40020044

080179c4 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b0a0      	sub	sp, #128	; 0x80
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	4603      	mov	r3, r0
 80179cc:	60b9      	str	r1, [r7, #8]
 80179ce:	607a      	str	r2, [r7, #4]
 80179d0:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 80179d2:	7bfb      	ldrb	r3, [r7, #15]
 80179d4:	2b03      	cmp	r3, #3
 80179d6:	d82f      	bhi.n	8017a38 <ADC_DMA_Reconfig+0x74>
 80179d8:	a201      	add	r2, pc, #4	; (adr r2, 80179e0 <ADC_DMA_Reconfig+0x1c>)
 80179da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179de:	bf00      	nop
 80179e0:	080179f1 	.word	0x080179f1
 80179e4:	08017a03 	.word	0x08017a03
 80179e8:	08017a15 	.word	0x08017a15
 80179ec:	08017a27 	.word	0x08017a27
		case 0:
			adcHandler=hadc1;
 80179f0:	4a1a      	ldr	r2, [pc, #104]	; (8017a5c <ADC_DMA_Reconfig+0x98>)
 80179f2:	f107 0314 	add.w	r3, r7, #20
 80179f6:	4611      	mov	r1, r2
 80179f8:	226c      	movs	r2, #108	; 0x6c
 80179fa:	4618      	mov	r0, r3
 80179fc:	f004 fdd6 	bl	801c5ac <memcpy>
		break;
 8017a00:	e01a      	b.n	8017a38 <ADC_DMA_Reconfig+0x74>
		case 1:
			adcHandler=hadc2;
 8017a02:	4a17      	ldr	r2, [pc, #92]	; (8017a60 <ADC_DMA_Reconfig+0x9c>)
 8017a04:	f107 0314 	add.w	r3, r7, #20
 8017a08:	4611      	mov	r1, r2
 8017a0a:	226c      	movs	r2, #108	; 0x6c
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f004 fdcd 	bl	801c5ac <memcpy>
		break;
 8017a12:	e011      	b.n	8017a38 <ADC_DMA_Reconfig+0x74>
		case 2:
			adcHandler=hadc3;
 8017a14:	4a13      	ldr	r2, [pc, #76]	; (8017a64 <ADC_DMA_Reconfig+0xa0>)
 8017a16:	f107 0314 	add.w	r3, r7, #20
 8017a1a:	4611      	mov	r1, r2
 8017a1c:	226c      	movs	r2, #108	; 0x6c
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f004 fdc4 	bl	801c5ac <memcpy>
		break;
 8017a24:	e008      	b.n	8017a38 <ADC_DMA_Reconfig+0x74>
		case 3:
			adcHandler=hadc4;
 8017a26:	4a10      	ldr	r2, [pc, #64]	; (8017a68 <ADC_DMA_Reconfig+0xa4>)
 8017a28:	f107 0314 	add.w	r3, r7, #20
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	226c      	movs	r2, #108	; 0x6c
 8017a30:	4618      	mov	r0, r3
 8017a32:	f004 fdbb 	bl	801c5ac <memcpy>
		break;
 8017a36:	bf00      	nop
	}
	
	if(buff!=NULL && len!=0){
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d009      	beq.n	8017a52 <ADC_DMA_Reconfig+0x8e>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d006      	beq.n	8017a52 <ADC_DMA_Reconfig+0x8e>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 8017a44:	f107 0314 	add.w	r3, r7, #20
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	68b9      	ldr	r1, [r7, #8]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7f0 fa23 	bl	8007e98 <HAL_ADC_Start_DMA>
	}
}
 8017a52:	bf00      	nop
 8017a54:	3780      	adds	r7, #128	; 0x80
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	20015e18 	.word	0x20015e18
 8017a60:	20015d4c 	.word	0x20015d4c
 8017a64:	20015e84 	.word	0x20015e84
 8017a68:	20015f50 	.word	0x20015f50

08017a6c <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b0ba      	sub	sp, #232	; 0xe8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	4603      	mov	r3, r0
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
 8017a78:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d002      	beq.n	8017a86 <ADC_DMA_Reconfig_Interleave+0x1a>
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d011      	beq.n	8017aa8 <ADC_DMA_Reconfig_Interleave+0x3c>
 8017a84:	e021      	b.n	8017aca <ADC_DMA_Reconfig_Interleave+0x5e>
		case 0:
			adcHandlerMaster=hadc1;
 8017a86:	4a1c      	ldr	r2, [pc, #112]	; (8017af8 <ADC_DMA_Reconfig_Interleave+0x8c>)
 8017a88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017a8c:	4611      	mov	r1, r2
 8017a8e:	226c      	movs	r2, #108	; 0x6c
 8017a90:	4618      	mov	r0, r3
 8017a92:	f004 fd8b 	bl	801c5ac <memcpy>
			adcHandlerSlave=hadc2;
 8017a96:	4a19      	ldr	r2, [pc, #100]	; (8017afc <ADC_DMA_Reconfig_Interleave+0x90>)
 8017a98:	f107 0310 	add.w	r3, r7, #16
 8017a9c:	4611      	mov	r1, r2
 8017a9e:	226c      	movs	r2, #108	; 0x6c
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f004 fd83 	bl	801c5ac <memcpy>
		break;
 8017aa6:	e010      	b.n	8017aca <ADC_DMA_Reconfig_Interleave+0x5e>
		case 1:
			adcHandlerMaster=hadc3;
 8017aa8:	4a15      	ldr	r2, [pc, #84]	; (8017b00 <ADC_DMA_Reconfig_Interleave+0x94>)
 8017aaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017aae:	4611      	mov	r1, r2
 8017ab0:	226c      	movs	r2, #108	; 0x6c
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f004 fd7a 	bl	801c5ac <memcpy>
			adcHandlerSlave=hadc4;
 8017ab8:	4a12      	ldr	r2, [pc, #72]	; (8017b04 <ADC_DMA_Reconfig_Interleave+0x98>)
 8017aba:	f107 0310 	add.w	r3, r7, #16
 8017abe:	4611      	mov	r1, r2
 8017ac0:	226c      	movs	r2, #108	; 0x6c
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f004 fd72 	bl	801c5ac <memcpy>
		break;
 8017ac8:	bf00      	nop
	}

	if(buff!=NULL && len!=0){
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d00e      	beq.n	8017aee <ADC_DMA_Reconfig_Interleave+0x82>
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d00b      	beq.n	8017aee <ADC_DMA_Reconfig_Interleave+0x82>
		HAL_ADC_Start(&adcHandlerSlave);
 8017ad6:	f107 0310 	add.w	r3, r7, #16
 8017ada:	4618      	mov	r0, r3
 8017adc:	f7f0 f8d6 	bl	8007c8c <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 8017ae0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	68b9      	ldr	r1, [r7, #8]
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f7f1 fdd3 	bl	8009694 <HAL_ADCEx_MultiModeStart_DMA>
	}

}
 8017aee:	bf00      	nop
 8017af0:	37e8      	adds	r7, #232	; 0xe8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	20015e18 	.word	0x20015e18
 8017afc:	20015d4c 	.word	0x20015d4c
 8017b00:	20015e84 	.word	0x20015e84
 8017b04:	20015f50 	.word	0x20015f50

08017b08 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8017b0c:	4806      	ldr	r0, [pc, #24]	; (8017b28 <ADC_DMA_Stop+0x20>)
 8017b0e:	f7f0 fab3 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017b12:	4806      	ldr	r0, [pc, #24]	; (8017b2c <ADC_DMA_Stop+0x24>)
 8017b14:	f7f0 fab0 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017b18:	4805      	ldr	r0, [pc, #20]	; (8017b30 <ADC_DMA_Stop+0x28>)
 8017b1a:	f7f0 faad 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017b1e:	4805      	ldr	r0, [pc, #20]	; (8017b34 <ADC_DMA_Stop+0x2c>)
 8017b20:	f7f0 faaa 	bl	8008078 <HAL_ADC_Stop_DMA>
	
	//CalibrateADC();
}
 8017b24:	bf00      	nop
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	20015e18 	.word	0x20015e18
 8017b2c:	20015d4c 	.word	0x20015d4c
 8017b30:	20015e84 	.word	0x20015e84
 8017b34:	20015f50 	.word	0x20015f50

08017b38 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b09e      	sub	sp, #120	; 0x78
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	4603      	mov	r3, r0
 8017b40:	71fb      	strb	r3, [r7, #7]
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 8017b42:	79fb      	ldrb	r3, [r7, #7]
 8017b44:	3b01      	subs	r3, #1
 8017b46:	2b03      	cmp	r3, #3
 8017b48:	d82e      	bhi.n	8017ba8 <DMA_GetCurrDataCounter+0x70>
 8017b4a:	a201      	add	r2, pc, #4	; (adr r2, 8017b50 <DMA_GetCurrDataCounter+0x18>)
 8017b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b50:	08017b61 	.word	0x08017b61
 8017b54:	08017b73 	.word	0x08017b73
 8017b58:	08017b85 	.word	0x08017b85
 8017b5c:	08017b97 	.word	0x08017b97
		case 1:
			adcHandler=hadc1;
 8017b60:	4a1b      	ldr	r2, [pc, #108]	; (8017bd0 <DMA_GetCurrDataCounter+0x98>)
 8017b62:	f107 030c 	add.w	r3, r7, #12
 8017b66:	4611      	mov	r1, r2
 8017b68:	226c      	movs	r2, #108	; 0x6c
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f004 fd1e 	bl	801c5ac <memcpy>
		break;
 8017b70:	e01a      	b.n	8017ba8 <DMA_GetCurrDataCounter+0x70>
		case 2:
			adcHandler=hadc2;
 8017b72:	4a18      	ldr	r2, [pc, #96]	; (8017bd4 <DMA_GetCurrDataCounter+0x9c>)
 8017b74:	f107 030c 	add.w	r3, r7, #12
 8017b78:	4611      	mov	r1, r2
 8017b7a:	226c      	movs	r2, #108	; 0x6c
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f004 fd15 	bl	801c5ac <memcpy>
		break;
 8017b82:	e011      	b.n	8017ba8 <DMA_GetCurrDataCounter+0x70>
		case 3:
			adcHandler=hadc3;
 8017b84:	4a14      	ldr	r2, [pc, #80]	; (8017bd8 <DMA_GetCurrDataCounter+0xa0>)
 8017b86:	f107 030c 	add.w	r3, r7, #12
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	226c      	movs	r2, #108	; 0x6c
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f004 fd0c 	bl	801c5ac <memcpy>
		break;
 8017b94:	e008      	b.n	8017ba8 <DMA_GetCurrDataCounter+0x70>
		case 4:
			adcHandler=hadc4;
 8017b96:	4a11      	ldr	r2, [pc, #68]	; (8017bdc <DMA_GetCurrDataCounter+0xa4>)
 8017b98:	f107 030c 	add.w	r3, r7, #12
 8017b9c:	4611      	mov	r1, r2
 8017b9e:	226c      	movs	r2, #108	; 0x6c
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f004 fd03 	bl	801c5ac <memcpy>
		break;
 8017ba6:	bf00      	nop
	}

	if(ADCInterleaved==1){
 8017ba8:	4b0d      	ldr	r3, [pc, #52]	; (8017be0 <DMA_GetCurrDataCounter+0xa8>)
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d106      	bne.n	8017bbe <DMA_GetCurrDataCounter+0x86>
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 8017bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	005b      	lsls	r3, r3, #1
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	e003      	b.n	8017bc6 <DMA_GetCurrDataCounter+0x8e>
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 8017bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	b29b      	uxth	r3, r3
	}


}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3778      	adds	r7, #120	; 0x78
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	20015e18 	.word	0x20015e18
 8017bd4:	20015d4c 	.word	0x20015d4c
 8017bd8:	20015e84 	.word	0x20015e84
 8017bdc:	20015f50 	.word	0x20015f50
 8017be0:	2000454c 	.word	0x2000454c

08017be4 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 8017bec:	4b48      	ldr	r3, [pc, #288]	; (8017d10 <ADC_set_sampling_time+0x12c>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2b18      	cmp	r3, #24
 8017bf2:	d841      	bhi.n	8017c78 <ADC_set_sampling_time+0x94>
 8017bf4:	a201      	add	r2, pc, #4	; (adr r2, 8017bfc <ADC_set_sampling_time+0x18>)
 8017bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bfa:	bf00      	nop
 8017bfc:	08017c61 	.word	0x08017c61
 8017c00:	08017c79 	.word	0x08017c79
 8017c04:	08017c79 	.word	0x08017c79
 8017c08:	08017c79 	.word	0x08017c79
 8017c0c:	08017c79 	.word	0x08017c79
 8017c10:	08017c79 	.word	0x08017c79
 8017c14:	08017c79 	.word	0x08017c79
 8017c18:	08017c79 	.word	0x08017c79
 8017c1c:	08017c67 	.word	0x08017c67
 8017c20:	08017c79 	.word	0x08017c79
 8017c24:	08017c79 	.word	0x08017c79
 8017c28:	08017c79 	.word	0x08017c79
 8017c2c:	08017c79 	.word	0x08017c79
 8017c30:	08017c79 	.word	0x08017c79
 8017c34:	08017c79 	.word	0x08017c79
 8017c38:	08017c79 	.word	0x08017c79
 8017c3c:	08017c6d 	.word	0x08017c6d
 8017c40:	08017c79 	.word	0x08017c79
 8017c44:	08017c79 	.word	0x08017c79
 8017c48:	08017c79 	.word	0x08017c79
 8017c4c:	08017c79 	.word	0x08017c79
 8017c50:	08017c79 	.word	0x08017c79
 8017c54:	08017c79 	.word	0x08017c79
 8017c58:	08017c79 	.word	0x08017c79
 8017c5c:	08017c73 	.word	0x08017c73
		case ADC_RESOLUTION_12B:
			ADCRes=12;
 8017c60:	230c      	movs	r3, #12
 8017c62:	73fb      	strb	r3, [r7, #15]
			break;
 8017c64:	e008      	b.n	8017c78 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_10B:
			ADCRes=10;
 8017c66:	230a      	movs	r3, #10
 8017c68:	73fb      	strb	r3, [r7, #15]
			break;
 8017c6a:	e005      	b.n	8017c78 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_8B:
			ADCRes=8;
 8017c6c:	2308      	movs	r3, #8
 8017c6e:	73fb      	strb	r3, [r7, #15]
			break;
 8017c70:	e002      	b.n	8017c78 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_6B:
			ADCRes=6;
 8017c72:	2306      	movs	r3, #6
 8017c74:	73fb      	strb	r3, [r7, #15]
			break;
 8017c76:	bf00      	nop
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/2/realfreq-ADCRes-1; //divided by to due to ADC_CLOCK_SYNC_PCLK_DIV2
 8017c78:	f7f5 f964 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	085a      	lsrs	r2, r3, #1
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8017c86:	7bfb      	ldrb	r3, [r7, #15]
 8017c88:	1ad3      	subs	r3, r2, r3
 8017c8a:	3b01      	subs	r3, #1
 8017c8c:	60bb      	str	r3, [r7, #8]
	if(cyclesForConversion>=640){
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017c94:	d303      	bcc.n	8017c9e <ADC_set_sampling_time+0xba>
		ADCSamplingTime=ADC_SAMPLETIME_640CYCLES_5;
 8017c96:	4b1f      	ldr	r3, [pc, #124]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017c98:	2207      	movs	r2, #7
 8017c9a:	601a      	str	r2, [r3, #0]
	}else if(cyclesForConversion>=2){
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}	
}
 8017c9c:	e033      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=247){
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	2bf6      	cmp	r3, #246	; 0xf6
 8017ca2:	d903      	bls.n	8017cac <ADC_set_sampling_time+0xc8>
		ADCSamplingTime=ADC_SAMPLETIME_247CYCLES_5;
 8017ca4:	4b1b      	ldr	r3, [pc, #108]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017ca6:	2206      	movs	r2, #6
 8017ca8:	601a      	str	r2, [r3, #0]
}
 8017caa:	e02c      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=92){
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	2b5b      	cmp	r3, #91	; 0x5b
 8017cb0:	d903      	bls.n	8017cba <ADC_set_sampling_time+0xd6>
		ADCSamplingTime=ADC_SAMPLETIME_92CYCLES_5;
 8017cb2:	4b18      	ldr	r3, [pc, #96]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cb4:	2205      	movs	r2, #5
 8017cb6:	601a      	str	r2, [r3, #0]
}
 8017cb8:	e025      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=47){
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8017cbe:	d903      	bls.n	8017cc8 <ADC_set_sampling_time+0xe4>
		ADCSamplingTime=ADC_SAMPLETIME_47CYCLES_5;
 8017cc0:	4b14      	ldr	r3, [pc, #80]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cc2:	2204      	movs	r2, #4
 8017cc4:	601a      	str	r2, [r3, #0]
}
 8017cc6:	e01e      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=24){
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	2b17      	cmp	r3, #23
 8017ccc:	d903      	bls.n	8017cd6 <ADC_set_sampling_time+0xf2>
		ADCSamplingTime=ADC_SAMPLETIME_24CYCLES_5;
 8017cce:	4b11      	ldr	r3, [pc, #68]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cd0:	2203      	movs	r2, #3
 8017cd2:	601a      	str	r2, [r3, #0]
}
 8017cd4:	e017      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=12){
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	2b0b      	cmp	r3, #11
 8017cda:	d903      	bls.n	8017ce4 <ADC_set_sampling_time+0x100>
		ADCSamplingTime=ADC_SAMPLETIME_12CYCLES_5;
 8017cdc:	4b0d      	ldr	r3, [pc, #52]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cde:	2202      	movs	r2, #2
 8017ce0:	601a      	str	r2, [r3, #0]
}
 8017ce2:	e010      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=6){
 8017ce4:	68bb      	ldr	r3, [r7, #8]
 8017ce6:	2b05      	cmp	r3, #5
 8017ce8:	d903      	bls.n	8017cf2 <ADC_set_sampling_time+0x10e>
		ADCSamplingTime=ADC_SAMPLETIME_6CYCLES_5;
 8017cea:	4b0a      	ldr	r3, [pc, #40]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cec:	2201      	movs	r2, #1
 8017cee:	601a      	str	r2, [r3, #0]
}
 8017cf0:	e009      	b.n	8017d06 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=2){
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d903      	bls.n	8017d00 <ADC_set_sampling_time+0x11c>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017cf8:	4b06      	ldr	r3, [pc, #24]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	601a      	str	r2, [r3, #0]
}
 8017cfe:	e002      	b.n	8017d06 <ADC_set_sampling_time+0x122>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017d00:	4b04      	ldr	r3, [pc, #16]	; (8017d14 <ADC_set_sampling_time+0x130>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	601a      	str	r2, [r3, #0]
}
 8017d06:	bf00      	nop
 8017d08:	3710      	adds	r7, #16
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop
 8017d10:	20004544 	.word	0x20004544
 8017d14:	20004548 	.word	0x20004548

08017d18 <samplingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	af00      	add	r7, sp, #0
	TIMScopeEnable();
 8017d1c:	f003 feba 	bl	801ba94 <TIMScopeEnable>
}
 8017d20:	bf00      	nop
 8017d22:	bd80      	pop	{r7, pc}

08017d24 <samplingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
 8017d24:	b580      	push	{r7, lr}
 8017d26:	af00      	add	r7, sp, #0
	TIMScopeDisable();
 8017d28:	f003 febe 	bl	801baa8 <TIMScopeDisable>
}
 8017d2c:	bf00      	nop
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <adcSetInputChannel>:

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	4603      	mov	r3, r0
 8017d38:	460a      	mov	r2, r1
 8017d3a:	71fb      	strb	r3, [r7, #7]
 8017d3c:	4613      	mov	r3, r2
 8017d3e:	71bb      	strb	r3, [r7, #6]
	ADCChannel[adc]=chann;
 8017d40:	79fb      	ldrb	r3, [r7, #7]
 8017d42:	4916      	ldr	r1, [pc, #88]	; (8017d9c <adcSetInputChannel+0x6c>)
 8017d44:	79ba      	ldrb	r2, [r7, #6]
 8017d46:	54ca      	strb	r2, [r1, r3]
	samplingDisable();
 8017d48:	f7ff ffec 	bl	8017d24 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017d4c:	4814      	ldr	r0, [pc, #80]	; (8017da0 <adcSetInputChannel+0x70>)
 8017d4e:	f7f0 f993 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017d52:	4814      	ldr	r0, [pc, #80]	; (8017da4 <adcSetInputChannel+0x74>)
 8017d54:	f7f0 f990 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017d58:	4813      	ldr	r0, [pc, #76]	; (8017da8 <adcSetInputChannel+0x78>)
 8017d5a:	f7f0 f98d 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017d5e:	4813      	ldr	r0, [pc, #76]	; (8017dac <adcSetInputChannel+0x7c>)
 8017d60:	f7f0 f98a 	bl	8008078 <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 8017d64:	480e      	ldr	r0, [pc, #56]	; (8017da0 <adcSetInputChannel+0x70>)
 8017d66:	f7ef fded 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017d6a:	480e      	ldr	r0, [pc, #56]	; (8017da4 <adcSetInputChannel+0x74>)
 8017d6c:	f7ef fdea 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017d70:	480d      	ldr	r0, [pc, #52]	; (8017da8 <adcSetInputChannel+0x78>)
 8017d72:	f7ef fde7 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017d76:	480d      	ldr	r0, [pc, #52]	; (8017dac <adcSetInputChannel+0x7c>)
 8017d78:	f7ef fde4 	bl	8007944 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017d7c:	480c      	ldr	r0, [pc, #48]	; (8017db0 <adcSetInputChannel+0x80>)
 8017d7e:	f7f3 f969 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017d82:	480c      	ldr	r0, [pc, #48]	; (8017db4 <adcSetInputChannel+0x84>)
 8017d84:	f7f3 f966 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017d88:	480b      	ldr	r0, [pc, #44]	; (8017db8 <adcSetInputChannel+0x88>)
 8017d8a:	f7f3 f963 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017d8e:	480b      	ldr	r0, [pc, #44]	; (8017dbc <adcSetInputChannel+0x8c>)
 8017d90:	f7f3 f960 	bl	800b054 <HAL_DMA_DeInit>
}
 8017d94:	bf00      	nop
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}
 8017d9c:	20004550 	.word	0x20004550
 8017da0:	20015e18 	.word	0x20015e18
 8017da4:	20015d4c 	.word	0x20015d4c
 8017da8:	20015e84 	.word	0x20015e84
 8017dac:	20015f50 	.word	0x20015f50
 8017db0:	20015ef0 	.word	0x20015ef0
 8017db4:	20015fbc 	.word	0x20015fbc
 8017db8:	20015db8 	.word	0x20015db8
 8017dbc:	20015cec 	.word	0x20015cec

08017dc0 <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	71fb      	strb	r3, [r7, #7]
 8017dca:	e008      	b.n	8017dde <adcSetDefaultInputs+0x1e>
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 8017dcc:	79fa      	ldrb	r2, [r7, #7]
 8017dce:	79fb      	ldrb	r3, [r7, #7]
 8017dd0:	4907      	ldr	r1, [pc, #28]	; (8017df0 <adcSetDefaultInputs+0x30>)
 8017dd2:	5c89      	ldrb	r1, [r1, r2]
 8017dd4:	4a07      	ldr	r2, [pc, #28]	; (8017df4 <adcSetDefaultInputs+0x34>)
 8017dd6:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017dd8:	79fb      	ldrb	r3, [r7, #7]
 8017dda:	3301      	adds	r3, #1
 8017ddc:	71fb      	strb	r3, [r7, #7]
 8017dde:	79fb      	ldrb	r3, [r7, #7]
 8017de0:	2b03      	cmp	r3, #3
 8017de2:	d9f3      	bls.n	8017dcc <adcSetDefaultInputs+0xc>
	}
}
 8017de4:	bf00      	nop
 8017de6:	370c      	adds	r7, #12
 8017de8:	46bd      	mov	sp, r7
 8017dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dee:	4770      	bx	lr
 8017df0:	0801dfc0 	.word	0x0801dfc0
 8017df4:	20004550 	.word	0x20004550

08017df8 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b082      	sub	sp, #8
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	4603      	mov	r3, r0
 8017e00:	71fb      	strb	r3, [r7, #7]
	samplingDisable();
 8017e02:	f7ff ff8f 	bl	8017d24 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017e06:	4827      	ldr	r0, [pc, #156]	; (8017ea4 <adcSetResolution+0xac>)
 8017e08:	f7f0 f936 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017e0c:	4826      	ldr	r0, [pc, #152]	; (8017ea8 <adcSetResolution+0xb0>)
 8017e0e:	f7f0 f933 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017e12:	4826      	ldr	r0, [pc, #152]	; (8017eac <adcSetResolution+0xb4>)
 8017e14:	f7f0 f930 	bl	8008078 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017e18:	4825      	ldr	r0, [pc, #148]	; (8017eb0 <adcSetResolution+0xb8>)
 8017e1a:	f7f0 f92d 	bl	8008078 <HAL_ADC_Stop_DMA>

	switch(res){
 8017e1e:	79fb      	ldrb	r3, [r7, #7]
 8017e20:	3b06      	subs	r3, #6
 8017e22:	2b06      	cmp	r3, #6
 8017e24:	d839      	bhi.n	8017e9a <adcSetResolution+0xa2>
 8017e26:	a201      	add	r2, pc, #4	; (adr r2, 8017e2c <adcSetResolution+0x34>)
 8017e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e2c:	08017e49 	.word	0x08017e49
 8017e30:	08017e9b 	.word	0x08017e9b
 8017e34:	08017e51 	.word	0x08017e51
 8017e38:	08017e9b 	.word	0x08017e9b
 8017e3c:	08017e59 	.word	0x08017e59
 8017e40:	08017e9b 	.word	0x08017e9b
 8017e44:	08017e61 	.word	0x08017e61
	case 6:
		ADCResolution = ADC_RESOLUTION_6B;
 8017e48:	4b1a      	ldr	r3, [pc, #104]	; (8017eb4 <adcSetResolution+0xbc>)
 8017e4a:	2218      	movs	r2, #24
 8017e4c:	601a      	str	r2, [r3, #0]
		break;
 8017e4e:	e00b      	b.n	8017e68 <adcSetResolution+0x70>
	case 8:
		ADCResolution = ADC_RESOLUTION_8B;
 8017e50:	4b18      	ldr	r3, [pc, #96]	; (8017eb4 <adcSetResolution+0xbc>)
 8017e52:	2210      	movs	r2, #16
 8017e54:	601a      	str	r2, [r3, #0]
		break;
 8017e56:	e007      	b.n	8017e68 <adcSetResolution+0x70>
	case 10:
		ADCResolution = ADC_RESOLUTION_10B;
 8017e58:	4b16      	ldr	r3, [pc, #88]	; (8017eb4 <adcSetResolution+0xbc>)
 8017e5a:	2208      	movs	r2, #8
 8017e5c:	601a      	str	r2, [r3, #0]
		break;
 8017e5e:	e003      	b.n	8017e68 <adcSetResolution+0x70>
	case 12:
		ADCResolution = ADC_RESOLUTION_12B;
 8017e60:	4b14      	ldr	r3, [pc, #80]	; (8017eb4 <adcSetResolution+0xbc>)
 8017e62:	2200      	movs	r2, #0
 8017e64:	601a      	str	r2, [r3, #0]
		break;
 8017e66:	bf00      	nop
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 8017e68:	480e      	ldr	r0, [pc, #56]	; (8017ea4 <adcSetResolution+0xac>)
 8017e6a:	f7ef fd6b 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017e6e:	480e      	ldr	r0, [pc, #56]	; (8017ea8 <adcSetResolution+0xb0>)
 8017e70:	f7ef fd68 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017e74:	480d      	ldr	r0, [pc, #52]	; (8017eac <adcSetResolution+0xb4>)
 8017e76:	f7ef fd65 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017e7a:	480d      	ldr	r0, [pc, #52]	; (8017eb0 <adcSetResolution+0xb8>)
 8017e7c:	f7ef fd62 	bl	8007944 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017e80:	480d      	ldr	r0, [pc, #52]	; (8017eb8 <adcSetResolution+0xc0>)
 8017e82:	f7f3 f8e7 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017e86:	480d      	ldr	r0, [pc, #52]	; (8017ebc <adcSetResolution+0xc4>)
 8017e88:	f7f3 f8e4 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017e8c:	480c      	ldr	r0, [pc, #48]	; (8017ec0 <adcSetResolution+0xc8>)
 8017e8e:	f7f3 f8e1 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017e92:	480c      	ldr	r0, [pc, #48]	; (8017ec4 <adcSetResolution+0xcc>)
 8017e94:	f7f3 f8de 	bl	800b054 <HAL_DMA_DeInit>
 8017e98:	e000      	b.n	8017e9c <adcSetResolution+0xa4>
		return;
 8017e9a:	bf00      	nop
	

}
 8017e9c:	3708      	adds	r7, #8
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	20015e18 	.word	0x20015e18
 8017ea8:	20015d4c 	.word	0x20015d4c
 8017eac:	20015e84 	.word	0x20015e84
 8017eb0:	20015f50 	.word	0x20015f50
 8017eb4:	20004544 	.word	0x20004544
 8017eb8:	20015ef0 	.word	0x20015ef0
 8017ebc:	20015fbc 	.word	0x20015fbc
 8017ec0:	20015db8 	.word	0x20015db8
 8017ec4:	20015cec 	.word	0x20015cec

08017ec8 <CalibrateADC>:


void CalibrateADC (void){
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8017ecc:	217f      	movs	r1, #127	; 0x7f
 8017ece:	4808      	ldr	r0, [pc, #32]	; (8017ef0 <CalibrateADC+0x28>)
 8017ed0:	f7f1 fb4a 	bl	8009568 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8017ed4:	217f      	movs	r1, #127	; 0x7f
 8017ed6:	4807      	ldr	r0, [pc, #28]	; (8017ef4 <CalibrateADC+0x2c>)
 8017ed8:	f7f1 fb46 	bl	8009568 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8017edc:	217f      	movs	r1, #127	; 0x7f
 8017ede:	4806      	ldr	r0, [pc, #24]	; (8017ef8 <CalibrateADC+0x30>)
 8017ee0:	f7f1 fb42 	bl	8009568 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017ee4:	217f      	movs	r1, #127	; 0x7f
 8017ee6:	4805      	ldr	r0, [pc, #20]	; (8017efc <CalibrateADC+0x34>)
 8017ee8:	f7f1 fb3e 	bl	8009568 <HAL_ADCEx_Calibration_Start>
}
 8017eec:	bf00      	nop
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	20015e18 	.word	0x20015e18
 8017ef4:	20015d4c 	.word	0x20015d4c
 8017ef8:	20015e84 	.word	0x20015e84
 8017efc:	20015f50 	.word	0x20015f50

08017f00 <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 8017f00:	b580      	push	{r7, lr}
 8017f02:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017f04:	480c      	ldr	r0, [pc, #48]	; (8017f38 <ADCInitNormalMode+0x38>)
 8017f06:	f7ef fd1d 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017f0a:	480c      	ldr	r0, [pc, #48]	; (8017f3c <ADCInitNormalMode+0x3c>)
 8017f0c:	f7ef fd1a 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017f10:	480b      	ldr	r0, [pc, #44]	; (8017f40 <ADCInitNormalMode+0x40>)
 8017f12:	f7ef fd17 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017f16:	480b      	ldr	r0, [pc, #44]	; (8017f44 <ADCInitNormalMode+0x44>)
 8017f18:	f7ef fd14 	bl	8007944 <HAL_ADC_DeInit>

	ADCInterleaved=0;
 8017f1c:	4b0a      	ldr	r3, [pc, #40]	; (8017f48 <ADCInitNormalMode+0x48>)
 8017f1e:	2200      	movs	r2, #0
 8017f20:	701a      	strb	r2, [r3, #0]
	MX_ADC1_Init();
 8017f22:	f7fe ffab 	bl	8016e7c <MX_ADC1_Init>
	MX_ADC2_Init();
 8017f26:	f7ff f81f 	bl	8016f68 <MX_ADC2_Init>
	MX_ADC3_Init();
 8017f2a:	f7ff f88d 	bl	8017048 <MX_ADC3_Init>
	MX_ADC4_Init();
 8017f2e:	f7ff f903 	bl	8017138 <MX_ADC4_Init>
}
 8017f32:	bf00      	nop
 8017f34:	bd80      	pop	{r7, pc}
 8017f36:	bf00      	nop
 8017f38:	20015e18 	.word	0x20015e18
 8017f3c:	20015d4c 	.word	0x20015d4c
 8017f40:	20015e84 	.word	0x20015e84
 8017f44:	20015f50 	.word	0x20015f50
 8017f48:	2000454c 	.word	0x2000454c

08017f4c <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017f50:	480a      	ldr	r0, [pc, #40]	; (8017f7c <ADCInitInterleavedMode+0x30>)
 8017f52:	f7ef fcf7 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017f56:	480a      	ldr	r0, [pc, #40]	; (8017f80 <ADCInitInterleavedMode+0x34>)
 8017f58:	f7ef fcf4 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017f5c:	4809      	ldr	r0, [pc, #36]	; (8017f84 <ADCInitInterleavedMode+0x38>)
 8017f5e:	f7ef fcf1 	bl	8007944 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017f62:	4809      	ldr	r0, [pc, #36]	; (8017f88 <ADCInitInterleavedMode+0x3c>)
 8017f64:	f7ef fcee 	bl	8007944 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 8017f68:	4b08      	ldr	r3, [pc, #32]	; (8017f8c <ADCInitInterleavedMode+0x40>)
 8017f6a:	2201      	movs	r2, #1
 8017f6c:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 8017f6e:	f7ff f953 	bl	8017218 <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();
 8017f72:	f7ff fa1b 	bl	80173ac <MX_ADC34_Interleaved_Init>

}
 8017f76:	bf00      	nop
 8017f78:	bd80      	pop	{r7, pc}
 8017f7a:	bf00      	nop
 8017f7c:	20015e18 	.word	0x20015e18
 8017f80:	20015d4c 	.word	0x20015d4c
 8017f84:	20015e84 	.word	0x20015e84
 8017f88:	20015f50 	.word	0x20015f50
 8017f8c:	2000454c 	.word	0x2000454c

08017f90 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
 8017f90:	b480      	push	{r7}
 8017f92:	af00      	add	r7, sp, #0
//todo
}
 8017f94:	bf00      	nop
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr
	...

08017fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b0a8      	sub	sp, #160	; 0xa0
 8017fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017faa:	2238      	movs	r2, #56	; 0x38
 8017fac:	2100      	movs	r1, #0
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f004 fb07 	bl	801c5c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017fb8:	2200      	movs	r2, #0
 8017fba:	601a      	str	r2, [r3, #0]
 8017fbc:	605a      	str	r2, [r3, #4]
 8017fbe:	609a      	str	r2, [r3, #8]
 8017fc0:	60da      	str	r2, [r3, #12]
 8017fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017fc4:	463b      	mov	r3, r7
 8017fc6:	2254      	movs	r2, #84	; 0x54
 8017fc8:	2100      	movs	r1, #0
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f004 faf9 	bl	801c5c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8017fd0:	2000      	movs	r0, #0
 8017fd2:	f7f4 f875 	bl	800c0c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017fde:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017fe0:	2302      	movs	r3, #2
 8017fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017fe6:	2303      	movs	r3, #3
 8017fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8017fec:	2304      	movs	r3, #4
 8017fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 56;
 8017ff2:	2338      	movs	r3, #56	; 0x38
 8017ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017ff8:	2302      	movs	r3, #2
 8017ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8017ffe:	2302      	movs	r3, #2
 8018000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8018004:	2302      	movs	r3, #2
 8018006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801800a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801800e:	4618      	mov	r0, r3
 8018010:	f7f4 f90a 	bl	800c228 <HAL_RCC_OscConfig>
 8018014:	4603      	mov	r3, r0
 8018016:	2b00      	cmp	r3, #0
 8018018:	d001      	beq.n	801801e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 801801a:	f000 fbc5 	bl	80187a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801801e:	230f      	movs	r3, #15
 8018020:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018022:	2303      	movs	r3, #3
 8018024:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8018026:	2300      	movs	r3, #0
 8018028:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801802a:	2300      	movs	r3, #0
 801802c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801802e:	2300      	movs	r3, #0
 8018030:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8018032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018036:	2108      	movs	r1, #8
 8018038:	4618      	mov	r0, r3
 801803a:	f7f4 fd03 	bl	800ca44 <HAL_RCC_ClockConfig>
 801803e:	4603      	mov	r3, r0
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8018044:	f000 fbb0 	bl	80187a8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8018048:	4b0d      	ldr	r3, [pc, #52]	; (8018080 <SystemClock_Config+0xe0>)
 801804a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801804c:	2300      	movs	r3, #0
 801804e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8018050:	2300      	movs	r3, #0
 8018052:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018054:	2300      	movs	r3, #0
 8018056:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8018058:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801805c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 801805e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018064:	463b      	mov	r3, r7
 8018066:	4618      	mov	r0, r3
 8018068:	f7f5 f80a 	bl	800d080 <HAL_RCCEx_PeriphCLKConfig>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d001      	beq.n	8018076 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8018072:	f000 fb99 	bl	80187a8 <Error_Handler>
  }
}
 8018076:	bf00      	nop
 8018078:	37a0      	adds	r7, #160	; 0xa0
 801807a:	46bd      	mov	sp, r7
 801807c:	bd80      	pop	{r7, pc}
 801807e:	bf00      	nop
 8018080:	0001a042 	.word	0x0001a042

08018084 <resetDevice>:
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
//}

void resetDevice(void){
 8018084:	b480      	push	{r7}
 8018086:	af00      	add	r7, sp, #0
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 8018088:	4b01      	ldr	r3, [pc, #4]	; (8018090 <resetDevice+0xc>)
 801808a:	4a02      	ldr	r2, [pc, #8]	; (8018094 <resetDevice+0x10>)
 801808c:	60da      	str	r2, [r3, #12]
  for(;;) {
 801808e:	e7fe      	b.n	801808e <resetDevice+0xa>
 8018090:	e000ed00 	.word	0xe000ed00
 8018094:	05fa0004 	.word	0x05fa0004

08018098 <commsSend>:
uint8_t insertCharToBuff(commBuffer *buff, uint8_t chr);
extern unsigned int intAlias[sizeof(double)/sizeof(unsigned int)];

// Function prototypes ========================================================

void commsSend(uint8_t chr){
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	4603      	mov	r3, r0
 80180a0:	71fb      	strb	r3, [r7, #7]
	}else{
		UARTsendChar(chr);
	}
	#else
	//UARTsendChar(chr);
	HAL_UART_Transmit(&huart2, &chr, 1, 5000);
 80180a2:	1df9      	adds	r1, r7, #7
 80180a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80180a8:	2201      	movs	r2, #1
 80180aa:	4803      	ldr	r0, [pc, #12]	; (80180b8 <commsSend+0x20>)
 80180ac:	f7fa fecc 	bl	8012e48 <HAL_UART_Transmit>
	#endif
	
	
}
 80180b0:	bf00      	nop
 80180b2:	3708      	adds	r7, #8
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	20016da0 	.word	0x20016da0

080180bc <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
	uint8_t buff[4];
	buff[3]=(uint8_t)(num);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	73fb      	strb	r3, [r7, #15]
	buff[2]=(uint8_t)(num>>8);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	0a1b      	lsrs	r3, r3, #8
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	73bb      	strb	r3, [r7, #14]
	buff[1]=(uint8_t)(num>>16);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	0c1b      	lsrs	r3, r3, #16
 80180d6:	b2db      	uxtb	r3, r3
 80180d8:	737b      	strb	r3, [r7, #13]
	buff[0]=(uint8_t)(num>>24);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	0e1b      	lsrs	r3, r3, #24
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	733b      	strb	r3, [r7, #12]
  commsSendBuff(buff, 4);
 80180e2:	f107 030c 	add.w	r3, r7, #12
 80180e6:	2104      	movs	r1, #4
 80180e8:	4618      	mov	r0, r3
 80180ea:	f000 f805 	bl	80180f8 <commsSendBuff>
}
 80180ee:	bf00      	nop
 80180f0:	3710      	adds	r7, #16
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
	...

080180f8 <commsSendBuff>:

void commsSendBuff(uint8_t *buff, uint16_t len){
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
 8018100:	460b      	mov	r3, r1
 8018102:	807b      	strh	r3, [r7, #2]
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 8018104:	887a      	ldrh	r2, [r7, #2]
 8018106:	f241 3388 	movw	r3, #5000	; 0x1388
 801810a:	6879      	ldr	r1, [r7, #4]
 801810c:	4803      	ldr	r0, [pc, #12]	; (801811c <commsSendBuff+0x24>)
 801810e:	f7fa fe9b 	bl	8012e48 <HAL_UART_Transmit>
	#endif
}
 8018112:	bf00      	nop
 8018114:	3708      	adds	r7, #8
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}
 801811a:	bf00      	nop
 801811c:	20016da0 	.word	0x20016da0

08018120 <commsSendString>:
void commsSendString(char *chr){
 8018120:	b580      	push	{r7, lr}
 8018122:	b084      	sub	sp, #16
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8018128:	2300      	movs	r3, #0
 801812a:	60fb      	str	r3, [r7, #12]
	char * tmp=chr;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	60bb      	str	r3, [r7, #8]
	while(*(tmp++)){i++;}
 8018130:	e002      	b.n	8018138 <commsSendString+0x18>
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	3301      	adds	r3, #1
 8018136:	60fb      	str	r3, [r7, #12]
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	60ba      	str	r2, [r7, #8]
 801813e:	781b      	ldrb	r3, [r3, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d1f6      	bne.n	8018132 <commsSendString+0x12>
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	b29a      	uxth	r2, r3
 8018148:	f241 3388 	movw	r3, #5000	; 0x1388
 801814c:	6879      	ldr	r1, [r7, #4]
 801814e:	4803      	ldr	r0, [pc, #12]	; (801815c <commsSendString+0x3c>)
 8018150:	f7fa fe7a 	bl	8012e48 <HAL_UART_Transmit>
	#endif

}
 8018154:	bf00      	nop
 8018156:	3710      	adds	r7, #16
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}
 801815c:	20016da0 	.word	0x20016da0

08018160 <commsSendDouble>:

void commsSendDouble(double value){
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	ed87 0b00 	vstr	d0, [r7]
	memcpy(intAlias, &value, sizeof(value));
 801816a:	4b0a      	ldr	r3, [pc, #40]	; (8018194 <commsSendDouble+0x34>)
 801816c:	461a      	mov	r2, r3
 801816e:	463b      	mov	r3, r7
 8018170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018174:	e882 0003 	stmia.w	r2, {r0, r1}
	commsSendUint32(intAlias[0]);
 8018178:	4b06      	ldr	r3, [pc, #24]	; (8018194 <commsSendDouble+0x34>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	4618      	mov	r0, r3
 801817e:	f7ff ff9d 	bl	80180bc <commsSendUint32>
	commsSendUint32(intAlias[1]);
 8018182:	4b04      	ldr	r3, [pc, #16]	; (8018194 <commsSendDouble+0x34>)
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	4618      	mov	r0, r3
 8018188:	f7ff ff98 	bl	80180bc <commsSendUint32>
}
 801818c:	bf00      	nop
 801818e:	3708      	adds	r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}
 8018194:	20004560 	.word	0x20004560

08018198 <commsRecieveUART>:
		commInputByte(chr);
	}
}
#endif //USE_USB

void commsRecieveUART(uint8_t chr){
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	4603      	mov	r3, r0
 80181a0:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 80181a2:	79fb      	ldrb	r3, [r7, #7]
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7eb f94b 	bl	8003440 <commInputByte>
	#endif //USE_USB
	
}
 80181aa:	bf00      	nop
 80181ac:	3708      	adds	r7, #8
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
	...

080181b4 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b08e      	sub	sp, #56	; 0x38
 80181b8:	af00      	add	r7, sp, #0

	  DAC_ChannelConfTypeDef sConfig = {0};
 80181ba:	1d3b      	adds	r3, r7, #4
 80181bc:	2230      	movs	r2, #48	; 0x30
 80181be:	2100      	movs	r1, #0
 80181c0:	4618      	mov	r0, r3
 80181c2:	f004 f9fe 	bl	801c5c2 <memset>

	  /* USER CODE END DAC1_Init 1 */
	  /** DAC Initialization
	  */
	  HAL_StatusTypeDef status;
	  hdac1.Instance = DAC1;
 80181c6:	4b2b      	ldr	r3, [pc, #172]	; (8018274 <MX_DAC_Init+0xc0>)
 80181c8:	4a2b      	ldr	r2, [pc, #172]	; (8018278 <MX_DAC_Init+0xc4>)
 80181ca:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80181cc:	4829      	ldr	r0, [pc, #164]	; (8018274 <MX_DAC_Init+0xc0>)
 80181ce:	f7f1 fe77 	bl	8009ec0 <HAL_DAC_Init>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d001      	beq.n	80181dc <MX_DAC_Init+0x28>
	  {
	    Error_Handler();
 80181d8:	f000 fae6 	bl	80187a8 <Error_Handler>
	  }
	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80181dc:	2302      	movs	r3, #2
 80181de:	607b      	str	r3, [r7, #4]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80181e0:	2300      	movs	r3, #0
 80181e2:	723b      	strb	r3, [r7, #8]
	  sConfig.DAC_SignedFormat = DISABLE;
 80181e4:	2300      	movs	r3, #0
 80181e6:	727b      	strb	r3, [r7, #9]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;
 80181e8:	2304      	movs	r3, #4
 80181ea:	60fb      	str	r3, [r7, #12]
	  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80181ec:	231e      	movs	r3, #30
 80181ee:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80181f0:	2300      	movs	r3, #0
 80181f2:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80181f4:	2300      	movs	r3, #0
 80181f6:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80181f8:	2301      	movs	r3, #1
 80181fa:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80181fc:	2300      	movs	r3, #0
 80181fe:	623b      	str	r3, [r7, #32]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) ;
 8018200:	1d3b      	adds	r3, r7, #4
 8018202:	2200      	movs	r2, #0
 8018204:	4619      	mov	r1, r3
 8018206:	481b      	ldr	r0, [pc, #108]	; (8018274 <MX_DAC_Init+0xc0>)
 8018208:	f7f2 f86c 	bl	800a2e4 <HAL_DAC_ConfigChannel>
 801820c:	4603      	mov	r3, r0
 801820e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018216:	2b00      	cmp	r3, #0
 8018218:	d001      	beq.n	801821e <MX_DAC_Init+0x6a>
	  {
	    Error_Handler();
 801821a:	f000 fac5 	bl	80187a8 <Error_Handler>
	  }
	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 801821e:	230a      	movs	r3, #10
 8018220:	613b      	str	r3, [r7, #16]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) ;
 8018222:	1d3b      	adds	r3, r7, #4
 8018224:	2210      	movs	r2, #16
 8018226:	4619      	mov	r1, r3
 8018228:	4812      	ldr	r0, [pc, #72]	; (8018274 <MX_DAC_Init+0xc0>)
 801822a:	f7f2 f85b 	bl	800a2e4 <HAL_DAC_ConfigChannel>
 801822e:	4603      	mov	r3, r0
 8018230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <MX_DAC_Init+0x8c>
	  {
	    Error_Handler();
 801823c:	f000 fab4 	bl	80187a8 <Error_Handler>
	  }


	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8018240:	1d3b      	adds	r3, r7, #4
 8018242:	2200      	movs	r2, #0
 8018244:	4619      	mov	r1, r3
 8018246:	480b      	ldr	r0, [pc, #44]	; (8018274 <MX_DAC_Init+0xc0>)
 8018248:	f7f2 fbfc 	bl	800aa44 <HAL_DACEx_SelfCalibrate>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	d001      	beq.n	8018256 <MX_DAC_Init+0xa2>
	  {
	    Error_Handler();
 8018252:	f000 faa9 	bl	80187a8 <Error_Handler>
	  }
	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8018256:	1d3b      	adds	r3, r7, #4
 8018258:	2210      	movs	r2, #16
 801825a:	4619      	mov	r1, r3
 801825c:	4805      	ldr	r0, [pc, #20]	; (8018274 <MX_DAC_Init+0xc0>)
 801825e:	f7f2 fbf1 	bl	800aa44 <HAL_DACEx_SelfCalibrate>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	d001      	beq.n	801826c <MX_DAC_Init+0xb8>
	  {
	    Error_Handler();
 8018268:	f000 fa9e 	bl	80187a8 <Error_Handler>
	  }

}
 801826c:	bf00      	nop
 801826e:	3738      	adds	r7, #56	; 0x38
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	2001607c 	.word	0x2001607c
 8018278:	50000800 	.word	0x50000800

0801827c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b08a      	sub	sp, #40	; 0x28
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a41      	ldr	r2, [pc, #260]	; (8018390 <HAL_DAC_MspInit+0x114>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d17c      	bne.n	8018388 <HAL_DAC_MspInit+0x10c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 801828e:	4b41      	ldr	r3, [pc, #260]	; (8018394 <HAL_DAC_MspInit+0x118>)
 8018290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018292:	4a40      	ldr	r2, [pc, #256]	; (8018394 <HAL_DAC_MspInit+0x118>)
 8018294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018298:	64d3      	str	r3, [r2, #76]	; 0x4c
 801829a:	4b3e      	ldr	r3, [pc, #248]	; (8018394 <HAL_DAC_MspInit+0x118>)
 801829c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801829e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80182a2:	613b      	str	r3, [r7, #16]
 80182a4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80182a6:	4b3b      	ldr	r3, [pc, #236]	; (8018394 <HAL_DAC_MspInit+0x118>)
 80182a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182aa:	4a3a      	ldr	r2, [pc, #232]	; (8018394 <HAL_DAC_MspInit+0x118>)
 80182ac:	f043 0301 	orr.w	r3, r3, #1
 80182b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80182b2:	4b38      	ldr	r3, [pc, #224]	; (8018394 <HAL_DAC_MspInit+0x118>)
 80182b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182b6:	f003 0301 	and.w	r3, r3, #1
 80182ba:	60fb      	str	r3, [r7, #12]
 80182bc:	68fb      	ldr	r3, [r7, #12]

    /**DAC1 GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80182be:	2330      	movs	r3, #48	; 0x30
 80182c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80182c2:	2303      	movs	r3, #3
 80182c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182c6:	2300      	movs	r3, #0
 80182c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182ca:	f107 0314 	add.w	r3, r7, #20
 80182ce:	4619      	mov	r1, r3
 80182d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80182d4:	f7f3 fb58 	bl	800b988 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA2_Channel1;
 80182d8:	4b2f      	ldr	r3, [pc, #188]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182da:	4a30      	ldr	r2, [pc, #192]	; (801839c <HAL_DAC_MspInit+0x120>)
 80182dc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80182de:	4b2e      	ldr	r3, [pc, #184]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182e0:	2206      	movs	r2, #6
 80182e2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80182e4:	4b2c      	ldr	r3, [pc, #176]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182e6:	2210      	movs	r2, #16
 80182e8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80182ea:	4b2b      	ldr	r3, [pc, #172]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182ec:	2200      	movs	r2, #0
 80182ee:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80182f0:	4b29      	ldr	r3, [pc, #164]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182f2:	2280      	movs	r2, #128	; 0x80
 80182f4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80182f6:	4b28      	ldr	r3, [pc, #160]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 80182f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80182fc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80182fe:	4b26      	ldr	r3, [pc, #152]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 8018300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018304:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8018306:	4b24      	ldr	r3, [pc, #144]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 8018308:	2220      	movs	r2, #32
 801830a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801830c:	4b22      	ldr	r3, [pc, #136]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 801830e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8018314:	4820      	ldr	r0, [pc, #128]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 8018316:	f7f2 fd05 	bl	800ad24 <HAL_DMA_Init>
 801831a:	4603      	mov	r3, r0
 801831c:	2b00      	cmp	r3, #0
 801831e:	d001      	beq.n	8018324 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 8018320:	f000 fa42 	bl	80187a8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	4a1c      	ldr	r2, [pc, #112]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 8018328:	609a      	str	r2, [r3, #8]
 801832a:	4a1b      	ldr	r2, [pc, #108]	; (8018398 <HAL_DAC_MspInit+0x11c>)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);


	hdma_dac1_ch2.Instance = DMA2_Channel2;
 8018330:	4b1b      	ldr	r3, [pc, #108]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018332:	4a1c      	ldr	r2, [pc, #112]	; (80183a4 <HAL_DAC_MspInit+0x128>)
 8018334:	601a      	str	r2, [r3, #0]
	hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8018336:	4b1a      	ldr	r3, [pc, #104]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018338:	2207      	movs	r2, #7
 801833a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801833c:	4b18      	ldr	r3, [pc, #96]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 801833e:	2210      	movs	r2, #16
 8018340:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8018342:	4b17      	ldr	r3, [pc, #92]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018344:	2200      	movs	r2, #0
 8018346:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8018348:	4b15      	ldr	r3, [pc, #84]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 801834a:	2280      	movs	r2, #128	; 0x80
 801834c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801834e:	4b14      	ldr	r3, [pc, #80]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018354:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018356:	4b12      	ldr	r3, [pc, #72]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801835c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 801835e:	4b10      	ldr	r3, [pc, #64]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018360:	2220      	movs	r2, #32
 8018362:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8018364:	4b0e      	ldr	r3, [pc, #56]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801836a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 801836c:	480c      	ldr	r0, [pc, #48]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 801836e:	f7f2 fcd9 	bl	800ad24 <HAL_DMA_Init>
 8018372:	4603      	mov	r3, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	d001      	beq.n	801837c <HAL_DAC_MspInit+0x100>
    {
      Error_Handler();
 8018378:	f000 fa16 	bl	80187a8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	4a08      	ldr	r2, [pc, #32]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018380:	60da      	str	r2, [r3, #12]
 8018382:	4a07      	ldr	r2, [pc, #28]	; (80183a0 <HAL_DAC_MspInit+0x124>)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 8018388:	bf00      	nop
 801838a:	3728      	adds	r7, #40	; 0x28
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	50000800 	.word	0x50000800
 8018394:	40021000 	.word	0x40021000
 8018398:	20016090 	.word	0x20016090
 801839c:	40020408 	.word	0x40020408
 80183a0:	2001601c 	.word	0x2001601c
 80183a4:	4002041c 	.word	0x4002041c

080183a8 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b088      	sub	sp, #32
 80183ac:	af02      	add	r7, sp, #8
 80183ae:	4603      	mov	r3, r0
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	607a      	str	r2, [r7, #4]
 80183b4:	73fb      	strb	r3, [r7, #15]
	uint32_t dacChannel=0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	617b      	str	r3, [r7, #20]
	switch(chan){
 80183ba:	7bfb      	ldrb	r3, [r7, #15]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d002      	beq.n	80183c6 <DAC_DMA_Reconfig+0x1e>
 80183c0:	2b01      	cmp	r3, #1
 80183c2:	d003      	beq.n	80183cc <DAC_DMA_Reconfig+0x24>
 80183c4:	e005      	b.n	80183d2 <DAC_DMA_Reconfig+0x2a>
		case 0:
			dacChannel=DAC_CHANNEL_1;
 80183c6:	2300      	movs	r3, #0
 80183c8:	617b      	str	r3, [r7, #20]
		break;
 80183ca:	e002      	b.n	80183d2 <DAC_DMA_Reconfig+0x2a>
		case 1:
			dacChannel=DAC_CHANNEL_2;
 80183cc:	2310      	movs	r3, #16
 80183ce:	617b      	str	r3, [r7, #20]
		break;
 80183d0:	bf00      	nop
	}
	HAL_DAC_Stop_DMA(&hdac1,dacChannel);
 80183d2:	6979      	ldr	r1, [r7, #20]
 80183d4:	480b      	ldr	r0, [pc, #44]	; (8018404 <DAC_DMA_Reconfig+0x5c>)
 80183d6:	f7f1 feed 	bl	800a1b4 <HAL_DAC_Stop_DMA>
	if(len>0){
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d00d      	beq.n	80183fc <DAC_DMA_Reconfig+0x54>
		HAL_StatusTypeDef status;
		status = HAL_DAC_Start_DMA(&hdac1, dacChannel, buff, len, DAC_ALIGN_12B_R);
 80183e0:	2300      	movs	r3, #0
 80183e2:	9300      	str	r3, [sp, #0]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	68ba      	ldr	r2, [r7, #8]
 80183e8:	6979      	ldr	r1, [r7, #20]
 80183ea:	4806      	ldr	r0, [pc, #24]	; (8018404 <DAC_DMA_Reconfig+0x5c>)
 80183ec:	f7f1 fdf0 	bl	8009fd0 <HAL_DAC_Start_DMA>
 80183f0:	4603      	mov	r3, r0
 80183f2:	74fb      	strb	r3, [r7, #19]
		if(status!=HAL_OK){
 80183f4:	7cfb      	ldrb	r3, [r7, #19]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d000      	beq.n	80183fc <DAC_DMA_Reconfig+0x54>
			while(1){
 80183fa:	e7fe      	b.n	80183fa <DAC_DMA_Reconfig+0x52>

			}
		}

	}
}
 80183fc:	bf00      	nop
 80183fe:	3718      	adds	r7, #24
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}
 8018404:	2001607c 	.word	0x2001607c

08018408 <DACDisableOutput>:

void DACDisableOutput(void){
 8018408:	b580      	push	{r7, lr}
 801840a:	b086      	sub	sp, #24
 801840c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801840e:	2330      	movs	r3, #48	; 0x30
 8018410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018412:	2300      	movs	r3, #0
 8018414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018416:	2300      	movs	r3, #0
 8018418:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801841a:	1d3b      	adds	r3, r7, #4
 801841c:	4619      	mov	r1, r3
 801841e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018422:	f7f3 fab1 	bl	800b988 <HAL_GPIO_Init>
}
 8018426:	bf00      	nop
 8018428:	3718      	adds	r7, #24
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}

0801842e <DACEnableOutput>:

void DACEnableOutput(void){
 801842e:	b580      	push	{r7, lr}
 8018430:	b086      	sub	sp, #24
 8018432:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8018434:	2330      	movs	r3, #48	; 0x30
 8018436:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018438:	2303      	movs	r3, #3
 801843a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801843c:	2300      	movs	r3, #0
 801843e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018440:	1d3b      	adds	r3, r7, #4
 8018442:	4619      	mov	r1, r3
 8018444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018448:	f7f3 fa9e 	bl	800b988 <HAL_GPIO_Init>
}
 801844c:	bf00      	nop
 801844e:	3718      	adds	r7, #24
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <DACSetOutputBuffer>:

void DACSetOutputBuffer(void){
 8018454:	b480      	push	{r7}
 8018456:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 8018458:	4b03      	ldr	r3, [pc, #12]	; (8018468 <DACSetOutputBuffer+0x14>)
 801845a:	2200      	movs	r2, #0
 801845c:	601a      	str	r2, [r3, #0]
}
 801845e:	bf00      	nop
 8018460:	46bd      	mov	sp, r7
 8018462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018466:	4770      	bx	lr
 8018468:	20004554 	.word	0x20004554

0801846c <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
 801846c:	b480      	push	{r7}
 801846e:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 8018470:	4b03      	ldr	r3, [pc, #12]	; (8018480 <DACUnsetOutputBuffer+0x14>)
 8018472:	2202      	movs	r2, #2
 8018474:	601a      	str	r2, [r3, #0]
}
 8018476:	bf00      	nop
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr
 8018480:	20004554 	.word	0x20004554

08018484 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 8018484:	b580      	push	{r7, lr}
 8018486:	af00      	add	r7, sp, #0
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
	DACEnableOutput();
 8018488:	f7ff ffd1 	bl	801842e <DACEnableOutput>
	TIMGenEnable();
 801848c:	f002 fe40 	bl	801b110 <TIMGenEnable>
}
 8018490:	bf00      	nop
 8018492:	bd80      	pop	{r7, pc}

08018494 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 8018494:	b580      	push	{r7, lr}
 8018496:	af00      	add	r7, sp, #0
	TIMGenDisable();
 8018498:	f002 fe48 	bl	801b12c <TIMGenDisable>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_1);
 801849c:	2100      	movs	r1, #0
 801849e:	4805      	ldr	r0, [pc, #20]	; (80184b4 <GeneratingDisable+0x20>)
 80184a0:	f7f1 fd54 	bl	8009f4c <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_2);
 80184a4:	2110      	movs	r1, #16
 80184a6:	4803      	ldr	r0, [pc, #12]	; (80184b4 <GeneratingDisable+0x20>)
 80184a8:	f7f1 fd50 	bl	8009f4c <HAL_DAC_Stop>
	DACDisableOutput();	
 80184ac:	f7ff ffac 	bl	8018408 <DACDisableOutput>
}
 80184b0:	bf00      	nop
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	2001607c 	.word	0x2001607c

080184b8 <MX_DMA_Init>:
  */
/* Includes ------------------------------------------------------------------*/
#include "dma.h"

void MX_DMA_Init(void) 
{
 80184b8:	b480      	push	{r7}
 80184ba:	b085      	sub	sp, #20
 80184bc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
	//__HAL_RCC_DMA2_CLK_ENABLE();
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80184be:	4b15      	ldr	r3, [pc, #84]	; (8018514 <MX_DMA_Init+0x5c>)
 80184c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184c2:	4a14      	ldr	r2, [pc, #80]	; (8018514 <MX_DMA_Init+0x5c>)
 80184c4:	f043 0304 	orr.w	r3, r3, #4
 80184c8:	6493      	str	r3, [r2, #72]	; 0x48
 80184ca:	4b12      	ldr	r3, [pc, #72]	; (8018514 <MX_DMA_Init+0x5c>)
 80184cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184ce:	f003 0304 	and.w	r3, r3, #4
 80184d2:	60fb      	str	r3, [r7, #12]
 80184d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80184d6:	4b0f      	ldr	r3, [pc, #60]	; (8018514 <MX_DMA_Init+0x5c>)
 80184d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184da:	4a0e      	ldr	r2, [pc, #56]	; (8018514 <MX_DMA_Init+0x5c>)
 80184dc:	f043 0301 	orr.w	r3, r3, #1
 80184e0:	6493      	str	r3, [r2, #72]	; 0x48
 80184e2:	4b0c      	ldr	r3, [pc, #48]	; (8018514 <MX_DMA_Init+0x5c>)
 80184e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	60bb      	str	r3, [r7, #8]
 80184ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80184ee:	4b09      	ldr	r3, [pc, #36]	; (8018514 <MX_DMA_Init+0x5c>)
 80184f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184f2:	4a08      	ldr	r2, [pc, #32]	; (8018514 <MX_DMA_Init+0x5c>)
 80184f4:	f043 0302 	orr.w	r3, r3, #2
 80184f8:	6493      	str	r3, [r2, #72]	; 0x48
 80184fa:	4b06      	ldr	r3, [pc, #24]	; (8018514 <MX_DMA_Init+0x5c>)
 80184fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184fe:	f003 0302 	and.w	r3, r3, #2
 8018502:	607b      	str	r3, [r7, #4]
 8018504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
}
 8018506:	bf00      	nop
 8018508:	3714      	adds	r7, #20
 801850a:	46bd      	mov	sp, r7
 801850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018510:	4770      	bx	lr
 8018512:	bf00      	nop
 8018514:	40021000 	.word	0x40021000

08018518 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b08a      	sub	sp, #40	; 0x28
 801851c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801851e:	f107 0314 	add.w	r3, r7, #20
 8018522:	2200      	movs	r2, #0
 8018524:	601a      	str	r2, [r3, #0]
 8018526:	605a      	str	r2, [r3, #4]
 8018528:	609a      	str	r2, [r3, #8]
 801852a:	60da      	str	r2, [r3, #12]
 801852c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801852e:	4b36      	ldr	r3, [pc, #216]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018532:	4a35      	ldr	r2, [pc, #212]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018534:	f043 0304 	orr.w	r3, r3, #4
 8018538:	64d3      	str	r3, [r2, #76]	; 0x4c
 801853a:	4b33      	ldr	r3, [pc, #204]	; (8018608 <MX_GPIO_Init+0xf0>)
 801853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801853e:	f003 0304 	and.w	r3, r3, #4
 8018542:	613b      	str	r3, [r7, #16]
 8018544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8018546:	4b30      	ldr	r3, [pc, #192]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801854a:	4a2f      	ldr	r2, [pc, #188]	; (8018608 <MX_GPIO_Init+0xf0>)
 801854c:	f043 0320 	orr.w	r3, r3, #32
 8018550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018552:	4b2d      	ldr	r3, [pc, #180]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018556:	f003 0320 	and.w	r3, r3, #32
 801855a:	60fb      	str	r3, [r7, #12]
 801855c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801855e:	4b2a      	ldr	r3, [pc, #168]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018562:	4a29      	ldr	r2, [pc, #164]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018564:	f043 0301 	orr.w	r3, r3, #1
 8018568:	64d3      	str	r3, [r2, #76]	; 0x4c
 801856a:	4b27      	ldr	r3, [pc, #156]	; (8018608 <MX_GPIO_Init+0xf0>)
 801856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801856e:	f003 0301 	and.w	r3, r3, #1
 8018572:	60bb      	str	r3, [r7, #8]
 8018574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8018576:	4b24      	ldr	r3, [pc, #144]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801857a:	4a23      	ldr	r2, [pc, #140]	; (8018608 <MX_GPIO_Init+0xf0>)
 801857c:	f043 0302 	orr.w	r3, r3, #2
 8018580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018582:	4b21      	ldr	r3, [pc, #132]	; (8018608 <MX_GPIO_Init+0xf0>)
 8018584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018586:	f003 0302 	and.w	r3, r3, #2
 801858a:	607b      	str	r3, [r7, #4]
 801858c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 801858e:	2200      	movs	r2, #0
 8018590:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8018594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018598:	f7f3 fd62 	bl	800c060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 801859c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80185a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80185a2:	4b1a      	ldr	r3, [pc, #104]	; (801860c <MX_GPIO_Init+0xf4>)
 80185a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185a6:	2300      	movs	r3, #0
 80185a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80185aa:	f107 0314 	add.w	r3, r7, #20
 80185ae:	4619      	mov	r1, r3
 80185b0:	4817      	ldr	r0, [pc, #92]	; (8018610 <MX_GPIO_Init+0xf8>)
 80185b2:	f7f3 f9e9 	bl	800b988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80185b6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80185ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80185bc:	2301      	movs	r3, #1
 80185be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185c0:	2300      	movs	r3, #0
 80185c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80185c4:	2300      	movs	r3, #0
 80185c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80185c8:	f107 0314 	add.w	r3, r7, #20
 80185cc:	4619      	mov	r1, r3
 80185ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80185d2:	f7f3 f9d9 	bl	800b988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80185d6:	2360      	movs	r3, #96	; 0x60
 80185d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80185da:	2300      	movs	r3, #0
 80185dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185de:	2300      	movs	r3, #0
 80185e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80185e2:	f107 0314 	add.w	r3, r7, #20
 80185e6:	4619      	mov	r1, r3
 80185e8:	480a      	ldr	r0, [pc, #40]	; (8018614 <MX_GPIO_Init+0xfc>)
 80185ea:	f7f3 f9cd 	bl	800b988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80185ee:	2200      	movs	r2, #0
 80185f0:	2105      	movs	r1, #5
 80185f2:	2028      	movs	r0, #40	; 0x28
 80185f4:	f7f1 fbf0 	bl	8009dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80185f8:	2028      	movs	r0, #40	; 0x28
 80185fa:	f7f1 fc17 	bl	8009e2c <HAL_NVIC_EnableIRQ>

}
 80185fe:	bf00      	nop
 8018600:	3728      	adds	r7, #40	; 0x28
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
 8018606:	bf00      	nop
 8018608:	40021000 	.word	0x40021000
 801860c:	10110000 	.word	0x10110000
 8018610:	48000800 	.word	0x48000800
 8018614:	48000400 	.word	0x48000400

08018618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8018618:	b5b0      	push	{r4, r5, r7, lr}
 801861a:	b0ae      	sub	sp, #184	; 0xb8
 801861c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801861e:	f7ee fa23 	bl	8006a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8018622:	f7ff fcbd 	bl	8017fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8018626:	f7ff ff77 	bl	8018518 <MX_GPIO_Init>
  MX_DMA_Init();
 801862a:	f7ff ff45 	bl	80184b8 <MX_DMA_Init>

#ifdef USE_SCOPE
	MX_ADC1_Init();
 801862e:	f7fe fc25 	bl	8016e7c <MX_ADC1_Init>
	MX_ADC2_Init();
 8018632:	f7fe fc99 	bl	8016f68 <MX_ADC2_Init>
	MX_ADC3_Init();
 8018636:	f7fe fd07 	bl	8017048 <MX_ADC3_Init>
	MX_ADC4_Init();
 801863a:	f7fe fd7d 	bl	8017138 <MX_ADC4_Init>
	MX_TIM15_Init();
 801863e:	f003 f9c9 	bl	801b9d4 <MX_TIM15_Init>
	CalibrateADC();
 8018642:	f7ff fc41 	bl	8017ec8 <CalibrateADC>
	adcSetDefaultInputs();
 8018646:	f7ff fbbb 	bl	8017dc0 <adcSetDefaultInputs>
#endif //USE_SCOPE

#ifdef USE_GEN
	//MX_DAC_Init();
	MX_TIM6_Init();
 801864a:	f002 f9bb 	bl	801a9c4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801864e:	f002 fa05 	bl	801aa5c <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018652:	4b3f      	ldr	r3, [pc, #252]	; (8018750 <main+0x138>)
 8018654:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8018658:	461d      	mov	r5, r3
 801865a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801865c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801865e:	682b      	ldr	r3, [r5, #0]
 8018660:	6023      	str	r3, [r4, #0]
	osThreadDef(USER_TASK, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8018662:	4b3c      	ldr	r3, [pc, #240]	; (8018754 <main+0x13c>)
 8018664:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8018668:	461d      	mov	r5, r3
 801866a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801866c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801866e:	682b      	ldr	r3, [r5, #0]
 8018670:	6023      	str	r3, [r4, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018672:	4b39      	ldr	r3, [pc, #228]	; (8018758 <main+0x140>)
 8018674:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8018678:	461d      	mov	r5, r3
 801867a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801867c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801867e:	682b      	ldr	r3, [r5, #0]
 8018680:	6023      	str	r3, [r4, #0]
	//osThreadDef(LL_COMM_TASK, LLCommTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);

#ifdef USE_SCOPE
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018682:	4b36      	ldr	r3, [pc, #216]	; (801875c <main+0x144>)
 8018684:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8018688:	461d      	mov	r5, r3
 801868a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801868c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801868e:	682b      	ldr	r3, [r5, #0]
 8018690:	6023      	str	r3, [r4, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018692:	4b33      	ldr	r3, [pc, #204]	; (8018760 <main+0x148>)
 8018694:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8018698:	461d      	mov	r5, r3
 801869a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801869c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801869e:	682b      	ldr	r3, [r5, #0]
 80186a0:	6023      	str	r3, [r4, #0]
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186a2:	4b30      	ldr	r3, [pc, #192]	; (8018764 <main+0x14c>)
 80186a4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80186a8:	461d      	mov	r5, r3
 80186aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186ae:	682b      	ldr	r3, [r5, #0]
 80186b0:	6023      	str	r3, [r4, #0]
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186b2:	4b2d      	ldr	r3, [pc, #180]	; (8018768 <main+0x150>)
 80186b4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80186b8:	461d      	mov	r5, r3
 80186ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186be:	682b      	ldr	r3, [r5, #0]
 80186c0:	6023      	str	r3, [r4, #0]
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186c2:	4b2a      	ldr	r3, [pc, #168]	; (801876c <main+0x154>)
 80186c4:	f107 0418 	add.w	r4, r7, #24
 80186c8:	461d      	mov	r5, r3
 80186ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186ce:	682b      	ldr	r3, [r5, #0]
 80186d0:	6023      	str	r3, [r4, #0]
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186d2:	4b27      	ldr	r3, [pc, #156]	; (8018770 <main+0x158>)
 80186d4:	1d3c      	adds	r4, r7, #4
 80186d6:	461d      	mov	r5, r3
 80186d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186dc:	682b      	ldr	r3, [r5, #0]
 80186de:	6023      	str	r3, [r4, #0]
#endif //USE_LOG_ANLYS


	/********************* Create Threads *********************/
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 80186e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80186e4:	2100      	movs	r1, #0
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fc fad9 	bl	8014c9e <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 80186ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80186f0:	2100      	movs	r1, #0
 80186f2:	4618      	mov	r0, r3
 80186f4:	f7fc fad3 	bl	8014c9e <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 80186f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80186fc:	2100      	movs	r1, #0
 80186fe:	4618      	mov	r0, r3
 8018700:	f7fc facd 	bl	8014c9e <osThreadCreate>
	//osThreadCreate (osThread(LL_COMM_TASK), NULL);

#ifdef USE_SCOPE
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 8018704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018708:	2100      	movs	r1, #0
 801870a:	4618      	mov	r0, r3
 801870c:	f7fc fac7 	bl	8014c9e <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 8018710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018714:	2100      	movs	r1, #0
 8018716:	4618      	mov	r0, r3
 8018718:	f7fc fac1 	bl	8014c9e <osThreadCreate>
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 801871c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018720:	2100      	movs	r1, #0
 8018722:	4618      	mov	r0, r3
 8018724:	f7fc fabb 	bl	8014c9e <osThreadCreate>
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 8018728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801872c:	2100      	movs	r1, #0
 801872e:	4618      	mov	r0, r3
 8018730:	f7fc fab5 	bl	8014c9e <osThreadCreate>
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 8018734:	f107 0318 	add.w	r3, r7, #24
 8018738:	2100      	movs	r1, #0
 801873a:	4618      	mov	r0, r3
 801873c:	f7fc faaf 	bl	8014c9e <osThreadCreate>
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 8018740:	1d3b      	adds	r3, r7, #4
 8018742:	2100      	movs	r1, #0
 8018744:	4618      	mov	r0, r3
 8018746:	f7fc faaa 	bl	8014c9e <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 801874a:	f7fc faa1 	bl	8014c90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801874e:	e7fe      	b.n	801874e <main+0x136>
 8018750:	0801de78 	.word	0x0801de78
 8018754:	0801de98 	.word	0x0801de98
 8018758:	0801deb8 	.word	0x0801deb8
 801875c:	0801ded8 	.word	0x0801ded8
 8018760:	0801defc 	.word	0x0801defc
 8018764:	0801df20 	.word	0x0801df20
 8018768:	0801df44 	.word	0x0801df44
 801876c:	0801df68 	.word	0x0801df68
 8018770:	0801df8c 	.word	0x0801df8c

08018774 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801877c:	2001      	movs	r0, #1
 801877e:	f7fc fab5 	bl	8014cec <osDelay>
 8018782:	e7fb      	b.n	801877c <StartDefaultTask+0x8>

08018784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	4a04      	ldr	r2, [pc, #16]	; (80187a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8018792:	4293      	cmp	r3, r2
 8018794:	d101      	bne.n	801879a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8018796:	f7ee f97f 	bl	8006a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801879a:	bf00      	nop
 801879c:	3708      	adds	r7, #8
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	40015000 	.word	0x40015000

080187a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80187a8:	b480      	push	{r7}
 80187aa:	af00      	add	r7, sp, #0
	while(1){
 80187ac:	e7fe      	b.n	80187ac <Error_Handler+0x4>

080187ae <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80187ae:	b480      	push	{r7}
 80187b0:	b083      	sub	sp, #12
 80187b2:	af00      	add	r7, sp, #0
 80187b4:	6078      	str	r0, [r7, #4]
 80187b6:	6039      	str	r1, [r7, #0]
	while(1){
 80187b8:	e7fe      	b.n	80187b8 <assert_failed+0xa>
	...

080187bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b082      	sub	sp, #8
 80187c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80187c2:	4b11      	ldr	r3, [pc, #68]	; (8018808 <HAL_MspInit+0x4c>)
 80187c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187c6:	4a10      	ldr	r2, [pc, #64]	; (8018808 <HAL_MspInit+0x4c>)
 80187c8:	f043 0301 	orr.w	r3, r3, #1
 80187cc:	6613      	str	r3, [r2, #96]	; 0x60
 80187ce:	4b0e      	ldr	r3, [pc, #56]	; (8018808 <HAL_MspInit+0x4c>)
 80187d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187d2:	f003 0301 	and.w	r3, r3, #1
 80187d6:	607b      	str	r3, [r7, #4]
 80187d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80187da:	4b0b      	ldr	r3, [pc, #44]	; (8018808 <HAL_MspInit+0x4c>)
 80187dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187de:	4a0a      	ldr	r2, [pc, #40]	; (8018808 <HAL_MspInit+0x4c>)
 80187e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80187e4:	6593      	str	r3, [r2, #88]	; 0x58
 80187e6:	4b08      	ldr	r3, [pc, #32]	; (8018808 <HAL_MspInit+0x4c>)
 80187e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80187ee:	603b      	str	r3, [r7, #0]
 80187f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80187f2:	2200      	movs	r2, #0
 80187f4:	210f      	movs	r1, #15
 80187f6:	f06f 0001 	mvn.w	r0, #1
 80187fa:	f7f1 faed 	bl	8009dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80187fe:	bf00      	nop
 8018800:	3708      	adds	r7, #8
 8018802:	46bd      	mov	sp, r7
 8018804:	bd80      	pop	{r7, pc}
 8018806:	bf00      	nop
 8018808:	40021000 	.word	0x40021000

0801880c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b08c      	sub	sp, #48	; 0x30
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8018814:	2300      	movs	r3, #0
 8018816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8018818:	2300      	movs	r3, #0
 801881a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM20 IRQ priority */
  HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority ,0); 
 801881c:	2200      	movs	r2, #0
 801881e:	6879      	ldr	r1, [r7, #4]
 8018820:	204e      	movs	r0, #78	; 0x4e
 8018822:	f7f1 fad9 	bl	8009dd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM20 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM20_UP_IRQn); 
 8018826:	204e      	movs	r0, #78	; 0x4e
 8018828:	f7f1 fb00 	bl	8009e2c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 801882c:	4b1e      	ldr	r3, [pc, #120]	; (80188a8 <HAL_InitTick+0x9c>)
 801882e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018830:	4a1d      	ldr	r2, [pc, #116]	; (80188a8 <HAL_InitTick+0x9c>)
 8018832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018836:	6613      	str	r3, [r2, #96]	; 0x60
 8018838:	4b1b      	ldr	r3, [pc, #108]	; (80188a8 <HAL_InitTick+0x9c>)
 801883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801883c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018840:	60fb      	str	r3, [r7, #12]
 8018842:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018844:	f107 0210 	add.w	r2, r7, #16
 8018848:	f107 0314 	add.w	r3, r7, #20
 801884c:	4611      	mov	r1, r2
 801884e:	4618      	mov	r0, r3
 8018850:	f7f4 fb8e 	bl	800cf70 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8018854:	f7f4 fb76 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 8018858:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801885c:	4a13      	ldr	r2, [pc, #76]	; (80188ac <HAL_InitTick+0xa0>)
 801885e:	fba2 2303 	umull	r2, r3, r2, r3
 8018862:	0c9b      	lsrs	r3, r3, #18
 8018864:	3b01      	subs	r3, #1
 8018866:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8018868:	4b11      	ldr	r3, [pc, #68]	; (80188b0 <HAL_InitTick+0xa4>)
 801886a:	4a12      	ldr	r2, [pc, #72]	; (80188b4 <HAL_InitTick+0xa8>)
 801886c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000 / 1000) - 1;
 801886e:	4b10      	ldr	r3, [pc, #64]	; (80188b0 <HAL_InitTick+0xa4>)
 8018870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8018874:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 8018876:	4a0e      	ldr	r2, [pc, #56]	; (80188b0 <HAL_InitTick+0xa4>)
 8018878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887a:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 801887c:	4b0c      	ldr	r3, [pc, #48]	; (80188b0 <HAL_InitTick+0xa4>)
 801887e:	2200      	movs	r2, #0
 8018880:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018882:	4b0b      	ldr	r3, [pc, #44]	; (80188b0 <HAL_InitTick+0xa4>)
 8018884:	2200      	movs	r2, #0
 8018886:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim20) == HAL_OK)
 8018888:	4809      	ldr	r0, [pc, #36]	; (80188b0 <HAL_InitTick+0xa4>)
 801888a:	f7f5 f85f 	bl	800d94c <HAL_TIM_Base_Init>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d104      	bne.n	801889e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim20);
 8018894:	4806      	ldr	r0, [pc, #24]	; (80188b0 <HAL_InitTick+0xa4>)
 8018896:	f7f5 fabb 	bl	800de10 <HAL_TIM_Base_Start_IT>
 801889a:	4603      	mov	r3, r0
 801889c:	e000      	b.n	80188a0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801889e:	2301      	movs	r3, #1
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3730      	adds	r7, #48	; 0x30
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}
 80188a8:	40021000 	.word	0x40021000
 80188ac:	431bde83 	.word	0x431bde83
 80188b0:	200165c0 	.word	0x200165c0
 80188b4:	40015000 	.word	0x40015000

080188b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80188b8:	b480      	push	{r7}
 80188ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80188bc:	bf00      	nop
 80188be:	46bd      	mov	sp, r7
 80188c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c4:	4770      	bx	lr

080188c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80188c6:	b480      	push	{r7}
 80188c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80188ca:	e7fe      	b.n	80188ca <HardFault_Handler+0x4>

080188cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80188cc:	b480      	push	{r7}
 80188ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80188d0:	e7fe      	b.n	80188d0 <MemManage_Handler+0x4>

080188d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80188d2:	b480      	push	{r7}
 80188d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80188d6:	e7fe      	b.n	80188d6 <BusFault_Handler+0x4>

080188d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80188d8:	b480      	push	{r7}
 80188da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80188dc:	e7fe      	b.n	80188dc <UsageFault_Handler+0x4>

080188de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80188de:	b480      	push	{r7}
 80188e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80188e2:	bf00      	nop
 80188e4:	46bd      	mov	sp, r7
 80188e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ea:	4770      	bx	lr

080188ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80188f0:	4802      	ldr	r0, [pc, #8]	; (80188fc <DMA1_Channel1_IRQHandler+0x10>)
 80188f2:	f7f2 fe57 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80188f6:	bf00      	nop
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	bf00      	nop
 80188fc:	20015ef0 	.word	0x20015ef0

08018900 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8018904:	4802      	ldr	r0, [pc, #8]	; (8018910 <DMA1_Channel5_IRQHandler+0x10>)
 8018906:	f7f2 fe4d 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 801890a:	bf00      	nop
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	20015fbc 	.word	0x20015fbc

08018914 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8018918:	4802      	ldr	r0, [pc, #8]	; (8018924 <DMA1_Channel3_IRQHandler+0x10>)
 801891a:	f7f2 fe43 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 801891e:	bf00      	nop
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	20015db8 	.word	0x20015db8

08018928 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 801892c:	4802      	ldr	r0, [pc, #8]	; (8018938 <DMA1_Channel4_IRQHandler+0x10>)
 801892e:	f7f2 fe39 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8018932:	bf00      	nop
 8018934:	bd80      	pop	{r7, pc}
 8018936:	bf00      	nop
 8018938:	20015cec 	.word	0x20015cec

0801893c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8018940:	4802      	ldr	r0, [pc, #8]	; (801894c <DMA2_Channel1_IRQHandler+0x10>)
 8018942:	f7f2 fe2f 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8018946:	bf00      	nop
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	20016090 	.word	0x20016090

08018950 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8018954:	4802      	ldr	r0, [pc, #8]	; (8018960 <DMA2_Channel2_IRQHandler+0x10>)
 8018956:	f7f2 fe25 	bl	800b5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 801895a:	bf00      	nop
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	2001601c 	.word	0x2001601c

08018964 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8018964:	b480      	push	{r7}
 8018966:	af00      	add	r7, sp, #0
  /* USER CODE END USB_LP_IRQn 0 */
 // HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8018968:	bf00      	nop
 801896a:	46bd      	mov	sp, r7
 801896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018970:	4770      	bx	lr
	...

08018974 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8018978:	4802      	ldr	r0, [pc, #8]	; (8018984 <TIM20_UP_IRQHandler+0x10>)
 801897a:	f7f6 f903 	bl	800eb84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 801897e:	bf00      	nop
 8018980:	bd80      	pop	{r7, pc}
 8018982:	bf00      	nop
 8018984:	200165c0 	.word	0x200165c0

08018988 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b082      	sub	sp, #8
 801898c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 801898e:	4b07      	ldr	r3, [pc, #28]	; (80189ac <USART2_IRQHandler+0x24>)
 8018990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018992:	71fb      	strb	r3, [r7, #7]
	commsRecieveUART(c);
 8018994:	79fb      	ldrb	r3, [r7, #7]
 8018996:	4618      	mov	r0, r3
 8018998:	f7ff fbfe 	bl	8018198 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 801899c:	2026      	movs	r0, #38	; 0x26
 801899e:	f7f1 fa75 	bl	8009e8c <HAL_NVIC_ClearPendingIRQ>
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80189a2:	bf00      	nop
 80189a4:	3708      	adds	r7, #8
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}
 80189aa:	bf00      	nop
 80189ac:	40004400 	.word	0x40004400

080189b0 <DMA1_Channel2_IRQHandler>:
#ifdef USE_COUNTER
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80189b4:	4802      	ldr	r0, [pc, #8]	; (80189c0 <DMA1_Channel2_IRQHandler+0x10>)
 80189b6:	f7f2 fdf5 	bl	800b5a4 <HAL_DMA_IRQHandler>
}
 80189ba:	bf00      	nop
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	200166e0 	.word	0x200166e0

080189c4 <DMA1_Channel7_IRQHandler>:
* @brief This function handles DMA1 channel7 global interrupt for Logic Analyzer.
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80189c8:	4802      	ldr	r0, [pc, #8]	; (80189d4 <DMA1_Channel7_IRQHandler+0x10>)
 80189ca:	f7f2 fdeb 	bl	800b5a4 <HAL_DMA_IRQHandler>
	//HAL_DMA_IRQHandler(&hdma_usart2_tx);
	//huart2.gState =HAL_UART_STATE_READY;
//	  HAL_DMA_IRQHandler(&hdma_usart2_tx);
}
 80189ce:	bf00      	nop
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	20016a40 	.word	0x20016a40

080189d8 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 80189d8:	b580      	push	{r7, lr}
 80189da:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 80189dc:	f002 ff40 	bl	801b860 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 80189e0:	4b06      	ldr	r3, [pc, #24]	; (80189fc <EXTI15_10_IRQHandler+0x24>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	4a06      	ldr	r2, [pc, #24]	; (8018a00 <EXTI15_10_IRQHandler+0x28>)
 80189e8:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0);
 80189ea:	4b06      	ldr	r3, [pc, #24]	; (8018a04 <EXTI15_10_IRQHandler+0x2c>)
 80189ec:	695b      	ldr	r3, [r3, #20]
 80189ee:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 80189f2:	4618      	mov	r0, r3
 80189f4:	f000 f820 	bl	8018a38 <LOG_ANLYS_handle_interrupt>
}
 80189f8:	bf00      	nop
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	200169e0 	.word	0x200169e0
 8018a00:	200070a0 	.word	0x200070a0
 8018a04:	40010400 	.word	0x40010400

08018a08 <EXTI9_5_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI9_5_IRQHandler(void){
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 8018a0c:	f002 ff28 	bl	801b860 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8018a10:	4b06      	ldr	r3, [pc, #24]	; (8018a2c <EXTI9_5_IRQHandler+0x24>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	685b      	ldr	r3, [r3, #4]
 8018a16:	4a06      	ldr	r2, [pc, #24]	; (8018a30 <EXTI9_5_IRQHandler+0x28>)
 8018a18:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0); //mask the pending requests to get interrupts from selected pins only
 8018a1a:	4b06      	ldr	r3, [pc, #24]	; (8018a34 <EXTI9_5_IRQHandler+0x2c>)
 8018a1c:	695b      	ldr	r3, [r3, #20]
 8018a1e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8018a22:	4618      	mov	r0, r3
 8018a24:	f000 f808 	bl	8018a38 <LOG_ANLYS_handle_interrupt>
}
 8018a28:	bf00      	nop
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	200169e0 	.word	0x200169e0
 8018a30:	200070a0 	.word	0x200070a0
 8018a34:	40010400 	.word	0x40010400

08018a38 <LOG_ANLYS_handle_interrupt>:

/**
  * @brief  Logic Analyzer callback called from EXTI9_5_IRQHandler or EXTI15_10_IRQHandler.
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b084      	sub	sp, #16
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
	uint8_t isRightPin = 0;
 8018a40:	2300      	movs	r3, #0
 8018a42:	73fb      	strb	r3, [r7, #15]

	if(pr & (1 << 6) ){ 	//pending request on pin 6
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d00c      	beq.n	8018a68 <LOG_ANLYS_handle_interrupt+0x30>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8018a4e:	4b53      	ldr	r3, [pc, #332]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018a50:	2240      	movs	r2, #64	; 0x40
 8018a52:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 8018a54:	4b52      	ldr	r3, [pc, #328]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018a56:	7d5b      	ldrb	r3, [r3, #21]
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d104      	bne.n	8018a68 <LOG_ANLYS_handle_interrupt+0x30>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018a5e:	2017      	movs	r0, #23
 8018a60:	f7f1 f9fc 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018a64:	2301      	movs	r3, #1
 8018a66:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d00c      	beq.n	8018a8c <LOG_ANLYS_handle_interrupt+0x54>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8018a72:	4b4a      	ldr	r3, [pc, #296]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018a74:	2280      	movs	r2, #128	; 0x80
 8018a76:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 8018a78:	4b49      	ldr	r3, [pc, #292]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018a7a:	7d5b      	ldrb	r3, [r3, #21]
 8018a7c:	b2db      	uxtb	r3, r3
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d104      	bne.n	8018a8c <LOG_ANLYS_handle_interrupt+0x54>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018a82:	2017      	movs	r0, #23
 8018a84:	f7f1 f9ea 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d00d      	beq.n	8018ab2 <LOG_ANLYS_handle_interrupt+0x7a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8018a96:	4b41      	ldr	r3, [pc, #260]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018a9c:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 8018a9e:	4b40      	ldr	r3, [pc, #256]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018aa0:	7d5b      	ldrb	r3, [r3, #21]
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b02      	cmp	r3, #2
 8018aa6:	d104      	bne.n	8018ab2 <LOG_ANLYS_handle_interrupt+0x7a>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018aa8:	2017      	movs	r0, #23
 8018aaa:	f7f1 f9d7 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d00d      	beq.n	8018ad8 <LOG_ANLYS_handle_interrupt+0xa0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 8018abc:	4b37      	ldr	r3, [pc, #220]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018ac2:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 8018ac4:	4b36      	ldr	r3, [pc, #216]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018ac6:	7d5b      	ldrb	r3, [r3, #21]
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	2b03      	cmp	r3, #3
 8018acc:	d104      	bne.n	8018ad8 <LOG_ANLYS_handle_interrupt+0xa0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018ace:	2017      	movs	r0, #23
 8018ad0:	f7f1 f9c4 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d00d      	beq.n	8018afe <LOG_ANLYS_handle_interrupt+0xc6>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8018ae2:	4b2e      	ldr	r3, [pc, #184]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018ae8:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 8018aea:	4b2d      	ldr	r3, [pc, #180]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018aec:	7d5b      	ldrb	r3, [r3, #21]
 8018aee:	b2db      	uxtb	r3, r3
 8018af0:	2b04      	cmp	r3, #4
 8018af2:	d104      	bne.n	8018afe <LOG_ANLYS_handle_interrupt+0xc6>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018af4:	2028      	movs	r0, #40	; 0x28
 8018af6:	f7f1 f9b1 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018afa:	2301      	movs	r3, #1
 8018afc:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d00d      	beq.n	8018b24 <LOG_ANLYS_handle_interrupt+0xec>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8018b08:	4b24      	ldr	r3, [pc, #144]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018b0e:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 8018b10:	4b23      	ldr	r3, [pc, #140]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b12:	7d5b      	ldrb	r3, [r3, #21]
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	2b05      	cmp	r3, #5
 8018b18:	d104      	bne.n	8018b24 <LOG_ANLYS_handle_interrupt+0xec>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b1a:	2028      	movs	r0, #40	; 0x28
 8018b1c:	f7f1 f99e 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b20:	2301      	movs	r3, #1
 8018b22:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d00d      	beq.n	8018b4a <LOG_ANLYS_handle_interrupt+0x112>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8018b2e:	4b1b      	ldr	r3, [pc, #108]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018b34:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 8018b36:	4b1a      	ldr	r3, [pc, #104]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b38:	7d5b      	ldrb	r3, [r3, #21]
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	2b06      	cmp	r3, #6
 8018b3e:	d104      	bne.n	8018b4a <LOG_ANLYS_handle_interrupt+0x112>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b40:	2028      	movs	r0, #40	; 0x28
 8018b42:	f7f1 f98b 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b46:	2301      	movs	r3, #1
 8018b48:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d00d      	beq.n	8018b70 <LOG_ANLYS_handle_interrupt+0x138>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8018b54:	4b11      	ldr	r3, [pc, #68]	; (8018b9c <LOG_ANLYS_handle_interrupt+0x164>)
 8018b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018b5a:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 8018b5c:	4b10      	ldr	r3, [pc, #64]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b5e:	7d5b      	ldrb	r3, [r3, #21]
 8018b60:	b2db      	uxtb	r3, r3
 8018b62:	2b07      	cmp	r3, #7
 8018b64:	d104      	bne.n	8018b70 <LOG_ANLYS_handle_interrupt+0x138>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b66:	2028      	movs	r0, #40	; 0x28
 8018b68:	f7f1 f978 	bl	8009e5c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	73fb      	strb	r3, [r7, #15]
		}
	}

	if(isRightPin == 1){
 8018b70:	7bfb      	ldrb	r3, [r7, #15]
 8018b72:	2b01      	cmp	r3, #1
 8018b74:	d103      	bne.n	8018b7e <LOG_ANLYS_handle_interrupt+0x146>
		logAnlys.trigOccur = TRIG_OCCURRED;
 8018b76:	4b0a      	ldr	r3, [pc, #40]	; (8018ba0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b78:	2200      	movs	r2, #0
 8018b7a:	75da      	strb	r2, [r3, #23]
		//stop TIM4 and reset
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
	}
}
 8018b7c:	e009      	b.n	8018b92 <LOG_ANLYS_handle_interrupt+0x15a>
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 8018b7e:	4b09      	ldr	r3, [pc, #36]	; (8018ba4 <LOG_ANLYS_handle_interrupt+0x16c>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	4a08      	ldr	r2, [pc, #32]	; (8018ba4 <LOG_ANLYS_handle_interrupt+0x16c>)
 8018b84:	f023 0301 	bic.w	r3, r3, #1
 8018b88:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 8018b8a:	4b07      	ldr	r3, [pc, #28]	; (8018ba8 <LOG_ANLYS_handle_interrupt+0x170>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2200      	movs	r2, #0
 8018b90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018b92:	bf00      	nop
 8018b94:	3710      	adds	r7, #16
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
 8018b9a:	bf00      	nop
 8018b9c:	40010400 	.word	0x40010400
 8018ba0:	200070a0 	.word	0x200070a0
 8018ba4:	40000800 	.word	0x40000800
 8018ba8:	200161b4 	.word	0x200161b4

08018bac <TIM4_IRQHandler>:
#if defined(USE_COUNTER) || defined(USE_LOG_ANLYS)
/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	af00      	add	r7, sp, #0
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 8018bb0:	4b06      	ldr	r3, [pc, #24]	; (8018bcc <TIM4_IRQHandler+0x20>)
 8018bb2:	7cdb      	ldrb	r3, [r3, #19]
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	d103      	bne.n	8018bc2 <TIM4_IRQHandler+0x16>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);
 8018bba:	4805      	ldr	r0, [pc, #20]	; (8018bd0 <TIM4_IRQHandler+0x24>)
 8018bbc:	f002 fd2c 	bl	801b618 <LOG_ANLYS_PeriodElapsedCallback>
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
#ifdef USE_LOG_ANLYS
	}
#endif //USE_LOG_ANLYS
}
 8018bc0:	e002      	b.n	8018bc8 <TIM4_IRQHandler+0x1c>
		COUNTER_PeriodElapsedCallback(&htim4);
 8018bc2:	4803      	ldr	r0, [pc, #12]	; (8018bd0 <TIM4_IRQHandler+0x24>)
 8018bc4:	f000 fe20 	bl	8019808 <COUNTER_PeriodElapsedCallback>
}
 8018bc8:	bf00      	nop
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	200070a0 	.word	0x200070a0
 8018bd0:	200161b4 	.word	0x200161b4

08018bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8018bd8:	4b08      	ldr	r3, [pc, #32]	; (8018bfc <SystemInit+0x28>)
 8018bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018bde:	4a07      	ldr	r2, [pc, #28]	; (8018bfc <SystemInit+0x28>)
 8018be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018be8:	4b04      	ldr	r3, [pc, #16]	; (8018bfc <SystemInit+0x28>)
 8018bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018bee:	609a      	str	r2, [r3, #8]
#endif
}
 8018bf0:	bf00      	nop
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr
 8018bfa:	bf00      	nop
 8018bfc:	e000ed00 	.word	0xe000ed00

08018c00 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8018c00:	b480      	push	{r7}
 8018c02:	b083      	sub	sp, #12
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	695b      	ldr	r3, [r3, #20]
 8018c0c:	f043 0201 	orr.w	r2, r3, #1
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	615a      	str	r2, [r3, #20]
}
 8018c14:	bf00      	nop
 8018c16:	370c      	adds	r7, #12
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr

08018c20 <HAL_TIM_Base_MspInit>:
 * @brief  This function configures GPIOs and DMAs used by the functionalities.
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	4a49      	ldr	r2, [pc, #292]	; (8018d54 <HAL_TIM_Base_MspInit+0x134>)
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	d102      	bne.n	8018c38 <HAL_TIM_Base_MspInit+0x18>
		TIM15_SCOPE_MspInit(htim_base);
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f002 ff04 	bl	801ba40 <TIM15_SCOPE_MspInit>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4a46      	ldr	r2, [pc, #280]	; (8018d58 <HAL_TIM_Base_MspInit+0x138>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d102      	bne.n	8018c48 <HAL_TIM_Base_MspInit+0x28>
		TIM6_GEN_DAC_MspInit(htim_base);
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f002 f866 	bl	801ad14 <TIM6_GEN_DAC_MspInit>
	}
	if (htim_base->Instance == TIM7) {
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	4a43      	ldr	r2, [pc, #268]	; (8018d5c <HAL_TIM_Base_MspInit+0x13c>)
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d102      	bne.n	8018c58 <HAL_TIM_Base_MspInit+0x38>
		TIM7_GEN_DAC_MspInit(htim_base);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f002 f876 	bl	801ad44 <TIM7_GEN_DAC_MspInit>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 8018c58:	4b41      	ldr	r3, [pc, #260]	; (8018d60 <HAL_TIM_Base_MspInit+0x140>)
 8018c5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018c5e:	b2db      	uxtb	r3, r3
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	d11f      	bne.n	8018ca4 <HAL_TIM_Base_MspInit+0x84>
		if (htim_base->Instance == TIM1) {
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	4a3e      	ldr	r2, [pc, #248]	; (8018d64 <HAL_TIM_Base_MspInit+0x144>)
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	d102      	bne.n	8018c74 <HAL_TIM_Base_MspInit+0x54>
			TIM1_GEN_PWM_MspInit(htim_base);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f002 f8a4 	bl	801adbc <TIM1_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM3) {
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a3b      	ldr	r2, [pc, #236]	; (8018d68 <HAL_TIM_Base_MspInit+0x148>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d102      	bne.n	8018c84 <HAL_TIM_Base_MspInit+0x64>
			TIM3_GEN_PWM_MspInit(htim_base);
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	f002 f8c4 	bl	801ae0c <TIM3_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM6) {
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4a33      	ldr	r2, [pc, #204]	; (8018d58 <HAL_TIM_Base_MspInit+0x138>)
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d102      	bne.n	8018c94 <HAL_TIM_Base_MspInit+0x74>
			TIM6_GEN_PWM_MspInit(htim_base);
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f002 f8e4 	bl	801ae5c <TIM6_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM7) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	4a30      	ldr	r2, [pc, #192]	; (8018d5c <HAL_TIM_Base_MspInit+0x13c>)
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d102      	bne.n	8018ca4 <HAL_TIM_Base_MspInit+0x84>
			TIM7_GEN_PWM_MspInit(htim_base);
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f002 f92c 	bl	801aefc <TIM7_GEN_PWM_MspInit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4a30      	ldr	r2, [pc, #192]	; (8018d6c <HAL_TIM_Base_MspInit+0x14c>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d102      	bne.n	8018cb4 <HAL_TIM_Base_MspInit+0x94>
		TIM8_SYNC_PWM_MspInit(htim_base);
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f003 f810 	bl	801bcd4 <TIM8_SYNC_PWM_MspInit>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4a2a      	ldr	r2, [pc, #168]	; (8018d64 <HAL_TIM_Base_MspInit+0x144>)
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d107      	bne.n	8018cce <HAL_TIM_Base_MspInit+0xae>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018cbe:	4b2c      	ldr	r3, [pc, #176]	; (8018d70 <HAL_TIM_Base_MspInit+0x150>)
 8018cc0:	7cdb      	ldrb	r3, [r3, #19]
 8018cc2:	b2db      	uxtb	r3, r3
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	d102      	bne.n	8018cce <HAL_TIM_Base_MspInit+0xae>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f002 fbe7 	bl	801b49c <TIM1_LOG_ANLYS_MspInit>
		}
	}
	if(htim_base->Instance == TIM4) {
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a28      	ldr	r2, [pc, #160]	; (8018d74 <HAL_TIM_Base_MspInit+0x154>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d107      	bne.n	8018ce8 <HAL_TIM_Base_MspInit+0xc8>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018cd8:	4b25      	ldr	r3, [pc, #148]	; (8018d70 <HAL_TIM_Base_MspInit+0x150>)
 8018cda:	7cdb      	ldrb	r3, [r3, #19]
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d102      	bne.n	8018ce8 <HAL_TIM_Base_MspInit+0xc8>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 8018ce2:	6878      	ldr	r0, [r7, #4]
 8018ce4:	f002 fc40 	bl	801b568 <TIM4_LOG_ANLYS_MspInit>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018cf0:	d11e      	bne.n	8018d30 <HAL_TIM_Base_MspInit+0x110>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 8018cf2:	4b21      	ldr	r3, [pc, #132]	; (8018d78 <HAL_TIM_Base_MspInit+0x158>)
 8018cf4:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018cf8:	b2db      	uxtb	r3, r3
 8018cfa:	2b01      	cmp	r3, #1
 8018cfc:	d005      	beq.n	8018d0a <HAL_TIM_Base_MspInit+0xea>
 8018cfe:	4b1e      	ldr	r3, [pc, #120]	; (8018d78 <HAL_TIM_Base_MspInit+0x158>)
 8018d00:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	2b04      	cmp	r3, #4
 8018d08:	d103      	bne.n	8018d12 <HAL_TIM_Base_MspInit+0xf2>
			TIM2_ETRorREF_MspInit(htim_base);
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f000 fb9c 	bl	8019448 <TIM2_ETRorREF_MspInit>
 8018d10:	e00e      	b.n	8018d30 <HAL_TIM_Base_MspInit+0x110>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 8018d12:	4b19      	ldr	r3, [pc, #100]	; (8018d78 <HAL_TIM_Base_MspInit+0x158>)
 8018d14:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	2b02      	cmp	r3, #2
 8018d1c:	d005      	beq.n	8018d2a <HAL_TIM_Base_MspInit+0x10a>
 8018d1e:	4b16      	ldr	r3, [pc, #88]	; (8018d78 <HAL_TIM_Base_MspInit+0x158>)
 8018d20:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b03      	cmp	r3, #3
 8018d28:	d102      	bne.n	8018d30 <HAL_TIM_Base_MspInit+0x110>
			TIM2_ICorTI_MspInit(htim_base);
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f000 fbf0 	bl	8019510 <TIM2_ICorTI_MspInit>
		}
	}
	if (htim_base->Instance == TIM4) {
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	4a0f      	ldr	r2, [pc, #60]	; (8018d74 <HAL_TIM_Base_MspInit+0x154>)
 8018d36:	4293      	cmp	r3, r2
 8018d38:	d107      	bne.n	8018d4a <HAL_TIM_Base_MspInit+0x12a>
#ifdef USE_LOG_ANLYS
		if (logAnlys.enable == LOGA_DISABLED) {
 8018d3a:	4b0d      	ldr	r3, [pc, #52]	; (8018d70 <HAL_TIM_Base_MspInit+0x150>)
 8018d3c:	7cdb      	ldrb	r3, [r3, #19]
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d102      	bne.n	8018d4a <HAL_TIM_Base_MspInit+0x12a>
#endif
			TIM4_REForICorTI_MspInit(htim_base);
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f000 fc79 	bl	801963c <TIM4_REForICorTI_MspInit>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 8018d4a:	bf00      	nop
 8018d4c:	3708      	adds	r7, #8
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}
 8018d52:	bf00      	nop
 8018d54:	40014000 	.word	0x40014000
 8018d58:	40001000 	.word	0x40001000
 8018d5c:	40001400 	.word	0x40001400
 8018d60:	20004948 	.word	0x20004948
 8018d64:	40012c00 	.word	0x40012c00
 8018d68:	40000400 	.word	0x40000400
 8018d6c:	40013400 	.word	0x40013400
 8018d70:	200070a0 	.word	0x200070a0
 8018d74:	40000800 	.word	0x40000800
 8018d78:	20004570 	.word	0x20004570

08018d7c <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b082      	sub	sp, #8
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	4a39      	ldr	r2, [pc, #228]	; (8018e70 <HAL_TIM_Base_MspDeInit+0xf4>)
 8018d8a:	4293      	cmp	r3, r2
 8018d8c:	d102      	bne.n	8018d94 <HAL_TIM_Base_MspDeInit+0x18>
		TIM15_SCOPE_MspDeinit(htim_base);
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f002 fe6e 	bl	801ba70 <TIM15_SCOPE_MspDeinit>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 8018d94:	4b37      	ldr	r3, [pc, #220]	; (8018e74 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018d96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018d9a:	b2db      	uxtb	r3, r3
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d10f      	bne.n	8018dc0 <HAL_TIM_Base_MspDeInit+0x44>
		if (htim_base->Instance == TIM6) {
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	4a34      	ldr	r2, [pc, #208]	; (8018e78 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018da6:	4293      	cmp	r3, r2
 8018da8:	d102      	bne.n	8018db0 <HAL_TIM_Base_MspDeInit+0x34>
			TIM6_GEN_DAC_MspDeinit(htim_base);
 8018daa:	6878      	ldr	r0, [r7, #4]
 8018dac:	f001 ffe2 	bl	801ad74 <TIM6_GEN_DAC_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	4a31      	ldr	r2, [pc, #196]	; (8018e7c <HAL_TIM_Base_MspDeInit+0x100>)
 8018db6:	4293      	cmp	r3, r2
 8018db8:	d102      	bne.n	8018dc0 <HAL_TIM_Base_MspDeInit+0x44>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	f001 ffec 	bl	801ad98 <TIM7_GEN_DAC_MspDeinit>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 8018dc0:	4b2c      	ldr	r3, [pc, #176]	; (8018e74 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018dc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	2b01      	cmp	r3, #1
 8018dca:	d11f      	bne.n	8018e0c <HAL_TIM_Base_MspDeInit+0x90>
		if (htim_base->Instance == TIM1) {
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4a2b      	ldr	r2, [pc, #172]	; (8018e80 <HAL_TIM_Base_MspDeInit+0x104>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d102      	bne.n	8018ddc <HAL_TIM_Base_MspDeInit+0x60>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f002 f8e0 	bl	801af9c <TIM1_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM3) {
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4a28      	ldr	r2, [pc, #160]	; (8018e84 <HAL_TIM_Base_MspDeInit+0x108>)
 8018de2:	4293      	cmp	r3, r2
 8018de4:	d102      	bne.n	8018dec <HAL_TIM_Base_MspDeInit+0x70>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f002 f8ea 	bl	801afc0 <TIM3_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM6) {
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a21      	ldr	r2, [pc, #132]	; (8018e78 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d102      	bne.n	8018dfc <HAL_TIM_Base_MspDeInit+0x80>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f002 f8f4 	bl	801afe4 <TIM6_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	4a1e      	ldr	r2, [pc, #120]	; (8018e7c <HAL_TIM_Base_MspDeInit+0x100>)
 8018e02:	4293      	cmp	r3, r2
 8018e04:	d102      	bne.n	8018e0c <HAL_TIM_Base_MspDeInit+0x90>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f002 f902 	bl	801b010 <TIM7_GEN_PWM_MspDeinit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4a1d      	ldr	r2, [pc, #116]	; (8018e88 <HAL_TIM_Base_MspDeInit+0x10c>)
 8018e12:	4293      	cmp	r3, r2
 8018e14:	d102      	bne.n	8018e1c <HAL_TIM_Base_MspDeInit+0xa0>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	f003 f848 	bl	801beac <TIM8_SYNC_PWM_MspDeinit>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a17      	ldr	r2, [pc, #92]	; (8018e80 <HAL_TIM_Base_MspDeInit+0x104>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d102      	bne.n	8018e2c <HAL_TIM_Base_MspDeInit+0xb0>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f002 fbe0 	bl	801b5ec <TIM1_LOG_ANLYS_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	4a16      	ldr	r2, [pc, #88]	; (8018e8c <HAL_TIM_Base_MspDeInit+0x110>)
 8018e32:	4293      	cmp	r3, r2
 8018e34:	d107      	bne.n	8018e46 <HAL_TIM_Base_MspDeInit+0xca>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018e36:	4b16      	ldr	r3, [pc, #88]	; (8018e90 <HAL_TIM_Base_MspDeInit+0x114>)
 8018e38:	7cdb      	ldrb	r3, [r3, #19]
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	2b01      	cmp	r3, #1
 8018e3e:	d102      	bne.n	8018e46 <HAL_TIM_Base_MspDeInit+0xca>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f002 fbb9 	bl	801b5b8 <TIM4_LOG_ANLYS_MspDeinit>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018e4e:	d102      	bne.n	8018e56 <HAL_TIM_Base_MspDeInit+0xda>
		TIM2_CNT_MspDeinit(htim_base);
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f000 fc39 	bl	80196c8 <TIM2_CNT_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	4a0c      	ldr	r2, [pc, #48]	; (8018e8c <HAL_TIM_Base_MspDeInit+0x110>)
 8018e5c:	4293      	cmp	r3, r2
 8018e5e:	d102      	bne.n	8018e66 <HAL_TIM_Base_MspDeInit+0xea>
		TIM4_CNT_MspDeinit(htim_base);
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f000 fc8b 	bl	801977c <TIM4_CNT_MspDeinit>
	}
#endif //USE_COUNTER
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	40014000 	.word	0x40014000
 8018e74:	20004948 	.word	0x20004948
 8018e78:	40001000 	.word	0x40001000
 8018e7c:	40001400 	.word	0x40001400
 8018e80:	40012c00 	.word	0x40012c00
 8018e84:	40000400 	.word	0x40000400
 8018e88:	40013400 	.word	0x40013400
 8018e8c:	40000800 	.word	0x40000800
 8018e90:	200070a0 	.word	0x200070a0

08018e94 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b08c      	sub	sp, #48	; 0x30
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	60f8      	str	r0, [r7, #12]
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	607a      	str	r2, [r7, #4]
 8018ea0:	603b      	str	r3, [r7, #0]

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t result = UNKNOW_ERROR;
 8018ea6:	23ff      	movs	r3, #255	; 0xff
 8018ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isFreqPassed == true) {
 8018eac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d008      	beq.n	8018ec6 <TIM_Reconfig+0x32>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	005a      	lsls	r2, r3, #1
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ebe:	3301      	adds	r3, #1
 8018ec0:	085b      	lsrs	r3, r3, #1
 8018ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ec4:	e001      	b.n	8018eca <TIM_Reconfig+0x36>
	} else {
		clkDiv = samplingFreq;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (clkDiv == 0) { //error
 8018eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d103      	bne.n	8018ed8 <TIM_Reconfig+0x44>
		result = GEN_FREQ_MISMATCH;
 8018ed0:	236c      	movs	r3, #108	; 0x6c
 8018ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018ed6:	e059      	b.n	8018f8c <TIM_Reconfig+0xf8>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 8018ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ede:	da09      	bge.n	8018ef4 <TIM_Reconfig+0x60>
		prescaler = 0;
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	857b      	strh	r3, [r7, #42]	; 0x2a
		autoReloadReg = clkDiv - 1;
 8018ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	3b01      	subs	r3, #1
 8018eea:	853b      	strh	r3, [r7, #40]	; 0x28
		result = 0;
 8018eec:	2300      	movs	r3, #0
 8018eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018ef2:	e04b      	b.n	8018f8c <TIM_Reconfig+0xf8>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 8018ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef8:	61fb      	str	r3, [r7, #28]
		uint32_t errMin = 0xFFFFFFFF;
 8018efa:	f04f 33ff 	mov.w	r3, #4294967295
 8018efe:	61bb      	str	r3, [r7, #24]
		uint16_t ratio = clkDiv >> 16;
 8018f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f02:	141b      	asrs	r3, r3, #16
 8018f04:	82fb      	strh	r3, [r7, #22]
		uint16_t div;

		while (errVal != 0) {
 8018f06:	e023      	b.n	8018f50 <TIM_Reconfig+0xbc>
			ratio++;
 8018f08:	8afb      	ldrh	r3, [r7, #22]
 8018f0a:	3301      	adds	r3, #1
 8018f0c:	82fb      	strh	r3, [r7, #22]
			div = clkDiv / ratio;
 8018f0e:	8afb      	ldrh	r3, [r7, #22]
 8018f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f12:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f16:	82bb      	strh	r3, [r7, #20]
			errVal = clkDiv - (div * ratio);
 8018f18:	8abb      	ldrh	r3, [r7, #20]
 8018f1a:	8afa      	ldrh	r2, [r7, #22]
 8018f1c:	fb02 f303 	mul.w	r3, r2, r3
 8018f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f22:	1ad3      	subs	r3, r2, r3
 8018f24:	61fb      	str	r3, [r7, #28]

			if (errVal < errMin) {
 8018f26:	69fa      	ldr	r2, [r7, #28]
 8018f28:	69bb      	ldr	r3, [r7, #24]
 8018f2a:	429a      	cmp	r2, r3
 8018f2c:	d203      	bcs.n	8018f36 <TIM_Reconfig+0xa2>
				errMin = errVal;
 8018f2e:	69fb      	ldr	r3, [r7, #28]
 8018f30:	61bb      	str	r3, [r7, #24]
				errMinRatio = ratio;
 8018f32:	8afb      	ldrh	r3, [r7, #22]
 8018f34:	627b      	str	r3, [r7, #36]	; 0x24
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 8018f36:	8afb      	ldrh	r3, [r7, #22]
 8018f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d107      	bne.n	8018f50 <TIM_Reconfig+0xbc>
				div = clkDiv / errMinRatio;
 8018f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f48:	82bb      	strh	r3, [r7, #20]
				ratio = errMinRatio;
 8018f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4c:	82fb      	strh	r3, [r7, #22]
				break;
 8018f4e:	e002      	b.n	8018f56 <TIM_Reconfig+0xc2>
		while (errVal != 0) {
 8018f50:	69fb      	ldr	r3, [r7, #28]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d1d8      	bne.n	8018f08 <TIM_Reconfig+0x74>
			}
		}

		if (ratio > div) {
 8018f56:	8afa      	ldrh	r2, [r7, #22]
 8018f58:	8abb      	ldrh	r3, [r7, #20]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d906      	bls.n	8018f6c <TIM_Reconfig+0xd8>
			prescaler = div - 1;
 8018f5e:	8abb      	ldrh	r3, [r7, #20]
 8018f60:	3b01      	subs	r3, #1
 8018f62:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = ratio - 1;
 8018f64:	8afb      	ldrh	r3, [r7, #22]
 8018f66:	3b01      	subs	r3, #1
 8018f68:	853b      	strh	r3, [r7, #40]	; 0x28
 8018f6a:	e005      	b.n	8018f78 <TIM_Reconfig+0xe4>
		} else {
			prescaler = ratio - 1;
 8018f6c:	8afb      	ldrh	r3, [r7, #22]
 8018f6e:	3b01      	subs	r3, #1
 8018f70:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = div - 1;
 8018f72:	8abb      	ldrh	r3, [r7, #20]
 8018f74:	3b01      	subs	r3, #1
 8018f76:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		if (errVal) {
 8018f78:	69fb      	ldr	r3, [r7, #28]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d003      	beq.n	8018f86 <TIM_Reconfig+0xf2>
			result = GEN_FREQ_IS_INACCURATE;
 8018f7e:	236b      	movs	r3, #107	; 0x6b
 8018f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018f84:	e002      	b.n	8018f8c <TIM_Reconfig+0xf8>
		} else {
			result = 0;
 8018f86:	2300      	movs	r3, #0
 8018f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	if (realFreq != 0) {
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d00b      	beq.n	8018faa <TIM_Reconfig+0x116>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 8018f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f94:	3301      	adds	r3, #1
 8018f96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018f98:	3201      	adds	r2, #1
 8018f9a:	fb02 f303 	mul.w	r3, r2, r3
 8018f9e:	461a      	mov	r2, r3
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	601a      	str	r2, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8018fb8:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7ff fe1e 	bl	8018c00 <LL_TIM_GenerateEvent_UPDATE>

	return result;
 8018fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3730      	adds	r7, #48	; 0x30
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 8018fd0:	b5b0      	push	{r4, r5, r7, lr}
 8018fd2:	b08e      	sub	sp, #56	; 0x38
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	60f8      	str	r0, [r7, #12]
 8018fd8:	60b9      	str	r1, [r7, #8]
 8018fda:	ed87 0b00 	vstr	d0, [r7]
//	return realFreq;

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	633b      	str	r3, [r7, #48]	; 0x30
	double realFreq;
	uint8_t result = UNKNOW_ERROR;
 8018fe2:	23ff      	movs	r3, #255	; 0xff
 8018fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	005b      	lsls	r3, r3, #1
 8018fec:	4618      	mov	r0, r3
 8018fee:	f7e7 fa59 	bl	80004a4 <__aeabi_ui2d>
 8018ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ff6:	f7e7 fbf9 	bl	80007ec <__aeabi_ddiv>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	460c      	mov	r4, r1
 8018ffe:	4618      	mov	r0, r3
 8019000:	4621      	mov	r1, r4
 8019002:	f04f 0200 	mov.w	r2, #0
 8019006:	4b53      	ldr	r3, [pc, #332]	; (8019154 <TIM_ReconfigPrecise+0x184>)
 8019008:	f7e7 f910 	bl	800022c <__adddf3>
 801900c:	4603      	mov	r3, r0
 801900e:	460c      	mov	r4, r1
 8019010:	4618      	mov	r0, r3
 8019012:	4621      	mov	r1, r4
 8019014:	f04f 0200 	mov.w	r2, #0
 8019018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801901c:	f7e7 fbe6 	bl	80007ec <__aeabi_ddiv>
 8019020:	4603      	mov	r3, r0
 8019022:	460c      	mov	r4, r1
 8019024:	4618      	mov	r0, r3
 8019026:	4621      	mov	r1, r4
 8019028:	f7e7 fd66 	bl	8000af8 <__aeabi_d2iz>
 801902c:	4603      	mov	r3, r0
 801902e:	61fb      	str	r3, [r7, #28]

	if (clkDiv == 0) { //error
 8019030:	69fb      	ldr	r3, [r7, #28]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d103      	bne.n	801903e <TIM_ReconfigPrecise+0x6e>
		result = GEN_FREQ_MISMATCH;
 8019036:	236c      	movs	r3, #108	; 0x6c
 8019038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801903c:	e059      	b.n	80190f2 <TIM_ReconfigPrecise+0x122>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 801903e:	69fb      	ldr	r3, [r7, #28]
 8019040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019044:	da09      	bge.n	801905a <TIM_ReconfigPrecise+0x8a>
		prescaler = 0;
 8019046:	2300      	movs	r3, #0
 8019048:	86fb      	strh	r3, [r7, #54]	; 0x36
		autoReloadReg = clkDiv - 1;
 801904a:	69fb      	ldr	r3, [r7, #28]
 801904c:	b29b      	uxth	r3, r3
 801904e:	3b01      	subs	r3, #1
 8019050:	86bb      	strh	r3, [r7, #52]	; 0x34
		result = 0;
 8019052:	2300      	movs	r3, #0
 8019054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8019058:	e04b      	b.n	80190f2 <TIM_ReconfigPrecise+0x122>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 801905a:	f04f 33ff 	mov.w	r3, #4294967295
 801905e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t errMin = 0xFFFFFFFF;
 8019060:	f04f 33ff 	mov.w	r3, #4294967295
 8019064:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t ratio = clkDiv >> 16;
 8019066:	69fb      	ldr	r3, [r7, #28]
 8019068:	141b      	asrs	r3, r3, #16
 801906a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t div;

		while (errVal != 0) {
 801906c:	e023      	b.n	80190b6 <TIM_ReconfigPrecise+0xe6>
			ratio++;
 801906e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019070:	3301      	adds	r3, #1
 8019072:	84fb      	strh	r3, [r7, #38]	; 0x26
			div = clkDiv / ratio;
 8019074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019076:	69fa      	ldr	r2, [r7, #28]
 8019078:	fb92 f3f3 	sdiv	r3, r2, r3
 801907c:	84bb      	strh	r3, [r7, #36]	; 0x24
			errVal = clkDiv - (div * ratio);
 801907e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019080:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019082:	fb02 f303 	mul.w	r3, r2, r3
 8019086:	69fa      	ldr	r2, [r7, #28]
 8019088:	1ad3      	subs	r3, r2, r3
 801908a:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (errVal < errMin) {
 801908c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019090:	429a      	cmp	r2, r3
 8019092:	d203      	bcs.n	801909c <TIM_ReconfigPrecise+0xcc>
				errMin = errVal;
 8019094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019096:	62bb      	str	r3, [r7, #40]	; 0x28
				errMinRatio = ratio;
 8019098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801909a:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 801909c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801909e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190a2:	4293      	cmp	r3, r2
 80190a4:	d107      	bne.n	80190b6 <TIM_ReconfigPrecise+0xe6>
				div = clkDiv / errMinRatio;
 80190a6:	69fa      	ldr	r2, [r7, #28]
 80190a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80190ae:	84bb      	strh	r3, [r7, #36]	; 0x24
				ratio = errMinRatio;
 80190b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b2:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 80190b4:	e002      	b.n	80190bc <TIM_ReconfigPrecise+0xec>
		while (errVal != 0) {
 80190b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d1d8      	bne.n	801906e <TIM_ReconfigPrecise+0x9e>
			}
		}

		if (ratio > div) {
 80190bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d906      	bls.n	80190d2 <TIM_ReconfigPrecise+0x102>
			prescaler = div - 1;
 80190c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190c6:	3b01      	subs	r3, #1
 80190c8:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = ratio - 1;
 80190ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190cc:	3b01      	subs	r3, #1
 80190ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80190d0:	e005      	b.n	80190de <TIM_ReconfigPrecise+0x10e>
		} else {
			prescaler = ratio - 1;
 80190d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190d4:	3b01      	subs	r3, #1
 80190d6:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = div - 1;
 80190d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190da:	3b01      	subs	r3, #1
 80190dc:	86bb      	strh	r3, [r7, #52]	; 0x34
		}

		if (errVal) {
 80190de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d003      	beq.n	80190ec <TIM_ReconfigPrecise+0x11c>
			result = GEN_FREQ_IS_INACCURATE;
 80190e4:	236b      	movs	r3, #107	; 0x6b
 80190e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80190ea:	e002      	b.n	80190f2 <TIM_ReconfigPrecise+0x122>
		} else {
			result = 0;
 80190ec:	2300      	movs	r3, #0
 80190ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 80190f2:	68b8      	ldr	r0, [r7, #8]
 80190f4:	f7e7 f9d6 	bl	80004a4 <__aeabi_ui2d>
 80190f8:	4604      	mov	r4, r0
 80190fa:	460d      	mov	r5, r1
 80190fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80190fe:	3301      	adds	r3, #1
 8019100:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8019102:	3201      	adds	r2, #1
 8019104:	fb02 f303 	mul.w	r3, r2, r3
 8019108:	4618      	mov	r0, r3
 801910a:	f7e7 f9db 	bl	80004c4 <__aeabi_i2d>
 801910e:	4602      	mov	r2, r0
 8019110:	460b      	mov	r3, r1
 8019112:	4620      	mov	r0, r4
 8019114:	4629      	mov	r1, r5
 8019116:	f7e7 fb69 	bl	80007ec <__aeabi_ddiv>
 801911a:	4603      	mov	r3, r0
 801911c:	460c      	mov	r4, r1
 801911e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	htim_base->Instance->ARR = autoReloadReg;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8019128:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019130:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	4618      	mov	r0, r3
 8019138:	f7ff fd62 	bl	8018c00 <LL_TIM_GenerateEvent_UPDATE>

	return realFreq;
 801913c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019140:	ec44 3b17 	vmov	d7, r3, r4
}
 8019144:	eeb0 0a47 	vmov.f32	s0, s14
 8019148:	eef0 0a67 	vmov.f32	s1, s15
 801914c:	3738      	adds	r7, #56	; 0x38
 801914e:	46bd      	mov	sp, r7
 8019150:	bdb0      	pop	{r4, r5, r7, pc}
 8019152:	bf00      	nop
 8019154:	3ff00000 	.word	0x3ff00000

08019158 <LL_TIM_GenerateEvent_UPDATE>:
{
 8019158:	b480      	push	{r7}
 801915a:	b083      	sub	sp, #12
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	695b      	ldr	r3, [r3, #20]
 8019164:	f043 0201 	orr.w	r2, r3, #1
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	615a      	str	r2, [r3, #20]
}
 801916c:	bf00      	nop
 801916e:	370c      	adds	r7, #12
 8019170:	46bd      	mov	sp, r7
 8019172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019176:	4770      	bx	lr

08019178 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b088      	sub	sp, #32
 801917c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM4_CLK_ENABLE();
 801917e:	4b41      	ldr	r3, [pc, #260]	; (8019284 <MX_TIM4_Init+0x10c>)
 8019180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019182:	4a40      	ldr	r2, [pc, #256]	; (8019284 <MX_TIM4_Init+0x10c>)
 8019184:	f043 0304 	orr.w	r3, r3, #4
 8019188:	6593      	str	r3, [r2, #88]	; 0x58
 801918a:	4b3e      	ldr	r3, [pc, #248]	; (8019284 <MX_TIM4_Init+0x10c>)
 801918c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801918e:	f003 0304 	and.w	r3, r3, #4
 8019192:	603b      	str	r3, [r7, #0]
 8019194:	683b      	ldr	r3, [r7, #0]

	htim4.Instance = TIM4;
 8019196:	4b3c      	ldr	r3, [pc, #240]	; (8019288 <MX_TIM4_Init+0x110>)
 8019198:	4a3c      	ldr	r2, [pc, #240]	; (801928c <MX_TIM4_Init+0x114>)
 801919a:	601a      	str	r2, [r3, #0]
	if(counter.state == COUNTER_REF){
 801919c:	4b3c      	ldr	r3, [pc, #240]	; (8019290 <MX_TIM4_Init+0x118>)
 801919e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191a2:	b2db      	uxtb	r3, r3
 80191a4:	2b04      	cmp	r3, #4
 80191a6:	d108      	bne.n	80191ba <MX_TIM4_Init+0x42>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
 80191a8:	4b37      	ldr	r3, [pc, #220]	; (8019288 <MX_TIM4_Init+0x110>)
 80191aa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80191ae:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 80191b0:	4b35      	ldr	r3, [pc, #212]	; (8019288 <MX_TIM4_Init+0x110>)
 80191b2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80191b6:	60da      	str	r2, [r3, #12]
 80191b8:	e022      	b.n	8019200 <MX_TIM4_Init+0x88>
	}else if(counter.state == COUNTER_ETR){
 80191ba:	4b35      	ldr	r3, [pc, #212]	; (8019290 <MX_TIM4_Init+0x118>)
 80191bc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d108      	bne.n	80191d8 <MX_TIM4_Init+0x60>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 16799 for ETR mode
 80191c6:	4b30      	ldr	r3, [pc, #192]	; (8019288 <MX_TIM4_Init+0x110>)
 80191c8:	f244 129f 	movw	r2, #16799	; 0x419f
 80191cc:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 80191ce:	4b2e      	ldr	r3, [pc, #184]	; (8019288 <MX_TIM4_Init+0x110>)
 80191d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80191d4:	60da      	str	r2, [r3, #12]
 80191d6:	e013      	b.n	8019200 <MX_TIM4_Init+0x88>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 80191d8:	4b2d      	ldr	r3, [pc, #180]	; (8019290 <MX_TIM4_Init+0x118>)
 80191da:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	2b02      	cmp	r3, #2
 80191e2:	d005      	beq.n	80191f0 <MX_TIM4_Init+0x78>
 80191e4:	4b2a      	ldr	r3, [pc, #168]	; (8019290 <MX_TIM4_Init+0x118>)
 80191e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	2b03      	cmp	r3, #3
 80191ee:	d107      	bne.n	8019200 <MX_TIM4_Init+0x88>
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
 80191f0:	4b25      	ldr	r3, [pc, #148]	; (8019288 <MX_TIM4_Init+0x110>)
 80191f2:	f244 129f 	movw	r2, #16799	; 0x419f
 80191f6:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;
 80191f8:	4b23      	ldr	r3, [pc, #140]	; (8019288 <MX_TIM4_Init+0x110>)
 80191fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80191fe:	60da      	str	r2, [r3, #12]
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019200:	4b21      	ldr	r3, [pc, #132]	; (8019288 <MX_TIM4_Init+0x110>)
 8019202:	2200      	movs	r2, #0
 8019204:	609a      	str	r2, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019206:	4b20      	ldr	r3, [pc, #128]	; (8019288 <MX_TIM4_Init+0x110>)
 8019208:	2200      	movs	r2, #0
 801920a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801920c:	4b1e      	ldr	r3, [pc, #120]	; (8019288 <MX_TIM4_Init+0x110>)
 801920e:	2200      	movs	r2, #0
 8019210:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8019212:	481d      	ldr	r0, [pc, #116]	; (8019288 <MX_TIM4_Init+0x110>)
 8019214:	f7f4 fb9a 	bl	800d94c <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 8019218:	4b1d      	ldr	r3, [pc, #116]	; (8019290 <MX_TIM4_Init+0x118>)
 801921a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801921e:	b2db      	uxtb	r3, r3
 8019220:	2b04      	cmp	r3, #4
 8019222:	d109      	bne.n	8019238 <MX_TIM4_Init+0xc0>
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8019224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019228:	613b      	str	r3, [r7, #16]
		sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 801922a:	2300      	movs	r3, #0
 801922c:	617b      	str	r3, [r7, #20]
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 801922e:	2300      	movs	r3, #0
 8019230:	61bb      	str	r3, [r7, #24]
		sClockSourceConfig.ClockFilter = 0;
 8019232:	2300      	movs	r3, #0
 8019234:	61fb      	str	r3, [r7, #28]
 8019236:	e002      	b.n	801923e <MX_TIM4_Init+0xc6>
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8019238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801923c:	613b      	str	r3, [r7, #16]
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801923e:	f107 0310 	add.w	r3, r7, #16
 8019242:	4619      	mov	r1, r3
 8019244:	4810      	ldr	r0, [pc, #64]	; (8019288 <MX_TIM4_Init+0x110>)
 8019246:	f7f6 fc57 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801924a:	2320      	movs	r3, #32
 801924c:	607b      	str	r3, [r7, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 801924e:	4b10      	ldr	r3, [pc, #64]	; (8019290 <MX_TIM4_Init+0x118>)
 8019250:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019254:	b2db      	uxtb	r3, r3
 8019256:	2b02      	cmp	r3, #2
 8019258:	d005      	beq.n	8019266 <MX_TIM4_Init+0xee>
 801925a:	4b0d      	ldr	r3, [pc, #52]	; (8019290 <MX_TIM4_Init+0x118>)
 801925c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019260:	b2db      	uxtb	r3, r3
 8019262:	2b03      	cmp	r3, #3
 8019264:	d102      	bne.n	801926c <MX_TIM4_Init+0xf4>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019266:	2300      	movs	r3, #0
 8019268:	60fb      	str	r3, [r7, #12]
 801926a:	e001      	b.n	8019270 <MX_TIM4_Init+0xf8>
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801926c:	2380      	movs	r3, #128	; 0x80
 801926e:	60fb      	str	r3, [r7, #12]
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8019270:	1d3b      	adds	r3, r7, #4
 8019272:	4619      	mov	r1, r3
 8019274:	4804      	ldr	r0, [pc, #16]	; (8019288 <MX_TIM4_Init+0x110>)
 8019276:	f7f9 fa21 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>
}
 801927a:	bf00      	nop
 801927c:	3720      	adds	r7, #32
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}
 8019282:	bf00      	nop
 8019284:	40021000 	.word	0x40021000
 8019288:	200161b4 	.word	0x200161b4
 801928c:	40000800 	.word	0x40000800
 8019290:	20004570 	.word	0x20004570

08019294 <MX_TIM2_ETRorREF_Init>:
 * @note   Reference (REF): Counting an external clock source. The time of counting is given by the frequency of an external clk source on TIM4 and its ARR*PSC (gating).
 * @param  None
 * @retval None
 */
static void MX_TIM2_ETRorREF_Init(void)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b08e      	sub	sp, #56	; 0x38
 8019298:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM2_CLK_ENABLE();
 801929a:	4b33      	ldr	r3, [pc, #204]	; (8019368 <MX_TIM2_ETRorREF_Init+0xd4>)
 801929c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801929e:	4a32      	ldr	r2, [pc, #200]	; (8019368 <MX_TIM2_ETRorREF_Init+0xd4>)
 80192a0:	f043 0301 	orr.w	r3, r3, #1
 80192a4:	6593      	str	r3, [r2, #88]	; 0x58
 80192a6:	4b30      	ldr	r3, [pc, #192]	; (8019368 <MX_TIM2_ETRorREF_Init+0xd4>)
 80192a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192aa:	f003 0301 	and.w	r3, r3, #1
 80192ae:	607b      	str	r3, [r7, #4]
 80192b0:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;
 80192b2:	4b2e      	ldr	r3, [pc, #184]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80192b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80192ba:	4b2c      	ldr	r3, [pc, #176]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192bc:	2200      	movs	r2, #0
 80192be:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80192c0:	4b2a      	ldr	r3, [pc, #168]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192c2:	2200      	movs	r2, #0
 80192c4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 80192c6:	4b29      	ldr	r3, [pc, #164]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192c8:	f04f 32ff 	mov.w	r2, #4294967295
 80192cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80192ce:	4b27      	ldr	r3, [pc, #156]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192d0:	2200      	movs	r2, #0
 80192d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80192d4:	4b25      	ldr	r3, [pc, #148]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192d6:	2200      	movs	r2, #0
 80192d8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80192da:	4824      	ldr	r0, [pc, #144]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192dc:	f7f4 fb36 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80192e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80192e4:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80192e6:	2300      	movs	r3, #0
 80192e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80192ea:	2300      	movs	r3, #0
 80192ec:	633b      	str	r3, [r7, #48]	; 0x30
	sClockSourceConfig.ClockFilter = 0;
 80192ee:	2300      	movs	r3, #0
 80192f0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 80192f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80192f6:	4619      	mov	r1, r3
 80192f8:	481c      	ldr	r0, [pc, #112]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192fa:	f7f6 fbfd 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 80192fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019302:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8019304:	2330      	movs	r3, #48	; 0x30
 8019306:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8019308:	2300      	movs	r3, #0
 801930a:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 801930c:	2300      	movs	r3, #0
 801930e:	623b      	str	r3, [r7, #32]
	HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig);
 8019310:	f107 0314 	add.w	r3, r7, #20
 8019314:	4619      	mov	r1, r3
 8019316:	4815      	ldr	r0, [pc, #84]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019318:	f7f7 fa8e 	bl	8010838 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801931c:	2300      	movs	r3, #0
 801931e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019320:	2300      	movs	r3, #0
 8019322:	613b      	str	r3, [r7, #16]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8019324:	f107 0308 	add.w	r3, r7, #8
 8019328:	4619      	mov	r1, r3
 801932a:	4810      	ldr	r0, [pc, #64]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 801932c:	f7f9 f9c6 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8019330:	4b0e      	ldr	r3, [pc, #56]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	68da      	ldr	r2, [r3, #12]
 8019336:	4b0d      	ldr	r3, [pc, #52]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801933e:	60da      	str	r2, [r3, #12]

	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019340:	4b0a      	ldr	r3, [pc, #40]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	699a      	ldr	r2, [r3, #24]
 8019346:	4b09      	ldr	r3, [pc, #36]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801934e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 8019350:	4b06      	ldr	r3, [pc, #24]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	699a      	ldr	r2, [r3, #24]
 8019356:	4b05      	ldr	r3, [pc, #20]	; (801936c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	f042 0203 	orr.w	r2, r2, #3
 801935e:	619a      	str	r2, [r3, #24]
}
 8019360:	bf00      	nop
 8019362:	3738      	adds	r7, #56	; 0x38
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}
 8019368:	40021000 	.word	0x40021000
 801936c:	20016500 	.word	0x20016500

08019370 <MX_TIM2_ICorTI_Init>:
 * @note   Time Interval (TI): TIM2 is reset + triggered by an incoming event on the 1st channel. The next incoming event on 2nd channel stores the value of TIM2 to RAM.
 * @param  None
 * @retval None
 */
static void MX_TIM2_ICorTI_Init(void)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b08c      	sub	sp, #48	; 0x30
 8019374:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 8019376:	4b33      	ldr	r3, [pc, #204]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801937c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 801937e:	4b31      	ldr	r3, [pc, #196]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019380:	2200      	movs	r2, #0
 8019382:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019384:	4b2f      	ldr	r3, [pc, #188]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019386:	2200      	movs	r2, #0
 8019388:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 801938a:	4b2e      	ldr	r3, [pc, #184]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 801938c:	f04f 32ff 	mov.w	r2, #4294967295
 8019390:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019392:	4b2c      	ldr	r3, [pc, #176]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019394:	2200      	movs	r2, #0
 8019396:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8019398:	4b2a      	ldr	r3, [pc, #168]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 801939a:	2280      	movs	r2, #128	; 0x80
 801939c:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 801939e:	4829      	ldr	r0, [pc, #164]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193a0:	f7f4 fad4 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80193a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80193a8:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 80193aa:	f107 0320 	add.w	r3, r7, #32
 80193ae:	4619      	mov	r1, r3
 80193b0:	4824      	ldr	r0, [pc, #144]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193b2:	f7f6 fba1 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 80193b6:	4823      	ldr	r0, [pc, #140]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193b8:	f7f5 fa20 	bl	800e7fc <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80193bc:	2300      	movs	r3, #0
 80193be:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80193c0:	2300      	movs	r3, #0
 80193c2:	61fb      	str	r3, [r7, #28]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80193c4:	f107 0314 	add.w	r3, r7, #20
 80193c8:	4619      	mov	r1, r3
 80193ca:	481e      	ldr	r0, [pc, #120]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193cc:	f7f9 f976 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80193d0:	2300      	movs	r3, #0
 80193d2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80193d4:	2301      	movs	r3, #1
 80193d6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80193d8:	2300      	movs	r3, #0
 80193da:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80193dc:	2300      	movs	r3, #0
 80193de:	613b      	str	r3, [r7, #16]
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 80193e0:	1d3b      	adds	r3, r7, #4
 80193e2:	2200      	movs	r2, #0
 80193e4:	4619      	mov	r1, r3
 80193e6:	4817      	ldr	r0, [pc, #92]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193e8:	f7f5 ff60 	bl	800f2ac <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 80193ec:	1d3b      	adds	r3, r7, #4
 80193ee:	2204      	movs	r2, #4
 80193f0:	4619      	mov	r1, r3
 80193f2:	4814      	ldr	r0, [pc, #80]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193f4:	f7f5 ff5a 	bl	800f2ac <HAL_TIM_IC_ConfigChannel>

	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1, IC2 is mapped on TI2	*/
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 80193f8:	4b12      	ldr	r3, [pc, #72]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	699b      	ldr	r3, [r3, #24]
 80193fe:	4a11      	ldr	r2, [pc, #68]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019400:	6812      	ldr	r2, [r2, #0]
 8019402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019406:	f043 0301 	orr.w	r3, r3, #1
 801940a:	6193      	str	r3, [r2, #24]
	/* CC1 channel configured as input: This bit determines if a capture of the counter value can
	 *  actually be done into the input capture/compare register 1 (TIMx_CCR1) or not.  */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 801940c:	4b0d      	ldr	r3, [pc, #52]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	6a1a      	ldr	r2, [r3, #32]
 8019412:	4b0c      	ldr	r3, [pc, #48]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	f042 0211 	orr.w	r2, r2, #17
 801941a:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 801941c:	4b09      	ldr	r3, [pc, #36]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	68da      	ldr	r2, [r3, #12]
 8019422:	4b08      	ldr	r3, [pc, #32]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801942a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 801942c:	4b05      	ldr	r3, [pc, #20]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	68da      	ldr	r2, [r3, #12]
 8019432:	4b04      	ldr	r3, [pc, #16]	; (8019444 <MX_TIM2_ICorTI_Init+0xd4>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801943a:	60da      	str	r2, [r3, #12]
}
 801943c:	bf00      	nop
 801943e:	3730      	adds	r7, #48	; 0x30
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	20016500 	.word	0x20016500

08019448 <TIM2_ETRorREF_MspInit>:

/** @defgroup Counter_Timer_MSPInit_Functions Counter Timer MSP (De)Init Functions
 * @{
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b088      	sub	sp, #32
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019450:	4b2b      	ldr	r3, [pc, #172]	; (8019500 <TIM2_ETRorREF_MspInit+0xb8>)
 8019452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019454:	4a2a      	ldr	r2, [pc, #168]	; (8019500 <TIM2_ETRorREF_MspInit+0xb8>)
 8019456:	f043 0301 	orr.w	r3, r3, #1
 801945a:	6593      	str	r3, [r2, #88]	; 0x58
 801945c:	4b28      	ldr	r3, [pc, #160]	; (8019500 <TIM2_ETRorREF_MspInit+0xb8>)
 801945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019460:	f003 0301 	and.w	r3, r3, #1
 8019464:	60bb      	str	r3, [r7, #8]
 8019466:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_ETR
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8019468:	2301      	movs	r3, #1
 801946a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801946c:	2302      	movs	r3, #2
 801946e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019470:	2300      	movs	r3, #0
 8019472:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8019474:	2302      	movs	r3, #2
 8019476:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8019478:	230e      	movs	r3, #14
 801947a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801947c:	f107 030c 	add.w	r3, r7, #12
 8019480:	4619      	mov	r1, r3
 8019482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019486:	f7f2 fa7f 	bl	800b988 <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 801948a:	4b1e      	ldr	r3, [pc, #120]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 801948c:	4a1e      	ldr	r2, [pc, #120]	; (8019508 <TIM2_ETRorREF_MspInit+0xc0>)
 801948e:	601a      	str	r2, [r3, #0]
	hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8019490:	4b1c      	ldr	r3, [pc, #112]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 8019492:	223c      	movs	r2, #60	; 0x3c
 8019494:	605a      	str	r2, [r3, #4]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8019496:	4b1b      	ldr	r3, [pc, #108]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 8019498:	2200      	movs	r2, #0
 801949a:	609a      	str	r2, [r3, #8]
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801949c:	4b19      	ldr	r3, [pc, #100]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 801949e:	2200      	movs	r2, #0
 80194a0:	60da      	str	r2, [r3, #12]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80194a2:	4b18      	ldr	r3, [pc, #96]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194a4:	2200      	movs	r2, #0
 80194a6:	611a      	str	r2, [r3, #16]
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80194a8:	4b16      	ldr	r3, [pc, #88]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80194ae:	615a      	str	r2, [r3, #20]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80194b0:	4b14      	ldr	r3, [pc, #80]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80194b6:	619a      	str	r2, [r3, #24]
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80194b8:	4b12      	ldr	r3, [pc, #72]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194ba:	2220      	movs	r2, #32
 80194bc:	61da      	str	r2, [r3, #28]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 80194be:	4b11      	ldr	r3, [pc, #68]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80194c4:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_up);
 80194c6:	480f      	ldr	r0, [pc, #60]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194c8:	f7f1 fc2c 	bl	800ad24 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	4a0d      	ldr	r2, [pc, #52]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194d0:	621a      	str	r2, [r3, #32]
 80194d2:	4a0c      	ldr	r2, [pc, #48]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 80194d8:	4a0c      	ldr	r2, [pc, #48]	; (801950c <TIM2_ETRorREF_MspInit+0xc4>)
 80194da:	2100      	movs	r1, #0
 80194dc:	4809      	ldr	r0, [pc, #36]	; (8019504 <TIM2_ETRorREF_MspInit+0xbc>)
 80194de:	f7f2 f911 	bl	800b704 <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 80194e2:	2200      	movs	r2, #0
 80194e4:	2109      	movs	r1, #9
 80194e6:	200c      	movs	r0, #12
 80194e8:	f7f0 fc76 	bl	8009dd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80194ec:	200c      	movs	r0, #12
 80194ee:	f7f0 fc9d 	bl	8009e2c <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 80194f2:	f7eb f9f5 	bl	80048e0 <counterEtrRefSetDefault>
}
 80194f6:	bf00      	nop
 80194f8:	3720      	adds	r7, #32
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	40021000 	.word	0x40021000
 8019504:	200166e0 	.word	0x200166e0
 8019508:	4002001c 	.word	0x4002001c
 801950c:	080041ed 	.word	0x080041ed

08019510 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b088      	sub	sp, #32
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019518:	4b42      	ldr	r3, [pc, #264]	; (8019624 <TIM2_ICorTI_MspInit+0x114>)
 801951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801951c:	4a41      	ldr	r2, [pc, #260]	; (8019624 <TIM2_ICorTI_MspInit+0x114>)
 801951e:	f043 0301 	orr.w	r3, r3, #1
 8019522:	6593      	str	r3, [r2, #88]	; 0x58
 8019524:	4b3f      	ldr	r3, [pc, #252]	; (8019624 <TIM2_ICorTI_MspInit+0x114>)
 8019526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019528:	f003 0301 	and.w	r3, r3, #1
 801952c:	60bb      	str	r3, [r7, #8]
 801952e:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_CH1
	PA1     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019530:	2303      	movs	r3, #3
 8019532:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019534:	2302      	movs	r3, #2
 8019536:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019538:	2300      	movs	r3, #0
 801953a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801953c:	2302      	movs	r3, #2
 801953e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8019540:	2301      	movs	r3, #1
 8019542:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019544:	f107 030c 	add.w	r3, r7, #12
 8019548:	4619      	mov	r1, r3
 801954a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801954e:	f7f2 fa1b 	bl	800b988 <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8019552:	4b35      	ldr	r3, [pc, #212]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019554:	4a35      	ldr	r2, [pc, #212]	; (801962c <TIM2_ICorTI_MspInit+0x11c>)
 8019556:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_TIM2_CH2;
 8019558:	4b33      	ldr	r3, [pc, #204]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 801955a:	2239      	movs	r2, #57	; 0x39
 801955c:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801955e:	4b32      	ldr	r3, [pc, #200]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019560:	2200      	movs	r2, #0
 8019562:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8019564:	4b30      	ldr	r3, [pc, #192]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019566:	2200      	movs	r2, #0
 8019568:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 801956a:	4b31      	ldr	r3, [pc, #196]	; (8019630 <TIM2_ICorTI_MspInit+0x120>)
 801956c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019570:	b2db      	uxtb	r3, r3
 8019572:	2b02      	cmp	r3, #2
 8019574:	d103      	bne.n	801957e <TIM2_ICorTI_MspInit+0x6e>
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8019576:	4b2c      	ldr	r3, [pc, #176]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019578:	2280      	movs	r2, #128	; 0x80
 801957a:	611a      	str	r2, [r3, #16]
 801957c:	e002      	b.n	8019584 <TIM2_ICorTI_MspInit+0x74>
	}else{
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 801957e:	4b2a      	ldr	r3, [pc, #168]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019580:	2200      	movs	r2, #0
 8019582:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8019584:	4b28      	ldr	r3, [pc, #160]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019586:	f44f 7200 	mov.w	r2, #512	; 0x200
 801958a:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801958c:	4b26      	ldr	r3, [pc, #152]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 801958e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019592:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8019594:	4b24      	ldr	r3, [pc, #144]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 8019596:	2200      	movs	r2, #0
 8019598:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 801959a:	4b23      	ldr	r3, [pc, #140]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 801959c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80195a0:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 80195a2:	4821      	ldr	r0, [pc, #132]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 80195a4:	f7f1 fbbe 	bl	800ad24 <HAL_DMA_Init>

	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	4a1f      	ldr	r2, [pc, #124]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 80195ac:	629a      	str	r2, [r3, #40]	; 0x28
 80195ae:	4a1e      	ldr	r2, [pc, #120]	; (8019628 <TIM2_ICorTI_MspInit+0x118>)
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	6293      	str	r3, [r2, #40]	; 0x28
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel6;
 80195b4:	4b1f      	ldr	r3, [pc, #124]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195b6:	4a20      	ldr	r2, [pc, #128]	; (8019638 <TIM2_ICorTI_MspInit+0x128>)
 80195b8:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80195ba:	4b1e      	ldr	r3, [pc, #120]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195bc:	2238      	movs	r2, #56	; 0x38
 80195be:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80195c0:	4b1c      	ldr	r3, [pc, #112]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195c2:	2200      	movs	r2, #0
 80195c4:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80195c6:	4b1b      	ldr	r3, [pc, #108]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195c8:	2200      	movs	r2, #0
 80195ca:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 80195cc:	4b18      	ldr	r3, [pc, #96]	; (8019630 <TIM2_ICorTI_MspInit+0x120>)
 80195ce:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d103      	bne.n	80195e0 <TIM2_ICorTI_MspInit+0xd0>
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80195d8:	4b16      	ldr	r3, [pc, #88]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195da:	2280      	movs	r2, #128	; 0x80
 80195dc:	611a      	str	r2, [r3, #16]
 80195de:	e002      	b.n	80195e6 <TIM2_ICorTI_MspInit+0xd6>
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80195e0:	4b14      	ldr	r3, [pc, #80]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195e2:	2200      	movs	r2, #0
 80195e4:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80195e6:	4b13      	ldr	r3, [pc, #76]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195ec:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80195ee:	4b11      	ldr	r3, [pc, #68]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80195f4:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80195f6:	4b0f      	ldr	r3, [pc, #60]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195f8:	2200      	movs	r2, #0
 80195fa:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80195fc:	4b0d      	ldr	r3, [pc, #52]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 80195fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019602:	621a      	str	r2, [r3, #32]
	//hdma_tim2_ch1.DMAmuxChannel
	HAL_DMA_Init(&hdma_tim2_ch1);
 8019604:	480b      	ldr	r0, [pc, #44]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 8019606:	f7f1 fb8d 	bl	800ad24 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	4a09      	ldr	r2, [pc, #36]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 801960e:	625a      	str	r2, [r3, #36]	; 0x24
 8019610:	4a08      	ldr	r2, [pc, #32]	; (8019634 <TIM2_ICorTI_MspInit+0x124>)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6293      	str	r3, [r2, #40]	; 0x28

	counterIcTiSetDefault();
 8019616:	f7eb f9a7 	bl	8004968 <counterIcTiSetDefault>
}
 801961a:	bf00      	nop
 801961c:	3720      	adds	r7, #32
 801961e:	46bd      	mov	sp, r7
 8019620:	bd80      	pop	{r7, pc}
 8019622:	bf00      	nop
 8019624:	40021000 	.word	0x40021000
 8019628:	20016740 	.word	0x20016740
 801962c:	40020080 	.word	0x40020080
 8019630:	20004570 	.word	0x20004570
 8019634:	20016680 	.word	0x20016680
 8019638:	4002006c 	.word	0x4002006c

0801963c <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b088      	sub	sp, #32
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 8019644:	4b1e      	ldr	r3, [pc, #120]	; (80196c0 <TIM4_REForICorTI_MspInit+0x84>)
 8019646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019648:	4a1d      	ldr	r2, [pc, #116]	; (80196c0 <TIM4_REForICorTI_MspInit+0x84>)
 801964a:	f043 0304 	orr.w	r3, r3, #4
 801964e:	6593      	str	r3, [r2, #88]	; 0x58
 8019650:	4b1b      	ldr	r3, [pc, #108]	; (80196c0 <TIM4_REForICorTI_MspInit+0x84>)
 8019652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019654:	f003 0304 	and.w	r3, r3, #4
 8019658:	60bb      	str	r3, [r7, #8]
 801965a:	68bb      	ldr	r3, [r7, #8]

	if(counter.state==COUNTER_REF){
 801965c:	4b19      	ldr	r3, [pc, #100]	; (80196c4 <TIM4_REForICorTI_MspInit+0x88>)
 801965e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019662:	b2db      	uxtb	r3, r3
 8019664:	2b04      	cmp	r3, #4
 8019666:	d112      	bne.n	801968e <TIM4_REForICorTI_MspInit+0x52>

		/**TIM4 GPIO Configuration
		PA8     ------> TIM4_ETR_REF (as reference)
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8019668:	f44f 7380 	mov.w	r3, #256	; 0x100
 801966c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801966e:	2302      	movs	r3, #2
 8019670:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019672:	2300      	movs	r3, #0
 8019674:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8019676:	2302      	movs	r3, #2
 8019678:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 801967a:	230a      	movs	r3, #10
 801967c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801967e:	f107 030c 	add.w	r3, r7, #12
 8019682:	4619      	mov	r1, r3
 8019684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019688:	f7f2 f97e 	bl	800b988 <HAL_GPIO_Init>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 801968c:	e013      	b.n	80196b6 <TIM4_REForICorTI_MspInit+0x7a>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 801968e:	4b0d      	ldr	r3, [pc, #52]	; (80196c4 <TIM4_REForICorTI_MspInit+0x88>)
 8019690:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019694:	b2db      	uxtb	r3, r3
 8019696:	2b02      	cmp	r3, #2
 8019698:	d005      	beq.n	80196a6 <TIM4_REForICorTI_MspInit+0x6a>
 801969a:	4b0a      	ldr	r3, [pc, #40]	; (80196c4 <TIM4_REForICorTI_MspInit+0x88>)
 801969c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80196a0:	b2db      	uxtb	r3, r3
 80196a2:	2b03      	cmp	r3, #3
 80196a4:	d107      	bne.n	80196b6 <TIM4_REForICorTI_MspInit+0x7a>
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 80196a6:	2200      	movs	r2, #0
 80196a8:	2109      	movs	r1, #9
 80196aa:	201e      	movs	r0, #30
 80196ac:	f7f0 fb94 	bl	8009dd8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80196b0:	201e      	movs	r0, #30
 80196b2:	f7f0 fbbb 	bl	8009e2c <HAL_NVIC_EnableIRQ>
}
 80196b6:	bf00      	nop
 80196b8:	3720      	adds	r7, #32
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	40021000 	.word	0x40021000
 80196c4:	20004570 	.word	0x20004570

080196c8 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_DISABLE();
 80196d0:	4b27      	ldr	r3, [pc, #156]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 80196d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196d4:	4a26      	ldr	r2, [pc, #152]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 80196d6:	f023 0301 	bic.w	r3, r3, #1
 80196da:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 80196dc:	4b25      	ldr	r3, [pc, #148]	; (8019774 <TIM2_CNT_MspDeinit+0xac>)
 80196de:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80196e2:	b2db      	uxtb	r3, r3
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d005      	beq.n	80196f4 <TIM2_CNT_MspDeinit+0x2c>
 80196e8:	4b22      	ldr	r3, [pc, #136]	; (8019774 <TIM2_CNT_MspDeinit+0xac>)
 80196ea:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80196ee:	b2db      	uxtb	r3, r3
 80196f0:	2b04      	cmp	r3, #4
 80196f2:	d111      	bne.n	8019718 <TIM2_CNT_MspDeinit+0x50>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 80196f4:	2101      	movs	r1, #1
 80196f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80196fa:	f7f2 fb9d 	bl	800be38 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 80196fe:	200c      	movs	r0, #12
 8019700:	f7f0 fbac 	bl	8009e5c <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 8019704:	2100      	movs	r1, #0
 8019706:	481c      	ldr	r0, [pc, #112]	; (8019778 <TIM2_CNT_MspDeinit+0xb0>)
 8019708:	f7f2 f846 	bl	800b798 <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	6a1b      	ldr	r3, [r3, #32]
 8019710:	4618      	mov	r0, r3
 8019712:	f7f1 fc9f 	bl	800b054 <HAL_DMA_DeInit>
 8019716:	e01a      	b.n	801974e <TIM2_CNT_MspDeinit+0x86>

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 8019718:	4b16      	ldr	r3, [pc, #88]	; (8019774 <TIM2_CNT_MspDeinit+0xac>)
 801971a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801971e:	b2db      	uxtb	r3, r3
 8019720:	2b02      	cmp	r3, #2
 8019722:	d005      	beq.n	8019730 <TIM2_CNT_MspDeinit+0x68>
 8019724:	4b13      	ldr	r3, [pc, #76]	; (8019774 <TIM2_CNT_MspDeinit+0xac>)
 8019726:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801972a:	b2db      	uxtb	r3, r3
 801972c:	2b03      	cmp	r3, #3
 801972e:	d10e      	bne.n	801974e <TIM2_CNT_MspDeinit+0x86>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8019730:	2103      	movs	r1, #3
 8019732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019736:	f7f2 fb7f 	bl	800be38 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801973e:	4618      	mov	r0, r3
 8019740:	f7f1 fc88 	bl	800b054 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019748:	4618      	mov	r0, r3
 801974a:	f7f1 fc83 	bl	800b054 <HAL_DMA_DeInit>
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 801974e:	4b08      	ldr	r3, [pc, #32]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 8019750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019752:	4a07      	ldr	r2, [pc, #28]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 8019754:	f043 0301 	orr.w	r3, r3, #1
 8019758:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 801975a:	4b05      	ldr	r3, [pc, #20]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 801975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801975e:	4a04      	ldr	r2, [pc, #16]	; (8019770 <TIM2_CNT_MspDeinit+0xa8>)
 8019760:	f023 0301 	bic.w	r3, r3, #1
 8019764:	6393      	str	r3, [r2, #56]	; 0x38
}
 8019766:	bf00      	nop
 8019768:	3708      	adds	r7, #8
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	40021000 	.word	0x40021000
 8019774:	20004570 	.word	0x20004570
 8019778:	200166e0 	.word	0x200166e0

0801977c <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 8019784:	4b1e      	ldr	r3, [pc, #120]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 8019786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019788:	4a1d      	ldr	r2, [pc, #116]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 801978a:	f023 0304 	bic.w	r3, r3, #4
 801978e:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_REF){
 8019790:	4b1c      	ldr	r3, [pc, #112]	; (8019804 <TIM4_CNT_MspDeinit+0x88>)
 8019792:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019796:	b2db      	uxtb	r3, r3
 8019798:	2b04      	cmp	r3, #4
 801979a:	d106      	bne.n	80197aa <TIM4_CNT_MspDeinit+0x2e>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 801979c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80197a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80197a4:	f7f2 fb48 	bl	800be38 <HAL_GPIO_DeInit>
 80197a8:	e01a      	b.n	80197e0 <TIM4_CNT_MspDeinit+0x64>

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 80197aa:	4b16      	ldr	r3, [pc, #88]	; (8019804 <TIM4_CNT_MspDeinit+0x88>)
 80197ac:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197b0:	b2db      	uxtb	r3, r3
 80197b2:	2b02      	cmp	r3, #2
 80197b4:	d005      	beq.n	80197c2 <TIM4_CNT_MspDeinit+0x46>
 80197b6:	4b13      	ldr	r3, [pc, #76]	; (8019804 <TIM4_CNT_MspDeinit+0x88>)
 80197b8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	2b03      	cmp	r3, #3
 80197c0:	d103      	bne.n	80197ca <TIM4_CNT_MspDeinit+0x4e>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80197c2:	201e      	movs	r0, #30
 80197c4:	f7f0 fb4a 	bl	8009e5c <HAL_NVIC_DisableIRQ>
 80197c8:	e00a      	b.n	80197e0 <TIM4_CNT_MspDeinit+0x64>

	}	else if(counter.state==COUNTER_ETR){
 80197ca:	4b0e      	ldr	r3, [pc, #56]	; (8019804 <TIM4_CNT_MspDeinit+0x88>)
 80197cc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197d0:	b2db      	uxtb	r3, r3
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	d104      	bne.n	80197e0 <TIM4_CNT_MspDeinit+0x64>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80197d6:	2101      	movs	r1, #1
 80197d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80197dc:	f7f2 fb2c 	bl	800be38 <HAL_GPIO_DeInit>
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 80197e0:	4b07      	ldr	r3, [pc, #28]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 80197e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197e4:	4a06      	ldr	r2, [pc, #24]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 80197e6:	f043 0304 	orr.w	r3, r3, #4
 80197ea:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 80197ec:	4b04      	ldr	r3, [pc, #16]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 80197ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197f0:	4a03      	ldr	r2, [pc, #12]	; (8019800 <TIM4_CNT_MspDeinit+0x84>)
 80197f2:	f023 0304 	bic.w	r3, r3, #4
 80197f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80197f8:	bf00      	nop
 80197fa:	3708      	adds	r7, #8
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}
 8019800:	40021000 	.word	0x40021000
 8019804:	20004570 	.word	0x20004570

08019808 <COUNTER_PeriodElapsedCallback>:
 * @note	  TIM4 ISR called whenever gate time elapses.
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	691b      	ldr	r3, [r3, #16]
 8019816:	f003 0301 	and.w	r3, r3, #1
 801981a:	2b01      	cmp	r3, #1
 801981c:	d10e      	bne.n	801983c <COUNTER_PeriodElapsedCallback+0x34>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	68db      	ldr	r3, [r3, #12]
 8019824:	f003 0301 	and.w	r3, r3, #1
 8019828:	2b01      	cmp	r3, #1
 801982a:	d107      	bne.n	801983c <COUNTER_PeriodElapsedCallback+0x34>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f06f 0201 	mvn.w	r2, #1
 8019834:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 8019836:	6878      	ldr	r0, [r7, #4]
 8019838:	f7ea fdba 	bl	80043b0 <counterPeriodElapsedCallback>
		}
	}
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <TIM_counter_etr_init>:
 * @brief  Initialize Counter Direct method (ETR input).
 * @note		TIM4 gate time; TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
 8019844:	b580      	push	{r7, lr}
 8019846:	af00      	add	r7, sp, #0
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 8019848:	4b12      	ldr	r3, [pc, #72]	; (8019894 <TIM_counter_etr_init+0x50>)
 801984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801984c:	4a11      	ldr	r2, [pc, #68]	; (8019894 <TIM_counter_etr_init+0x50>)
 801984e:	f043 0301 	orr.w	r3, r3, #1
 8019852:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 8019854:	4b0f      	ldr	r3, [pc, #60]	; (8019894 <TIM_counter_etr_init+0x50>)
 8019856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019858:	4a0e      	ldr	r2, [pc, #56]	; (8019894 <TIM_counter_etr_init+0x50>)
 801985a:	f023 0301 	bic.w	r3, r3, #1
 801985e:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_FORCE_RESET();
 8019860:	4b0c      	ldr	r3, [pc, #48]	; (8019894 <TIM_counter_etr_init+0x50>)
 8019862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019864:	4a0b      	ldr	r2, [pc, #44]	; (8019894 <TIM_counter_etr_init+0x50>)
 8019866:	f043 0304 	orr.w	r3, r3, #4
 801986a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801986c:	4b09      	ldr	r3, [pc, #36]	; (8019894 <TIM_counter_etr_init+0x50>)
 801986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019870:	4a08      	ldr	r2, [pc, #32]	; (8019894 <TIM_counter_etr_init+0x50>)
 8019872:	f023 0304 	bic.w	r3, r3, #4
 8019876:	6393      	str	r3, [r2, #56]	; 0x38

	TIM_doubleClockVal();
 8019878:	f000 f830 	bl	80198dc <TIM_doubleClockVal>
	MX_TIM4_Init();
 801987c:	f7ff fc7c 	bl	8019178 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 8019880:	f7ff fd08 	bl	8019294 <MX_TIM2_ETRorREF_Init>
	counter.tim4PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8019884:	f7f3 fb48 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 8019888:	4602      	mov	r2, r0
 801988a:	4b03      	ldr	r3, [pc, #12]	; (8019898 <TIM_counter_etr_init+0x54>)
 801988c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8019890:	bf00      	nop
 8019892:	bd80      	pop	{r7, pc}
 8019894:	40021000 	.word	0x40021000
 8019898:	20004570 	.word	0x20004570

0801989c <TIM_counter_ref_init>:
 * @note		TIM4 counts predefined number of ticks of an external signal (gate opened).
 * @note 	TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_ref_init(void){
 801989c:	b580      	push	{r7, lr}
 801989e:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198a0:	f000 f81c 	bl	80198dc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198a4:	f7ff fc68 	bl	8019178 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 80198a8:	f7ff fcf4 	bl	8019294 <MX_TIM2_ETRorREF_Init>
}
 80198ac:	bf00      	nop
 80198ae:	bd80      	pop	{r7, pc}

080198b0 <TIM_counter_ic_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 counting and storing time (count) of an incomming edge to the memory.
 * @params None
 * @retval None
 */
void TIM_counter_ic_init(void){
 80198b0:	b580      	push	{r7, lr}
 80198b2:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198b4:	f000 f812 	bl	80198dc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198b8:	f7ff fc5e 	bl	8019178 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 80198bc:	f7ff fd58 	bl	8019370 <MX_TIM2_ICorTI_Init>
}
 80198c0:	bf00      	nop
 80198c2:	bd80      	pop	{r7, pc}

080198c4 <TIM_counter_ti_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 triggered by 1st channel event. The 2nd channel stores the time of incoming 2nd event.
 * @params None
 * @retval None
 */
void TIM_counter_ti_init(void){
 80198c4:	b580      	push	{r7, lr}
 80198c6:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198c8:	f000 f808 	bl	80198dc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198cc:	f7ff fc54 	bl	8019178 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 80198d0:	f7ff fd4e 	bl	8019370 <MX_TIM2_ICorTI_Init>
	TIM_TI_Init();
 80198d4:	f000 fa0a 	bl	8019cec <TIM_TI_Init>
}
 80198d8:	bf00      	nop
 80198da:	bd80      	pop	{r7, pc}

080198dc <TIM_doubleClockVal>:
 * @brief  Overclocks / doubles TIM2 peripheral frequency for Counter.
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
 80198dc:	b580      	push	{r7, lr}
 80198de:	af00      	add	r7, sp, #0
//	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
	//	counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();// HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
//	}	else {
		counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 80198e0:	f7f3 fb1a 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 80198e4:	4602      	mov	r2, r0
 80198e6:	4b02      	ldr	r3, [pc, #8]	; (80198f0 <TIM_doubleClockVal+0x14>)
 80198e8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	//}
}
 80198ec:	bf00      	nop
 80198ee:	bd80      	pop	{r7, pc}
 80198f0:	20004570 	.word	0x20004570

080198f4 <TIM_etr_deinit>:
/**
 * @brief  Deinits Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_etr_deinit(void){
 80198f4:	b580      	push	{r7, lr}
 80198f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 80198f8:	4803      	ldr	r0, [pc, #12]	; (8019908 <TIM_etr_deinit+0x14>)
 80198fa:	f7f4 f8f1 	bl	800dae0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 80198fe:	4803      	ldr	r0, [pc, #12]	; (801990c <TIM_etr_deinit+0x18>)
 8019900:	f7f4 f8ee 	bl	800dae0 <HAL_TIM_Base_DeInit>
}
 8019904:	bf00      	nop
 8019906:	bd80      	pop	{r7, pc}
 8019908:	20016500 	.word	0x20016500
 801990c:	200161b4 	.word	0x200161b4

08019910 <TIM_ref_deinit>:
/**
 * @brief  Deinits Counter Reference method.
 * @params None
 * @retval None
 */
void TIM_ref_deinit(void){
 8019910:	b580      	push	{r7, lr}
 8019912:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019914:	4803      	ldr	r0, [pc, #12]	; (8019924 <TIM_ref_deinit+0x14>)
 8019916:	f7f4 f8e3 	bl	800dae0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 801991a:	4803      	ldr	r0, [pc, #12]	; (8019928 <TIM_ref_deinit+0x18>)
 801991c:	f7f4 f8e0 	bl	800dae0 <HAL_TIM_Base_DeInit>
}
 8019920:	bf00      	nop
 8019922:	bd80      	pop	{r7, pc}
 8019924:	20016500 	.word	0x20016500
 8019928:	200161b4 	.word	0x200161b4

0801992c <TIM_ic_deinit>:
/**
 * @brief  Deinits Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_ic_deinit(void){
 801992c:	b580      	push	{r7, lr}
 801992e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019930:	4803      	ldr	r0, [pc, #12]	; (8019940 <TIM_ic_deinit+0x14>)
 8019932:	f7f4 f8d5 	bl	800dae0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019936:	4803      	ldr	r0, [pc, #12]	; (8019944 <TIM_ic_deinit+0x18>)
 8019938:	f7f4 f8d2 	bl	800dae0 <HAL_TIM_Base_DeInit>
}
 801993c:	bf00      	nop
 801993e:	bd80      	pop	{r7, pc}
 8019940:	20016500 	.word	0x20016500
 8019944:	200161b4 	.word	0x200161b4

08019948 <TIM_ti_deinit>:
/**
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_ti_deinit(void){
 8019948:	b580      	push	{r7, lr}
 801994a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 801994c:	4804      	ldr	r0, [pc, #16]	; (8019960 <TIM_ti_deinit+0x18>)
 801994e:	f7f4 f8c7 	bl	800dae0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019952:	4804      	ldr	r0, [pc, #16]	; (8019964 <TIM_ti_deinit+0x1c>)
 8019954:	f7f4 f8c4 	bl	800dae0 <HAL_TIM_Base_DeInit>
	TIM_TI_Deinit();
 8019958:	f000 fa2a 	bl	8019db0 <TIM_TI_Deinit>
}
 801995c:	bf00      	nop
 801995e:	bd80      	pop	{r7, pc}
 8019960:	20016500 	.word	0x20016500
 8019964:	200161b4 	.word	0x200161b4

08019968 <TIM_ETR_Start>:
 * @brief  Starts Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Start(void)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 801996c:	4814      	ldr	r0, [pc, #80]	; (80199c0 <TIM_ETR_Start+0x58>)
 801996e:	f7f4 f94b 	bl	800dc08 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8019972:	4814      	ldr	r0, [pc, #80]	; (80199c4 <TIM_ETR_Start+0x5c>)
 8019974:	f7f4 f948 	bl	800dc08 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 8019978:	4b11      	ldr	r3, [pc, #68]	; (80199c0 <TIM_ETR_Start+0x58>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	3334      	adds	r3, #52	; 0x34
 801997e:	4619      	mov	r1, r3
 8019980:	4a11      	ldr	r2, [pc, #68]	; (80199c8 <TIM_ETR_Start+0x60>)
 8019982:	2301      	movs	r3, #1
 8019984:	4811      	ldr	r0, [pc, #68]	; (80199cc <TIM_ETR_Start+0x64>)
 8019986:	f7f1 fcc3 	bl	800b310 <HAL_DMA_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 801998a:	4b0d      	ldr	r3, [pc, #52]	; (80199c0 <TIM_ETR_Start+0x58>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	68da      	ldr	r2, [r3, #12]
 8019990:	4b0b      	ldr	r3, [pc, #44]	; (80199c0 <TIM_ETR_Start+0x58>)
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019998:	60da      	str	r2, [r3, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801999a:	4b09      	ldr	r3, [pc, #36]	; (80199c0 <TIM_ETR_Start+0x58>)
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	2201      	movs	r2, #1
 80199a0:	2100      	movs	r1, #0
 80199a2:	4618      	mov	r0, r3
 80199a4:	f7f8 fd98 	bl	80124d8 <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 80199a8:	4b06      	ldr	r3, [pc, #24]	; (80199c4 <TIM_ETR_Start+0x5c>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7ff fbd3 	bl	8019158 <LL_TIM_GenerateEvent_UPDATE>

	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80199b2:	4b07      	ldr	r3, [pc, #28]	; (80199d0 <TIM_ETR_Start+0x68>)
 80199b4:	2200      	movs	r2, #0
 80199b6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80199ba:	bf00      	nop
 80199bc:	bd80      	pop	{r7, pc}
 80199be:	bf00      	nop
 80199c0:	20016500 	.word	0x20016500
 80199c4:	200161b4 	.word	0x200161b4
 80199c8:	20004914 	.word	0x20004914
 80199cc:	200166e0 	.word	0x200166e0
 80199d0:	20004570 	.word	0x20004570

080199d4 <TIM_ETR_Stop>:
 * @brief  Stops Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Stop(void)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Stop_DMA(&htim2);
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 80199d8:	4809      	ldr	r0, [pc, #36]	; (8019a00 <TIM_ETR_Stop+0x2c>)
 80199da:	f7f1 fd7c 	bl	800b4d6 <HAL_DMA_Abort_IT>
	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80199de:	4b09      	ldr	r3, [pc, #36]	; (8019a04 <TIM_ETR_Stop+0x30>)
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	68da      	ldr	r2, [r3, #12]
 80199e4:	4b07      	ldr	r3, [pc, #28]	; (8019a04 <TIM_ETR_Stop+0x30>)
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80199ec:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Stop(&htim2);
 80199ee:	4805      	ldr	r0, [pc, #20]	; (8019a04 <TIM_ETR_Stop+0x30>)
 80199f0:	f7f4 f98c 	bl	800dd0c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 80199f4:	4804      	ldr	r0, [pc, #16]	; (8019a08 <TIM_ETR_Stop+0x34>)
 80199f6:	f7f4 f989 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 80199fa:	bf00      	nop
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	200166e0 	.word	0x200166e0
 8019a04:	20016500 	.word	0x20016500
 8019a08:	200161b4 	.word	0x200161b4

08019a0c <TIM_IC_Start>:
 * @brief  Starts Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Start(void)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	af00      	add	r7, sp, #0
	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019a10:	4b1a      	ldr	r3, [pc, #104]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	68da      	ldr	r2, [r3, #12]
 8019a16:	4b19      	ldr	r3, [pc, #100]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a1e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019a20:	4b16      	ldr	r3, [pc, #88]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	68da      	ldr	r2, [r3, #12]
 8019a26:	4b15      	ldr	r3, [pc, #84]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019a2e:	60da      	str	r2, [r3, #12]

	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8019a30:	4b12      	ldr	r3, [pc, #72]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	3334      	adds	r3, #52	; 0x34
 8019a36:	4619      	mov	r1, r3
 8019a38:	4a11      	ldr	r2, [pc, #68]	; (8019a80 <TIM_IC_Start+0x74>)
 8019a3a:	4b12      	ldr	r3, [pc, #72]	; (8019a84 <TIM_IC_Start+0x78>)
 8019a3c:	88db      	ldrh	r3, [r3, #6]
 8019a3e:	b29b      	uxth	r3, r3
 8019a40:	4811      	ldr	r0, [pc, #68]	; (8019a88 <TIM_IC_Start+0x7c>)
 8019a42:	f7f1 fc13 	bl	800b26c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8019a46:	4b0d      	ldr	r3, [pc, #52]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	3338      	adds	r3, #56	; 0x38
 8019a4c:	4619      	mov	r1, r3
 8019a4e:	4a0f      	ldr	r2, [pc, #60]	; (8019a8c <TIM_IC_Start+0x80>)
 8019a50:	4b0c      	ldr	r3, [pc, #48]	; (8019a84 <TIM_IC_Start+0x78>)
 8019a52:	891b      	ldrh	r3, [r3, #8]
 8019a54:	b29b      	uxth	r3, r3
 8019a56:	480e      	ldr	r0, [pc, #56]	; (8019a90 <TIM_IC_Start+0x84>)
 8019a58:	f7f1 fc08 	bl	800b26c <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 8019a5c:	4807      	ldr	r0, [pc, #28]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a5e:	f7f4 f8d3 	bl	800dc08 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8019a62:	480c      	ldr	r0, [pc, #48]	; (8019a94 <TIM_IC_Start+0x88>)
 8019a64:	f7f4 f9d4 	bl	800de10 <HAL_TIM_Base_Start_IT>

	/* Enable capturing on both channels */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019a68:	4b04      	ldr	r3, [pc, #16]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	6a1a      	ldr	r2, [r3, #32]
 8019a6e:	4b03      	ldr	r3, [pc, #12]	; (8019a7c <TIM_IC_Start+0x70>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	f042 0211 	orr.w	r2, r2, #17
 8019a76:	621a      	str	r2, [r3, #32]
}
 8019a78:	bf00      	nop
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	20016500 	.word	0x20016500
 8019a80:	20004580 	.word	0x20004580
 8019a84:	20004570 	.word	0x20004570
 8019a88:	20016680 	.word	0x20016680
 8019a8c:	20004738 	.word	0x20004738
 8019a90:	20016740 	.word	0x20016740
 8019a94:	200161b4 	.word	0x200161b4

08019a98 <TIM_IC_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Stop(void)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	af00      	add	r7, sp, #0
	/* Disable capturing */
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019a9c:	4b12      	ldr	r3, [pc, #72]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	6a1a      	ldr	r2, [r3, #32]
 8019aa2:	4b11      	ldr	r3, [pc, #68]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	f022 0211 	bic.w	r2, r2, #17
 8019aaa:	621a      	str	r2, [r3, #32]

	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019aac:	480f      	ldr	r0, [pc, #60]	; (8019aec <TIM_IC_Stop+0x54>)
 8019aae:	f7f1 fcb9 	bl	800b424 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019ab2:	480f      	ldr	r0, [pc, #60]	; (8019af0 <TIM_IC_Stop+0x58>)
 8019ab4:	f7f1 fcb6 	bl	800b424 <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019ab8:	4b0b      	ldr	r3, [pc, #44]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	68da      	ldr	r2, [r3, #12]
 8019abe:	4b0a      	ldr	r3, [pc, #40]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019ac6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8019ac8:	4b07      	ldr	r3, [pc, #28]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	68da      	ldr	r2, [r3, #12]
 8019ace:	4b06      	ldr	r3, [pc, #24]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019ad6:	60da      	str	r2, [r3, #12]

	/* Stop timers */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019ad8:	4806      	ldr	r0, [pc, #24]	; (8019af4 <TIM_IC_Stop+0x5c>)
 8019ada:	f7f4 fa1b 	bl	800df14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8019ade:	4802      	ldr	r0, [pc, #8]	; (8019ae8 <TIM_IC_Stop+0x50>)
 8019ae0:	f7f4 f914 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 8019ae4:	bf00      	nop
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	20016500 	.word	0x20016500
 8019aec:	20016680 	.word	0x20016680
 8019af0:	20016740 	.word	0x20016740
 8019af4:	200161b4 	.word	0x200161b4

08019af8 <TIM_TI_Start>:
 * @brief  Starts Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Start(void)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	af00      	add	r7, sp, #0
	/* Get systick value to handle timeout */
	xStartTime = xTaskGetTickCount();
 8019afc:	f7fc f918 	bl	8015d30 <xTaskGetTickCount>
 8019b00:	4602      	mov	r2, r0
 8019b02:	4b54      	ldr	r3, [pc, #336]	; (8019c54 <TIM_TI_Start+0x15c>)
 8019b04:	601a      	str	r2, [r3, #0]
				It's nice, but if two quick consecutive edges come and the DMA transfer enabling capturing is not
				processed yet, the edge is not captured.
	 */

	/* Set DMA CNDTR buffer count */
	if(counter.abba == BIN1){
 8019b06:	4b54      	ldr	r3, [pc, #336]	; (8019c58 <TIM_TI_Start+0x160>)
 8019b08:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8019b0c:	b2db      	uxtb	r3, r3
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d13d      	bne.n	8019b8e <TIM_TI_Start+0x96>
		/* Set DMA to transfer time of event on channel 1 after TIM CNT is reset by an event on channel 2 */
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019b12:	4b52      	ldr	r3, [pc, #328]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	3334      	adds	r3, #52	; 0x34
 8019b18:	4619      	mov	r1, r3
 8019b1a:	4a51      	ldr	r2, [pc, #324]	; (8019c60 <TIM_TI_Start+0x168>)
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	4851      	ldr	r0, [pc, #324]	; (8019c64 <TIM_TI_Start+0x16c>)
 8019b20:	f7f1 fba4 	bl	800b26c <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8019b24:	4b4c      	ldr	r3, [pc, #304]	; (8019c58 <TIM_TI_Start+0x160>)
 8019b26:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019b2a:	b2db      	uxtb	r3, r3
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d16b      	bne.n	8019c08 <TIM_TI_Start+0x110>
			if(counter.eventChan1==EVENT_FALLING){
 8019b30:	4b49      	ldr	r3, [pc, #292]	; (8019c58 <TIM_TI_Start+0x160>)
 8019b32:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	2b01      	cmp	r3, #1
 8019b3a:	d106      	bne.n	8019b4a <TIM_TI_Start+0x52>
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 8019b3c:	4b4a      	ldr	r3, [pc, #296]	; (8019c68 <TIM_TI_Start+0x170>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f043 0302 	orr.w	r3, r3, #2
 8019b44:	4a48      	ldr	r2, [pc, #288]	; (8019c68 <TIM_TI_Start+0x170>)
 8019b46:	6013      	str	r3, [r2, #0]
 8019b48:	e005      	b.n	8019b56 <TIM_TI_Start+0x5e>
			}else{
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 8019b4a:	4b47      	ldr	r3, [pc, #284]	; (8019c68 <TIM_TI_Start+0x170>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	f023 0302 	bic.w	r3, r3, #2
 8019b52:	4a45      	ldr	r2, [pc, #276]	; (8019c68 <TIM_TI_Start+0x170>)
 8019b54:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 8019b56:	f000 fd93 	bl	801a680 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 1 after an event comes on channel 2. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8019b5a:	4943      	ldr	r1, [pc, #268]	; (8019c68 <TIM_TI_Start+0x170>)
 8019b5c:	4b3f      	ldr	r3, [pc, #252]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	3320      	adds	r3, #32
 8019b62:	461a      	mov	r2, r3
 8019b64:	2301      	movs	r3, #1
 8019b66:	4841      	ldr	r0, [pc, #260]	; (8019c6c <TIM_TI_Start+0x174>)
 8019b68:	f7f1 fb80 	bl	800b26c <HAL_DMA_Start>
			/* Disable Capturing on channel 1 to be enabled later after an event on channel 2 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019b6c:	4b3b      	ldr	r3, [pc, #236]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	6a1a      	ldr	r2, [r3, #32]
 8019b72:	4b3a      	ldr	r3, [pc, #232]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	f022 0201 	bic.w	r2, r2, #1
 8019b7a:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 2. */
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 8019b7c:	4b37      	ldr	r3, [pc, #220]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	6a1a      	ldr	r2, [r3, #32]
 8019b82:	4b36      	ldr	r3, [pc, #216]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	f042 0210 	orr.w	r2, r2, #16
 8019b8a:	621a      	str	r2, [r3, #32]
 8019b8c:	e03c      	b.n	8019c08 <TIM_TI_Start+0x110>
		}

	}else{
		/* Set DMA to transfer time of event on channel 2 after TIM CNT is reset by an event on channel 1 */
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019b8e:	4b33      	ldr	r3, [pc, #204]	; (8019c5c <TIM_TI_Start+0x164>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	3338      	adds	r3, #56	; 0x38
 8019b94:	4619      	mov	r1, r3
 8019b96:	4a36      	ldr	r2, [pc, #216]	; (8019c70 <TIM_TI_Start+0x178>)
 8019b98:	2301      	movs	r3, #1
 8019b9a:	4834      	ldr	r0, [pc, #208]	; (8019c6c <TIM_TI_Start+0x174>)
 8019b9c:	f7f1 fb66 	bl	800b26c <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8019ba0:	4b2d      	ldr	r3, [pc, #180]	; (8019c58 <TIM_TI_Start+0x160>)
 8019ba2:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d12d      	bne.n	8019c08 <TIM_TI_Start+0x110>
			if(counter.eventChan2==EVENT_FALLING){
 8019bac:	4b2a      	ldr	r3, [pc, #168]	; (8019c58 <TIM_TI_Start+0x160>)
 8019bae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d106      	bne.n	8019bc6 <TIM_TI_Start+0xce>
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 8019bb8:	4b2e      	ldr	r3, [pc, #184]	; (8019c74 <TIM_TI_Start+0x17c>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f043 0320 	orr.w	r3, r3, #32
 8019bc0:	4a2c      	ldr	r2, [pc, #176]	; (8019c74 <TIM_TI_Start+0x17c>)
 8019bc2:	6013      	str	r3, [r2, #0]
 8019bc4:	e005      	b.n	8019bd2 <TIM_TI_Start+0xda>
			}else{
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 8019bc6:	4b2b      	ldr	r3, [pc, #172]	; (8019c74 <TIM_TI_Start+0x17c>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	f023 0320 	bic.w	r3, r3, #32
 8019bce:	4a29      	ldr	r2, [pc, #164]	; (8019c74 <TIM_TI_Start+0x17c>)
 8019bd0:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 8019bd2:	f000 fd55 	bl	801a680 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 2 after an event comes on channel 1. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8019bd6:	4927      	ldr	r1, [pc, #156]	; (8019c74 <TIM_TI_Start+0x17c>)
 8019bd8:	4b20      	ldr	r3, [pc, #128]	; (8019c5c <TIM_TI_Start+0x164>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	3320      	adds	r3, #32
 8019bde:	461a      	mov	r2, r3
 8019be0:	2301      	movs	r3, #1
 8019be2:	4820      	ldr	r0, [pc, #128]	; (8019c64 <TIM_TI_Start+0x16c>)
 8019be4:	f7f1 fb42 	bl	800b26c <HAL_DMA_Start>
			/* Disable Capturing on channel 2 to be enabled later after an event on channel 1 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019be8:	4b1c      	ldr	r3, [pc, #112]	; (8019c5c <TIM_TI_Start+0x164>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	6a1a      	ldr	r2, [r3, #32]
 8019bee:	4b1b      	ldr	r3, [pc, #108]	; (8019c5c <TIM_TI_Start+0x164>)
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	f022 0210 	bic.w	r2, r2, #16
 8019bf6:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 1. */
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 8019bf8:	4b18      	ldr	r3, [pc, #96]	; (8019c5c <TIM_TI_Start+0x164>)
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	6a1a      	ldr	r2, [r3, #32]
 8019bfe:	4b17      	ldr	r3, [pc, #92]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f042 0201 	orr.w	r2, r2, #1
 8019c06:	621a      	str	r2, [r3, #32]
		}
	}

	/* TIM2 is used as time base for time capturing. */
	HAL_TIM_Base_Start(&htim2);
 8019c08:	4814      	ldr	r0, [pc, #80]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c0a:	f7f3 fffd 	bl	800dc08 <HAL_TIM_Base_Start>
	/* TIM4 is used for time elapse event to check whether already the required data is transfered. */
	HAL_TIM_Base_Start_IT(&htim4);
 8019c0e:	481a      	ldr	r0, [pc, #104]	; (8019c78 <TIM_TI_Start+0x180>)
 8019c10:	f7f4 f8fe 	bl	800de10 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019c14:	4b11      	ldr	r3, [pc, #68]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	68da      	ldr	r2, [r3, #12]
 8019c1a:	4b10      	ldr	r3, [pc, #64]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c22:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019c24:	4b0d      	ldr	r3, [pc, #52]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	68da      	ldr	r2, [r3, #12]
 8019c2a:	4b0c      	ldr	r3, [pc, #48]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019c32:	60da      	str	r2, [r3, #12]

	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 8019c34:	4b08      	ldr	r3, [pc, #32]	; (8019c58 <TIM_TI_Start+0x160>)
 8019c36:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019c3a:	b2db      	uxtb	r3, r3
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d007      	beq.n	8019c50 <TIM_TI_Start+0x158>
		/* Enable capturing */
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019c40:	4b06      	ldr	r3, [pc, #24]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	6a1a      	ldr	r2, [r3, #32]
 8019c46:	4b05      	ldr	r3, [pc, #20]	; (8019c5c <TIM_TI_Start+0x164>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	f042 0211 	orr.w	r2, r2, #17
 8019c4e:	621a      	str	r2, [r3, #32]
	}
}
 8019c50:	bf00      	nop
 8019c52:	bd80      	pop	{r7, pc}
 8019c54:	20004568 	.word	0x20004568
 8019c58:	20004570 	.word	0x20004570
 8019c5c:	20016500 	.word	0x20016500
 8019c60:	20004580 	.word	0x20004580
 8019c64:	20016680 	.word	0x20016680
 8019c68:	200000d4 	.word	0x200000d4
 8019c6c:	20016740 	.word	0x20016740
 8019c70:	20004738 	.word	0x20004738
 8019c74:	200000d8 	.word	0x200000d8
 8019c78:	200161b4 	.word	0x200161b4

08019c7c <TIM_TI_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_TI_Stop(void)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019c80:	4816      	ldr	r0, [pc, #88]	; (8019cdc <TIM_TI_Stop+0x60>)
 8019c82:	f7f1 fbcf 	bl	800b424 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019c86:	4816      	ldr	r0, [pc, #88]	; (8019ce0 <TIM_TI_Stop+0x64>)
 8019c88:	f7f1 fbcc 	bl	800b424 <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	HAL_TIM_Base_Stop_IT(&htim4);
 8019c8c:	4815      	ldr	r0, [pc, #84]	; (8019ce4 <TIM_TI_Stop+0x68>)
 8019c8e:	f7f4 f941 	bl	800df14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8019c92:	4815      	ldr	r0, [pc, #84]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019c94:	f7f4 f83a 	bl	800dd0c <HAL_TIM_Base_Stop>

	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019c98:	4b13      	ldr	r3, [pc, #76]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	6a1a      	ldr	r2, [r3, #32]
 8019c9e:	4b12      	ldr	r3, [pc, #72]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f022 0201 	bic.w	r2, r2, #1
 8019ca6:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019ca8:	4b0f      	ldr	r3, [pc, #60]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	6a1a      	ldr	r2, [r3, #32]
 8019cae:	4b0e      	ldr	r3, [pc, #56]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	f022 0210 	bic.w	r2, r2, #16
 8019cb6:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019cb8:	4b0b      	ldr	r3, [pc, #44]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	68da      	ldr	r2, [r3, #12]
 8019cbe:	4b0a      	ldr	r3, [pc, #40]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8019cc8:	4b07      	ldr	r3, [pc, #28]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	68da      	ldr	r2, [r3, #12]
 8019cce:	4b06      	ldr	r3, [pc, #24]	; (8019ce8 <TIM_TI_Stop+0x6c>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019cd6:	60da      	str	r2, [r3, #12]
}
 8019cd8:	bf00      	nop
 8019cda:	bd80      	pop	{r7, pc}
 8019cdc:	20016680 	.word	0x20016680
 8019ce0:	20016740 	.word	0x20016740
 8019ce4:	200161b4 	.word	0x200161b4
 8019ce8:	20016500 	.word	0x20016500

08019cec <TIM_TI_Init>:
 * @brief  Initializes Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Init(void)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	af00      	add	r7, sp, #0
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 8019cf0:	4b2c      	ldr	r3, [pc, #176]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	681a      	ldr	r2, [r3, #0]
 8019cf6:	4b2b      	ldr	r3, [pc, #172]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	f022 0201 	bic.w	r2, r2, #1
 8019cfe:	601a      	str	r2, [r3, #0]
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019d00:	4829      	ldr	r0, [pc, #164]	; (8019da8 <TIM_TI_Init+0xbc>)
 8019d02:	f7f4 f907 	bl	800df14 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019d06:	4b27      	ldr	r3, [pc, #156]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	6a1a      	ldr	r2, [r3, #32]
 8019d0c:	4b25      	ldr	r3, [pc, #148]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f022 0201 	bic.w	r2, r2, #1
 8019d14:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019d16:	4b23      	ldr	r3, [pc, #140]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	6a1a      	ldr	r2, [r3, #32]
 8019d1c:	4b21      	ldr	r3, [pc, #132]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	f022 0210 	bic.w	r2, r2, #16
 8019d24:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019d26:	4b1f      	ldr	r3, [pc, #124]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	699a      	ldr	r2, [r3, #24]
 8019d2c:	4b1d      	ldr	r3, [pc, #116]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	f022 020c 	bic.w	r2, r2, #12
 8019d34:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019d36:	4b1b      	ldr	r3, [pc, #108]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	699a      	ldr	r2, [r3, #24]
 8019d3c:	4b19      	ldr	r3, [pc, #100]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019d44:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019d46:	4b17      	ldr	r3, [pc, #92]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	689b      	ldr	r3, [r3, #8]
 8019d4c:	4a15      	ldr	r2, [pc, #84]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d4e:	6812      	ldr	r2, [r2, #0]
 8019d50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019d58:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019d5a:	4b12      	ldr	r3, [pc, #72]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	689a      	ldr	r2, [r3, #8]
 8019d60:	4b10      	ldr	r3, [pc, #64]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019d68:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019d6a:	4b0e      	ldr	r3, [pc, #56]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	689b      	ldr	r3, [r3, #8]
 8019d70:	4a0c      	ldr	r2, [pc, #48]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d72:	6812      	ldr	r2, [r2, #0]
 8019d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019d78:	f023 0307 	bic.w	r3, r3, #7
 8019d7c:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 8019d7e:	4b09      	ldr	r3, [pc, #36]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	689a      	ldr	r2, [r3, #8]
 8019d84:	4b07      	ldr	r3, [pc, #28]	; (8019da4 <TIM_TI_Init+0xb8>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019d8c:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 8019d8e:	4b07      	ldr	r3, [pc, #28]	; (8019dac <TIM_TI_Init+0xc0>)
 8019d90:	2200      	movs	r2, #0
 8019d92:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 8019d96:	4b05      	ldr	r3, [pc, #20]	; (8019dac <TIM_TI_Init+0xc0>)
 8019d98:	2200      	movs	r2, #0
 8019d9a:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 8019d9e:	bf00      	nop
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	20016500 	.word	0x20016500
 8019da8:	200161b4 	.word	0x200161b4
 8019dac:	20004570 	.word	0x20004570

08019db0 <TIM_TI_Deinit>:
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Deinit(void)
{
 8019db0:	b480      	push	{r7}
 8019db2:	af00      	add	r7, sp, #0
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019db4:	4b1c      	ldr	r3, [pc, #112]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6a1a      	ldr	r2, [r3, #32]
 8019dba:	4b1b      	ldr	r3, [pc, #108]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	f022 0201 	bic.w	r2, r2, #1
 8019dc2:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019dc4:	4b18      	ldr	r3, [pc, #96]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	6a1a      	ldr	r2, [r3, #32]
 8019dca:	4b17      	ldr	r3, [pc, #92]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	f022 0210 	bic.w	r2, r2, #16
 8019dd2:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019dd4:	4b14      	ldr	r3, [pc, #80]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	6a1a      	ldr	r2, [r3, #32]
 8019dda:	4b13      	ldr	r3, [pc, #76]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	f022 020a 	bic.w	r2, r2, #10
 8019de2:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019de4:	4b10      	ldr	r3, [pc, #64]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	6a1a      	ldr	r2, [r3, #32]
 8019dea:	4b0f      	ldr	r3, [pc, #60]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019df2:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019df4:	4b0c      	ldr	r3, [pc, #48]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	689b      	ldr	r3, [r3, #8]
 8019dfa:	4a0b      	ldr	r2, [pc, #44]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019dfc:	6812      	ldr	r2, [r2, #0]
 8019dfe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e06:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019e08:	4b07      	ldr	r3, [pc, #28]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	689b      	ldr	r3, [r3, #8]
 8019e0e:	4a06      	ldr	r2, [pc, #24]	; (8019e28 <TIM_TI_Deinit+0x78>)
 8019e10:	6812      	ldr	r2, [r2, #0]
 8019e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019e16:	f023 0307 	bic.w	r3, r3, #7
 8019e1a:	6093      	str	r3, [r2, #8]
}
 8019e1c:	bf00      	nop
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e24:	4770      	bx	lr
 8019e26:	bf00      	nop
 8019e28:	20016500 	.word	0x20016500

08019e2c <TIM_IC_DutyCycleDmaRestart>:
 * @brief  Reconfigures DMA for duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycleDmaRestart(void)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019e30:	480c      	ldr	r0, [pc, #48]	; (8019e64 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019e32:	f7f1 faf7 	bl	800b424 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019e36:	480c      	ldr	r0, [pc, #48]	; (8019e68 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019e38:	f7f1 faf4 	bl	800b424 <HAL_DMA_Abort>

	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019e3c:	4b0b      	ldr	r3, [pc, #44]	; (8019e6c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	3334      	adds	r3, #52	; 0x34
 8019e42:	4619      	mov	r1, r3
 8019e44:	4a0a      	ldr	r2, [pc, #40]	; (8019e70 <TIM_IC_DutyCycleDmaRestart+0x44>)
 8019e46:	2301      	movs	r3, #1
 8019e48:	4806      	ldr	r0, [pc, #24]	; (8019e64 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019e4a:	f7f1 fa0f 	bl	800b26c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019e4e:	4b07      	ldr	r3, [pc, #28]	; (8019e6c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	3338      	adds	r3, #56	; 0x38
 8019e54:	4619      	mov	r1, r3
 8019e56:	4a07      	ldr	r2, [pc, #28]	; (8019e74 <TIM_IC_DutyCycleDmaRestart+0x48>)
 8019e58:	2301      	movs	r3, #1
 8019e5a:	4803      	ldr	r0, [pc, #12]	; (8019e68 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019e5c:	f7f1 fa06 	bl	800b26c <HAL_DMA_Start>
}
 8019e60:	bf00      	nop
 8019e62:	bd80      	pop	{r7, pc}
 8019e64:	20016680 	.word	0x20016680
 8019e68:	20016740 	.word	0x20016740
 8019e6c:	20016500 	.word	0x20016500
 8019e70:	20004580 	.word	0x20004580
 8019e74:	20004738 	.word	0x20004738

08019e78 <TIM_IC_DutyCycle_Init>:
 * @brief  Initializes duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Init(void)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	af00      	add	r7, sp, #0
	/* Stop timer elapse event interrupt first */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019e7c:	4868      	ldr	r0, [pc, #416]	; (801a020 <TIM_IC_DutyCycle_Init+0x1a8>)
 8019e7e:	f7f4 f849 	bl	800df14 <HAL_TIM_Base_Stop_IT>

	/* Disable capturing to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019e82:	4b68      	ldr	r3, [pc, #416]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	6a1a      	ldr	r2, [r3, #32]
 8019e88:	4b66      	ldr	r3, [pc, #408]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	f022 0201 	bic.w	r2, r2, #1
 8019e90:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019e92:	4b64      	ldr	r3, [pc, #400]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	6a1a      	ldr	r2, [r3, #32]
 8019e98:	4b62      	ldr	r3, [pc, #392]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	f022 0210 	bic.w	r2, r2, #16
 8019ea0:	621a      	str	r2, [r3, #32]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 8019ea2:	4b61      	ldr	r3, [pc, #388]	; (801a028 <TIM_IC_DutyCycle_Init+0x1b0>)
 8019ea4:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	2b01      	cmp	r3, #1
 8019eac:	d152      	bne.n	8019f54 <TIM_IC_DutyCycle_Init+0xdc>
		/* Set IC1 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019eae:	4b5d      	ldr	r3, [pc, #372]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	699a      	ldr	r2, [r3, #24]
 8019eb4:	4b5b      	ldr	r3, [pc, #364]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f022 020c 	bic.w	r2, r2, #12
 8019ebc:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019ebe:	4b59      	ldr	r3, [pc, #356]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	699a      	ldr	r2, [r3, #24]
 8019ec4:	4b57      	ldr	r3, [pc, #348]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f022 0203 	bic.w	r2, r2, #3
 8019ecc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 8019ece:	4b55      	ldr	r3, [pc, #340]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	699a      	ldr	r2, [r3, #24]
 8019ed4:	4b53      	ldr	r3, [pc, #332]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f042 0201 	orr.w	r2, r2, #1
 8019edc:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019ede:	4b51      	ldr	r3, [pc, #324]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	6a1a      	ldr	r2, [r3, #32]
 8019ee4:	4b4f      	ldr	r3, [pc, #316]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f022 020a 	bic.w	r2, r2, #10
 8019eec:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019eee:	4b4d      	ldr	r3, [pc, #308]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	699a      	ldr	r2, [r3, #24]
 8019ef4:	4b4b      	ldr	r3, [pc, #300]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019efc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 8019efe:	4b49      	ldr	r3, [pc, #292]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	699a      	ldr	r2, [r3, #24]
 8019f04:	4b47      	ldr	r3, [pc, #284]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f0c:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8019f0e:	4b45      	ldr	r3, [pc, #276]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	6a1a      	ldr	r2, [r3, #32]
 8019f14:	4b43      	ldr	r3, [pc, #268]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019f1c:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8019f1e:	4b41      	ldr	r3, [pc, #260]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	6a1a      	ldr	r2, [r3, #32]
 8019f24:	4b3f      	ldr	r3, [pc, #252]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	f042 0220 	orr.w	r2, r2, #32
 8019f2c:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019f2e:	4b3d      	ldr	r3, [pc, #244]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	689b      	ldr	r3, [r3, #8]
 8019f34:	4a3b      	ldr	r2, [pc, #236]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f36:	6812      	ldr	r2, [r2, #0]
 8019f38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019f40:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019f42:	4b38      	ldr	r3, [pc, #224]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	689a      	ldr	r2, [r3, #8]
 8019f48:	4b36      	ldr	r3, [pc, #216]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019f50:	609a      	str	r2, [r3, #8]
 8019f52:	e051      	b.n	8019ff8 <TIM_IC_DutyCycle_Init+0x180>
	}else{
		/* Set IC2 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019f54:	4b33      	ldr	r3, [pc, #204]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	699a      	ldr	r2, [r3, #24]
 8019f5a:	4b32      	ldr	r3, [pc, #200]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019f62:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019f64:	4b2f      	ldr	r3, [pc, #188]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	699a      	ldr	r2, [r3, #24]
 8019f6a:	4b2e      	ldr	r3, [pc, #184]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	f022 0203 	bic.w	r2, r2, #3
 8019f72:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 8019f74:	4b2b      	ldr	r3, [pc, #172]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	699a      	ldr	r2, [r3, #24]
 8019f7a:	4b2a      	ldr	r3, [pc, #168]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f042 0202 	orr.w	r2, r2, #2
 8019f82:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 8019f84:	4b27      	ldr	r3, [pc, #156]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	6a1a      	ldr	r2, [r3, #32]
 8019f8a:	4b26      	ldr	r3, [pc, #152]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f022 0208 	bic.w	r2, r2, #8
 8019f92:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8019f94:	4b23      	ldr	r3, [pc, #140]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	6a1a      	ldr	r2, [r3, #32]
 8019f9a:	4b22      	ldr	r3, [pc, #136]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	f042 0202 	orr.w	r2, r2, #2
 8019fa2:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019fa4:	4b1f      	ldr	r3, [pc, #124]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	699a      	ldr	r2, [r3, #24]
 8019faa:	4b1e      	ldr	r3, [pc, #120]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019fb2:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8019fb4:	4b1b      	ldr	r3, [pc, #108]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	699a      	ldr	r2, [r3, #24]
 8019fba:	4b1a      	ldr	r3, [pc, #104]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019fc2:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019fc4:	4b17      	ldr	r3, [pc, #92]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	6a1a      	ldr	r2, [r3, #32]
 8019fca:	4b16      	ldr	r3, [pc, #88]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019fd2:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019fd4:	4b13      	ldr	r3, [pc, #76]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	689b      	ldr	r3, [r3, #8]
 8019fda:	4a12      	ldr	r2, [pc, #72]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fdc:	6812      	ldr	r2, [r2, #0]
 8019fde:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019fe6:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 8019fe8:	4b0e      	ldr	r3, [pc, #56]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	689a      	ldr	r2, [r3, #8]
 8019fee:	4b0d      	ldr	r3, [pc, #52]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8019ff6:	609a      	str	r2, [r3, #8]
	}

	/* Configure the slave mode controller in reset mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019ff8:	4b0a      	ldr	r3, [pc, #40]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	689b      	ldr	r3, [r3, #8]
 8019ffe:	4a09      	ldr	r2, [pc, #36]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a000:	6812      	ldr	r2, [r2, #0]
 801a002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a006:	f023 0307 	bic.w	r3, r3, #7
 801a00a:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 801a00c:	4b05      	ldr	r3, [pc, #20]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	689a      	ldr	r2, [r3, #8]
 801a012:	4b04      	ldr	r3, [pc, #16]	; (801a024 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	f042 0204 	orr.w	r2, r2, #4
 801a01a:	609a      	str	r2, [r3, #8]
}
 801a01c:	bf00      	nop
 801a01e:	bd80      	pop	{r7, pc}
 801a020:	200161b4 	.word	0x200161b4
 801a024:	20016500 	.word	0x20016500
 801a028:	20004570 	.word	0x20004570

0801a02c <TIM_IC_DutyCycle_Deinit>:
 * @brief  Deinits duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Deinit(void)
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	af00      	add	r7, sp, #0
	/* Select the active input for CCR1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801a030:	4b3f      	ldr	r3, [pc, #252]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	699a      	ldr	r2, [r3, #24]
 801a036:	4b3e      	ldr	r3, [pc, #248]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	f022 0203 	bic.w	r2, r2, #3
 801a03e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 801a040:	4b3b      	ldr	r3, [pc, #236]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	699a      	ldr	r2, [r3, #24]
 801a046:	4b3a      	ldr	r3, [pc, #232]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	f042 0201 	orr.w	r2, r2, #1
 801a04e:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a050:	4b37      	ldr	r3, [pc, #220]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	6a1a      	ldr	r2, [r3, #32]
 801a056:	4b36      	ldr	r3, [pc, #216]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	f022 020a 	bic.w	r2, r2, #10
 801a05e:	621a      	str	r2, [r3, #32]
	/* Select the active input for CCR2 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801a060:	4b33      	ldr	r3, [pc, #204]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	699a      	ldr	r2, [r3, #24]
 801a066:	4b32      	ldr	r3, [pc, #200]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801a06e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 801a070:	4b2f      	ldr	r3, [pc, #188]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	699a      	ldr	r2, [r3, #24]
 801a076:	4b2e      	ldr	r3, [pc, #184]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a07e:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a080:	4b2b      	ldr	r3, [pc, #172]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	6a1a      	ldr	r2, [r3, #32]
 801a086:	4b2a      	ldr	r3, [pc, #168]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a08e:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a090:	4b27      	ldr	r3, [pc, #156]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	689b      	ldr	r3, [r3, #8]
 801a096:	4a26      	ldr	r2, [pc, #152]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a098:	6812      	ldr	r2, [r2, #0]
 801a09a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a0a2:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a0a4:	4b22      	ldr	r3, [pc, #136]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	689b      	ldr	r3, [r3, #8]
 801a0aa:	4a21      	ldr	r2, [pc, #132]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0ac:	6812      	ldr	r2, [r2, #0]
 801a0ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a0b2:	f023 0307 	bic.w	r3, r3, #7
 801a0b6:	6093      	str	r3, [r2, #8]
	/* Start DMAs */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801a0b8:	4b1d      	ldr	r3, [pc, #116]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	3334      	adds	r3, #52	; 0x34
 801a0be:	4619      	mov	r1, r3
 801a0c0:	4a1c      	ldr	r2, [pc, #112]	; (801a134 <TIM_IC_DutyCycle_Deinit+0x108>)
 801a0c2:	4b1d      	ldr	r3, [pc, #116]	; (801a138 <TIM_IC_DutyCycle_Deinit+0x10c>)
 801a0c4:	88db      	ldrh	r3, [r3, #6]
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	481c      	ldr	r0, [pc, #112]	; (801a13c <TIM_IC_DutyCycle_Deinit+0x110>)
 801a0ca:	f7f1 f8cf 	bl	800b26c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801a0ce:	4b18      	ldr	r3, [pc, #96]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	3338      	adds	r3, #56	; 0x38
 801a0d4:	4619      	mov	r1, r3
 801a0d6:	4a1a      	ldr	r2, [pc, #104]	; (801a140 <TIM_IC_DutyCycle_Deinit+0x114>)
 801a0d8:	4b17      	ldr	r3, [pc, #92]	; (801a138 <TIM_IC_DutyCycle_Deinit+0x10c>)
 801a0da:	891b      	ldrh	r3, [r3, #8]
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	4819      	ldr	r0, [pc, #100]	; (801a144 <TIM_IC_DutyCycle_Deinit+0x118>)
 801a0e0:	f7f1 f8c4 	bl	800b26c <HAL_DMA_Start>
	/* DMA requests enable */
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 801a0e4:	4b12      	ldr	r3, [pc, #72]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	68da      	ldr	r2, [r3, #12]
 801a0ea:	4b11      	ldr	r3, [pc, #68]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a0f2:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 801a0f4:	4b0e      	ldr	r3, [pc, #56]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	68da      	ldr	r2, [r3, #12]
 801a0fa:	4b0d      	ldr	r3, [pc, #52]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a102:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 801a104:	4810      	ldr	r0, [pc, #64]	; (801a148 <TIM_IC_DutyCycle_Deinit+0x11c>)
 801a106:	f7f3 fe83 	bl	800de10 <HAL_TIM_Base_Start_IT>
	/* Enable capturing for IC mode */
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801a10a:	4b09      	ldr	r3, [pc, #36]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	6a1a      	ldr	r2, [r3, #32]
 801a110:	4b07      	ldr	r3, [pc, #28]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	f042 0201 	orr.w	r2, r2, #1
 801a118:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 801a11a:	4b05      	ldr	r3, [pc, #20]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	6a1a      	ldr	r2, [r3, #32]
 801a120:	4b03      	ldr	r3, [pc, #12]	; (801a130 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f042 0210 	orr.w	r2, r2, #16
 801a128:	621a      	str	r2, [r3, #32]
}
 801a12a:	bf00      	nop
 801a12c:	bd80      	pop	{r7, pc}
 801a12e:	bf00      	nop
 801a130:	20016500 	.word	0x20016500
 801a134:	20004580 	.word	0x20004580
 801a138:	20004570 	.word	0x20004570
 801a13c:	20016680 	.word	0x20016680
 801a140:	20004738 	.word	0x20004738
 801a144:	20016740 	.word	0x20016740
 801a148:	200161b4 	.word	0x200161b4

0801a14c <TIM_IC_DutyCycle_Start>:
 * @brief  Starts duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Start(void)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	af00      	add	r7, sp, #0
	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 801a150:	4b1e      	ldr	r3, [pc, #120]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	3334      	adds	r3, #52	; 0x34
 801a156:	4619      	mov	r1, r3
 801a158:	4a1d      	ldr	r2, [pc, #116]	; (801a1d0 <TIM_IC_DutyCycle_Start+0x84>)
 801a15a:	2301      	movs	r3, #1
 801a15c:	481d      	ldr	r0, [pc, #116]	; (801a1d4 <TIM_IC_DutyCycle_Start+0x88>)
 801a15e:	f7f1 f885 	bl	800b26c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 801a162:	4b1a      	ldr	r3, [pc, #104]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	3338      	adds	r3, #56	; 0x38
 801a168:	4619      	mov	r1, r3
 801a16a:	4a1b      	ldr	r2, [pc, #108]	; (801a1d8 <TIM_IC_DutyCycle_Start+0x8c>)
 801a16c:	2301      	movs	r3, #1
 801a16e:	481b      	ldr	r0, [pc, #108]	; (801a1dc <TIM_IC_DutyCycle_Start+0x90>)
 801a170:	f7f1 f87c 	bl	800b26c <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 801a174:	4815      	ldr	r0, [pc, #84]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a176:	f7f3 fd47 	bl	800dc08 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 801a17a:	4819      	ldr	r0, [pc, #100]	; (801a1e0 <TIM_IC_DutyCycle_Start+0x94>)
 801a17c:	f7f3 fe48 	bl	800de10 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 801a180:	4b12      	ldr	r3, [pc, #72]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	68da      	ldr	r2, [r3, #12]
 801a186:	4b11      	ldr	r3, [pc, #68]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a18e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 801a190:	4b0e      	ldr	r3, [pc, #56]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	68da      	ldr	r2, [r3, #12]
 801a196:	4b0d      	ldr	r3, [pc, #52]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a19e:	60da      	str	r2, [r3, #12]

	/* Enable capturing */
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 801a1a0:	4b0a      	ldr	r3, [pc, #40]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	6a1a      	ldr	r2, [r3, #32]
 801a1a6:	4b09      	ldr	r3, [pc, #36]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	f042 0210 	orr.w	r2, r2, #16
 801a1ae:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801a1b0:	4b06      	ldr	r3, [pc, #24]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	6a1a      	ldr	r2, [r3, #32]
 801a1b6:	4b05      	ldr	r3, [pc, #20]	; (801a1cc <TIM_IC_DutyCycle_Start+0x80>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	f042 0201 	orr.w	r2, r2, #1
 801a1be:	621a      	str	r2, [r3, #32]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number (who knows why) -> throw away */
	counter.bin = BIN0;
 801a1c0:	4b08      	ldr	r3, [pc, #32]	; (801a1e4 <TIM_IC_DutyCycle_Start+0x98>)
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 801a1c8:	bf00      	nop
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	20016500 	.word	0x20016500
 801a1d0:	20004580 	.word	0x20004580
 801a1d4:	20016680 	.word	0x20016680
 801a1d8:	20004738 	.word	0x20004738
 801a1dc:	20016740 	.word	0x20016740
 801a1e0:	200161b4 	.word	0x200161b4
 801a1e4:	20004570 	.word	0x20004570

0801a1e8 <TIM_IC_DutyCycle_Stop>:
 * @brief  Stops duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Stop(void)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 801a1ec:	4813      	ldr	r0, [pc, #76]	; (801a23c <TIM_IC_DutyCycle_Stop+0x54>)
 801a1ee:	f7f1 f919 	bl	800b424 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a1f2:	4813      	ldr	r0, [pc, #76]	; (801a240 <TIM_IC_DutyCycle_Stop+0x58>)
 801a1f4:	f7f1 f916 	bl	800b424 <HAL_DMA_Abort>

	/* Disable capture to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801a1f8:	4b12      	ldr	r3, [pc, #72]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	6a1a      	ldr	r2, [r3, #32]
 801a1fe:	4b11      	ldr	r3, [pc, #68]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	f022 0201 	bic.w	r2, r2, #1
 801a206:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801a208:	4b0e      	ldr	r3, [pc, #56]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	6a1a      	ldr	r2, [r3, #32]
 801a20e:	4b0d      	ldr	r3, [pc, #52]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	f022 0210 	bic.w	r2, r2, #16
 801a216:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 801a218:	4b0a      	ldr	r3, [pc, #40]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	68da      	ldr	r2, [r3, #12]
 801a21e:	4b09      	ldr	r3, [pc, #36]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801a226:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 801a228:	4b06      	ldr	r3, [pc, #24]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	68da      	ldr	r2, [r3, #12]
 801a22e:	4b05      	ldr	r3, [pc, #20]	; (801a244 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a236:	60da      	str	r2, [r3, #12]
}
 801a238:	bf00      	nop
 801a23a:	bd80      	pop	{r7, pc}
 801a23c:	20016680 	.word	0x20016680
 801a240:	20016740 	.word	0x20016740
 801a244:	20016500 	.word	0x20016500

0801a248 <TIM_ETRP_Config>:
 *					Therefore if higher input freq. then Prescaler must be higher as well.
 * @param  freq: frequency
 * @retval none
 */
void TIM_ETRP_Config(double freq)
{
 801a248:	b590      	push	{r4, r7, lr}
 801a24a:	b085      	sub	sp, #20
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	ed87 0b00 	vstr	d0, [r7]
	uint32_t smcr = htim2.Instance->SMCR;
 801a252:	4b57      	ldr	r3, [pc, #348]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	689b      	ldr	r3, [r3, #8]
 801a258:	60fb      	str	r3, [r7, #12]
	/* Check the range of the input frequency and set the ETR prescaler */
	if(freq < (counter.tim2PrphClk / 4)){
 801a25a:	4b56      	ldr	r3, [pc, #344]	; (801a3b4 <TIM_ETRP_Config+0x16c>)
 801a25c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a260:	089b      	lsrs	r3, r3, #2
 801a262:	4618      	mov	r0, r3
 801a264:	f7e6 f91e 	bl	80004a4 <__aeabi_ui2d>
 801a268:	4603      	mov	r3, r0
 801a26a:	460c      	mov	r4, r1
 801a26c:	461a      	mov	r2, r3
 801a26e:	4623      	mov	r3, r4
 801a270:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a274:	f7e6 fc02 	bl	8000a7c <__aeabi_dcmplt>
 801a278:	4603      	mov	r3, r0
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d008      	beq.n	801a290 <TIM_ETRP_Config+0x48>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 801a27e:	4b4c      	ldr	r3, [pc, #304]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	689a      	ldr	r2, [r3, #8]
 801a284:	4b4a      	ldr	r3, [pc, #296]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a28c:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
		}
	}
}
 801a28e:	e08b      	b.n	801a3a8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 801a290:	4b48      	ldr	r3, [pc, #288]	; (801a3b4 <TIM_ETRP_Config+0x16c>)
 801a292:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a296:	089b      	lsrs	r3, r3, #2
 801a298:	4618      	mov	r0, r3
 801a29a:	f7e6 f903 	bl	80004a4 <__aeabi_ui2d>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	460c      	mov	r4, r1
 801a2a2:	461a      	mov	r2, r3
 801a2a4:	4623      	mov	r3, r4
 801a2a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a2aa:	f7e6 fbfb 	bl	8000aa4 <__aeabi_dcmpge>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d028      	beq.n	801a306 <TIM_ETRP_Config+0xbe>
 801a2b4:	4b3f      	ldr	r3, [pc, #252]	; (801a3b4 <TIM_ETRP_Config+0x16c>)
 801a2b6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a2ba:	085b      	lsrs	r3, r3, #1
 801a2bc:	4618      	mov	r0, r3
 801a2be:	f7e6 f8f1 	bl	80004a4 <__aeabi_ui2d>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	460c      	mov	r4, r1
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	4623      	mov	r3, r4
 801a2ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a2ce:	f7e6 fbd5 	bl	8000a7c <__aeabi_dcmplt>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d016      	beq.n	801a306 <TIM_ETRP_Config+0xbe>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a2e2:	d061      	beq.n	801a3a8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a2e4:	4b32      	ldr	r3, [pc, #200]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	689a      	ldr	r2, [r3, #8]
 801a2ea:	4b31      	ldr	r3, [pc, #196]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a2f2:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 801a2f4:	4b2e      	ldr	r3, [pc, #184]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	689a      	ldr	r2, [r3, #8]
 801a2fa:	4b2d      	ldr	r3, [pc, #180]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a302:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a304:	e050      	b.n	801a3a8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 801a306:	4b2b      	ldr	r3, [pc, #172]	; (801a3b4 <TIM_ETRP_Config+0x16c>)
 801a308:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a30c:	085b      	lsrs	r3, r3, #1
 801a30e:	4618      	mov	r0, r3
 801a310:	f7e6 f8c8 	bl	80004a4 <__aeabi_ui2d>
 801a314:	4603      	mov	r3, r0
 801a316:	460c      	mov	r4, r1
 801a318:	461a      	mov	r2, r3
 801a31a:	4623      	mov	r3, r4
 801a31c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a320:	f7e6 fbc0 	bl	8000aa4 <__aeabi_dcmpge>
 801a324:	4603      	mov	r3, r0
 801a326:	2b00      	cmp	r3, #0
 801a328:	d027      	beq.n	801a37a <TIM_ETRP_Config+0x132>
 801a32a:	4b22      	ldr	r3, [pc, #136]	; (801a3b4 <TIM_ETRP_Config+0x16c>)
 801a32c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a330:	4618      	mov	r0, r3
 801a332:	f7e6 f8b7 	bl	80004a4 <__aeabi_ui2d>
 801a336:	4603      	mov	r3, r0
 801a338:	460c      	mov	r4, r1
 801a33a:	461a      	mov	r2, r3
 801a33c:	4623      	mov	r3, r4
 801a33e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a342:	f7e6 fb9b 	bl	8000a7c <__aeabi_dcmplt>
 801a346:	4603      	mov	r3, r0
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d016      	beq.n	801a37a <TIM_ETRP_Config+0x132>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a356:	d027      	beq.n	801a3a8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a358:	4b15      	ldr	r3, [pc, #84]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	689a      	ldr	r2, [r3, #8]
 801a35e:	4b14      	ldr	r3, [pc, #80]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a366:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 801a368:	4b11      	ldr	r3, [pc, #68]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	689a      	ldr	r2, [r3, #8]
 801a36e:	4b10      	ldr	r3, [pc, #64]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a376:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a378:	e016      	b.n	801a3a8 <TIM_ETRP_Config+0x160>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801a384:	d010      	beq.n	801a3a8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a386:	4b0a      	ldr	r3, [pc, #40]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	689a      	ldr	r2, [r3, #8]
 801a38c:	4b08      	ldr	r3, [pc, #32]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a394:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 801a396:	4b06      	ldr	r3, [pc, #24]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	689a      	ldr	r2, [r3, #8]
 801a39c:	4b04      	ldr	r3, [pc, #16]	; (801a3b0 <TIM_ETRP_Config+0x168>)
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 801a3a4:	609a      	str	r2, [r3, #8]
}
 801a3a6:	e7ff      	b.n	801a3a8 <TIM_ETRP_Config+0x160>
 801a3a8:	bf00      	nop
 801a3aa:	3714      	adds	r7, #20
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd90      	pop	{r4, r7, pc}
 801a3b0:	20016500 	.word	0x20016500
 801a3b4:	20004570 	.word	0x20004570

0801a3b8 <TIM_IC1_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC1_PSC_Config(uint8_t prescVal)
{
 801a3b8:	b480      	push	{r7}
 801a3ba:	b083      	sub	sp, #12
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	4603      	mov	r3, r0
 801a3c0:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a3c2:	4b1c      	ldr	r3, [pc, #112]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	699a      	ldr	r2, [r3, #24]
 801a3c8:	4b1a      	ldr	r3, [pc, #104]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	f022 020c 	bic.w	r2, r2, #12
 801a3d0:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a3d2:	79fb      	ldrb	r3, [r7, #7]
 801a3d4:	2b04      	cmp	r3, #4
 801a3d6:	d00c      	beq.n	801a3f2 <TIM_IC1_PSC_Config+0x3a>
 801a3d8:	2b08      	cmp	r3, #8
 801a3da:	d013      	beq.n	801a404 <TIM_IC1_PSC_Config+0x4c>
 801a3dc:	2b02      	cmp	r3, #2
 801a3de:	d11a      	bne.n	801a416 <TIM_IC1_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 801a3e0:	4b14      	ldr	r3, [pc, #80]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	699a      	ldr	r2, [r3, #24]
 801a3e6:	4b13      	ldr	r3, [pc, #76]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	f042 0204 	orr.w	r2, r2, #4
 801a3ee:	619a      	str	r2, [r3, #24]
 801a3f0:	e01a      	b.n	801a428 <TIM_IC1_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 801a3f2:	4b10      	ldr	r3, [pc, #64]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	699a      	ldr	r2, [r3, #24]
 801a3f8:	4b0e      	ldr	r3, [pc, #56]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f042 0208 	orr.w	r2, r2, #8
 801a400:	619a      	str	r2, [r3, #24]
 801a402:	e011      	b.n	801a428 <TIM_IC1_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 801a404:	4b0b      	ldr	r3, [pc, #44]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	699a      	ldr	r2, [r3, #24]
 801a40a:	4b0a      	ldr	r3, [pc, #40]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	f042 020c 	orr.w	r2, r2, #12
 801a412:	619a      	str	r2, [r3, #24]
 801a414:	e008      	b.n	801a428 <TIM_IC1_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 801a416:	4b07      	ldr	r3, [pc, #28]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	699a      	ldr	r2, [r3, #24]
 801a41c:	4b05      	ldr	r3, [pc, #20]	; (801a434 <TIM_IC1_PSC_Config+0x7c>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	f022 020c 	bic.w	r2, r2, #12
 801a424:	619a      	str	r2, [r3, #24]
 801a426:	bf00      	nop
	}
}
 801a428:	bf00      	nop
 801a42a:	370c      	adds	r7, #12
 801a42c:	46bd      	mov	sp, r7
 801a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a432:	4770      	bx	lr
 801a434:	20016500 	.word	0x20016500

0801a438 <TIM_IC2_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC2_PSC_Config(uint8_t prescVal)
{
 801a438:	b480      	push	{r7}
 801a43a:	b083      	sub	sp, #12
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	4603      	mov	r3, r0
 801a440:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801a442:	4b1c      	ldr	r3, [pc, #112]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	699a      	ldr	r2, [r3, #24]
 801a448:	4b1a      	ldr	r3, [pc, #104]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a450:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a452:	79fb      	ldrb	r3, [r7, #7]
 801a454:	2b04      	cmp	r3, #4
 801a456:	d00c      	beq.n	801a472 <TIM_IC2_PSC_Config+0x3a>
 801a458:	2b08      	cmp	r3, #8
 801a45a:	d013      	beq.n	801a484 <TIM_IC2_PSC_Config+0x4c>
 801a45c:	2b02      	cmp	r3, #2
 801a45e:	d11a      	bne.n	801a496 <TIM_IC2_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 801a460:	4b14      	ldr	r3, [pc, #80]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	699a      	ldr	r2, [r3, #24]
 801a466:	4b13      	ldr	r3, [pc, #76]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a46e:	619a      	str	r2, [r3, #24]
 801a470:	e01a      	b.n	801a4a8 <TIM_IC2_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 801a472:	4b10      	ldr	r3, [pc, #64]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	699a      	ldr	r2, [r3, #24]
 801a478:	4b0e      	ldr	r3, [pc, #56]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a480:	619a      	str	r2, [r3, #24]
 801a482:	e011      	b.n	801a4a8 <TIM_IC2_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 801a484:	4b0b      	ldr	r3, [pc, #44]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	699a      	ldr	r2, [r3, #24]
 801a48a:	4b0a      	ldr	r3, [pc, #40]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 801a492:	619a      	str	r2, [r3, #24]
 801a494:	e008      	b.n	801a4a8 <TIM_IC2_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 801a496:	4b07      	ldr	r3, [pc, #28]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	699a      	ldr	r2, [r3, #24]
 801a49c:	4b05      	ldr	r3, [pc, #20]	; (801a4b4 <TIM_IC2_PSC_Config+0x7c>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a4a4:	619a      	str	r2, [r3, #24]
 801a4a6:	bf00      	nop
	}
}
 801a4a8:	bf00      	nop
 801a4aa:	370c      	adds	r7, #12
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b2:	4770      	bx	lr
 801a4b4:	20016500 	.word	0x20016500

0801a4b8 <TIM_IC1_RisingFalling>:
 * @brief  Selects rising falling edges to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingFalling(void)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a4bc:	4b06      	ldr	r3, [pc, #24]	; (801a4d8 <TIM_IC1_RisingFalling+0x20>)
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	6a1a      	ldr	r2, [r3, #32]
 801a4c2:	4b05      	ldr	r3, [pc, #20]	; (801a4d8 <TIM_IC1_RisingFalling+0x20>)
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	f042 020a 	orr.w	r2, r2, #10
 801a4ca:	621a      	str	r2, [r3, #32]
}
 801a4cc:	bf00      	nop
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d4:	4770      	bx	lr
 801a4d6:	bf00      	nop
 801a4d8:	20016500 	.word	0x20016500

0801a4dc <TIM_IC1_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingOnly(void)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a4e0:	4b06      	ldr	r3, [pc, #24]	; (801a4fc <TIM_IC1_RisingOnly+0x20>)
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	6a1a      	ldr	r2, [r3, #32]
 801a4e6:	4b05      	ldr	r3, [pc, #20]	; (801a4fc <TIM_IC1_RisingOnly+0x20>)
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f022 020a 	bic.w	r2, r2, #10
 801a4ee:	621a      	str	r2, [r3, #32]
}
 801a4f0:	bf00      	nop
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f8:	4770      	bx	lr
 801a4fa:	bf00      	nop
 801a4fc:	20016500 	.word	0x20016500

0801a500 <TIM_IC1_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_FallingOnly(void)
{
 801a500:	b480      	push	{r7}
 801a502:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a504:	4b0a      	ldr	r3, [pc, #40]	; (801a530 <TIM_IC1_FallingOnly+0x30>)
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	6a1a      	ldr	r2, [r3, #32]
 801a50a:	4b09      	ldr	r3, [pc, #36]	; (801a530 <TIM_IC1_FallingOnly+0x30>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	f022 0208 	bic.w	r2, r2, #8
 801a512:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a514:	4b06      	ldr	r3, [pc, #24]	; (801a530 <TIM_IC1_FallingOnly+0x30>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	6a1a      	ldr	r2, [r3, #32]
 801a51a:	4b05      	ldr	r3, [pc, #20]	; (801a530 <TIM_IC1_FallingOnly+0x30>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	f042 0202 	orr.w	r2, r2, #2
 801a522:	621a      	str	r2, [r3, #32]
}
 801a524:	bf00      	nop
 801a526:	46bd      	mov	sp, r7
 801a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52c:	4770      	bx	lr
 801a52e:	bf00      	nop
 801a530:	20016500 	.word	0x20016500

0801a534 <TIM_IC2_RisingFalling>:
 * @brief  Selects rising falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingFalling(void)
{
 801a534:	b480      	push	{r7}
 801a536:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a538:	4b06      	ldr	r3, [pc, #24]	; (801a554 <TIM_IC2_RisingFalling+0x20>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	6a1a      	ldr	r2, [r3, #32]
 801a53e:	4b05      	ldr	r3, [pc, #20]	; (801a554 <TIM_IC2_RisingFalling+0x20>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801a546:	621a      	str	r2, [r3, #32]
}
 801a548:	bf00      	nop
 801a54a:	46bd      	mov	sp, r7
 801a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a550:	4770      	bx	lr
 801a552:	bf00      	nop
 801a554:	20016500 	.word	0x20016500

0801a558 <TIM_IC2_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingOnly(void)
{
 801a558:	b480      	push	{r7}
 801a55a:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a55c:	4b06      	ldr	r3, [pc, #24]	; (801a578 <TIM_IC2_RisingOnly+0x20>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	6a1a      	ldr	r2, [r3, #32]
 801a562:	4b05      	ldr	r3, [pc, #20]	; (801a578 <TIM_IC2_RisingOnly+0x20>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a56a:	621a      	str	r2, [r3, #32]
}
 801a56c:	bf00      	nop
 801a56e:	46bd      	mov	sp, r7
 801a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a574:	4770      	bx	lr
 801a576:	bf00      	nop
 801a578:	20016500 	.word	0x20016500

0801a57c <TIM_IC2_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_FallingOnly(void)
{
 801a57c:	b480      	push	{r7}
 801a57e:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a580:	4b0a      	ldr	r3, [pc, #40]	; (801a5ac <TIM_IC2_FallingOnly+0x30>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	6a1a      	ldr	r2, [r3, #32]
 801a586:	4b09      	ldr	r3, [pc, #36]	; (801a5ac <TIM_IC2_FallingOnly+0x30>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a58e:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a590:	4b06      	ldr	r3, [pc, #24]	; (801a5ac <TIM_IC2_FallingOnly+0x30>)
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	6a1a      	ldr	r2, [r3, #32]
 801a596:	4b05      	ldr	r3, [pc, #20]	; (801a5ac <TIM_IC2_FallingOnly+0x30>)
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	f042 0220 	orr.w	r2, r2, #32
 801a59e:	621a      	str	r2, [r3, #32]
}
 801a5a0:	bf00      	nop
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	20016500 	.word	0x20016500

0801a5b0 <TIM_TI_Sequence_AB>:
/**
 * @brief  Selects AB sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_AB(void){
 801a5b0:	b480      	push	{r7}
 801a5b2:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a5b4:	4b16      	ldr	r3, [pc, #88]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	689b      	ldr	r3, [r3, #8]
 801a5ba:	4a15      	ldr	r2, [pc, #84]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5bc:	6812      	ldr	r2, [r2, #0]
 801a5be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a5c6:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 801a5c8:	4b11      	ldr	r3, [pc, #68]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	689a      	ldr	r2, [r3, #8]
 801a5ce:	4b10      	ldr	r3, [pc, #64]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801a5d6:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a5d8:	4b0d      	ldr	r3, [pc, #52]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	689b      	ldr	r3, [r3, #8]
 801a5de:	4a0c      	ldr	r2, [pc, #48]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5e0:	6812      	ldr	r2, [r2, #0]
 801a5e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a5e6:	f023 0307 	bic.w	r3, r3, #7
 801a5ea:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a5ec:	4b08      	ldr	r3, [pc, #32]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	689a      	ldr	r2, [r3, #8]
 801a5f2:	4b07      	ldr	r3, [pc, #28]	; (801a610 <TIM_TI_Sequence_AB+0x60>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a5fa:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_AB - time delay between AB events measured. */
	counter.abba = BIN0;
 801a5fc:	4b05      	ldr	r3, [pc, #20]	; (801a614 <TIM_TI_Sequence_AB+0x64>)
 801a5fe:	2200      	movs	r2, #0
 801a600:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a604:	bf00      	nop
 801a606:	46bd      	mov	sp, r7
 801a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60c:	4770      	bx	lr
 801a60e:	bf00      	nop
 801a610:	20016500 	.word	0x20016500
 801a614:	20004570 	.word	0x20004570

0801a618 <TIM_TI_Sequence_BA>:
/**
 * @brief  Selects BA sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_BA(void){
 801a618:	b480      	push	{r7}
 801a61a:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI2FP2 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a61c:	4b16      	ldr	r3, [pc, #88]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	689b      	ldr	r3, [r3, #8]
 801a622:	4a15      	ldr	r2, [pc, #84]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a624:	6812      	ldr	r2, [r2, #0]
 801a626:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a62a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a62e:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 801a630:	4b11      	ldr	r3, [pc, #68]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	689a      	ldr	r2, [r3, #8]
 801a636:	4b10      	ldr	r3, [pc, #64]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801a63e:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a640:	4b0d      	ldr	r3, [pc, #52]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	689b      	ldr	r3, [r3, #8]
 801a646:	4a0c      	ldr	r2, [pc, #48]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a648:	6812      	ldr	r2, [r2, #0]
 801a64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a64e:	f023 0307 	bic.w	r3, r3, #7
 801a652:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a654:	4b08      	ldr	r3, [pc, #32]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	689a      	ldr	r2, [r3, #8]
 801a65a:	4b07      	ldr	r3, [pc, #28]	; (801a678 <TIM_TI_Sequence_BA+0x60>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a662:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_BA - time delay between BA events measured. */
	counter.abba = BIN1;
 801a664:	4b05      	ldr	r3, [pc, #20]	; (801a67c <TIM_TI_Sequence_BA+0x64>)
 801a666:	2201      	movs	r2, #1
 801a668:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a66c:	bf00      	nop
 801a66e:	46bd      	mov	sp, r7
 801a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a674:	4770      	bx	lr
 801a676:	bf00      	nop
 801a678:	20016500 	.word	0x20016500
 801a67c:	20004570 	.word	0x20004570

0801a680 <TIM_TI_ReconfigActiveEdges>:
 * @brief  Counter Time Interval measurement active edges reconfiguration function.
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
 801a680:	b480      	push	{r7}
 801a682:	af00      	add	r7, sp, #0
	if(counter.eventChan1==EVENT_RISING){
 801a684:	4b21      	ldr	r3, [pc, #132]	; (801a70c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a686:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d108      	bne.n	801a6a2 <TIM_TI_ReconfigActiveEdges+0x22>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a690:	4b1f      	ldr	r3, [pc, #124]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	6a1a      	ldr	r2, [r3, #32]
 801a696:	4b1e      	ldr	r3, [pc, #120]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	f022 020a 	bic.w	r2, r2, #10
 801a69e:	621a      	str	r2, [r3, #32]
 801a6a0:	e00f      	b.n	801a6c2 <TIM_TI_ReconfigActiveEdges+0x42>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a6a2:	4b1b      	ldr	r3, [pc, #108]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	6a1a      	ldr	r2, [r3, #32]
 801a6a8:	4b19      	ldr	r3, [pc, #100]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	f022 0208 	bic.w	r2, r2, #8
 801a6b0:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a6b2:	4b17      	ldr	r3, [pc, #92]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	6a1a      	ldr	r2, [r3, #32]
 801a6b8:	4b15      	ldr	r3, [pc, #84]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f042 0202 	orr.w	r2, r2, #2
 801a6c0:	621a      	str	r2, [r3, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 801a6c2:	4b12      	ldr	r3, [pc, #72]	; (801a70c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a6c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a6c8:	b2db      	uxtb	r3, r3
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d108      	bne.n	801a6e0 <TIM_TI_ReconfigActiveEdges+0x60>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a6ce:	4b10      	ldr	r3, [pc, #64]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	6a1a      	ldr	r2, [r3, #32]
 801a6d4:	4b0e      	ldr	r3, [pc, #56]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a6dc:	621a      	str	r2, [r3, #32]
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
	}
}
 801a6de:	e00f      	b.n	801a700 <TIM_TI_ReconfigActiveEdges+0x80>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a6e0:	4b0b      	ldr	r3, [pc, #44]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	6a1a      	ldr	r2, [r3, #32]
 801a6e6:	4b0a      	ldr	r3, [pc, #40]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a6ee:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a6f0:	4b07      	ldr	r3, [pc, #28]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	6a1a      	ldr	r2, [r3, #32]
 801a6f6:	4b06      	ldr	r3, [pc, #24]	; (801a710 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	f042 0220 	orr.w	r2, r2, #32
 801a6fe:	621a      	str	r2, [r3, #32]
}
 801a700:	bf00      	nop
 801a702:	46bd      	mov	sp, r7
 801a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a708:	4770      	bx	lr
 801a70a:	bf00      	nop
 801a70c:	20004570 	.word	0x20004570
 801a710:	20016500 	.word	0x20016500

0801a714 <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 801a714:	b590      	push	{r4, r7, lr}
 801a716:	b085      	sub	sp, #20
 801a718:	af00      	add	r7, sp, #0
 801a71a:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a71e:	f7f2 fbfb 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801a722:	60f8      	str	r0, [r7, #12]

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 801a724:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a728:	f04f 0000 	mov.w	r0, #0
 801a72c:	491e      	ldr	r1, [pc, #120]	; (801a7a8 <TIM_ARR_PSC_Config+0x94>)
 801a72e:	f7e6 f85d 	bl	80007ec <__aeabi_ddiv>
 801a732:	4603      	mov	r3, r0
 801a734:	460c      	mov	r4, r1
 801a736:	ec44 3b17 	vmov	d7, r3, r4
 801a73a:	eeb0 0a47 	vmov.f32	s0, s14
 801a73e:	eef0 0a67 	vmov.f32	s1, s15
 801a742:	68f9      	ldr	r1, [r7, #12]
 801a744:	4819      	ldr	r0, [pc, #100]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a746:	f7fe fc43 	bl	8018fd0 <TIM_ReconfigPrecise>

	counter.counterEtr.arr = htim4.Instance->ARR;
 801a74a:	4b18      	ldr	r3, [pc, #96]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a750:	b29a      	uxth	r2, r3
 801a752:	4b17      	ldr	r3, [pc, #92]	; (801a7b0 <TIM_ARR_PSC_Config+0x9c>)
 801a754:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 801a758:	4b14      	ldr	r3, [pc, #80]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a75e:	b29a      	uxth	r2, r3
 801a760:	4b13      	ldr	r3, [pc, #76]	; (801a7b0 <TIM_ARR_PSC_Config+0x9c>)
 801a762:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	if(counter.state!=COUNTER_IC){
 801a766:	4b12      	ldr	r3, [pc, #72]	; (801a7b0 <TIM_ARR_PSC_Config+0x9c>)
 801a768:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801a76c:	b2db      	uxtb	r3, r3
 801a76e:	2b02      	cmp	r3, #2
 801a770:	d010      	beq.n	801a794 <TIM_ARR_PSC_Config+0x80>
		xStartTime = xTaskGetTickCount();
 801a772:	f7fb fadd 	bl	8015d30 <xTaskGetTickCount>
 801a776:	4602      	mov	r2, r0
 801a778:	4b0e      	ldr	r3, [pc, #56]	; (801a7b4 <TIM_ARR_PSC_Config+0xa0>)
 801a77a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim4);
 801a77c:	4b0b      	ldr	r3, [pc, #44]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	681a      	ldr	r2, [r3, #0]
 801a782:	4b0a      	ldr	r3, [pc, #40]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	f042 0201 	orr.w	r2, r2, #1
 801a78a:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a78c:	4b08      	ldr	r3, [pc, #32]	; (801a7b0 <TIM_ARR_PSC_Config+0x9c>)
 801a78e:	2200      	movs	r2, #0
 801a790:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 801a794:	4b05      	ldr	r3, [pc, #20]	; (801a7ac <TIM_ARR_PSC_Config+0x98>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	4618      	mov	r0, r3
 801a79a:	f7fe fcdd 	bl	8019158 <LL_TIM_GenerateEvent_UPDATE>
}
 801a79e:	bf00      	nop
 801a7a0:	3714      	adds	r7, #20
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd90      	pop	{r4, r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	3ff00000 	.word	0x3ff00000
 801a7ac:	200161b4 	.word	0x200161b4
 801a7b0:	20004570 	.word	0x20004570
 801a7b4:	20004568 	.word	0x20004568

0801a7b8 <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
 801a7b8:	b480      	push	{r7}
 801a7ba:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&htim4);
 801a7bc:	4b0e      	ldr	r3, [pc, #56]	; (801a7f8 <TIM_REF_SecondInputDisable+0x40>)
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	6a1a      	ldr	r2, [r3, #32]
 801a7c2:	f241 1311 	movw	r3, #4369	; 0x1111
 801a7c6:	4013      	ands	r3, r2
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d10f      	bne.n	801a7ec <TIM_REF_SecondInputDisable+0x34>
 801a7cc:	4b0a      	ldr	r3, [pc, #40]	; (801a7f8 <TIM_REF_SecondInputDisable+0x40>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	6a1a      	ldr	r2, [r3, #32]
 801a7d2:	f244 4344 	movw	r3, #17476	; 0x4444
 801a7d6:	4013      	ands	r3, r2
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d107      	bne.n	801a7ec <TIM_REF_SecondInputDisable+0x34>
 801a7dc:	4b06      	ldr	r3, [pc, #24]	; (801a7f8 <TIM_REF_SecondInputDisable+0x40>)
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	681a      	ldr	r2, [r3, #0]
 801a7e2:	4b05      	ldr	r3, [pc, #20]	; (801a7f8 <TIM_REF_SecondInputDisable+0x40>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f022 0201 	bic.w	r2, r2, #1
 801a7ea:	601a      	str	r2, [r3, #0]
}
 801a7ec:	bf00      	nop
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f4:	4770      	bx	lr
 801a7f6:	bf00      	nop
 801a7f8:	200161b4 	.word	0x200161b4

0801a7fc <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b086      	sub	sp, #24
 801a800:	af02      	add	r7, sp, #8
 801a802:	6078      	str	r0, [r7, #4]
	uint32_t dummy;
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a804:	f7f2 fb88 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801a808:	60f8      	str	r0, [r7, #12]
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 801a80a:	f7fb fa91 	bl	8015d30 <xTaskGetTickCount>
 801a80e:	4602      	mov	r2, r0
 801a810:	4b0b      	ldr	r3, [pc, #44]	; (801a840 <TIM_REF_Reconfig_cnt+0x44>)
 801a812:	601a      	str	r2, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a814:	4b0b      	ldr	r3, [pc, #44]	; (801a844 <TIM_REF_Reconfig_cnt+0x48>)
 801a816:	2200      	movs	r2, #0
 801a818:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 801a81c:	f107 0208 	add.w	r2, r7, #8
 801a820:	2300      	movs	r3, #0
 801a822:	9300      	str	r3, [sp, #0]
 801a824:	4613      	mov	r3, r2
 801a826:	687a      	ldr	r2, [r7, #4]
 801a828:	68f9      	ldr	r1, [r7, #12]
 801a82a:	4807      	ldr	r0, [pc, #28]	; (801a848 <TIM_REF_Reconfig_cnt+0x4c>)
 801a82c:	f7fe fb32 	bl	8018e94 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 801a830:	4805      	ldr	r0, [pc, #20]	; (801a848 <TIM_REF_Reconfig_cnt+0x4c>)
 801a832:	f7f3 f9e9 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801a836:	bf00      	nop
 801a838:	3710      	adds	r7, #16
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd80      	pop	{r7, pc}
 801a83e:	bf00      	nop
 801a840:	20004568 	.word	0x20004568
 801a844:	20004570 	.word	0x20004570
 801a848:	200161b4 	.word	0x200161b4

0801a84c <TIM_ETPS_GetPrescaler>:
 * @brief  Function getting ETRP (external trigger source prescaler) value of TIM2.
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b082      	sub	sp, #8
 801a850:	af00      	add	r7, sp, #0
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 801a852:	4b08      	ldr	r3, [pc, #32]	; (801a874 <TIM_ETPS_GetPrescaler+0x28>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	689b      	ldr	r3, [r3, #8]
 801a858:	0b1b      	lsrs	r3, r3, #12
 801a85a:	b29b      	uxth	r3, r3
 801a85c:	f003 0303 	and.w	r3, r3, #3
 801a860:	80fb      	strh	r3, [r7, #6]
	return TIM_GetPrescaler(etpsRegVal);
 801a862:	88fb      	ldrh	r3, [r7, #6]
 801a864:	4618      	mov	r0, r3
 801a866:	f000 f82f 	bl	801a8c8 <TIM_GetPrescaler>
 801a86a:	4603      	mov	r3, r0
}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3708      	adds	r7, #8
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	20016500 	.word	0x20016500

0801a878 <TIM_IC1PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 1.
 * @params None
 * @retval None
 */
uint8_t TIM_IC1PSC_GetPrescaler(void)
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 801a87e:	4b07      	ldr	r3, [pc, #28]	; (801a89c <TIM_IC1PSC_GetPrescaler+0x24>)
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	699b      	ldr	r3, [r3, #24]
 801a884:	089b      	lsrs	r3, r3, #2
 801a886:	f003 0303 	and.w	r3, r3, #3
 801a88a:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic1psc);
 801a88c:	6878      	ldr	r0, [r7, #4]
 801a88e:	f000 f81b 	bl	801a8c8 <TIM_GetPrescaler>
 801a892:	4603      	mov	r3, r0
}
 801a894:	4618      	mov	r0, r3
 801a896:	3708      	adds	r7, #8
 801a898:	46bd      	mov	sp, r7
 801a89a:	bd80      	pop	{r7, pc}
 801a89c:	20016500 	.word	0x20016500

0801a8a0 <TIM_IC2PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 2.
 * @params None
 * @retval None
 */
uint8_t TIM_IC2PSC_GetPrescaler(void)
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	b082      	sub	sp, #8
 801a8a4:	af00      	add	r7, sp, #0
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 801a8a6:	4b07      	ldr	r3, [pc, #28]	; (801a8c4 <TIM_IC2PSC_GetPrescaler+0x24>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	699b      	ldr	r3, [r3, #24]
 801a8ac:	0a9b      	lsrs	r3, r3, #10
 801a8ae:	f003 0303 	and.w	r3, r3, #3
 801a8b2:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic2psc);
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f000 f807 	bl	801a8c8 <TIM_GetPrescaler>
 801a8ba:	4603      	mov	r3, r0
}
 801a8bc:	4618      	mov	r0, r3
 801a8be:	3708      	adds	r7, #8
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}
 801a8c4:	20016500 	.word	0x20016500

0801a8c8 <TIM_GetPrescaler>:
 * @brief  Returns a real value of given register value prescaler in Direct mode meas. of Counter.
 * @params regPrescValue: ETRP prescaler register value
 * @retval presc: real prescaler value used for later calculations
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b085      	sub	sp, #20
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2b03      	cmp	r3, #3
 801a8d4:	d816      	bhi.n	801a904 <TIM_GetPrescaler+0x3c>
 801a8d6:	a201      	add	r2, pc, #4	; (adr r2, 801a8dc <TIM_GetPrescaler+0x14>)
 801a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8dc:	0801a8ed 	.word	0x0801a8ed
 801a8e0:	0801a8f3 	.word	0x0801a8f3
 801a8e4:	0801a8f9 	.word	0x0801a8f9
 801a8e8:	0801a8ff 	.word	0x0801a8ff
	case 0:
		presc = 1; break;
 801a8ec:	2301      	movs	r3, #1
 801a8ee:	73fb      	strb	r3, [r7, #15]
 801a8f0:	e009      	b.n	801a906 <TIM_GetPrescaler+0x3e>
	case 1:
		presc = 2; break;
 801a8f2:	2302      	movs	r3, #2
 801a8f4:	73fb      	strb	r3, [r7, #15]
 801a8f6:	e006      	b.n	801a906 <TIM_GetPrescaler+0x3e>
	case 2:
		presc = 4; break;
 801a8f8:	2304      	movs	r3, #4
 801a8fa:	73fb      	strb	r3, [r7, #15]
 801a8fc:	e003      	b.n	801a906 <TIM_GetPrescaler+0x3e>
	case 3:
		presc = 8; break;
 801a8fe:	2308      	movs	r3, #8
 801a900:	73fb      	strb	r3, [r7, #15]
 801a902:	e000      	b.n	801a906 <TIM_GetPrescaler+0x3e>
	default:
		break;
 801a904:	bf00      	nop
	}
	return presc;
 801a906:	7bfb      	ldrb	r3, [r7, #15]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	3714      	adds	r7, #20
 801a90c:	46bd      	mov	sp, r7
 801a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a912:	4770      	bx	lr

0801a914 <DMA_TransferComplete>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval bool: true, false
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
 801a914:	b480      	push	{r7}
 801a916:	b085      	sub	sp, #20
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	60fb      	str	r3, [r7, #12]

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a928:	2202      	movs	r2, #2
 801a92a:	409a      	lsls	r2, r3
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	4013      	ands	r3, r2
 801a930:	2b00      	cmp	r3, #0
 801a932:	d009      	beq.n	801a948 <DMA_TransferComplete+0x34>
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a93c:	2102      	movs	r1, #2
 801a93e:	fa01 f202 	lsl.w	r2, r1, r2
 801a942:	605a      	str	r2, [r3, #4]
		//		}
		return true;
 801a944:	2301      	movs	r3, #1
 801a946:	e000      	b.n	801a94a <DMA_TransferComplete+0x36>
	} else {
		return false;
 801a948:	2300      	movs	r3, #0
	}
}
 801a94a:	4618      	mov	r0, r3
 801a94c:	3714      	adds	r7, #20
 801a94e:	46bd      	mov	sp, r7
 801a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a954:	4770      	bx	lr
	...

0801a958 <DMA_Restart>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
	if(dmah == &hdma_tim2_ch1){
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	4a12      	ldr	r2, [pc, #72]	; (801a9ac <DMA_Restart+0x54>)
 801a964:	4293      	cmp	r3, r2
 801a966:	d10e      	bne.n	801a986 <DMA_Restart+0x2e>
		HAL_DMA_Abort(&hdma_tim2_ch1);
 801a968:	4810      	ldr	r0, [pc, #64]	; (801a9ac <DMA_Restart+0x54>)
 801a96a:	f7f0 fd5b 	bl	800b424 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801a96e:	4b10      	ldr	r3, [pc, #64]	; (801a9b0 <DMA_Restart+0x58>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	3334      	adds	r3, #52	; 0x34
 801a974:	4619      	mov	r1, r3
 801a976:	4a0f      	ldr	r2, [pc, #60]	; (801a9b4 <DMA_Restart+0x5c>)
 801a978:	4b0f      	ldr	r3, [pc, #60]	; (801a9b8 <DMA_Restart+0x60>)
 801a97a:	88db      	ldrh	r3, [r3, #6]
 801a97c:	b29b      	uxth	r3, r3
 801a97e:	480b      	ldr	r0, [pc, #44]	; (801a9ac <DMA_Restart+0x54>)
 801a980:	f7f0 fc74 	bl	800b26c <HAL_DMA_Start>
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
	}
}
 801a984:	e00d      	b.n	801a9a2 <DMA_Restart+0x4a>
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a986:	480d      	ldr	r0, [pc, #52]	; (801a9bc <DMA_Restart+0x64>)
 801a988:	f7f0 fd4c 	bl	800b424 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801a98c:	4b08      	ldr	r3, [pc, #32]	; (801a9b0 <DMA_Restart+0x58>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	3338      	adds	r3, #56	; 0x38
 801a992:	4619      	mov	r1, r3
 801a994:	4a0a      	ldr	r2, [pc, #40]	; (801a9c0 <DMA_Restart+0x68>)
 801a996:	4b08      	ldr	r3, [pc, #32]	; (801a9b8 <DMA_Restart+0x60>)
 801a998:	891b      	ldrh	r3, [r3, #8]
 801a99a:	b29b      	uxth	r3, r3
 801a99c:	4807      	ldr	r0, [pc, #28]	; (801a9bc <DMA_Restart+0x64>)
 801a99e:	f7f0 fc65 	bl	800b26c <HAL_DMA_Start>
}
 801a9a2:	bf00      	nop
 801a9a4:	3708      	adds	r7, #8
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	20016680 	.word	0x20016680
 801a9b0:	20016500 	.word	0x20016500
 801a9b4:	20004580 	.word	0x20004580
 801a9b8:	20004570 	.word	0x20004570
 801a9bc:	20016740 	.word	0x20016740
 801a9c0:	20004738 	.word	0x20004738

0801a9c4 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b088      	sub	sp, #32
 801a9c8:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a9ca:	f107 0314 	add.w	r3, r7, #20
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	601a      	str	r2, [r3, #0]
 801a9d2:	605a      	str	r2, [r3, #4]
 801a9d4:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801a9d6:	1d3b      	adds	r3, r7, #4
 801a9d8:	2200      	movs	r2, #0
 801a9da:	601a      	str	r2, [r3, #0]
 801a9dc:	605a      	str	r2, [r3, #4]
 801a9de:	609a      	str	r2, [r3, #8]
 801a9e0:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 801a9e2:	4b1c      	ldr	r3, [pc, #112]	; (801aa54 <MX_TIM6_Init+0x90>)
 801a9e4:	4a1c      	ldr	r2, [pc, #112]	; (801aa58 <MX_TIM6_Init+0x94>)
 801a9e6:	601a      	str	r2, [r3, #0]

	htim6.Init.Period = 0x7FF;
 801a9e8:	4b1a      	ldr	r3, [pc, #104]	; (801aa54 <MX_TIM6_Init+0x90>)
 801a9ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a9ee:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = 0;
 801a9f0:	4b18      	ldr	r3, [pc, #96]	; (801aa54 <MX_TIM6_Init+0x90>)
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	605a      	str	r2, [r3, #4]
	htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a9f6:	4b17      	ldr	r3, [pc, #92]	; (801aa54 <MX_TIM6_Init+0x90>)
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a9fc:	4b15      	ldr	r3, [pc, #84]	; (801aa54 <MX_TIM6_Init+0x90>)
 801a9fe:	2200      	movs	r2, #0
 801aa00:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801aa02:	4b14      	ldr	r3, [pc, #80]	; (801aa54 <MX_TIM6_Init+0x90>)
 801aa04:	2200      	movs	r2, #0
 801aa06:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801aa08:	4812      	ldr	r0, [pc, #72]	; (801aa54 <MX_TIM6_Init+0x90>)
 801aa0a:	f7f2 ff9f 	bl	800d94c <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim6);
 801aa0e:	4811      	ldr	r0, [pc, #68]	; (801aa54 <MX_TIM6_Init+0x90>)
 801aa10:	f7fe f906 	bl	8018c20 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801aa14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa18:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim6, &sClockSourceConfig) != HAL_OK)
 801aa1a:	1d3b      	adds	r3, r7, #4
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	480d      	ldr	r0, [pc, #52]	; (801aa54 <MX_TIM6_Init+0x90>)
 801aa20:	f7f5 f86a 	bl	800faf8 <HAL_TIM_ConfigClockSource>
 801aa24:	4603      	mov	r3, r0
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d001      	beq.n	801aa2e <MX_TIM6_Init+0x6a>
	{
		Error_Handler();
 801aa2a:	f7fd febd 	bl	80187a8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801aa2e:	2320      	movs	r3, #32
 801aa30:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aa32:	2300      	movs	r3, #0
 801aa34:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801aa36:	f107 0314 	add.w	r3, r7, #20
 801aa3a:	4619      	mov	r1, r3
 801aa3c:	4805      	ldr	r0, [pc, #20]	; (801aa54 <MX_TIM6_Init+0x90>)
 801aa3e:	f7f7 fe3d 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>
 801aa42:	4603      	mov	r3, r0
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d001      	beq.n	801aa4c <MX_TIM6_Init+0x88>
	{
		Error_Handler();
 801aa48:	f7fd feae 	bl	80187a8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801aa4c:	bf00      	nop
 801aa4e:	3720      	adds	r7, #32
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	20016860 	.word	0x20016860
 801aa58:	40001000 	.word	0x40001000

0801aa5c <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b088      	sub	sp, #32
 801aa60:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801aa62:	f107 0314 	add.w	r3, r7, #20
 801aa66:	2200      	movs	r2, #0
 801aa68:	601a      	str	r2, [r3, #0]
 801aa6a:	605a      	str	r2, [r3, #4]
 801aa6c:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801aa6e:	1d3b      	adds	r3, r7, #4
 801aa70:	2200      	movs	r2, #0
 801aa72:	601a      	str	r2, [r3, #0]
 801aa74:	605a      	str	r2, [r3, #4]
 801aa76:	609a      	str	r2, [r3, #8]
 801aa78:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 801aa7a:	4b1c      	ldr	r3, [pc, #112]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa7c:	4a1c      	ldr	r2, [pc, #112]	; (801aaf0 <MX_TIM7_Init+0x94>)
 801aa7e:	601a      	str	r2, [r3, #0]

	htim7.Init.Period = 0x7FF;
 801aa80:	4b1a      	ldr	r3, [pc, #104]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801aa86:	60da      	str	r2, [r3, #12]
	htim7.Init.Prescaler = 0;
 801aa88:	4b18      	ldr	r3, [pc, #96]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa8a:	2200      	movs	r2, #0
 801aa8c:	605a      	str	r2, [r3, #4]
	htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801aa8e:	4b17      	ldr	r3, [pc, #92]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa90:	2200      	movs	r2, #0
 801aa92:	611a      	str	r2, [r3, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aa94:	4b15      	ldr	r3, [pc, #84]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa96:	2200      	movs	r2, #0
 801aa98:	609a      	str	r2, [r3, #8]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801aa9a:	4b14      	ldr	r3, [pc, #80]	; (801aaec <MX_TIM7_Init+0x90>)
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801aaa0:	4812      	ldr	r0, [pc, #72]	; (801aaec <MX_TIM7_Init+0x90>)
 801aaa2:	f7f2 ff53 	bl	800d94c <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim7);
 801aaa6:	4811      	ldr	r0, [pc, #68]	; (801aaec <MX_TIM7_Init+0x90>)
 801aaa8:	f7fe f8ba 	bl	8018c20 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801aaac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aab0:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim7, &sClockSourceConfig) != HAL_OK)
 801aab2:	1d3b      	adds	r3, r7, #4
 801aab4:	4619      	mov	r1, r3
 801aab6:	480d      	ldr	r0, [pc, #52]	; (801aaec <MX_TIM7_Init+0x90>)
 801aab8:	f7f5 f81e 	bl	800faf8 <HAL_TIM_ConfigClockSource>
 801aabc:	4603      	mov	r3, r0
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d001      	beq.n	801aac6 <MX_TIM7_Init+0x6a>
	{
		Error_Handler();
 801aac2:	f7fd fe71 	bl	80187a8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801aac6:	2320      	movs	r3, #32
 801aac8:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aaca:	2300      	movs	r3, #0
 801aacc:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801aace:	f107 0314 	add.w	r3, r7, #20
 801aad2:	4619      	mov	r1, r3
 801aad4:	4805      	ldr	r0, [pc, #20]	; (801aaec <MX_TIM7_Init+0x90>)
 801aad6:	f7f7 fdf1 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>
 801aada:	4603      	mov	r3, r0
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d001      	beq.n	801aae4 <MX_TIM7_Init+0x88>
	{
		Error_Handler();
 801aae0:	f7fd fe62 	bl	80187a8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801aae4:	bf00      	nop
 801aae6:	3720      	adds	r7, #32
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}
 801aaec:	20016920 	.word	0x20016920
 801aaf0:	40001400 	.word	0x40001400

0801aaf4 <MX_TIM1_GEN_PWM_Init>:
 * @note   TIM1 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM1_GEN_PWM_Init(void)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b09c      	sub	sp, #112	; 0x70
 801aaf8:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* ARR = 1024 (10 bit resolution in default). F303 -> PA9 -> D8 -> Channel 1 */
	htim1.Instance = TIM1;
 801aafa:	4b35      	ldr	r3, [pc, #212]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801aafc:	4a35      	ldr	r2, [pc, #212]	; (801abd4 <MX_TIM1_GEN_PWM_Init+0xe0>)
 801aafe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 801ab00:	4b33      	ldr	r3, [pc, #204]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab02:	2200      	movs	r2, #0
 801ab04:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ab06:	4b32      	ldr	r3, [pc, #200]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab08:	2200      	movs	r2, #0
 801ab0a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1023;
 801ab0c:	4b30      	ldr	r3, [pc, #192]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801ab12:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801ab14:	4b2e      	ldr	r3, [pc, #184]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab16:	2200      	movs	r2, #0
 801ab18:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801ab1a:	4b2d      	ldr	r3, [pc, #180]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801ab20:	4b2b      	ldr	r3, [pc, #172]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab22:	2280      	movs	r2, #128	; 0x80
 801ab24:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801ab26:	482a      	ldr	r0, [pc, #168]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab28:	f7f2 ff10 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ab2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab30:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801ab32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ab36:	4619      	mov	r1, r3
 801ab38:	4825      	ldr	r0, [pc, #148]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab3a:	f7f4 ffdd 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim1);
 801ab3e:	4824      	ldr	r0, [pc, #144]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab40:	f7f3 fb3e 	bl	800e1c0 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ab44:	2300      	movs	r3, #0
 801ab46:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801ab50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ab54:	4619      	mov	r1, r3
 801ab56:	481e      	ldr	r0, [pc, #120]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab58:	f7f7 fdb0 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801ab5c:	2360      	movs	r3, #96	; 0x60
 801ab5e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 512;
 801ab60:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ab66:	2300      	movs	r3, #0
 801ab68:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801ab72:	2300      	movs	r3, #0
 801ab74:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801ab76:	2300      	movs	r3, #0
 801ab78:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 801ab7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ab7e:	2204      	movs	r2, #4
 801ab80:	4619      	mov	r1, r3
 801ab82:	4813      	ldr	r0, [pc, #76]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab84:	f7f4 fd44 	bl	800f610 <HAL_TIM_PWM_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801ab90:	2300      	movs	r3, #0
 801ab92:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801ab94:	2300      	movs	r3, #0
 801ab96:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801ab98:	2300      	movs	r3, #0
 801ab9a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801ab9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801aba0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801aba2:	2300      	movs	r3, #0
 801aba4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801aba6:	2300      	movs	r3, #0
 801aba8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801abaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801abae:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801abb0:	2300      	movs	r3, #0
 801abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801abb4:	2300      	movs	r3, #0
 801abb6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 801abb8:	1d3b      	adds	r3, r7, #4
 801abba:	4619      	mov	r1, r3
 801abbc:	4804      	ldr	r0, [pc, #16]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801abbe:	f7f7 feb5 	bl	801292c <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_TIM_Base_MspInit(&htim1);
 801abc2:	4803      	ldr	r0, [pc, #12]	; (801abd0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801abc4:	f7fe f82c 	bl	8018c20 <HAL_TIM_Base_MspInit>
}
 801abc8:	bf00      	nop
 801abca:	3770      	adds	r7, #112	; 0x70
 801abcc:	46bd      	mov	sp, r7
 801abce:	bd80      	pop	{r7, pc}
 801abd0:	20016440 	.word	0x20016440
 801abd4:	40012c00 	.word	0x40012c00

0801abd8 <MX_TIM3_GEN_PWM_Init>:
 * @note   TIM3 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM3_GEN_PWM_Init(void)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b08e      	sub	sp, #56	; 0x38
 801abdc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	/* F303 -> PB4 -> D5 -> Channel 2  */
	htim3.Instance = TIM3;
 801abde:	4b21      	ldr	r3, [pc, #132]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801abe0:	4a21      	ldr	r2, [pc, #132]	; (801ac68 <MX_TIM3_GEN_PWM_Init+0x90>)
 801abe2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 801abe4:	4b1f      	ldr	r3, [pc, #124]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801abe6:	2200      	movs	r2, #0
 801abe8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801abea:	4b1e      	ldr	r3, [pc, #120]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801abec:	2200      	movs	r2, #0
 801abee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 511;
 801abf0:	4b1c      	ldr	r3, [pc, #112]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801abf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 801abf6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801abf8:	4b1a      	ldr	r3, [pc, #104]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801abfa:	2200      	movs	r2, #0
 801abfc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801abfe:	4b19      	ldr	r3, [pc, #100]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac00:	2280      	movs	r2, #128	; 0x80
 801ac02:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 801ac04:	4817      	ldr	r0, [pc, #92]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac06:	f7f2 fea1 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ac0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 801ac10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ac14:	4619      	mov	r1, r3
 801ac16:	4813      	ldr	r0, [pc, #76]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac18:	f7f4 ff6e 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim3);
 801ac1c:	4811      	ldr	r0, [pc, #68]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac1e:	f7f3 facf 	bl	800e1c0 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ac22:	2300      	movs	r3, #0
 801ac24:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ac26:	2300      	movs	r3, #0
 801ac28:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 801ac2a:	f107 031c 	add.w	r3, r7, #28
 801ac2e:	4619      	mov	r1, r3
 801ac30:	480c      	ldr	r0, [pc, #48]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac32:	f7f7 fd43 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801ac36:	2360      	movs	r3, #96	; 0x60
 801ac38:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 256;
 801ac3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ac3e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ac40:	2300      	movs	r3, #0
 801ac42:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ac44:	2300      	movs	r3, #0
 801ac46:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801ac48:	463b      	mov	r3, r7
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	4619      	mov	r1, r3
 801ac4e:	4805      	ldr	r0, [pc, #20]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac50:	f7f4 fcde 	bl	800f610 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_Base_MspInit(&htim3);
 801ac54:	4803      	ldr	r0, [pc, #12]	; (801ac64 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac56:	f7fd ffe3 	bl	8018c20 <HAL_TIM_Base_MspInit>
}
 801ac5a:	bf00      	nop
 801ac5c:	3738      	adds	r7, #56	; 0x38
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	20016380 	.word	0x20016380
 801ac68:	40000400 	.word	0x40000400

0801ac6c <MX_TIM6_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM6 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM6_GEN_PWM_Init(void)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b084      	sub	sp, #16
 801ac70:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance = TIM6;
 801ac72:	4b11      	ldr	r3, [pc, #68]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac74:	4a11      	ldr	r2, [pc, #68]	; (801acbc <MX_TIM6_GEN_PWM_Init+0x50>)
 801ac76:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 801ac78:	4b0f      	ldr	r3, [pc, #60]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ac7e:	4b0e      	ldr	r3, [pc, #56]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac80:	2200      	movs	r2, #0
 801ac82:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0x7FF;
 801ac84:	4b0c      	ldr	r3, [pc, #48]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ac8a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ac8c:	4b0a      	ldr	r3, [pc, #40]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac8e:	2200      	movs	r2, #0
 801ac90:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801ac92:	4809      	ldr	r0, [pc, #36]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801ac94:	f7f2 fe5a 	bl	800d94c <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801ac98:	2320      	movs	r3, #32
 801ac9a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 801aca0:	1d3b      	adds	r3, r7, #4
 801aca2:	4619      	mov	r1, r3
 801aca4:	4804      	ldr	r0, [pc, #16]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aca6:	f7f7 fd09 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim6);
 801acaa:	4803      	ldr	r0, [pc, #12]	; (801acb8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acac:	f7fd ffb8 	bl	8018c20 <HAL_TIM_Base_MspInit>
}
 801acb0:	bf00      	nop
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	20016860 	.word	0x20016860
 801acbc:	40001000 	.word	0x40001000

0801acc0 <MX_TIM7_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM7 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM7_GEN_PWM_Init(void)
{
 801acc0:	b580      	push	{r7, lr}
 801acc2:	b084      	sub	sp, #16
 801acc4:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 801acc6:	4b11      	ldr	r3, [pc, #68]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acc8:	4a11      	ldr	r2, [pc, #68]	; (801ad10 <MX_TIM7_GEN_PWM_Init+0x50>)
 801acca:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 801accc:	4b0f      	ldr	r3, [pc, #60]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acce:	2200      	movs	r2, #0
 801acd0:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801acd2:	4b0e      	ldr	r3, [pc, #56]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acd4:	2200      	movs	r2, #0
 801acd6:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 0x7FF;
 801acd8:	4b0c      	ldr	r3, [pc, #48]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acda:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801acde:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ace0:	4b0a      	ldr	r3, [pc, #40]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ace2:	2200      	movs	r2, #0
 801ace4:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801ace6:	4809      	ldr	r0, [pc, #36]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ace8:	f7f2 fe30 	bl	800d94c <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801acec:	2320      	movs	r3, #32
 801acee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801acf0:	2300      	movs	r3, #0
 801acf2:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 801acf4:	1d3b      	adds	r3, r7, #4
 801acf6:	4619      	mov	r1, r3
 801acf8:	4804      	ldr	r0, [pc, #16]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acfa:	f7f7 fcdf 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim7);
 801acfe:	4803      	ldr	r0, [pc, #12]	; (801ad0c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad00:	f7fd ff8e 	bl	8018c20 <HAL_TIM_Base_MspInit>
}
 801ad04:	bf00      	nop
 801ad06:	3710      	adds	r7, #16
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}
 801ad0c:	20016920 	.word	0x20016920
 801ad10:	40001400 	.word	0x40001400

0801ad14 <TIM6_GEN_DAC_MspInit>:
#endif //USE_GEN_PWM

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ad14:	b480      	push	{r7}
 801ad16:	b085      	sub	sp, #20
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 801ad1c:	4b08      	ldr	r3, [pc, #32]	; (801ad40 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad20:	4a07      	ldr	r2, [pc, #28]	; (801ad40 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad22:	f043 0310 	orr.w	r3, r3, #16
 801ad26:	6593      	str	r3, [r2, #88]	; 0x58
 801ad28:	4b05      	ldr	r3, [pc, #20]	; (801ad40 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad2c:	f003 0310 	and.w	r3, r3, #16
 801ad30:	60fb      	str	r3, [r7, #12]
 801ad32:	68fb      	ldr	r3, [r7, #12]
}
 801ad34:	bf00      	nop
 801ad36:	3714      	adds	r7, #20
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3e:	4770      	bx	lr
 801ad40:	40021000 	.word	0x40021000

0801ad44 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ad44:	b480      	push	{r7}
 801ad46:	b085      	sub	sp, #20
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 801ad4c:	4b08      	ldr	r3, [pc, #32]	; (801ad70 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad50:	4a07      	ldr	r2, [pc, #28]	; (801ad70 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad52:	f043 0320 	orr.w	r3, r3, #32
 801ad56:	6593      	str	r3, [r2, #88]	; 0x58
 801ad58:	4b05      	ldr	r3, [pc, #20]	; (801ad70 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad5c:	f003 0320 	and.w	r3, r3, #32
 801ad60:	60fb      	str	r3, [r7, #12]
 801ad62:	68fb      	ldr	r3, [r7, #12]
}
 801ad64:	bf00      	nop
 801ad66:	3714      	adds	r7, #20
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6e:	4770      	bx	lr
 801ad70:	40021000 	.word	0x40021000

0801ad74 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ad74:	b480      	push	{r7}
 801ad76:	b083      	sub	sp, #12
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801ad7c:	4b05      	ldr	r3, [pc, #20]	; (801ad94 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801ad7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad80:	4a04      	ldr	r2, [pc, #16]	; (801ad94 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801ad82:	f023 0310 	bic.w	r3, r3, #16
 801ad86:	6593      	str	r3, [r2, #88]	; 0x58
}
 801ad88:	bf00      	nop
 801ad8a:	370c      	adds	r7, #12
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad92:	4770      	bx	lr
 801ad94:	40021000 	.word	0x40021000

0801ad98 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ad98:	b480      	push	{r7}
 801ad9a:	b083      	sub	sp, #12
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801ada0:	4b05      	ldr	r3, [pc, #20]	; (801adb8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ada4:	4a04      	ldr	r2, [pc, #16]	; (801adb8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801ada6:	f023 0320 	bic.w	r3, r3, #32
 801adaa:	6593      	str	r3, [r2, #88]	; 0x58
}
 801adac:	bf00      	nop
 801adae:	370c      	adds	r7, #12
 801adb0:	46bd      	mov	sp, r7
 801adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb6:	4770      	bx	lr
 801adb8:	40021000 	.word	0x40021000

0801adbc <TIM1_GEN_PWM_MspInit>:
#endif //USE_GEN

#ifdef USE_GEN_PWM

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b088      	sub	sp, #32
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 801adc4:	4b10      	ldr	r3, [pc, #64]	; (801ae08 <TIM1_GEN_PWM_MspInit+0x4c>)
 801adc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801adc8:	4a0f      	ldr	r2, [pc, #60]	; (801ae08 <TIM1_GEN_PWM_MspInit+0x4c>)
 801adca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801adce:	6613      	str	r3, [r2, #96]	; 0x60
 801add0:	4b0d      	ldr	r3, [pc, #52]	; (801ae08 <TIM1_GEN_PWM_MspInit+0x4c>)
 801add2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801add4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801add8:	60bb      	str	r3, [r7, #8]
 801adda:	68bb      	ldr	r3, [r7, #8]

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 801addc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ade0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ade2:	2302      	movs	r3, #2
 801ade4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ade6:	2300      	movs	r3, #0
 801ade8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801adea:	2302      	movs	r3, #2
 801adec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 801adee:	2306      	movs	r3, #6
 801adf0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801adf2:	f107 030c 	add.w	r3, r7, #12
 801adf6:	4619      	mov	r1, r3
 801adf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801adfc:	f7f0 fdc4 	bl	800b988 <HAL_GPIO_Init>
}
 801ae00:	bf00      	nop
 801ae02:	3720      	adds	r7, #32
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}
 801ae08:	40021000 	.word	0x40021000

0801ae0c <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b088      	sub	sp, #32
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 801ae14:	4b0f      	ldr	r3, [pc, #60]	; (801ae54 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae18:	4a0e      	ldr	r2, [pc, #56]	; (801ae54 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae1a:	f043 0302 	orr.w	r3, r3, #2
 801ae1e:	6593      	str	r3, [r2, #88]	; 0x58
 801ae20:	4b0c      	ldr	r3, [pc, #48]	; (801ae54 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae24:	f003 0302 	and.w	r3, r3, #2
 801ae28:	60bb      	str	r3, [r7, #8]
 801ae2a:	68bb      	ldr	r3, [r7, #8]

	/**TIM3 GPIO Configuration
		PB4     ------> TIM3_CH1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 801ae2c:	2310      	movs	r3, #16
 801ae2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae30:	2302      	movs	r3, #2
 801ae32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae34:	2300      	movs	r3, #0
 801ae36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ae38:	2302      	movs	r3, #2
 801ae3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801ae3c:	2302      	movs	r3, #2
 801ae3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ae40:	f107 030c 	add.w	r3, r7, #12
 801ae44:	4619      	mov	r1, r3
 801ae46:	4804      	ldr	r0, [pc, #16]	; (801ae58 <TIM3_GEN_PWM_MspInit+0x4c>)
 801ae48:	f7f0 fd9e 	bl	800b988 <HAL_GPIO_Init>
}
 801ae4c:	bf00      	nop
 801ae4e:	3720      	adds	r7, #32
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}
 801ae54:	40021000 	.word	0x40021000
 801ae58:	48000400 	.word	0x48000400

0801ae5c <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b088      	sub	sp, #32
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 801ae64:	4b21      	ldr	r3, [pc, #132]	; (801aeec <TIM6_GEN_PWM_MspInit+0x90>)
 801ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae68:	4a20      	ldr	r2, [pc, #128]	; (801aeec <TIM6_GEN_PWM_MspInit+0x90>)
 801ae6a:	f043 0310 	orr.w	r3, r3, #16
 801ae6e:	6593      	str	r3, [r2, #88]	; 0x58
 801ae70:	4b1e      	ldr	r3, [pc, #120]	; (801aeec <TIM6_GEN_PWM_MspInit+0x90>)
 801ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae74:	f003 0310 	and.w	r3, r3, #16
 801ae78:	60bb      	str	r3, [r7, #8]
 801ae7a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA2_Channel3;
 801ae7c:	4b1c      	ldr	r3, [pc, #112]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae7e:	4a1d      	ldr	r2, [pc, #116]	; (801aef4 <TIM6_GEN_PWM_MspInit+0x98>)
 801ae80:	601a      	str	r2, [r3, #0]
	hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 801ae82:	4b1b      	ldr	r3, [pc, #108]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae84:	2208      	movs	r2, #8
 801ae86:	605a      	str	r2, [r3, #4]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801ae88:	4b19      	ldr	r3, [pc, #100]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae8a:	2210      	movs	r2, #16
 801ae8c:	609a      	str	r2, [r3, #8]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801ae8e:	4b18      	ldr	r3, [pc, #96]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae90:	2200      	movs	r2, #0
 801ae92:	60da      	str	r2, [r3, #12]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 801ae94:	4b16      	ldr	r3, [pc, #88]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae96:	2280      	movs	r2, #128	; 0x80
 801ae98:	611a      	str	r2, [r3, #16]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801ae9a:	4b15      	ldr	r3, [pc, #84]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801ae9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801aea0:	615a      	str	r2, [r3, #20]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801aea2:	4b13      	ldr	r3, [pc, #76]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aea8:	619a      	str	r2, [r3, #24]
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 801aeaa:	4b11      	ldr	r3, [pc, #68]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeac:	2220      	movs	r2, #32
 801aeae:	61da      	str	r2, [r3, #28]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 801aeb0:	4b0f      	ldr	r3, [pc, #60]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801aeb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 801aeb8:	480d      	ldr	r0, [pc, #52]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeba:	f7ef ff33 	bl	800ad24 <HAL_DMA_Init>
 801aebe:	4603      	mov	r3, r0
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d001      	beq.n	801aec8 <TIM6_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801aec4:	f7fd fc70 	bl	80187a8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801aec8:	4b0b      	ldr	r3, [pc, #44]	; (801aef8 <TIM6_GEN_PWM_MspInit+0x9c>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	68da      	ldr	r2, [r3, #12]
 801aece:	4b0a      	ldr	r3, [pc, #40]	; (801aef8 <TIM6_GEN_PWM_MspInit+0x9c>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801aed6:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	4a05      	ldr	r2, [pc, #20]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aedc:	621a      	str	r2, [r3, #32]
 801aede:	4a04      	ldr	r2, [pc, #16]	; (801aef0 <TIM6_GEN_PWM_MspInit+0x94>)
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	6293      	str	r3, [r2, #40]	; 0x28
}
 801aee4:	bf00      	nop
 801aee6:	3720      	adds	r7, #32
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}
 801aeec:	40021000 	.word	0x40021000
 801aef0:	20016800 	.word	0x20016800
 801aef4:	40020430 	.word	0x40020430
 801aef8:	20016860 	.word	0x20016860

0801aefc <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b088      	sub	sp, #32
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_TIM7_CLK_ENABLE();
 801af04:	4b21      	ldr	r3, [pc, #132]	; (801af8c <TIM7_GEN_PWM_MspInit+0x90>)
 801af06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af08:	4a20      	ldr	r2, [pc, #128]	; (801af8c <TIM7_GEN_PWM_MspInit+0x90>)
 801af0a:	f043 0320 	orr.w	r3, r3, #32
 801af0e:	6593      	str	r3, [r2, #88]	; 0x58
 801af10:	4b1e      	ldr	r3, [pc, #120]	; (801af8c <TIM7_GEN_PWM_MspInit+0x90>)
 801af12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af14:	f003 0320 	and.w	r3, r3, #32
 801af18:	60bb      	str	r3, [r7, #8]
 801af1a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA2_Channel4;   // DMA2_Channel4
 801af1c:	4b1c      	ldr	r3, [pc, #112]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af1e:	4a1d      	ldr	r2, [pc, #116]	; (801af94 <TIM7_GEN_PWM_MspInit+0x98>)
 801af20:	601a      	str	r2, [r3, #0]
	hdma_tim7_up.Init.Request = DMA_REQUEST_TIM7_UP;
 801af22:	4b1b      	ldr	r3, [pc, #108]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af24:	2209      	movs	r2, #9
 801af26:	605a      	str	r2, [r3, #4]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801af28:	4b19      	ldr	r3, [pc, #100]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af2a:	2210      	movs	r2, #16
 801af2c:	609a      	str	r2, [r3, #8]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801af2e:	4b18      	ldr	r3, [pc, #96]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af30:	2200      	movs	r2, #0
 801af32:	60da      	str	r2, [r3, #12]
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 801af34:	4b16      	ldr	r3, [pc, #88]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af36:	2280      	movs	r2, #128	; 0x80
 801af38:	611a      	str	r2, [r3, #16]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801af3a:	4b15      	ldr	r3, [pc, #84]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801af40:	615a      	str	r2, [r3, #20]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801af42:	4b13      	ldr	r3, [pc, #76]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801af48:	619a      	str	r2, [r3, #24]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 801af4a:	4b11      	ldr	r3, [pc, #68]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af4c:	2220      	movs	r2, #32
 801af4e:	61da      	str	r2, [r3, #28]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 801af50:	4b0f      	ldr	r3, [pc, #60]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801af56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 801af58:	480d      	ldr	r0, [pc, #52]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af5a:	f7ef fee3 	bl	800ad24 <HAL_DMA_Init>
 801af5e:	4603      	mov	r3, r0
 801af60:	2b00      	cmp	r3, #0
 801af62:	d001      	beq.n	801af68 <TIM7_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801af64:	f7fd fc20 	bl	80187a8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801af68:	4b0b      	ldr	r3, [pc, #44]	; (801af98 <TIM7_GEN_PWM_MspInit+0x9c>)
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	68da      	ldr	r2, [r3, #12]
 801af6e:	4b0a      	ldr	r3, [pc, #40]	; (801af98 <TIM7_GEN_PWM_MspInit+0x9c>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801af76:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	4a05      	ldr	r2, [pc, #20]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af7c:	621a      	str	r2, [r3, #32]
 801af7e:	4a04      	ldr	r2, [pc, #16]	; (801af90 <TIM7_GEN_PWM_MspInit+0x94>)
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	6293      	str	r3, [r2, #40]	; 0x28
}
 801af84:	bf00      	nop
 801af86:	3720      	adds	r7, #32
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	40021000 	.word	0x40021000
 801af90:	200167a0 	.word	0x200167a0
 801af94:	40020444 	.word	0x40020444
 801af98:	20016920 	.word	0x20016920

0801af9c <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801af9c:	b480      	push	{r7}
 801af9e:	b083      	sub	sp, #12
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM1_CLK_DISABLE();
 801afa4:	4b05      	ldr	r3, [pc, #20]	; (801afbc <TIM1_GEN_PWM_MspDeinit+0x20>)
 801afa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801afa8:	4a04      	ldr	r2, [pc, #16]	; (801afbc <TIM1_GEN_PWM_MspDeinit+0x20>)
 801afaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801afae:	6613      	str	r3, [r2, #96]	; 0x60
}
 801afb0:	bf00      	nop
 801afb2:	370c      	adds	r7, #12
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr
 801afbc:	40021000 	.word	0x40021000

0801afc0 <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801afc0:	b480      	push	{r7}
 801afc2:	b083      	sub	sp, #12
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM3_CLK_DISABLE();
 801afc8:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801afca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801afcc:	4a04      	ldr	r2, [pc, #16]	; (801afe0 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801afce:	f023 0302 	bic.w	r3, r3, #2
 801afd2:	6593      	str	r3, [r2, #88]	; 0x58
}
 801afd4:	bf00      	nop
 801afd6:	370c      	adds	r7, #12
 801afd8:	46bd      	mov	sp, r7
 801afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afde:	4770      	bx	lr
 801afe0:	40021000 	.word	0x40021000

0801afe4 <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b082      	sub	sp, #8
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801afec:	4b07      	ldr	r3, [pc, #28]	; (801b00c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801afee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aff0:	4a06      	ldr	r2, [pc, #24]	; (801b00c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801aff2:	f023 0310 	bic.w	r3, r3, #16
 801aff6:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	6a1b      	ldr	r3, [r3, #32]
 801affc:	4618      	mov	r0, r3
 801affe:	f7f0 f829 	bl	800b054 <HAL_DMA_DeInit>
}
 801b002:	bf00      	nop
 801b004:	3708      	adds	r7, #8
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}
 801b00a:	bf00      	nop
 801b00c:	40021000 	.word	0x40021000

0801b010 <TIM7_GEN_PWM_MspDeinit>:

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801b018:	4b07      	ldr	r3, [pc, #28]	; (801b038 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801b01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b01c:	4a06      	ldr	r2, [pc, #24]	; (801b038 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801b01e:	f023 0320 	bic.w	r3, r3, #32
 801b022:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	6a1b      	ldr	r3, [r3, #32]
 801b028:	4618      	mov	r0, r3
 801b02a:	f7f0 f813 	bl	800b054 <HAL_DMA_DeInit>
}
 801b02e:	bf00      	nop
 801b030:	3708      	adds	r7, #8
 801b032:	46bd      	mov	sp, r7
 801b034:	bd80      	pop	{r7, pc}
 801b036:	bf00      	nop
 801b038:	40021000 	.word	0x40021000

0801b03c <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b088      	sub	sp, #32
 801b040:	af02      	add	r7, sp, #8
 801b042:	60f8      	str	r0, [r7, #12]
 801b044:	460b      	mov	r3, r1
 801b046:	607a      	str	r2, [r7, #4]
 801b048:	72fb      	strb	r3, [r7, #11]
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801b04a:	f7f1 ff65 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801b04e:	6178      	str	r0, [r7, #20]
	if(chan==0){
 801b050:	7afb      	ldrb	r3, [r7, #11]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d109      	bne.n	801b06a <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 801b056:	2301      	movs	r3, #1
 801b058:	9300      	str	r3, [sp, #0]
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	68fa      	ldr	r2, [r7, #12]
 801b05e:	6979      	ldr	r1, [r7, #20]
 801b060:	480b      	ldr	r0, [pc, #44]	; (801b090 <TIM_Reconfig_gen+0x54>)
 801b062:	f7fd ff17 	bl	8018e94 <TIM_Reconfig>
 801b066:	4603      	mov	r3, r0
 801b068:	e00d      	b.n	801b086 <TIM_Reconfig_gen+0x4a>
	}else if(chan==1){
 801b06a:	7afb      	ldrb	r3, [r7, #11]
 801b06c:	2b01      	cmp	r3, #1
 801b06e:	d109      	bne.n	801b084 <TIM_Reconfig_gen+0x48>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 801b070:	2301      	movs	r3, #1
 801b072:	9300      	str	r3, [sp, #0]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	68fa      	ldr	r2, [r7, #12]
 801b078:	6979      	ldr	r1, [r7, #20]
 801b07a:	4806      	ldr	r0, [pc, #24]	; (801b094 <TIM_Reconfig_gen+0x58>)
 801b07c:	f7fd ff0a 	bl	8018e94 <TIM_Reconfig>
 801b080:	4603      	mov	r3, r0
 801b082:	e000      	b.n	801b086 <TIM_Reconfig_gen+0x4a>
	}else{
		return 0;
 801b084:	2300      	movs	r3, #0
	}
}
 801b086:	4618      	mov	r0, r3
 801b088:	3718      	adds	r7, #24
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	20016860 	.word	0x20016860
 801b094:	20016920 	.word	0x20016920

0801b098 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 801b098:	b580      	push	{r7, lr}
 801b09a:	b086      	sub	sp, #24
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	ed87 0b02 	vstr	d0, [r7, #8]
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	71fb      	strb	r3, [r7, #7]
	uint32_t periphClock;
	if(chan==0){
 801b0a6:	79fb      	ldrb	r3, [r7, #7]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d10d      	bne.n	801b0c8 <TIM_Reconfig_GenPwm+0x30>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801b0ac:	f7f1 ff34 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801b0b0:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 801b0b2:	ed97 0b02 	vldr	d0, [r7, #8]
 801b0b6:	6979      	ldr	r1, [r7, #20]
 801b0b8:	4813      	ldr	r0, [pc, #76]	; (801b108 <TIM_Reconfig_GenPwm+0x70>)
 801b0ba:	f7fd ff89 	bl	8018fd0 <TIM_ReconfigPrecise>
 801b0be:	eeb0 7a40 	vmov.f32	s14, s0
 801b0c2:	eef0 7a60 	vmov.f32	s15, s1
 801b0c6:	e012      	b.n	801b0ee <TIM_Reconfig_GenPwm+0x56>
	}else if(chan==1){
 801b0c8:	79fb      	ldrb	r3, [r7, #7]
 801b0ca:	2b01      	cmp	r3, #1
 801b0cc:	d10d      	bne.n	801b0ea <TIM_Reconfig_GenPwm+0x52>
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801b0ce:	f7f1 ff23 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801b0d2:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 801b0d4:	ed97 0b02 	vldr	d0, [r7, #8]
 801b0d8:	6979      	ldr	r1, [r7, #20]
 801b0da:	480c      	ldr	r0, [pc, #48]	; (801b10c <TIM_Reconfig_GenPwm+0x74>)
 801b0dc:	f7fd ff78 	bl	8018fd0 <TIM_ReconfigPrecise>
 801b0e0:	eeb0 7a40 	vmov.f32	s14, s0
 801b0e4:	eef0 7a60 	vmov.f32	s15, s1
 801b0e8:	e001      	b.n	801b0ee <TIM_Reconfig_GenPwm+0x56>
	}else{
		return 0;
 801b0ea:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b100 <TIM_Reconfig_GenPwm+0x68>
	}
}
 801b0ee:	eeb0 0a47 	vmov.f32	s0, s14
 801b0f2:	eef0 0a67 	vmov.f32	s1, s15
 801b0f6:	3718      	adds	r7, #24
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	f3af 8000 	nop.w
	...
 801b108:	20016440 	.word	0x20016440
 801b10c:	20016380 	.word	0x20016380

0801b110 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 801b110:	b580      	push	{r7, lr}
 801b112:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 801b114:	4803      	ldr	r0, [pc, #12]	; (801b124 <TIMGenEnable+0x14>)
 801b116:	f7f2 fd77 	bl	800dc08 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 801b11a:	4803      	ldr	r0, [pc, #12]	; (801b128 <TIMGenEnable+0x18>)
 801b11c:	f7f2 fd74 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801b120:	bf00      	nop
 801b122:	bd80      	pop	{r7, pc}
 801b124:	20016860 	.word	0x20016860
 801b128:	20016920 	.word	0x20016920

0801b12c <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 801b12c:	b580      	push	{r7, lr}
 801b12e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim6);
 801b130:	4803      	ldr	r0, [pc, #12]	; (801b140 <TIMGenDisable+0x14>)
 801b132:	f7f2 fdeb 	bl	800dd0c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 801b136:	4803      	ldr	r0, [pc, #12]	; (801b144 <TIMGenDisable+0x18>)
 801b138:	f7f2 fde8 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 801b13c:	bf00      	nop
 801b13e:	bd80      	pop	{r7, pc}
 801b140:	20016860 	.word	0x20016860
 801b144:	20016920 	.word	0x20016920

0801b148 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 801b148:	b580      	push	{r7, lr}
 801b14a:	af00      	add	r7, sp, #0
	MX_DAC_Init();
 801b14c:	f7fd f832 	bl	80181b4 <MX_DAC_Init>
	MX_TIM6_Init();
 801b150:	f7ff fc38 	bl	801a9c4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801b154:	f7ff fc82 	bl	801aa5c <MX_TIM7_Init>
}
 801b158:	bf00      	nop
 801b15a:	bd80      	pop	{r7, pc}

0801b15c <TIMGenDacDeinit>:
 * @brief  Deinit of arbitrary DAC generator.
 * @note 	Peripherals reset TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenDacDeinit(void){
 801b15c:	b480      	push	{r7}
 801b15e:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801b160:	4b14      	ldr	r3, [pc, #80]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b164:	4a13      	ldr	r2, [pc, #76]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b166:	f043 0310 	orr.w	r3, r3, #16
 801b16a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801b16c:	4b11      	ldr	r3, [pc, #68]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b170:	4a10      	ldr	r2, [pc, #64]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b172:	f023 0310 	bic.w	r3, r3, #16
 801b176:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801b178:	4b0e      	ldr	r3, [pc, #56]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b17c:	4a0d      	ldr	r2, [pc, #52]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b17e:	f043 0320 	orr.w	r3, r3, #32
 801b182:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801b184:	4b0b      	ldr	r3, [pc, #44]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b188:	4a0a      	ldr	r2, [pc, #40]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b18a:	f023 0320 	bic.w	r3, r3, #32
 801b18e:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_DAC1_FORCE_RESET();
 801b190:	4b08      	ldr	r3, [pc, #32]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b194:	4a07      	ldr	r2, [pc, #28]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b19a:	62d3      	str	r3, [r2, #44]	; 0x2c
	__HAL_RCC_DAC1_RELEASE_RESET();
 801b19c:	4b05      	ldr	r3, [pc, #20]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1a0:	4a04      	ldr	r2, [pc, #16]	; (801b1b4 <TIMGenDacDeinit+0x58>)
 801b1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b1a6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 801b1a8:	bf00      	nop
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b0:	4770      	bx	lr
 801b1b2:	bf00      	nop
 801b1b4:	40021000 	.word	0x40021000

0801b1b8 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	4603      	mov	r3, r0
 801b1c0:	71fb      	strb	r3, [r7, #7]
	if(chan==0){
 801b1c2:	79fb      	ldrb	r3, [r7, #7]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d110      	bne.n	801b1ea <TIM_DMA_Reconfig+0x32>
		HAL_DMA_Abort(&hdma_tim6_up);
 801b1c8:	4813      	ldr	r0, [pc, #76]	; (801b218 <TIM_DMA_Reconfig+0x60>)
 801b1ca:	f7f0 f92b 	bl	800b424 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 801b1ce:	4b13      	ldr	r3, [pc, #76]	; (801b21c <TIM_DMA_Reconfig+0x64>)
 801b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	4b12      	ldr	r3, [pc, #72]	; (801b220 <TIM_DMA_Reconfig+0x68>)
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	3338      	adds	r3, #56	; 0x38
 801b1da:	461a      	mov	r2, r3
 801b1dc:	4b0f      	ldr	r3, [pc, #60]	; (801b21c <TIM_DMA_Reconfig+0x64>)
 801b1de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801b1e0:	b29b      	uxth	r3, r3
 801b1e2:	480d      	ldr	r0, [pc, #52]	; (801b218 <TIM_DMA_Reconfig+0x60>)
 801b1e4:	f7f0 f842 	bl	800b26c <HAL_DMA_Start>
	}else if(chan==1){
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 801b1e8:	e012      	b.n	801b210 <TIM_DMA_Reconfig+0x58>
	}else if(chan==1){
 801b1ea:	79fb      	ldrb	r3, [r7, #7]
 801b1ec:	2b01      	cmp	r3, #1
 801b1ee:	d10f      	bne.n	801b210 <TIM_DMA_Reconfig+0x58>
		HAL_DMA_Abort(&hdma_tim7_up);
 801b1f0:	480c      	ldr	r0, [pc, #48]	; (801b224 <TIM_DMA_Reconfig+0x6c>)
 801b1f2:	f7f0 f917 	bl	800b424 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 801b1f6:	4b09      	ldr	r3, [pc, #36]	; (801b21c <TIM_DMA_Reconfig+0x64>)
 801b1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	4b0a      	ldr	r3, [pc, #40]	; (801b228 <TIM_DMA_Reconfig+0x70>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	3334      	adds	r3, #52	; 0x34
 801b202:	461a      	mov	r2, r3
 801b204:	4b05      	ldr	r3, [pc, #20]	; (801b21c <TIM_DMA_Reconfig+0x64>)
 801b206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801b208:	b29b      	uxth	r3, r3
 801b20a:	4806      	ldr	r0, [pc, #24]	; (801b224 <TIM_DMA_Reconfig+0x6c>)
 801b20c:	f7f0 f82e 	bl	800b26c <HAL_DMA_Start>
}
 801b210:	bf00      	nop
 801b212:	3708      	adds	r7, #8
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}
 801b218:	20016800 	.word	0x20016800
 801b21c:	20004948 	.word	0x20004948
 801b220:	20016440 	.word	0x20016440
 801b224:	200167a0 	.word	0x200167a0
 801b228:	20016380 	.word	0x20016380

0801b22c <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 801b22c:	b580      	push	{r7, lr}
 801b22e:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b230:	4b1d      	ldr	r3, [pc, #116]	; (801b2a8 <PWMGeneratingEnable+0x7c>)
 801b232:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b236:	b2db      	uxtb	r3, r3
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d10f      	bne.n	801b25c <PWMGeneratingEnable+0x30>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b23c:	4b1b      	ldr	r3, [pc, #108]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	68da      	ldr	r2, [r3, #12]
 801b242:	4b1a      	ldr	r3, [pc, #104]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b24a:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b24c:	2104      	movs	r1, #4
 801b24e:	4818      	ldr	r0, [pc, #96]	; (801b2b0 <PWMGeneratingEnable+0x84>)
 801b250:	f7f3 f88a 	bl	800e368 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b254:	4815      	ldr	r0, [pc, #84]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b256:	f7f2 fcd7 	bl	800dc08 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Start(&htim7);
	}
}
 801b25a:	e023      	b.n	801b2a4 <PWMGeneratingEnable+0x78>
	}else if(generator.numOfChannles>1){
 801b25c:	4b12      	ldr	r3, [pc, #72]	; (801b2a8 <PWMGeneratingEnable+0x7c>)
 801b25e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b262:	b2db      	uxtb	r3, r3
 801b264:	2b01      	cmp	r3, #1
 801b266:	d91d      	bls.n	801b2a4 <PWMGeneratingEnable+0x78>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b268:	4b10      	ldr	r3, [pc, #64]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	68da      	ldr	r2, [r3, #12]
 801b26e:	4b0f      	ldr	r3, [pc, #60]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b276:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b278:	2104      	movs	r1, #4
 801b27a:	480d      	ldr	r0, [pc, #52]	; (801b2b0 <PWMGeneratingEnable+0x84>)
 801b27c:	f7f3 f874 	bl	800e368 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b280:	480a      	ldr	r0, [pc, #40]	; (801b2ac <PWMGeneratingEnable+0x80>)
 801b282:	f7f2 fcc1 	bl	800dc08 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801b286:	4b0b      	ldr	r3, [pc, #44]	; (801b2b4 <PWMGeneratingEnable+0x88>)
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	68da      	ldr	r2, [r3, #12]
 801b28c:	4b09      	ldr	r3, [pc, #36]	; (801b2b4 <PWMGeneratingEnable+0x88>)
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b294:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 801b296:	2100      	movs	r1, #0
 801b298:	4807      	ldr	r0, [pc, #28]	; (801b2b8 <PWMGeneratingEnable+0x8c>)
 801b29a:	f7f3 f865 	bl	800e368 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 801b29e:	4805      	ldr	r0, [pc, #20]	; (801b2b4 <PWMGeneratingEnable+0x88>)
 801b2a0:	f7f2 fcb2 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801b2a4:	bf00      	nop
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	20004948 	.word	0x20004948
 801b2ac:	20016860 	.word	0x20016860
 801b2b0:	20016440 	.word	0x20016440
 801b2b4:	20016920 	.word	0x20016920
 801b2b8:	20016380 	.word	0x20016380

0801b2bc <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b2c0:	4b11      	ldr	r3, [pc, #68]	; (801b308 <PWMGeneratingDisable+0x4c>)
 801b2c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	2b01      	cmp	r3, #1
 801b2ca:	d107      	bne.n	801b2dc <PWMGeneratingDisable+0x20>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b2cc:	2104      	movs	r1, #4
 801b2ce:	480f      	ldr	r0, [pc, #60]	; (801b30c <PWMGeneratingDisable+0x50>)
 801b2d0:	f7f3 f964 	bl	800e59c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b2d4:	480e      	ldr	r0, [pc, #56]	; (801b310 <PWMGeneratingDisable+0x54>)
 801b2d6:	f7f2 fd19 	bl	800dd0c <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim7);
	}
}
 801b2da:	e013      	b.n	801b304 <PWMGeneratingDisable+0x48>
	}else if(generator.numOfChannles>1){
 801b2dc:	4b0a      	ldr	r3, [pc, #40]	; (801b308 <PWMGeneratingDisable+0x4c>)
 801b2de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b2e2:	b2db      	uxtb	r3, r3
 801b2e4:	2b01      	cmp	r3, #1
 801b2e6:	d90d      	bls.n	801b304 <PWMGeneratingDisable+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b2e8:	2104      	movs	r1, #4
 801b2ea:	4808      	ldr	r0, [pc, #32]	; (801b30c <PWMGeneratingDisable+0x50>)
 801b2ec:	f7f3 f956 	bl	800e59c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b2f0:	4807      	ldr	r0, [pc, #28]	; (801b310 <PWMGeneratingDisable+0x54>)
 801b2f2:	f7f2 fd0b 	bl	800dd0c <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	4806      	ldr	r0, [pc, #24]	; (801b314 <PWMGeneratingDisable+0x58>)
 801b2fa:	f7f3 f94f 	bl	800e59c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 801b2fe:	4806      	ldr	r0, [pc, #24]	; (801b318 <PWMGeneratingDisable+0x5c>)
 801b300:	f7f2 fd04 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 801b304:	bf00      	nop
 801b306:	bd80      	pop	{r7, pc}
 801b308:	20004948 	.word	0x20004948
 801b30c:	20016440 	.word	0x20016440
 801b310:	20016860 	.word	0x20016860
 801b314:	20016380 	.word	0x20016380
 801b318:	20016920 	.word	0x20016920

0801b31c <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 801b31c:	b580      	push	{r7, lr}
 801b31e:	af00      	add	r7, sp, #0
	MX_TIM1_GEN_PWM_Init();
 801b320:	f7ff fbe8 	bl	801aaf4 <MX_TIM1_GEN_PWM_Init>
	MX_TIM6_GEN_PWM_Init();
 801b324:	f7ff fca2 	bl	801ac6c <MX_TIM6_GEN_PWM_Init>
	MX_TIM3_GEN_PWM_Init();			// PWM generation
 801b328:	f7ff fc56 	bl	801abd8 <MX_TIM3_GEN_PWM_Init>
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
 801b32c:	f7ff fcc8 	bl	801acc0 <MX_TIM7_GEN_PWM_Init>
}
 801b330:	bf00      	nop
 801b332:	bd80      	pop	{r7, pc}

0801b334 <TIMGenPwmDeinit>:
 * @brief  Deinit of arbitrary PWM generator.
 * @note		Resetting peripherals TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
 801b334:	b480      	push	{r7}
 801b336:	af00      	add	r7, sp, #0
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801b338:	4b1a      	ldr	r3, [pc, #104]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b33c:	4a19      	ldr	r2, [pc, #100]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b33e:	f043 0310 	orr.w	r3, r3, #16
 801b342:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801b344:	4b17      	ldr	r3, [pc, #92]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b348:	4a16      	ldr	r2, [pc, #88]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b34a:	f023 0310 	bic.w	r3, r3, #16
 801b34e:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801b350:	4b14      	ldr	r3, [pc, #80]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b354:	4a13      	ldr	r2, [pc, #76]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b356:	f043 0320 	orr.w	r3, r3, #32
 801b35a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801b35c:	4b11      	ldr	r3, [pc, #68]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b360:	4a10      	ldr	r2, [pc, #64]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b362:	f023 0320 	bic.w	r3, r3, #32
 801b366:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM1_FORCE_RESET();
 801b368:	4b0e      	ldr	r3, [pc, #56]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b36c:	4a0d      	ldr	r2, [pc, #52]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b36e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b372:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b374:	4b0b      	ldr	r3, [pc, #44]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b378:	4a0a      	ldr	r2, [pc, #40]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b37a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b37e:	6413      	str	r3, [r2, #64]	; 0x40

	__HAL_RCC_TIM3_FORCE_RESET();
 801b380:	4b08      	ldr	r3, [pc, #32]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b384:	4a07      	ldr	r2, [pc, #28]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b386:	f043 0302 	orr.w	r3, r3, #2
 801b38a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM3_RELEASE_RESET();
 801b38c:	4b05      	ldr	r3, [pc, #20]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b390:	4a04      	ldr	r2, [pc, #16]	; (801b3a4 <TIMGenPwmDeinit+0x70>)
 801b392:	f023 0302 	bic.w	r3, r3, #2
 801b396:	6393      	str	r3, [r2, #56]	; 0x38
}
 801b398:	bf00      	nop
 801b39a:	46bd      	mov	sp, r7
 801b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a0:	4770      	bx	lr
 801b3a2:	bf00      	nop
 801b3a4:	40021000 	.word	0x40021000

0801b3a8 <MX_TIM1_LOG_ANLYS_Init>:
 *					from GPIOs to RAM (Logic analyzer data sampling).
 * @param  None
 * @retval None
 */
void MX_TIM1_LOG_ANLYS_Init(void)
{
 801b3a8:	b580      	push	{r7, lr}
 801b3aa:	b08c      	sub	sp, #48	; 0x30
 801b3ac:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
 801b3ae:	4b1d      	ldr	r3, [pc, #116]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3b0:	4a1d      	ldr	r2, [pc, #116]	; (801b428 <MX_TIM1_LOG_ANLYS_Init+0x80>)
 801b3b2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;  //0
 801b3b4:	4b1b      	ldr	r3, [pc, #108]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b3ba:	4b1a      	ldr	r3, [pc, #104]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3bc:	2200      	movs	r2, #0
 801b3be:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 14399;   //14399
 801b3c0:	4b18      	ldr	r3, [pc, #96]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3c2:	f643 023f 	movw	r2, #14399	; 0x383f
 801b3c6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b3c8:	4b16      	ldr	r3, [pc, #88]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801b3ce:	4b15      	ldr	r3, [pc, #84]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3d0:	2200      	movs	r2, #0
 801b3d2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b3d4:	4b13      	ldr	r3, [pc, #76]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801b3da:	4812      	ldr	r0, [pc, #72]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3dc:	f7f2 fab6 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b3e4:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801b3e6:	f107 0320 	add.w	r3, r7, #32
 801b3ea:	4619      	mov	r1, r3
 801b3ec:	480d      	ldr	r0, [pc, #52]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3ee:	f7f4 fb83 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 801b3f2:	2304      	movs	r3, #4
 801b3f4:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 801b3f6:	2330      	movs	r3, #48	; 0x30
 801b3f8:	613b      	str	r3, [r7, #16]
	HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig);
 801b3fa:	f107 030c 	add.w	r3, r7, #12
 801b3fe:	4619      	mov	r1, r3
 801b400:	4808      	ldr	r0, [pc, #32]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b402:	f7f5 fa19 	bl	8010838 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b406:	2300      	movs	r3, #0
 801b408:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801b40a:	2300      	movs	r3, #0
 801b40c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b40e:	2300      	movs	r3, #0
 801b410:	60bb      	str	r3, [r7, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801b412:	463b      	mov	r3, r7
 801b414:	4619      	mov	r1, r3
 801b416:	4803      	ldr	r0, [pc, #12]	; (801b424 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b418:	f7f7 f950 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>
}
 801b41c:	bf00      	nop
 801b41e:	3730      	adds	r7, #48	; 0x30
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	20016440 	.word	0x20016440
 801b428:	40012c00 	.word	0x40012c00

0801b42c <MX_TIM4_LOG_ANLYS_Init>:
 * @note   Represents posttrigger time launched right after incoming event on required channel.
 * @param  None
 * @retval None
 */
void MX_TIM4_LOG_ANLYS_Init(void)
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	b088      	sub	sp, #32
 801b430:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	/* By default 1 Ksample buffer, 10 Ksamples per second, 50% trigger
		 => 50 ms pretrigger, 50 ms posttrigger - 20 Hz (PSC = 1200, ARR = 60K) */
	htim4.Instance = TIM4;
 801b432:	4b18      	ldr	r3, [pc, #96]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b434:	4a18      	ldr	r2, [pc, #96]	; (801b498 <MX_TIM4_LOG_ANLYS_Init+0x6c>)
 801b436:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1199;
 801b438:	4b16      	ldr	r3, [pc, #88]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b43a:	f240 42af 	movw	r2, #1199	; 0x4af
 801b43e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b440:	4b14      	ldr	r3, [pc, #80]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b442:	2200      	movs	r2, #0
 801b444:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 59999;
 801b446:	4b13      	ldr	r3, [pc, #76]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b448:	f64e 225f 	movw	r2, #59999	; 0xea5f
 801b44c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b44e:	4b11      	ldr	r3, [pc, #68]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b450:	2200      	movs	r2, #0
 801b452:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b454:	4b0f      	ldr	r3, [pc, #60]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b456:	2200      	movs	r2, #0
 801b458:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 801b45a:	480e      	ldr	r0, [pc, #56]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b45c:	f7f2 fa76 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b464:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801b466:	f107 0310 	add.w	r3, r7, #16
 801b46a:	4619      	mov	r1, r3
 801b46c:	4809      	ldr	r0, [pc, #36]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b46e:	f7f4 fb43 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 801b472:	2108      	movs	r1, #8
 801b474:	4807      	ldr	r0, [pc, #28]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b476:	f7f3 fa95 	bl	800e9a4 <HAL_TIM_OnePulse_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b47a:	2300      	movs	r3, #0
 801b47c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801b47e:	2380      	movs	r3, #128	; 0x80
 801b480:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 801b482:	1d3b      	adds	r3, r7, #4
 801b484:	4619      	mov	r1, r3
 801b486:	4803      	ldr	r0, [pc, #12]	; (801b494 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b488:	f7f7 f918 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>
}
 801b48c:	bf00      	nop
 801b48e:	3720      	adds	r7, #32
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}
 801b494:	200161b4 	.word	0x200161b4
 801b498:	40000800 	.word	0x40000800

0801b49c <TIM1_LOG_ANLYS_MspInit>:

void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b088      	sub	sp, #32
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 801b4a4:	4b2b      	ldr	r3, [pc, #172]	; (801b554 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4a8:	4a2a      	ldr	r2, [pc, #168]	; (801b554 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b4ae:	6613      	str	r3, [r2, #96]	; 0x60
 801b4b0:	4b28      	ldr	r3, [pc, #160]	; (801b554 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b4b8:	60bb      	str	r3, [r7, #8]
 801b4ba:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pins : PB10 PB11 PB12 PB13 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 801b4bc:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b4c0:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b4c6:	2301      	movs	r3, #1
 801b4c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801b4ca:	2302      	movs	r3, #2
 801b4cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b4ce:	f107 030c 	add.w	r3, r7, #12
 801b4d2:	4619      	mov	r1, r3
 801b4d4:	4820      	ldr	r0, [pc, #128]	; (801b558 <TIM1_LOG_ANLYS_MspInit+0xbc>)
 801b4d6:	f7f0 fa57 	bl	800b988 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 801b4da:	2200      	movs	r2, #0
 801b4dc:	2109      	movs	r1, #9
 801b4de:	2017      	movs	r0, #23
 801b4e0:	f7ee fc7a 	bl	8009dd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	2109      	movs	r1, #9
 801b4e8:	2028      	movs	r0, #40	; 0x28
 801b4ea:	f7ee fc75 	bl	8009dd8 <HAL_NVIC_SetPriority>

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 801b4ee:	4b1b      	ldr	r3, [pc, #108]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b4f0:	4a1b      	ldr	r2, [pc, #108]	; (801b560 <TIM1_LOG_ANLYS_MspInit+0xc4>)
 801b4f2:	601a      	str	r2, [r3, #0]
	hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 801b4f4:	4b19      	ldr	r3, [pc, #100]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b4f6:	222e      	movs	r2, #46	; 0x2e
 801b4f8:	605a      	str	r2, [r3, #4]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801b4fa:	4b18      	ldr	r3, [pc, #96]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	609a      	str	r2, [r3, #8]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801b500:	4b16      	ldr	r3, [pc, #88]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b502:	2200      	movs	r2, #0
 801b504:	60da      	str	r2, [r3, #12]
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 801b506:	4b15      	ldr	r3, [pc, #84]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b508:	2280      	movs	r2, #128	; 0x80
 801b50a:	611a      	str	r2, [r3, #16]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801b50c:	4b13      	ldr	r3, [pc, #76]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b50e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b512:	615a      	str	r2, [r3, #20]
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801b514:	4b11      	ldr	r3, [pc, #68]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b51a:	619a      	str	r2, [r3, #24]
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 801b51c:	4b0f      	ldr	r3, [pc, #60]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b51e:	2220      	movs	r2, #32
 801b520:	61da      	str	r2, [r3, #28]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 801b522:	4b0e      	ldr	r3, [pc, #56]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801b528:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim1_up);
 801b52a:	480c      	ldr	r0, [pc, #48]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b52c:	f7ef fbfa 	bl	800ad24 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 801b530:	4b0c      	ldr	r3, [pc, #48]	; (801b564 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	68da      	ldr	r2, [r3, #12]
 801b536:	4b0b      	ldr	r3, [pc, #44]	; (801b564 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b53e:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	4a06      	ldr	r2, [pc, #24]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b544:	621a      	str	r2, [r3, #32]
 801b546:	4a05      	ldr	r2, [pc, #20]	; (801b55c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6293      	str	r3, [r2, #40]	; 0x28
}
 801b54c:	bf00      	nop
 801b54e:	3720      	adds	r7, #32
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}
 801b554:	40021000 	.word	0x40021000
 801b558:	48000400 	.word	0x48000400
 801b55c:	200169e0 	.word	0x200169e0
 801b560:	40020058 	.word	0x40020058
 801b564:	20016440 	.word	0x20016440

0801b568 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b084      	sub	sp, #16
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 801b570:	4b0f      	ldr	r3, [pc, #60]	; (801b5b0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b574:	4a0e      	ldr	r2, [pc, #56]	; (801b5b0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b576:	f043 0304 	orr.w	r3, r3, #4
 801b57a:	6593      	str	r3, [r2, #88]	; 0x58
 801b57c:	4b0c      	ldr	r3, [pc, #48]	; (801b5b0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b580:	f003 0304 	and.w	r3, r3, #4
 801b584:	60fb      	str	r3, [r7, #12]
 801b586:	68fb      	ldr	r3, [r7, #12]

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801b588:	4b0a      	ldr	r3, [pc, #40]	; (801b5b4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	68da      	ldr	r2, [r3, #12]
 801b58e:	4b09      	ldr	r3, [pc, #36]	; (801b5b4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	f042 0201 	orr.w	r2, r2, #1
 801b596:	60da      	str	r2, [r3, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 801b598:	2200      	movs	r2, #0
 801b59a:	2109      	movs	r1, #9
 801b59c:	201e      	movs	r0, #30
 801b59e:	f7ee fc1b 	bl	8009dd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801b5a2:	201e      	movs	r0, #30
 801b5a4:	f7ee fc42 	bl	8009e2c <HAL_NVIC_EnableIRQ>
}
 801b5a8:	bf00      	nop
 801b5aa:	3710      	adds	r7, #16
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}
 801b5b0:	40021000 	.word	0x40021000
 801b5b4:	200161b4 	.word	0x200161b4

0801b5b8 <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b082      	sub	sp, #8
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 801b5c0:	4b09      	ldr	r3, [pc, #36]	; (801b5e8 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5c4:	4a08      	ldr	r2, [pc, #32]	; (801b5e8 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b5c6:	f023 0304 	bic.w	r3, r3, #4
 801b5ca:	6593      	str	r3, [r2, #88]	; 0x58
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 801b5cc:	201e      	movs	r0, #30
 801b5ce:	f7ee fc45 	bl	8009e5c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b5d2:	2017      	movs	r0, #23
 801b5d4:	f7ee fc42 	bl	8009e5c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b5d8:	2028      	movs	r0, #40	; 0x28
 801b5da:	f7ee fc3f 	bl	8009e5c <HAL_NVIC_DisableIRQ>
}
 801b5de:	bf00      	nop
 801b5e0:	3708      	adds	r7, #8
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	bd80      	pop	{r7, pc}
 801b5e6:	bf00      	nop
 801b5e8:	40021000 	.word	0x40021000

0801b5ec <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 801b5f4:	4b07      	ldr	r3, [pc, #28]	; (801b614 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b5f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b5f8:	4a06      	ldr	r2, [pc, #24]	; (801b614 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b5fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b5fe:	6613      	str	r3, [r2, #96]	; 0x60
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6a1b      	ldr	r3, [r3, #32]
 801b604:	4618      	mov	r0, r3
 801b606:	f7ef fd25 	bl	800b054 <HAL_DMA_DeInit>
}
 801b60a:	bf00      	nop
 801b60c:	3708      	adds	r7, #8
 801b60e:	46bd      	mov	sp, r7
 801b610:	bd80      	pop	{r7, pc}
 801b612:	bf00      	nop
 801b614:	40021000 	.word	0x40021000

0801b618 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b082      	sub	sp, #8
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	6078      	str	r0, [r7, #4]
	//  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
	//  {
	//    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f06f 0201 	mvn.w	r2, #1
 801b628:	611a      	str	r2, [r3, #16]

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 801b62a:	4b14      	ldr	r3, [pc, #80]	; (801b67c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	6a1a      	ldr	r2, [r3, #32]
 801b630:	f241 1311 	movw	r3, #4369	; 0x1111
 801b634:	4013      	ands	r3, r2
 801b636:	2b00      	cmp	r3, #0
 801b638:	d10f      	bne.n	801b65a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b63a:	4b10      	ldr	r3, [pc, #64]	; (801b67c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	6a1a      	ldr	r2, [r3, #32]
 801b640:	f244 4344 	movw	r3, #17476	; 0x4444
 801b644:	4013      	ands	r3, r2
 801b646:	2b00      	cmp	r3, #0
 801b648:	d107      	bne.n	801b65a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b64a:	4b0c      	ldr	r3, [pc, #48]	; (801b67c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	681a      	ldr	r2, [r3, #0]
 801b650:	4b0a      	ldr	r3, [pc, #40]	; (801b67c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	f022 0201 	bic.w	r2, r2, #1
 801b658:	601a      	str	r2, [r3, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 801b65a:	4809      	ldr	r0, [pc, #36]	; (801b680 <LOG_ANLYS_PeriodElapsedCallback+0x68>)
 801b65c:	f7ef fee2 	bl	800b424 <HAL_DMA_Abort>

	GPIO_DisableIRQ();
 801b660:	f000 f914 	bl	801b88c <GPIO_DisableIRQ>

	/* Data sending */
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 801b664:	4b07      	ldr	r3, [pc, #28]	; (801b684 <LOG_ANLYS_PeriodElapsedCallback+0x6c>)
 801b666:	7ddb      	ldrb	r3, [r3, #23]
 801b668:	b2db      	uxtb	r3, r3
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d101      	bne.n	801b672 <LOG_ANLYS_PeriodElapsedCallback+0x5a>
		logAnlysPeriodElapsedCallback();
 801b66e:	f7e9 fea1 	bl	80053b4 <logAnlysPeriodElapsedCallback>
	}
	//    }
	//  }
}
 801b672:	bf00      	nop
 801b674:	3708      	adds	r7, #8
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}
 801b67a:	bf00      	nop
 801b67c:	200161b4 	.word	0x200161b4
 801b680:	200169e0 	.word	0x200169e0
 801b684:	200070a0 	.word	0x200070a0

0801b688 <LOG_ANLYS_TriggerEventOccured>:
 *					It is the value of posttrigger time start and will change only if the actual trigger uccurs.
 * @params None
 * @retval None
 */
void LOG_ANLYS_TriggerEventOccured(void)
{
 801b688:	b480      	push	{r7}
 801b68a:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 801b68c:	4b06      	ldr	r3, [pc, #24]	; (801b6a8 <LOG_ANLYS_TriggerEventOccured+0x20>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	685b      	ldr	r3, [r3, #4]
 801b692:	4a06      	ldr	r2, [pc, #24]	; (801b6ac <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b694:	6013      	str	r3, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 801b696:	4b05      	ldr	r3, [pc, #20]	; (801b6ac <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b698:	2200      	movs	r2, #0
 801b69a:	75da      	strb	r2, [r3, #23]
}
 801b69c:	bf00      	nop
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr
 801b6a6:	bf00      	nop
 801b6a8:	200169e0 	.word	0x200169e0
 801b6ac:	200070a0 	.word	0x200070a0

0801b6b0 <TIM_LogAnlys_Init>:
 * @note		TIM1 & TIM4 init.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Init(void)
{
 801b6b0:	b580      	push	{r7, lr}
 801b6b2:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_FORCE_RESET();
 801b6b4:	4b12      	ldr	r3, [pc, #72]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6b8:	4a11      	ldr	r2, [pc, #68]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6ba:	f043 0304 	orr.w	r3, r3, #4
 801b6be:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b6c0:	4b0f      	ldr	r3, [pc, #60]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6c4:	4a0e      	ldr	r2, [pc, #56]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6c6:	f023 0304 	bic.w	r3, r3, #4
 801b6ca:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b6cc:	4b0c      	ldr	r3, [pc, #48]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6d0:	4a0b      	ldr	r2, [pc, #44]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b6d6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b6d8:	4b09      	ldr	r3, [pc, #36]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6dc:	4a08      	ldr	r2, [pc, #32]	; (801b700 <TIM_LogAnlys_Init+0x50>)
 801b6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b6e2:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b6e4:	4b07      	ldr	r3, [pc, #28]	; (801b704 <TIM_LogAnlys_Init+0x54>)
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b6ec:	4b06      	ldr	r3, [pc, #24]	; (801b708 <TIM_LogAnlys_Init+0x58>)
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	MX_TIM1_LOG_ANLYS_Init();
 801b6f4:	f7ff fe58 	bl	801b3a8 <MX_TIM1_LOG_ANLYS_Init>
	MX_TIM4_LOG_ANLYS_Init();
 801b6f8:	f7ff fe98 	bl	801b42c <MX_TIM4_LOG_ANLYS_Init>
}
 801b6fc:	bf00      	nop
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	40021000 	.word	0x40021000
 801b704:	200161b4 	.word	0x200161b4
 801b708:	20016440 	.word	0x20016440

0801b70c <TIM_LogAnlys_Deinit>:
 * @note		TIM1 & TIM4 peripherals reset.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Deinit(void)
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim4);
 801b710:	4813      	ldr	r0, [pc, #76]	; (801b760 <TIM_LogAnlys_Deinit+0x54>)
 801b712:	f7f2 f9e5 	bl	800dae0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 801b716:	4813      	ldr	r0, [pc, #76]	; (801b764 <TIM_LogAnlys_Deinit+0x58>)
 801b718:	f7f2 f9e2 	bl	800dae0 <HAL_TIM_Base_DeInit>

	__HAL_RCC_TIM4_FORCE_RESET();
 801b71c:	4b12      	ldr	r3, [pc, #72]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b720:	4a11      	ldr	r2, [pc, #68]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b722:	f043 0304 	orr.w	r3, r3, #4
 801b726:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b728:	4b0f      	ldr	r3, [pc, #60]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b72c:	4a0e      	ldr	r2, [pc, #56]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b72e:	f023 0304 	bic.w	r3, r3, #4
 801b732:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b734:	4b0c      	ldr	r3, [pc, #48]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b738:	4a0b      	ldr	r2, [pc, #44]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b73a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b73e:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b740:	4b09      	ldr	r3, [pc, #36]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b744:	4a08      	ldr	r2, [pc, #32]	; (801b768 <TIM_LogAnlys_Deinit+0x5c>)
 801b746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b74a:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b74c:	4b04      	ldr	r3, [pc, #16]	; (801b760 <TIM_LogAnlys_Deinit+0x54>)
 801b74e:	2200      	movs	r2, #0
 801b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b754:	4b03      	ldr	r3, [pc, #12]	; (801b764 <TIM_LogAnlys_Deinit+0x58>)
 801b756:	2200      	movs	r2, #0
 801b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801b75c:	bf00      	nop
 801b75e:	bd80      	pop	{r7, pc}
 801b760:	200161b4 	.word	0x200161b4
 801b764:	20016440 	.word	0x20016440
 801b768:	40021000 	.word	0x40021000

0801b76c <TIM_LogAnlys_Start>:
 * @note		Starts TIM1 for triggering DMA from GPIOs to RAM.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Start(void)
{
 801b76c:	b580      	push	{r7, lr}
 801b76e:	af00      	add	r7, sp, #0
	/* Enable DMA transfers. */
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 801b770:	4b08      	ldr	r3, [pc, #32]	; (801b794 <TIM_LogAnlys_Start+0x28>)
 801b772:	68db      	ldr	r3, [r3, #12]
 801b774:	461a      	mov	r2, r3
 801b776:	4b07      	ldr	r3, [pc, #28]	; (801b794 <TIM_LogAnlys_Start+0x28>)
 801b778:	8a1b      	ldrh	r3, [r3, #16]
 801b77a:	b29b      	uxth	r3, r3
 801b77c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801b780:	4905      	ldr	r1, [pc, #20]	; (801b798 <TIM_LogAnlys_Start+0x2c>)
 801b782:	4806      	ldr	r0, [pc, #24]	; (801b79c <TIM_LogAnlys_Start+0x30>)
 801b784:	f7ef fd72 	bl	800b26c <HAL_DMA_Start>
	/* Start TIM1 to trigger DMA for data transfering with user required frequency. */
	HAL_TIM_Base_Start(&htim1);
 801b788:	4805      	ldr	r0, [pc, #20]	; (801b7a0 <TIM_LogAnlys_Start+0x34>)
 801b78a:	f7f2 fa3d 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801b78e:	bf00      	nop
 801b790:	bd80      	pop	{r7, pc}
 801b792:	bf00      	nop
 801b794:	200070a0 	.word	0x200070a0
 801b798:	48000410 	.word	0x48000410
 801b79c:	200169e0 	.word	0x200169e0
 801b7a0:	20016440 	.word	0x20016440

0801b7a4 <TIM_LogAnlys_Stop>:
 * @note		Stops TIM1 for triggering DMA from GPIOs to RAM. Aborts DMA and disables IRQ from the selected trigger.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Stop(void)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	af00      	add	r7, sp, #0
	/* Abort sampling so that CNDTR (DMA data length) can be changed. */
	TIM_SamplingStop();
 801b7a8:	f000 f880 	bl	801b8ac <TIM_SamplingStop>
	GPIO_DisableIRQ();
 801b7ac:	f000 f86e 	bl	801b88c <GPIO_DisableIRQ>

	HAL_TIM_Base_Stop(&htim4);
 801b7b0:	4805      	ldr	r0, [pc, #20]	; (801b7c8 <TIM_LogAnlys_Stop+0x24>)
 801b7b2:	f7f2 faab 	bl	800dd0c <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b7b6:	4b04      	ldr	r3, [pc, #16]	; (801b7c8 <TIM_LogAnlys_Stop+0x24>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Slave TIM1 is stopped by TIM4 upon Update Event
	   and TIM4 is initialized in One Pulse Mode. */
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 801b7be:	4b03      	ldr	r3, [pc, #12]	; (801b7cc <TIM_LogAnlys_Stop+0x28>)
 801b7c0:	2201      	movs	r2, #1
 801b7c2:	75da      	strb	r2, [r3, #23]
}
 801b7c4:	bf00      	nop
 801b7c6:	bd80      	pop	{r7, pc}
 801b7c8:	200161b4 	.word	0x200161b4
 801b7cc:	200070a0 	.word	0x200070a0

0801b7d0 <TIM_LogAnlys_PostTrigger_Reconfig>:
 * @note		The time after the trigger is handled by TIM4.
 * @params posttrigInSec: post trigger in seconds
 * @retval None
 */
void TIM_LogAnlys_PostTrigger_Reconfig(double posttrigInSec)
{
 801b7d0:	b590      	push	{r4, r7, lr}
 801b7d2:	b087      	sub	sp, #28
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801b7da:	f7f1 fb9d 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801b7de:	6178      	str	r0, [r7, #20]
	double freq = 1 / posttrigInSec;
 801b7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b7e4:	f04f 0000 	mov.w	r0, #0
 801b7e8:	4909      	ldr	r1, [pc, #36]	; (801b810 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
 801b7ea:	f7e4 ffff 	bl	80007ec <__aeabi_ddiv>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	460c      	mov	r4, r1
 801b7f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 801b7f6:	ed97 0b02 	vldr	d0, [r7, #8]
 801b7fa:	6979      	ldr	r1, [r7, #20]
 801b7fc:	4805      	ldr	r0, [pc, #20]	; (801b814 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b7fe:	f7fd fbe7 	bl	8018fd0 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 801b802:	4804      	ldr	r0, [pc, #16]	; (801b814 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b804:	f7f2 fa82 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 801b808:	bf00      	nop
 801b80a:	371c      	adds	r7, #28
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bd90      	pop	{r4, r7, pc}
 801b810:	3ff00000 	.word	0x3ff00000
 801b814:	200161b4 	.word	0x200161b4

0801b818 <TIM_LogAnlys_SamplingFreq_Reconfig>:
 * @note 	   Reconfigures timer TIM1 for triggering DMA to transfer data from GPIOs to RAM. ARR+PSC calculated by host.
 * @params arrPsc: ARR & PSC value
 * @retval None
 */
void TIM_LogAnlys_SamplingFreq_Reconfig(uint32_t smplFreq)
{
 801b818:	b590      	push	{r4, r7, lr}
 801b81a:	b085      	sub	sp, #20
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801b820:	f7f1 fb7a 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801b824:	60f8      	str	r0, [r7, #12]
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 801b826:	6878      	ldr	r0, [r7, #4]
 801b828:	f7e4 fe3c 	bl	80004a4 <__aeabi_ui2d>
 801b82c:	4603      	mov	r3, r0
 801b82e:	460c      	mov	r4, r1
 801b830:	ec44 3b10 	vmov	d0, r3, r4
 801b834:	68f9      	ldr	r1, [r7, #12]
 801b836:	4808      	ldr	r0, [pc, #32]	; (801b858 <TIM_LogAnlys_SamplingFreq_Reconfig+0x40>)
 801b838:	f7fd fbca 	bl	8018fd0 <TIM_ReconfigPrecise>
 801b83c:	ec54 3b10 	vmov	r3, r4, d0
 801b840:	4618      	mov	r0, r3
 801b842:	4621      	mov	r1, r4
 801b844:	f7e5 f980 	bl	8000b48 <__aeabi_d2uiz>
 801b848:	4602      	mov	r2, r0
 801b84a:	4b04      	ldr	r3, [pc, #16]	; (801b85c <TIM_LogAnlys_SamplingFreq_Reconfig+0x44>)
 801b84c:	605a      	str	r2, [r3, #4]
}
 801b84e:	bf00      	nop
 801b850:	3714      	adds	r7, #20
 801b852:	46bd      	mov	sp, r7
 801b854:	bd90      	pop	{r4, r7, pc}
 801b856:	bf00      	nop
 801b858:	20016440 	.word	0x20016440
 801b85c:	200070a0 	.word	0x200070a0

0801b860 <TIM_PostTrigger_SoftwareStart>:
 * @note		Starts TIM4 that represents posttrigger time.
 * @params None
 * @retval None
 */
void TIM_PostTrigger_SoftwareStart(void)
{
 801b860:	b480      	push	{r7}
 801b862:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b864:	4b08      	ldr	r3, [pc, #32]	; (801b888 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	2200      	movs	r2, #0
 801b86a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 801b86c:	4b06      	ldr	r3, [pc, #24]	; (801b888 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	4b05      	ldr	r3, [pc, #20]	; (801b888 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	f042 0201 	orr.w	r2, r2, #1
 801b87a:	601a      	str	r2, [r3, #0]
	//	HAL_TIM_Base_Start(&htim4);
}
 801b87c:	bf00      	nop
 801b87e:	46bd      	mov	sp, r7
 801b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b884:	4770      	bx	lr
 801b886:	bf00      	nop
 801b888:	200161b4 	.word	0x200161b4

0801b88c <GPIO_DisableIRQ>:
 * @brief  Disables trigger.
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
 801b88c:	b580      	push	{r7, lr}
 801b88e:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 801b890:	4b05      	ldr	r3, [pc, #20]	; (801b8a8 <GPIO_DisableIRQ+0x1c>)
 801b892:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801b896:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b898:	2017      	movs	r0, #23
 801b89a:	f7ee fadf 	bl	8009e5c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b89e:	2028      	movs	r0, #40	; 0x28
 801b8a0:	f7ee fadc 	bl	8009e5c <HAL_NVIC_DisableIRQ>
}
 801b8a4:	bf00      	nop
 801b8a6:	bd80      	pop	{r7, pc}
 801b8a8:	40010400 	.word	0x40010400

0801b8ac <TIM_SamplingStop>:
 * @brief  Stops sampling.
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 801b8b0:	4803      	ldr	r0, [pc, #12]	; (801b8c0 <TIM_SamplingStop+0x14>)
 801b8b2:	f7f2 fa2b 	bl	800dd0c <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 801b8b6:	4803      	ldr	r0, [pc, #12]	; (801b8c4 <TIM_SamplingStop+0x18>)
 801b8b8:	f7ef fdb4 	bl	800b424 <HAL_DMA_Abort>
}
 801b8bc:	bf00      	nop
 801b8be:	bd80      	pop	{r7, pc}
 801b8c0:	20016440 	.word	0x20016440
 801b8c4:	200169e0 	.word	0x200169e0

0801b8c8 <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b086      	sub	sp, #24
 801b8cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b8ce:	2017      	movs	r0, #23
 801b8d0:	f7ee fac4 	bl	8009e5c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b8d4:	2028      	movs	r0, #40	; 0x28
 801b8d6:	f7ee fac1 	bl	8009e5c <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 801b8da:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b8de:	603b      	str	r3, [r7, #0]
	EXTI->IMR1 &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 801b8e0:	4b37      	ldr	r3, [pc, #220]	; (801b9c0 <GPIO_EnableTrigger+0xf8>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	4a36      	ldr	r2, [pc, #216]	; (801b9c0 <GPIO_EnableTrigger+0xf8>)
 801b8e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801b8ea:	6013      	str	r3, [r2, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 801b8f4:	2302      	movs	r3, #2
 801b8f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b8f8:	463b      	mov	r3, r7
 801b8fa:	4619      	mov	r1, r3
 801b8fc:	4831      	ldr	r0, [pc, #196]	; (801b9c4 <GPIO_EnableTrigger+0xfc>)
 801b8fe:	f7f0 f843 	bl	800b988 <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 801b902:	4b31      	ldr	r3, [pc, #196]	; (801b9c8 <GPIO_EnableTrigger+0x100>)
 801b904:	7d9b      	ldrb	r3, [r3, #22]
 801b906:	b2db      	uxtb	r3, r3
 801b908:	2b01      	cmp	r3, #1
 801b90a:	d102      	bne.n	801b912 <GPIO_EnableTrigger+0x4a>
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 801b90c:	4b2f      	ldr	r3, [pc, #188]	; (801b9cc <GPIO_EnableTrigger+0x104>)
 801b90e:	607b      	str	r3, [r7, #4]
 801b910:	e001      	b.n	801b916 <GPIO_EnableTrigger+0x4e>
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 801b912:	4b2f      	ldr	r3, [pc, #188]	; (801b9d0 <GPIO_EnableTrigger+0x108>)
 801b914:	607b      	str	r3, [r7, #4]
	}

	switch(logAnlys.trigConfig){
 801b916:	4b2c      	ldr	r3, [pc, #176]	; (801b9c8 <GPIO_EnableTrigger+0x100>)
 801b918:	7d5b      	ldrb	r3, [r3, #21]
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	2b07      	cmp	r3, #7
 801b91e:	d841      	bhi.n	801b9a4 <GPIO_EnableTrigger+0xdc>
 801b920:	a201      	add	r2, pc, #4	; (adr r2, 801b928 <GPIO_EnableTrigger+0x60>)
 801b922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b926:	bf00      	nop
 801b928:	0801b949 	.word	0x0801b949
 801b92c:	0801b953 	.word	0x0801b953
 801b930:	0801b95d 	.word	0x0801b95d
 801b934:	0801b969 	.word	0x0801b969
 801b938:	0801b975 	.word	0x0801b975
 801b93c:	0801b981 	.word	0x0801b981
 801b940:	0801b98d 	.word	0x0801b98d
 801b944:	0801b999 	.word	0x0801b999
	case TRIG_CHAN1:
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 801b948:	2340      	movs	r3, #64	; 0x40
 801b94a:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b94c:	2317      	movs	r3, #23
 801b94e:	75fb      	strb	r3, [r7, #23]
		break;
 801b950:	e028      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN2:
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 801b952:	2380      	movs	r3, #128	; 0x80
 801b954:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b956:	2317      	movs	r3, #23
 801b958:	75fb      	strb	r3, [r7, #23]
		break;
 801b95a:	e023      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN3:
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 801b95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b960:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b962:	2317      	movs	r3, #23
 801b964:	75fb      	strb	r3, [r7, #23]
		break;
 801b966:	e01d      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN4:
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 801b968:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b96c:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b96e:	2317      	movs	r3, #23
 801b970:	75fb      	strb	r3, [r7, #23]
		break;
 801b972:	e017      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN5:
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 801b974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b978:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b97a:	2328      	movs	r3, #40	; 0x28
 801b97c:	75fb      	strb	r3, [r7, #23]
		break;
 801b97e:	e011      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN6:
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 801b980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b984:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b986:	2328      	movs	r3, #40	; 0x28
 801b988:	75fb      	strb	r3, [r7, #23]
		break;
 801b98a:	e00b      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 801b98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b990:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b992:	2328      	movs	r3, #40	; 0x28
 801b994:	75fb      	strb	r3, [r7, #23]
		break;
 801b996:	e005      	b.n	801b9a4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 801b998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b99c:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b99e:	2328      	movs	r3, #40	; 0x28
 801b9a0:	75fb      	strb	r3, [r7, #23]
		break;
 801b9a2:	bf00      	nop
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b9a4:	463b      	mov	r3, r7
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	4806      	ldr	r0, [pc, #24]	; (801b9c4 <GPIO_EnableTrigger+0xfc>)
 801b9aa:	f7ef ffed 	bl	800b988 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 801b9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b9b2:	4618      	mov	r0, r3
 801b9b4:	f7ee fa3a 	bl	8009e2c <HAL_NVIC_EnableIRQ>
}
 801b9b8:	bf00      	nop
 801b9ba:	3718      	adds	r7, #24
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	40010400 	.word	0x40010400
 801b9c4:	48000400 	.word	0x48000400
 801b9c8:	200070a0 	.word	0x200070a0
 801b9cc:	10210000 	.word	0x10210000
 801b9d0:	10110000 	.word	0x10110000

0801b9d4 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b088      	sub	sp, #32
 801b9d8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 801b9da:	4b17      	ldr	r3, [pc, #92]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9dc:	4a17      	ldr	r2, [pc, #92]	; (801ba3c <MX_TIM15_Init+0x68>)
 801b9de:	601a      	str	r2, [r3, #0]
	htim_scope.Init.Prescaler = 0;
 801b9e0:	4b15      	ldr	r3, [pc, #84]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	605a      	str	r2, [r3, #4]
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b9e6:	4b14      	ldr	r3, [pc, #80]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	609a      	str	r2, [r3, #8]
	htim_scope.Init.Period = 0;
 801b9ec:	4b12      	ldr	r3, [pc, #72]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9ee:	2200      	movs	r2, #0
 801b9f0:	60da      	str	r2, [r3, #12]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b9f2:	4b11      	ldr	r3, [pc, #68]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	611a      	str	r2, [r3, #16]
	htim_scope.Init.RepetitionCounter = 0;
 801b9f8:	4b0f      	ldr	r3, [pc, #60]	; (801ba38 <MX_TIM15_Init+0x64>)
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	615a      	str	r2, [r3, #20]
	htim_scope.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b9fe:	4b0e      	ldr	r3, [pc, #56]	; (801ba38 <MX_TIM15_Init+0x64>)
 801ba00:	2200      	movs	r2, #0
 801ba02:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim_scope);
 801ba04:	480c      	ldr	r0, [pc, #48]	; (801ba38 <MX_TIM15_Init+0x64>)
 801ba06:	f7f1 ffa1 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ba0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ba0e:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 801ba10:	f107 0310 	add.w	r3, r7, #16
 801ba14:	4619      	mov	r1, r3
 801ba16:	4808      	ldr	r0, [pc, #32]	; (801ba38 <MX_TIM15_Init+0x64>)
 801ba18:	f7f4 f86e 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801ba1c:	2320      	movs	r3, #32
 801ba1e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ba20:	2300      	movs	r3, #0
 801ba22:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 801ba24:	1d3b      	adds	r3, r7, #4
 801ba26:	4619      	mov	r1, r3
 801ba28:	4803      	ldr	r0, [pc, #12]	; (801ba38 <MX_TIM15_Init+0x64>)
 801ba2a:	f7f6 fe47 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

}
 801ba2e:	bf00      	nop
 801ba30:	3720      	adds	r7, #32
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	20016aa0 	.word	0x20016aa0
 801ba3c:	40014000 	.word	0x40014000

0801ba40 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ba40:	b480      	push	{r7}
 801ba42:	b085      	sub	sp, #20
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_ENABLE();
 801ba48:	4b08      	ldr	r3, [pc, #32]	; (801ba6c <TIM15_SCOPE_MspInit+0x2c>)
 801ba4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba4c:	4a07      	ldr	r2, [pc, #28]	; (801ba6c <TIM15_SCOPE_MspInit+0x2c>)
 801ba4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba52:	6613      	str	r3, [r2, #96]	; 0x60
 801ba54:	4b05      	ldr	r3, [pc, #20]	; (801ba6c <TIM15_SCOPE_MspInit+0x2c>)
 801ba56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ba5c:	60fb      	str	r3, [r7, #12]
 801ba5e:	68fb      	ldr	r3, [r7, #12]
}
 801ba60:	bf00      	nop
 801ba62:	3714      	adds	r7, #20
 801ba64:	46bd      	mov	sp, r7
 801ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba6a:	4770      	bx	lr
 801ba6c:	40021000 	.word	0x40021000

0801ba70 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ba70:	b480      	push	{r7}
 801ba72:	b083      	sub	sp, #12
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_DISABLE();
 801ba78:	4b05      	ldr	r3, [pc, #20]	; (801ba90 <TIM15_SCOPE_MspDeinit+0x20>)
 801ba7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba7c:	4a04      	ldr	r2, [pc, #16]	; (801ba90 <TIM15_SCOPE_MspDeinit+0x20>)
 801ba7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ba82:	6613      	str	r3, [r2, #96]	; 0x60
}
 801ba84:	bf00      	nop
 801ba86:	370c      	adds	r7, #12
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba8e:	4770      	bx	lr
 801ba90:	40021000 	.word	0x40021000

0801ba94 <TIMScopeEnable>:
/* ************************************************************************************** */

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
 801ba94:	b580      	push	{r7, lr}
 801ba96:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim_scope);
 801ba98:	4802      	ldr	r0, [pc, #8]	; (801baa4 <TIMScopeEnable+0x10>)
 801ba9a:	f7f2 f8b5 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801ba9e:	bf00      	nop
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	bf00      	nop
 801baa4:	20016aa0 	.word	0x20016aa0

0801baa8 <TIMScopeDisable>:

void TIMScopeDisable(){
 801baa8:	b580      	push	{r7, lr}
 801baaa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim_scope);
 801baac:	4802      	ldr	r0, [pc, #8]	; (801bab8 <TIMScopeDisable+0x10>)
 801baae:	f7f2 f92d 	bl	800dd0c <HAL_TIM_Base_Stop>
}
 801bab2:	bf00      	nop
 801bab4:	bd80      	pop	{r7, pc}
 801bab6:	bf00      	nop
 801bab8:	20016aa0 	.word	0x20016aa0

0801babc <TIM_Reconfig_scope>:

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 801babc:	b580      	push	{r7, lr}
 801babe:	b086      	sub	sp, #24
 801bac0:	af02      	add	r7, sp, #8
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	6039      	str	r1, [r7, #0]
	uint32_t periphClock = HAL_RCC_GetPCLK2Freq(); //HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 801bac6:	f7f1 fa3d 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 801baca:	60f8      	str	r0, [r7, #12]
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 801bacc:	2301      	movs	r3, #1
 801bace:	9300      	str	r3, [sp, #0]
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	687a      	ldr	r2, [r7, #4]
 801bad4:	68f9      	ldr	r1, [r7, #12]
 801bad6:	4804      	ldr	r0, [pc, #16]	; (801bae8 <TIM_Reconfig_scope+0x2c>)
 801bad8:	f7fd f9dc 	bl	8018e94 <TIM_Reconfig>
 801badc:	4603      	mov	r3, r0
}
 801bade:	4618      	mov	r0, r3
 801bae0:	3710      	adds	r7, #16
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	20016aa0 	.word	0x20016aa0

0801baec <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 801baec:	b580      	push	{r7, lr}
 801baee:	b082      	sub	sp, #8
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	4603      	mov	r3, r0
 801baf4:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801baf6:	79fb      	ldrb	r3, [r7, #7]
 801baf8:	2b0c      	cmp	r3, #12
 801bafa:	d101      	bne.n	801bb00 <getMaxScopeSamplingFreq+0x14>
		return MAX_SAMPLING_FREQ_12B;
 801bafc:	4b08      	ldr	r3, [pc, #32]	; (801bb20 <getMaxScopeSamplingFreq+0x34>)
 801bafe:	e00b      	b.n	801bb18 <getMaxScopeSamplingFreq+0x2c>
	}else if(ADCRes==8){
 801bb00:	79fb      	ldrb	r3, [r7, #7]
 801bb02:	2b08      	cmp	r3, #8
 801bb04:	d101      	bne.n	801bb0a <getMaxScopeSamplingFreq+0x1e>
		return MAX_SAMPLING_FREQ_8B;
 801bb06:	4b07      	ldr	r3, [pc, #28]	; (801bb24 <getMaxScopeSamplingFreq+0x38>)
 801bb08:	e006      	b.n	801bb18 <getMaxScopeSamplingFreq+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801bb0a:	f7f1 fa1b 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	79fb      	ldrb	r3, [r7, #7]
 801bb12:	3302      	adds	r3, #2
 801bb14:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3708      	adds	r7, #8
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}
 801bb20:	003d0900 	.word	0x003d0900
 801bb24:	00493e00 	.word	0x00493e00

0801bb28 <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b082      	sub	sp, #8
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	4603      	mov	r3, r0
 801bb30:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801bb32:	79fb      	ldrb	r3, [r7, #7]
 801bb34:	2b0c      	cmp	r3, #12
 801bb36:	d101      	bne.n	801bb3c <getMaxScopeSamplingFreqInterleaved+0x14>
		return MAX_INTERLEAVE_FREQ_12B;
 801bb38:	4b08      	ldr	r3, [pc, #32]	; (801bb5c <getMaxScopeSamplingFreqInterleaved+0x34>)
 801bb3a:	e00b      	b.n	801bb54 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}else if(ADCRes==8){
 801bb3c:	79fb      	ldrb	r3, [r7, #7]
 801bb3e:	2b08      	cmp	r3, #8
 801bb40:	d101      	bne.n	801bb46 <getMaxScopeSamplingFreqInterleaved+0x1e>
		return MAX_INTERLEAVE_FREQ_8B;
 801bb42:	4b07      	ldr	r3, [pc, #28]	; (801bb60 <getMaxScopeSamplingFreqInterleaved+0x38>)
 801bb44:	e006      	b.n	801bb54 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801bb46:	f7f1 f9fd 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	79fb      	ldrb	r3, [r7, #7]
 801bb4e:	3302      	adds	r3, #2
 801bb50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801bb54:	4618      	mov	r0, r3
 801bb56:	3708      	adds	r7, #8
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bd80      	pop	{r7, pc}
 801bb5c:	007a1200 	.word	0x007a1200
 801bb60:	00927c00 	.word	0x00927c00

0801bb64 <LL_TIM_SetOnePulseMode>:
{
 801bb64:	b480      	push	{r7}
 801bb66:	b083      	sub	sp, #12
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
 801bb6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	f023 0208 	bic.w	r2, r3, #8
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	431a      	orrs	r2, r3
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	601a      	str	r2, [r3, #0]
}
 801bb7e:	bf00      	nop
 801bb80:	370c      	adds	r7, #12
 801bb82:	46bd      	mov	sp, r7
 801bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb88:	4770      	bx	lr

0801bb8a <LL_TIM_GenerateEvent_UPDATE>:
{
 801bb8a:	b480      	push	{r7}
 801bb8c:	b083      	sub	sp, #12
 801bb8e:	af00      	add	r7, sp, #0
 801bb90:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	695b      	ldr	r3, [r3, #20]
 801bb96:	f043 0201 	orr.w	r2, r3, #1
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	615a      	str	r2, [r3, #20]
}
 801bb9e:	bf00      	nop
 801bba0:	370c      	adds	r7, #12
 801bba2:	46bd      	mov	sp, r7
 801bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba8:	4770      	bx	lr
	...

0801bbac <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b09c      	sub	sp, #112	; 0x70
 801bbb0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 801bbb2:	4b45      	ldr	r3, [pc, #276]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbb4:	4a45      	ldr	r2, [pc, #276]	; (801bccc <MX_TIM8_SYNC_PWM_Init+0x120>)
 801bbb6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 1151; // 1151
 801bbb8:	4b43      	ldr	r3, [pc, #268]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbba:	f240 427f 	movw	r2, #1151	; 0x47f
 801bbbe:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bbc0:	4b41      	ldr	r3, [pc, #260]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbc2:	2200      	movs	r2, #0
 801bbc4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 62499; // 62499
 801bbc6:	4b40      	ldr	r3, [pc, #256]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbc8:	f24f 4223 	movw	r2, #62499	; 0xf423
 801bbcc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801bbce:	4b3e      	ldr	r3, [pc, #248]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 801bbd4:	4b3c      	ldr	r3, [pc, #240]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801bbda:	4b3b      	ldr	r3, [pc, #236]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbdc:	2200      	movs	r2, #0
 801bbde:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim8);
 801bbe0:	4839      	ldr	r0, [pc, #228]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbe2:	f7f1 feb3 	bl	800d94c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bbe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bbea:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 801bbec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bbf0:	4619      	mov	r1, r3
 801bbf2:	4835      	ldr	r0, [pc, #212]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbf4:	f7f3 ff80 	bl	800faf8 <HAL_TIM_ConfigClockSource>

	HAL_TIM_OC_Init(&htim8);
 801bbf8:	4833      	ldr	r0, [pc, #204]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbfa:	f7f2 fa0d 	bl	800e018 <HAL_TIM_OC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801bc02:	2300      	movs	r3, #0
 801bc04:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801bc06:	2300      	movs	r3, #0
 801bc08:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 801bc0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801bc0e:	4619      	mov	r1, r3
 801bc10:	482d      	ldr	r0, [pc, #180]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc12:	f7f6 fd53 	bl	80126bc <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801bc16:	2330      	movs	r3, #48	; 0x30
 801bc18:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801bc1e:	2308      	movs	r3, #8
 801bc20:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801bc22:	2300      	movs	r3, #0
 801bc24:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801bc26:	2300      	movs	r3, #0
 801bc28:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	653b      	str	r3, [r7, #80]	; 0x50
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 801bc2e:	4b28      	ldr	r3, [pc, #160]	; (801bcd0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc30:	885b      	ldrh	r3, [r3, #2]
 801bc32:	b29b      	uxth	r3, r3
 801bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 801bc36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	4619      	mov	r1, r3
 801bc3e:	4822      	ldr	r0, [pc, #136]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc40:	f7f3 f948 	bl	800eed4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 801bc44:	4b22      	ldr	r3, [pc, #136]	; (801bcd0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc46:	88db      	ldrh	r3, [r3, #6]
 801bc48:	b29b      	uxth	r3, r3
 801bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 801bc4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc50:	2204      	movs	r2, #4
 801bc52:	4619      	mov	r1, r3
 801bc54:	481c      	ldr	r0, [pc, #112]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc56:	f7f3 f93d 	bl	800eed4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 801bc5a:	4b1d      	ldr	r3, [pc, #116]	; (801bcd0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc5c:	895b      	ldrh	r3, [r3, #10]
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 801bc62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc66:	2208      	movs	r2, #8
 801bc68:	4619      	mov	r1, r3
 801bc6a:	4817      	ldr	r0, [pc, #92]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc6c:	f7f3 f932 	bl	800eed4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 801bc70:	4b17      	ldr	r3, [pc, #92]	; (801bcd0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc72:	89db      	ldrh	r3, [r3, #14]
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 801bc78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc7c:	220c      	movs	r2, #12
 801bc7e:	4619      	mov	r1, r3
 801bc80:	4811      	ldr	r0, [pc, #68]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc82:	f7f3 f927 	bl	800eed4 <HAL_TIM_OC_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801bc86:	2300      	movs	r3, #0
 801bc88:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801bc8e:	2300      	movs	r3, #0
 801bc90:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801bc92:	2300      	movs	r3, #0
 801bc94:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801bc96:	2300      	movs	r3, #0
 801bc98:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801bc9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801bc9e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801bca0:	2300      	movs	r3, #0
 801bca2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801bca4:	2300      	movs	r3, #0
 801bca6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801bca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bcac:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801bcae:	2300      	movs	r3, #0
 801bcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 801bcb6:	1d3b      	adds	r3, r7, #4
 801bcb8:	4619      	mov	r1, r3
 801bcba:	4803      	ldr	r0, [pc, #12]	; (801bcc8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bcbc:	f7f6 fe36 	bl	801292c <HAL_TIMEx_ConfigBreakDeadTime>
}
 801bcc0:	bf00      	nop
 801bcc2:	3770      	adds	r7, #112	; 0x70
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}
 801bcc8:	200160f4 	.word	0x200160f4
 801bccc:	40013400 	.word	0x40013400
 801bcd0:	20015cb8 	.word	0x20015cb8

0801bcd4 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b088      	sub	sp, #32
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 801bcdc:	4b68      	ldr	r3, [pc, #416]	; (801be80 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bcde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bce0:	4a67      	ldr	r2, [pc, #412]	; (801be80 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bce6:	6613      	str	r3, [r2, #96]	; 0x60
 801bce8:	4b65      	ldr	r3, [pc, #404]	; (801be80 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bcea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bcf0:	60bb      	str	r3, [r7, #8]
 801bcf2:	68bb      	ldr	r3, [r7, #8]
	 PC6     ------> TIM8_CH1
	 PC7     ------> TIM8_CH2
	 PC8     ------> TIM8_CH3
	 PC9     ------> TIM8_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 801bcf4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 801bcf8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bcfa:	2302      	movs	r3, #2
 801bcfc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bcfe:	2301      	movs	r3, #1
 801bd00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801bd02:	2302      	movs	r3, #2
 801bd04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 801bd06:	2304      	movs	r3, #4
 801bd08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bd0a:	f107 030c 	add.w	r3, r7, #12
 801bd0e:	4619      	mov	r1, r3
 801bd10:	485c      	ldr	r0, [pc, #368]	; (801be84 <TIM8_SYNC_PWM_MspInit+0x1b0>)
 801bd12:	f7ef fe39 	bl	800b988 <HAL_GPIO_Init>

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 801bd16:	4b5c      	ldr	r3, [pc, #368]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd18:	4a5c      	ldr	r2, [pc, #368]	; (801be8c <TIM8_SYNC_PWM_MspInit+0x1b8>)
 801bd1a:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bd1c:	4b5a      	ldr	r3, [pc, #360]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd1e:	2210      	movs	r2, #16
 801bd20:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801bd22:	4b59      	ldr	r3, [pc, #356]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd24:	2200      	movs	r2, #0
 801bd26:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801bd28:	4b57      	ldr	r3, [pc, #348]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd2a:	2280      	movs	r2, #128	; 0x80
 801bd2c:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bd2e:	4b56      	ldr	r3, [pc, #344]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd30:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bd34:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bd36:	4b54      	ldr	r3, [pc, #336]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd3c:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801bd3e:	4b52      	ldr	r3, [pc, #328]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd40:	2220      	movs	r2, #32
 801bd42:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801bd44:	4b50      	ldr	r3, [pc, #320]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bd4a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch1);
 801bd4c:	484e      	ldr	r0, [pc, #312]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd4e:	f7ee ffe9 	bl	800ad24 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801bd52:	4b4f      	ldr	r3, [pc, #316]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	68da      	ldr	r2, [r3, #12]
 801bd58:	4b4d      	ldr	r3, [pc, #308]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bd60:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	4a48      	ldr	r2, [pc, #288]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd66:	625a      	str	r2, [r3, #36]	; 0x24
 801bd68:	4a47      	ldr	r2, [pc, #284]	; (801be88 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 801bd6e:	4b49      	ldr	r3, [pc, #292]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd70:	4a49      	ldr	r2, [pc, #292]	; (801be98 <TIM8_SYNC_PWM_MspInit+0x1c4>)
 801bd72:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bd74:	4b47      	ldr	r3, [pc, #284]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd76:	2210      	movs	r2, #16
 801bd78:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 801bd7a:	4b46      	ldr	r3, [pc, #280]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 801bd80:	4b44      	ldr	r3, [pc, #272]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd82:	2280      	movs	r2, #128	; 0x80
 801bd84:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bd86:	4b43      	ldr	r3, [pc, #268]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd88:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bd8c:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bd8e:	4b41      	ldr	r3, [pc, #260]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd94:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 801bd96:	4b3f      	ldr	r3, [pc, #252]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd98:	2220      	movs	r2, #32
 801bd9a:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 801bd9c:	4b3d      	ldr	r3, [pc, #244]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bd9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bda2:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch2);
 801bda4:	483b      	ldr	r0, [pc, #236]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bda6:	f7ee ffbd 	bl	800ad24 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801bdaa:	4b39      	ldr	r3, [pc, #228]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	68da      	ldr	r2, [r3, #12]
 801bdb0:	4b37      	ldr	r3, [pc, #220]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bdb8:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	4a35      	ldr	r2, [pc, #212]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdbe:	629a      	str	r2, [r3, #40]	; 0x28
 801bdc0:	4a34      	ldr	r2, [pc, #208]	; (801be94 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 801bdc6:	4b35      	ldr	r3, [pc, #212]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdc8:	4a35      	ldr	r2, [pc, #212]	; (801bea0 <TIM8_SYNC_PWM_MspInit+0x1cc>)
 801bdca:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bdcc:	4b33      	ldr	r3, [pc, #204]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdce:	2210      	movs	r2, #16
 801bdd0:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801bdd2:	4b32      	ldr	r3, [pc, #200]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 801bdd8:	4b30      	ldr	r3, [pc, #192]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdda:	2280      	movs	r2, #128	; 0x80
 801bddc:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bdde:	4b2f      	ldr	r3, [pc, #188]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bde0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bde4:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bde6:	4b2d      	ldr	r3, [pc, #180]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bde8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bdec:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 801bdee:	4b2b      	ldr	r3, [pc, #172]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdf0:	2220      	movs	r2, #32
 801bdf2:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 801bdf4:	4b29      	ldr	r3, [pc, #164]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bdfa:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 801bdfc:	4827      	ldr	r0, [pc, #156]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdfe:	f7ee ff91 	bl	800ad24 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801be02:	4b23      	ldr	r3, [pc, #140]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	68da      	ldr	r2, [r3, #12]
 801be08:	4b21      	ldr	r3, [pc, #132]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801be10:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	4a21      	ldr	r2, [pc, #132]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be16:	62da      	str	r2, [r3, #44]	; 0x2c
 801be18:	4a20      	ldr	r2, [pc, #128]	; (801be9c <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 801be1e:	4b21      	ldr	r3, [pc, #132]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be20:	4a21      	ldr	r2, [pc, #132]	; (801bea8 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 801be22:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801be24:	4b1f      	ldr	r3, [pc, #124]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be26:	2210      	movs	r2, #16
 801be28:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 801be2a:	4b1e      	ldr	r3, [pc, #120]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be2c:	2200      	movs	r2, #0
 801be2e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 801be30:	4b1c      	ldr	r3, [pc, #112]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be32:	2280      	movs	r2, #128	; 0x80
 801be34:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801be36:	4b1b      	ldr	r3, [pc, #108]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be38:	f44f 7280 	mov.w	r2, #256	; 0x100
 801be3c:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801be3e:	4b19      	ldr	r3, [pc, #100]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801be44:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 801be46:	4b17      	ldr	r3, [pc, #92]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be48:	2220      	movs	r2, #32
 801be4a:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 801be4c:	4b15      	ldr	r3, [pc, #84]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801be52:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 801be54:	4813      	ldr	r0, [pc, #76]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be56:	f7ee ff65 	bl	800ad24 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801be5a:	4b0d      	ldr	r3, [pc, #52]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	68da      	ldr	r2, [r3, #12]
 801be60:	4b0b      	ldr	r3, [pc, #44]	; (801be90 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801be68:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	4a0d      	ldr	r2, [pc, #52]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be6e:	631a      	str	r2, [r3, #48]	; 0x30
 801be70:	4a0c      	ldr	r2, [pc, #48]	; (801bea4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	6293      	str	r3, [r2, #40]	; 0x28
}
 801be76:	bf00      	nop
 801be78:	3720      	adds	r7, #32
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd80      	pop	{r7, pc}
 801be7e:	bf00      	nop
 801be80:	40021000 	.word	0x40021000
 801be84:	48000800 	.word	0x48000800
 801be88:	20016bc0 	.word	0x20016bc0
 801be8c:	40020430 	.word	0x40020430
 801be90:	200160f4 	.word	0x200160f4
 801be94:	20016b60 	.word	0x20016b60
 801be98:	40020458 	.word	0x40020458
 801be9c:	20016c80 	.word	0x20016c80
 801bea0:	40020408 	.word	0x40020408
 801bea4:	20016c20 	.word	0x20016c20
 801bea8:	4002041c 	.word	0x4002041c

0801beac <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 801beac:	b580      	push	{r7, lr}
 801beae:	b082      	sub	sp, #8
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 801beb4:	4b0e      	ldr	r3, [pc, #56]	; (801bef0 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801beb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801beb8:	4a0d      	ldr	r2, [pc, #52]	; (801bef0 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801beba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bebe:	6613      	str	r3, [r2, #96]	; 0x60

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bec4:	4618      	mov	r0, r3
 801bec6:	f7ef f8c5 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bece:	4618      	mov	r0, r3
 801bed0:	f7ef f8c0 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bed8:	4618      	mov	r0, r3
 801beda:	f7ef f8bb 	bl	800b054 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7ef f8b6 	bl	800b054 <HAL_DMA_DeInit>
}
 801bee8:	bf00      	nop
 801beea:	3708      	adds	r7, #8
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	40021000 	.word	0x40021000

0801bef4 <TIM_SYNC_PWM_Init>:
 * @brief  Initialization of Synchronized PWMs.
 * @note		TIM8.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
 801bef4:	b580      	push	{r7, lr}
 801bef6:	af00      	add	r7, sp, #0
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 801bef8:	f7ff fe58 	bl	801bbac <MX_TIM8_SYNC_PWM_Init>
	/* Very thanks to optimization 3, TIM Base Init function
	 is not called from SYNC PWM Initi function. */
//	HAL_TIM_Base_Init(&htim8);
}
 801befc:	bf00      	nop
 801befe:	bd80      	pop	{r7, pc}

0801bf00 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 801bf00:	b580      	push	{r7, lr}
 801bf02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim8);
 801bf04:	4808      	ldr	r0, [pc, #32]	; (801bf28 <TIM_SYNC_PWM_Deinit+0x28>)
 801bf06:	f7f1 fdeb 	bl	800dae0 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 801bf0a:	4b08      	ldr	r3, [pc, #32]	; (801bf2c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf0e:	4a07      	ldr	r2, [pc, #28]	; (801bf2c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bf14:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801bf16:	4b05      	ldr	r3, [pc, #20]	; (801bf2c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf1a:	4a04      	ldr	r2, [pc, #16]	; (801bf2c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bf20:	6413      	str	r3, [r2, #64]	; 0x40
}
 801bf22:	bf00      	nop
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	bf00      	nop
 801bf28:	200160f4 	.word	0x200160f4
 801bf2c:	40021000 	.word	0x40021000

0801bf30 <TIM_SYNC_PWM_ChannelState>:
 * @note		Channel can be disabled.
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
 801bf30:	b480      	push	{r7}
 801bf32:	b083      	sub	sp, #12
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	4603      	mov	r3, r0
 801bf38:	460a      	mov	r2, r1
 801bf3a:	71fb      	strb	r3, [r7, #7]
 801bf3c:	4613      	mov	r3, r2
 801bf3e:	71bb      	strb	r3, [r7, #6]
	if (channel == 1) {
 801bf40:	79fb      	ldrb	r3, [r7, #7]
 801bf42:	2b01      	cmp	r3, #1
 801bf44:	d10a      	bne.n	801bf5c <TIM_SYNC_PWM_ChannelState+0x2c>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf46:	79bb      	ldrb	r3, [r7, #6]
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	bf0c      	ite	eq
 801bf4c:	2301      	moveq	r3, #1
 801bf4e:	2300      	movne	r3, #0
 801bf50:	b2db      	uxtb	r3, r3
 801bf52:	461a      	mov	r2, r3
 801bf54:	4b19      	ldr	r3, [pc, #100]	; (801bfbc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bf56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else if (channel == 3) {
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	}
}
 801bf5a:	e028      	b.n	801bfae <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 2) {
 801bf5c:	79fb      	ldrb	r3, [r7, #7]
 801bf5e:	2b02      	cmp	r3, #2
 801bf60:	d10a      	bne.n	801bf78 <TIM_SYNC_PWM_ChannelState+0x48>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf62:	79bb      	ldrb	r3, [r7, #6]
 801bf64:	2b01      	cmp	r3, #1
 801bf66:	bf0c      	ite	eq
 801bf68:	2301      	moveq	r3, #1
 801bf6a:	2300      	movne	r3, #0
 801bf6c:	b2db      	uxtb	r3, r3
 801bf6e:	461a      	mov	r2, r3
 801bf70:	4b12      	ldr	r3, [pc, #72]	; (801bfbc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bf72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 801bf76:	e01a      	b.n	801bfae <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 3) {
 801bf78:	79fb      	ldrb	r3, [r7, #7]
 801bf7a:	2b03      	cmp	r3, #3
 801bf7c:	d10a      	bne.n	801bf94 <TIM_SYNC_PWM_ChannelState+0x64>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf7e:	79bb      	ldrb	r3, [r7, #6]
 801bf80:	2b01      	cmp	r3, #1
 801bf82:	bf0c      	ite	eq
 801bf84:	2301      	moveq	r3, #1
 801bf86:	2300      	movne	r3, #0
 801bf88:	b2db      	uxtb	r3, r3
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	4b0b      	ldr	r3, [pc, #44]	; (801bfbc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bf8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 801bf92:	e00c      	b.n	801bfae <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 4) {
 801bf94:	79fb      	ldrb	r3, [r7, #7]
 801bf96:	2b04      	cmp	r3, #4
 801bf98:	d109      	bne.n	801bfae <TIM_SYNC_PWM_ChannelState+0x7e>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf9a:	79bb      	ldrb	r3, [r7, #6]
 801bf9c:	2b01      	cmp	r3, #1
 801bf9e:	bf0c      	ite	eq
 801bfa0:	2301      	moveq	r3, #1
 801bfa2:	2300      	movne	r3, #0
 801bfa4:	b2db      	uxtb	r3, r3
 801bfa6:	461a      	mov	r2, r3
 801bfa8:	4b04      	ldr	r3, [pc, #16]	; (801bfbc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bfaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 801bfae:	bf00      	nop
 801bfb0:	370c      	adds	r7, #12
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb8:	4770      	bx	lr
 801bfba:	bf00      	nop
 801bfbc:	20015cb8 	.word	0x20015cb8

0801bfc0 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	af00      	add	r7, sp, #0
	if (syncPwm.chan1 == CHAN_ENABLE) {
 801bfc4:	4b4e      	ldr	r3, [pc, #312]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801bfc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	2b01      	cmp	r3, #1
 801bfce:	d11d      	bne.n	801c00c <TIM_SYNC_PWM_Start+0x4c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 801bfd0:	4b4b      	ldr	r3, [pc, #300]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801bfd2:	885b      	ldrh	r3, [r3, #2]
 801bfd4:	b29a      	uxth	r2, r3
 801bfd6:	4b4b      	ldr	r3, [pc, #300]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801bfdc:	4b49      	ldr	r3, [pc, #292]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	68da      	ldr	r2, [r3, #12]
 801bfe2:	4b48      	ldr	r3, [pc, #288]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bfea:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801bfec:	4944      	ldr	r1, [pc, #272]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
				(uint32_t) &(htim8.Instance->CCR1), 2);
 801bfee:	4b45      	ldr	r3, [pc, #276]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	3334      	adds	r3, #52	; 0x34
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801bff4:	461a      	mov	r2, r3
 801bff6:	2302      	movs	r3, #2
 801bff8:	4843      	ldr	r0, [pc, #268]	; (801c108 <TIM_SYNC_PWM_Start+0x148>)
 801bffa:	f7ef f937 	bl	800b26c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801bffe:	4b41      	ldr	r3, [pc, #260]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2201      	movs	r2, #1
 801c004:	2100      	movs	r1, #0
 801c006:	4618      	mov	r0, r3
 801c008:	f7f6 fa66 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801c00c:	4b3c      	ldr	r3, [pc, #240]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c00e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c012:	b2db      	uxtb	r3, r3
 801c014:	2b01      	cmp	r3, #1
 801c016:	d11d      	bne.n	801c054 <TIM_SYNC_PWM_Start+0x94>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 801c018:	4b39      	ldr	r3, [pc, #228]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c01a:	88db      	ldrh	r3, [r3, #6]
 801c01c:	b29a      	uxth	r2, r3
 801c01e:	4b39      	ldr	r3, [pc, #228]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801c024:	4b37      	ldr	r3, [pc, #220]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	68da      	ldr	r2, [r3, #12]
 801c02a:	4b36      	ldr	r3, [pc, #216]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c032:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801c034:	4935      	ldr	r1, [pc, #212]	; (801c10c <TIM_SYNC_PWM_Start+0x14c>)
				(uint32_t) &(htim8.Instance->CCR2), 2);
 801c036:	4b33      	ldr	r3, [pc, #204]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	3338      	adds	r3, #56	; 0x38
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801c03c:	461a      	mov	r2, r3
 801c03e:	2302      	movs	r3, #2
 801c040:	4833      	ldr	r0, [pc, #204]	; (801c110 <TIM_SYNC_PWM_Start+0x150>)
 801c042:	f7ef f913 	bl	800b26c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801c046:	4b2f      	ldr	r3, [pc, #188]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	2201      	movs	r2, #1
 801c04c:	2104      	movs	r1, #4
 801c04e:	4618      	mov	r0, r3
 801c050:	f7f6 fa42 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801c054:	4b2a      	ldr	r3, [pc, #168]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c056:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	2b01      	cmp	r3, #1
 801c05e:	d11d      	bne.n	801c09c <TIM_SYNC_PWM_Start+0xdc>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 801c060:	4b27      	ldr	r3, [pc, #156]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c062:	895b      	ldrh	r3, [r3, #10]
 801c064:	b29a      	uxth	r2, r3
 801c066:	4b27      	ldr	r3, [pc, #156]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801c06c:	4b25      	ldr	r3, [pc, #148]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	68da      	ldr	r2, [r3, #12]
 801c072:	4b24      	ldr	r3, [pc, #144]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c07a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801c07c:	4925      	ldr	r1, [pc, #148]	; (801c114 <TIM_SYNC_PWM_Start+0x154>)
				(uint32_t) &(htim8.Instance->CCR3), 2);
 801c07e:	4b21      	ldr	r3, [pc, #132]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	333c      	adds	r3, #60	; 0x3c
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801c084:	461a      	mov	r2, r3
 801c086:	2302      	movs	r3, #2
 801c088:	4823      	ldr	r0, [pc, #140]	; (801c118 <TIM_SYNC_PWM_Start+0x158>)
 801c08a:	f7ef f8ef 	bl	800b26c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 801c08e:	4b1d      	ldr	r3, [pc, #116]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	2201      	movs	r2, #1
 801c094:	2108      	movs	r1, #8
 801c096:	4618      	mov	r0, r3
 801c098:	f7f6 fa1e 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801c09c:	4b18      	ldr	r3, [pc, #96]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c09e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c0a2:	b2db      	uxtb	r3, r3
 801c0a4:	2b01      	cmp	r3, #1
 801c0a6:	d11d      	bne.n	801c0e4 <TIM_SYNC_PWM_Start+0x124>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 801c0a8:	4b15      	ldr	r3, [pc, #84]	; (801c100 <TIM_SYNC_PWM_Start+0x140>)
 801c0aa:	89db      	ldrh	r3, [r3, #14]
 801c0ac:	b29a      	uxth	r2, r3
 801c0ae:	4b15      	ldr	r3, [pc, #84]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801c0b4:	4b13      	ldr	r3, [pc, #76]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	68da      	ldr	r2, [r3, #12]
 801c0ba:	4b12      	ldr	r3, [pc, #72]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c0c2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801c0c4:	4915      	ldr	r1, [pc, #84]	; (801c11c <TIM_SYNC_PWM_Start+0x15c>)
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
 801c0c6:	4b0f      	ldr	r3, [pc, #60]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	3340      	adds	r3, #64	; 0x40
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801c0cc:	461a      	mov	r2, r3
 801c0ce:	2302      	movs	r3, #2
 801c0d0:	4813      	ldr	r0, [pc, #76]	; (801c120 <TIM_SYNC_PWM_Start+0x160>)
 801c0d2:	f7ef f8cb 	bl	800b26c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 801c0d6:	4b0b      	ldr	r3, [pc, #44]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	2201      	movs	r2, #1
 801c0dc:	210c      	movs	r1, #12
 801c0de:	4618      	mov	r0, r3
 801c0e0:	f7f6 f9fa 	bl	80124d8 <TIM_CCxChannelCmd>
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 801c0e4:	4b07      	ldr	r3, [pc, #28]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c0ea:	4b06      	ldr	r3, [pc, #24]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c0f2:	645a      	str	r2, [r3, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 801c0f4:	4803      	ldr	r0, [pc, #12]	; (801c104 <TIM_SYNC_PWM_Start+0x144>)
 801c0f6:	f7f1 fd87 	bl	800dc08 <HAL_TIM_Base_Start>
}
 801c0fa:	bf00      	nop
 801c0fc:	bd80      	pop	{r7, pc}
 801c0fe:	bf00      	nop
 801c100:	20015cb8 	.word	0x20015cb8
 801c104:	200160f4 	.word	0x200160f4
 801c108:	20016bc0 	.word	0x20016bc0
 801c10c:	20015cbc 	.word	0x20015cbc
 801c110:	20016b60 	.word	0x20016b60
 801c114:	20015cc0 	.word	0x20015cc0
 801c118:	20016c80 	.word	0x20016c80
 801c11c:	20015cc4 	.word	0x20015cc4
 801c120:	20016c20 	.word	0x20016c20

0801c124 <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 801c124:	b580      	push	{r7, lr}
 801c126:	af00      	add	r7, sp, #0
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 801c128:	4b62      	ldr	r3, [pc, #392]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	6a1a      	ldr	r2, [r3, #32]
 801c12e:	f241 1311 	movw	r3, #4369	; 0x1111
 801c132:	4013      	ands	r3, r2
 801c134:	2b00      	cmp	r3, #0
 801c136:	d10f      	bne.n	801c158 <TIM_SYNC_PWM_Stop+0x34>
 801c138:	4b5e      	ldr	r3, [pc, #376]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	6a1a      	ldr	r2, [r3, #32]
 801c13e:	f244 4344 	movw	r3, #17476	; 0x4444
 801c142:	4013      	ands	r3, r2
 801c144:	2b00      	cmp	r3, #0
 801c146:	d107      	bne.n	801c158 <TIM_SYNC_PWM_Stop+0x34>
 801c148:	4b5a      	ldr	r3, [pc, #360]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	681a      	ldr	r2, [r3, #0]
 801c14e:	4b59      	ldr	r3, [pc, #356]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	f022 0201 	bic.w	r2, r2, #1
 801c156:	601a      	str	r2, [r3, #0]
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 801c158:	4b56      	ldr	r3, [pc, #344]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	6a1a      	ldr	r2, [r3, #32]
 801c15e:	f241 1311 	movw	r3, #4369	; 0x1111
 801c162:	4013      	ands	r3, r2
 801c164:	2b00      	cmp	r3, #0
 801c166:	d10f      	bne.n	801c188 <TIM_SYNC_PWM_Stop+0x64>
 801c168:	4b52      	ldr	r3, [pc, #328]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	6a1a      	ldr	r2, [r3, #32]
 801c16e:	f244 4344 	movw	r3, #17476	; 0x4444
 801c172:	4013      	ands	r3, r2
 801c174:	2b00      	cmp	r3, #0
 801c176:	d107      	bne.n	801c188 <TIM_SYNC_PWM_Stop+0x64>
 801c178:	4b4e      	ldr	r3, [pc, #312]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c17e:	4b4d      	ldr	r3, [pc, #308]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c186:	645a      	str	r2, [r3, #68]	; 0x44

	if (syncPwm.chan1 == CHAN_ENABLE) {
 801c188:	4b4b      	ldr	r3, [pc, #300]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c18a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c18e:	b2db      	uxtb	r3, r3
 801c190:	2b01      	cmp	r3, #1
 801c192:	d111      	bne.n	801c1b8 <TIM_SYNC_PWM_Stop+0x94>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 801c194:	4b47      	ldr	r3, [pc, #284]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	68da      	ldr	r2, [r3, #12]
 801c19a:	4b46      	ldr	r3, [pc, #280]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c1a2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 801c1a4:	4845      	ldr	r0, [pc, #276]	; (801c2bc <TIM_SYNC_PWM_Stop+0x198>)
 801c1a6:	f7ef f93d 	bl	800b424 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801c1aa:	4b42      	ldr	r3, [pc, #264]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	2100      	movs	r1, #0
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7f6 f990 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801c1b8:	4b3f      	ldr	r3, [pc, #252]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c1ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d111      	bne.n	801c1e8 <TIM_SYNC_PWM_Stop+0xc4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 801c1c4:	4b3b      	ldr	r3, [pc, #236]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	68da      	ldr	r2, [r3, #12]
 801c1ca:	4b3a      	ldr	r3, [pc, #232]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c1d2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 801c1d4:	483a      	ldr	r0, [pc, #232]	; (801c2c0 <TIM_SYNC_PWM_Stop+0x19c>)
 801c1d6:	f7ef f925 	bl	800b424 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801c1da:	4b36      	ldr	r3, [pc, #216]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	2104      	movs	r1, #4
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	f7f6 f978 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801c1e8:	4b33      	ldr	r3, [pc, #204]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c1ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c1ee:	b2db      	uxtb	r3, r3
 801c1f0:	2b01      	cmp	r3, #1
 801c1f2:	d111      	bne.n	801c218 <TIM_SYNC_PWM_Stop+0xf4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 801c1f4:	4b2f      	ldr	r3, [pc, #188]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	68da      	ldr	r2, [r3, #12]
 801c1fa:	4b2e      	ldr	r3, [pc, #184]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c202:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 801c204:	482f      	ldr	r0, [pc, #188]	; (801c2c4 <TIM_SYNC_PWM_Stop+0x1a0>)
 801c206:	f7ef f90d 	bl	800b424 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 801c20a:	4b2a      	ldr	r3, [pc, #168]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	2200      	movs	r2, #0
 801c210:	2108      	movs	r1, #8
 801c212:	4618      	mov	r0, r3
 801c214:	f7f6 f960 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801c218:	4b27      	ldr	r3, [pc, #156]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c21a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	2b01      	cmp	r3, #1
 801c222:	d111      	bne.n	801c248 <TIM_SYNC_PWM_Stop+0x124>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 801c224:	4b23      	ldr	r3, [pc, #140]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	68da      	ldr	r2, [r3, #12]
 801c22a:	4b22      	ldr	r3, [pc, #136]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c232:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 801c234:	4824      	ldr	r0, [pc, #144]	; (801c2c8 <TIM_SYNC_PWM_Stop+0x1a4>)
 801c236:	f7ef f8f5 	bl	800b424 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 801c23a:	4b1e      	ldr	r3, [pc, #120]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	2200      	movs	r2, #0
 801c240:	210c      	movs	r1, #12
 801c242:	4618      	mov	r0, r3
 801c244:	f7f6 f948 	bl	80124d8 <TIM_CCxChannelCmd>
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 801c248:	4b1a      	ldr	r3, [pc, #104]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c24e:	b29a      	uxth	r2, r3
 801c250:	4b19      	ldr	r3, [pc, #100]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c252:	821a      	strh	r2, [r3, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 801c254:	4b17      	ldr	r3, [pc, #92]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c25a:	b29a      	uxth	r2, r3
 801c25c:	4b16      	ldr	r3, [pc, #88]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c25e:	825a      	strh	r2, [r3, #18]

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 801c260:	4b1a      	ldr	r3, [pc, #104]	; (801c2cc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c264:	4a19      	ldr	r2, [pc, #100]	; (801c2cc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c26a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801c26c:	4b17      	ldr	r3, [pc, #92]	; (801c2cc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c270:	4a16      	ldr	r2, [pc, #88]	; (801c2cc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c276:	6413      	str	r3, [r2, #64]	; 0x40

	MX_TIM8_SYNC_PWM_Init();
 801c278:	f7ff fc98 	bl	801bbac <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 801c27c:	4b0e      	ldr	r3, [pc, #56]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c27e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c282:	b2db      	uxtb	r3, r3
 801c284:	2b01      	cmp	r3, #1
 801c286:	d101      	bne.n	801c28c <TIM_SYNC_PWM_Stop+0x168>
		TIM_SYNC_PWM_StepMode_Enable();
 801c288:	f000 f862 	bl	801c350 <TIM_SYNC_PWM_StepMode_Enable>
	}

	/* Load previous configuration. */
	htim8.Instance->PSC = syncPwm.timPrescReg;
 801c28c:	4b0a      	ldr	r3, [pc, #40]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c28e:	8a5b      	ldrh	r3, [r3, #18]
 801c290:	b29a      	uxth	r2, r3
 801c292:	4b08      	ldr	r3, [pc, #32]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 801c298:	4b07      	ldr	r3, [pc, #28]	; (801c2b8 <TIM_SYNC_PWM_Stop+0x194>)
 801c29a:	8a1b      	ldrh	r3, [r3, #16]
 801c29c:	b29a      	uxth	r2, r3
 801c29e:	4b05      	ldr	r3, [pc, #20]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_TIM_GenerateEvent_UPDATE(htim8.Instance);
 801c2a4:	4b03      	ldr	r3, [pc, #12]	; (801c2b4 <TIM_SYNC_PWM_Stop+0x190>)
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f7ff fc6e 	bl	801bb8a <LL_TIM_GenerateEvent_UPDATE>
}
 801c2ae:	bf00      	nop
 801c2b0:	bd80      	pop	{r7, pc}
 801c2b2:	bf00      	nop
 801c2b4:	200160f4 	.word	0x200160f4
 801c2b8:	20015cb8 	.word	0x20015cb8
 801c2bc:	20016bc0 	.word	0x20016bc0
 801c2c0:	20016b60 	.word	0x20016b60
 801c2c4:	20016c80 	.word	0x20016c80
 801c2c8:	20016c20 	.word	0x20016c20
 801c2cc:	40021000 	.word	0x40021000

0801c2d0 <TIM_SYNC_PWM_DMA_ChanConfig>:
 The channel number is sent in previous message.
 * @param  ccr1st:	the value of CCR for the 1st edge
 * @param  ccr2st:	the value of CCR for the 2st edge
 * @retval None
 */
void TIM_SYNC_PWM_DMA_ChanConfig(uint16_t ccr1st, uint16_t ccr2nd) {
 801c2d0:	b480      	push	{r7}
 801c2d2:	b083      	sub	sp, #12
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	4603      	mov	r3, r0
 801c2d8:	460a      	mov	r2, r1
 801c2da:	80fb      	strh	r3, [r7, #6]
 801c2dc:	4613      	mov	r3, r2
 801c2de:	80bb      	strh	r3, [r7, #4]
	switch (syncPwm.channelToConfig) {
 801c2e0:	4b1a      	ldr	r3, [pc, #104]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c2e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c2e6:	b2db      	uxtb	r3, r3
 801c2e8:	3b01      	subs	r3, #1
 801c2ea:	2b03      	cmp	r3, #3
 801c2ec:	d826      	bhi.n	801c33c <TIM_SYNC_PWM_DMA_ChanConfig+0x6c>
 801c2ee:	a201      	add	r2, pc, #4	; (adr r2, 801c2f4 <TIM_SYNC_PWM_DMA_ChanConfig+0x24>)
 801c2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2f4:	0801c305 	.word	0x0801c305
 801c2f8:	0801c313 	.word	0x0801c313
 801c2fc:	0801c321 	.word	0x0801c321
 801c300:	0801c32f 	.word	0x0801c32f
	case SYNC_PWM_CHANNEL1:
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 801c304:	4a11      	ldr	r2, [pc, #68]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c306:	88bb      	ldrh	r3, [r7, #4]
 801c308:	8013      	strh	r3, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 801c30a:	4a10      	ldr	r2, [pc, #64]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c30c:	88fb      	ldrh	r3, [r7, #6]
 801c30e:	8053      	strh	r3, [r2, #2]
		break;
 801c310:	e015      	b.n	801c33e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL2:
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 801c312:	4a0e      	ldr	r2, [pc, #56]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c314:	88bb      	ldrh	r3, [r7, #4]
 801c316:	8093      	strh	r3, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 801c318:	4a0c      	ldr	r2, [pc, #48]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c31a:	88fb      	ldrh	r3, [r7, #6]
 801c31c:	80d3      	strh	r3, [r2, #6]
		break;
 801c31e:	e00e      	b.n	801c33e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL3:
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 801c320:	4a0a      	ldr	r2, [pc, #40]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c322:	88bb      	ldrh	r3, [r7, #4]
 801c324:	8113      	strh	r3, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 801c326:	4a09      	ldr	r2, [pc, #36]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c328:	88fb      	ldrh	r3, [r7, #6]
 801c32a:	8153      	strh	r3, [r2, #10]
		break;
 801c32c:	e007      	b.n	801c33e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL4:
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 801c32e:	4a07      	ldr	r2, [pc, #28]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c330:	88bb      	ldrh	r3, [r7, #4]
 801c332:	8193      	strh	r3, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 801c334:	4a05      	ldr	r2, [pc, #20]	; (801c34c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c336:	88fb      	ldrh	r3, [r7, #6]
 801c338:	81d3      	strh	r3, [r2, #14]
		break;
 801c33a:	e000      	b.n	801c33e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	default:
		break;
 801c33c:	bf00      	nop
	}
}
 801c33e:	bf00      	nop
 801c340:	370c      	adds	r7, #12
 801c342:	46bd      	mov	sp, r7
 801c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c348:	4770      	bx	lr
 801c34a:	bf00      	nop
 801c34c:	20015cb8 	.word	0x20015cb8

0801c350 <TIM_SYNC_PWM_StepMode_Enable>:
 * @brief  Enable Step mode for Synch. PWMs.
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
 801c350:	b580      	push	{r7, lr}
 801c352:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 801c354:	4b05      	ldr	r3, [pc, #20]	; (801c36c <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2108      	movs	r1, #8
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7ff fc02 	bl	801bb64 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_ENABLE;
 801c360:	4b03      	ldr	r3, [pc, #12]	; (801c370 <TIM_SYNC_PWM_StepMode_Enable+0x20>)
 801c362:	2201      	movs	r2, #1
 801c364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c368:	bf00      	nop
 801c36a:	bd80      	pop	{r7, pc}
 801c36c:	200160f4 	.word	0x200160f4
 801c370:	20015cb8 	.word	0x20015cb8

0801c374 <TIM_SYNC_PWM_StepMode_Disable>:
 * @brief  Disable Step mode for Synch. PWMs.
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
 801c374:	b580      	push	{r7, lr}
 801c376:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 801c378:	4b05      	ldr	r3, [pc, #20]	; (801c390 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	2100      	movs	r1, #0
 801c37e:	4618      	mov	r0, r3
 801c380:	f7ff fbf0 	bl	801bb64 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_DISABLE;
 801c384:	4b03      	ldr	r3, [pc, #12]	; (801c394 <TIM_SYNC_PWM_StepMode_Disable+0x20>)
 801c386:	2200      	movs	r2, #0
 801c388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c38c:	bf00      	nop
 801c38e:	bd80      	pop	{r7, pc}
 801c390:	200160f4 	.word	0x200160f4
 801c394:	20015cb8 	.word	0x20015cb8

0801c398 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 801c398:	b580      	push	{r7, lr}
 801c39a:	b084      	sub	sp, #16
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 801c3a2:	f7f0 fdb9 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 801c3a6:	60f8      	str	r0, [r7, #12]
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 801c3a8:	ed97 0b00 	vldr	d0, [r7]
 801c3ac:	68f9      	ldr	r1, [r7, #12]
 801c3ae:	4807      	ldr	r0, [pc, #28]	; (801c3cc <TIM_Reconfig_SyncPwm+0x34>)
 801c3b0:	f7fc fe0e 	bl	8018fd0 <TIM_ReconfigPrecise>
 801c3b4:	eeb0 7a40 	vmov.f32	s14, s0
 801c3b8:	eef0 7a60 	vmov.f32	s15, s1
}
 801c3bc:	eeb0 0a47 	vmov.f32	s0, s14
 801c3c0:	eef0 0a67 	vmov.f32	s1, s15
 801c3c4:	3710      	adds	r7, #16
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}
 801c3ca:	bf00      	nop
 801c3cc:	200160f4 	.word	0x200160f4

0801c3d0 <MX_UART_Init>:
	return COMM_BUFFER_SIZE-hdma_usart2_rx.Instance->CNDTR;
}

/* USART2 init function */
void MX_UART_Init(void)
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	af00      	add	r7, sp, #0
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 801c3d4:	4b21      	ldr	r3, [pc, #132]	; (801c45c <MX_UART_Init+0x8c>)
 801c3d6:	4a22      	ldr	r2, [pc, #136]	; (801c460 <MX_UART_Init+0x90>)
 801c3d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_SPEED;
 801c3da:	4b20      	ldr	r3, [pc, #128]	; (801c45c <MX_UART_Init+0x8c>)
 801c3dc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 801c3e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801c3e2:	4b1e      	ldr	r3, [pc, #120]	; (801c45c <MX_UART_Init+0x8c>)
 801c3e4:	2200      	movs	r2, #0
 801c3e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801c3e8:	4b1c      	ldr	r3, [pc, #112]	; (801c45c <MX_UART_Init+0x8c>)
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801c3ee:	4b1b      	ldr	r3, [pc, #108]	; (801c45c <MX_UART_Init+0x8c>)
 801c3f0:	2200      	movs	r2, #0
 801c3f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801c3f4:	4b19      	ldr	r3, [pc, #100]	; (801c45c <MX_UART_Init+0x8c>)
 801c3f6:	220c      	movs	r2, #12
 801c3f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801c3fa:	4b18      	ldr	r3, [pc, #96]	; (801c45c <MX_UART_Init+0x8c>)
 801c3fc:	2200      	movs	r2, #0
 801c3fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801c400:	4b16      	ldr	r3, [pc, #88]	; (801c45c <MX_UART_Init+0x8c>)
 801c402:	2200      	movs	r2, #0
 801c404:	61da      	str	r2, [r3, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801c406:	4b15      	ldr	r3, [pc, #84]	; (801c45c <MX_UART_Init+0x8c>)
 801c408:	2200      	movs	r2, #0
 801c40a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801c40c:	4b13      	ldr	r3, [pc, #76]	; (801c45c <MX_UART_Init+0x8c>)
 801c40e:	2200      	movs	r2, #0
 801c410:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801c412:	4812      	ldr	r0, [pc, #72]	; (801c45c <MX_UART_Init+0x8c>)
 801c414:	f7f6 fc6e 	bl	8012cf4 <HAL_UART_Init>
 801c418:	4603      	mov	r3, r0
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d001      	beq.n	801c422 <MX_UART_Init+0x52>
  {
    Error_Handler();
 801c41e:	f7fc f9c3 	bl	80187a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c422:	2100      	movs	r1, #0
 801c424:	480d      	ldr	r0, [pc, #52]	; (801c45c <MX_UART_Init+0x8c>)
 801c426:	f7f8 fa9b 	bl	8014960 <HAL_UARTEx_SetTxFifoThreshold>
 801c42a:	4603      	mov	r3, r0
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d001      	beq.n	801c434 <MX_UART_Init+0x64>
  {
    Error_Handler();
 801c430:	f7fc f9ba 	bl	80187a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c434:	2100      	movs	r1, #0
 801c436:	4809      	ldr	r0, [pc, #36]	; (801c45c <MX_UART_Init+0x8c>)
 801c438:	f7f8 fb1e 	bl	8014a78 <HAL_UARTEx_SetRxFifoThreshold>
 801c43c:	4603      	mov	r3, r0
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d001      	beq.n	801c446 <MX_UART_Init+0x76>
  {
    Error_Handler();
 801c442:	f7fc f9b1 	bl	80187a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801c446:	4805      	ldr	r0, [pc, #20]	; (801c45c <MX_UART_Init+0x8c>)
 801c448:	f7f8 fa22 	bl	8014890 <HAL_UARTEx_DisableFifoMode>
 801c44c:	4603      	mov	r3, r0
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d001      	beq.n	801c456 <MX_UART_Init+0x86>
  {
    Error_Handler();
 801c452:	f7fc f9a9 	bl	80187a8 <Error_Handler>
  }

}
 801c456:	bf00      	nop
 801c458:	bd80      	pop	{r7, pc}
 801c45a:	bf00      	nop
 801c45c:	20016da0 	.word	0x20016da0
 801c460:	40004400 	.word	0x40004400

0801c464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b08a      	sub	sp, #40	; 0x28
 801c468:	af00      	add	r7, sp, #0
 801c46a:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c46c:	f107 0314 	add.w	r3, r7, #20
 801c470:	2200      	movs	r2, #0
 801c472:	601a      	str	r2, [r3, #0]
 801c474:	605a      	str	r2, [r3, #4]
 801c476:	609a      	str	r2, [r3, #8]
 801c478:	60da      	str	r2, [r3, #12]
 801c47a:	611a      	str	r2, [r3, #16]
	  if(huart->Instance==USART2)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	4a1e      	ldr	r2, [pc, #120]	; (801c4fc <HAL_UART_MspInit+0x98>)
 801c482:	4293      	cmp	r3, r2
 801c484:	d136      	bne.n	801c4f4 <HAL_UART_MspInit+0x90>
	  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_USART2_CLK_ENABLE();
 801c486:	4b1e      	ldr	r3, [pc, #120]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c48a:	4a1d      	ldr	r2, [pc, #116]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c48c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c490:	6593      	str	r3, [r2, #88]	; 0x58
 801c492:	4b1b      	ldr	r3, [pc, #108]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c49a:	613b      	str	r3, [r7, #16]
 801c49c:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 801c49e:	4b18      	ldr	r3, [pc, #96]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4a2:	4a17      	ldr	r2, [pc, #92]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c4a4:	f043 0304 	orr.w	r3, r3, #4
 801c4a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c4aa:	4b15      	ldr	r3, [pc, #84]	; (801c500 <HAL_UART_MspInit+0x9c>)
 801c4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4ae:	f003 0304 	and.w	r3, r3, #4
 801c4b2:	60fb      	str	r3, [r7, #12]
 801c4b4:	68fb      	ldr	r3, [r7, #12]
	    /**USART1 GPIO Configuration
	    PC4     ------> USART1_TX
	    PC5     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 801c4b6:	230c      	movs	r3, #12
 801c4b8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c4ba:	2302      	movs	r3, #2
 801c4bc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c4be:	2300      	movs	r3, #0
 801c4c0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801c4c6:	2307      	movs	r3, #7
 801c4c8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 801c4ca:	f107 0314 	add.w	r3, r7, #20
 801c4ce:	4619      	mov	r1, r3
 801c4d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c4d4:	f7ef fa58 	bl	800b988 <HAL_GPIO_Init>
		
		
	USART2->CR1 |= USART_CR1_RXNEIE;
 801c4d8:	4b08      	ldr	r3, [pc, #32]	; (801c4fc <HAL_UART_MspInit+0x98>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	4a07      	ldr	r2, [pc, #28]	; (801c4fc <HAL_UART_MspInit+0x98>)
 801c4de:	f043 0320 	orr.w	r3, r3, #32
 801c4e2:	6013      	str	r3, [r2, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 801c4e4:	2200      	movs	r2, #0
 801c4e6:	2106      	movs	r1, #6
 801c4e8:	2026      	movs	r0, #38	; 0x26
 801c4ea:	f7ed fc75 	bl	8009dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801c4ee:	2026      	movs	r0, #38	; 0x26
 801c4f0:	f7ed fc9c 	bl	8009e2c <HAL_NVIC_EnableIRQ>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801c4f4:	bf00      	nop
 801c4f6:	3728      	adds	r7, #40	; 0x28
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	bd80      	pop	{r7, pc}
 801c4fc:	40004400 	.word	0x40004400
 801c500:	40021000 	.word	0x40021000

0801c504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801c504:	480d      	ldr	r0, [pc, #52]	; (801c53c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801c506:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801c508:	480d      	ldr	r0, [pc, #52]	; (801c540 <LoopForever+0x6>)
  ldr r1, =_edata
 801c50a:	490e      	ldr	r1, [pc, #56]	; (801c544 <LoopForever+0xa>)
  ldr r2, =_sidata
 801c50c:	4a0e      	ldr	r2, [pc, #56]	; (801c548 <LoopForever+0xe>)
  movs r3, #0
 801c50e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801c510:	e002      	b.n	801c518 <LoopCopyDataInit>

0801c512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801c512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801c514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801c516:	3304      	adds	r3, #4

0801c518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801c518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801c51a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801c51c:	d3f9      	bcc.n	801c512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801c51e:	4a0b      	ldr	r2, [pc, #44]	; (801c54c <LoopForever+0x12>)
  ldr r4, =_ebss
 801c520:	4c0b      	ldr	r4, [pc, #44]	; (801c550 <LoopForever+0x16>)
  movs r3, #0
 801c522:	2300      	movs	r3, #0
  b LoopFillZerobss
 801c524:	e001      	b.n	801c52a <LoopFillZerobss>

0801c526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801c526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801c528:	3204      	adds	r2, #4

0801c52a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801c52a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801c52c:	d3fb      	bcc.n	801c526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801c52e:	f7fc fb51 	bl	8018bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801c532:	f000 f817 	bl	801c564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801c536:	f7fc f86f 	bl	8018618 <main>

0801c53a <LoopForever>:

LoopForever:
    b LoopForever
 801c53a:	e7fe      	b.n	801c53a <LoopForever>
  ldr   r0, =_estack
 801c53c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801c540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801c544:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 801c548:	0801e0c8 	.word	0x0801e0c8
  ldr r2, =_sbss
 801c54c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 801c550:	20016e2c 	.word	0x20016e2c

0801c554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801c554:	e7fe      	b.n	801c554 <ADC1_2_IRQHandler>
	...

0801c558 <__errno>:
 801c558:	4b01      	ldr	r3, [pc, #4]	; (801c560 <__errno+0x8>)
 801c55a:	6818      	ldr	r0, [r3, #0]
 801c55c:	4770      	bx	lr
 801c55e:	bf00      	nop
 801c560:	200000dc 	.word	0x200000dc

0801c564 <__libc_init_array>:
 801c564:	b570      	push	{r4, r5, r6, lr}
 801c566:	4e0d      	ldr	r6, [pc, #52]	; (801c59c <__libc_init_array+0x38>)
 801c568:	4c0d      	ldr	r4, [pc, #52]	; (801c5a0 <__libc_init_array+0x3c>)
 801c56a:	1ba4      	subs	r4, r4, r6
 801c56c:	10a4      	asrs	r4, r4, #2
 801c56e:	2500      	movs	r5, #0
 801c570:	42a5      	cmp	r5, r4
 801c572:	d109      	bne.n	801c588 <__libc_init_array+0x24>
 801c574:	4e0b      	ldr	r6, [pc, #44]	; (801c5a4 <__libc_init_array+0x40>)
 801c576:	4c0c      	ldr	r4, [pc, #48]	; (801c5a8 <__libc_init_array+0x44>)
 801c578:	f001 f884 	bl	801d684 <_init>
 801c57c:	1ba4      	subs	r4, r4, r6
 801c57e:	10a4      	asrs	r4, r4, #2
 801c580:	2500      	movs	r5, #0
 801c582:	42a5      	cmp	r5, r4
 801c584:	d105      	bne.n	801c592 <__libc_init_array+0x2e>
 801c586:	bd70      	pop	{r4, r5, r6, pc}
 801c588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c58c:	4798      	blx	r3
 801c58e:	3501      	adds	r5, #1
 801c590:	e7ee      	b.n	801c570 <__libc_init_array+0xc>
 801c592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c596:	4798      	blx	r3
 801c598:	3501      	adds	r5, #1
 801c59a:	e7f2      	b.n	801c582 <__libc_init_array+0x1e>
 801c59c:	0801e0c0 	.word	0x0801e0c0
 801c5a0:	0801e0c0 	.word	0x0801e0c0
 801c5a4:	0801e0c0 	.word	0x0801e0c0
 801c5a8:	0801e0c4 	.word	0x0801e0c4

0801c5ac <memcpy>:
 801c5ac:	b510      	push	{r4, lr}
 801c5ae:	1e43      	subs	r3, r0, #1
 801c5b0:	440a      	add	r2, r1
 801c5b2:	4291      	cmp	r1, r2
 801c5b4:	d100      	bne.n	801c5b8 <memcpy+0xc>
 801c5b6:	bd10      	pop	{r4, pc}
 801c5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c5c0:	e7f7      	b.n	801c5b2 <memcpy+0x6>

0801c5c2 <memset>:
 801c5c2:	4402      	add	r2, r0
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	4293      	cmp	r3, r2
 801c5c8:	d100      	bne.n	801c5cc <memset+0xa>
 801c5ca:	4770      	bx	lr
 801c5cc:	f803 1b01 	strb.w	r1, [r3], #1
 801c5d0:	e7f9      	b.n	801c5c6 <memset+0x4>
	...

0801c5d4 <pow>:
 801c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d8:	ed2d 8b04 	vpush	{d8-d9}
 801c5dc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801c8b0 <pow+0x2dc>
 801c5e0:	b08d      	sub	sp, #52	; 0x34
 801c5e2:	ec57 6b10 	vmov	r6, r7, d0
 801c5e6:	ec55 4b11 	vmov	r4, r5, d1
 801c5ea:	f000 f965 	bl	801c8b8 <__ieee754_pow>
 801c5ee:	f999 3000 	ldrsb.w	r3, [r9]
 801c5f2:	9300      	str	r3, [sp, #0]
 801c5f4:	3301      	adds	r3, #1
 801c5f6:	eeb0 8a40 	vmov.f32	s16, s0
 801c5fa:	eef0 8a60 	vmov.f32	s17, s1
 801c5fe:	46c8      	mov	r8, r9
 801c600:	d05f      	beq.n	801c6c2 <pow+0xee>
 801c602:	4622      	mov	r2, r4
 801c604:	462b      	mov	r3, r5
 801c606:	4620      	mov	r0, r4
 801c608:	4629      	mov	r1, r5
 801c60a:	f7e4 fa5f 	bl	8000acc <__aeabi_dcmpun>
 801c60e:	4683      	mov	fp, r0
 801c610:	2800      	cmp	r0, #0
 801c612:	d156      	bne.n	801c6c2 <pow+0xee>
 801c614:	4632      	mov	r2, r6
 801c616:	463b      	mov	r3, r7
 801c618:	4630      	mov	r0, r6
 801c61a:	4639      	mov	r1, r7
 801c61c:	f7e4 fa56 	bl	8000acc <__aeabi_dcmpun>
 801c620:	9001      	str	r0, [sp, #4]
 801c622:	b1e8      	cbz	r0, 801c660 <pow+0x8c>
 801c624:	2200      	movs	r2, #0
 801c626:	2300      	movs	r3, #0
 801c628:	4620      	mov	r0, r4
 801c62a:	4629      	mov	r1, r5
 801c62c:	f7e4 fa1c 	bl	8000a68 <__aeabi_dcmpeq>
 801c630:	2800      	cmp	r0, #0
 801c632:	d046      	beq.n	801c6c2 <pow+0xee>
 801c634:	2301      	movs	r3, #1
 801c636:	9302      	str	r3, [sp, #8]
 801c638:	4b96      	ldr	r3, [pc, #600]	; (801c894 <pow+0x2c0>)
 801c63a:	9303      	str	r3, [sp, #12]
 801c63c:	4b96      	ldr	r3, [pc, #600]	; (801c898 <pow+0x2c4>)
 801c63e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c642:	2200      	movs	r2, #0
 801c644:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c648:	9b00      	ldr	r3, [sp, #0]
 801c64a:	2b02      	cmp	r3, #2
 801c64c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c650:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c654:	d033      	beq.n	801c6be <pow+0xea>
 801c656:	a802      	add	r0, sp, #8
 801c658:	f000 fefd 	bl	801d456 <matherr>
 801c65c:	bb48      	cbnz	r0, 801c6b2 <pow+0xde>
 801c65e:	e05d      	b.n	801c71c <pow+0x148>
 801c660:	f04f 0a00 	mov.w	sl, #0
 801c664:	f04f 0b00 	mov.w	fp, #0
 801c668:	4652      	mov	r2, sl
 801c66a:	465b      	mov	r3, fp
 801c66c:	4630      	mov	r0, r6
 801c66e:	4639      	mov	r1, r7
 801c670:	f7e4 f9fa 	bl	8000a68 <__aeabi_dcmpeq>
 801c674:	ec4b ab19 	vmov	d9, sl, fp
 801c678:	2800      	cmp	r0, #0
 801c67a:	d054      	beq.n	801c726 <pow+0x152>
 801c67c:	4652      	mov	r2, sl
 801c67e:	465b      	mov	r3, fp
 801c680:	4620      	mov	r0, r4
 801c682:	4629      	mov	r1, r5
 801c684:	f7e4 f9f0 	bl	8000a68 <__aeabi_dcmpeq>
 801c688:	4680      	mov	r8, r0
 801c68a:	b318      	cbz	r0, 801c6d4 <pow+0x100>
 801c68c:	2301      	movs	r3, #1
 801c68e:	9302      	str	r3, [sp, #8]
 801c690:	4b80      	ldr	r3, [pc, #512]	; (801c894 <pow+0x2c0>)
 801c692:	9303      	str	r3, [sp, #12]
 801c694:	9b01      	ldr	r3, [sp, #4]
 801c696:	930a      	str	r3, [sp, #40]	; 0x28
 801c698:	9b00      	ldr	r3, [sp, #0]
 801c69a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c69e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c6a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d0d5      	beq.n	801c656 <pow+0x82>
 801c6aa:	4b7b      	ldr	r3, [pc, #492]	; (801c898 <pow+0x2c4>)
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6b4:	b11b      	cbz	r3, 801c6be <pow+0xea>
 801c6b6:	f7ff ff4f 	bl	801c558 <__errno>
 801c6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6bc:	6003      	str	r3, [r0, #0]
 801c6be:	ed9d 8b08 	vldr	d8, [sp, #32]
 801c6c2:	eeb0 0a48 	vmov.f32	s0, s16
 801c6c6:	eef0 0a68 	vmov.f32	s1, s17
 801c6ca:	b00d      	add	sp, #52	; 0x34
 801c6cc:	ecbd 8b04 	vpop	{d8-d9}
 801c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d4:	ec45 4b10 	vmov	d0, r4, r5
 801c6d8:	f000 feb5 	bl	801d446 <finite>
 801c6dc:	2800      	cmp	r0, #0
 801c6de:	d0f0      	beq.n	801c6c2 <pow+0xee>
 801c6e0:	4652      	mov	r2, sl
 801c6e2:	465b      	mov	r3, fp
 801c6e4:	4620      	mov	r0, r4
 801c6e6:	4629      	mov	r1, r5
 801c6e8:	f7e4 f9c8 	bl	8000a7c <__aeabi_dcmplt>
 801c6ec:	2800      	cmp	r0, #0
 801c6ee:	d0e8      	beq.n	801c6c2 <pow+0xee>
 801c6f0:	2301      	movs	r3, #1
 801c6f2:	9302      	str	r3, [sp, #8]
 801c6f4:	4b67      	ldr	r3, [pc, #412]	; (801c894 <pow+0x2c0>)
 801c6f6:	9303      	str	r3, [sp, #12]
 801c6f8:	f999 3000 	ldrsb.w	r3, [r9]
 801c6fc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c700:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c704:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c708:	b913      	cbnz	r3, 801c710 <pow+0x13c>
 801c70a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c70e:	e7a2      	b.n	801c656 <pow+0x82>
 801c710:	4962      	ldr	r1, [pc, #392]	; (801c89c <pow+0x2c8>)
 801c712:	2000      	movs	r0, #0
 801c714:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c718:	2b02      	cmp	r3, #2
 801c71a:	d19c      	bne.n	801c656 <pow+0x82>
 801c71c:	f7ff ff1c 	bl	801c558 <__errno>
 801c720:	2321      	movs	r3, #33	; 0x21
 801c722:	6003      	str	r3, [r0, #0]
 801c724:	e7c5      	b.n	801c6b2 <pow+0xde>
 801c726:	eeb0 0a48 	vmov.f32	s0, s16
 801c72a:	eef0 0a68 	vmov.f32	s1, s17
 801c72e:	f000 fe8a 	bl	801d446 <finite>
 801c732:	9000      	str	r0, [sp, #0]
 801c734:	2800      	cmp	r0, #0
 801c736:	f040 8081 	bne.w	801c83c <pow+0x268>
 801c73a:	ec47 6b10 	vmov	d0, r6, r7
 801c73e:	f000 fe82 	bl	801d446 <finite>
 801c742:	2800      	cmp	r0, #0
 801c744:	d07a      	beq.n	801c83c <pow+0x268>
 801c746:	ec45 4b10 	vmov	d0, r4, r5
 801c74a:	f000 fe7c 	bl	801d446 <finite>
 801c74e:	2800      	cmp	r0, #0
 801c750:	d074      	beq.n	801c83c <pow+0x268>
 801c752:	ec53 2b18 	vmov	r2, r3, d8
 801c756:	ee18 0a10 	vmov	r0, s16
 801c75a:	4619      	mov	r1, r3
 801c75c:	f7e4 f9b6 	bl	8000acc <__aeabi_dcmpun>
 801c760:	f999 9000 	ldrsb.w	r9, [r9]
 801c764:	4b4b      	ldr	r3, [pc, #300]	; (801c894 <pow+0x2c0>)
 801c766:	b1b0      	cbz	r0, 801c796 <pow+0x1c2>
 801c768:	2201      	movs	r2, #1
 801c76a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c76e:	9b00      	ldr	r3, [sp, #0]
 801c770:	930a      	str	r3, [sp, #40]	; 0x28
 801c772:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c776:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c77a:	f1b9 0f00 	cmp.w	r9, #0
 801c77e:	d0c4      	beq.n	801c70a <pow+0x136>
 801c780:	4652      	mov	r2, sl
 801c782:	465b      	mov	r3, fp
 801c784:	4650      	mov	r0, sl
 801c786:	4659      	mov	r1, fp
 801c788:	f7e4 f830 	bl	80007ec <__aeabi_ddiv>
 801c78c:	f1b9 0f02 	cmp.w	r9, #2
 801c790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c794:	e7c1      	b.n	801c71a <pow+0x146>
 801c796:	2203      	movs	r2, #3
 801c798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c79c:	900a      	str	r0, [sp, #40]	; 0x28
 801c79e:	4629      	mov	r1, r5
 801c7a0:	4620      	mov	r0, r4
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	4b3e      	ldr	r3, [pc, #248]	; (801c8a0 <pow+0x2cc>)
 801c7a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c7aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c7ae:	f7e3 fef3 	bl	8000598 <__aeabi_dmul>
 801c7b2:	4604      	mov	r4, r0
 801c7b4:	460d      	mov	r5, r1
 801c7b6:	f1b9 0f00 	cmp.w	r9, #0
 801c7ba:	d124      	bne.n	801c806 <pow+0x232>
 801c7bc:	4b39      	ldr	r3, [pc, #228]	; (801c8a4 <pow+0x2d0>)
 801c7be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c7c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c7c6:	4630      	mov	r0, r6
 801c7c8:	4652      	mov	r2, sl
 801c7ca:	465b      	mov	r3, fp
 801c7cc:	4639      	mov	r1, r7
 801c7ce:	f7e4 f955 	bl	8000a7c <__aeabi_dcmplt>
 801c7d2:	2800      	cmp	r0, #0
 801c7d4:	d056      	beq.n	801c884 <pow+0x2b0>
 801c7d6:	ec45 4b10 	vmov	d0, r4, r5
 801c7da:	f000 fe49 	bl	801d470 <rint>
 801c7de:	4622      	mov	r2, r4
 801c7e0:	462b      	mov	r3, r5
 801c7e2:	ec51 0b10 	vmov	r0, r1, d0
 801c7e6:	f7e4 f93f 	bl	8000a68 <__aeabi_dcmpeq>
 801c7ea:	b920      	cbnz	r0, 801c7f6 <pow+0x222>
 801c7ec:	4b2e      	ldr	r3, [pc, #184]	; (801c8a8 <pow+0x2d4>)
 801c7ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c7f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c7f6:	f998 3000 	ldrsb.w	r3, [r8]
 801c7fa:	2b02      	cmp	r3, #2
 801c7fc:	d142      	bne.n	801c884 <pow+0x2b0>
 801c7fe:	f7ff feab 	bl	801c558 <__errno>
 801c802:	2322      	movs	r3, #34	; 0x22
 801c804:	e78d      	b.n	801c722 <pow+0x14e>
 801c806:	4b29      	ldr	r3, [pc, #164]	; (801c8ac <pow+0x2d8>)
 801c808:	2200      	movs	r2, #0
 801c80a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c80e:	4630      	mov	r0, r6
 801c810:	4652      	mov	r2, sl
 801c812:	465b      	mov	r3, fp
 801c814:	4639      	mov	r1, r7
 801c816:	f7e4 f931 	bl	8000a7c <__aeabi_dcmplt>
 801c81a:	2800      	cmp	r0, #0
 801c81c:	d0eb      	beq.n	801c7f6 <pow+0x222>
 801c81e:	ec45 4b10 	vmov	d0, r4, r5
 801c822:	f000 fe25 	bl	801d470 <rint>
 801c826:	4622      	mov	r2, r4
 801c828:	462b      	mov	r3, r5
 801c82a:	ec51 0b10 	vmov	r0, r1, d0
 801c82e:	f7e4 f91b 	bl	8000a68 <__aeabi_dcmpeq>
 801c832:	2800      	cmp	r0, #0
 801c834:	d1df      	bne.n	801c7f6 <pow+0x222>
 801c836:	2200      	movs	r2, #0
 801c838:	4b18      	ldr	r3, [pc, #96]	; (801c89c <pow+0x2c8>)
 801c83a:	e7da      	b.n	801c7f2 <pow+0x21e>
 801c83c:	2200      	movs	r2, #0
 801c83e:	2300      	movs	r3, #0
 801c840:	ec51 0b18 	vmov	r0, r1, d8
 801c844:	f7e4 f910 	bl	8000a68 <__aeabi_dcmpeq>
 801c848:	2800      	cmp	r0, #0
 801c84a:	f43f af3a 	beq.w	801c6c2 <pow+0xee>
 801c84e:	ec47 6b10 	vmov	d0, r6, r7
 801c852:	f000 fdf8 	bl	801d446 <finite>
 801c856:	2800      	cmp	r0, #0
 801c858:	f43f af33 	beq.w	801c6c2 <pow+0xee>
 801c85c:	ec45 4b10 	vmov	d0, r4, r5
 801c860:	f000 fdf1 	bl	801d446 <finite>
 801c864:	2800      	cmp	r0, #0
 801c866:	f43f af2c 	beq.w	801c6c2 <pow+0xee>
 801c86a:	2304      	movs	r3, #4
 801c86c:	9302      	str	r3, [sp, #8]
 801c86e:	4b09      	ldr	r3, [pc, #36]	; (801c894 <pow+0x2c0>)
 801c870:	9303      	str	r3, [sp, #12]
 801c872:	2300      	movs	r3, #0
 801c874:	930a      	str	r3, [sp, #40]	; 0x28
 801c876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c87a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c87e:	ed8d 9b08 	vstr	d9, [sp, #32]
 801c882:	e7b8      	b.n	801c7f6 <pow+0x222>
 801c884:	a802      	add	r0, sp, #8
 801c886:	f000 fde6 	bl	801d456 <matherr>
 801c88a:	2800      	cmp	r0, #0
 801c88c:	f47f af11 	bne.w	801c6b2 <pow+0xde>
 801c890:	e7b5      	b.n	801c7fe <pow+0x22a>
 801c892:	bf00      	nop
 801c894:	0801e074 	.word	0x0801e074
 801c898:	3ff00000 	.word	0x3ff00000
 801c89c:	fff00000 	.word	0xfff00000
 801c8a0:	3fe00000 	.word	0x3fe00000
 801c8a4:	47efffff 	.word	0x47efffff
 801c8a8:	c7efffff 	.word	0xc7efffff
 801c8ac:	7ff00000 	.word	0x7ff00000
 801c8b0:	20000140 	.word	0x20000140
 801c8b4:	00000000 	.word	0x00000000

0801c8b8 <__ieee754_pow>:
 801c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8bc:	b091      	sub	sp, #68	; 0x44
 801c8be:	ed8d 1b00 	vstr	d1, [sp]
 801c8c2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c8c6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c8ca:	ea58 0302 	orrs.w	r3, r8, r2
 801c8ce:	ec57 6b10 	vmov	r6, r7, d0
 801c8d2:	f000 84be 	beq.w	801d252 <__ieee754_pow+0x99a>
 801c8d6:	4b7a      	ldr	r3, [pc, #488]	; (801cac0 <__ieee754_pow+0x208>)
 801c8d8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c8dc:	429c      	cmp	r4, r3
 801c8de:	463d      	mov	r5, r7
 801c8e0:	ee10 aa10 	vmov	sl, s0
 801c8e4:	dc09      	bgt.n	801c8fa <__ieee754_pow+0x42>
 801c8e6:	d103      	bne.n	801c8f0 <__ieee754_pow+0x38>
 801c8e8:	b93e      	cbnz	r6, 801c8fa <__ieee754_pow+0x42>
 801c8ea:	45a0      	cmp	r8, r4
 801c8ec:	dc0d      	bgt.n	801c90a <__ieee754_pow+0x52>
 801c8ee:	e001      	b.n	801c8f4 <__ieee754_pow+0x3c>
 801c8f0:	4598      	cmp	r8, r3
 801c8f2:	dc02      	bgt.n	801c8fa <__ieee754_pow+0x42>
 801c8f4:	4598      	cmp	r8, r3
 801c8f6:	d10e      	bne.n	801c916 <__ieee754_pow+0x5e>
 801c8f8:	b16a      	cbz	r2, 801c916 <__ieee754_pow+0x5e>
 801c8fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c8fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c902:	ea54 030a 	orrs.w	r3, r4, sl
 801c906:	f000 84a4 	beq.w	801d252 <__ieee754_pow+0x99a>
 801c90a:	486e      	ldr	r0, [pc, #440]	; (801cac4 <__ieee754_pow+0x20c>)
 801c90c:	b011      	add	sp, #68	; 0x44
 801c90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c912:	f000 bda5 	b.w	801d460 <nan>
 801c916:	2d00      	cmp	r5, #0
 801c918:	da53      	bge.n	801c9c2 <__ieee754_pow+0x10a>
 801c91a:	4b6b      	ldr	r3, [pc, #428]	; (801cac8 <__ieee754_pow+0x210>)
 801c91c:	4598      	cmp	r8, r3
 801c91e:	dc4d      	bgt.n	801c9bc <__ieee754_pow+0x104>
 801c920:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c924:	4598      	cmp	r8, r3
 801c926:	dd4c      	ble.n	801c9c2 <__ieee754_pow+0x10a>
 801c928:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c92c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c930:	2b14      	cmp	r3, #20
 801c932:	dd26      	ble.n	801c982 <__ieee754_pow+0xca>
 801c934:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c938:	fa22 f103 	lsr.w	r1, r2, r3
 801c93c:	fa01 f303 	lsl.w	r3, r1, r3
 801c940:	4293      	cmp	r3, r2
 801c942:	d13e      	bne.n	801c9c2 <__ieee754_pow+0x10a>
 801c944:	f001 0101 	and.w	r1, r1, #1
 801c948:	f1c1 0b02 	rsb	fp, r1, #2
 801c94c:	2a00      	cmp	r2, #0
 801c94e:	d15b      	bne.n	801ca08 <__ieee754_pow+0x150>
 801c950:	4b5b      	ldr	r3, [pc, #364]	; (801cac0 <__ieee754_pow+0x208>)
 801c952:	4598      	cmp	r8, r3
 801c954:	d124      	bne.n	801c9a0 <__ieee754_pow+0xe8>
 801c956:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c95a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c95e:	ea53 030a 	orrs.w	r3, r3, sl
 801c962:	f000 8476 	beq.w	801d252 <__ieee754_pow+0x99a>
 801c966:	4b59      	ldr	r3, [pc, #356]	; (801cacc <__ieee754_pow+0x214>)
 801c968:	429c      	cmp	r4, r3
 801c96a:	dd2d      	ble.n	801c9c8 <__ieee754_pow+0x110>
 801c96c:	f1b9 0f00 	cmp.w	r9, #0
 801c970:	f280 8473 	bge.w	801d25a <__ieee754_pow+0x9a2>
 801c974:	2000      	movs	r0, #0
 801c976:	2100      	movs	r1, #0
 801c978:	ec41 0b10 	vmov	d0, r0, r1
 801c97c:	b011      	add	sp, #68	; 0x44
 801c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c982:	2a00      	cmp	r2, #0
 801c984:	d13e      	bne.n	801ca04 <__ieee754_pow+0x14c>
 801c986:	f1c3 0314 	rsb	r3, r3, #20
 801c98a:	fa48 f103 	asr.w	r1, r8, r3
 801c98e:	fa01 f303 	lsl.w	r3, r1, r3
 801c992:	4543      	cmp	r3, r8
 801c994:	f040 8469 	bne.w	801d26a <__ieee754_pow+0x9b2>
 801c998:	f001 0101 	and.w	r1, r1, #1
 801c99c:	f1c1 0b02 	rsb	fp, r1, #2
 801c9a0:	4b4b      	ldr	r3, [pc, #300]	; (801cad0 <__ieee754_pow+0x218>)
 801c9a2:	4598      	cmp	r8, r3
 801c9a4:	d118      	bne.n	801c9d8 <__ieee754_pow+0x120>
 801c9a6:	f1b9 0f00 	cmp.w	r9, #0
 801c9aa:	f280 845a 	bge.w	801d262 <__ieee754_pow+0x9aa>
 801c9ae:	4948      	ldr	r1, [pc, #288]	; (801cad0 <__ieee754_pow+0x218>)
 801c9b0:	4632      	mov	r2, r6
 801c9b2:	463b      	mov	r3, r7
 801c9b4:	2000      	movs	r0, #0
 801c9b6:	f7e3 ff19 	bl	80007ec <__aeabi_ddiv>
 801c9ba:	e7dd      	b.n	801c978 <__ieee754_pow+0xc0>
 801c9bc:	f04f 0b02 	mov.w	fp, #2
 801c9c0:	e7c4      	b.n	801c94c <__ieee754_pow+0x94>
 801c9c2:	f04f 0b00 	mov.w	fp, #0
 801c9c6:	e7c1      	b.n	801c94c <__ieee754_pow+0x94>
 801c9c8:	f1b9 0f00 	cmp.w	r9, #0
 801c9cc:	dad2      	bge.n	801c974 <__ieee754_pow+0xbc>
 801c9ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c9d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c9d6:	e7cf      	b.n	801c978 <__ieee754_pow+0xc0>
 801c9d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c9dc:	d106      	bne.n	801c9ec <__ieee754_pow+0x134>
 801c9de:	4632      	mov	r2, r6
 801c9e0:	463b      	mov	r3, r7
 801c9e2:	4610      	mov	r0, r2
 801c9e4:	4619      	mov	r1, r3
 801c9e6:	f7e3 fdd7 	bl	8000598 <__aeabi_dmul>
 801c9ea:	e7c5      	b.n	801c978 <__ieee754_pow+0xc0>
 801c9ec:	4b39      	ldr	r3, [pc, #228]	; (801cad4 <__ieee754_pow+0x21c>)
 801c9ee:	4599      	cmp	r9, r3
 801c9f0:	d10a      	bne.n	801ca08 <__ieee754_pow+0x150>
 801c9f2:	2d00      	cmp	r5, #0
 801c9f4:	db08      	blt.n	801ca08 <__ieee754_pow+0x150>
 801c9f6:	ec47 6b10 	vmov	d0, r6, r7
 801c9fa:	b011      	add	sp, #68	; 0x44
 801c9fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca00:	f000 bc68 	b.w	801d2d4 <__ieee754_sqrt>
 801ca04:	f04f 0b00 	mov.w	fp, #0
 801ca08:	ec47 6b10 	vmov	d0, r6, r7
 801ca0c:	f000 fd12 	bl	801d434 <fabs>
 801ca10:	ec51 0b10 	vmov	r0, r1, d0
 801ca14:	f1ba 0f00 	cmp.w	sl, #0
 801ca18:	d127      	bne.n	801ca6a <__ieee754_pow+0x1b2>
 801ca1a:	b124      	cbz	r4, 801ca26 <__ieee754_pow+0x16e>
 801ca1c:	4b2c      	ldr	r3, [pc, #176]	; (801cad0 <__ieee754_pow+0x218>)
 801ca1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d121      	bne.n	801ca6a <__ieee754_pow+0x1b2>
 801ca26:	f1b9 0f00 	cmp.w	r9, #0
 801ca2a:	da05      	bge.n	801ca38 <__ieee754_pow+0x180>
 801ca2c:	4602      	mov	r2, r0
 801ca2e:	460b      	mov	r3, r1
 801ca30:	2000      	movs	r0, #0
 801ca32:	4927      	ldr	r1, [pc, #156]	; (801cad0 <__ieee754_pow+0x218>)
 801ca34:	f7e3 feda 	bl	80007ec <__aeabi_ddiv>
 801ca38:	2d00      	cmp	r5, #0
 801ca3a:	da9d      	bge.n	801c978 <__ieee754_pow+0xc0>
 801ca3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ca40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ca44:	ea54 030b 	orrs.w	r3, r4, fp
 801ca48:	d108      	bne.n	801ca5c <__ieee754_pow+0x1a4>
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	460b      	mov	r3, r1
 801ca4e:	4610      	mov	r0, r2
 801ca50:	4619      	mov	r1, r3
 801ca52:	f7e3 fbe9 	bl	8000228 <__aeabi_dsub>
 801ca56:	4602      	mov	r2, r0
 801ca58:	460b      	mov	r3, r1
 801ca5a:	e7ac      	b.n	801c9b6 <__ieee754_pow+0xfe>
 801ca5c:	f1bb 0f01 	cmp.w	fp, #1
 801ca60:	d18a      	bne.n	801c978 <__ieee754_pow+0xc0>
 801ca62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ca66:	4619      	mov	r1, r3
 801ca68:	e786      	b.n	801c978 <__ieee754_pow+0xc0>
 801ca6a:	0fed      	lsrs	r5, r5, #31
 801ca6c:	1e6b      	subs	r3, r5, #1
 801ca6e:	930d      	str	r3, [sp, #52]	; 0x34
 801ca70:	ea5b 0303 	orrs.w	r3, fp, r3
 801ca74:	d102      	bne.n	801ca7c <__ieee754_pow+0x1c4>
 801ca76:	4632      	mov	r2, r6
 801ca78:	463b      	mov	r3, r7
 801ca7a:	e7e8      	b.n	801ca4e <__ieee754_pow+0x196>
 801ca7c:	4b16      	ldr	r3, [pc, #88]	; (801cad8 <__ieee754_pow+0x220>)
 801ca7e:	4598      	cmp	r8, r3
 801ca80:	f340 80fe 	ble.w	801cc80 <__ieee754_pow+0x3c8>
 801ca84:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ca88:	4598      	cmp	r8, r3
 801ca8a:	dd0a      	ble.n	801caa2 <__ieee754_pow+0x1ea>
 801ca8c:	4b0f      	ldr	r3, [pc, #60]	; (801cacc <__ieee754_pow+0x214>)
 801ca8e:	429c      	cmp	r4, r3
 801ca90:	dc0d      	bgt.n	801caae <__ieee754_pow+0x1f6>
 801ca92:	f1b9 0f00 	cmp.w	r9, #0
 801ca96:	f6bf af6d 	bge.w	801c974 <__ieee754_pow+0xbc>
 801ca9a:	a307      	add	r3, pc, #28	; (adr r3, 801cab8 <__ieee754_pow+0x200>)
 801ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caa0:	e79f      	b.n	801c9e2 <__ieee754_pow+0x12a>
 801caa2:	4b0e      	ldr	r3, [pc, #56]	; (801cadc <__ieee754_pow+0x224>)
 801caa4:	429c      	cmp	r4, r3
 801caa6:	ddf4      	ble.n	801ca92 <__ieee754_pow+0x1da>
 801caa8:	4b09      	ldr	r3, [pc, #36]	; (801cad0 <__ieee754_pow+0x218>)
 801caaa:	429c      	cmp	r4, r3
 801caac:	dd18      	ble.n	801cae0 <__ieee754_pow+0x228>
 801caae:	f1b9 0f00 	cmp.w	r9, #0
 801cab2:	dcf2      	bgt.n	801ca9a <__ieee754_pow+0x1e2>
 801cab4:	e75e      	b.n	801c974 <__ieee754_pow+0xbc>
 801cab6:	bf00      	nop
 801cab8:	8800759c 	.word	0x8800759c
 801cabc:	7e37e43c 	.word	0x7e37e43c
 801cac0:	7ff00000 	.word	0x7ff00000
 801cac4:	0801e077 	.word	0x0801e077
 801cac8:	433fffff 	.word	0x433fffff
 801cacc:	3fefffff 	.word	0x3fefffff
 801cad0:	3ff00000 	.word	0x3ff00000
 801cad4:	3fe00000 	.word	0x3fe00000
 801cad8:	41e00000 	.word	0x41e00000
 801cadc:	3feffffe 	.word	0x3feffffe
 801cae0:	2200      	movs	r2, #0
 801cae2:	4b63      	ldr	r3, [pc, #396]	; (801cc70 <__ieee754_pow+0x3b8>)
 801cae4:	f7e3 fba0 	bl	8000228 <__aeabi_dsub>
 801cae8:	a355      	add	r3, pc, #340	; (adr r3, 801cc40 <__ieee754_pow+0x388>)
 801caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caee:	4604      	mov	r4, r0
 801caf0:	460d      	mov	r5, r1
 801caf2:	f7e3 fd51 	bl	8000598 <__aeabi_dmul>
 801caf6:	a354      	add	r3, pc, #336	; (adr r3, 801cc48 <__ieee754_pow+0x390>)
 801caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cafc:	4606      	mov	r6, r0
 801cafe:	460f      	mov	r7, r1
 801cb00:	4620      	mov	r0, r4
 801cb02:	4629      	mov	r1, r5
 801cb04:	f7e3 fd48 	bl	8000598 <__aeabi_dmul>
 801cb08:	2200      	movs	r2, #0
 801cb0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb0e:	4b59      	ldr	r3, [pc, #356]	; (801cc74 <__ieee754_pow+0x3bc>)
 801cb10:	4620      	mov	r0, r4
 801cb12:	4629      	mov	r1, r5
 801cb14:	f7e3 fd40 	bl	8000598 <__aeabi_dmul>
 801cb18:	4602      	mov	r2, r0
 801cb1a:	460b      	mov	r3, r1
 801cb1c:	a14c      	add	r1, pc, #304	; (adr r1, 801cc50 <__ieee754_pow+0x398>)
 801cb1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb22:	f7e3 fb81 	bl	8000228 <__aeabi_dsub>
 801cb26:	4622      	mov	r2, r4
 801cb28:	462b      	mov	r3, r5
 801cb2a:	f7e3 fd35 	bl	8000598 <__aeabi_dmul>
 801cb2e:	4602      	mov	r2, r0
 801cb30:	460b      	mov	r3, r1
 801cb32:	2000      	movs	r0, #0
 801cb34:	4950      	ldr	r1, [pc, #320]	; (801cc78 <__ieee754_pow+0x3c0>)
 801cb36:	f7e3 fb77 	bl	8000228 <__aeabi_dsub>
 801cb3a:	4622      	mov	r2, r4
 801cb3c:	462b      	mov	r3, r5
 801cb3e:	4680      	mov	r8, r0
 801cb40:	4689      	mov	r9, r1
 801cb42:	4620      	mov	r0, r4
 801cb44:	4629      	mov	r1, r5
 801cb46:	f7e3 fd27 	bl	8000598 <__aeabi_dmul>
 801cb4a:	4602      	mov	r2, r0
 801cb4c:	460b      	mov	r3, r1
 801cb4e:	4640      	mov	r0, r8
 801cb50:	4649      	mov	r1, r9
 801cb52:	f7e3 fd21 	bl	8000598 <__aeabi_dmul>
 801cb56:	a340      	add	r3, pc, #256	; (adr r3, 801cc58 <__ieee754_pow+0x3a0>)
 801cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb5c:	f7e3 fd1c 	bl	8000598 <__aeabi_dmul>
 801cb60:	4602      	mov	r2, r0
 801cb62:	460b      	mov	r3, r1
 801cb64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cb68:	f7e3 fb5e 	bl	8000228 <__aeabi_dsub>
 801cb6c:	4602      	mov	r2, r0
 801cb6e:	460b      	mov	r3, r1
 801cb70:	4604      	mov	r4, r0
 801cb72:	460d      	mov	r5, r1
 801cb74:	4630      	mov	r0, r6
 801cb76:	4639      	mov	r1, r7
 801cb78:	f7e3 fb58 	bl	800022c <__adddf3>
 801cb7c:	2000      	movs	r0, #0
 801cb7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cb82:	4632      	mov	r2, r6
 801cb84:	463b      	mov	r3, r7
 801cb86:	f7e3 fb4f 	bl	8000228 <__aeabi_dsub>
 801cb8a:	4602      	mov	r2, r0
 801cb8c:	460b      	mov	r3, r1
 801cb8e:	4620      	mov	r0, r4
 801cb90:	4629      	mov	r1, r5
 801cb92:	f7e3 fb49 	bl	8000228 <__aeabi_dsub>
 801cb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb98:	f10b 33ff 	add.w	r3, fp, #4294967295
 801cb9c:	4313      	orrs	r3, r2
 801cb9e:	4606      	mov	r6, r0
 801cba0:	460f      	mov	r7, r1
 801cba2:	f040 81eb 	bne.w	801cf7c <__ieee754_pow+0x6c4>
 801cba6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801cc60 <__ieee754_pow+0x3a8>
 801cbaa:	e9dd 4500 	ldrd	r4, r5, [sp]
 801cbae:	2400      	movs	r4, #0
 801cbb0:	4622      	mov	r2, r4
 801cbb2:	462b      	mov	r3, r5
 801cbb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cbb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cbbc:	f7e3 fb34 	bl	8000228 <__aeabi_dsub>
 801cbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cbc4:	f7e3 fce8 	bl	8000598 <__aeabi_dmul>
 801cbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cbcc:	4680      	mov	r8, r0
 801cbce:	4689      	mov	r9, r1
 801cbd0:	4630      	mov	r0, r6
 801cbd2:	4639      	mov	r1, r7
 801cbd4:	f7e3 fce0 	bl	8000598 <__aeabi_dmul>
 801cbd8:	4602      	mov	r2, r0
 801cbda:	460b      	mov	r3, r1
 801cbdc:	4640      	mov	r0, r8
 801cbde:	4649      	mov	r1, r9
 801cbe0:	f7e3 fb24 	bl	800022c <__adddf3>
 801cbe4:	4622      	mov	r2, r4
 801cbe6:	462b      	mov	r3, r5
 801cbe8:	4680      	mov	r8, r0
 801cbea:	4689      	mov	r9, r1
 801cbec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cbf0:	f7e3 fcd2 	bl	8000598 <__aeabi_dmul>
 801cbf4:	460b      	mov	r3, r1
 801cbf6:	4604      	mov	r4, r0
 801cbf8:	460d      	mov	r5, r1
 801cbfa:	4602      	mov	r2, r0
 801cbfc:	4649      	mov	r1, r9
 801cbfe:	4640      	mov	r0, r8
 801cc00:	e9cd 4500 	strd	r4, r5, [sp]
 801cc04:	f7e3 fb12 	bl	800022c <__adddf3>
 801cc08:	4b1c      	ldr	r3, [pc, #112]	; (801cc7c <__ieee754_pow+0x3c4>)
 801cc0a:	4299      	cmp	r1, r3
 801cc0c:	4606      	mov	r6, r0
 801cc0e:	460f      	mov	r7, r1
 801cc10:	468b      	mov	fp, r1
 801cc12:	f340 82f7 	ble.w	801d204 <__ieee754_pow+0x94c>
 801cc16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801cc1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801cc1e:	4303      	orrs	r3, r0
 801cc20:	f000 81ea 	beq.w	801cff8 <__ieee754_pow+0x740>
 801cc24:	a310      	add	r3, pc, #64	; (adr r3, 801cc68 <__ieee754_pow+0x3b0>)
 801cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc2e:	f7e3 fcb3 	bl	8000598 <__aeabi_dmul>
 801cc32:	a30d      	add	r3, pc, #52	; (adr r3, 801cc68 <__ieee754_pow+0x3b0>)
 801cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc38:	e6d5      	b.n	801c9e6 <__ieee754_pow+0x12e>
 801cc3a:	bf00      	nop
 801cc3c:	f3af 8000 	nop.w
 801cc40:	60000000 	.word	0x60000000
 801cc44:	3ff71547 	.word	0x3ff71547
 801cc48:	f85ddf44 	.word	0xf85ddf44
 801cc4c:	3e54ae0b 	.word	0x3e54ae0b
 801cc50:	55555555 	.word	0x55555555
 801cc54:	3fd55555 	.word	0x3fd55555
 801cc58:	652b82fe 	.word	0x652b82fe
 801cc5c:	3ff71547 	.word	0x3ff71547
 801cc60:	00000000 	.word	0x00000000
 801cc64:	bff00000 	.word	0xbff00000
 801cc68:	8800759c 	.word	0x8800759c
 801cc6c:	7e37e43c 	.word	0x7e37e43c
 801cc70:	3ff00000 	.word	0x3ff00000
 801cc74:	3fd00000 	.word	0x3fd00000
 801cc78:	3fe00000 	.word	0x3fe00000
 801cc7c:	408fffff 	.word	0x408fffff
 801cc80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801cc84:	f04f 0200 	mov.w	r2, #0
 801cc88:	da05      	bge.n	801cc96 <__ieee754_pow+0x3de>
 801cc8a:	4bd3      	ldr	r3, [pc, #844]	; (801cfd8 <__ieee754_pow+0x720>)
 801cc8c:	f7e3 fc84 	bl	8000598 <__aeabi_dmul>
 801cc90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801cc94:	460c      	mov	r4, r1
 801cc96:	1523      	asrs	r3, r4, #20
 801cc98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cc9c:	4413      	add	r3, r2
 801cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 801cca0:	4bce      	ldr	r3, [pc, #824]	; (801cfdc <__ieee754_pow+0x724>)
 801cca2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cca6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ccaa:	429c      	cmp	r4, r3
 801ccac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ccb0:	dd08      	ble.n	801ccc4 <__ieee754_pow+0x40c>
 801ccb2:	4bcb      	ldr	r3, [pc, #812]	; (801cfe0 <__ieee754_pow+0x728>)
 801ccb4:	429c      	cmp	r4, r3
 801ccb6:	f340 815e 	ble.w	801cf76 <__ieee754_pow+0x6be>
 801ccba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccbc:	3301      	adds	r3, #1
 801ccbe:	9309      	str	r3, [sp, #36]	; 0x24
 801ccc0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ccc4:	f04f 0a00 	mov.w	sl, #0
 801ccc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801cccc:	930c      	str	r3, [sp, #48]	; 0x30
 801ccce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ccd0:	4bc4      	ldr	r3, [pc, #784]	; (801cfe4 <__ieee754_pow+0x72c>)
 801ccd2:	4413      	add	r3, r2
 801ccd4:	ed93 7b00 	vldr	d7, [r3]
 801ccd8:	4629      	mov	r1, r5
 801ccda:	ec53 2b17 	vmov	r2, r3, d7
 801ccde:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cce2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cce6:	f7e3 fa9f 	bl	8000228 <__aeabi_dsub>
 801ccea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ccee:	4606      	mov	r6, r0
 801ccf0:	460f      	mov	r7, r1
 801ccf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccf6:	f7e3 fa99 	bl	800022c <__adddf3>
 801ccfa:	4602      	mov	r2, r0
 801ccfc:	460b      	mov	r3, r1
 801ccfe:	2000      	movs	r0, #0
 801cd00:	49b9      	ldr	r1, [pc, #740]	; (801cfe8 <__ieee754_pow+0x730>)
 801cd02:	f7e3 fd73 	bl	80007ec <__aeabi_ddiv>
 801cd06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801cd0a:	4602      	mov	r2, r0
 801cd0c:	460b      	mov	r3, r1
 801cd0e:	4630      	mov	r0, r6
 801cd10:	4639      	mov	r1, r7
 801cd12:	f7e3 fc41 	bl	8000598 <__aeabi_dmul>
 801cd16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cd1a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801cd1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801cd22:	2300      	movs	r3, #0
 801cd24:	9302      	str	r3, [sp, #8]
 801cd26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801cd2a:	106d      	asrs	r5, r5, #1
 801cd2c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cd30:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cd34:	2200      	movs	r2, #0
 801cd36:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801cd3a:	4640      	mov	r0, r8
 801cd3c:	4649      	mov	r1, r9
 801cd3e:	4614      	mov	r4, r2
 801cd40:	461d      	mov	r5, r3
 801cd42:	f7e3 fc29 	bl	8000598 <__aeabi_dmul>
 801cd46:	4602      	mov	r2, r0
 801cd48:	460b      	mov	r3, r1
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	4639      	mov	r1, r7
 801cd4e:	f7e3 fa6b 	bl	8000228 <__aeabi_dsub>
 801cd52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd56:	4606      	mov	r6, r0
 801cd58:	460f      	mov	r7, r1
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	4629      	mov	r1, r5
 801cd5e:	f7e3 fa63 	bl	8000228 <__aeabi_dsub>
 801cd62:	4602      	mov	r2, r0
 801cd64:	460b      	mov	r3, r1
 801cd66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cd6a:	f7e3 fa5d 	bl	8000228 <__aeabi_dsub>
 801cd6e:	4642      	mov	r2, r8
 801cd70:	464b      	mov	r3, r9
 801cd72:	f7e3 fc11 	bl	8000598 <__aeabi_dmul>
 801cd76:	4602      	mov	r2, r0
 801cd78:	460b      	mov	r3, r1
 801cd7a:	4630      	mov	r0, r6
 801cd7c:	4639      	mov	r1, r7
 801cd7e:	f7e3 fa53 	bl	8000228 <__aeabi_dsub>
 801cd82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cd86:	f7e3 fc07 	bl	8000598 <__aeabi_dmul>
 801cd8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cd8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cd92:	4610      	mov	r0, r2
 801cd94:	4619      	mov	r1, r3
 801cd96:	f7e3 fbff 	bl	8000598 <__aeabi_dmul>
 801cd9a:	a37b      	add	r3, pc, #492	; (adr r3, 801cf88 <__ieee754_pow+0x6d0>)
 801cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cda0:	4604      	mov	r4, r0
 801cda2:	460d      	mov	r5, r1
 801cda4:	f7e3 fbf8 	bl	8000598 <__aeabi_dmul>
 801cda8:	a379      	add	r3, pc, #484	; (adr r3, 801cf90 <__ieee754_pow+0x6d8>)
 801cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdae:	f7e3 fa3d 	bl	800022c <__adddf3>
 801cdb2:	4622      	mov	r2, r4
 801cdb4:	462b      	mov	r3, r5
 801cdb6:	f7e3 fbef 	bl	8000598 <__aeabi_dmul>
 801cdba:	a377      	add	r3, pc, #476	; (adr r3, 801cf98 <__ieee754_pow+0x6e0>)
 801cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc0:	f7e3 fa34 	bl	800022c <__adddf3>
 801cdc4:	4622      	mov	r2, r4
 801cdc6:	462b      	mov	r3, r5
 801cdc8:	f7e3 fbe6 	bl	8000598 <__aeabi_dmul>
 801cdcc:	a374      	add	r3, pc, #464	; (adr r3, 801cfa0 <__ieee754_pow+0x6e8>)
 801cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdd2:	f7e3 fa2b 	bl	800022c <__adddf3>
 801cdd6:	4622      	mov	r2, r4
 801cdd8:	462b      	mov	r3, r5
 801cdda:	f7e3 fbdd 	bl	8000598 <__aeabi_dmul>
 801cdde:	a372      	add	r3, pc, #456	; (adr r3, 801cfa8 <__ieee754_pow+0x6f0>)
 801cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde4:	f7e3 fa22 	bl	800022c <__adddf3>
 801cde8:	4622      	mov	r2, r4
 801cdea:	462b      	mov	r3, r5
 801cdec:	f7e3 fbd4 	bl	8000598 <__aeabi_dmul>
 801cdf0:	a36f      	add	r3, pc, #444	; (adr r3, 801cfb0 <__ieee754_pow+0x6f8>)
 801cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf6:	f7e3 fa19 	bl	800022c <__adddf3>
 801cdfa:	4622      	mov	r2, r4
 801cdfc:	4606      	mov	r6, r0
 801cdfe:	460f      	mov	r7, r1
 801ce00:	462b      	mov	r3, r5
 801ce02:	4620      	mov	r0, r4
 801ce04:	4629      	mov	r1, r5
 801ce06:	f7e3 fbc7 	bl	8000598 <__aeabi_dmul>
 801ce0a:	4602      	mov	r2, r0
 801ce0c:	460b      	mov	r3, r1
 801ce0e:	4630      	mov	r0, r6
 801ce10:	4639      	mov	r1, r7
 801ce12:	f7e3 fbc1 	bl	8000598 <__aeabi_dmul>
 801ce16:	4642      	mov	r2, r8
 801ce18:	4604      	mov	r4, r0
 801ce1a:	460d      	mov	r5, r1
 801ce1c:	464b      	mov	r3, r9
 801ce1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ce22:	f7e3 fa03 	bl	800022c <__adddf3>
 801ce26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce2a:	f7e3 fbb5 	bl	8000598 <__aeabi_dmul>
 801ce2e:	4622      	mov	r2, r4
 801ce30:	462b      	mov	r3, r5
 801ce32:	f7e3 f9fb 	bl	800022c <__adddf3>
 801ce36:	4642      	mov	r2, r8
 801ce38:	4606      	mov	r6, r0
 801ce3a:	460f      	mov	r7, r1
 801ce3c:	464b      	mov	r3, r9
 801ce3e:	4640      	mov	r0, r8
 801ce40:	4649      	mov	r1, r9
 801ce42:	f7e3 fba9 	bl	8000598 <__aeabi_dmul>
 801ce46:	2200      	movs	r2, #0
 801ce48:	4b68      	ldr	r3, [pc, #416]	; (801cfec <__ieee754_pow+0x734>)
 801ce4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ce4e:	f7e3 f9ed 	bl	800022c <__adddf3>
 801ce52:	4632      	mov	r2, r6
 801ce54:	463b      	mov	r3, r7
 801ce56:	f7e3 f9e9 	bl	800022c <__adddf3>
 801ce5a:	9802      	ldr	r0, [sp, #8]
 801ce5c:	460d      	mov	r5, r1
 801ce5e:	4604      	mov	r4, r0
 801ce60:	4602      	mov	r2, r0
 801ce62:	460b      	mov	r3, r1
 801ce64:	4640      	mov	r0, r8
 801ce66:	4649      	mov	r1, r9
 801ce68:	f7e3 fb96 	bl	8000598 <__aeabi_dmul>
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	4680      	mov	r8, r0
 801ce70:	4689      	mov	r9, r1
 801ce72:	4b5e      	ldr	r3, [pc, #376]	; (801cfec <__ieee754_pow+0x734>)
 801ce74:	4620      	mov	r0, r4
 801ce76:	4629      	mov	r1, r5
 801ce78:	f7e3 f9d6 	bl	8000228 <__aeabi_dsub>
 801ce7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ce80:	f7e3 f9d2 	bl	8000228 <__aeabi_dsub>
 801ce84:	4602      	mov	r2, r0
 801ce86:	460b      	mov	r3, r1
 801ce88:	4630      	mov	r0, r6
 801ce8a:	4639      	mov	r1, r7
 801ce8c:	f7e3 f9cc 	bl	8000228 <__aeabi_dsub>
 801ce90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce94:	f7e3 fb80 	bl	8000598 <__aeabi_dmul>
 801ce98:	4622      	mov	r2, r4
 801ce9a:	4606      	mov	r6, r0
 801ce9c:	460f      	mov	r7, r1
 801ce9e:	462b      	mov	r3, r5
 801cea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cea4:	f7e3 fb78 	bl	8000598 <__aeabi_dmul>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	460b      	mov	r3, r1
 801ceac:	4630      	mov	r0, r6
 801ceae:	4639      	mov	r1, r7
 801ceb0:	f7e3 f9bc 	bl	800022c <__adddf3>
 801ceb4:	4606      	mov	r6, r0
 801ceb6:	460f      	mov	r7, r1
 801ceb8:	4602      	mov	r2, r0
 801ceba:	460b      	mov	r3, r1
 801cebc:	4640      	mov	r0, r8
 801cebe:	4649      	mov	r1, r9
 801cec0:	f7e3 f9b4 	bl	800022c <__adddf3>
 801cec4:	9802      	ldr	r0, [sp, #8]
 801cec6:	a33c      	add	r3, pc, #240	; (adr r3, 801cfb8 <__ieee754_pow+0x700>)
 801cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cecc:	4604      	mov	r4, r0
 801cece:	460d      	mov	r5, r1
 801ced0:	f7e3 fb62 	bl	8000598 <__aeabi_dmul>
 801ced4:	4642      	mov	r2, r8
 801ced6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ceda:	464b      	mov	r3, r9
 801cedc:	4620      	mov	r0, r4
 801cede:	4629      	mov	r1, r5
 801cee0:	f7e3 f9a2 	bl	8000228 <__aeabi_dsub>
 801cee4:	4602      	mov	r2, r0
 801cee6:	460b      	mov	r3, r1
 801cee8:	4630      	mov	r0, r6
 801ceea:	4639      	mov	r1, r7
 801ceec:	f7e3 f99c 	bl	8000228 <__aeabi_dsub>
 801cef0:	a333      	add	r3, pc, #204	; (adr r3, 801cfc0 <__ieee754_pow+0x708>)
 801cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef6:	f7e3 fb4f 	bl	8000598 <__aeabi_dmul>
 801cefa:	a333      	add	r3, pc, #204	; (adr r3, 801cfc8 <__ieee754_pow+0x710>)
 801cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf00:	4606      	mov	r6, r0
 801cf02:	460f      	mov	r7, r1
 801cf04:	4620      	mov	r0, r4
 801cf06:	4629      	mov	r1, r5
 801cf08:	f7e3 fb46 	bl	8000598 <__aeabi_dmul>
 801cf0c:	4602      	mov	r2, r0
 801cf0e:	460b      	mov	r3, r1
 801cf10:	4630      	mov	r0, r6
 801cf12:	4639      	mov	r1, r7
 801cf14:	f7e3 f98a 	bl	800022c <__adddf3>
 801cf18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf1a:	4b35      	ldr	r3, [pc, #212]	; (801cff0 <__ieee754_pow+0x738>)
 801cf1c:	4413      	add	r3, r2
 801cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf22:	f7e3 f983 	bl	800022c <__adddf3>
 801cf26:	4604      	mov	r4, r0
 801cf28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf2a:	460d      	mov	r5, r1
 801cf2c:	f7e3 faca 	bl	80004c4 <__aeabi_i2d>
 801cf30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf32:	4b30      	ldr	r3, [pc, #192]	; (801cff4 <__ieee754_pow+0x73c>)
 801cf34:	4413      	add	r3, r2
 801cf36:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cf3a:	4606      	mov	r6, r0
 801cf3c:	460f      	mov	r7, r1
 801cf3e:	4622      	mov	r2, r4
 801cf40:	462b      	mov	r3, r5
 801cf42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf46:	f7e3 f971 	bl	800022c <__adddf3>
 801cf4a:	4642      	mov	r2, r8
 801cf4c:	464b      	mov	r3, r9
 801cf4e:	f7e3 f96d 	bl	800022c <__adddf3>
 801cf52:	4632      	mov	r2, r6
 801cf54:	463b      	mov	r3, r7
 801cf56:	f7e3 f969 	bl	800022c <__adddf3>
 801cf5a:	9802      	ldr	r0, [sp, #8]
 801cf5c:	4632      	mov	r2, r6
 801cf5e:	463b      	mov	r3, r7
 801cf60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf64:	f7e3 f960 	bl	8000228 <__aeabi_dsub>
 801cf68:	4642      	mov	r2, r8
 801cf6a:	464b      	mov	r3, r9
 801cf6c:	f7e3 f95c 	bl	8000228 <__aeabi_dsub>
 801cf70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cf74:	e607      	b.n	801cb86 <__ieee754_pow+0x2ce>
 801cf76:	f04f 0a01 	mov.w	sl, #1
 801cf7a:	e6a5      	b.n	801ccc8 <__ieee754_pow+0x410>
 801cf7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801cfd0 <__ieee754_pow+0x718>
 801cf80:	e613      	b.n	801cbaa <__ieee754_pow+0x2f2>
 801cf82:	bf00      	nop
 801cf84:	f3af 8000 	nop.w
 801cf88:	4a454eef 	.word	0x4a454eef
 801cf8c:	3fca7e28 	.word	0x3fca7e28
 801cf90:	93c9db65 	.word	0x93c9db65
 801cf94:	3fcd864a 	.word	0x3fcd864a
 801cf98:	a91d4101 	.word	0xa91d4101
 801cf9c:	3fd17460 	.word	0x3fd17460
 801cfa0:	518f264d 	.word	0x518f264d
 801cfa4:	3fd55555 	.word	0x3fd55555
 801cfa8:	db6fabff 	.word	0xdb6fabff
 801cfac:	3fdb6db6 	.word	0x3fdb6db6
 801cfb0:	33333303 	.word	0x33333303
 801cfb4:	3fe33333 	.word	0x3fe33333
 801cfb8:	e0000000 	.word	0xe0000000
 801cfbc:	3feec709 	.word	0x3feec709
 801cfc0:	dc3a03fd 	.word	0xdc3a03fd
 801cfc4:	3feec709 	.word	0x3feec709
 801cfc8:	145b01f5 	.word	0x145b01f5
 801cfcc:	be3e2fe0 	.word	0xbe3e2fe0
 801cfd0:	00000000 	.word	0x00000000
 801cfd4:	3ff00000 	.word	0x3ff00000
 801cfd8:	43400000 	.word	0x43400000
 801cfdc:	0003988e 	.word	0x0003988e
 801cfe0:	000bb679 	.word	0x000bb679
 801cfe4:	0801e078 	.word	0x0801e078
 801cfe8:	3ff00000 	.word	0x3ff00000
 801cfec:	40080000 	.word	0x40080000
 801cff0:	0801e098 	.word	0x0801e098
 801cff4:	0801e088 	.word	0x0801e088
 801cff8:	a3b4      	add	r3, pc, #720	; (adr r3, 801d2cc <__ieee754_pow+0xa14>)
 801cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cffe:	4640      	mov	r0, r8
 801d000:	4649      	mov	r1, r9
 801d002:	f7e3 f913 	bl	800022c <__adddf3>
 801d006:	4622      	mov	r2, r4
 801d008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d00c:	462b      	mov	r3, r5
 801d00e:	4630      	mov	r0, r6
 801d010:	4639      	mov	r1, r7
 801d012:	f7e3 f909 	bl	8000228 <__aeabi_dsub>
 801d016:	4602      	mov	r2, r0
 801d018:	460b      	mov	r3, r1
 801d01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d01e:	f7e3 fd4b 	bl	8000ab8 <__aeabi_dcmpgt>
 801d022:	2800      	cmp	r0, #0
 801d024:	f47f adfe 	bne.w	801cc24 <__ieee754_pow+0x36c>
 801d028:	4aa3      	ldr	r2, [pc, #652]	; (801d2b8 <__ieee754_pow+0xa00>)
 801d02a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d02e:	4293      	cmp	r3, r2
 801d030:	f340 810a 	ble.w	801d248 <__ieee754_pow+0x990>
 801d034:	151b      	asrs	r3, r3, #20
 801d036:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d03a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d03e:	fa4a f303 	asr.w	r3, sl, r3
 801d042:	445b      	add	r3, fp
 801d044:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d048:	4e9c      	ldr	r6, [pc, #624]	; (801d2bc <__ieee754_pow+0xa04>)
 801d04a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d04e:	4116      	asrs	r6, r2
 801d050:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d054:	2000      	movs	r0, #0
 801d056:	ea23 0106 	bic.w	r1, r3, r6
 801d05a:	f1c2 0214 	rsb	r2, r2, #20
 801d05e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d062:	fa4a fa02 	asr.w	sl, sl, r2
 801d066:	f1bb 0f00 	cmp.w	fp, #0
 801d06a:	4602      	mov	r2, r0
 801d06c:	460b      	mov	r3, r1
 801d06e:	4620      	mov	r0, r4
 801d070:	4629      	mov	r1, r5
 801d072:	bfb8      	it	lt
 801d074:	f1ca 0a00 	rsblt	sl, sl, #0
 801d078:	f7e3 f8d6 	bl	8000228 <__aeabi_dsub>
 801d07c:	e9cd 0100 	strd	r0, r1, [sp]
 801d080:	4642      	mov	r2, r8
 801d082:	464b      	mov	r3, r9
 801d084:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d088:	f7e3 f8d0 	bl	800022c <__adddf3>
 801d08c:	2000      	movs	r0, #0
 801d08e:	a378      	add	r3, pc, #480	; (adr r3, 801d270 <__ieee754_pow+0x9b8>)
 801d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d094:	4604      	mov	r4, r0
 801d096:	460d      	mov	r5, r1
 801d098:	f7e3 fa7e 	bl	8000598 <__aeabi_dmul>
 801d09c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0a0:	4606      	mov	r6, r0
 801d0a2:	460f      	mov	r7, r1
 801d0a4:	4620      	mov	r0, r4
 801d0a6:	4629      	mov	r1, r5
 801d0a8:	f7e3 f8be 	bl	8000228 <__aeabi_dsub>
 801d0ac:	4602      	mov	r2, r0
 801d0ae:	460b      	mov	r3, r1
 801d0b0:	4640      	mov	r0, r8
 801d0b2:	4649      	mov	r1, r9
 801d0b4:	f7e3 f8b8 	bl	8000228 <__aeabi_dsub>
 801d0b8:	a36f      	add	r3, pc, #444	; (adr r3, 801d278 <__ieee754_pow+0x9c0>)
 801d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0be:	f7e3 fa6b 	bl	8000598 <__aeabi_dmul>
 801d0c2:	a36f      	add	r3, pc, #444	; (adr r3, 801d280 <__ieee754_pow+0x9c8>)
 801d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c8:	4680      	mov	r8, r0
 801d0ca:	4689      	mov	r9, r1
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	4629      	mov	r1, r5
 801d0d0:	f7e3 fa62 	bl	8000598 <__aeabi_dmul>
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	460b      	mov	r3, r1
 801d0d8:	4640      	mov	r0, r8
 801d0da:	4649      	mov	r1, r9
 801d0dc:	f7e3 f8a6 	bl	800022c <__adddf3>
 801d0e0:	4604      	mov	r4, r0
 801d0e2:	460d      	mov	r5, r1
 801d0e4:	4602      	mov	r2, r0
 801d0e6:	460b      	mov	r3, r1
 801d0e8:	4630      	mov	r0, r6
 801d0ea:	4639      	mov	r1, r7
 801d0ec:	f7e3 f89e 	bl	800022c <__adddf3>
 801d0f0:	4632      	mov	r2, r6
 801d0f2:	463b      	mov	r3, r7
 801d0f4:	4680      	mov	r8, r0
 801d0f6:	4689      	mov	r9, r1
 801d0f8:	f7e3 f896 	bl	8000228 <__aeabi_dsub>
 801d0fc:	4602      	mov	r2, r0
 801d0fe:	460b      	mov	r3, r1
 801d100:	4620      	mov	r0, r4
 801d102:	4629      	mov	r1, r5
 801d104:	f7e3 f890 	bl	8000228 <__aeabi_dsub>
 801d108:	4642      	mov	r2, r8
 801d10a:	4606      	mov	r6, r0
 801d10c:	460f      	mov	r7, r1
 801d10e:	464b      	mov	r3, r9
 801d110:	4640      	mov	r0, r8
 801d112:	4649      	mov	r1, r9
 801d114:	f7e3 fa40 	bl	8000598 <__aeabi_dmul>
 801d118:	a35b      	add	r3, pc, #364	; (adr r3, 801d288 <__ieee754_pow+0x9d0>)
 801d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d11e:	4604      	mov	r4, r0
 801d120:	460d      	mov	r5, r1
 801d122:	f7e3 fa39 	bl	8000598 <__aeabi_dmul>
 801d126:	a35a      	add	r3, pc, #360	; (adr r3, 801d290 <__ieee754_pow+0x9d8>)
 801d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d12c:	f7e3 f87c 	bl	8000228 <__aeabi_dsub>
 801d130:	4622      	mov	r2, r4
 801d132:	462b      	mov	r3, r5
 801d134:	f7e3 fa30 	bl	8000598 <__aeabi_dmul>
 801d138:	a357      	add	r3, pc, #348	; (adr r3, 801d298 <__ieee754_pow+0x9e0>)
 801d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13e:	f7e3 f875 	bl	800022c <__adddf3>
 801d142:	4622      	mov	r2, r4
 801d144:	462b      	mov	r3, r5
 801d146:	f7e3 fa27 	bl	8000598 <__aeabi_dmul>
 801d14a:	a355      	add	r3, pc, #340	; (adr r3, 801d2a0 <__ieee754_pow+0x9e8>)
 801d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d150:	f7e3 f86a 	bl	8000228 <__aeabi_dsub>
 801d154:	4622      	mov	r2, r4
 801d156:	462b      	mov	r3, r5
 801d158:	f7e3 fa1e 	bl	8000598 <__aeabi_dmul>
 801d15c:	a352      	add	r3, pc, #328	; (adr r3, 801d2a8 <__ieee754_pow+0x9f0>)
 801d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d162:	f7e3 f863 	bl	800022c <__adddf3>
 801d166:	4622      	mov	r2, r4
 801d168:	462b      	mov	r3, r5
 801d16a:	f7e3 fa15 	bl	8000598 <__aeabi_dmul>
 801d16e:	4602      	mov	r2, r0
 801d170:	460b      	mov	r3, r1
 801d172:	4640      	mov	r0, r8
 801d174:	4649      	mov	r1, r9
 801d176:	f7e3 f857 	bl	8000228 <__aeabi_dsub>
 801d17a:	4604      	mov	r4, r0
 801d17c:	460d      	mov	r5, r1
 801d17e:	4602      	mov	r2, r0
 801d180:	460b      	mov	r3, r1
 801d182:	4640      	mov	r0, r8
 801d184:	4649      	mov	r1, r9
 801d186:	f7e3 fa07 	bl	8000598 <__aeabi_dmul>
 801d18a:	2200      	movs	r2, #0
 801d18c:	e9cd 0100 	strd	r0, r1, [sp]
 801d190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d194:	4620      	mov	r0, r4
 801d196:	4629      	mov	r1, r5
 801d198:	f7e3 f846 	bl	8000228 <__aeabi_dsub>
 801d19c:	4602      	mov	r2, r0
 801d19e:	460b      	mov	r3, r1
 801d1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d1a4:	f7e3 fb22 	bl	80007ec <__aeabi_ddiv>
 801d1a8:	4632      	mov	r2, r6
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	460d      	mov	r5, r1
 801d1ae:	463b      	mov	r3, r7
 801d1b0:	4640      	mov	r0, r8
 801d1b2:	4649      	mov	r1, r9
 801d1b4:	f7e3 f9f0 	bl	8000598 <__aeabi_dmul>
 801d1b8:	4632      	mov	r2, r6
 801d1ba:	463b      	mov	r3, r7
 801d1bc:	f7e3 f836 	bl	800022c <__adddf3>
 801d1c0:	4602      	mov	r2, r0
 801d1c2:	460b      	mov	r3, r1
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	f7e3 f82e 	bl	8000228 <__aeabi_dsub>
 801d1cc:	4642      	mov	r2, r8
 801d1ce:	464b      	mov	r3, r9
 801d1d0:	f7e3 f82a 	bl	8000228 <__aeabi_dsub>
 801d1d4:	4602      	mov	r2, r0
 801d1d6:	460b      	mov	r3, r1
 801d1d8:	2000      	movs	r0, #0
 801d1da:	4939      	ldr	r1, [pc, #228]	; (801d2c0 <__ieee754_pow+0xa08>)
 801d1dc:	f7e3 f824 	bl	8000228 <__aeabi_dsub>
 801d1e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801d1e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d1e8:	4602      	mov	r2, r0
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	da2f      	bge.n	801d24e <__ieee754_pow+0x996>
 801d1ee:	4650      	mov	r0, sl
 801d1f0:	ec43 2b10 	vmov	d0, r2, r3
 801d1f4:	f000 f9c0 	bl	801d578 <scalbn>
 801d1f8:	ec51 0b10 	vmov	r0, r1, d0
 801d1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d200:	f7ff bbf1 	b.w	801c9e6 <__ieee754_pow+0x12e>
 801d204:	4b2f      	ldr	r3, [pc, #188]	; (801d2c4 <__ieee754_pow+0xa0c>)
 801d206:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d20a:	429e      	cmp	r6, r3
 801d20c:	f77f af0c 	ble.w	801d028 <__ieee754_pow+0x770>
 801d210:	4b2d      	ldr	r3, [pc, #180]	; (801d2c8 <__ieee754_pow+0xa10>)
 801d212:	440b      	add	r3, r1
 801d214:	4303      	orrs	r3, r0
 801d216:	d00b      	beq.n	801d230 <__ieee754_pow+0x978>
 801d218:	a325      	add	r3, pc, #148	; (adr r3, 801d2b0 <__ieee754_pow+0x9f8>)
 801d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d222:	f7e3 f9b9 	bl	8000598 <__aeabi_dmul>
 801d226:	a322      	add	r3, pc, #136	; (adr r3, 801d2b0 <__ieee754_pow+0x9f8>)
 801d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d22c:	f7ff bbdb 	b.w	801c9e6 <__ieee754_pow+0x12e>
 801d230:	4622      	mov	r2, r4
 801d232:	462b      	mov	r3, r5
 801d234:	f7e2 fff8 	bl	8000228 <__aeabi_dsub>
 801d238:	4642      	mov	r2, r8
 801d23a:	464b      	mov	r3, r9
 801d23c:	f7e3 fc32 	bl	8000aa4 <__aeabi_dcmpge>
 801d240:	2800      	cmp	r0, #0
 801d242:	f43f aef1 	beq.w	801d028 <__ieee754_pow+0x770>
 801d246:	e7e7      	b.n	801d218 <__ieee754_pow+0x960>
 801d248:	f04f 0a00 	mov.w	sl, #0
 801d24c:	e718      	b.n	801d080 <__ieee754_pow+0x7c8>
 801d24e:	4621      	mov	r1, r4
 801d250:	e7d4      	b.n	801d1fc <__ieee754_pow+0x944>
 801d252:	2000      	movs	r0, #0
 801d254:	491a      	ldr	r1, [pc, #104]	; (801d2c0 <__ieee754_pow+0xa08>)
 801d256:	f7ff bb8f 	b.w	801c978 <__ieee754_pow+0xc0>
 801d25a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d25e:	f7ff bb8b 	b.w	801c978 <__ieee754_pow+0xc0>
 801d262:	4630      	mov	r0, r6
 801d264:	4639      	mov	r1, r7
 801d266:	f7ff bb87 	b.w	801c978 <__ieee754_pow+0xc0>
 801d26a:	4693      	mov	fp, r2
 801d26c:	f7ff bb98 	b.w	801c9a0 <__ieee754_pow+0xe8>
 801d270:	00000000 	.word	0x00000000
 801d274:	3fe62e43 	.word	0x3fe62e43
 801d278:	fefa39ef 	.word	0xfefa39ef
 801d27c:	3fe62e42 	.word	0x3fe62e42
 801d280:	0ca86c39 	.word	0x0ca86c39
 801d284:	be205c61 	.word	0xbe205c61
 801d288:	72bea4d0 	.word	0x72bea4d0
 801d28c:	3e663769 	.word	0x3e663769
 801d290:	c5d26bf1 	.word	0xc5d26bf1
 801d294:	3ebbbd41 	.word	0x3ebbbd41
 801d298:	af25de2c 	.word	0xaf25de2c
 801d29c:	3f11566a 	.word	0x3f11566a
 801d2a0:	16bebd93 	.word	0x16bebd93
 801d2a4:	3f66c16c 	.word	0x3f66c16c
 801d2a8:	5555553e 	.word	0x5555553e
 801d2ac:	3fc55555 	.word	0x3fc55555
 801d2b0:	c2f8f359 	.word	0xc2f8f359
 801d2b4:	01a56e1f 	.word	0x01a56e1f
 801d2b8:	3fe00000 	.word	0x3fe00000
 801d2bc:	000fffff 	.word	0x000fffff
 801d2c0:	3ff00000 	.word	0x3ff00000
 801d2c4:	4090cbff 	.word	0x4090cbff
 801d2c8:	3f6f3400 	.word	0x3f6f3400
 801d2cc:	652b82fe 	.word	0x652b82fe
 801d2d0:	3c971547 	.word	0x3c971547

0801d2d4 <__ieee754_sqrt>:
 801d2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2d8:	4955      	ldr	r1, [pc, #340]	; (801d430 <__ieee754_sqrt+0x15c>)
 801d2da:	ec55 4b10 	vmov	r4, r5, d0
 801d2de:	43a9      	bics	r1, r5
 801d2e0:	462b      	mov	r3, r5
 801d2e2:	462a      	mov	r2, r5
 801d2e4:	d112      	bne.n	801d30c <__ieee754_sqrt+0x38>
 801d2e6:	ee10 2a10 	vmov	r2, s0
 801d2ea:	ee10 0a10 	vmov	r0, s0
 801d2ee:	4629      	mov	r1, r5
 801d2f0:	f7e3 f952 	bl	8000598 <__aeabi_dmul>
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	460b      	mov	r3, r1
 801d2f8:	4620      	mov	r0, r4
 801d2fa:	4629      	mov	r1, r5
 801d2fc:	f7e2 ff96 	bl	800022c <__adddf3>
 801d300:	4604      	mov	r4, r0
 801d302:	460d      	mov	r5, r1
 801d304:	ec45 4b10 	vmov	d0, r4, r5
 801d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d30c:	2d00      	cmp	r5, #0
 801d30e:	ee10 0a10 	vmov	r0, s0
 801d312:	4621      	mov	r1, r4
 801d314:	dc0f      	bgt.n	801d336 <__ieee754_sqrt+0x62>
 801d316:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d31a:	4330      	orrs	r0, r6
 801d31c:	d0f2      	beq.n	801d304 <__ieee754_sqrt+0x30>
 801d31e:	b155      	cbz	r5, 801d336 <__ieee754_sqrt+0x62>
 801d320:	ee10 2a10 	vmov	r2, s0
 801d324:	4620      	mov	r0, r4
 801d326:	4629      	mov	r1, r5
 801d328:	f7e2 ff7e 	bl	8000228 <__aeabi_dsub>
 801d32c:	4602      	mov	r2, r0
 801d32e:	460b      	mov	r3, r1
 801d330:	f7e3 fa5c 	bl	80007ec <__aeabi_ddiv>
 801d334:	e7e4      	b.n	801d300 <__ieee754_sqrt+0x2c>
 801d336:	151b      	asrs	r3, r3, #20
 801d338:	d073      	beq.n	801d422 <__ieee754_sqrt+0x14e>
 801d33a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d33e:	07dd      	lsls	r5, r3, #31
 801d340:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d344:	bf48      	it	mi
 801d346:	0fc8      	lsrmi	r0, r1, #31
 801d348:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d34c:	bf44      	itt	mi
 801d34e:	0049      	lslmi	r1, r1, #1
 801d350:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801d354:	2500      	movs	r5, #0
 801d356:	1058      	asrs	r0, r3, #1
 801d358:	0fcb      	lsrs	r3, r1, #31
 801d35a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801d35e:	0049      	lsls	r1, r1, #1
 801d360:	2316      	movs	r3, #22
 801d362:	462c      	mov	r4, r5
 801d364:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801d368:	19a7      	adds	r7, r4, r6
 801d36a:	4297      	cmp	r7, r2
 801d36c:	bfde      	ittt	le
 801d36e:	19bc      	addle	r4, r7, r6
 801d370:	1bd2      	suble	r2, r2, r7
 801d372:	19ad      	addle	r5, r5, r6
 801d374:	0fcf      	lsrs	r7, r1, #31
 801d376:	3b01      	subs	r3, #1
 801d378:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801d37c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d380:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d384:	d1f0      	bne.n	801d368 <__ieee754_sqrt+0x94>
 801d386:	f04f 0c20 	mov.w	ip, #32
 801d38a:	469e      	mov	lr, r3
 801d38c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d390:	42a2      	cmp	r2, r4
 801d392:	eb06 070e 	add.w	r7, r6, lr
 801d396:	dc02      	bgt.n	801d39e <__ieee754_sqrt+0xca>
 801d398:	d112      	bne.n	801d3c0 <__ieee754_sqrt+0xec>
 801d39a:	428f      	cmp	r7, r1
 801d39c:	d810      	bhi.n	801d3c0 <__ieee754_sqrt+0xec>
 801d39e:	2f00      	cmp	r7, #0
 801d3a0:	eb07 0e06 	add.w	lr, r7, r6
 801d3a4:	da42      	bge.n	801d42c <__ieee754_sqrt+0x158>
 801d3a6:	f1be 0f00 	cmp.w	lr, #0
 801d3aa:	db3f      	blt.n	801d42c <__ieee754_sqrt+0x158>
 801d3ac:	f104 0801 	add.w	r8, r4, #1
 801d3b0:	1b12      	subs	r2, r2, r4
 801d3b2:	428f      	cmp	r7, r1
 801d3b4:	bf88      	it	hi
 801d3b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d3ba:	1bc9      	subs	r1, r1, r7
 801d3bc:	4433      	add	r3, r6
 801d3be:	4644      	mov	r4, r8
 801d3c0:	0052      	lsls	r2, r2, #1
 801d3c2:	f1bc 0c01 	subs.w	ip, ip, #1
 801d3c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801d3ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d3ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d3d2:	d1dd      	bne.n	801d390 <__ieee754_sqrt+0xbc>
 801d3d4:	430a      	orrs	r2, r1
 801d3d6:	d006      	beq.n	801d3e6 <__ieee754_sqrt+0x112>
 801d3d8:	1c5c      	adds	r4, r3, #1
 801d3da:	bf13      	iteet	ne
 801d3dc:	3301      	addne	r3, #1
 801d3de:	3501      	addeq	r5, #1
 801d3e0:	4663      	moveq	r3, ip
 801d3e2:	f023 0301 	bicne.w	r3, r3, #1
 801d3e6:	106a      	asrs	r2, r5, #1
 801d3e8:	085b      	lsrs	r3, r3, #1
 801d3ea:	07e9      	lsls	r1, r5, #31
 801d3ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d3f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d3f4:	bf48      	it	mi
 801d3f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d3fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801d3fe:	461c      	mov	r4, r3
 801d400:	e780      	b.n	801d304 <__ieee754_sqrt+0x30>
 801d402:	0aca      	lsrs	r2, r1, #11
 801d404:	3815      	subs	r0, #21
 801d406:	0549      	lsls	r1, r1, #21
 801d408:	2a00      	cmp	r2, #0
 801d40a:	d0fa      	beq.n	801d402 <__ieee754_sqrt+0x12e>
 801d40c:	02d6      	lsls	r6, r2, #11
 801d40e:	d50a      	bpl.n	801d426 <__ieee754_sqrt+0x152>
 801d410:	f1c3 0420 	rsb	r4, r3, #32
 801d414:	fa21 f404 	lsr.w	r4, r1, r4
 801d418:	1e5d      	subs	r5, r3, #1
 801d41a:	4099      	lsls	r1, r3
 801d41c:	4322      	orrs	r2, r4
 801d41e:	1b43      	subs	r3, r0, r5
 801d420:	e78b      	b.n	801d33a <__ieee754_sqrt+0x66>
 801d422:	4618      	mov	r0, r3
 801d424:	e7f0      	b.n	801d408 <__ieee754_sqrt+0x134>
 801d426:	0052      	lsls	r2, r2, #1
 801d428:	3301      	adds	r3, #1
 801d42a:	e7ef      	b.n	801d40c <__ieee754_sqrt+0x138>
 801d42c:	46a0      	mov	r8, r4
 801d42e:	e7bf      	b.n	801d3b0 <__ieee754_sqrt+0xdc>
 801d430:	7ff00000 	.word	0x7ff00000

0801d434 <fabs>:
 801d434:	ec51 0b10 	vmov	r0, r1, d0
 801d438:	ee10 2a10 	vmov	r2, s0
 801d43c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d440:	ec43 2b10 	vmov	d0, r2, r3
 801d444:	4770      	bx	lr

0801d446 <finite>:
 801d446:	ee10 3a90 	vmov	r3, s1
 801d44a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d44e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d452:	0fc0      	lsrs	r0, r0, #31
 801d454:	4770      	bx	lr

0801d456 <matherr>:
 801d456:	2000      	movs	r0, #0
 801d458:	4770      	bx	lr
 801d45a:	0000      	movs	r0, r0
 801d45c:	0000      	movs	r0, r0
	...

0801d460 <nan>:
 801d460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d468 <nan+0x8>
 801d464:	4770      	bx	lr
 801d466:	bf00      	nop
 801d468:	00000000 	.word	0x00000000
 801d46c:	7ff80000 	.word	0x7ff80000

0801d470 <rint>:
 801d470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d472:	ec51 0b10 	vmov	r0, r1, d0
 801d476:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d47a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d47e:	2e13      	cmp	r6, #19
 801d480:	460b      	mov	r3, r1
 801d482:	ee10 4a10 	vmov	r4, s0
 801d486:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d48a:	dc56      	bgt.n	801d53a <rint+0xca>
 801d48c:	2e00      	cmp	r6, #0
 801d48e:	da2b      	bge.n	801d4e8 <rint+0x78>
 801d490:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d494:	4302      	orrs	r2, r0
 801d496:	d023      	beq.n	801d4e0 <rint+0x70>
 801d498:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d49c:	4302      	orrs	r2, r0
 801d49e:	4254      	negs	r4, r2
 801d4a0:	4314      	orrs	r4, r2
 801d4a2:	0c4b      	lsrs	r3, r1, #17
 801d4a4:	0b24      	lsrs	r4, r4, #12
 801d4a6:	045b      	lsls	r3, r3, #17
 801d4a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d4ac:	ea44 0103 	orr.w	r1, r4, r3
 801d4b0:	460b      	mov	r3, r1
 801d4b2:	492f      	ldr	r1, [pc, #188]	; (801d570 <rint+0x100>)
 801d4b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d4b8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d4bc:	4602      	mov	r2, r0
 801d4be:	4639      	mov	r1, r7
 801d4c0:	4630      	mov	r0, r6
 801d4c2:	f7e2 feb3 	bl	800022c <__adddf3>
 801d4c6:	e9cd 0100 	strd	r0, r1, [sp]
 801d4ca:	463b      	mov	r3, r7
 801d4cc:	4632      	mov	r2, r6
 801d4ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4d2:	f7e2 fea9 	bl	8000228 <__aeabi_dsub>
 801d4d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d4da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d4de:	4639      	mov	r1, r7
 801d4e0:	ec41 0b10 	vmov	d0, r0, r1
 801d4e4:	b003      	add	sp, #12
 801d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4e8:	4a22      	ldr	r2, [pc, #136]	; (801d574 <rint+0x104>)
 801d4ea:	4132      	asrs	r2, r6
 801d4ec:	ea01 0702 	and.w	r7, r1, r2
 801d4f0:	4307      	orrs	r7, r0
 801d4f2:	d0f5      	beq.n	801d4e0 <rint+0x70>
 801d4f4:	0852      	lsrs	r2, r2, #1
 801d4f6:	4011      	ands	r1, r2
 801d4f8:	430c      	orrs	r4, r1
 801d4fa:	d00b      	beq.n	801d514 <rint+0xa4>
 801d4fc:	ea23 0202 	bic.w	r2, r3, r2
 801d500:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d504:	2e13      	cmp	r6, #19
 801d506:	fa43 f306 	asr.w	r3, r3, r6
 801d50a:	bf0c      	ite	eq
 801d50c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d510:	2400      	movne	r4, #0
 801d512:	4313      	orrs	r3, r2
 801d514:	4916      	ldr	r1, [pc, #88]	; (801d570 <rint+0x100>)
 801d516:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d51a:	4622      	mov	r2, r4
 801d51c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d520:	4620      	mov	r0, r4
 801d522:	4629      	mov	r1, r5
 801d524:	f7e2 fe82 	bl	800022c <__adddf3>
 801d528:	e9cd 0100 	strd	r0, r1, [sp]
 801d52c:	4622      	mov	r2, r4
 801d52e:	462b      	mov	r3, r5
 801d530:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d534:	f7e2 fe78 	bl	8000228 <__aeabi_dsub>
 801d538:	e7d2      	b.n	801d4e0 <rint+0x70>
 801d53a:	2e33      	cmp	r6, #51	; 0x33
 801d53c:	dd07      	ble.n	801d54e <rint+0xde>
 801d53e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d542:	d1cd      	bne.n	801d4e0 <rint+0x70>
 801d544:	ee10 2a10 	vmov	r2, s0
 801d548:	f7e2 fe70 	bl	800022c <__adddf3>
 801d54c:	e7c8      	b.n	801d4e0 <rint+0x70>
 801d54e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d552:	f04f 32ff 	mov.w	r2, #4294967295
 801d556:	40f2      	lsrs	r2, r6
 801d558:	4210      	tst	r0, r2
 801d55a:	d0c1      	beq.n	801d4e0 <rint+0x70>
 801d55c:	0852      	lsrs	r2, r2, #1
 801d55e:	4210      	tst	r0, r2
 801d560:	bf1f      	itttt	ne
 801d562:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d566:	ea20 0202 	bicne.w	r2, r0, r2
 801d56a:	4134      	asrne	r4, r6
 801d56c:	4314      	orrne	r4, r2
 801d56e:	e7d1      	b.n	801d514 <rint+0xa4>
 801d570:	0801e0a8 	.word	0x0801e0a8
 801d574:	000fffff 	.word	0x000fffff

0801d578 <scalbn>:
 801d578:	b570      	push	{r4, r5, r6, lr}
 801d57a:	ec55 4b10 	vmov	r4, r5, d0
 801d57e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d582:	4606      	mov	r6, r0
 801d584:	462b      	mov	r3, r5
 801d586:	b9aa      	cbnz	r2, 801d5b4 <scalbn+0x3c>
 801d588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d58c:	4323      	orrs	r3, r4
 801d58e:	d03b      	beq.n	801d608 <scalbn+0x90>
 801d590:	4b31      	ldr	r3, [pc, #196]	; (801d658 <scalbn+0xe0>)
 801d592:	4629      	mov	r1, r5
 801d594:	2200      	movs	r2, #0
 801d596:	ee10 0a10 	vmov	r0, s0
 801d59a:	f7e2 fffd 	bl	8000598 <__aeabi_dmul>
 801d59e:	4b2f      	ldr	r3, [pc, #188]	; (801d65c <scalbn+0xe4>)
 801d5a0:	429e      	cmp	r6, r3
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	460d      	mov	r5, r1
 801d5a6:	da12      	bge.n	801d5ce <scalbn+0x56>
 801d5a8:	a327      	add	r3, pc, #156	; (adr r3, 801d648 <scalbn+0xd0>)
 801d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ae:	f7e2 fff3 	bl	8000598 <__aeabi_dmul>
 801d5b2:	e009      	b.n	801d5c8 <scalbn+0x50>
 801d5b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d5b8:	428a      	cmp	r2, r1
 801d5ba:	d10c      	bne.n	801d5d6 <scalbn+0x5e>
 801d5bc:	ee10 2a10 	vmov	r2, s0
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	f7e2 fe32 	bl	800022c <__adddf3>
 801d5c8:	4604      	mov	r4, r0
 801d5ca:	460d      	mov	r5, r1
 801d5cc:	e01c      	b.n	801d608 <scalbn+0x90>
 801d5ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d5d2:	460b      	mov	r3, r1
 801d5d4:	3a36      	subs	r2, #54	; 0x36
 801d5d6:	4432      	add	r2, r6
 801d5d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d5dc:	428a      	cmp	r2, r1
 801d5de:	dd0b      	ble.n	801d5f8 <scalbn+0x80>
 801d5e0:	ec45 4b11 	vmov	d1, r4, r5
 801d5e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d650 <scalbn+0xd8>
 801d5e8:	f000 f83c 	bl	801d664 <copysign>
 801d5ec:	a318      	add	r3, pc, #96	; (adr r3, 801d650 <scalbn+0xd8>)
 801d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5f2:	ec51 0b10 	vmov	r0, r1, d0
 801d5f6:	e7da      	b.n	801d5ae <scalbn+0x36>
 801d5f8:	2a00      	cmp	r2, #0
 801d5fa:	dd08      	ble.n	801d60e <scalbn+0x96>
 801d5fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d604:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d608:	ec45 4b10 	vmov	d0, r4, r5
 801d60c:	bd70      	pop	{r4, r5, r6, pc}
 801d60e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d612:	da0d      	bge.n	801d630 <scalbn+0xb8>
 801d614:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d618:	429e      	cmp	r6, r3
 801d61a:	ec45 4b11 	vmov	d1, r4, r5
 801d61e:	dce1      	bgt.n	801d5e4 <scalbn+0x6c>
 801d620:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d648 <scalbn+0xd0>
 801d624:	f000 f81e 	bl	801d664 <copysign>
 801d628:	a307      	add	r3, pc, #28	; (adr r3, 801d648 <scalbn+0xd0>)
 801d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d62e:	e7e0      	b.n	801d5f2 <scalbn+0x7a>
 801d630:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d634:	3236      	adds	r2, #54	; 0x36
 801d636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d63a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d63e:	4620      	mov	r0, r4
 801d640:	4629      	mov	r1, r5
 801d642:	2200      	movs	r2, #0
 801d644:	4b06      	ldr	r3, [pc, #24]	; (801d660 <scalbn+0xe8>)
 801d646:	e7b2      	b.n	801d5ae <scalbn+0x36>
 801d648:	c2f8f359 	.word	0xc2f8f359
 801d64c:	01a56e1f 	.word	0x01a56e1f
 801d650:	8800759c 	.word	0x8800759c
 801d654:	7e37e43c 	.word	0x7e37e43c
 801d658:	43500000 	.word	0x43500000
 801d65c:	ffff3cb0 	.word	0xffff3cb0
 801d660:	3c900000 	.word	0x3c900000

0801d664 <copysign>:
 801d664:	ec51 0b10 	vmov	r0, r1, d0
 801d668:	ee11 0a90 	vmov	r0, s3
 801d66c:	ee10 2a10 	vmov	r2, s0
 801d670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d674:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d678:	ea41 0300 	orr.w	r3, r1, r0
 801d67c:	ec43 2b10 	vmov	d0, r2, r3
 801d680:	4770      	bx	lr
	...

0801d684 <_init>:
 801d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d686:	bf00      	nop
 801d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d68a:	bc08      	pop	{r3}
 801d68c:	469e      	mov	lr, r3
 801d68e:	4770      	bx	lr

0801d690 <_fini>:
 801d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d692:	bf00      	nop
 801d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d696:	bc08      	pop	{r3}
 801d698:	469e      	mov	lr, r3
 801d69a:	4770      	bx	lr
